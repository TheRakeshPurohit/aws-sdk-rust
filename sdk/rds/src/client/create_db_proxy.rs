// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateDBProxy`](crate::operation::create_db_proxy::builders::CreateDBProxyFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`db_proxy_name(impl Into<String>)`](crate::operation::create_db_proxy::builders::CreateDBProxyFluentBuilder::db_proxy_name) / [`set_db_proxy_name(Option<String>)`](crate::operation::create_db_proxy::builders::CreateDBProxyFluentBuilder::set_db_proxy_name):<br>required: **true**<br><p>The identifier for the proxy. This name must be unique for all proxies owned by your Amazon Web Services account in the specified Amazon Web Services Region. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.</p><br>
    ///   - [`engine_family(EngineFamily)`](crate::operation::create_db_proxy::builders::CreateDBProxyFluentBuilder::engine_family) / [`set_engine_family(Option<EngineFamily>)`](crate::operation::create_db_proxy::builders::CreateDBProxyFluentBuilder::set_engine_family):<br>required: **true**<br><p>The kinds of databases that the proxy can connect to. This value determines which database network protocol the proxy recognizes when it interprets network traffic to and from the database. For Aurora MySQL, RDS for MariaDB, and RDS for MySQL databases, specify <code>MYSQL</code>. For Aurora PostgreSQL and RDS for PostgreSQL databases, specify <code>POSTGRESQL</code>. For RDS for Microsoft SQL Server, specify <code>SQLSERVER</code>.</p><br>
    ///   - [`default_auth_scheme(DefaultAuthScheme)`](crate::operation::create_db_proxy::builders::CreateDBProxyFluentBuilder::default_auth_scheme) / [`set_default_auth_scheme(Option<DefaultAuthScheme>)`](crate::operation::create_db_proxy::builders::CreateDBProxyFluentBuilder::set_default_auth_scheme):<br>required: **false**<br><p>The default authentication scheme that the proxy uses for client connections to the proxy and connections from the proxy to the underlying database. Valid values are <code>NONE</code> and <code>IAM_AUTH</code>. When set to <code>IAM_AUTH</code>, the proxy uses end-to-end IAM authentication to connect to the database. If you don't specify <code>DefaultAuthScheme</code> or specify this parameter as <code>NONE</code>, you must specify the <code>Auth</code> option.</p><br>
    ///   - [`auth(UserAuthConfig)`](crate::operation::create_db_proxy::builders::CreateDBProxyFluentBuilder::auth) / [`set_auth(Option<Vec::<UserAuthConfig>>)`](crate::operation::create_db_proxy::builders::CreateDBProxyFluentBuilder::set_auth):<br>required: **false**<br><p>The authorization mechanism that the proxy uses.</p><br>
    ///   - [`role_arn(impl Into<String>)`](crate::operation::create_db_proxy::builders::CreateDBProxyFluentBuilder::role_arn) / [`set_role_arn(Option<String>)`](crate::operation::create_db_proxy::builders::CreateDBProxyFluentBuilder::set_role_arn):<br>required: **true**<br><p>The Amazon Resource Name (ARN) of the IAM role that the proxy uses to access secrets in Amazon Web Services Secrets Manager.</p><br>
    ///   - [`vpc_subnet_ids(impl Into<String>)`](crate::operation::create_db_proxy::builders::CreateDBProxyFluentBuilder::vpc_subnet_ids) / [`set_vpc_subnet_ids(Option<Vec::<String>>)`](crate::operation::create_db_proxy::builders::CreateDBProxyFluentBuilder::set_vpc_subnet_ids):<br>required: **true**<br><p>One or more VPC subnet IDs to associate with the new proxy.</p><br>
    ///   - [`vpc_security_group_ids(impl Into<String>)`](crate::operation::create_db_proxy::builders::CreateDBProxyFluentBuilder::vpc_security_group_ids) / [`set_vpc_security_group_ids(Option<Vec::<String>>)`](crate::operation::create_db_proxy::builders::CreateDBProxyFluentBuilder::set_vpc_security_group_ids):<br>required: **false**<br><p>One or more VPC security group IDs to associate with the new proxy.</p><br>
    ///   - [`require_tls(bool)`](crate::operation::create_db_proxy::builders::CreateDBProxyFluentBuilder::require_tls) / [`set_require_tls(Option<bool>)`](crate::operation::create_db_proxy::builders::CreateDBProxyFluentBuilder::set_require_tls):<br>required: **false**<br><p>Specifies whether Transport Layer Security (TLS) encryption is required for connections to the proxy. By enabling this setting, you can enforce encrypted TLS connections to the proxy.</p><br>
    ///   - [`idle_client_timeout(i32)`](crate::operation::create_db_proxy::builders::CreateDBProxyFluentBuilder::idle_client_timeout) / [`set_idle_client_timeout(Option<i32>)`](crate::operation::create_db_proxy::builders::CreateDBProxyFluentBuilder::set_idle_client_timeout):<br>required: **false**<br><p>The number of seconds that a connection to the proxy can be inactive before the proxy disconnects it. You can set this value higher or lower than the connection timeout limit for the associated database.</p><br>
    ///   - [`debug_logging(bool)`](crate::operation::create_db_proxy::builders::CreateDBProxyFluentBuilder::debug_logging) / [`set_debug_logging(Option<bool>)`](crate::operation::create_db_proxy::builders::CreateDBProxyFluentBuilder::set_debug_logging):<br>required: **false**<br><p>Specifies whether the proxy logs detailed connection and query information. When you enable <code>DebugLogging</code>, the proxy captures connection details and connection pool behavior from your queries. Debug logging increases CloudWatch costs and can impact proxy performance. Enable this option only when you need to troubleshoot connection or performance issues.</p><br>
    ///   - [`tags(Tag)`](crate::operation::create_db_proxy::builders::CreateDBProxyFluentBuilder::tags) / [`set_tags(Option<Vec::<Tag>>)`](crate::operation::create_db_proxy::builders::CreateDBProxyFluentBuilder::set_tags):<br>required: **false**<br><p>An optional set of key-value pairs to associate arbitrary data of your choosing with the proxy.</p><br>
    ///   - [`endpoint_network_type(EndpointNetworkType)`](crate::operation::create_db_proxy::builders::CreateDBProxyFluentBuilder::endpoint_network_type) / [`set_endpoint_network_type(Option<EndpointNetworkType>)`](crate::operation::create_db_proxy::builders::CreateDBProxyFluentBuilder::set_endpoint_network_type):<br>required: **false**<br><p>The network type of the DB proxy endpoint. The network type determines the IP version that the proxy endpoint supports.</p> <p>Valid values:</p> <ul>  <li>   <p><code>IPV4</code> - The proxy endpoint supports IPv4 only.</p></li>  <li>   <p><code>IPV6</code> - The proxy endpoint supports IPv6 only.</p></li>  <li>   <p><code>DUAL</code> - The proxy endpoint supports both IPv4 and IPv6.</p></li> </ul> <p>Default: <code>IPV4</code></p> <p>Constraints:</p> <ul>  <li>   <p>If you specify <code>IPV6</code> or <code>DUAL</code>, the VPC and all subnets must have an IPv6 CIDR block.</p></li>  <li>   <p>If you specify <code>IPV6</code> or <code>DUAL</code>, the VPC tenancy cannot be <code>dedicated</code>.</p></li> </ul><br>
    ///   - [`target_connection_network_type(TargetConnectionNetworkType)`](crate::operation::create_db_proxy::builders::CreateDBProxyFluentBuilder::target_connection_network_type) / [`set_target_connection_network_type(Option<TargetConnectionNetworkType>)`](crate::operation::create_db_proxy::builders::CreateDBProxyFluentBuilder::set_target_connection_network_type):<br>required: **false**<br><p>The network type that the proxy uses to connect to the target database. The network type determines the IP version that the proxy uses for connections to the database.</p> <p>Valid values:</p> <ul>  <li>   <p><code>IPV4</code> - The proxy connects to the database using IPv4 only.</p></li>  <li>   <p><code>IPV6</code> - The proxy connects to the database using IPv6 only.</p></li> </ul> <p>Default: <code>IPV4</code></p> <p>Constraints:</p> <ul>  <li>   <p>If you specify <code>IPV6</code>, the database must support dual-stack mode. RDS doesn't support IPv6-only databases.</p></li>  <li>   <p>All targets registered with the proxy must be compatible with the specified network type.</p></li> </ul><br>
    /// - On success, responds with [`CreateDbProxyOutput`](crate::operation::create_db_proxy::CreateDbProxyOutput) with field(s):
    ///   - [`db_proxy(Option<DbProxy>)`](crate::operation::create_db_proxy::CreateDbProxyOutput::db_proxy): <p>The <code>DBProxy</code> structure corresponding to the new proxy.</p>
    /// - On failure, responds with [`SdkError<CreateDBProxyError>`](crate::operation::create_db_proxy::CreateDBProxyError)
    pub fn create_db_proxy(&self) -> crate::operation::create_db_proxy::builders::CreateDBProxyFluentBuilder {
        crate::operation::create_db_proxy::builders::CreateDBProxyFluentBuilder::new(self.handle.clone())
    }
}
