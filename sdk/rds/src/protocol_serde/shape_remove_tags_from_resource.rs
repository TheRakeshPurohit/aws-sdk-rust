// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn de_remove_tags_from_resource_http_error(
    _response_status: u16,
    _response_headers: &::aws_smithy_runtime_api::http::Headers,
    _response_body: &[u8],
) -> std::result::Result<
    crate::operation::remove_tags_from_resource::RemoveTagsFromResourceOutput,
    crate::operation::remove_tags_from_resource::RemoveTagsFromResourceError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(_response_status, _response_headers, _response_body)
        .map_err(crate::operation::remove_tags_from_resource::RemoveTagsFromResourceError::unhandled)?;
    generic_builder = ::aws_types::request_id::apply_request_id(generic_builder, _response_headers);
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::operation::remove_tags_from_resource::RemoveTagsFromResourceError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "BlueGreenDeploymentNotFoundFault" => {
            crate::operation::remove_tags_from_resource::RemoveTagsFromResourceError::BlueGreenDeploymentNotFoundFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::BlueGreenDeploymentNotFoundFaultBuilder::default();
                    output = crate::protocol_serde::shape_blue_green_deployment_not_found_fault::de_blue_green_deployment_not_found_fault_xml_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::remove_tags_from_resource::RemoveTagsFromResourceError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "DBClusterNotFoundFault" => crate::operation::remove_tags_from_resource::RemoveTagsFromResourceError::DbClusterNotFoundFault({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::DbClusterNotFoundFaultBuilder::default();
                output = crate::protocol_serde::shape_db_cluster_not_found_fault::de_db_cluster_not_found_fault_xml_err(_response_body, output)
                    .map_err(crate::operation::remove_tags_from_resource::RemoveTagsFromResourceError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "DBInstanceNotFound" => crate::operation::remove_tags_from_resource::RemoveTagsFromResourceError::DbInstanceNotFoundFault({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::DbInstanceNotFoundFaultBuilder::default();
                output = crate::protocol_serde::shape_db_instance_not_found_fault::de_db_instance_not_found_fault_xml_err(_response_body, output)
                    .map_err(crate::operation::remove_tags_from_resource::RemoveTagsFromResourceError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "DBProxyEndpointNotFoundFault" => crate::operation::remove_tags_from_resource::RemoveTagsFromResourceError::DbProxyEndpointNotFoundFault({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::DbProxyEndpointNotFoundFaultBuilder::default();
                output = crate::protocol_serde::shape_db_proxy_endpoint_not_found_fault::de_db_proxy_endpoint_not_found_fault_xml_err(
                    _response_body,
                    output,
                )
                .map_err(crate::operation::remove_tags_from_resource::RemoveTagsFromResourceError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "DBProxyNotFoundFault" => crate::operation::remove_tags_from_resource::RemoveTagsFromResourceError::DbProxyNotFoundFault({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::DbProxyNotFoundFaultBuilder::default();
                output = crate::protocol_serde::shape_db_proxy_not_found_fault::de_db_proxy_not_found_fault_xml_err(_response_body, output)
                    .map_err(crate::operation::remove_tags_from_resource::RemoveTagsFromResourceError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "DBProxyTargetGroupNotFoundFault" => {
            crate::operation::remove_tags_from_resource::RemoveTagsFromResourceError::DbProxyTargetGroupNotFoundFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::DbProxyTargetGroupNotFoundFaultBuilder::default();
                    output = crate::protocol_serde::shape_db_proxy_target_group_not_found_fault::de_db_proxy_target_group_not_found_fault_xml_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::remove_tags_from_resource::RemoveTagsFromResourceError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "DBShardGroupNotFound" => crate::operation::remove_tags_from_resource::RemoveTagsFromResourceError::DbShardGroupNotFoundFault({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::DbShardGroupNotFoundFaultBuilder::default();
                output =
                    crate::protocol_serde::shape_db_shard_group_not_found_fault::de_db_shard_group_not_found_fault_xml_err(_response_body, output)
                        .map_err(crate::operation::remove_tags_from_resource::RemoveTagsFromResourceError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "DBSnapshotNotFound" => crate::operation::remove_tags_from_resource::RemoveTagsFromResourceError::DbSnapshotNotFoundFault({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::DbSnapshotNotFoundFaultBuilder::default();
                output = crate::protocol_serde::shape_db_snapshot_not_found_fault::de_db_snapshot_not_found_fault_xml_err(_response_body, output)
                    .map_err(crate::operation::remove_tags_from_resource::RemoveTagsFromResourceError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "DBSnapshotTenantDatabaseNotFoundFault" => {
            crate::operation::remove_tags_from_resource::RemoveTagsFromResourceError::DbSnapshotTenantDatabaseNotFoundFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::DbSnapshotTenantDatabaseNotFoundFaultBuilder::default();
                    output = crate::protocol_serde::shape_db_snapshot_tenant_database_not_found_fault::de_db_snapshot_tenant_database_not_found_fault_xml_err(_response_body, output).map_err(crate::operation::remove_tags_from_resource::RemoveTagsFromResourceError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "IntegrationNotFoundFault" => crate::operation::remove_tags_from_resource::RemoveTagsFromResourceError::IntegrationNotFoundFault({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::IntegrationNotFoundFaultBuilder::default();
                output = crate::protocol_serde::shape_integration_not_found_fault::de_integration_not_found_fault_xml_err(_response_body, output)
                    .map_err(crate::operation::remove_tags_from_resource::RemoveTagsFromResourceError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InvalidDBClusterEndpointStateFault" => {
            crate::operation::remove_tags_from_resource::RemoveTagsFromResourceError::InvalidDbClusterEndpointStateFault({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::InvalidDbClusterEndpointStateFaultBuilder::default();
                    output =
                        crate::protocol_serde::shape_invalid_db_cluster_endpoint_state_fault::de_invalid_db_cluster_endpoint_state_fault_xml_err(
                            _response_body,
                            output,
                        )
                        .map_err(crate::operation::remove_tags_from_resource::RemoveTagsFromResourceError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "InvalidDBClusterStateFault" => crate::operation::remove_tags_from_resource::RemoveTagsFromResourceError::InvalidDbClusterStateFault({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InvalidDbClusterStateFaultBuilder::default();
                output =
                    crate::protocol_serde::shape_invalid_db_cluster_state_fault::de_invalid_db_cluster_state_fault_xml_err(_response_body, output)
                        .map_err(crate::operation::remove_tags_from_resource::RemoveTagsFromResourceError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InvalidDBInstanceState" => crate::operation::remove_tags_from_resource::RemoveTagsFromResourceError::InvalidDbInstanceStateFault({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InvalidDbInstanceStateFaultBuilder::default();
                output =
                    crate::protocol_serde::shape_invalid_db_instance_state_fault::de_invalid_db_instance_state_fault_xml_err(_response_body, output)
                        .map_err(crate::operation::remove_tags_from_resource::RemoveTagsFromResourceError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "TenantDatabaseNotFound" => crate::operation::remove_tags_from_resource::RemoveTagsFromResourceError::TenantDatabaseNotFoundFault({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::TenantDatabaseNotFoundFaultBuilder::default();
                output =
                    crate::protocol_serde::shape_tenant_database_not_found_fault::de_tenant_database_not_found_fault_xml_err(_response_body, output)
                        .map_err(crate::operation::remove_tags_from_resource::RemoveTagsFromResourceError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::operation::remove_tags_from_resource::RemoveTagsFromResourceError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_remove_tags_from_resource_http_response(
    _response_status: u16,
    _response_headers: &::aws_smithy_runtime_api::http::Headers,
    _response_body: &[u8],
) -> std::result::Result<
    crate::operation::remove_tags_from_resource::RemoveTagsFromResourceOutput,
    crate::operation::remove_tags_from_resource::RemoveTagsFromResourceError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::operation::remove_tags_from_resource::builders::RemoveTagsFromResourceOutputBuilder::default();
        output._set_request_id(::aws_types::request_id::RequestId::request_id(_response_headers).map(str::to_string));
        output.build()
    })
}
