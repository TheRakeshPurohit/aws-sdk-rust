// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_restore_db_instance_to_point_in_time_input_input_input(
    input: &crate::operation::restore_db_instance_to_point_in_time::RestoreDbInstanceToPointInTimeInput,
) -> ::std::result::Result<::aws_smithy_types::body::SdkBody, ::aws_smithy_types::error::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = ::aws_smithy_query::QueryWriter::new(&mut out, "RestoreDBInstanceToPointInTime", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("SourceDBInstanceIdentifier");
    if let Some(var_2) = &input.source_db_instance_identifier {
        scope_1.string(var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("TargetDBInstanceIdentifier");
    if let Some(var_4) = &input.target_db_instance_identifier {
        scope_3.string(var_4);
    }
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("RestoreTime");
    if let Some(var_6) = &input.restore_time {
        scope_5.date_time(var_6, ::aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_7 = writer.prefix("UseLatestRestorableTime");
    if let Some(var_8) = &input.use_latest_restorable_time {
        scope_7.boolean(*var_8);
    }
    #[allow(unused_mut)]
    let mut scope_9 = writer.prefix("DBInstanceClass");
    if let Some(var_10) = &input.db_instance_class {
        scope_9.string(var_10);
    }
    #[allow(unused_mut)]
    let mut scope_11 = writer.prefix("Port");
    if let Some(var_12) = &input.port {
        scope_11.number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_12).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_13 = writer.prefix("AvailabilityZone");
    if let Some(var_14) = &input.availability_zone {
        scope_13.string(var_14);
    }
    #[allow(unused_mut)]
    let mut scope_15 = writer.prefix("DBSubnetGroupName");
    if let Some(var_16) = &input.db_subnet_group_name {
        scope_15.string(var_16);
    }
    #[allow(unused_mut)]
    let mut scope_17 = writer.prefix("MultiAZ");
    if let Some(var_18) = &input.multi_az {
        scope_17.boolean(*var_18);
    }
    #[allow(unused_mut)]
    let mut scope_19 = writer.prefix("PubliclyAccessible");
    if let Some(var_20) = &input.publicly_accessible {
        scope_19.boolean(*var_20);
    }
    #[allow(unused_mut)]
    let mut scope_21 = writer.prefix("AutoMinorVersionUpgrade");
    if let Some(var_22) = &input.auto_minor_version_upgrade {
        scope_21.boolean(*var_22);
    }
    #[allow(unused_mut)]
    let mut scope_23 = writer.prefix("LicenseModel");
    if let Some(var_24) = &input.license_model {
        scope_23.string(var_24);
    }
    #[allow(unused_mut)]
    let mut scope_25 = writer.prefix("DBName");
    if let Some(var_26) = &input.db_name {
        scope_25.string(var_26);
    }
    #[allow(unused_mut)]
    let mut scope_27 = writer.prefix("Engine");
    if let Some(var_28) = &input.engine {
        scope_27.string(var_28);
    }
    #[allow(unused_mut)]
    let mut scope_29 = writer.prefix("Iops");
    if let Some(var_30) = &input.iops {
        scope_29.number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_30).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_31 = writer.prefix("StorageThroughput");
    if let Some(var_32) = &input.storage_throughput {
        scope_31.number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_32).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_33 = writer.prefix("OptionGroupName");
    if let Some(var_34) = &input.option_group_name {
        scope_33.string(var_34);
    }
    #[allow(unused_mut)]
    let mut scope_35 = writer.prefix("CopyTagsToSnapshot");
    if let Some(var_36) = &input.copy_tags_to_snapshot {
        scope_35.boolean(*var_36);
    }
    #[allow(unused_mut)]
    let mut scope_37 = writer.prefix("Tags");
    if let Some(var_38) = &input.tags {
        let mut list_40 = scope_37.start_list(false, Some("Tag"));
        for item_39 in var_38 {
            #[allow(unused_mut)]
            let mut entry_41 = list_40.entry();
            crate::protocol_serde::shape_tag::ser_tag(entry_41, item_39)?;
        }
        list_40.finish();
    }
    #[allow(unused_mut)]
    let mut scope_42 = writer.prefix("StorageType");
    if let Some(var_43) = &input.storage_type {
        scope_42.string(var_43);
    }
    #[allow(unused_mut)]
    let mut scope_44 = writer.prefix("TdeCredentialArn");
    if let Some(var_45) = &input.tde_credential_arn {
        scope_44.string(var_45);
    }
    #[allow(unused_mut)]
    let mut scope_46 = writer.prefix("TdeCredentialPassword");
    if let Some(var_47) = &input.tde_credential_password {
        scope_46.string(var_47);
    }
    #[allow(unused_mut)]
    let mut scope_48 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_49) = &input.vpc_security_group_ids {
        let mut list_51 = scope_48.start_list(false, Some("VpcSecurityGroupId"));
        for item_50 in var_49 {
            #[allow(unused_mut)]
            let mut entry_52 = list_51.entry();
            entry_52.string(item_50);
        }
        list_51.finish();
    }
    #[allow(unused_mut)]
    let mut scope_53 = writer.prefix("Domain");
    if let Some(var_54) = &input.domain {
        scope_53.string(var_54);
    }
    #[allow(unused_mut)]
    let mut scope_55 = writer.prefix("DomainIAMRoleName");
    if let Some(var_56) = &input.domain_iam_role_name {
        scope_55.string(var_56);
    }
    #[allow(unused_mut)]
    let mut scope_57 = writer.prefix("DomainFqdn");
    if let Some(var_58) = &input.domain_fqdn {
        scope_57.string(var_58);
    }
    #[allow(unused_mut)]
    let mut scope_59 = writer.prefix("DomainOu");
    if let Some(var_60) = &input.domain_ou {
        scope_59.string(var_60);
    }
    #[allow(unused_mut)]
    let mut scope_61 = writer.prefix("DomainAuthSecretArn");
    if let Some(var_62) = &input.domain_auth_secret_arn {
        scope_61.string(var_62);
    }
    #[allow(unused_mut)]
    let mut scope_63 = writer.prefix("DomainDnsIps");
    if let Some(var_64) = &input.domain_dns_ips {
        let mut list_66 = scope_63.start_list(false, None);
        for item_65 in var_64 {
            #[allow(unused_mut)]
            let mut entry_67 = list_66.entry();
            entry_67.string(item_65);
        }
        list_66.finish();
    }
    #[allow(unused_mut)]
    let mut scope_68 = writer.prefix("EnableIAMDatabaseAuthentication");
    if let Some(var_69) = &input.enable_iam_database_authentication {
        scope_68.boolean(*var_69);
    }
    #[allow(unused_mut)]
    let mut scope_70 = writer.prefix("EnableCloudwatchLogsExports");
    if let Some(var_71) = &input.enable_cloudwatch_logs_exports {
        let mut list_73 = scope_70.start_list(false, None);
        for item_72 in var_71 {
            #[allow(unused_mut)]
            let mut entry_74 = list_73.entry();
            entry_74.string(item_72);
        }
        list_73.finish();
    }
    #[allow(unused_mut)]
    let mut scope_75 = writer.prefix("ProcessorFeatures");
    if let Some(var_76) = &input.processor_features {
        let mut list_78 = scope_75.start_list(false, Some("ProcessorFeature"));
        for item_77 in var_76 {
            #[allow(unused_mut)]
            let mut entry_79 = list_78.entry();
            crate::protocol_serde::shape_processor_feature::ser_processor_feature(entry_79, item_77)?;
        }
        list_78.finish();
    }
    #[allow(unused_mut)]
    let mut scope_80 = writer.prefix("UseDefaultProcessorFeatures");
    if let Some(var_81) = &input.use_default_processor_features {
        scope_80.boolean(*var_81);
    }
    #[allow(unused_mut)]
    let mut scope_82 = writer.prefix("DBParameterGroupName");
    if let Some(var_83) = &input.db_parameter_group_name {
        scope_82.string(var_83);
    }
    #[allow(unused_mut)]
    let mut scope_84 = writer.prefix("DeletionProtection");
    if let Some(var_85) = &input.deletion_protection {
        scope_84.boolean(*var_85);
    }
    #[allow(unused_mut)]
    let mut scope_86 = writer.prefix("SourceDbiResourceId");
    if let Some(var_87) = &input.source_dbi_resource_id {
        scope_86.string(var_87);
    }
    #[allow(unused_mut)]
    let mut scope_88 = writer.prefix("MaxAllocatedStorage");
    if let Some(var_89) = &input.max_allocated_storage {
        scope_88.number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_89).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_90 = writer.prefix("EnableCustomerOwnedIp");
    if let Some(var_91) = &input.enable_customer_owned_ip {
        scope_90.boolean(*var_91);
    }
    #[allow(unused_mut)]
    let mut scope_92 = writer.prefix("NetworkType");
    if let Some(var_93) = &input.network_type {
        scope_92.string(var_93);
    }
    #[allow(unused_mut)]
    let mut scope_94 = writer.prefix("SourceDBInstanceAutomatedBackupsArn");
    if let Some(var_95) = &input.source_db_instance_automated_backups_arn {
        scope_94.string(var_95);
    }
    #[allow(unused_mut)]
    let mut scope_96 = writer.prefix("BackupTarget");
    if let Some(var_97) = &input.backup_target {
        scope_96.string(var_97);
    }
    #[allow(unused_mut)]
    let mut scope_98 = writer.prefix("CustomIamInstanceProfile");
    if let Some(var_99) = &input.custom_iam_instance_profile {
        scope_98.string(var_99);
    }
    #[allow(unused_mut)]
    let mut scope_100 = writer.prefix("AllocatedStorage");
    if let Some(var_101) = &input.allocated_storage {
        scope_100.number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_101).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_102 = writer.prefix("DedicatedLogVolume");
    if let Some(var_103) = &input.dedicated_log_volume {
        scope_102.boolean(*var_103);
    }
    #[allow(unused_mut)]
    let mut scope_104 = writer.prefix("CACertificateIdentifier");
    if let Some(var_105) = &input.ca_certificate_identifier {
        scope_104.string(var_105);
    }
    #[allow(unused_mut)]
    let mut scope_106 = writer.prefix("EngineLifecycleSupport");
    if let Some(var_107) = &input.engine_lifecycle_support {
        scope_106.string(var_107);
    }
    #[allow(unused_mut)]
    let mut scope_108 = writer.prefix("ManageMasterUserPassword");
    if let Some(var_109) = &input.manage_master_user_password {
        scope_108.boolean(*var_109);
    }
    #[allow(unused_mut)]
    let mut scope_110 = writer.prefix("MasterUserSecretKmsKeyId");
    if let Some(var_111) = &input.master_user_secret_kms_key_id {
        scope_110.string(var_111);
    }
    writer.finish();
    Ok(::aws_smithy_types::body::SdkBody::from(out))
}
