// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::describe_multi_region_parameter_groups::_describe_multi_region_parameter_groups_output::DescribeMultiRegionParameterGroupsOutputBuilder;

pub use crate::operation::describe_multi_region_parameter_groups::_describe_multi_region_parameter_groups_input::DescribeMultiRegionParameterGroupsInputBuilder;

impl crate::operation::describe_multi_region_parameter_groups::builders::DescribeMultiRegionParameterGroupsInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::describe_multi_region_parameter_groups::DescribeMultiRegionParameterGroupsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_multi_region_parameter_groups::DescribeMultiRegionParameterGroupsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.describe_multi_region_parameter_groups();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `DescribeMultiRegionParameterGroups`.
///
/// <p>Returns a list of multi-region parameter groups.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct DescribeMultiRegionParameterGroupsFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::describe_multi_region_parameter_groups::builders::DescribeMultiRegionParameterGroupsInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::describe_multi_region_parameter_groups::DescribeMultiRegionParameterGroupsOutput,
        crate::operation::describe_multi_region_parameter_groups::DescribeMultiRegionParameterGroupsError,
    > for DescribeMultiRegionParameterGroupsFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::describe_multi_region_parameter_groups::DescribeMultiRegionParameterGroupsOutput,
            crate::operation::describe_multi_region_parameter_groups::DescribeMultiRegionParameterGroupsError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl DescribeMultiRegionParameterGroupsFluentBuilder {
    /// Creates a new `DescribeMultiRegionParameterGroupsFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the DescribeMultiRegionParameterGroups as a reference.
    pub fn as_input(&self) -> &crate::operation::describe_multi_region_parameter_groups::builders::DescribeMultiRegionParameterGroupsInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::describe_multi_region_parameter_groups::DescribeMultiRegionParameterGroupsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_multi_region_parameter_groups::DescribeMultiRegionParameterGroupsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::describe_multi_region_parameter_groups::DescribeMultiRegionParameterGroups::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::describe_multi_region_parameter_groups::DescribeMultiRegionParameterGroups::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::describe_multi_region_parameter_groups::DescribeMultiRegionParameterGroupsOutput,
        crate::operation::describe_multi_region_parameter_groups::DescribeMultiRegionParameterGroupsError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The request for information on a specific multi-region parameter group.</p>
    pub fn multi_region_parameter_group_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.multi_region_parameter_group_name(input.into());
        self
    }
    /// <p>The request for information on a specific multi-region parameter group.</p>
    pub fn set_multi_region_parameter_group_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_multi_region_parameter_group_name(input);
        self
    }
    /// <p>The request for information on a specific multi-region parameter group.</p>
    pub fn get_multi_region_parameter_group_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_multi_region_parameter_group_name()
    }
    /// <p>The maximum number of records to include in the response. If more records exist than the specified MaxResults value, a token is included in the response so that the remaining results can be retrieved.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of records to include in the response. If more records exist than the specified MaxResults value, a token is included in the response so that the remaining results can be retrieved.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>The maximum number of records to include in the response. If more records exist than the specified MaxResults value, a token is included in the response so that the remaining results can be retrieved.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        self.inner.get_max_results()
    }
    /// <p>An optional token returned from a prior request. Use this token for pagination of results from this action. If this parameter is specified, the response includes only results beyond the token, up to the value specified by MaxResults.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>An optional token returned from a prior request. Use this token for pagination of results from this action. If this parameter is specified, the response includes only results beyond the token, up to the value specified by MaxResults.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>An optional token returned from a prior request. Use this token for pagination of results from this action. If this parameter is specified, the response includes only results beyond the token, up to the value specified by MaxResults.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_next_token()
    }
}
