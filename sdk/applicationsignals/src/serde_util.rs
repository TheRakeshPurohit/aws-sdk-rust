// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn throttling_exception_correct_errors(
    mut builder: crate::types::error::builders::ThrottlingExceptionBuilder,
) -> crate::types::error::builders::ThrottlingExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn batch_get_service_level_objective_budget_report_output_output_correct_errors(
    mut builder: crate::operation::batch_get_service_level_objective_budget_report::builders::BatchGetServiceLevelObjectiveBudgetReportOutputBuilder,
) -> crate::operation::batch_get_service_level_objective_budget_report::builders::BatchGetServiceLevelObjectiveBudgetReportOutputBuilder {
    if builder.timestamp.is_none() {
        builder.timestamp = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.reports.is_none() {
        builder.reports = Some(Default::default())
    }
    if builder.errors.is_none() {
        builder.errors = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_not_found_exception_correct_errors(
    mut builder: crate::types::error::builders::ResourceNotFoundExceptionBuilder,
) -> crate::types::error::builders::ResourceNotFoundExceptionBuilder {
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn batch_update_exclusion_windows_output_output_correct_errors(
    mut builder: crate::operation::batch_update_exclusion_windows::builders::BatchUpdateExclusionWindowsOutputBuilder,
) -> crate::operation::batch_update_exclusion_windows::builders::BatchUpdateExclusionWindowsOutputBuilder {
    if builder.slo_ids.is_none() {
        builder.slo_ids = Some(Default::default())
    }
    if builder.errors.is_none() {
        builder.errors = Some(Default::default())
    }
    builder
}

pub(crate) fn conflict_exception_correct_errors(
    mut builder: crate::types::error::builders::ConflictExceptionBuilder,
) -> crate::types::error::builders::ConflictExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn service_quota_exceeded_exception_correct_errors(
    mut builder: crate::types::error::builders::ServiceQuotaExceededExceptionBuilder,
) -> crate::types::error::builders::ServiceQuotaExceededExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn create_service_level_objective_output_output_correct_errors(
    mut builder: crate::operation::create_service_level_objective::builders::CreateServiceLevelObjectiveOutputBuilder,
) -> crate::operation::create_service_level_objective::builders::CreateServiceLevelObjectiveOutputBuilder {
    if builder.slo.is_none() {
        builder.slo = {
            let builder = crate::types::builders::ServiceLevelObjectiveBuilder::default();
            crate::serde_util::service_level_objective_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_service_output_output_correct_errors(
    mut builder: crate::operation::get_service::builders::GetServiceOutputBuilder,
) -> crate::operation::get_service::builders::GetServiceOutputBuilder {
    if builder.service.is_none() {
        builder.service = {
            let builder = crate::types::builders::ServiceBuilder::default();
            crate::serde_util::service_correct_errors(builder).build().ok()
        }
    }
    if builder.start_time.is_none() {
        builder.start_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.end_time.is_none() {
        builder.end_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn get_service_level_objective_output_output_correct_errors(
    mut builder: crate::operation::get_service_level_objective::builders::GetServiceLevelObjectiveOutputBuilder,
) -> crate::operation::get_service_level_objective::builders::GetServiceLevelObjectiveOutputBuilder {
    if builder.slo.is_none() {
        builder.slo = {
            let builder = crate::types::builders::ServiceLevelObjectiveBuilder::default();
            crate::serde_util::service_level_objective_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn list_audit_findings_output_output_correct_errors(
    mut builder: crate::operation::list_audit_findings::builders::ListAuditFindingsOutputBuilder,
) -> crate::operation::list_audit_findings::builders::ListAuditFindingsOutputBuilder {
    if builder.audit_findings.is_none() {
        builder.audit_findings = Some(Default::default())
    }
    builder
}

pub(crate) fn list_grouping_attribute_definitions_output_output_correct_errors(
    mut builder: crate::operation::list_grouping_attribute_definitions::builders::ListGroupingAttributeDefinitionsOutputBuilder,
) -> crate::operation::list_grouping_attribute_definitions::builders::ListGroupingAttributeDefinitionsOutputBuilder {
    if builder.grouping_attribute_definitions.is_none() {
        builder.grouping_attribute_definitions = Some(Default::default())
    }
    builder
}

pub(crate) fn list_service_dependencies_output_output_correct_errors(
    mut builder: crate::operation::list_service_dependencies::builders::ListServiceDependenciesOutputBuilder,
) -> crate::operation::list_service_dependencies::builders::ListServiceDependenciesOutputBuilder {
    if builder.start_time.is_none() {
        builder.start_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.end_time.is_none() {
        builder.end_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.service_dependencies.is_none() {
        builder.service_dependencies = Some(Default::default())
    }
    builder
}

pub(crate) fn list_service_dependents_output_output_correct_errors(
    mut builder: crate::operation::list_service_dependents::builders::ListServiceDependentsOutputBuilder,
) -> crate::operation::list_service_dependents::builders::ListServiceDependentsOutputBuilder {
    if builder.start_time.is_none() {
        builder.start_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.end_time.is_none() {
        builder.end_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.service_dependents.is_none() {
        builder.service_dependents = Some(Default::default())
    }
    builder
}

pub(crate) fn list_service_level_objective_exclusion_windows_output_output_correct_errors(
    mut builder: crate::operation::list_service_level_objective_exclusion_windows::builders::ListServiceLevelObjectiveExclusionWindowsOutputBuilder,
) -> crate::operation::list_service_level_objective_exclusion_windows::builders::ListServiceLevelObjectiveExclusionWindowsOutputBuilder {
    if builder.exclusion_windows.is_none() {
        builder.exclusion_windows = Some(Default::default())
    }
    builder
}

pub(crate) fn list_service_operations_output_output_correct_errors(
    mut builder: crate::operation::list_service_operations::builders::ListServiceOperationsOutputBuilder,
) -> crate::operation::list_service_operations::builders::ListServiceOperationsOutputBuilder {
    if builder.start_time.is_none() {
        builder.start_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.end_time.is_none() {
        builder.end_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.service_operations.is_none() {
        builder.service_operations = Some(Default::default())
    }
    builder
}

pub(crate) fn list_service_states_output_output_correct_errors(
    mut builder: crate::operation::list_service_states::builders::ListServiceStatesOutputBuilder,
) -> crate::operation::list_service_states::builders::ListServiceStatesOutputBuilder {
    if builder.start_time.is_none() {
        builder.start_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.end_time.is_none() {
        builder.end_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.service_states.is_none() {
        builder.service_states = Some(Default::default())
    }
    builder
}

pub(crate) fn list_services_output_output_correct_errors(
    mut builder: crate::operation::list_services::builders::ListServicesOutputBuilder,
) -> crate::operation::list_services::builders::ListServicesOutputBuilder {
    if builder.start_time.is_none() {
        builder.start_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.end_time.is_none() {
        builder.end_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.service_summaries.is_none() {
        builder.service_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn put_grouping_configuration_output_output_correct_errors(
    mut builder: crate::operation::put_grouping_configuration::builders::PutGroupingConfigurationOutputBuilder,
) -> crate::operation::put_grouping_configuration::builders::PutGroupingConfigurationOutputBuilder {
    if builder.grouping_configuration.is_none() {
        builder.grouping_configuration = {
            let builder = crate::types::builders::GroupingConfigurationBuilder::default();
            crate::serde_util::grouping_configuration_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn update_service_level_objective_output_output_correct_errors(
    mut builder: crate::operation::update_service_level_objective::builders::UpdateServiceLevelObjectiveOutputBuilder,
) -> crate::operation::update_service_level_objective::builders::UpdateServiceLevelObjectiveOutputBuilder {
    if builder.slo.is_none() {
        builder.slo = {
            let builder = crate::types::builders::ServiceLevelObjectiveBuilder::default();
            crate::serde_util::service_level_objective_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn service_level_objective_correct_errors(
    mut builder: crate::types::builders::ServiceLevelObjectiveBuilder,
) -> crate::types::builders::ServiceLevelObjectiveBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.created_time.is_none() {
        builder.created_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_updated_time.is_none() {
        builder.last_updated_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.goal.is_none() {
        builder.goal = {
            let builder = crate::types::builders::GoalBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn service_correct_errors(mut builder: crate::types::builders::ServiceBuilder) -> crate::types::builders::ServiceBuilder {
    if builder.key_attributes.is_none() {
        builder.key_attributes = Some(Default::default())
    }
    if builder.metric_references.is_none() {
        builder.metric_references = Some(Default::default())
    }
    builder
}

pub(crate) fn grouping_configuration_correct_errors(
    mut builder: crate::types::builders::GroupingConfigurationBuilder,
) -> crate::types::builders::GroupingConfigurationBuilder {
    if builder.grouping_attribute_definitions.is_none() {
        builder.grouping_attribute_definitions = Some(Default::default())
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn audit_finding_correct_errors(mut builder: crate::types::builders::AuditFindingBuilder) -> crate::types::builders::AuditFindingBuilder {
    if builder.key_attributes.is_none() {
        builder.key_attributes = Some(Default::default())
    }
    builder
}

pub(crate) fn batch_update_exclusion_windows_error_correct_errors(
    mut builder: crate::types::builders::BatchUpdateExclusionWindowsErrorBuilder,
) -> crate::types::builders::BatchUpdateExclusionWindowsErrorBuilder {
    if builder.slo_id.is_none() {
        builder.slo_id = Some(Default::default())
    }
    if builder.error_code.is_none() {
        builder.error_code = Some(Default::default())
    }
    if builder.error_message.is_none() {
        builder.error_message = Some(Default::default())
    }
    builder
}

pub(crate) fn exclusion_window_correct_errors(
    mut builder: crate::types::builders::ExclusionWindowBuilder,
) -> crate::types::builders::ExclusionWindowBuilder {
    if builder.window.is_none() {
        builder.window = {
            let builder = crate::types::builders::WindowBuilder::default();
            crate::serde_util::window_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn grouping_attribute_definition_correct_errors(
    mut builder: crate::types::builders::GroupingAttributeDefinitionBuilder,
) -> crate::types::builders::GroupingAttributeDefinitionBuilder {
    if builder.grouping_name.is_none() {
        builder.grouping_name = Some(Default::default())
    }
    builder
}

pub(crate) fn request_based_service_level_indicator_correct_errors(
    mut builder: crate::types::builders::RequestBasedServiceLevelIndicatorBuilder,
) -> crate::types::builders::RequestBasedServiceLevelIndicatorBuilder {
    if builder.request_based_sli_metric.is_none() {
        builder.request_based_sli_metric = {
            let builder = crate::types::builders::RequestBasedServiceLevelIndicatorMetricBuilder::default();
            crate::serde_util::request_based_service_level_indicator_metric_correct_errors(builder)
                .build()
                .ok()
        }
    }
    builder
}

pub(crate) fn service_dependency_correct_errors(
    mut builder: crate::types::builders::ServiceDependencyBuilder,
) -> crate::types::builders::ServiceDependencyBuilder {
    if builder.operation_name.is_none() {
        builder.operation_name = Some(Default::default())
    }
    if builder.dependency_key_attributes.is_none() {
        builder.dependency_key_attributes = Some(Default::default())
    }
    if builder.dependency_operation_name.is_none() {
        builder.dependency_operation_name = Some(Default::default())
    }
    if builder.metric_references.is_none() {
        builder.metric_references = Some(Default::default())
    }
    builder
}

pub(crate) fn service_dependent_correct_errors(
    mut builder: crate::types::builders::ServiceDependentBuilder,
) -> crate::types::builders::ServiceDependentBuilder {
    if builder.dependent_key_attributes.is_none() {
        builder.dependent_key_attributes = Some(Default::default())
    }
    if builder.metric_references.is_none() {
        builder.metric_references = Some(Default::default())
    }
    builder
}

pub(crate) fn service_level_indicator_correct_errors(
    mut builder: crate::types::builders::ServiceLevelIndicatorBuilder,
) -> crate::types::builders::ServiceLevelIndicatorBuilder {
    if builder.sli_metric.is_none() {
        builder.sli_metric = {
            let builder = crate::types::builders::ServiceLevelIndicatorMetricBuilder::default();
            crate::serde_util::service_level_indicator_metric_correct_errors(builder).build().ok()
        }
    }
    if builder.metric_threshold.is_none() {
        builder.metric_threshold = Some(Default::default())
    }
    if builder.comparison_operator.is_none() {
        builder.comparison_operator = "no value was set".parse::<crate::types::ServiceLevelIndicatorComparisonOperator>().ok()
    }
    builder
}

pub(crate) fn service_level_objective_budget_report_correct_errors(
    mut builder: crate::types::builders::ServiceLevelObjectiveBudgetReportBuilder,
) -> crate::types::builders::ServiceLevelObjectiveBudgetReportBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.budget_status.is_none() {
        builder.budget_status = "no value was set".parse::<crate::types::ServiceLevelObjectiveBudgetStatus>().ok()
    }
    builder
}

pub(crate) fn service_level_objective_budget_report_error_correct_errors(
    mut builder: crate::types::builders::ServiceLevelObjectiveBudgetReportErrorBuilder,
) -> crate::types::builders::ServiceLevelObjectiveBudgetReportErrorBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.error_code.is_none() {
        builder.error_code = Some(Default::default())
    }
    if builder.error_message.is_none() {
        builder.error_message = Some(Default::default())
    }
    builder
}

pub(crate) fn service_level_objective_summary_correct_errors(
    mut builder: crate::types::builders::ServiceLevelObjectiveSummaryBuilder,
) -> crate::types::builders::ServiceLevelObjectiveSummaryBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn service_operation_correct_errors(
    mut builder: crate::types::builders::ServiceOperationBuilder,
) -> crate::types::builders::ServiceOperationBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.metric_references.is_none() {
        builder.metric_references = Some(Default::default())
    }
    builder
}

pub(crate) fn service_state_correct_errors(mut builder: crate::types::builders::ServiceStateBuilder) -> crate::types::builders::ServiceStateBuilder {
    if builder.service.is_none() {
        builder.service = Some(Default::default())
    }
    if builder.latest_change_events.is_none() {
        builder.latest_change_events = Some(Default::default())
    }
    builder
}

pub(crate) fn service_summary_correct_errors(
    mut builder: crate::types::builders::ServiceSummaryBuilder,
) -> crate::types::builders::ServiceSummaryBuilder {
    if builder.key_attributes.is_none() {
        builder.key_attributes = Some(Default::default())
    }
    if builder.metric_references.is_none() {
        builder.metric_references = Some(Default::default())
    }
    builder
}

pub(crate) fn tag_correct_errors(mut builder: crate::types::builders::TagBuilder) -> crate::types::builders::TagBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn burn_rate_configuration_correct_errors(
    mut builder: crate::types::builders::BurnRateConfigurationBuilder,
) -> crate::types::builders::BurnRateConfigurationBuilder {
    if builder.look_back_window_minutes.is_none() {
        builder.look_back_window_minutes = Some(Default::default())
    }
    builder
}

pub(crate) fn dependency_config_correct_errors(
    mut builder: crate::types::builders::DependencyConfigBuilder,
) -> crate::types::builders::DependencyConfigBuilder {
    if builder.dependency_key_attributes.is_none() {
        builder.dependency_key_attributes = Some(Default::default())
    }
    if builder.dependency_operation_name.is_none() {
        builder.dependency_operation_name = Some(Default::default())
    }
    builder
}

pub(crate) fn metric_reference_correct_errors(
    mut builder: crate::types::builders::MetricReferenceBuilder,
) -> crate::types::builders::MetricReferenceBuilder {
    if builder.namespace.is_none() {
        builder.namespace = Some(Default::default())
    }
    if builder.metric_type.is_none() {
        builder.metric_type = Some(Default::default())
    }
    if builder.metric_name.is_none() {
        builder.metric_name = Some(Default::default())
    }
    builder
}

pub(crate) fn recurrence_rule_correct_errors(
    mut builder: crate::types::builders::RecurrenceRuleBuilder,
) -> crate::types::builders::RecurrenceRuleBuilder {
    if builder.expression.is_none() {
        builder.expression = Some(Default::default())
    }
    builder
}

pub(crate) fn request_based_service_level_indicator_metric_correct_errors(
    mut builder: crate::types::builders::RequestBasedServiceLevelIndicatorMetricBuilder,
) -> crate::types::builders::RequestBasedServiceLevelIndicatorMetricBuilder {
    if builder.total_request_count_metric.is_none() {
        builder.total_request_count_metric = Some(Default::default())
    }
    if builder.monitored_request_count_metric.is_none() {
        builder.monitored_request_count_metric = Some(crate::types::MonitoredRequestCountMetricDataQueries::Unknown)
    }
    builder
}

pub(crate) fn service_group_correct_errors(mut builder: crate::types::builders::ServiceGroupBuilder) -> crate::types::builders::ServiceGroupBuilder {
    if builder.group_name.is_none() {
        builder.group_name = Some(Default::default())
    }
    if builder.group_value.is_none() {
        builder.group_value = Some(Default::default())
    }
    if builder.group_source.is_none() {
        builder.group_source = Some(Default::default())
    }
    if builder.group_identifier.is_none() {
        builder.group_identifier = Some(Default::default())
    }
    builder
}

pub(crate) fn service_level_indicator_metric_correct_errors(
    mut builder: crate::types::builders::ServiceLevelIndicatorMetricBuilder,
) -> crate::types::builders::ServiceLevelIndicatorMetricBuilder {
    if builder.metric_data_queries.is_none() {
        builder.metric_data_queries = Some(Default::default())
    }
    builder
}

pub(crate) fn window_correct_errors(mut builder: crate::types::builders::WindowBuilder) -> crate::types::builders::WindowBuilder {
    if builder.duration_unit.is_none() {
        builder.duration_unit = "no value was set".parse::<crate::types::DurationUnit>().ok()
    }
    if builder.duration.is_none() {
        builder.duration = Some(Default::default())
    }
    builder
}

pub(crate) fn attribute_filter_correct_errors(
    mut builder: crate::types::builders::AttributeFilterBuilder,
) -> crate::types::builders::AttributeFilterBuilder {
    if builder.attribute_filter_name.is_none() {
        builder.attribute_filter_name = Some(Default::default())
    }
    if builder.attribute_filter_values.is_none() {
        builder.attribute_filter_values = Some(Default::default())
    }
    builder
}

pub(crate) fn calendar_interval_correct_errors(
    mut builder: crate::types::builders::CalendarIntervalBuilder,
) -> crate::types::builders::CalendarIntervalBuilder {
    if builder.start_time.is_none() {
        builder.start_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.duration_unit.is_none() {
        builder.duration_unit = "no value was set".parse::<crate::types::DurationUnit>().ok()
    }
    if builder.duration.is_none() {
        builder.duration = Some(Default::default())
    }
    builder
}

pub(crate) fn change_event_correct_errors(mut builder: crate::types::builders::ChangeEventBuilder) -> crate::types::builders::ChangeEventBuilder {
    if builder.timestamp.is_none() {
        builder.timestamp = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.account_id.is_none() {
        builder.account_id = Some(Default::default())
    }
    if builder.region.is_none() {
        builder.region = Some(Default::default())
    }
    if builder.entity.is_none() {
        builder.entity = Some(Default::default())
    }
    if builder.change_event_type.is_none() {
        builder.change_event_type = "no value was set".parse::<crate::types::ChangeEventType>().ok()
    }
    if builder.event_id.is_none() {
        builder.event_id = Some(Default::default())
    }
    builder
}

pub(crate) fn rolling_interval_correct_errors(
    mut builder: crate::types::builders::RollingIntervalBuilder,
) -> crate::types::builders::RollingIntervalBuilder {
    if builder.duration_unit.is_none() {
        builder.duration_unit = "no value was set".parse::<crate::types::DurationUnit>().ok()
    }
    if builder.duration.is_none() {
        builder.duration = Some(Default::default())
    }
    builder
}

pub(crate) fn dimension_correct_errors(mut builder: crate::types::builders::DimensionBuilder) -> crate::types::builders::DimensionBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn metric_data_query_correct_errors(
    mut builder: crate::types::builders::MetricDataQueryBuilder,
) -> crate::types::builders::MetricDataQueryBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    builder
}

pub(crate) fn node_correct_errors(mut builder: crate::types::builders::NodeBuilder) -> crate::types::builders::NodeBuilder {
    if builder.key_attributes.is_none() {
        builder.key_attributes = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.node_id.is_none() {
        builder.node_id = Some(Default::default())
    }
    builder
}

pub(crate) fn metric_stat_correct_errors(mut builder: crate::types::builders::MetricStatBuilder) -> crate::types::builders::MetricStatBuilder {
    if builder.metric.is_none() {
        builder.metric = {
            let builder = crate::types::builders::MetricBuilder::default();
            Some(builder.build())
        }
    }
    if builder.period.is_none() {
        builder.period = Some(Default::default())
    }
    if builder.stat.is_none() {
        builder.stat = Some(Default::default())
    }
    builder
}
