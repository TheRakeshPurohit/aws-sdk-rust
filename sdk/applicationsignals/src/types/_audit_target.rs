// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure that specifies the target entity for audit analysis, such as a <code>service</code>, <code>SLO</code>, or <code>service_operation</code>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AuditTarget {
    /// <p>The type of entity being audited, such as <code>Service</code>, <code>SLO</code>, or <code>ServiceOperation</code>.</p>
    pub r#type: ::std::string::String,
    /// <p>The specific data identifying the audit target entity.</p>
    pub data: ::std::option::Option<crate::types::AuditTargetEntity>,
}
impl AuditTarget {
    /// <p>The type of entity being audited, such as <code>Service</code>, <code>SLO</code>, or <code>ServiceOperation</code>.</p>
    pub fn r#type(&self) -> &str {
        use std::ops::Deref;
        self.r#type.deref()
    }
    /// <p>The specific data identifying the audit target entity.</p>
    pub fn data(&self) -> ::std::option::Option<&crate::types::AuditTargetEntity> {
        self.data.as_ref()
    }
}
impl AuditTarget {
    /// Creates a new builder-style object to manufacture [`AuditTarget`](crate::types::AuditTarget).
    pub fn builder() -> crate::types::builders::AuditTargetBuilder {
        crate::types::builders::AuditTargetBuilder::default()
    }
}

/// A builder for [`AuditTarget`](crate::types::AuditTarget).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AuditTargetBuilder {
    pub(crate) r#type: ::std::option::Option<::std::string::String>,
    pub(crate) data: ::std::option::Option<crate::types::AuditTargetEntity>,
}
impl AuditTargetBuilder {
    /// <p>The type of entity being audited, such as <code>Service</code>, <code>SLO</code>, or <code>ServiceOperation</code>.</p>
    /// This field is required.
    pub fn r#type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.r#type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of entity being audited, such as <code>Service</code>, <code>SLO</code>, or <code>ServiceOperation</code>.</p>
    pub fn set_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of entity being audited, such as <code>Service</code>, <code>SLO</code>, or <code>ServiceOperation</code>.</p>
    pub fn get_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.r#type
    }
    /// <p>The specific data identifying the audit target entity.</p>
    /// This field is required.
    pub fn data(mut self, input: crate::types::AuditTargetEntity) -> Self {
        self.data = ::std::option::Option::Some(input);
        self
    }
    /// <p>The specific data identifying the audit target entity.</p>
    pub fn set_data(mut self, input: ::std::option::Option<crate::types::AuditTargetEntity>) -> Self {
        self.data = input;
        self
    }
    /// <p>The specific data identifying the audit target entity.</p>
    pub fn get_data(&self) -> &::std::option::Option<crate::types::AuditTargetEntity> {
        &self.data
    }
    /// Consumes the builder and constructs a [`AuditTarget`](crate::types::AuditTarget).
    /// This method will fail if any of the following fields are not set:
    /// - [`r#type`](crate::types::builders::AuditTargetBuilder::type)
    pub fn build(self) -> ::std::result::Result<crate::types::AuditTarget, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AuditTarget {
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building AuditTarget",
                )
            })?,
            data: self.data,
        })
    }
}
