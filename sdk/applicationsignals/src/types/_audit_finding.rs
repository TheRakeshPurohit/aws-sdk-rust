// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure that contains information about an audit finding, which represents an automated analysis result about service behavior, performance issues, or potential problems identified through heuristic algorithms.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AuditFinding {
    /// <p>The key attributes that identify the service or entity this audit finding relates to. This is a string-to-string map that includes fields like Type, Name, and Environment.</p>
    pub key_attributes: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    /// <p>An array of auditor results that contain the specific findings, descriptions, and severity levels identified by different auditing algorithms.</p>
    pub auditor_results: ::std::option::Option<::std::vec::Vec<crate::types::AuditorResult>>,
    /// <p>The name of the operation associated with this audit finding, if the finding is specific to a particular service operation.</p>
    pub operation: ::std::option::Option<::std::string::String>,
    /// <p>A structure containing metric data queries and time range information that provides context for the audit finding through relevant performance metrics.</p>
    pub metric_graph: ::std::option::Option<crate::types::MetricGraph>,
    /// <p>A structure containing nodes and edges that represent the dependency relationships relevant to this audit finding, helping to understand the context and potential impact.</p>
    pub dependency_graph: ::std::option::Option<crate::types::DependencyGraph>,
    /// <p>The type of audit finding.</p>
    pub r#type: ::std::option::Option<::std::string::String>,
}
impl AuditFinding {
    /// <p>The key attributes that identify the service or entity this audit finding relates to. This is a string-to-string map that includes fields like Type, Name, and Environment.</p>
    pub fn key_attributes(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.key_attributes
    }
    /// <p>An array of auditor results that contain the specific findings, descriptions, and severity levels identified by different auditing algorithms.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.auditor_results.is_none()`.
    pub fn auditor_results(&self) -> &[crate::types::AuditorResult] {
        self.auditor_results.as_deref().unwrap_or_default()
    }
    /// <p>The name of the operation associated with this audit finding, if the finding is specific to a particular service operation.</p>
    pub fn operation(&self) -> ::std::option::Option<&str> {
        self.operation.as_deref()
    }
    /// <p>A structure containing metric data queries and time range information that provides context for the audit finding through relevant performance metrics.</p>
    pub fn metric_graph(&self) -> ::std::option::Option<&crate::types::MetricGraph> {
        self.metric_graph.as_ref()
    }
    /// <p>A structure containing nodes and edges that represent the dependency relationships relevant to this audit finding, helping to understand the context and potential impact.</p>
    pub fn dependency_graph(&self) -> ::std::option::Option<&crate::types::DependencyGraph> {
        self.dependency_graph.as_ref()
    }
    /// <p>The type of audit finding.</p>
    pub fn r#type(&self) -> ::std::option::Option<&str> {
        self.r#type.as_deref()
    }
}
impl AuditFinding {
    /// Creates a new builder-style object to manufacture [`AuditFinding`](crate::types::AuditFinding).
    pub fn builder() -> crate::types::builders::AuditFindingBuilder {
        crate::types::builders::AuditFindingBuilder::default()
    }
}

/// A builder for [`AuditFinding`](crate::types::AuditFinding).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AuditFindingBuilder {
    pub(crate) key_attributes: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) auditor_results: ::std::option::Option<::std::vec::Vec<crate::types::AuditorResult>>,
    pub(crate) operation: ::std::option::Option<::std::string::String>,
    pub(crate) metric_graph: ::std::option::Option<crate::types::MetricGraph>,
    pub(crate) dependency_graph: ::std::option::Option<crate::types::DependencyGraph>,
    pub(crate) r#type: ::std::option::Option<::std::string::String>,
}
impl AuditFindingBuilder {
    /// Adds a key-value pair to `key_attributes`.
    ///
    /// To override the contents of this collection use [`set_key_attributes`](Self::set_key_attributes).
    ///
    /// <p>The key attributes that identify the service or entity this audit finding relates to. This is a string-to-string map that includes fields like Type, Name, and Environment.</p>
    pub fn key_attributes(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.key_attributes.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.key_attributes = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The key attributes that identify the service or entity this audit finding relates to. This is a string-to-string map that includes fields like Type, Name, and Environment.</p>
    pub fn set_key_attributes(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.key_attributes = input;
        self
    }
    /// <p>The key attributes that identify the service or entity this audit finding relates to. This is a string-to-string map that includes fields like Type, Name, and Environment.</p>
    pub fn get_key_attributes(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.key_attributes
    }
    /// Appends an item to `auditor_results`.
    ///
    /// To override the contents of this collection use [`set_auditor_results`](Self::set_auditor_results).
    ///
    /// <p>An array of auditor results that contain the specific findings, descriptions, and severity levels identified by different auditing algorithms.</p>
    pub fn auditor_results(mut self, input: crate::types::AuditorResult) -> Self {
        let mut v = self.auditor_results.unwrap_or_default();
        v.push(input);
        self.auditor_results = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of auditor results that contain the specific findings, descriptions, and severity levels identified by different auditing algorithms.</p>
    pub fn set_auditor_results(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AuditorResult>>) -> Self {
        self.auditor_results = input;
        self
    }
    /// <p>An array of auditor results that contain the specific findings, descriptions, and severity levels identified by different auditing algorithms.</p>
    pub fn get_auditor_results(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AuditorResult>> {
        &self.auditor_results
    }
    /// <p>The name of the operation associated with this audit finding, if the finding is specific to a particular service operation.</p>
    pub fn operation(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.operation = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the operation associated with this audit finding, if the finding is specific to a particular service operation.</p>
    pub fn set_operation(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.operation = input;
        self
    }
    /// <p>The name of the operation associated with this audit finding, if the finding is specific to a particular service operation.</p>
    pub fn get_operation(&self) -> &::std::option::Option<::std::string::String> {
        &self.operation
    }
    /// <p>A structure containing metric data queries and time range information that provides context for the audit finding through relevant performance metrics.</p>
    pub fn metric_graph(mut self, input: crate::types::MetricGraph) -> Self {
        self.metric_graph = ::std::option::Option::Some(input);
        self
    }
    /// <p>A structure containing metric data queries and time range information that provides context for the audit finding through relevant performance metrics.</p>
    pub fn set_metric_graph(mut self, input: ::std::option::Option<crate::types::MetricGraph>) -> Self {
        self.metric_graph = input;
        self
    }
    /// <p>A structure containing metric data queries and time range information that provides context for the audit finding through relevant performance metrics.</p>
    pub fn get_metric_graph(&self) -> &::std::option::Option<crate::types::MetricGraph> {
        &self.metric_graph
    }
    /// <p>A structure containing nodes and edges that represent the dependency relationships relevant to this audit finding, helping to understand the context and potential impact.</p>
    pub fn dependency_graph(mut self, input: crate::types::DependencyGraph) -> Self {
        self.dependency_graph = ::std::option::Option::Some(input);
        self
    }
    /// <p>A structure containing nodes and edges that represent the dependency relationships relevant to this audit finding, helping to understand the context and potential impact.</p>
    pub fn set_dependency_graph(mut self, input: ::std::option::Option<crate::types::DependencyGraph>) -> Self {
        self.dependency_graph = input;
        self
    }
    /// <p>A structure containing nodes and edges that represent the dependency relationships relevant to this audit finding, helping to understand the context and potential impact.</p>
    pub fn get_dependency_graph(&self) -> &::std::option::Option<crate::types::DependencyGraph> {
        &self.dependency_graph
    }
    /// <p>The type of audit finding.</p>
    pub fn r#type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.r#type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of audit finding.</p>
    pub fn set_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of audit finding.</p>
    pub fn get_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.r#type
    }
    /// Consumes the builder and constructs a [`AuditFinding`](crate::types::AuditFinding).
    /// This method will fail if any of the following fields are not set:
    /// - [`key_attributes`](crate::types::builders::AuditFindingBuilder::key_attributes)
    pub fn build(self) -> ::std::result::Result<crate::types::AuditFinding, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AuditFinding {
            key_attributes: self.key_attributes.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "key_attributes",
                    "key_attributes was not specified but it is required when building AuditFinding",
                )
            })?,
            auditor_results: self.auditor_results,
            operation: self.operation,
            metric_graph: self.metric_graph,
            dependency_graph: self.dependency_graph,
            r#type: self.r#type,
        })
    }
}
