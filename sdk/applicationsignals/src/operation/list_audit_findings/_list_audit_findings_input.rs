// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListAuditFindingsInput {
    /// <p>The start of the time period to retrieve audit findings for. When used in a raw HTTP Query API, it is formatted as epoch time in seconds. For example, <code>1698778057</code></p>
    pub start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The end of the time period to retrieve audit findings for. When used in a raw HTTP Query API, it is formatted as epoch time in seconds. For example, <code>1698778057</code></p>
    pub end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>A list of auditor names to filter the findings by. Only findings generated by the specified auditors will be returned.</p>
    /// <p>The following auditors are available for configuration:</p>
    /// <ul>
    /// <li>
    /// <p><code>slo</code> - SloAuditor: Identifies SLO violations and detects breached thresholds during the Assessment phase.</p></li>
    /// <li>
    /// <p><code>operation_metric</code> - OperationMetricAuditor: Detects anomalies in service operation metrics from Application Signals RED metrics during the Assessment phase</p></li>
    /// <li>
    /// <p><code>service_quota</code> - ServiceQuotaAuditor: Monitors resource utilization against service quotas during the Assessment phase</p></li>
    /// <li>
    /// <p><code>trace</code> - TraceAuditor: Performs deep-dive analysis of distributed traces, correlating traces with breached SLOs or abnormal RED metrics during the Analysis phase</p></li>
    /// <li>
    /// <p><code>dependency_metric</code> - CriticalPathAuditor: Analyzes service dependency impacts and maps dependency relationships from Application Signals RED metrics during the Analysis phase</p></li>
    /// <li>
    /// <p><code>top_contributor</code> - TopContributorAuditor: Identifies infrastructure-level contributors to issues by analyzing EMF logs of Application Signals RED metrics during the Analysis phase</p></li>
    /// <li>
    /// <p><code>log</code> - LogAuditor: Extracts insights from application logs, categorizing error types and ranking severity by frequency during the Analysis phase</p></li>
    /// </ul><note>
    /// <p><code>InitAuditor</code> and <code>Summarizer</code> auditors are not configurable as they are automatically triggered during the audit process.</p>
    /// </note>
    pub auditors: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>A list of audit targets to filter the findings by. You can specify services, SLOs, or service operations to limit the audit findings to specific entities.</p>
    pub audit_targets: ::std::option::Option<::std::vec::Vec<crate::types::AuditTarget>>,
    /// <p>Include this value, if it was returned by the previous operation, to get the next set of audit findings.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of audit findings to return in one operation. If you omit this parameter, the default of 10 is used.</p>
    pub max_results: ::std::option::Option<i32>,
}
impl ListAuditFindingsInput {
    /// <p>The start of the time period to retrieve audit findings for. When used in a raw HTTP Query API, it is formatted as epoch time in seconds. For example, <code>1698778057</code></p>
    pub fn start_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p>The end of the time period to retrieve audit findings for. When used in a raw HTTP Query API, it is formatted as epoch time in seconds. For example, <code>1698778057</code></p>
    pub fn end_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.end_time.as_ref()
    }
    /// <p>A list of auditor names to filter the findings by. Only findings generated by the specified auditors will be returned.</p>
    /// <p>The following auditors are available for configuration:</p>
    /// <ul>
    /// <li>
    /// <p><code>slo</code> - SloAuditor: Identifies SLO violations and detects breached thresholds during the Assessment phase.</p></li>
    /// <li>
    /// <p><code>operation_metric</code> - OperationMetricAuditor: Detects anomalies in service operation metrics from Application Signals RED metrics during the Assessment phase</p></li>
    /// <li>
    /// <p><code>service_quota</code> - ServiceQuotaAuditor: Monitors resource utilization against service quotas during the Assessment phase</p></li>
    /// <li>
    /// <p><code>trace</code> - TraceAuditor: Performs deep-dive analysis of distributed traces, correlating traces with breached SLOs or abnormal RED metrics during the Analysis phase</p></li>
    /// <li>
    /// <p><code>dependency_metric</code> - CriticalPathAuditor: Analyzes service dependency impacts and maps dependency relationships from Application Signals RED metrics during the Analysis phase</p></li>
    /// <li>
    /// <p><code>top_contributor</code> - TopContributorAuditor: Identifies infrastructure-level contributors to issues by analyzing EMF logs of Application Signals RED metrics during the Analysis phase</p></li>
    /// <li>
    /// <p><code>log</code> - LogAuditor: Extracts insights from application logs, categorizing error types and ranking severity by frequency during the Analysis phase</p></li>
    /// </ul><note>
    /// <p><code>InitAuditor</code> and <code>Summarizer</code> auditors are not configurable as they are automatically triggered during the audit process.</p>
    /// </note>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.auditors.is_none()`.
    pub fn auditors(&self) -> &[::std::string::String] {
        self.auditors.as_deref().unwrap_or_default()
    }
    /// <p>A list of audit targets to filter the findings by. You can specify services, SLOs, or service operations to limit the audit findings to specific entities.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.audit_targets.is_none()`.
    pub fn audit_targets(&self) -> &[crate::types::AuditTarget] {
        self.audit_targets.as_deref().unwrap_or_default()
    }
    /// <p>Include this value, if it was returned by the previous operation, to get the next set of audit findings.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of audit findings to return in one operation. If you omit this parameter, the default of 10 is used.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
}
impl ListAuditFindingsInput {
    /// Creates a new builder-style object to manufacture [`ListAuditFindingsInput`](crate::operation::list_audit_findings::ListAuditFindingsInput).
    pub fn builder() -> crate::operation::list_audit_findings::builders::ListAuditFindingsInputBuilder {
        crate::operation::list_audit_findings::builders::ListAuditFindingsInputBuilder::default()
    }
}

/// A builder for [`ListAuditFindingsInput`](crate::operation::list_audit_findings::ListAuditFindingsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListAuditFindingsInputBuilder {
    pub(crate) start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) auditors: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) audit_targets: ::std::option::Option<::std::vec::Vec<crate::types::AuditTarget>>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
}
impl ListAuditFindingsInputBuilder {
    /// <p>The start of the time period to retrieve audit findings for. When used in a raw HTTP Query API, it is formatted as epoch time in seconds. For example, <code>1698778057</code></p>
    /// This field is required.
    pub fn start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The start of the time period to retrieve audit findings for. When used in a raw HTTP Query API, it is formatted as epoch time in seconds. For example, <code>1698778057</code></p>
    pub fn set_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_time = input;
        self
    }
    /// <p>The start of the time period to retrieve audit findings for. When used in a raw HTTP Query API, it is formatted as epoch time in seconds. For example, <code>1698778057</code></p>
    pub fn get_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_time
    }
    /// <p>The end of the time period to retrieve audit findings for. When used in a raw HTTP Query API, it is formatted as epoch time in seconds. For example, <code>1698778057</code></p>
    /// This field is required.
    pub fn end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.end_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The end of the time period to retrieve audit findings for. When used in a raw HTTP Query API, it is formatted as epoch time in seconds. For example, <code>1698778057</code></p>
    pub fn set_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.end_time = input;
        self
    }
    /// <p>The end of the time period to retrieve audit findings for. When used in a raw HTTP Query API, it is formatted as epoch time in seconds. For example, <code>1698778057</code></p>
    pub fn get_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.end_time
    }
    /// Appends an item to `auditors`.
    ///
    /// To override the contents of this collection use [`set_auditors`](Self::set_auditors).
    ///
    /// <p>A list of auditor names to filter the findings by. Only findings generated by the specified auditors will be returned.</p>
    /// <p>The following auditors are available for configuration:</p>
    /// <ul>
    /// <li>
    /// <p><code>slo</code> - SloAuditor: Identifies SLO violations and detects breached thresholds during the Assessment phase.</p></li>
    /// <li>
    /// <p><code>operation_metric</code> - OperationMetricAuditor: Detects anomalies in service operation metrics from Application Signals RED metrics during the Assessment phase</p></li>
    /// <li>
    /// <p><code>service_quota</code> - ServiceQuotaAuditor: Monitors resource utilization against service quotas during the Assessment phase</p></li>
    /// <li>
    /// <p><code>trace</code> - TraceAuditor: Performs deep-dive analysis of distributed traces, correlating traces with breached SLOs or abnormal RED metrics during the Analysis phase</p></li>
    /// <li>
    /// <p><code>dependency_metric</code> - CriticalPathAuditor: Analyzes service dependency impacts and maps dependency relationships from Application Signals RED metrics during the Analysis phase</p></li>
    /// <li>
    /// <p><code>top_contributor</code> - TopContributorAuditor: Identifies infrastructure-level contributors to issues by analyzing EMF logs of Application Signals RED metrics during the Analysis phase</p></li>
    /// <li>
    /// <p><code>log</code> - LogAuditor: Extracts insights from application logs, categorizing error types and ranking severity by frequency during the Analysis phase</p></li>
    /// </ul><note>
    /// <p><code>InitAuditor</code> and <code>Summarizer</code> auditors are not configurable as they are automatically triggered during the audit process.</p>
    /// </note>
    pub fn auditors(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.auditors.unwrap_or_default();
        v.push(input.into());
        self.auditors = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of auditor names to filter the findings by. Only findings generated by the specified auditors will be returned.</p>
    /// <p>The following auditors are available for configuration:</p>
    /// <ul>
    /// <li>
    /// <p><code>slo</code> - SloAuditor: Identifies SLO violations and detects breached thresholds during the Assessment phase.</p></li>
    /// <li>
    /// <p><code>operation_metric</code> - OperationMetricAuditor: Detects anomalies in service operation metrics from Application Signals RED metrics during the Assessment phase</p></li>
    /// <li>
    /// <p><code>service_quota</code> - ServiceQuotaAuditor: Monitors resource utilization against service quotas during the Assessment phase</p></li>
    /// <li>
    /// <p><code>trace</code> - TraceAuditor: Performs deep-dive analysis of distributed traces, correlating traces with breached SLOs or abnormal RED metrics during the Analysis phase</p></li>
    /// <li>
    /// <p><code>dependency_metric</code> - CriticalPathAuditor: Analyzes service dependency impacts and maps dependency relationships from Application Signals RED metrics during the Analysis phase</p></li>
    /// <li>
    /// <p><code>top_contributor</code> - TopContributorAuditor: Identifies infrastructure-level contributors to issues by analyzing EMF logs of Application Signals RED metrics during the Analysis phase</p></li>
    /// <li>
    /// <p><code>log</code> - LogAuditor: Extracts insights from application logs, categorizing error types and ranking severity by frequency during the Analysis phase</p></li>
    /// </ul><note>
    /// <p><code>InitAuditor</code> and <code>Summarizer</code> auditors are not configurable as they are automatically triggered during the audit process.</p>
    /// </note>
    pub fn set_auditors(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.auditors = input;
        self
    }
    /// <p>A list of auditor names to filter the findings by. Only findings generated by the specified auditors will be returned.</p>
    /// <p>The following auditors are available for configuration:</p>
    /// <ul>
    /// <li>
    /// <p><code>slo</code> - SloAuditor: Identifies SLO violations and detects breached thresholds during the Assessment phase.</p></li>
    /// <li>
    /// <p><code>operation_metric</code> - OperationMetricAuditor: Detects anomalies in service operation metrics from Application Signals RED metrics during the Assessment phase</p></li>
    /// <li>
    /// <p><code>service_quota</code> - ServiceQuotaAuditor: Monitors resource utilization against service quotas during the Assessment phase</p></li>
    /// <li>
    /// <p><code>trace</code> - TraceAuditor: Performs deep-dive analysis of distributed traces, correlating traces with breached SLOs or abnormal RED metrics during the Analysis phase</p></li>
    /// <li>
    /// <p><code>dependency_metric</code> - CriticalPathAuditor: Analyzes service dependency impacts and maps dependency relationships from Application Signals RED metrics during the Analysis phase</p></li>
    /// <li>
    /// <p><code>top_contributor</code> - TopContributorAuditor: Identifies infrastructure-level contributors to issues by analyzing EMF logs of Application Signals RED metrics during the Analysis phase</p></li>
    /// <li>
    /// <p><code>log</code> - LogAuditor: Extracts insights from application logs, categorizing error types and ranking severity by frequency during the Analysis phase</p></li>
    /// </ul><note>
    /// <p><code>InitAuditor</code> and <code>Summarizer</code> auditors are not configurable as they are automatically triggered during the audit process.</p>
    /// </note>
    pub fn get_auditors(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.auditors
    }
    /// Appends an item to `audit_targets`.
    ///
    /// To override the contents of this collection use [`set_audit_targets`](Self::set_audit_targets).
    ///
    /// <p>A list of audit targets to filter the findings by. You can specify services, SLOs, or service operations to limit the audit findings to specific entities.</p>
    pub fn audit_targets(mut self, input: crate::types::AuditTarget) -> Self {
        let mut v = self.audit_targets.unwrap_or_default();
        v.push(input);
        self.audit_targets = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of audit targets to filter the findings by. You can specify services, SLOs, or service operations to limit the audit findings to specific entities.</p>
    pub fn set_audit_targets(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AuditTarget>>) -> Self {
        self.audit_targets = input;
        self
    }
    /// <p>A list of audit targets to filter the findings by. You can specify services, SLOs, or service operations to limit the audit findings to specific entities.</p>
    pub fn get_audit_targets(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AuditTarget>> {
        &self.audit_targets
    }
    /// <p>Include this value, if it was returned by the previous operation, to get the next set of audit findings.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Include this value, if it was returned by the previous operation, to get the next set of audit findings.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>Include this value, if it was returned by the previous operation, to get the next set of audit findings.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The maximum number of audit findings to return in one operation. If you omit this parameter, the default of 10 is used.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of audit findings to return in one operation. If you omit this parameter, the default of 10 is used.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of audit findings to return in one operation. If you omit this parameter, the default of 10 is used.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// Consumes the builder and constructs a [`ListAuditFindingsInput`](crate::operation::list_audit_findings::ListAuditFindingsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_audit_findings::ListAuditFindingsInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::list_audit_findings::ListAuditFindingsInput {
            start_time: self.start_time,
            end_time: self.end_time,
            auditors: self.auditors,
            audit_targets: self.audit_targets,
            next_token: self.next_token,
            max_results: self.max_results,
        })
    }
}
