// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::list_audit_findings::_list_audit_findings_output::ListAuditFindingsOutputBuilder;

pub use crate::operation::list_audit_findings::_list_audit_findings_input::ListAuditFindingsInputBuilder;

impl crate::operation::list_audit_findings::builders::ListAuditFindingsInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::list_audit_findings::ListAuditFindingsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_audit_findings::ListAuditFindingsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.list_audit_findings();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `ListAuditFindings`.
///
/// <p>Returns a list of audit findings that provide automated analysis of service behavior and root cause analysis. These findings help identify the most significant observations about your services, including performance issues, anomalies, and potential problems. The findings are generated using heuristic algorithms based on established troubleshooting patterns.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct ListAuditFindingsFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::list_audit_findings::builders::ListAuditFindingsInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::list_audit_findings::ListAuditFindingsOutput,
        crate::operation::list_audit_findings::ListAuditFindingsError,
    > for ListAuditFindingsFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::list_audit_findings::ListAuditFindingsOutput,
            crate::operation::list_audit_findings::ListAuditFindingsError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl ListAuditFindingsFluentBuilder {
    /// Creates a new `ListAuditFindingsFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the ListAuditFindings as a reference.
    pub fn as_input(&self) -> &crate::operation::list_audit_findings::builders::ListAuditFindingsInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_audit_findings::ListAuditFindingsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_audit_findings::ListAuditFindingsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::list_audit_findings::ListAuditFindings::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::list_audit_findings::ListAuditFindings::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::list_audit_findings::ListAuditFindingsOutput,
        crate::operation::list_audit_findings::ListAuditFindingsError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The start of the time period to retrieve audit findings for. When used in a raw HTTP Query API, it is formatted as epoch time in seconds. For example, <code>1698778057</code></p>
    pub fn start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.start_time(input);
        self
    }
    /// <p>The start of the time period to retrieve audit findings for. When used in a raw HTTP Query API, it is formatted as epoch time in seconds. For example, <code>1698778057</code></p>
    pub fn set_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.inner = self.inner.set_start_time(input);
        self
    }
    /// <p>The start of the time period to retrieve audit findings for. When used in a raw HTTP Query API, it is formatted as epoch time in seconds. For example, <code>1698778057</code></p>
    pub fn get_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        self.inner.get_start_time()
    }
    /// <p>The end of the time period to retrieve audit findings for. When used in a raw HTTP Query API, it is formatted as epoch time in seconds. For example, <code>1698778057</code></p>
    pub fn end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.end_time(input);
        self
    }
    /// <p>The end of the time period to retrieve audit findings for. When used in a raw HTTP Query API, it is formatted as epoch time in seconds. For example, <code>1698778057</code></p>
    pub fn set_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.inner = self.inner.set_end_time(input);
        self
    }
    /// <p>The end of the time period to retrieve audit findings for. When used in a raw HTTP Query API, it is formatted as epoch time in seconds. For example, <code>1698778057</code></p>
    pub fn get_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        self.inner.get_end_time()
    }
    ///
    /// Appends an item to `Auditors`.
    ///
    /// To override the contents of this collection use [`set_auditors`](Self::set_auditors).
    ///
    /// <p>A list of auditor names to filter the findings by. Only findings generated by the specified auditors will be returned.</p>
    /// <p>The following auditors are available for configuration:</p>
    /// <ul>
    /// <li>
    /// <p><code>slo</code> - SloAuditor: Identifies SLO violations and detects breached thresholds during the Assessment phase.</p></li>
    /// <li>
    /// <p><code>operation_metric</code> - OperationMetricAuditor: Detects anomalies in service operation metrics from Application Signals RED metrics during the Assessment phase</p></li>
    /// <li>
    /// <p><code>service_quota</code> - ServiceQuotaAuditor: Monitors resource utilization against service quotas during the Assessment phase</p></li>
    /// <li>
    /// <p><code>trace</code> - TraceAuditor: Performs deep-dive analysis of distributed traces, correlating traces with breached SLOs or abnormal RED metrics during the Analysis phase</p></li>
    /// <li>
    /// <p><code>dependency_metric</code> - CriticalPathAuditor: Analyzes service dependency impacts and maps dependency relationships from Application Signals RED metrics during the Analysis phase</p></li>
    /// <li>
    /// <p><code>top_contributor</code> - TopContributorAuditor: Identifies infrastructure-level contributors to issues by analyzing EMF logs of Application Signals RED metrics during the Analysis phase</p></li>
    /// <li>
    /// <p><code>log</code> - LogAuditor: Extracts insights from application logs, categorizing error types and ranking severity by frequency during the Analysis phase</p></li>
    /// </ul><note>
    /// <p><code>InitAuditor</code> and <code>Summarizer</code> auditors are not configurable as they are automatically triggered during the audit process.</p>
    /// </note>
    pub fn auditors(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.auditors(input.into());
        self
    }
    /// <p>A list of auditor names to filter the findings by. Only findings generated by the specified auditors will be returned.</p>
    /// <p>The following auditors are available for configuration:</p>
    /// <ul>
    /// <li>
    /// <p><code>slo</code> - SloAuditor: Identifies SLO violations and detects breached thresholds during the Assessment phase.</p></li>
    /// <li>
    /// <p><code>operation_metric</code> - OperationMetricAuditor: Detects anomalies in service operation metrics from Application Signals RED metrics during the Assessment phase</p></li>
    /// <li>
    /// <p><code>service_quota</code> - ServiceQuotaAuditor: Monitors resource utilization against service quotas during the Assessment phase</p></li>
    /// <li>
    /// <p><code>trace</code> - TraceAuditor: Performs deep-dive analysis of distributed traces, correlating traces with breached SLOs or abnormal RED metrics during the Analysis phase</p></li>
    /// <li>
    /// <p><code>dependency_metric</code> - CriticalPathAuditor: Analyzes service dependency impacts and maps dependency relationships from Application Signals RED metrics during the Analysis phase</p></li>
    /// <li>
    /// <p><code>top_contributor</code> - TopContributorAuditor: Identifies infrastructure-level contributors to issues by analyzing EMF logs of Application Signals RED metrics during the Analysis phase</p></li>
    /// <li>
    /// <p><code>log</code> - LogAuditor: Extracts insights from application logs, categorizing error types and ranking severity by frequency during the Analysis phase</p></li>
    /// </ul><note>
    /// <p><code>InitAuditor</code> and <code>Summarizer</code> auditors are not configurable as they are automatically triggered during the audit process.</p>
    /// </note>
    pub fn set_auditors(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_auditors(input);
        self
    }
    /// <p>A list of auditor names to filter the findings by. Only findings generated by the specified auditors will be returned.</p>
    /// <p>The following auditors are available for configuration:</p>
    /// <ul>
    /// <li>
    /// <p><code>slo</code> - SloAuditor: Identifies SLO violations and detects breached thresholds during the Assessment phase.</p></li>
    /// <li>
    /// <p><code>operation_metric</code> - OperationMetricAuditor: Detects anomalies in service operation metrics from Application Signals RED metrics during the Assessment phase</p></li>
    /// <li>
    /// <p><code>service_quota</code> - ServiceQuotaAuditor: Monitors resource utilization against service quotas during the Assessment phase</p></li>
    /// <li>
    /// <p><code>trace</code> - TraceAuditor: Performs deep-dive analysis of distributed traces, correlating traces with breached SLOs or abnormal RED metrics during the Analysis phase</p></li>
    /// <li>
    /// <p><code>dependency_metric</code> - CriticalPathAuditor: Analyzes service dependency impacts and maps dependency relationships from Application Signals RED metrics during the Analysis phase</p></li>
    /// <li>
    /// <p><code>top_contributor</code> - TopContributorAuditor: Identifies infrastructure-level contributors to issues by analyzing EMF logs of Application Signals RED metrics during the Analysis phase</p></li>
    /// <li>
    /// <p><code>log</code> - LogAuditor: Extracts insights from application logs, categorizing error types and ranking severity by frequency during the Analysis phase</p></li>
    /// </ul><note>
    /// <p><code>InitAuditor</code> and <code>Summarizer</code> auditors are not configurable as they are automatically triggered during the audit process.</p>
    /// </note>
    pub fn get_auditors(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_auditors()
    }
    ///
    /// Appends an item to `AuditTargets`.
    ///
    /// To override the contents of this collection use [`set_audit_targets`](Self::set_audit_targets).
    ///
    /// <p>A list of audit targets to filter the findings by. You can specify services, SLOs, or service operations to limit the audit findings to specific entities.</p>
    pub fn audit_targets(mut self, input: crate::types::AuditTarget) -> Self {
        self.inner = self.inner.audit_targets(input);
        self
    }
    /// <p>A list of audit targets to filter the findings by. You can specify services, SLOs, or service operations to limit the audit findings to specific entities.</p>
    pub fn set_audit_targets(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AuditTarget>>) -> Self {
        self.inner = self.inner.set_audit_targets(input);
        self
    }
    /// <p>A list of audit targets to filter the findings by. You can specify services, SLOs, or service operations to limit the audit findings to specific entities.</p>
    pub fn get_audit_targets(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AuditTarget>> {
        self.inner.get_audit_targets()
    }
    /// <p>Include this value, if it was returned by the previous operation, to get the next set of audit findings.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>Include this value, if it was returned by the previous operation, to get the next set of audit findings.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>Include this value, if it was returned by the previous operation, to get the next set of audit findings.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_next_token()
    }
    /// <p>The maximum number of audit findings to return in one operation. If you omit this parameter, the default of 10 is used.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of audit findings to return in one operation. If you omit this parameter, the default of 10 is used.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>The maximum number of audit findings to return in one operation. If you omit this parameter, the default of 10 is used.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        self.inner.get_max_results()
    }
}
