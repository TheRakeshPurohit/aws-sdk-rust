// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::list_service_level_objectives::_list_service_level_objectives_output::ListServiceLevelObjectivesOutputBuilder;

pub use crate::operation::list_service_level_objectives::_list_service_level_objectives_input::ListServiceLevelObjectivesInputBuilder;

impl crate::operation::list_service_level_objectives::builders::ListServiceLevelObjectivesInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::list_service_level_objectives::ListServiceLevelObjectivesOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_service_level_objectives::ListServiceLevelObjectivesError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.list_service_level_objectives();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `ListServiceLevelObjectives`.
///
/// <p>Returns a list of SLOs created in this account.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct ListServiceLevelObjectivesFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::list_service_level_objectives::builders::ListServiceLevelObjectivesInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::list_service_level_objectives::ListServiceLevelObjectivesOutput,
        crate::operation::list_service_level_objectives::ListServiceLevelObjectivesError,
    > for ListServiceLevelObjectivesFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::list_service_level_objectives::ListServiceLevelObjectivesOutput,
            crate::operation::list_service_level_objectives::ListServiceLevelObjectivesError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl ListServiceLevelObjectivesFluentBuilder {
    /// Creates a new `ListServiceLevelObjectivesFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the ListServiceLevelObjectives as a reference.
    pub fn as_input(&self) -> &crate::operation::list_service_level_objectives::builders::ListServiceLevelObjectivesInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_service_level_objectives::ListServiceLevelObjectivesOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_service_level_objectives::ListServiceLevelObjectivesError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::list_service_level_objectives::ListServiceLevelObjectives::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::list_service_level_objectives::ListServiceLevelObjectives::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::list_service_level_objectives::ListServiceLevelObjectivesOutput,
        crate::operation::list_service_level_objectives::ListServiceLevelObjectivesError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::list_service_level_objectives::paginator::ListServiceLevelObjectivesPaginator::send) which returns a [`PaginationStream`](aws_smithy_async::future::pagination_stream::PaginationStream).
    pub fn into_paginator(self) -> crate::operation::list_service_level_objectives::paginator::ListServiceLevelObjectivesPaginator {
        crate::operation::list_service_level_objectives::paginator::ListServiceLevelObjectivesPaginator::new(self.handle, self.inner)
    }
    ///
    /// Adds a key-value pair to `KeyAttributes`.
    ///
    /// To override the contents of this collection use [`set_key_attributes`](Self::set_key_attributes).
    ///
    /// <p>You can use this optional field to specify which services you want to retrieve SLO information for.</p>
    /// <p>This is a string-to-string map. It can include the following fields.</p>
    /// <ul>
    /// <li>
    /// <p><code>Type</code> designates the type of object this is.</p></li>
    /// <li>
    /// <p><code>ResourceType</code> specifies the type of the resource. This field is used only when the value of the <code>Type</code> field is <code>Resource</code> or <code>AWS::Resource</code>.</p></li>
    /// <li>
    /// <p><code>Name</code> specifies the name of the object. This is used only if the value of the <code>Type</code> field is <code>Service</code>, <code>RemoteService</code>, or <code>AWS::Service</code>.</p></li>
    /// <li>
    /// <p><code>Identifier</code> identifies the resource objects of this resource. This is used only if the value of the <code>Type</code> field is <code>Resource</code> or <code>AWS::Resource</code>.</p></li>
    /// <li>
    /// <p><code>Environment</code> specifies the location where this object is hosted, or what it belongs to.</p></li>
    /// </ul>
    pub fn key_attributes(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        self.inner = self.inner.key_attributes(k.into(), v.into());
        self
    }
    /// <p>You can use this optional field to specify which services you want to retrieve SLO information for.</p>
    /// <p>This is a string-to-string map. It can include the following fields.</p>
    /// <ul>
    /// <li>
    /// <p><code>Type</code> designates the type of object this is.</p></li>
    /// <li>
    /// <p><code>ResourceType</code> specifies the type of the resource. This field is used only when the value of the <code>Type</code> field is <code>Resource</code> or <code>AWS::Resource</code>.</p></li>
    /// <li>
    /// <p><code>Name</code> specifies the name of the object. This is used only if the value of the <code>Type</code> field is <code>Service</code>, <code>RemoteService</code>, or <code>AWS::Service</code>.</p></li>
    /// <li>
    /// <p><code>Identifier</code> identifies the resource objects of this resource. This is used only if the value of the <code>Type</code> field is <code>Resource</code> or <code>AWS::Resource</code>.</p></li>
    /// <li>
    /// <p><code>Environment</code> specifies the location where this object is hosted, or what it belongs to.</p></li>
    /// </ul>
    pub fn set_key_attributes(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_key_attributes(input);
        self
    }
    /// <p>You can use this optional field to specify which services you want to retrieve SLO information for.</p>
    /// <p>This is a string-to-string map. It can include the following fields.</p>
    /// <ul>
    /// <li>
    /// <p><code>Type</code> designates the type of object this is.</p></li>
    /// <li>
    /// <p><code>ResourceType</code> specifies the type of the resource. This field is used only when the value of the <code>Type</code> field is <code>Resource</code> or <code>AWS::Resource</code>.</p></li>
    /// <li>
    /// <p><code>Name</code> specifies the name of the object. This is used only if the value of the <code>Type</code> field is <code>Service</code>, <code>RemoteService</code>, or <code>AWS::Service</code>.</p></li>
    /// <li>
    /// <p><code>Identifier</code> identifies the resource objects of this resource. This is used only if the value of the <code>Type</code> field is <code>Resource</code> or <code>AWS::Resource</code>.</p></li>
    /// <li>
    /// <p><code>Environment</code> specifies the location where this object is hosted, or what it belongs to.</p></li>
    /// </ul>
    pub fn get_key_attributes(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.inner.get_key_attributes()
    }
    /// <p>The name of the operation that this SLO is associated with.</p>
    pub fn operation_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.operation_name(input.into());
        self
    }
    /// <p>The name of the operation that this SLO is associated with.</p>
    pub fn set_operation_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_operation_name(input);
        self
    }
    /// <p>The name of the operation that this SLO is associated with.</p>
    pub fn get_operation_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_operation_name()
    }
    /// <p>Identifies the dependency using the <code>DependencyKeyAttributes</code> and <code>DependencyOperationName</code>.</p>
    pub fn dependency_config(mut self, input: crate::types::DependencyConfig) -> Self {
        self.inner = self.inner.dependency_config(input);
        self
    }
    /// <p>Identifies the dependency using the <code>DependencyKeyAttributes</code> and <code>DependencyOperationName</code>.</p>
    pub fn set_dependency_config(mut self, input: ::std::option::Option<crate::types::DependencyConfig>) -> Self {
        self.inner = self.inner.set_dependency_config(input);
        self
    }
    /// <p>Identifies the dependency using the <code>DependencyKeyAttributes</code> and <code>DependencyOperationName</code>.</p>
    pub fn get_dependency_config(&self) -> &::std::option::Option<crate::types::DependencyConfig> {
        self.inner.get_dependency_config()
    }
    /// <p>The maximum number of results to return in one operation. If you omit this parameter, the default of 50 is used.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of results to return in one operation. If you omit this parameter, the default of 50 is used.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>The maximum number of results to return in one operation. If you omit this parameter, the default of 50 is used.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        self.inner.get_max_results()
    }
    /// <p>Include this value, if it was returned by the previous operation, to get the next set of service level objectives.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>Include this value, if it was returned by the previous operation, to get the next set of service level objectives.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>Include this value, if it was returned by the previous operation, to get the next set of service level objectives.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_next_token()
    }
    /// <p>If you are using this operation in a monitoring account, specify <code>true</code> to include SLO from source accounts in the returned data.</p>
    /// <p>When you are monitoring an account, you can use Amazon Web Services account ID in <code>KeyAttribute</code> filter for service source account and <code>SloOwnerawsaccountID</code> for SLO source account with <code>IncludeLinkedAccounts</code> to filter the returned data to only a single source account.</p>
    pub fn include_linked_accounts(mut self, input: bool) -> Self {
        self.inner = self.inner.include_linked_accounts(input);
        self
    }
    /// <p>If you are using this operation in a monitoring account, specify <code>true</code> to include SLO from source accounts in the returned data.</p>
    /// <p>When you are monitoring an account, you can use Amazon Web Services account ID in <code>KeyAttribute</code> filter for service source account and <code>SloOwnerawsaccountID</code> for SLO source account with <code>IncludeLinkedAccounts</code> to filter the returned data to only a single source account.</p>
    pub fn set_include_linked_accounts(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_include_linked_accounts(input);
        self
    }
    /// <p>If you are using this operation in a monitoring account, specify <code>true</code> to include SLO from source accounts in the returned data.</p>
    /// <p>When you are monitoring an account, you can use Amazon Web Services account ID in <code>KeyAttribute</code> filter for service source account and <code>SloOwnerawsaccountID</code> for SLO source account with <code>IncludeLinkedAccounts</code> to filter the returned data to only a single source account.</p>
    pub fn get_include_linked_accounts(&self) -> &::std::option::Option<bool> {
        self.inner.get_include_linked_accounts()
    }
    /// <p>SLO's Amazon Web Services account ID.</p>
    pub fn slo_owner_aws_account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.slo_owner_aws_account_id(input.into());
        self
    }
    /// <p>SLO's Amazon Web Services account ID.</p>
    pub fn set_slo_owner_aws_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_slo_owner_aws_account_id(input);
        self
    }
    /// <p>SLO's Amazon Web Services account ID.</p>
    pub fn get_slo_owner_aws_account_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_slo_owner_aws_account_id()
    }
    ///
    /// Appends an item to `MetricSourceTypes`.
    ///
    /// To override the contents of this collection use [`set_metric_source_types`](Self::set_metric_source_types).
    ///
    /// <p>Use this optional field to only include SLOs with the specified metric source types in the output. Supported types are:</p>
    /// <ul>
    /// <li>
    /// <p>Service operation</p></li>
    /// <li>
    /// <p>Service dependency</p></li>
    /// <li>
    /// <p>CloudWatch metric</p></li>
    /// </ul>
    pub fn metric_source_types(mut self, input: crate::types::MetricSourceType) -> Self {
        self.inner = self.inner.metric_source_types(input);
        self
    }
    /// <p>Use this optional field to only include SLOs with the specified metric source types in the output. Supported types are:</p>
    /// <ul>
    /// <li>
    /// <p>Service operation</p></li>
    /// <li>
    /// <p>Service dependency</p></li>
    /// <li>
    /// <p>CloudWatch metric</p></li>
    /// </ul>
    pub fn set_metric_source_types(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::MetricSourceType>>) -> Self {
        self.inner = self.inner.set_metric_source_types(input);
        self
    }
    /// <p>Use this optional field to only include SLOs with the specified metric source types in the output. Supported types are:</p>
    /// <ul>
    /// <li>
    /// <p>Service operation</p></li>
    /// <li>
    /// <p>Service dependency</p></li>
    /// <li>
    /// <p>CloudWatch metric</p></li>
    /// </ul>
    pub fn get_metric_source_types(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MetricSourceType>> {
        self.inner.get_metric_source_types()
    }
}
