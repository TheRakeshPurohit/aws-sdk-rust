// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListServiceStatesInput {
    /// <p>The start of the time period to retrieve service state information for. When used in a raw HTTP Query API, it is formatted as epoch time in seconds. For example, <code>1698778057</code>.</p>
    pub start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The end of the time period to retrieve service state information for. When used in a raw HTTP Query API, it is formatted as epoch time in seconds. For example, <code>1698778057</code>.</p>
    pub end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The maximum number of service states to return in one operation. If you omit this parameter, the default of 20 is used.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>Include this value, if it was returned by the previous operation, to get the next set of service states.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>If you are using this operation in a monitoring account, specify <code>true</code> to include service states from source accounts in the returned data.</p>
    pub include_linked_accounts: ::std::option::Option<bool>,
    /// <p>The Amazon Web Services account ID to filter service states by. Use this to limit results to services from a specific account.</p>
    pub aws_account_id: ::std::option::Option<::std::string::String>,
    /// <p>A list of attribute filters to narrow down the services. You can filter by platform, environment, or other service attributes.</p>
    pub attribute_filters: ::std::option::Option<::std::vec::Vec<crate::types::AttributeFilter>>,
}
impl ListServiceStatesInput {
    /// <p>The start of the time period to retrieve service state information for. When used in a raw HTTP Query API, it is formatted as epoch time in seconds. For example, <code>1698778057</code>.</p>
    pub fn start_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p>The end of the time period to retrieve service state information for. When used in a raw HTTP Query API, it is formatted as epoch time in seconds. For example, <code>1698778057</code>.</p>
    pub fn end_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.end_time.as_ref()
    }
    /// <p>The maximum number of service states to return in one operation. If you omit this parameter, the default of 20 is used.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>Include this value, if it was returned by the previous operation, to get the next set of service states.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>If you are using this operation in a monitoring account, specify <code>true</code> to include service states from source accounts in the returned data.</p>
    pub fn include_linked_accounts(&self) -> ::std::option::Option<bool> {
        self.include_linked_accounts
    }
    /// <p>The Amazon Web Services account ID to filter service states by. Use this to limit results to services from a specific account.</p>
    pub fn aws_account_id(&self) -> ::std::option::Option<&str> {
        self.aws_account_id.as_deref()
    }
    /// <p>A list of attribute filters to narrow down the services. You can filter by platform, environment, or other service attributes.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.attribute_filters.is_none()`.
    pub fn attribute_filters(&self) -> &[crate::types::AttributeFilter] {
        self.attribute_filters.as_deref().unwrap_or_default()
    }
}
impl ListServiceStatesInput {
    /// Creates a new builder-style object to manufacture [`ListServiceStatesInput`](crate::operation::list_service_states::ListServiceStatesInput).
    pub fn builder() -> crate::operation::list_service_states::builders::ListServiceStatesInputBuilder {
        crate::operation::list_service_states::builders::ListServiceStatesInputBuilder::default()
    }
}

/// A builder for [`ListServiceStatesInput`](crate::operation::list_service_states::ListServiceStatesInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListServiceStatesInputBuilder {
    pub(crate) start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) include_linked_accounts: ::std::option::Option<bool>,
    pub(crate) aws_account_id: ::std::option::Option<::std::string::String>,
    pub(crate) attribute_filters: ::std::option::Option<::std::vec::Vec<crate::types::AttributeFilter>>,
}
impl ListServiceStatesInputBuilder {
    /// <p>The start of the time period to retrieve service state information for. When used in a raw HTTP Query API, it is formatted as epoch time in seconds. For example, <code>1698778057</code>.</p>
    /// This field is required.
    pub fn start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The start of the time period to retrieve service state information for. When used in a raw HTTP Query API, it is formatted as epoch time in seconds. For example, <code>1698778057</code>.</p>
    pub fn set_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_time = input;
        self
    }
    /// <p>The start of the time period to retrieve service state information for. When used in a raw HTTP Query API, it is formatted as epoch time in seconds. For example, <code>1698778057</code>.</p>
    pub fn get_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_time
    }
    /// <p>The end of the time period to retrieve service state information for. When used in a raw HTTP Query API, it is formatted as epoch time in seconds. For example, <code>1698778057</code>.</p>
    /// This field is required.
    pub fn end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.end_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The end of the time period to retrieve service state information for. When used in a raw HTTP Query API, it is formatted as epoch time in seconds. For example, <code>1698778057</code>.</p>
    pub fn set_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.end_time = input;
        self
    }
    /// <p>The end of the time period to retrieve service state information for. When used in a raw HTTP Query API, it is formatted as epoch time in seconds. For example, <code>1698778057</code>.</p>
    pub fn get_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.end_time
    }
    /// <p>The maximum number of service states to return in one operation. If you omit this parameter, the default of 20 is used.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of service states to return in one operation. If you omit this parameter, the default of 20 is used.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of service states to return in one operation. If you omit this parameter, the default of 20 is used.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>Include this value, if it was returned by the previous operation, to get the next set of service states.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Include this value, if it was returned by the previous operation, to get the next set of service states.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>Include this value, if it was returned by the previous operation, to get the next set of service states.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>If you are using this operation in a monitoring account, specify <code>true</code> to include service states from source accounts in the returned data.</p>
    pub fn include_linked_accounts(mut self, input: bool) -> Self {
        self.include_linked_accounts = ::std::option::Option::Some(input);
        self
    }
    /// <p>If you are using this operation in a monitoring account, specify <code>true</code> to include service states from source accounts in the returned data.</p>
    pub fn set_include_linked_accounts(mut self, input: ::std::option::Option<bool>) -> Self {
        self.include_linked_accounts = input;
        self
    }
    /// <p>If you are using this operation in a monitoring account, specify <code>true</code> to include service states from source accounts in the returned data.</p>
    pub fn get_include_linked_accounts(&self) -> &::std::option::Option<bool> {
        &self.include_linked_accounts
    }
    /// <p>The Amazon Web Services account ID to filter service states by. Use this to limit results to services from a specific account.</p>
    pub fn aws_account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.aws_account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID to filter service states by. Use this to limit results to services from a specific account.</p>
    pub fn set_aws_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.aws_account_id = input;
        self
    }
    /// <p>The Amazon Web Services account ID to filter service states by. Use this to limit results to services from a specific account.</p>
    pub fn get_aws_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.aws_account_id
    }
    /// Appends an item to `attribute_filters`.
    ///
    /// To override the contents of this collection use [`set_attribute_filters`](Self::set_attribute_filters).
    ///
    /// <p>A list of attribute filters to narrow down the services. You can filter by platform, environment, or other service attributes.</p>
    pub fn attribute_filters(mut self, input: crate::types::AttributeFilter) -> Self {
        let mut v = self.attribute_filters.unwrap_or_default();
        v.push(input);
        self.attribute_filters = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of attribute filters to narrow down the services. You can filter by platform, environment, or other service attributes.</p>
    pub fn set_attribute_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AttributeFilter>>) -> Self {
        self.attribute_filters = input;
        self
    }
    /// <p>A list of attribute filters to narrow down the services. You can filter by platform, environment, or other service attributes.</p>
    pub fn get_attribute_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AttributeFilter>> {
        &self.attribute_filters
    }
    /// Consumes the builder and constructs a [`ListServiceStatesInput`](crate::operation::list_service_states::ListServiceStatesInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_service_states::ListServiceStatesInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::list_service_states::ListServiceStatesInput {
            start_time: self.start_time,
            end_time: self.end_time,
            max_results: self.max_results,
            next_token: self.next_token,
            include_linked_accounts: self.include_linked_accounts,
            aws_account_id: self.aws_account_id,
            attribute_filters: self.attribute_filters,
        })
    }
}
