// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ListAuditFindings`](crate::operation::list_audit_findings::builders::ListAuditFindingsFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`start_time(DateTime)`](crate::operation::list_audit_findings::builders::ListAuditFindingsFluentBuilder::start_time) / [`set_start_time(Option<DateTime>)`](crate::operation::list_audit_findings::builders::ListAuditFindingsFluentBuilder::set_start_time):<br>required: **true**<br><p>The start of the time period to retrieve audit findings for. When used in a raw HTTP Query API, it is formatted as epoch time in seconds. For example, <code>1698778057</code></p><br>
    ///   - [`end_time(DateTime)`](crate::operation::list_audit_findings::builders::ListAuditFindingsFluentBuilder::end_time) / [`set_end_time(Option<DateTime>)`](crate::operation::list_audit_findings::builders::ListAuditFindingsFluentBuilder::set_end_time):<br>required: **true**<br><p>The end of the time period to retrieve audit findings for. When used in a raw HTTP Query API, it is formatted as epoch time in seconds. For example, <code>1698778057</code></p><br>
    ///   - [`auditors(impl Into<String>)`](crate::operation::list_audit_findings::builders::ListAuditFindingsFluentBuilder::auditors) / [`set_auditors(Option<Vec::<String>>)`](crate::operation::list_audit_findings::builders::ListAuditFindingsFluentBuilder::set_auditors):<br>required: **false**<br><p>A list of auditor names to filter the findings by. Only findings generated by the specified auditors will be returned.</p> <p>The following auditors are available for configuration:</p> <ul>  <li>   <p><code>slo</code> - SloAuditor: Identifies SLO violations and detects breached thresholds during the Assessment phase.</p></li>  <li>   <p><code>operation_metric</code> - OperationMetricAuditor: Detects anomalies in service operation metrics from Application Signals RED metrics during the Assessment phase</p></li>  <li>   <p><code>service_quota</code> - ServiceQuotaAuditor: Monitors resource utilization against service quotas during the Assessment phase</p></li>  <li>   <p><code>trace</code> - TraceAuditor: Performs deep-dive analysis of distributed traces, correlating traces with breached SLOs or abnormal RED metrics during the Analysis phase</p></li>  <li>   <p><code>dependency_metric</code> - CriticalPathAuditor: Analyzes service dependency impacts and maps dependency relationships from Application Signals RED metrics during the Analysis phase</p></li>  <li>   <p><code>top_contributor</code> - TopContributorAuditor: Identifies infrastructure-level contributors to issues by analyzing EMF logs of Application Signals RED metrics during the Analysis phase</p></li>  <li>   <p><code>log</code> - LogAuditor: Extracts insights from application logs, categorizing error types and ranking severity by frequency during the Analysis phase</p></li> </ul><note>  <p><code>InitAuditor</code> and <code>Summarizer</code> auditors are not configurable as they are automatically triggered during the audit process.</p> </note><br>
    ///   - [`audit_targets(AuditTarget)`](crate::operation::list_audit_findings::builders::ListAuditFindingsFluentBuilder::audit_targets) / [`set_audit_targets(Option<Vec::<AuditTarget>>)`](crate::operation::list_audit_findings::builders::ListAuditFindingsFluentBuilder::set_audit_targets):<br>required: **true**<br><p>A list of audit targets to filter the findings by. You can specify services, SLOs, or service operations to limit the audit findings to specific entities.</p><br>
    ///   - [`next_token(impl Into<String>)`](crate::operation::list_audit_findings::builders::ListAuditFindingsFluentBuilder::next_token) / [`set_next_token(Option<String>)`](crate::operation::list_audit_findings::builders::ListAuditFindingsFluentBuilder::set_next_token):<br>required: **false**<br><p>Include this value, if it was returned by the previous operation, to get the next set of audit findings.</p><br>
    ///   - [`max_results(i32)`](crate::operation::list_audit_findings::builders::ListAuditFindingsFluentBuilder::max_results) / [`set_max_results(Option<i32>)`](crate::operation::list_audit_findings::builders::ListAuditFindingsFluentBuilder::set_max_results):<br>required: **false**<br><p>The maximum number of audit findings to return in one operation. If you omit this parameter, the default of 10 is used.</p><br>
    /// - On success, responds with [`ListAuditFindingsOutput`](crate::operation::list_audit_findings::ListAuditFindingsOutput) with field(s):
    ///   - [`audit_findings(Vec::<AuditFinding>)`](crate::operation::list_audit_findings::ListAuditFindingsOutput::audit_findings): <p>An array of structures, where each structure contains information about one audit finding, including the auditor results, severity, and associated metric and dependency graphs.</p>
    ///   - [`next_token(Option<String>)`](crate::operation::list_audit_findings::ListAuditFindingsOutput::next_token): <p>Include this value in your next use of this API to get the next set of audit findings.</p>
    /// - On failure, responds with [`SdkError<ListAuditFindingsError>`](crate::operation::list_audit_findings::ListAuditFindingsError)
    pub fn list_audit_findings(&self) -> crate::operation::list_audit_findings::builders::ListAuditFindingsFluentBuilder {
        crate::operation::list_audit_findings::builders::ListAuditFindingsFluentBuilder::new(self.handle.clone())
    }
}
