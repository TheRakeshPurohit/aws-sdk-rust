// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_list_service_states_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::list_service_states::ListServiceStatesInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.attribute_filters {
        let mut array_2 = object.key("AttributeFilters").start_array();
        for item_3 in var_1 {
            {
                #[allow(unused_mut)]
                let mut object_4 = array_2.value().start_object();
                crate::protocol_serde::shape_attribute_filter::ser_attribute_filter(&mut object_4, item_3)?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    if let Some(var_5) = &input.aws_account_id {
        object.key("AwsAccountId").string(var_5.as_str());
    }
    if let Some(var_6) = &input.end_time {
        object
            .key("EndTime")
            .date_time(var_6, ::aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_7) = &input.include_linked_accounts {
        object.key("IncludeLinkedAccounts").boolean(*var_7);
    }
    if let Some(var_8) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_8).into()),
        );
    }
    if let Some(var_9) = &input.next_token {
        object.key("NextToken").string(var_9.as_str());
    }
    if let Some(var_10) = &input.start_time {
        object
            .key("StartTime")
            .date_time(var_10, ::aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}
