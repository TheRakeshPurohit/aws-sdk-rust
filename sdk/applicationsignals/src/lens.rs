// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_list_service_dependencies_output_output_next_token(
    input: &crate::operation::list_service_dependencies::ListServiceDependenciesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_service_dependents_output_output_next_token(
    input: &crate::operation::list_service_dependents::ListServiceDependentsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_service_level_objective_exclusion_windows_output_output_next_token(
    input: &crate::operation::list_service_level_objective_exclusion_windows::ListServiceLevelObjectiveExclusionWindowsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_service_level_objectives_output_output_next_token(
    input: &crate::operation::list_service_level_objectives::ListServiceLevelObjectivesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_service_operations_output_output_next_token(
    input: &crate::operation::list_service_operations::ListServiceOperationsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_service_states_output_output_next_token(
    input: &crate::operation::list_service_states::ListServiceStatesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_services_output_output_next_token(
    input: &crate::operation::list_services::ListServicesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_service_dependencies_output_output_service_dependencies(
    input: crate::operation::list_service_dependencies::ListServiceDependenciesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ServiceDependency>> {
    let input = input.service_dependencies;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_service_dependents_output_output_service_dependents(
    input: crate::operation::list_service_dependents::ListServiceDependentsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ServiceDependent>> {
    let input = input.service_dependents;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_service_level_objective_exclusion_windows_output_output_exclusion_windows(
    input: crate::operation::list_service_level_objective_exclusion_windows::ListServiceLevelObjectiveExclusionWindowsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ExclusionWindow>> {
    let input = input.exclusion_windows;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_service_level_objectives_output_output_slo_summaries(
    input: crate::operation::list_service_level_objectives::ListServiceLevelObjectivesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ServiceLevelObjectiveSummary>> {
    let input = input.slo_summaries?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_service_operations_output_output_service_operations(
    input: crate::operation::list_service_operations::ListServiceOperationsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ServiceOperation>> {
    let input = input.service_operations;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_service_states_output_output_service_states(
    input: crate::operation::list_service_states::ListServiceStatesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ServiceState>> {
    let input = input.service_states;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_services_output_output_service_summaries(
    input: crate::operation::list_services::ListServicesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ServiceSummary>> {
    let input = input.service_summaries;
    ::std::option::Option::Some(input)
}
