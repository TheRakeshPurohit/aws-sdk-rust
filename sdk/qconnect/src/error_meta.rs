// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum Error {
    /// <p>You do not have sufficient access to perform this action.</p>
    AccessDeniedException(crate::types::error::AccessDeniedException),
    /// <p>The request could not be processed because of conflict in the current state of the resource. For example, if you're using a <code>Create</code> API (such as <code>CreateAssistant</code>) that accepts name, a conflicting resource (usually with the same name) is being created or mutated.</p>
    ConflictException(crate::types::error::ConflictException),
    /// <p>An error occurred while calling a dependency. For example, calling <code>connect:DecribeContact</code> as part of <code>CreateSession</code> with a contactArn.</p>
    DependencyFailedException(crate::types::error::DependencyFailedException),
    /// <p>The provided <code>revisionId</code> does not match, indicating the content has been modified since it was last read.</p>
    PreconditionFailedException(crate::types::error::PreconditionFailedException),
    /// <p>The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future.</p>
    RequestTimeoutException(crate::types::error::RequestTimeoutException),
    /// <p>The specified resource does not exist.</p>
    ResourceNotFoundException(crate::types::error::ResourceNotFoundException),
    /// <p>You've exceeded your service quota. To perform the requested action, remove some of the relevant resources, or use service quotas to request a service quota increase.</p>
    ServiceQuotaExceededException(crate::types::error::ServiceQuotaExceededException),
    /// <p>The throttling limit has been exceeded.</p>
    ThrottlingException(crate::types::error::ThrottlingException),
    /// <p>Amazon Q in Connect throws this exception if you have too many tags in your tag set.</p>
    TooManyTagsException(crate::types::error::TooManyTagsException),
    /// <p>You do not have permission to perform this action.</p>
    UnauthorizedException(crate::types::error::UnauthorizedException),
    /// <p>The input fails to satisfy the constraints specified by a service.</p>
    ValidationException(crate::types::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    #[deprecated(note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
    variable wildcard pattern and check `.code()`:
     \
    &nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
     \
    See [`ProvideErrorMetadata`](#impl-ProvideErrorMetadata-for-Error) for what information is available for the error.")]
    Unhandled(crate::error::sealed_unhandled::Unhandled),
}
impl ::std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::DependencyFailedException(inner) => inner.fmt(f),
            Error::PreconditionFailedException(inner) => inner.fmt(f),
            Error::RequestTimeoutException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::TooManyTagsException(inner) => inner.fmt(f),
            Error::UnauthorizedException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(_) => {
                if let ::std::option::Option::Some(code) = ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self) {
                    write!(f, "unhandled error ({code})")
                } else {
                    f.write_str("unhandled error")
                }
            }
        }
    }
}
impl From<::aws_smithy_types::error::operation::BuildError> for Error {
    fn from(value: ::aws_smithy_types::error::operation::BuildError) -> Self {
        Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
            source: value.into(),
            meta: ::std::default::Default::default(),
        })
    }
}
impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for Error {
    fn meta(&self) -> &::aws_smithy_types::error::metadata::ErrorMetadata {
        match self {
            Self::AccessDeniedException(inner) => inner.meta(),
            Self::ConflictException(inner) => inner.meta(),
            Self::DependencyFailedException(inner) => inner.meta(),
            Self::PreconditionFailedException(inner) => inner.meta(),
            Self::RequestTimeoutException(inner) => inner.meta(),
            Self::ResourceNotFoundException(inner) => inner.meta(),
            Self::ServiceQuotaExceededException(inner) => inner.meta(),
            Self::ThrottlingException(inner) => inner.meta(),
            Self::TooManyTagsException(inner) => inner.meta(),
            Self::UnauthorizedException(inner) => inner.meta(),
            Self::ValidationException(inner) => inner.meta(),
            Self::Unhandled(inner) => &inner.meta,
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::activate_message_template::ActivateMessageTemplateError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::activate_message_template::ActivateMessageTemplateError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::activate_message_template::ActivateMessageTemplateError> for Error {
    fn from(err: crate::operation::activate_message_template::ActivateMessageTemplateError) -> Self {
        match err {
            crate::operation::activate_message_template::ActivateMessageTemplateError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::activate_message_template::ActivateMessageTemplateError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::activate_message_template::ActivateMessageTemplateError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::activate_message_template::ActivateMessageTemplateError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::activate_message_template::ActivateMessageTemplateError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::activate_message_template::ActivateMessageTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_ai_agent::CreateAIAgentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_ai_agent::CreateAIAgentError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_ai_agent::CreateAIAgentError> for Error {
    fn from(err: crate::operation::create_ai_agent::CreateAIAgentError) -> Self {
        match err {
            crate::operation::create_ai_agent::CreateAIAgentError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_ai_agent::CreateAIAgentError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_ai_agent::CreateAIAgentError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_ai_agent::CreateAIAgentError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_ai_agent::CreateAIAgentError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_ai_agent::CreateAIAgentError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::create_ai_agent::CreateAIAgentError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_ai_agent::CreateAIAgentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_ai_agent_version::CreateAIAgentVersionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_ai_agent_version::CreateAIAgentVersionError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_ai_agent_version::CreateAIAgentVersionError> for Error {
    fn from(err: crate::operation::create_ai_agent_version::CreateAIAgentVersionError) -> Self {
        match err {
            crate::operation::create_ai_agent_version::CreateAIAgentVersionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_ai_agent_version::CreateAIAgentVersionError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_ai_agent_version::CreateAIAgentVersionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_ai_agent_version::CreateAIAgentVersionError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_ai_agent_version::CreateAIAgentVersionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_ai_agent_version::CreateAIAgentVersionError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::create_ai_agent_version::CreateAIAgentVersionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_ai_agent_version::CreateAIAgentVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_ai_guardrail::CreateAIGuardrailError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_ai_guardrail::CreateAIGuardrailError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_ai_guardrail::CreateAIGuardrailError> for Error {
    fn from(err: crate::operation::create_ai_guardrail::CreateAIGuardrailError) -> Self {
        match err {
            crate::operation::create_ai_guardrail::CreateAIGuardrailError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_ai_guardrail::CreateAIGuardrailError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_ai_guardrail::CreateAIGuardrailError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_ai_guardrail::CreateAIGuardrailError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_ai_guardrail::CreateAIGuardrailError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_ai_guardrail::CreateAIGuardrailError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::create_ai_guardrail::CreateAIGuardrailError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_ai_guardrail::CreateAIGuardrailError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_ai_guardrail_version::CreateAIGuardrailVersionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_ai_guardrail_version::CreateAIGuardrailVersionError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_ai_guardrail_version::CreateAIGuardrailVersionError> for Error {
    fn from(err: crate::operation::create_ai_guardrail_version::CreateAIGuardrailVersionError) -> Self {
        match err {
            crate::operation::create_ai_guardrail_version::CreateAIGuardrailVersionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_ai_guardrail_version::CreateAIGuardrailVersionError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_ai_guardrail_version::CreateAIGuardrailVersionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_ai_guardrail_version::CreateAIGuardrailVersionError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_ai_guardrail_version::CreateAIGuardrailVersionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::create_ai_guardrail_version::CreateAIGuardrailVersionError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::create_ai_guardrail_version::CreateAIGuardrailVersionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_ai_guardrail_version::CreateAIGuardrailVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_ai_prompt::CreateAIPromptError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_ai_prompt::CreateAIPromptError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_ai_prompt::CreateAIPromptError> for Error {
    fn from(err: crate::operation::create_ai_prompt::CreateAIPromptError) -> Self {
        match err {
            crate::operation::create_ai_prompt::CreateAIPromptError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_ai_prompt::CreateAIPromptError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_ai_prompt::CreateAIPromptError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_ai_prompt::CreateAIPromptError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_ai_prompt::CreateAIPromptError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_ai_prompt::CreateAIPromptError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::create_ai_prompt::CreateAIPromptError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_ai_prompt::CreateAIPromptError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_ai_prompt_version::CreateAIPromptVersionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_ai_prompt_version::CreateAIPromptVersionError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_ai_prompt_version::CreateAIPromptVersionError> for Error {
    fn from(err: crate::operation::create_ai_prompt_version::CreateAIPromptVersionError) -> Self {
        match err {
            crate::operation::create_ai_prompt_version::CreateAIPromptVersionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_ai_prompt_version::CreateAIPromptVersionError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_ai_prompt_version::CreateAIPromptVersionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_ai_prompt_version::CreateAIPromptVersionError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_ai_prompt_version::CreateAIPromptVersionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_ai_prompt_version::CreateAIPromptVersionError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::create_ai_prompt_version::CreateAIPromptVersionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_ai_prompt_version::CreateAIPromptVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_assistant::CreateAssistantError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_assistant::CreateAssistantError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_assistant::CreateAssistantError> for Error {
    fn from(err: crate::operation::create_assistant::CreateAssistantError) -> Self {
        match err {
            crate::operation::create_assistant::CreateAssistantError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_assistant::CreateAssistantError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_assistant::CreateAssistantError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_assistant::CreateAssistantError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::create_assistant::CreateAssistantError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_assistant::CreateAssistantError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_assistant_association::CreateAssistantAssociationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_assistant_association::CreateAssistantAssociationError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_assistant_association::CreateAssistantAssociationError> for Error {
    fn from(err: crate::operation::create_assistant_association::CreateAssistantAssociationError) -> Self {
        match err {
            crate::operation::create_assistant_association::CreateAssistantAssociationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_assistant_association::CreateAssistantAssociationError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::create_assistant_association::CreateAssistantAssociationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_assistant_association::CreateAssistantAssociationError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_assistant_association::CreateAssistantAssociationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_assistant_association::CreateAssistantAssociationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_content::CreateContentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_content::CreateContentError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_content::CreateContentError> for Error {
    fn from(err: crate::operation::create_content::CreateContentError) -> Self {
        match err {
            crate::operation::create_content::CreateContentError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_content::CreateContentError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_content::CreateContentError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_content::CreateContentError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_content::CreateContentError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::create_content::CreateContentError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_content::CreateContentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_content_association::CreateContentAssociationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_content_association::CreateContentAssociationError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_content_association::CreateContentAssociationError> for Error {
    fn from(err: crate::operation::create_content_association::CreateContentAssociationError) -> Self {
        match err {
            crate::operation::create_content_association::CreateContentAssociationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_content_association::CreateContentAssociationError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_content_association::CreateContentAssociationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_content_association::CreateContentAssociationError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_content_association::CreateContentAssociationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::create_content_association::CreateContentAssociationError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::create_content_association::CreateContentAssociationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_content_association::CreateContentAssociationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_knowledge_base::CreateKnowledgeBaseError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_knowledge_base::CreateKnowledgeBaseError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_knowledge_base::CreateKnowledgeBaseError> for Error {
    fn from(err: crate::operation::create_knowledge_base::CreateKnowledgeBaseError) -> Self {
        match err {
            crate::operation::create_knowledge_base::CreateKnowledgeBaseError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_knowledge_base::CreateKnowledgeBaseError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_knowledge_base::CreateKnowledgeBaseError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_knowledge_base::CreateKnowledgeBaseError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::create_knowledge_base::CreateKnowledgeBaseError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_knowledge_base::CreateKnowledgeBaseError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_message_template::CreateMessageTemplateError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_message_template::CreateMessageTemplateError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_message_template::CreateMessageTemplateError> for Error {
    fn from(err: crate::operation::create_message_template::CreateMessageTemplateError) -> Self {
        match err {
            crate::operation::create_message_template::CreateMessageTemplateError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_message_template::CreateMessageTemplateError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_message_template::CreateMessageTemplateError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_message_template::CreateMessageTemplateError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_message_template::CreateMessageTemplateError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_message_template::CreateMessageTemplateError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_message_template::CreateMessageTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_message_template_attachment::CreateMessageTemplateAttachmentError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_message_template_attachment::CreateMessageTemplateAttachmentError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_message_template_attachment::CreateMessageTemplateAttachmentError> for Error {
    fn from(err: crate::operation::create_message_template_attachment::CreateMessageTemplateAttachmentError) -> Self {
        match err {
            crate::operation::create_message_template_attachment::CreateMessageTemplateAttachmentError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_message_template_attachment::CreateMessageTemplateAttachmentError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::create_message_template_attachment::CreateMessageTemplateAttachmentError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_message_template_attachment::CreateMessageTemplateAttachmentError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_message_template_attachment::CreateMessageTemplateAttachmentError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::create_message_template_attachment::CreateMessageTemplateAttachmentError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::create_message_template_attachment::CreateMessageTemplateAttachmentError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_message_template_attachment::CreateMessageTemplateAttachmentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_message_template_version::CreateMessageTemplateVersionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_message_template_version::CreateMessageTemplateVersionError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_message_template_version::CreateMessageTemplateVersionError> for Error {
    fn from(err: crate::operation::create_message_template_version::CreateMessageTemplateVersionError) -> Self {
        match err {
            crate::operation::create_message_template_version::CreateMessageTemplateVersionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_message_template_version::CreateMessageTemplateVersionError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::create_message_template_version::CreateMessageTemplateVersionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_message_template_version::CreateMessageTemplateVersionError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_message_template_version::CreateMessageTemplateVersionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::create_message_template_version::CreateMessageTemplateVersionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_message_template_version::CreateMessageTemplateVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_quick_response::CreateQuickResponseError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_quick_response::CreateQuickResponseError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_quick_response::CreateQuickResponseError> for Error {
    fn from(err: crate::operation::create_quick_response::CreateQuickResponseError) -> Self {
        match err {
            crate::operation::create_quick_response::CreateQuickResponseError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_quick_response::CreateQuickResponseError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_quick_response::CreateQuickResponseError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_quick_response::CreateQuickResponseError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_quick_response::CreateQuickResponseError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::create_quick_response::CreateQuickResponseError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_quick_response::CreateQuickResponseError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_session::CreateSessionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_session::CreateSessionError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_session::CreateSessionError> for Error {
    fn from(err: crate::operation::create_session::CreateSessionError) -> Self {
        match err {
            crate::operation::create_session::CreateSessionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_session::CreateSessionError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_session::CreateSessionError::DependencyFailedException(inner) => Error::DependencyFailedException(inner),
            crate::operation::create_session::CreateSessionError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_session::CreateSessionError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::create_session::CreateSessionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_session::CreateSessionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::deactivate_message_template::DeactivateMessageTemplateError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::deactivate_message_template::DeactivateMessageTemplateError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::deactivate_message_template::DeactivateMessageTemplateError> for Error {
    fn from(err: crate::operation::deactivate_message_template::DeactivateMessageTemplateError) -> Self {
        match err {
            crate::operation::deactivate_message_template::DeactivateMessageTemplateError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::deactivate_message_template::DeactivateMessageTemplateError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::deactivate_message_template::DeactivateMessageTemplateError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::deactivate_message_template::DeactivateMessageTemplateError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::deactivate_message_template::DeactivateMessageTemplateError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::deactivate_message_template::DeactivateMessageTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_ai_agent::DeleteAIAgentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_ai_agent::DeleteAIAgentError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_ai_agent::DeleteAIAgentError> for Error {
    fn from(err: crate::operation::delete_ai_agent::DeleteAIAgentError) -> Self {
        match err {
            crate::operation::delete_ai_agent::DeleteAIAgentError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_ai_agent::DeleteAIAgentError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_ai_agent::DeleteAIAgentError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_ai_agent::DeleteAIAgentError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::delete_ai_agent::DeleteAIAgentError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_ai_agent::DeleteAIAgentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_ai_agent_version::DeleteAIAgentVersionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_ai_agent_version::DeleteAIAgentVersionError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_ai_agent_version::DeleteAIAgentVersionError> for Error {
    fn from(err: crate::operation::delete_ai_agent_version::DeleteAIAgentVersionError) -> Self {
        match err {
            crate::operation::delete_ai_agent_version::DeleteAIAgentVersionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_ai_agent_version::DeleteAIAgentVersionError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_ai_agent_version::DeleteAIAgentVersionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_ai_agent_version::DeleteAIAgentVersionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_ai_agent_version::DeleteAIAgentVersionError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::delete_ai_agent_version::DeleteAIAgentVersionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_ai_agent_version::DeleteAIAgentVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_ai_guardrail::DeleteAIGuardrailError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_ai_guardrail::DeleteAIGuardrailError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_ai_guardrail::DeleteAIGuardrailError> for Error {
    fn from(err: crate::operation::delete_ai_guardrail::DeleteAIGuardrailError) -> Self {
        match err {
            crate::operation::delete_ai_guardrail::DeleteAIGuardrailError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_ai_guardrail::DeleteAIGuardrailError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_ai_guardrail::DeleteAIGuardrailError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_ai_guardrail::DeleteAIGuardrailError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_ai_guardrail::DeleteAIGuardrailError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::delete_ai_guardrail::DeleteAIGuardrailError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_ai_guardrail::DeleteAIGuardrailError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_ai_guardrail_version::DeleteAIGuardrailVersionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_ai_guardrail_version::DeleteAIGuardrailVersionError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_ai_guardrail_version::DeleteAIGuardrailVersionError> for Error {
    fn from(err: crate::operation::delete_ai_guardrail_version::DeleteAIGuardrailVersionError) -> Self {
        match err {
            crate::operation::delete_ai_guardrail_version::DeleteAIGuardrailVersionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_ai_guardrail_version::DeleteAIGuardrailVersionError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_ai_guardrail_version::DeleteAIGuardrailVersionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_ai_guardrail_version::DeleteAIGuardrailVersionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_ai_guardrail_version::DeleteAIGuardrailVersionError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::delete_ai_guardrail_version::DeleteAIGuardrailVersionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_ai_guardrail_version::DeleteAIGuardrailVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_ai_prompt::DeleteAIPromptError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_ai_prompt::DeleteAIPromptError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_ai_prompt::DeleteAIPromptError> for Error {
    fn from(err: crate::operation::delete_ai_prompt::DeleteAIPromptError) -> Self {
        match err {
            crate::operation::delete_ai_prompt::DeleteAIPromptError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_ai_prompt::DeleteAIPromptError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_ai_prompt::DeleteAIPromptError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_ai_prompt::DeleteAIPromptError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::delete_ai_prompt::DeleteAIPromptError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_ai_prompt::DeleteAIPromptError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_ai_prompt_version::DeleteAIPromptVersionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_ai_prompt_version::DeleteAIPromptVersionError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_ai_prompt_version::DeleteAIPromptVersionError> for Error {
    fn from(err: crate::operation::delete_ai_prompt_version::DeleteAIPromptVersionError) -> Self {
        match err {
            crate::operation::delete_ai_prompt_version::DeleteAIPromptVersionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_ai_prompt_version::DeleteAIPromptVersionError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_ai_prompt_version::DeleteAIPromptVersionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_ai_prompt_version::DeleteAIPromptVersionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_ai_prompt_version::DeleteAIPromptVersionError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::delete_ai_prompt_version::DeleteAIPromptVersionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_ai_prompt_version::DeleteAIPromptVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_assistant::DeleteAssistantError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_assistant::DeleteAssistantError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_assistant::DeleteAssistantError> for Error {
    fn from(err: crate::operation::delete_assistant::DeleteAssistantError) -> Self {
        match err {
            crate::operation::delete_assistant::DeleteAssistantError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_assistant::DeleteAssistantError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_assistant::DeleteAssistantError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::delete_assistant::DeleteAssistantError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_assistant::DeleteAssistantError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_assistant_association::DeleteAssistantAssociationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_assistant_association::DeleteAssistantAssociationError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_assistant_association::DeleteAssistantAssociationError> for Error {
    fn from(err: crate::operation::delete_assistant_association::DeleteAssistantAssociationError) -> Self {
        match err {
            crate::operation::delete_assistant_association::DeleteAssistantAssociationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_assistant_association::DeleteAssistantAssociationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_assistant_association::DeleteAssistantAssociationError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::delete_assistant_association::DeleteAssistantAssociationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_assistant_association::DeleteAssistantAssociationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_content::DeleteContentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_content::DeleteContentError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_content::DeleteContentError> for Error {
    fn from(err: crate::operation::delete_content::DeleteContentError) -> Self {
        match err {
            crate::operation::delete_content::DeleteContentError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_content::DeleteContentError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_content::DeleteContentError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_content::DeleteContentError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::delete_content::DeleteContentError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_content::DeleteContentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_content_association::DeleteContentAssociationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_content_association::DeleteContentAssociationError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_content_association::DeleteContentAssociationError> for Error {
    fn from(err: crate::operation::delete_content_association::DeleteContentAssociationError) -> Self {
        match err {
            crate::operation::delete_content_association::DeleteContentAssociationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_content_association::DeleteContentAssociationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_content_association::DeleteContentAssociationError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::delete_content_association::DeleteContentAssociationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_content_association::DeleteContentAssociationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_import_job::DeleteImportJobError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_import_job::DeleteImportJobError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_import_job::DeleteImportJobError> for Error {
    fn from(err: crate::operation::delete_import_job::DeleteImportJobError) -> Self {
        match err {
            crate::operation::delete_import_job::DeleteImportJobError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_import_job::DeleteImportJobError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_import_job::DeleteImportJobError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_import_job::DeleteImportJobError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::delete_import_job::DeleteImportJobError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_import_job::DeleteImportJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_knowledge_base::DeleteKnowledgeBaseError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_knowledge_base::DeleteKnowledgeBaseError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_knowledge_base::DeleteKnowledgeBaseError> for Error {
    fn from(err: crate::operation::delete_knowledge_base::DeleteKnowledgeBaseError) -> Self {
        match err {
            crate::operation::delete_knowledge_base::DeleteKnowledgeBaseError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_knowledge_base::DeleteKnowledgeBaseError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_knowledge_base::DeleteKnowledgeBaseError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_knowledge_base::DeleteKnowledgeBaseError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::delete_knowledge_base::DeleteKnowledgeBaseError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_knowledge_base::DeleteKnowledgeBaseError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_message_template::DeleteMessageTemplateError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_message_template::DeleteMessageTemplateError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_message_template::DeleteMessageTemplateError> for Error {
    fn from(err: crate::operation::delete_message_template::DeleteMessageTemplateError) -> Self {
        match err {
            crate::operation::delete_message_template::DeleteMessageTemplateError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_message_template::DeleteMessageTemplateError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_message_template::DeleteMessageTemplateError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_message_template::DeleteMessageTemplateError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_message_template::DeleteMessageTemplateError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_message_template::DeleteMessageTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_message_template_attachment::DeleteMessageTemplateAttachmentError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_message_template_attachment::DeleteMessageTemplateAttachmentError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_message_template_attachment::DeleteMessageTemplateAttachmentError> for Error {
    fn from(err: crate::operation::delete_message_template_attachment::DeleteMessageTemplateAttachmentError) -> Self {
        match err {
            crate::operation::delete_message_template_attachment::DeleteMessageTemplateAttachmentError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_message_template_attachment::DeleteMessageTemplateAttachmentError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::delete_message_template_attachment::DeleteMessageTemplateAttachmentError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_message_template_attachment::DeleteMessageTemplateAttachmentError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_message_template_attachment::DeleteMessageTemplateAttachmentError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_message_template_attachment::DeleteMessageTemplateAttachmentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_quick_response::DeleteQuickResponseError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_quick_response::DeleteQuickResponseError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_quick_response::DeleteQuickResponseError> for Error {
    fn from(err: crate::operation::delete_quick_response::DeleteQuickResponseError) -> Self {
        match err {
            crate::operation::delete_quick_response::DeleteQuickResponseError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_quick_response::DeleteQuickResponseError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_quick_response::DeleteQuickResponseError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::delete_quick_response::DeleteQuickResponseError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_quick_response::DeleteQuickResponseError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_ai_agent::GetAIAgentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_ai_agent::GetAIAgentError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_ai_agent::GetAIAgentError> for Error {
    fn from(err: crate::operation::get_ai_agent::GetAIAgentError) -> Self {
        match err {
            crate::operation::get_ai_agent::GetAIAgentError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_ai_agent::GetAIAgentError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_ai_agent::GetAIAgentError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_ai_agent::GetAIAgentError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_ai_agent::GetAIAgentError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_ai_agent::GetAIAgentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_ai_guardrail::GetAIGuardrailError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_ai_guardrail::GetAIGuardrailError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_ai_guardrail::GetAIGuardrailError> for Error {
    fn from(err: crate::operation::get_ai_guardrail::GetAIGuardrailError) -> Self {
        match err {
            crate::operation::get_ai_guardrail::GetAIGuardrailError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_ai_guardrail::GetAIGuardrailError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_ai_guardrail::GetAIGuardrailError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_ai_guardrail::GetAIGuardrailError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_ai_guardrail::GetAIGuardrailError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_ai_guardrail::GetAIGuardrailError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_ai_prompt::GetAIPromptError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_ai_prompt::GetAIPromptError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_ai_prompt::GetAIPromptError> for Error {
    fn from(err: crate::operation::get_ai_prompt::GetAIPromptError) -> Self {
        match err {
            crate::operation::get_ai_prompt::GetAIPromptError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_ai_prompt::GetAIPromptError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_ai_prompt::GetAIPromptError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_ai_prompt::GetAIPromptError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_ai_prompt::GetAIPromptError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_ai_prompt::GetAIPromptError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_assistant::GetAssistantError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_assistant::GetAssistantError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_assistant::GetAssistantError> for Error {
    fn from(err: crate::operation::get_assistant::GetAssistantError) -> Self {
        match err {
            crate::operation::get_assistant::GetAssistantError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_assistant::GetAssistantError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_assistant::GetAssistantError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_assistant::GetAssistantError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_assistant::GetAssistantError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_assistant_association::GetAssistantAssociationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_assistant_association::GetAssistantAssociationError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_assistant_association::GetAssistantAssociationError> for Error {
    fn from(err: crate::operation::get_assistant_association::GetAssistantAssociationError) -> Self {
        match err {
            crate::operation::get_assistant_association::GetAssistantAssociationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_assistant_association::GetAssistantAssociationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_assistant_association::GetAssistantAssociationError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::get_assistant_association::GetAssistantAssociationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_assistant_association::GetAssistantAssociationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_content::GetContentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_content::GetContentError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_content::GetContentError> for Error {
    fn from(err: crate::operation::get_content::GetContentError) -> Self {
        match err {
            crate::operation::get_content::GetContentError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_content::GetContentError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_content::GetContentError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_content::GetContentError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_content::GetContentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_content_association::GetContentAssociationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_content_association::GetContentAssociationError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_content_association::GetContentAssociationError> for Error {
    fn from(err: crate::operation::get_content_association::GetContentAssociationError) -> Self {
        match err {
            crate::operation::get_content_association::GetContentAssociationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_content_association::GetContentAssociationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_content_association::GetContentAssociationError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::get_content_association::GetContentAssociationError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_content_association::GetContentAssociationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_content_summary::GetContentSummaryError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_content_summary::GetContentSummaryError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_content_summary::GetContentSummaryError> for Error {
    fn from(err: crate::operation::get_content_summary::GetContentSummaryError) -> Self {
        match err {
            crate::operation::get_content_summary::GetContentSummaryError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_content_summary::GetContentSummaryError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_content_summary::GetContentSummaryError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_content_summary::GetContentSummaryError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_content_summary::GetContentSummaryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_import_job::GetImportJobError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_import_job::GetImportJobError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_import_job::GetImportJobError> for Error {
    fn from(err: crate::operation::get_import_job::GetImportJobError) -> Self {
        match err {
            crate::operation::get_import_job::GetImportJobError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_import_job::GetImportJobError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_import_job::GetImportJobError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_import_job::GetImportJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_knowledge_base::GetKnowledgeBaseError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_knowledge_base::GetKnowledgeBaseError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_knowledge_base::GetKnowledgeBaseError> for Error {
    fn from(err: crate::operation::get_knowledge_base::GetKnowledgeBaseError) -> Self {
        match err {
            crate::operation::get_knowledge_base::GetKnowledgeBaseError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_knowledge_base::GetKnowledgeBaseError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_knowledge_base::GetKnowledgeBaseError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_knowledge_base::GetKnowledgeBaseError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_knowledge_base::GetKnowledgeBaseError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_message_template::GetMessageTemplateError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_message_template::GetMessageTemplateError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_message_template::GetMessageTemplateError> for Error {
    fn from(err: crate::operation::get_message_template::GetMessageTemplateError) -> Self {
        match err {
            crate::operation::get_message_template::GetMessageTemplateError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_message_template::GetMessageTemplateError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_message_template::GetMessageTemplateError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_message_template::GetMessageTemplateError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_message_template::GetMessageTemplateError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_message_template::GetMessageTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_next_message::GetNextMessageError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_next_message::GetNextMessageError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_next_message::GetNextMessageError> for Error {
    fn from(err: crate::operation::get_next_message::GetNextMessageError) -> Self {
        match err {
            crate::operation::get_next_message::GetNextMessageError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_next_message::GetNextMessageError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_next_message::GetNextMessageError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_next_message::GetNextMessageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_quick_response::GetQuickResponseError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_quick_response::GetQuickResponseError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_quick_response::GetQuickResponseError> for Error {
    fn from(err: crate::operation::get_quick_response::GetQuickResponseError) -> Self {
        match err {
            crate::operation::get_quick_response::GetQuickResponseError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_quick_response::GetQuickResponseError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_quick_response::GetQuickResponseError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_quick_response::GetQuickResponseError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_quick_response::GetQuickResponseError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_recommendations::GetRecommendationsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_recommendations::GetRecommendationsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_recommendations::GetRecommendationsError> for Error {
    fn from(err: crate::operation::get_recommendations::GetRecommendationsError) -> Self {
        match err {
            crate::operation::get_recommendations::GetRecommendationsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_recommendations::GetRecommendationsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_recommendations::GetRecommendationsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_recommendations::GetRecommendationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_session::GetSessionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_session::GetSessionError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_session::GetSessionError> for Error {
    fn from(err: crate::operation::get_session::GetSessionError) -> Self {
        match err {
            crate::operation::get_session::GetSessionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_session::GetSessionError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_session::GetSessionError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_session::GetSessionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_session::GetSessionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_ai_agents::ListAIAgentsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_ai_agents::ListAIAgentsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_ai_agents::ListAIAgentsError> for Error {
    fn from(err: crate::operation::list_ai_agents::ListAIAgentsError) -> Self {
        match err {
            crate::operation::list_ai_agents::ListAIAgentsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_ai_agents::ListAIAgentsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_ai_agents::ListAIAgentsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_ai_agents::ListAIAgentsError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::list_ai_agents::ListAIAgentsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_ai_agents::ListAIAgentsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_ai_agent_versions::ListAIAgentVersionsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_ai_agent_versions::ListAIAgentVersionsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_ai_agent_versions::ListAIAgentVersionsError> for Error {
    fn from(err: crate::operation::list_ai_agent_versions::ListAIAgentVersionsError) -> Self {
        match err {
            crate::operation::list_ai_agent_versions::ListAIAgentVersionsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_ai_agent_versions::ListAIAgentVersionsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_ai_agent_versions::ListAIAgentVersionsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_ai_agent_versions::ListAIAgentVersionsError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::list_ai_agent_versions::ListAIAgentVersionsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_ai_agent_versions::ListAIAgentVersionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_ai_guardrails::ListAIGuardrailsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_ai_guardrails::ListAIGuardrailsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_ai_guardrails::ListAIGuardrailsError> for Error {
    fn from(err: crate::operation::list_ai_guardrails::ListAIGuardrailsError) -> Self {
        match err {
            crate::operation::list_ai_guardrails::ListAIGuardrailsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_ai_guardrails::ListAIGuardrailsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_ai_guardrails::ListAIGuardrailsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_ai_guardrails::ListAIGuardrailsError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::list_ai_guardrails::ListAIGuardrailsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_ai_guardrails::ListAIGuardrailsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_ai_guardrail_versions::ListAIGuardrailVersionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_ai_guardrail_versions::ListAIGuardrailVersionsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_ai_guardrail_versions::ListAIGuardrailVersionsError> for Error {
    fn from(err: crate::operation::list_ai_guardrail_versions::ListAIGuardrailVersionsError) -> Self {
        match err {
            crate::operation::list_ai_guardrail_versions::ListAIGuardrailVersionsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_ai_guardrail_versions::ListAIGuardrailVersionsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_ai_guardrail_versions::ListAIGuardrailVersionsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_ai_guardrail_versions::ListAIGuardrailVersionsError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::list_ai_guardrail_versions::ListAIGuardrailVersionsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_ai_guardrail_versions::ListAIGuardrailVersionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_ai_prompts::ListAIPromptsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_ai_prompts::ListAIPromptsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_ai_prompts::ListAIPromptsError> for Error {
    fn from(err: crate::operation::list_ai_prompts::ListAIPromptsError) -> Self {
        match err {
            crate::operation::list_ai_prompts::ListAIPromptsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_ai_prompts::ListAIPromptsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_ai_prompts::ListAIPromptsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_ai_prompts::ListAIPromptsError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::list_ai_prompts::ListAIPromptsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_ai_prompts::ListAIPromptsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_ai_prompt_versions::ListAIPromptVersionsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_ai_prompt_versions::ListAIPromptVersionsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_ai_prompt_versions::ListAIPromptVersionsError> for Error {
    fn from(err: crate::operation::list_ai_prompt_versions::ListAIPromptVersionsError) -> Self {
        match err {
            crate::operation::list_ai_prompt_versions::ListAIPromptVersionsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_ai_prompt_versions::ListAIPromptVersionsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_ai_prompt_versions::ListAIPromptVersionsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_ai_prompt_versions::ListAIPromptVersionsError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::list_ai_prompt_versions::ListAIPromptVersionsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_ai_prompt_versions::ListAIPromptVersionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_assistant_associations::ListAssistantAssociationsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_assistant_associations::ListAssistantAssociationsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_assistant_associations::ListAssistantAssociationsError> for Error {
    fn from(err: crate::operation::list_assistant_associations::ListAssistantAssociationsError) -> Self {
        match err {
            crate::operation::list_assistant_associations::ListAssistantAssociationsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_assistant_associations::ListAssistantAssociationsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_assistant_associations::ListAssistantAssociationsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_assistant_associations::ListAssistantAssociationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_assistants::ListAssistantsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_assistants::ListAssistantsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_assistants::ListAssistantsError> for Error {
    fn from(err: crate::operation::list_assistants::ListAssistantsError) -> Self {
        match err {
            crate::operation::list_assistants::ListAssistantsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_assistants::ListAssistantsError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::list_assistants::ListAssistantsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_assistants::ListAssistantsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_content_associations::ListContentAssociationsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_content_associations::ListContentAssociationsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_content_associations::ListContentAssociationsError> for Error {
    fn from(err: crate::operation::list_content_associations::ListContentAssociationsError) -> Self {
        match err {
            crate::operation::list_content_associations::ListContentAssociationsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_content_associations::ListContentAssociationsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_content_associations::ListContentAssociationsError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::list_content_associations::ListContentAssociationsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_content_associations::ListContentAssociationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_contents::ListContentsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_contents::ListContentsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_contents::ListContentsError> for Error {
    fn from(err: crate::operation::list_contents::ListContentsError) -> Self {
        match err {
            crate::operation::list_contents::ListContentsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_contents::ListContentsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_contents::ListContentsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_contents::ListContentsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_import_jobs::ListImportJobsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_import_jobs::ListImportJobsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_import_jobs::ListImportJobsError> for Error {
    fn from(err: crate::operation::list_import_jobs::ListImportJobsError) -> Self {
        match err {
            crate::operation::list_import_jobs::ListImportJobsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_import_jobs::ListImportJobsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_import_jobs::ListImportJobsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_knowledge_bases::ListKnowledgeBasesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_knowledge_bases::ListKnowledgeBasesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_knowledge_bases::ListKnowledgeBasesError> for Error {
    fn from(err: crate::operation::list_knowledge_bases::ListKnowledgeBasesError) -> Self {
        match err {
            crate::operation::list_knowledge_bases::ListKnowledgeBasesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_knowledge_bases::ListKnowledgeBasesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_knowledge_bases::ListKnowledgeBasesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_messages::ListMessagesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_messages::ListMessagesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_messages::ListMessagesError> for Error {
    fn from(err: crate::operation::list_messages::ListMessagesError) -> Self {
        match err {
            crate::operation::list_messages::ListMessagesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_messages::ListMessagesError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_messages::ListMessagesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_messages::ListMessagesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_message_templates::ListMessageTemplatesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_message_templates::ListMessageTemplatesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_message_templates::ListMessageTemplatesError> for Error {
    fn from(err: crate::operation::list_message_templates::ListMessageTemplatesError) -> Self {
        match err {
            crate::operation::list_message_templates::ListMessageTemplatesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_message_templates::ListMessageTemplatesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_message_templates::ListMessageTemplatesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_message_templates::ListMessageTemplatesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_message_templates::ListMessageTemplatesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_message_template_versions::ListMessageTemplateVersionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_message_template_versions::ListMessageTemplateVersionsError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_message_template_versions::ListMessageTemplateVersionsError> for Error {
    fn from(err: crate::operation::list_message_template_versions::ListMessageTemplateVersionsError) -> Self {
        match err {
            crate::operation::list_message_template_versions::ListMessageTemplateVersionsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_message_template_versions::ListMessageTemplateVersionsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_message_template_versions::ListMessageTemplateVersionsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_message_template_versions::ListMessageTemplateVersionsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_message_template_versions::ListMessageTemplateVersionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_quick_responses::ListQuickResponsesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_quick_responses::ListQuickResponsesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_quick_responses::ListQuickResponsesError> for Error {
    fn from(err: crate::operation::list_quick_responses::ListQuickResponsesError) -> Self {
        match err {
            crate::operation::list_quick_responses::ListQuickResponsesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_quick_responses::ListQuickResponsesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_quick_responses::ListQuickResponsesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_quick_responses::ListQuickResponsesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_tags_for_resource::ListTagsForResourceError> for Error {
    fn from(err: crate::operation::list_tags_for_resource::ListTagsForResourceError) -> Self {
        match err {
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::notify_recommendations_received::NotifyRecommendationsReceivedError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::notify_recommendations_received::NotifyRecommendationsReceivedError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::notify_recommendations_received::NotifyRecommendationsReceivedError> for Error {
    fn from(err: crate::operation::notify_recommendations_received::NotifyRecommendationsReceivedError) -> Self {
        match err {
            crate::operation::notify_recommendations_received::NotifyRecommendationsReceivedError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::notify_recommendations_received::NotifyRecommendationsReceivedError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::notify_recommendations_received::NotifyRecommendationsReceivedError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::notify_recommendations_received::NotifyRecommendationsReceivedError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_feedback::PutFeedbackError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_feedback::PutFeedbackError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::put_feedback::PutFeedbackError> for Error {
    fn from(err: crate::operation::put_feedback::PutFeedbackError) -> Self {
        match err {
            crate::operation::put_feedback::PutFeedbackError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::put_feedback::PutFeedbackError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::put_feedback::PutFeedbackError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::put_feedback::PutFeedbackError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::query_assistant::QueryAssistantError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::query_assistant::QueryAssistantError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::query_assistant::QueryAssistantError> for Error {
    fn from(err: crate::operation::query_assistant::QueryAssistantError) -> Self {
        match err {
            crate::operation::query_assistant::QueryAssistantError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::query_assistant::QueryAssistantError::RequestTimeoutException(inner) => Error::RequestTimeoutException(inner),
            crate::operation::query_assistant::QueryAssistantError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::query_assistant::QueryAssistantError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::query_assistant::QueryAssistantError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::remove_assistant_ai_agent::RemoveAssistantAIAgentError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::remove_assistant_ai_agent::RemoveAssistantAIAgentError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::remove_assistant_ai_agent::RemoveAssistantAIAgentError> for Error {
    fn from(err: crate::operation::remove_assistant_ai_agent::RemoveAssistantAIAgentError) -> Self {
        match err {
            crate::operation::remove_assistant_ai_agent::RemoveAssistantAIAgentError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::remove_assistant_ai_agent::RemoveAssistantAIAgentError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::remove_assistant_ai_agent::RemoveAssistantAIAgentError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::remove_assistant_ai_agent::RemoveAssistantAIAgentError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::remove_assistant_ai_agent::RemoveAssistantAIAgentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::remove_knowledge_base_template_uri::RemoveKnowledgeBaseTemplateUriError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::remove_knowledge_base_template_uri::RemoveKnowledgeBaseTemplateUriError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::remove_knowledge_base_template_uri::RemoveKnowledgeBaseTemplateUriError> for Error {
    fn from(err: crate::operation::remove_knowledge_base_template_uri::RemoveKnowledgeBaseTemplateUriError) -> Self {
        match err {
            crate::operation::remove_knowledge_base_template_uri::RemoveKnowledgeBaseTemplateUriError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::remove_knowledge_base_template_uri::RemoveKnowledgeBaseTemplateUriError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::remove_knowledge_base_template_uri::RemoveKnowledgeBaseTemplateUriError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::remove_knowledge_base_template_uri::RemoveKnowledgeBaseTemplateUriError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::render_message_template::RenderMessageTemplateError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::render_message_template::RenderMessageTemplateError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::render_message_template::RenderMessageTemplateError> for Error {
    fn from(err: crate::operation::render_message_template::RenderMessageTemplateError) -> Self {
        match err {
            crate::operation::render_message_template::RenderMessageTemplateError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::render_message_template::RenderMessageTemplateError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::render_message_template::RenderMessageTemplateError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::render_message_template::RenderMessageTemplateError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::render_message_template::RenderMessageTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::search_content::SearchContentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::search_content::SearchContentError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::search_content::SearchContentError> for Error {
    fn from(err: crate::operation::search_content::SearchContentError) -> Self {
        match err {
            crate::operation::search_content::SearchContentError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::search_content::SearchContentError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::search_content::SearchContentError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::search_content::SearchContentError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::search_content::SearchContentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::search_message_templates::SearchMessageTemplatesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::search_message_templates::SearchMessageTemplatesError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::search_message_templates::SearchMessageTemplatesError> for Error {
    fn from(err: crate::operation::search_message_templates::SearchMessageTemplatesError) -> Self {
        match err {
            crate::operation::search_message_templates::SearchMessageTemplatesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::search_message_templates::SearchMessageTemplatesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::search_message_templates::SearchMessageTemplatesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::search_message_templates::SearchMessageTemplatesError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::search_message_templates::SearchMessageTemplatesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::search_message_templates::SearchMessageTemplatesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::search_quick_responses::SearchQuickResponsesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::search_quick_responses::SearchQuickResponsesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::search_quick_responses::SearchQuickResponsesError> for Error {
    fn from(err: crate::operation::search_quick_responses::SearchQuickResponsesError) -> Self {
        match err {
            crate::operation::search_quick_responses::SearchQuickResponsesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::search_quick_responses::SearchQuickResponsesError::RequestTimeoutException(inner) => {
                Error::RequestTimeoutException(inner)
            }
            crate::operation::search_quick_responses::SearchQuickResponsesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::search_quick_responses::SearchQuickResponsesError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::search_quick_responses::SearchQuickResponsesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::search_quick_responses::SearchQuickResponsesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::search_sessions::SearchSessionsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::search_sessions::SearchSessionsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::search_sessions::SearchSessionsError> for Error {
    fn from(err: crate::operation::search_sessions::SearchSessionsError) -> Self {
        match err {
            crate::operation::search_sessions::SearchSessionsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::search_sessions::SearchSessionsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::search_sessions::SearchSessionsError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::search_sessions::SearchSessionsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::search_sessions::SearchSessionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::send_message::SendMessageError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::send_message::SendMessageError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::send_message::SendMessageError> for Error {
    fn from(err: crate::operation::send_message::SendMessageError) -> Self {
        match err {
            crate::operation::send_message::SendMessageError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::send_message::SendMessageError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::send_message::SendMessageError::RequestTimeoutException(inner) => Error::RequestTimeoutException(inner),
            crate::operation::send_message::SendMessageError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::send_message::SendMessageError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::send_message::SendMessageError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::send_message::SendMessageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_content_upload::StartContentUploadError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_content_upload::StartContentUploadError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::start_content_upload::StartContentUploadError> for Error {
    fn from(err: crate::operation::start_content_upload::StartContentUploadError) -> Self {
        match err {
            crate::operation::start_content_upload::StartContentUploadError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::start_content_upload::StartContentUploadError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::start_content_upload::StartContentUploadError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::start_content_upload::StartContentUploadError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::start_content_upload::StartContentUploadError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_import_job::StartImportJobError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_import_job::StartImportJobError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::start_import_job::StartImportJobError> for Error {
    fn from(err: crate::operation::start_import_job::StartImportJobError) -> Self {
        match err {
            crate::operation::start_import_job::StartImportJobError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::start_import_job::StartImportJobError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::start_import_job::StartImportJobError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::start_import_job::StartImportJobError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::start_import_job::StartImportJobError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::start_import_job::StartImportJobError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::start_import_job::StartImportJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::tag_resource::TagResourceError> for Error {
    fn from(err: crate::operation::tag_resource::TagResourceError) -> Self {
        match err {
            crate::operation::tag_resource::TagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::tag_resource::TagResourceError::TooManyTagsException(inner) => Error::TooManyTagsException(inner),
            crate::operation::tag_resource::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::untag_resource::UntagResourceError> for Error {
    fn from(err: crate::operation::untag_resource::UntagResourceError) -> Self {
        match err {
            crate::operation::untag_resource::UntagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::untag_resource::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_ai_agent::UpdateAIAgentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_ai_agent::UpdateAIAgentError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_ai_agent::UpdateAIAgentError> for Error {
    fn from(err: crate::operation::update_ai_agent::UpdateAIAgentError) -> Self {
        match err {
            crate::operation::update_ai_agent::UpdateAIAgentError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_ai_agent::UpdateAIAgentError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_ai_agent::UpdateAIAgentError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_ai_agent::UpdateAIAgentError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_ai_agent::UpdateAIAgentError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::update_ai_agent::UpdateAIAgentError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_ai_agent::UpdateAIAgentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_ai_guardrail::UpdateAIGuardrailError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_ai_guardrail::UpdateAIGuardrailError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_ai_guardrail::UpdateAIGuardrailError> for Error {
    fn from(err: crate::operation::update_ai_guardrail::UpdateAIGuardrailError) -> Self {
        match err {
            crate::operation::update_ai_guardrail::UpdateAIGuardrailError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_ai_guardrail::UpdateAIGuardrailError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_ai_guardrail::UpdateAIGuardrailError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_ai_guardrail::UpdateAIGuardrailError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_ai_guardrail::UpdateAIGuardrailError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::update_ai_guardrail::UpdateAIGuardrailError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_ai_guardrail::UpdateAIGuardrailError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_ai_prompt::UpdateAIPromptError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_ai_prompt::UpdateAIPromptError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_ai_prompt::UpdateAIPromptError> for Error {
    fn from(err: crate::operation::update_ai_prompt::UpdateAIPromptError) -> Self {
        match err {
            crate::operation::update_ai_prompt::UpdateAIPromptError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_ai_prompt::UpdateAIPromptError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_ai_prompt::UpdateAIPromptError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_ai_prompt::UpdateAIPromptError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_ai_prompt::UpdateAIPromptError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::update_ai_prompt::UpdateAIPromptError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_ai_prompt::UpdateAIPromptError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_assistant_ai_agent::UpdateAssistantAIAgentError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_assistant_ai_agent::UpdateAssistantAIAgentError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_assistant_ai_agent::UpdateAssistantAIAgentError> for Error {
    fn from(err: crate::operation::update_assistant_ai_agent::UpdateAssistantAIAgentError) -> Self {
        match err {
            crate::operation::update_assistant_ai_agent::UpdateAssistantAIAgentError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_assistant_ai_agent::UpdateAssistantAIAgentError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_assistant_ai_agent::UpdateAssistantAIAgentError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_assistant_ai_agent::UpdateAssistantAIAgentError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_assistant_ai_agent::UpdateAssistantAIAgentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_content::UpdateContentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_content::UpdateContentError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_content::UpdateContentError> for Error {
    fn from(err: crate::operation::update_content::UpdateContentError) -> Self {
        match err {
            crate::operation::update_content::UpdateContentError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_content::UpdateContentError::PreconditionFailedException(inner) => Error::PreconditionFailedException(inner),
            crate::operation::update_content::UpdateContentError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_content::UpdateContentError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::update_content::UpdateContentError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_content::UpdateContentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_knowledge_base_template_uri::UpdateKnowledgeBaseTemplateUriError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_knowledge_base_template_uri::UpdateKnowledgeBaseTemplateUriError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_knowledge_base_template_uri::UpdateKnowledgeBaseTemplateUriError> for Error {
    fn from(err: crate::operation::update_knowledge_base_template_uri::UpdateKnowledgeBaseTemplateUriError) -> Self {
        match err {
            crate::operation::update_knowledge_base_template_uri::UpdateKnowledgeBaseTemplateUriError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_knowledge_base_template_uri::UpdateKnowledgeBaseTemplateUriError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_knowledge_base_template_uri::UpdateKnowledgeBaseTemplateUriError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::update_knowledge_base_template_uri::UpdateKnowledgeBaseTemplateUriError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_message_template::UpdateMessageTemplateError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_message_template::UpdateMessageTemplateError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_message_template::UpdateMessageTemplateError> for Error {
    fn from(err: crate::operation::update_message_template::UpdateMessageTemplateError) -> Self {
        match err {
            crate::operation::update_message_template::UpdateMessageTemplateError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_message_template::UpdateMessageTemplateError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_message_template::UpdateMessageTemplateError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_message_template::UpdateMessageTemplateError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_message_template::UpdateMessageTemplateError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_message_template::UpdateMessageTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_message_template_metadata::UpdateMessageTemplateMetadataError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_message_template_metadata::UpdateMessageTemplateMetadataError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_message_template_metadata::UpdateMessageTemplateMetadataError> for Error {
    fn from(err: crate::operation::update_message_template_metadata::UpdateMessageTemplateMetadataError) -> Self {
        match err {
            crate::operation::update_message_template_metadata::UpdateMessageTemplateMetadataError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_message_template_metadata::UpdateMessageTemplateMetadataError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::update_message_template_metadata::UpdateMessageTemplateMetadataError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_message_template_metadata::UpdateMessageTemplateMetadataError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::update_message_template_metadata::UpdateMessageTemplateMetadataError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::update_message_template_metadata::UpdateMessageTemplateMetadataError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_quick_response::UpdateQuickResponseError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_quick_response::UpdateQuickResponseError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_quick_response::UpdateQuickResponseError> for Error {
    fn from(err: crate::operation::update_quick_response::UpdateQuickResponseError) -> Self {
        match err {
            crate::operation::update_quick_response::UpdateQuickResponseError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_quick_response::UpdateQuickResponseError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_quick_response::UpdateQuickResponseError::PreconditionFailedException(inner) => {
                Error::PreconditionFailedException(inner)
            }
            crate::operation::update_quick_response::UpdateQuickResponseError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_quick_response::UpdateQuickResponseError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::update_quick_response::UpdateQuickResponseError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_quick_response::UpdateQuickResponseError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_session::UpdateSessionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_session::UpdateSessionError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_session::UpdateSessionError> for Error {
    fn from(err: crate::operation::update_session::UpdateSessionError) -> Self {
        match err {
            crate::operation::update_session::UpdateSessionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_session::UpdateSessionError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_session::UpdateSessionError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::update_session::UpdateSessionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_session::UpdateSessionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_session_data::UpdateSessionDataError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_session_data::UpdateSessionDataError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_session_data::UpdateSessionDataError> for Error {
    fn from(err: crate::operation::update_session_data::UpdateSessionDataError) -> Self {
        match err {
            crate::operation::update_session_data::UpdateSessionDataError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_session_data::UpdateSessionDataError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_session_data::UpdateSessionDataError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::update_session_data::UpdateSessionDataError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_session_data::UpdateSessionDataError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl ::std::error::Error for Error {
    fn source(&self) -> std::option::Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            Error::AccessDeniedException(inner) => inner.source(),
            Error::ConflictException(inner) => inner.source(),
            Error::DependencyFailedException(inner) => inner.source(),
            Error::PreconditionFailedException(inner) => inner.source(),
            Error::RequestTimeoutException(inner) => inner.source(),
            Error::ResourceNotFoundException(inner) => inner.source(),
            Error::ServiceQuotaExceededException(inner) => inner.source(),
            Error::ThrottlingException(inner) => inner.source(),
            Error::TooManyTagsException(inner) => inner.source(),
            Error::UnauthorizedException(inner) => inner.source(),
            Error::ValidationException(inner) => inner.source(),
            Error::Unhandled(inner) => ::std::option::Option::Some(&*inner.source),
        }
    }
}
impl ::aws_types::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::DependencyFailedException(e) => e.request_id(),
            Self::PreconditionFailedException(e) => e.request_id(),
            Self::RequestTimeoutException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ServiceQuotaExceededException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::TooManyTagsException(e) => e.request_id(),
            Self::UnauthorizedException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.meta.request_id(),
        }
    }
}
