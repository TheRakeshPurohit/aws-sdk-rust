// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details of streaming chunk data for email generative answers including completion text and references.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct EmailGenerativeAnswerChunkDataDetails {
    /// <p>The partial or complete text content of the generative answer response.</p>
    pub completion: ::std::option::Option<::std::string::String>,
    /// <p>Source references and citations from knowledge base articles used to generate the answer.</p>
    pub references: ::std::option::Option<::std::vec::Vec<crate::types::DataSummary>>,
    /// <p>Token for retrieving the next chunk of streaming response data, if available.</p>
    pub next_chunk_token: ::std::option::Option<::std::string::String>,
}
impl EmailGenerativeAnswerChunkDataDetails {
    /// <p>The partial or complete text content of the generative answer response.</p>
    pub fn completion(&self) -> ::std::option::Option<&str> {
        self.completion.as_deref()
    }
    /// <p>Source references and citations from knowledge base articles used to generate the answer.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.references.is_none()`.
    pub fn references(&self) -> &[crate::types::DataSummary] {
        self.references.as_deref().unwrap_or_default()
    }
    /// <p>Token for retrieving the next chunk of streaming response data, if available.</p>
    pub fn next_chunk_token(&self) -> ::std::option::Option<&str> {
        self.next_chunk_token.as_deref()
    }
}
impl ::std::fmt::Debug for EmailGenerativeAnswerChunkDataDetails {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("EmailGenerativeAnswerChunkDataDetails");
        formatter.field("completion", &"*** Sensitive Data Redacted ***");
        formatter.field("references", &self.references);
        formatter.field("next_chunk_token", &self.next_chunk_token);
        formatter.finish()
    }
}
impl EmailGenerativeAnswerChunkDataDetails {
    /// Creates a new builder-style object to manufacture [`EmailGenerativeAnswerChunkDataDetails`](crate::types::EmailGenerativeAnswerChunkDataDetails).
    pub fn builder() -> crate::types::builders::EmailGenerativeAnswerChunkDataDetailsBuilder {
        crate::types::builders::EmailGenerativeAnswerChunkDataDetailsBuilder::default()
    }
}

/// A builder for [`EmailGenerativeAnswerChunkDataDetails`](crate::types::EmailGenerativeAnswerChunkDataDetails).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct EmailGenerativeAnswerChunkDataDetailsBuilder {
    pub(crate) completion: ::std::option::Option<::std::string::String>,
    pub(crate) references: ::std::option::Option<::std::vec::Vec<crate::types::DataSummary>>,
    pub(crate) next_chunk_token: ::std::option::Option<::std::string::String>,
}
impl EmailGenerativeAnswerChunkDataDetailsBuilder {
    /// <p>The partial or complete text content of the generative answer response.</p>
    pub fn completion(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.completion = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The partial or complete text content of the generative answer response.</p>
    pub fn set_completion(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.completion = input;
        self
    }
    /// <p>The partial or complete text content of the generative answer response.</p>
    pub fn get_completion(&self) -> &::std::option::Option<::std::string::String> {
        &self.completion
    }
    /// Appends an item to `references`.
    ///
    /// To override the contents of this collection use [`set_references`](Self::set_references).
    ///
    /// <p>Source references and citations from knowledge base articles used to generate the answer.</p>
    pub fn references(mut self, input: crate::types::DataSummary) -> Self {
        let mut v = self.references.unwrap_or_default();
        v.push(input);
        self.references = ::std::option::Option::Some(v);
        self
    }
    /// <p>Source references and citations from knowledge base articles used to generate the answer.</p>
    pub fn set_references(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DataSummary>>) -> Self {
        self.references = input;
        self
    }
    /// <p>Source references and citations from knowledge base articles used to generate the answer.</p>
    pub fn get_references(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DataSummary>> {
        &self.references
    }
    /// <p>Token for retrieving the next chunk of streaming response data, if available.</p>
    pub fn next_chunk_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_chunk_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Token for retrieving the next chunk of streaming response data, if available.</p>
    pub fn set_next_chunk_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_chunk_token = input;
        self
    }
    /// <p>Token for retrieving the next chunk of streaming response data, if available.</p>
    pub fn get_next_chunk_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_chunk_token
    }
    /// Consumes the builder and constructs a [`EmailGenerativeAnswerChunkDataDetails`](crate::types::EmailGenerativeAnswerChunkDataDetails).
    pub fn build(self) -> crate::types::EmailGenerativeAnswerChunkDataDetails {
        crate::types::EmailGenerativeAnswerChunkDataDetails {
            completion: self.completion,
            references: self.references,
            next_chunk_token: self.next_chunk_token,
        }
    }
}
impl ::std::fmt::Debug for EmailGenerativeAnswerChunkDataDetailsBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("EmailGenerativeAnswerChunkDataDetailsBuilder");
        formatter.field("completion", &"*** Sensitive Data Redacted ***");
        formatter.field("references", &self.references);
        formatter.field("next_chunk_token", &self.next_chunk_token);
        formatter.finish()
    }
}
