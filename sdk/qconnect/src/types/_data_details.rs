// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about the data.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum DataDetails {
    /// <p>Details about the content data.</p>
    ContentData(crate::types::ContentDataDetails),
    /// <p>Streaming chunk data for email generative answers containing partial knowledge-based response content.</p>
    EmailGenerativeAnswerChunkData(crate::types::EmailGenerativeAnswerChunkDataDetails),
    /// <p>Streaming chunk data for email overview containing partial overview content.</p>
    EmailOverviewChunkData(crate::types::EmailOverviewChunkDataDetails),
    /// <p>Streaming chunk data for email response generation containing partial response content.</p>
    EmailResponseChunkData(crate::types::EmailResponseChunkDataDetails),
    /// <p>Details about the generative chunk data.</p>
    GenerativeChunkData(crate::types::GenerativeChunkDataDetails),
    /// <p>Details about the generative data.</p>
    GenerativeData(crate::types::GenerativeDataDetails),
    /// <p>Details about the intent data.</p>
    IntentDetectedData(crate::types::IntentDetectedDataDetails),
    /// <p>Details about the content data.</p>
    SourceContentData(crate::types::SourceContentDataDetails),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl DataDetails {
    /// Tries to convert the enum instance into [`ContentData`](crate::types::DataDetails::ContentData), extracting the inner [`ContentDataDetails`](crate::types::ContentDataDetails).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_content_data(&self) -> ::std::result::Result<&crate::types::ContentDataDetails, &Self> {
        if let DataDetails::ContentData(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`ContentData`](crate::types::DataDetails::ContentData).
    pub fn is_content_data(&self) -> bool {
        self.as_content_data().is_ok()
    }
    /// Tries to convert the enum instance into [`EmailGenerativeAnswerChunkData`](crate::types::DataDetails::EmailGenerativeAnswerChunkData), extracting the inner [`EmailGenerativeAnswerChunkDataDetails`](crate::types::EmailGenerativeAnswerChunkDataDetails).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_email_generative_answer_chunk_data(&self) -> ::std::result::Result<&crate::types::EmailGenerativeAnswerChunkDataDetails, &Self> {
        if let DataDetails::EmailGenerativeAnswerChunkData(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`EmailGenerativeAnswerChunkData`](crate::types::DataDetails::EmailGenerativeAnswerChunkData).
    pub fn is_email_generative_answer_chunk_data(&self) -> bool {
        self.as_email_generative_answer_chunk_data().is_ok()
    }
    /// Tries to convert the enum instance into [`EmailOverviewChunkData`](crate::types::DataDetails::EmailOverviewChunkData), extracting the inner [`EmailOverviewChunkDataDetails`](crate::types::EmailOverviewChunkDataDetails).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_email_overview_chunk_data(&self) -> ::std::result::Result<&crate::types::EmailOverviewChunkDataDetails, &Self> {
        if let DataDetails::EmailOverviewChunkData(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`EmailOverviewChunkData`](crate::types::DataDetails::EmailOverviewChunkData).
    pub fn is_email_overview_chunk_data(&self) -> bool {
        self.as_email_overview_chunk_data().is_ok()
    }
    /// Tries to convert the enum instance into [`EmailResponseChunkData`](crate::types::DataDetails::EmailResponseChunkData), extracting the inner [`EmailResponseChunkDataDetails`](crate::types::EmailResponseChunkDataDetails).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_email_response_chunk_data(&self) -> ::std::result::Result<&crate::types::EmailResponseChunkDataDetails, &Self> {
        if let DataDetails::EmailResponseChunkData(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`EmailResponseChunkData`](crate::types::DataDetails::EmailResponseChunkData).
    pub fn is_email_response_chunk_data(&self) -> bool {
        self.as_email_response_chunk_data().is_ok()
    }
    /// Tries to convert the enum instance into [`GenerativeChunkData`](crate::types::DataDetails::GenerativeChunkData), extracting the inner [`GenerativeChunkDataDetails`](crate::types::GenerativeChunkDataDetails).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_generative_chunk_data(&self) -> ::std::result::Result<&crate::types::GenerativeChunkDataDetails, &Self> {
        if let DataDetails::GenerativeChunkData(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`GenerativeChunkData`](crate::types::DataDetails::GenerativeChunkData).
    pub fn is_generative_chunk_data(&self) -> bool {
        self.as_generative_chunk_data().is_ok()
    }
    /// Tries to convert the enum instance into [`GenerativeData`](crate::types::DataDetails::GenerativeData), extracting the inner [`GenerativeDataDetails`](crate::types::GenerativeDataDetails).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_generative_data(&self) -> ::std::result::Result<&crate::types::GenerativeDataDetails, &Self> {
        if let DataDetails::GenerativeData(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`GenerativeData`](crate::types::DataDetails::GenerativeData).
    pub fn is_generative_data(&self) -> bool {
        self.as_generative_data().is_ok()
    }
    /// Tries to convert the enum instance into [`IntentDetectedData`](crate::types::DataDetails::IntentDetectedData), extracting the inner [`IntentDetectedDataDetails`](crate::types::IntentDetectedDataDetails).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_intent_detected_data(&self) -> ::std::result::Result<&crate::types::IntentDetectedDataDetails, &Self> {
        if let DataDetails::IntentDetectedData(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`IntentDetectedData`](crate::types::DataDetails::IntentDetectedData).
    pub fn is_intent_detected_data(&self) -> bool {
        self.as_intent_detected_data().is_ok()
    }
    /// Tries to convert the enum instance into [`SourceContentData`](crate::types::DataDetails::SourceContentData), extracting the inner [`SourceContentDataDetails`](crate::types::SourceContentDataDetails).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_source_content_data(&self) -> ::std::result::Result<&crate::types::SourceContentDataDetails, &Self> {
        if let DataDetails::SourceContentData(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`SourceContentData`](crate::types::DataDetails::SourceContentData).
    pub fn is_source_content_data(&self) -> bool {
        self.as_source_content_data().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
