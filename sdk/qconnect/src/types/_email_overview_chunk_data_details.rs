// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details of streaming chunk data for email overview including completion text and pagination tokens.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct EmailOverviewChunkDataDetails {
    /// <p>The partial or complete overview text content in structured HTML format with customer issues, resolutions, and next steps.</p>
    pub completion: ::std::option::Option<::std::string::String>,
    /// <p>Token for retrieving the next chunk of streaming overview data, if available.</p>
    pub next_chunk_token: ::std::option::Option<::std::string::String>,
}
impl EmailOverviewChunkDataDetails {
    /// <p>The partial or complete overview text content in structured HTML format with customer issues, resolutions, and next steps.</p>
    pub fn completion(&self) -> ::std::option::Option<&str> {
        self.completion.as_deref()
    }
    /// <p>Token for retrieving the next chunk of streaming overview data, if available.</p>
    pub fn next_chunk_token(&self) -> ::std::option::Option<&str> {
        self.next_chunk_token.as_deref()
    }
}
impl ::std::fmt::Debug for EmailOverviewChunkDataDetails {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("EmailOverviewChunkDataDetails");
        formatter.field("completion", &"*** Sensitive Data Redacted ***");
        formatter.field("next_chunk_token", &self.next_chunk_token);
        formatter.finish()
    }
}
impl EmailOverviewChunkDataDetails {
    /// Creates a new builder-style object to manufacture [`EmailOverviewChunkDataDetails`](crate::types::EmailOverviewChunkDataDetails).
    pub fn builder() -> crate::types::builders::EmailOverviewChunkDataDetailsBuilder {
        crate::types::builders::EmailOverviewChunkDataDetailsBuilder::default()
    }
}

/// A builder for [`EmailOverviewChunkDataDetails`](crate::types::EmailOverviewChunkDataDetails).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct EmailOverviewChunkDataDetailsBuilder {
    pub(crate) completion: ::std::option::Option<::std::string::String>,
    pub(crate) next_chunk_token: ::std::option::Option<::std::string::String>,
}
impl EmailOverviewChunkDataDetailsBuilder {
    /// <p>The partial or complete overview text content in structured HTML format with customer issues, resolutions, and next steps.</p>
    pub fn completion(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.completion = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The partial or complete overview text content in structured HTML format with customer issues, resolutions, and next steps.</p>
    pub fn set_completion(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.completion = input;
        self
    }
    /// <p>The partial or complete overview text content in structured HTML format with customer issues, resolutions, and next steps.</p>
    pub fn get_completion(&self) -> &::std::option::Option<::std::string::String> {
        &self.completion
    }
    /// <p>Token for retrieving the next chunk of streaming overview data, if available.</p>
    pub fn next_chunk_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_chunk_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Token for retrieving the next chunk of streaming overview data, if available.</p>
    pub fn set_next_chunk_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_chunk_token = input;
        self
    }
    /// <p>Token for retrieving the next chunk of streaming overview data, if available.</p>
    pub fn get_next_chunk_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_chunk_token
    }
    /// Consumes the builder and constructs a [`EmailOverviewChunkDataDetails`](crate::types::EmailOverviewChunkDataDetails).
    pub fn build(self) -> crate::types::EmailOverviewChunkDataDetails {
        crate::types::EmailOverviewChunkDataDetails {
            completion: self.completion,
            next_chunk_token: self.next_chunk_token,
        }
    }
}
impl ::std::fmt::Debug for EmailOverviewChunkDataDetailsBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("EmailOverviewChunkDataDetailsBuilder");
        formatter.field("completion", &"*** Sensitive Data Redacted ***");
        formatter.field("next_chunk_token", &self.next_chunk_token);
        formatter.finish()
    }
}
