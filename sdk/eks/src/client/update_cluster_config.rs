// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`UpdateClusterConfig`](crate::operation::update_cluster_config::builders::UpdateClusterConfigFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::operation::update_cluster_config::builders::UpdateClusterConfigFluentBuilder::name) / [`set_name(Option<String>)`](crate::operation::update_cluster_config::builders::UpdateClusterConfigFluentBuilder::set_name):<br>required: **true**<br><p>The name of the Amazon EKS cluster to update.</p><br>
    ///   - [`resources_vpc_config(VpcConfigRequest)`](crate::operation::update_cluster_config::builders::UpdateClusterConfigFluentBuilder::resources_vpc_config) / [`set_resources_vpc_config(Option<VpcConfigRequest>)`](crate::operation::update_cluster_config::builders::UpdateClusterConfigFluentBuilder::set_resources_vpc_config):<br>required: **false**<br><p>An object representing the VPC configuration to use for an Amazon EKS cluster.</p><br>
    ///   - [`logging(Logging)`](crate::operation::update_cluster_config::builders::UpdateClusterConfigFluentBuilder::logging) / [`set_logging(Option<Logging>)`](crate::operation::update_cluster_config::builders::UpdateClusterConfigFluentBuilder::set_logging):<br>required: **false**<br><p>Enable or disable exporting the Kubernetes control plane logs for your cluster to CloudWatch Logs . By default, cluster control plane logs aren't exported to CloudWatch Logs . For more information, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/control-plane-logs.html">Amazon EKS cluster control plane logs</a> in the <i> <i>Amazon EKS User Guide</i> </i>.</p><note>  <p>CloudWatch Logs ingestion, archive storage, and data scanning rates apply to exported control plane logs. For more information, see <a href="http://aws.amazon.com/cloudwatch/pricing/">CloudWatch Pricing</a>.</p> </note><br>
    ///   - [`client_request_token(impl Into<String>)`](crate::operation::update_cluster_config::builders::UpdateClusterConfigFluentBuilder::client_request_token) / [`set_client_request_token(Option<String>)`](crate::operation::update_cluster_config::builders::UpdateClusterConfigFluentBuilder::set_client_request_token):<br>required: **false**<br><p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p><br>
    ///   - [`access_config(UpdateAccessConfigRequest)`](crate::operation::update_cluster_config::builders::UpdateClusterConfigFluentBuilder::access_config) / [`set_access_config(Option<UpdateAccessConfigRequest>)`](crate::operation::update_cluster_config::builders::UpdateClusterConfigFluentBuilder::set_access_config):<br>required: **false**<br><p>The access configuration for the cluster.</p><br>
    ///   - [`upgrade_policy(UpgradePolicyRequest)`](crate::operation::update_cluster_config::builders::UpdateClusterConfigFluentBuilder::upgrade_policy) / [`set_upgrade_policy(Option<UpgradePolicyRequest>)`](crate::operation::update_cluster_config::builders::UpdateClusterConfigFluentBuilder::set_upgrade_policy):<br>required: **false**<br><p>You can enable or disable extended support for clusters currently on standard support. You cannot disable extended support once it starts. You must enable extended support before your cluster exits standard support.</p><br>
    ///   - [`zonal_shift_config(ZonalShiftConfigRequest)`](crate::operation::update_cluster_config::builders::UpdateClusterConfigFluentBuilder::zonal_shift_config) / [`set_zonal_shift_config(Option<ZonalShiftConfigRequest>)`](crate::operation::update_cluster_config::builders::UpdateClusterConfigFluentBuilder::set_zonal_shift_config):<br>required: **false**<br><p>Enable or disable ARC zonal shift for the cluster. If zonal shift is enabled, Amazon Web Services configures zonal autoshift for the cluster.</p> <p>Zonal shift is a feature of Amazon Application Recovery Controller (ARC). ARC zonal shift is designed to be a temporary measure that allows you to move traffic for a resource away from an impaired AZ until the zonal shift expires or you cancel it. You can extend the zonal shift if necessary.</p> <p>You can start a zonal shift for an EKS cluster, or you can allow Amazon Web Services to do it for you by enabling <i>zonal autoshift</i>. This shift updates the flow of east-to-west network traffic in your cluster to only consider network endpoints for Pods running on worker nodes in healthy AZs. Additionally, any ALB or NLB handling ingress traffic for applications in your EKS cluster will automatically route traffic to targets in the healthy AZs. For more information about zonal shift in EKS, see <a href="https://docs.aws.amazon.com/eks/latest/userguide/zone-shift.html">Learn about Amazon Application Recovery Controller (ARC) Zonal Shift in Amazon EKS</a> in the <i> <i>Amazon EKS User Guide</i> </i>.</p><br>
    ///   - [`compute_config(ComputeConfigRequest)`](crate::operation::update_cluster_config::builders::UpdateClusterConfigFluentBuilder::compute_config) / [`set_compute_config(Option<ComputeConfigRequest>)`](crate::operation::update_cluster_config::builders::UpdateClusterConfigFluentBuilder::set_compute_config):<br>required: **false**<br><p>Update the configuration of the compute capability of your EKS Auto Mode cluster. For example, enable the capability.</p><br>
    ///   - [`kubernetes_network_config(KubernetesNetworkConfigRequest)`](crate::operation::update_cluster_config::builders::UpdateClusterConfigFluentBuilder::kubernetes_network_config) / [`set_kubernetes_network_config(Option<KubernetesNetworkConfigRequest>)`](crate::operation::update_cluster_config::builders::UpdateClusterConfigFluentBuilder::set_kubernetes_network_config):<br>required: **false**<br><p>The Kubernetes network configuration for the cluster.</p><br>
    ///   - [`storage_config(StorageConfigRequest)`](crate::operation::update_cluster_config::builders::UpdateClusterConfigFluentBuilder::storage_config) / [`set_storage_config(Option<StorageConfigRequest>)`](crate::operation::update_cluster_config::builders::UpdateClusterConfigFluentBuilder::set_storage_config):<br>required: **false**<br><p>Update the configuration of the block storage capability of your EKS Auto Mode cluster. For example, enable the capability.</p><br>
    ///   - [`remote_network_config(RemoteNetworkConfigRequest)`](crate::operation::update_cluster_config::builders::UpdateClusterConfigFluentBuilder::remote_network_config) / [`set_remote_network_config(Option<RemoteNetworkConfigRequest>)`](crate::operation::update_cluster_config::builders::UpdateClusterConfigFluentBuilder::set_remote_network_config):<br>required: **false**<br><p>The configuration in the cluster for EKS Hybrid Nodes. You can add, change, or remove this configuration after the cluster is created.</p><br>
    ///   - [`deletion_protection(bool)`](crate::operation::update_cluster_config::builders::UpdateClusterConfigFluentBuilder::deletion_protection) / [`set_deletion_protection(Option<bool>)`](crate::operation::update_cluster_config::builders::UpdateClusterConfigFluentBuilder::set_deletion_protection):<br>required: **false**<br><p>Specifies whether to enable or disable deletion protection for the cluster. When enabled (<code>true</code>), the cluster cannot be deleted until deletion protection is explicitly disabled. When disabled (<code>false</code>), the cluster can be deleted normally.</p><br>
    /// - On success, responds with [`UpdateClusterConfigOutput`](crate::operation::update_cluster_config::UpdateClusterConfigOutput) with field(s):
    ///   - [`update(Option<Update>)`](crate::operation::update_cluster_config::UpdateClusterConfigOutput::update): <p>An object representing an asynchronous update.</p>
    /// - On failure, responds with [`SdkError<UpdateClusterConfigError>`](crate::operation::update_cluster_config::UpdateClusterConfigError)
    pub fn update_cluster_config(&self) -> crate::operation::update_cluster_config::builders::UpdateClusterConfigFluentBuilder {
        crate::operation::update_cluster_config::builders::UpdateClusterConfigFluentBuilder::new(self.handle.clone())
    }
}
