// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_cluster_config_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_cluster_config::UpdateClusterConfigInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.access_config {
        #[allow(unused_mut)]
        let mut object_2 = object.key("accessConfig").start_object();
        crate::protocol_serde::shape_update_access_config_request::ser_update_access_config_request(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.client_request_token {
        object.key("clientRequestToken").string(var_3.as_str());
    }
    if let Some(var_4) = &input.compute_config {
        #[allow(unused_mut)]
        let mut object_5 = object.key("computeConfig").start_object();
        crate::protocol_serde::shape_compute_config_request::ser_compute_config_request(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.deletion_protection {
        object.key("deletionProtection").boolean(*var_6);
    }
    if let Some(var_7) = &input.kubernetes_network_config {
        #[allow(unused_mut)]
        let mut object_8 = object.key("kubernetesNetworkConfig").start_object();
        crate::protocol_serde::shape_kubernetes_network_config_request::ser_kubernetes_network_config_request(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.logging {
        #[allow(unused_mut)]
        let mut object_10 = object.key("logging").start_object();
        crate::protocol_serde::shape_logging::ser_logging(&mut object_10, var_9)?;
        object_10.finish();
    }
    if let Some(var_11) = &input.remote_network_config {
        #[allow(unused_mut)]
        let mut object_12 = object.key("remoteNetworkConfig").start_object();
        crate::protocol_serde::shape_remote_network_config_request::ser_remote_network_config_request(&mut object_12, var_11)?;
        object_12.finish();
    }
    if let Some(var_13) = &input.resources_vpc_config {
        #[allow(unused_mut)]
        let mut object_14 = object.key("resourcesVpcConfig").start_object();
        crate::protocol_serde::shape_vpc_config_request::ser_vpc_config_request(&mut object_14, var_13)?;
        object_14.finish();
    }
    if let Some(var_15) = &input.storage_config {
        #[allow(unused_mut)]
        let mut object_16 = object.key("storageConfig").start_object();
        crate::protocol_serde::shape_storage_config_request::ser_storage_config_request(&mut object_16, var_15)?;
        object_16.finish();
    }
    if let Some(var_17) = &input.upgrade_policy {
        #[allow(unused_mut)]
        let mut object_18 = object.key("upgradePolicy").start_object();
        crate::protocol_serde::shape_upgrade_policy_request::ser_upgrade_policy_request(&mut object_18, var_17)?;
        object_18.finish();
    }
    if let Some(var_19) = &input.zonal_shift_config {
        #[allow(unused_mut)]
        let mut object_20 = object.key("zonalShiftConfig").start_object();
        crate::protocol_serde::shape_zonal_shift_config_request::ser_zonal_shift_config_request(&mut object_20, var_19)?;
        object_20.finish();
    }
    Ok(())
}
