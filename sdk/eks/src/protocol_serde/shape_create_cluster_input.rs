// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_cluster_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_cluster::CreateClusterInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.access_config {
        #[allow(unused_mut)]
        let mut object_2 = object.key("accessConfig").start_object();
        crate::protocol_serde::shape_create_access_config_request::ser_create_access_config_request(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.bootstrap_self_managed_addons {
        object.key("bootstrapSelfManagedAddons").boolean(*var_3);
    }
    if let Some(var_4) = &input.client_request_token {
        object.key("clientRequestToken").string(var_4.as_str());
    }
    if let Some(var_5) = &input.compute_config {
        #[allow(unused_mut)]
        let mut object_6 = object.key("computeConfig").start_object();
        crate::protocol_serde::shape_compute_config_request::ser_compute_config_request(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.deletion_protection {
        object.key("deletionProtection").boolean(*var_7);
    }
    if let Some(var_8) = &input.encryption_config {
        let mut array_9 = object.key("encryptionConfig").start_array();
        for item_10 in var_8 {
            {
                #[allow(unused_mut)]
                let mut object_11 = array_9.value().start_object();
                crate::protocol_serde::shape_encryption_config::ser_encryption_config(&mut object_11, item_10)?;
                object_11.finish();
            }
        }
        array_9.finish();
    }
    if let Some(var_12) = &input.kubernetes_network_config {
        #[allow(unused_mut)]
        let mut object_13 = object.key("kubernetesNetworkConfig").start_object();
        crate::protocol_serde::shape_kubernetes_network_config_request::ser_kubernetes_network_config_request(&mut object_13, var_12)?;
        object_13.finish();
    }
    if let Some(var_14) = &input.logging {
        #[allow(unused_mut)]
        let mut object_15 = object.key("logging").start_object();
        crate::protocol_serde::shape_logging::ser_logging(&mut object_15, var_14)?;
        object_15.finish();
    }
    if let Some(var_16) = &input.name {
        object.key("name").string(var_16.as_str());
    }
    if let Some(var_17) = &input.outpost_config {
        #[allow(unused_mut)]
        let mut object_18 = object.key("outpostConfig").start_object();
        crate::protocol_serde::shape_outpost_config_request::ser_outpost_config_request(&mut object_18, var_17)?;
        object_18.finish();
    }
    if let Some(var_19) = &input.remote_network_config {
        #[allow(unused_mut)]
        let mut object_20 = object.key("remoteNetworkConfig").start_object();
        crate::protocol_serde::shape_remote_network_config_request::ser_remote_network_config_request(&mut object_20, var_19)?;
        object_20.finish();
    }
    if let Some(var_21) = &input.resources_vpc_config {
        #[allow(unused_mut)]
        let mut object_22 = object.key("resourcesVpcConfig").start_object();
        crate::protocol_serde::shape_vpc_config_request::ser_vpc_config_request(&mut object_22, var_21)?;
        object_22.finish();
    }
    if let Some(var_23) = &input.role_arn {
        object.key("roleArn").string(var_23.as_str());
    }
    if let Some(var_24) = &input.storage_config {
        #[allow(unused_mut)]
        let mut object_25 = object.key("storageConfig").start_object();
        crate::protocol_serde::shape_storage_config_request::ser_storage_config_request(&mut object_25, var_24)?;
        object_25.finish();
    }
    if let Some(var_26) = &input.tags {
        #[allow(unused_mut)]
        let mut object_27 = object.key("tags").start_object();
        for (key_28, value_29) in var_26 {
            {
                object_27.key(key_28.as_str()).string(value_29.as_str());
            }
        }
        object_27.finish();
    }
    if let Some(var_30) = &input.upgrade_policy {
        #[allow(unused_mut)]
        let mut object_31 = object.key("upgradePolicy").start_object();
        crate::protocol_serde::shape_upgrade_policy_request::ser_upgrade_policy_request(&mut object_31, var_30)?;
        object_31.finish();
    }
    if let Some(var_32) = &input.version {
        object.key("version").string(var_32.as_str());
    }
    if let Some(var_33) = &input.zonal_shift_config {
        #[allow(unused_mut)]
        let mut object_34 = object.key("zonalShiftConfig").start_object();
        crate::protocol_serde::shape_zonal_shift_config_request::ser_zonal_shift_config_request(&mut object_34, var_33)?;
        object_34.finish();
    }
    Ok(())
}
