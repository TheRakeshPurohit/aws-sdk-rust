// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeInsightsRefreshOutput {
    /// <p>The message associated with the insights refresh operation.</p>
    pub message: ::std::option::Option<::std::string::String>,
    /// <p>The current status of the insights refresh operation.</p>
    pub status: ::std::option::Option<crate::types::InsightsRefreshStatus>,
    /// <p>The date and time when the insights refresh operation started.</p>
    pub started_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date and time when the insights refresh operation ended.</p>
    pub ended_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl DescribeInsightsRefreshOutput {
    /// <p>The message associated with the insights refresh operation.</p>
    pub fn message(&self) -> ::std::option::Option<&str> {
        self.message.as_deref()
    }
    /// <p>The current status of the insights refresh operation.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::InsightsRefreshStatus> {
        self.status.as_ref()
    }
    /// <p>The date and time when the insights refresh operation started.</p>
    pub fn started_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.started_at.as_ref()
    }
    /// <p>The date and time when the insights refresh operation ended.</p>
    pub fn ended_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.ended_at.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for DescribeInsightsRefreshOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeInsightsRefreshOutput {
    /// Creates a new builder-style object to manufacture [`DescribeInsightsRefreshOutput`](crate::operation::describe_insights_refresh::DescribeInsightsRefreshOutput).
    pub fn builder() -> crate::operation::describe_insights_refresh::builders::DescribeInsightsRefreshOutputBuilder {
        crate::operation::describe_insights_refresh::builders::DescribeInsightsRefreshOutputBuilder::default()
    }
}

/// A builder for [`DescribeInsightsRefreshOutput`](crate::operation::describe_insights_refresh::DescribeInsightsRefreshOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DescribeInsightsRefreshOutputBuilder {
    pub(crate) message: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::InsightsRefreshStatus>,
    pub(crate) started_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) ended_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl DescribeInsightsRefreshOutputBuilder {
    /// <p>The message associated with the insights refresh operation.</p>
    pub fn message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The message associated with the insights refresh operation.</p>
    pub fn set_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// <p>The message associated with the insights refresh operation.</p>
    pub fn get_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.message
    }
    /// <p>The current status of the insights refresh operation.</p>
    pub fn status(mut self, input: crate::types::InsightsRefreshStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the insights refresh operation.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::InsightsRefreshStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status of the insights refresh operation.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::InsightsRefreshStatus> {
        &self.status
    }
    /// <p>The date and time when the insights refresh operation started.</p>
    pub fn started_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.started_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time when the insights refresh operation started.</p>
    pub fn set_started_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.started_at = input;
        self
    }
    /// <p>The date and time when the insights refresh operation started.</p>
    pub fn get_started_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.started_at
    }
    /// <p>The date and time when the insights refresh operation ended.</p>
    pub fn ended_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.ended_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time when the insights refresh operation ended.</p>
    pub fn set_ended_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.ended_at = input;
        self
    }
    /// <p>The date and time when the insights refresh operation ended.</p>
    pub fn get_ended_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.ended_at
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeInsightsRefreshOutput`](crate::operation::describe_insights_refresh::DescribeInsightsRefreshOutput).
    pub fn build(self) -> crate::operation::describe_insights_refresh::DescribeInsightsRefreshOutput {
        crate::operation::describe_insights_refresh::DescribeInsightsRefreshOutput {
            message: self.message,
            status: self.status,
            started_at: self.started_at,
            ended_at: self.ended_at,
            _request_id: self._request_id,
        }
    }
}
