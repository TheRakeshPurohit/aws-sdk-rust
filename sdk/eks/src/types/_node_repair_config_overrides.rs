// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specify granular overrides for specific repair actions. These overrides control the repair action and the repair delay time before a node is considered eligible for repair. If you use this, you must specify all the values.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct NodeRepairConfigOverrides {
    /// <p>Specify an unhealthy condition reported by the node monitoring agent that this override would apply to.</p>
    pub node_monitoring_condition: ::std::option::Option<::std::string::String>,
    /// <p>Specify a reason reported by the node monitoring agent that this override would apply to.</p>
    pub node_unhealthy_reason: ::std::option::Option<::std::string::String>,
    /// <p>Specify the minimum time in minutes to wait before attempting to repair a node with this specific <code>nodeMonitoringCondition</code> and <code>nodeUnhealthyReason</code>.</p>
    pub min_repair_wait_time_mins: ::std::option::Option<i32>,
    /// <p>Specify the repair action to take for nodes when all of the specified conditions are met.</p>
    pub repair_action: ::std::option::Option<crate::types::RepairAction>,
}
impl NodeRepairConfigOverrides {
    /// <p>Specify an unhealthy condition reported by the node monitoring agent that this override would apply to.</p>
    pub fn node_monitoring_condition(&self) -> ::std::option::Option<&str> {
        self.node_monitoring_condition.as_deref()
    }
    /// <p>Specify a reason reported by the node monitoring agent that this override would apply to.</p>
    pub fn node_unhealthy_reason(&self) -> ::std::option::Option<&str> {
        self.node_unhealthy_reason.as_deref()
    }
    /// <p>Specify the minimum time in minutes to wait before attempting to repair a node with this specific <code>nodeMonitoringCondition</code> and <code>nodeUnhealthyReason</code>.</p>
    pub fn min_repair_wait_time_mins(&self) -> ::std::option::Option<i32> {
        self.min_repair_wait_time_mins
    }
    /// <p>Specify the repair action to take for nodes when all of the specified conditions are met.</p>
    pub fn repair_action(&self) -> ::std::option::Option<&crate::types::RepairAction> {
        self.repair_action.as_ref()
    }
}
impl NodeRepairConfigOverrides {
    /// Creates a new builder-style object to manufacture [`NodeRepairConfigOverrides`](crate::types::NodeRepairConfigOverrides).
    pub fn builder() -> crate::types::builders::NodeRepairConfigOverridesBuilder {
        crate::types::builders::NodeRepairConfigOverridesBuilder::default()
    }
}

/// A builder for [`NodeRepairConfigOverrides`](crate::types::NodeRepairConfigOverrides).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct NodeRepairConfigOverridesBuilder {
    pub(crate) node_monitoring_condition: ::std::option::Option<::std::string::String>,
    pub(crate) node_unhealthy_reason: ::std::option::Option<::std::string::String>,
    pub(crate) min_repair_wait_time_mins: ::std::option::Option<i32>,
    pub(crate) repair_action: ::std::option::Option<crate::types::RepairAction>,
}
impl NodeRepairConfigOverridesBuilder {
    /// <p>Specify an unhealthy condition reported by the node monitoring agent that this override would apply to.</p>
    pub fn node_monitoring_condition(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.node_monitoring_condition = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specify an unhealthy condition reported by the node monitoring agent that this override would apply to.</p>
    pub fn set_node_monitoring_condition(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.node_monitoring_condition = input;
        self
    }
    /// <p>Specify an unhealthy condition reported by the node monitoring agent that this override would apply to.</p>
    pub fn get_node_monitoring_condition(&self) -> &::std::option::Option<::std::string::String> {
        &self.node_monitoring_condition
    }
    /// <p>Specify a reason reported by the node monitoring agent that this override would apply to.</p>
    pub fn node_unhealthy_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.node_unhealthy_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specify a reason reported by the node monitoring agent that this override would apply to.</p>
    pub fn set_node_unhealthy_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.node_unhealthy_reason = input;
        self
    }
    /// <p>Specify a reason reported by the node monitoring agent that this override would apply to.</p>
    pub fn get_node_unhealthy_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.node_unhealthy_reason
    }
    /// <p>Specify the minimum time in minutes to wait before attempting to repair a node with this specific <code>nodeMonitoringCondition</code> and <code>nodeUnhealthyReason</code>.</p>
    pub fn min_repair_wait_time_mins(mut self, input: i32) -> Self {
        self.min_repair_wait_time_mins = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specify the minimum time in minutes to wait before attempting to repair a node with this specific <code>nodeMonitoringCondition</code> and <code>nodeUnhealthyReason</code>.</p>
    pub fn set_min_repair_wait_time_mins(mut self, input: ::std::option::Option<i32>) -> Self {
        self.min_repair_wait_time_mins = input;
        self
    }
    /// <p>Specify the minimum time in minutes to wait before attempting to repair a node with this specific <code>nodeMonitoringCondition</code> and <code>nodeUnhealthyReason</code>.</p>
    pub fn get_min_repair_wait_time_mins(&self) -> &::std::option::Option<i32> {
        &self.min_repair_wait_time_mins
    }
    /// <p>Specify the repair action to take for nodes when all of the specified conditions are met.</p>
    pub fn repair_action(mut self, input: crate::types::RepairAction) -> Self {
        self.repair_action = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specify the repair action to take for nodes when all of the specified conditions are met.</p>
    pub fn set_repair_action(mut self, input: ::std::option::Option<crate::types::RepairAction>) -> Self {
        self.repair_action = input;
        self
    }
    /// <p>Specify the repair action to take for nodes when all of the specified conditions are met.</p>
    pub fn get_repair_action(&self) -> &::std::option::Option<crate::types::RepairAction> {
        &self.repair_action
    }
    /// Consumes the builder and constructs a [`NodeRepairConfigOverrides`](crate::types::NodeRepairConfigOverrides).
    pub fn build(self) -> crate::types::NodeRepairConfigOverrides {
        crate::types::NodeRepairConfigOverrides {
            node_monitoring_condition: self.node_monitoring_condition,
            node_unhealthy_reason: self.node_unhealthy_reason,
            min_repair_wait_time_mins: self.min_repair_wait_time_mins,
            repair_action: self.repair_action,
        }
    }
}
