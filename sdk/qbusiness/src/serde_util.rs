// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn access_denied_exception_correct_errors(
    mut builder: crate::types::error::builders::AccessDeniedExceptionBuilder,
) -> crate::types::error::builders::AccessDeniedExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn conflict_exception_correct_errors(
    mut builder: crate::types::error::builders::ConflictExceptionBuilder,
) -> crate::types::error::builders::ConflictExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    builder
}

pub(crate) fn internal_server_exception_correct_errors(
    mut builder: crate::types::error::builders::InternalServerExceptionBuilder,
) -> crate::types::error::builders::InternalServerExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_not_found_exception_correct_errors(
    mut builder: crate::types::error::builders::ResourceNotFoundExceptionBuilder,
) -> crate::types::error::builders::ResourceNotFoundExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    builder
}

pub(crate) fn service_quota_exceeded_exception_correct_errors(
    mut builder: crate::types::error::builders::ServiceQuotaExceededExceptionBuilder,
) -> crate::types::error::builders::ServiceQuotaExceededExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    builder
}

pub(crate) fn throttling_exception_correct_errors(
    mut builder: crate::types::error::builders::ThrottlingExceptionBuilder,
) -> crate::types::error::builders::ThrottlingExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_correct_errors(
    mut builder: crate::types::error::builders::ValidationExceptionBuilder,
) -> crate::types::error::builders::ValidationExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.reason.is_none() {
        builder.reason = "no value was set".parse::<crate::types::ValidationExceptionReason>().ok()
    }
    builder
}

pub(crate) fn external_resource_exception_correct_errors(
    mut builder: crate::types::error::builders::ExternalResourceExceptionBuilder,
) -> crate::types::error::builders::ExternalResourceExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn license_not_found_exception_correct_errors(
    mut builder: crate::types::error::builders::LicenseNotFoundExceptionBuilder,
) -> crate::types::error::builders::LicenseNotFoundExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn create_data_accessor_output_output_correct_errors(
    mut builder: crate::operation::create_data_accessor::builders::CreateDataAccessorOutputBuilder,
) -> crate::operation::create_data_accessor::builders::CreateDataAccessorOutputBuilder {
    if builder.data_accessor_id.is_none() {
        builder.data_accessor_id = Some(Default::default())
    }
    if builder.idc_application_arn.is_none() {
        builder.idc_application_arn = Some(Default::default())
    }
    if builder.data_accessor_arn.is_none() {
        builder.data_accessor_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn media_too_large_exception_correct_errors(
    mut builder: crate::types::error::builders::MediaTooLargeExceptionBuilder,
) -> crate::types::error::builders::MediaTooLargeExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn applied_creator_mode_configuration_correct_errors(
    mut builder: crate::types::builders::AppliedCreatorModeConfigurationBuilder,
) -> crate::types::builders::AppliedCreatorModeConfigurationBuilder {
    if builder.creator_mode_control.is_none() {
        builder.creator_mode_control = "no value was set".parse::<crate::types::CreatorModeControl>().ok()
    }
    builder
}

pub(crate) fn applied_orchestration_configuration_correct_errors(
    mut builder: crate::types::builders::AppliedOrchestrationConfigurationBuilder,
) -> crate::types::builders::AppliedOrchestrationConfigurationBuilder {
    if builder.control.is_none() {
        builder.control = "no value was set".parse::<crate::types::OrchestrationControl>().ok()
    }
    builder
}

pub(crate) fn auth_challenge_request_correct_errors(
    mut builder: crate::types::builders::AuthChallengeRequestBuilder,
) -> crate::types::builders::AuthChallengeRequestBuilder {
    if builder.authorization_url.is_none() {
        builder.authorization_url = Some(Default::default())
    }
    builder
}

pub(crate) fn auto_subscription_configuration_correct_errors(
    mut builder: crate::types::builders::AutoSubscriptionConfigurationBuilder,
) -> crate::types::builders::AutoSubscriptionConfigurationBuilder {
    if builder.auto_subscribe.is_none() {
        builder.auto_subscribe = "no value was set".parse::<crate::types::AutoSubscriptionStatus>().ok()
    }
    builder
}

pub(crate) fn browser_extension_configuration_correct_errors(
    mut builder: crate::types::builders::BrowserExtensionConfigurationBuilder,
) -> crate::types::builders::BrowserExtensionConfigurationBuilder {
    if builder.enabled_browser_extensions.is_none() {
        builder.enabled_browser_extensions = Some(Default::default())
    }
    builder
}

pub(crate) fn custom_plugin_configuration_correct_errors(
    mut builder: crate::types::builders::CustomPluginConfigurationBuilder,
) -> crate::types::builders::CustomPluginConfigurationBuilder {
    if builder.description.is_none() {
        builder.description = Some(Default::default())
    }
    if builder.api_schema_type.is_none() {
        builder.api_schema_type = "no value was set".parse::<crate::types::ApiSchemaType>().ok()
    }
    if builder.api_schema.is_none() {
        builder.api_schema = Some(crate::types::ApiSchema::Unknown)
    }
    builder
}

pub(crate) fn data_accessor_authentication_detail_correct_errors(
    mut builder: crate::types::builders::DataAccessorAuthenticationDetailBuilder,
) -> crate::types::builders::DataAccessorAuthenticationDetailBuilder {
    if builder.authentication_type.is_none() {
        builder.authentication_type = "no value was set".parse::<crate::types::DataAccessorAuthenticationType>().ok()
    }
    builder
}

pub(crate) fn data_source_vpc_configuration_correct_errors(
    mut builder: crate::types::builders::DataSourceVpcConfigurationBuilder,
) -> crate::types::builders::DataSourceVpcConfigurationBuilder {
    if builder.subnet_ids.is_none() {
        builder.subnet_ids = Some(Default::default())
    }
    if builder.security_group_ids.is_none() {
        builder.security_group_ids = Some(Default::default())
    }
    builder
}

pub(crate) fn personalization_configuration_correct_errors(
    mut builder: crate::types::builders::PersonalizationConfigurationBuilder,
) -> crate::types::builders::PersonalizationConfigurationBuilder {
    if builder.personalization_control_mode.is_none() {
        builder.personalization_control_mode = "no value was set".parse::<crate::types::PersonalizationControlMode>().ok()
    }
    builder
}

pub(crate) fn q_apps_configuration_correct_errors(
    mut builder: crate::types::builders::QAppsConfigurationBuilder,
) -> crate::types::builders::QAppsConfigurationBuilder {
    if builder.q_apps_control_mode.is_none() {
        builder.q_apps_control_mode = "no value was set".parse::<crate::types::QAppsControlMode>().ok()
    }
    builder
}

pub(crate) fn quick_sight_configuration_correct_errors(
    mut builder: crate::types::builders::QuickSightConfigurationBuilder,
) -> crate::types::builders::QuickSightConfigurationBuilder {
    if builder.client_namespace.is_none() {
        builder.client_namespace = Some(Default::default())
    }
    builder
}

pub(crate) fn action_configuration_correct_errors(
    mut builder: crate::types::builders::ActionConfigurationBuilder,
) -> crate::types::builders::ActionConfigurationBuilder {
    if builder.action.is_none() {
        builder.action = Some(Default::default())
    }
    builder
}

pub(crate) fn audio_extraction_configuration_correct_errors(
    mut builder: crate::types::builders::AudioExtractionConfigurationBuilder,
) -> crate::types::builders::AudioExtractionConfigurationBuilder {
    if builder.audio_extraction_status.is_none() {
        builder.audio_extraction_status = "no value was set".parse::<crate::types::AudioExtractionStatus>().ok()
    }
    builder
}

pub(crate) fn basic_auth_configuration_correct_errors(
    mut builder: crate::types::builders::BasicAuthConfigurationBuilder,
) -> crate::types::builders::BasicAuthConfigurationBuilder {
    if builder.secret_arn.is_none() {
        builder.secret_arn = Some(Default::default())
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn idc_auth_configuration_correct_errors(
    mut builder: crate::types::builders::IdcAuthConfigurationBuilder,
) -> crate::types::builders::IdcAuthConfigurationBuilder {
    if builder.idc_application_arn.is_none() {
        builder.idc_application_arn = Some(Default::default())
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn image_extraction_configuration_correct_errors(
    mut builder: crate::types::builders::ImageExtractionConfigurationBuilder,
) -> crate::types::builders::ImageExtractionConfigurationBuilder {
    if builder.image_extraction_status.is_none() {
        builder.image_extraction_status = "no value was set".parse::<crate::types::ImageExtractionStatus>().ok()
    }
    builder
}

pub(crate) fn kendra_index_configuration_correct_errors(
    mut builder: crate::types::builders::KendraIndexConfigurationBuilder,
) -> crate::types::builders::KendraIndexConfigurationBuilder {
    if builder.index_id.is_none() {
        builder.index_id = Some(Default::default())
    }
    builder
}

pub(crate) fn native_index_configuration_correct_errors(
    mut builder: crate::types::builders::NativeIndexConfigurationBuilder,
) -> crate::types::builders::NativeIndexConfigurationBuilder {
    if builder.index_id.is_none() {
        builder.index_id = Some(Default::default())
    }
    builder
}

pub(crate) fn o_auth2_client_credential_configuration_correct_errors(
    mut builder: crate::types::builders::OAuth2ClientCredentialConfigurationBuilder,
) -> crate::types::builders::OAuth2ClientCredentialConfigurationBuilder {
    if builder.secret_arn.is_none() {
        builder.secret_arn = Some(Default::default())
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn open_id_connect_provider_configuration_correct_errors(
    mut builder: crate::types::builders::OpenIdConnectProviderConfigurationBuilder,
) -> crate::types::builders::OpenIdConnectProviderConfigurationBuilder {
    if builder.secrets_arn.is_none() {
        builder.secrets_arn = Some(Default::default())
    }
    if builder.secrets_role.is_none() {
        builder.secrets_role = Some(Default::default())
    }
    builder
}

pub(crate) fn saml_configuration_correct_errors(
    mut builder: crate::types::builders::SamlConfigurationBuilder,
) -> crate::types::builders::SamlConfigurationBuilder {
    if builder.metadata_xml.is_none() {
        builder.metadata_xml = Some(Default::default())
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    if builder.user_id_attribute.is_none() {
        builder.user_id_attribute = Some(Default::default())
    }
    builder
}

pub(crate) fn saml_provider_configuration_correct_errors(
    mut builder: crate::types::builders::SamlProviderConfigurationBuilder,
) -> crate::types::builders::SamlProviderConfigurationBuilder {
    if builder.authentication_url.is_none() {
        builder.authentication_url = Some(Default::default())
    }
    builder
}

pub(crate) fn tag_correct_errors(mut builder: crate::types::builders::TagBuilder) -> crate::types::builders::TagBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn topic_configuration_correct_errors(
    mut builder: crate::types::builders::TopicConfigurationBuilder,
) -> crate::types::builders::TopicConfigurationBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.rules.is_none() {
        builder.rules = Some(Default::default())
    }
    builder
}

pub(crate) fn user_alias_correct_errors(mut builder: crate::types::builders::UserAliasBuilder) -> crate::types::builders::UserAliasBuilder {
    if builder.user_id.is_none() {
        builder.user_id = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_field_correct_errors(
    mut builder: crate::types::builders::ValidationExceptionFieldBuilder,
) -> crate::types::builders::ValidationExceptionFieldBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn video_extraction_configuration_correct_errors(
    mut builder: crate::types::builders::VideoExtractionConfigurationBuilder,
) -> crate::types::builders::VideoExtractionConfigurationBuilder {
    if builder.video_extraction_status.is_none() {
        builder.video_extraction_status = "no value was set".parse::<crate::types::VideoExtractionStatus>().ok()
    }
    builder
}

pub(crate) fn action_execution_correct_errors(
    mut builder: crate::types::builders::ActionExecutionBuilder,
) -> crate::types::builders::ActionExecutionBuilder {
    if builder.plugin_id.is_none() {
        builder.plugin_id = Some(Default::default())
    }
    if builder.payload.is_none() {
        builder.payload = Some(Default::default())
    }
    if builder.payload_field_name_separator.is_none() {
        builder.payload_field_name_separator = Some(Default::default())
    }
    builder
}

pub(crate) fn action_filter_configuration_correct_errors(
    mut builder: crate::types::builders::ActionFilterConfigurationBuilder,
) -> crate::types::builders::ActionFilterConfigurationBuilder {
    if builder.document_attribute_filter.is_none() {
        builder.document_attribute_filter = {
            let builder = crate::types::builders::AttributeFilterBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn auth_challenge_request_event_correct_errors(
    mut builder: crate::types::builders::AuthChallengeRequestEventBuilder,
) -> crate::types::builders::AuthChallengeRequestEventBuilder {
    if builder.authorization_url.is_none() {
        builder.authorization_url = Some(Default::default())
    }
    builder
}

pub(crate) fn data_accessor_idc_trusted_token_issuer_configuration_correct_errors(
    mut builder: crate::types::builders::DataAccessorIdcTrustedTokenIssuerConfigurationBuilder,
) -> crate::types::builders::DataAccessorIdcTrustedTokenIssuerConfigurationBuilder {
    if builder.idc_trusted_token_issuer_arn.is_none() {
        builder.idc_trusted_token_issuer_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn document_attribute_condition_correct_errors(
    mut builder: crate::types::builders::DocumentAttributeConditionBuilder,
) -> crate::types::builders::DocumentAttributeConditionBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.operator.is_none() {
        builder.operator = "no value was set".parse::<crate::types::DocumentEnrichmentConditionOperator>().ok()
    }
    builder
}

pub(crate) fn s3_correct_errors(mut builder: crate::types::builders::S3Builder) -> crate::types::builders::S3Builder {
    if builder.bucket.is_none() {
        builder.bucket = Some(Default::default())
    }
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    builder
}

pub(crate) fn conversation_source_correct_errors(
    mut builder: crate::types::builders::ConversationSourceBuilder,
) -> crate::types::builders::ConversationSourceBuilder {
    if builder.conversation_id.is_none() {
        builder.conversation_id = Some(Default::default())
    }
    if builder.attachment_id.is_none() {
        builder.attachment_id = Some(Default::default())
    }
    builder
}

pub(crate) fn document_attribute_correct_errors(
    mut builder: crate::types::builders::DocumentAttributeBuilder,
) -> crate::types::builders::DocumentAttributeBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(crate::types::DocumentAttributeValue::Unknown)
    }
    builder
}

pub(crate) fn document_attribute_target_correct_errors(
    mut builder: crate::types::builders::DocumentAttributeTargetBuilder,
) -> crate::types::builders::DocumentAttributeTargetBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    builder
}

pub(crate) fn rule_correct_errors(mut builder: crate::types::builders::RuleBuilder) -> crate::types::builders::RuleBuilder {
    if builder.rule_type.is_none() {
        builder.rule_type = "no value was set".parse::<crate::types::RuleType>().ok()
    }
    builder
}

pub(crate) fn action_execution_payload_field_correct_errors(
    mut builder: crate::types::builders::ActionExecutionPayloadFieldBuilder,
) -> crate::types::builders::ActionExecutionPayloadFieldBuilder {
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn date_attribute_boosting_configuration_correct_errors(
    mut builder: crate::types::builders::DateAttributeBoostingConfigurationBuilder,
) -> crate::types::builders::DateAttributeBoostingConfigurationBuilder {
    if builder.boosting_level.is_none() {
        builder.boosting_level = "no value was set".parse::<crate::types::DocumentAttributeBoostingLevel>().ok()
    }
    builder
}

pub(crate) fn number_attribute_boosting_configuration_correct_errors(
    mut builder: crate::types::builders::NumberAttributeBoostingConfigurationBuilder,
) -> crate::types::builders::NumberAttributeBoostingConfigurationBuilder {
    if builder.boosting_level.is_none() {
        builder.boosting_level = "no value was set".parse::<crate::types::DocumentAttributeBoostingLevel>().ok()
    }
    builder
}

pub(crate) fn string_attribute_boosting_configuration_correct_errors(
    mut builder: crate::types::builders::StringAttributeBoostingConfigurationBuilder,
) -> crate::types::builders::StringAttributeBoostingConfigurationBuilder {
    if builder.boosting_level.is_none() {
        builder.boosting_level = "no value was set".parse::<crate::types::DocumentAttributeBoostingLevel>().ok()
    }
    builder
}

pub(crate) fn string_list_attribute_boosting_configuration_correct_errors(
    mut builder: crate::types::builders::StringListAttributeBoostingConfigurationBuilder,
) -> crate::types::builders::StringListAttributeBoostingConfigurationBuilder {
    if builder.boosting_level.is_none() {
        builder.boosting_level = "no value was set".parse::<crate::types::DocumentAttributeBoostingLevel>().ok()
    }
    builder
}
