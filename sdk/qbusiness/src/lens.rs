// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_get_chat_controls_configuration_output_output_next_token(
    input: &crate::operation::get_chat_controls_configuration::GetChatControlsConfigurationOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_applications_output_output_next_token(
    input: &crate::operation::list_applications::ListApplicationsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_attachments_output_output_next_token(
    input: &crate::operation::list_attachments::ListAttachmentsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_chat_response_configurations_output_output_next_token(
    input: &crate::operation::list_chat_response_configurations::ListChatResponseConfigurationsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_conversations_output_output_next_token(
    input: &crate::operation::list_conversations::ListConversationsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_data_accessors_output_output_next_token(
    input: &crate::operation::list_data_accessors::ListDataAccessorsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_data_source_sync_jobs_output_output_next_token(
    input: &crate::operation::list_data_source_sync_jobs::ListDataSourceSyncJobsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_data_sources_output_output_next_token(
    input: &crate::operation::list_data_sources::ListDataSourcesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_documents_output_output_next_token(
    input: &crate::operation::list_documents::ListDocumentsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_groups_output_output_next_token(
    input: &crate::operation::list_groups::ListGroupsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_indices_output_output_next_token(
    input: &crate::operation::list_indices::ListIndicesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_messages_output_output_next_token(
    input: &crate::operation::list_messages::ListMessagesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_plugin_actions_output_output_next_token(
    input: &crate::operation::list_plugin_actions::ListPluginActionsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_plugin_type_actions_output_output_next_token(
    input: &crate::operation::list_plugin_type_actions::ListPluginTypeActionsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_plugin_type_metadata_output_output_next_token(
    input: &crate::operation::list_plugin_type_metadata::ListPluginTypeMetadataOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_plugins_output_output_next_token(
    input: &crate::operation::list_plugins::ListPluginsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_retrievers_output_output_next_token(
    input: &crate::operation::list_retrievers::ListRetrieversOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_subscriptions_output_output_next_token(
    input: &crate::operation::list_subscriptions::ListSubscriptionsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_web_experiences_output_output_next_token(
    input: &crate::operation::list_web_experiences::ListWebExperiencesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_search_relevant_content_output_output_next_token(
    input: &crate::operation::search_relevant_content::SearchRelevantContentOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_get_chat_controls_configuration_output_output_topic_configurations(
    input: crate::operation::get_chat_controls_configuration::GetChatControlsConfigurationOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::TopicConfiguration>> {
    let input = input.topic_configurations?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_applications_output_output_applications(
    input: crate::operation::list_applications::ListApplicationsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Application>> {
    let input = input.applications?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_attachments_output_output_attachments(
    input: crate::operation::list_attachments::ListAttachmentsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Attachment>> {
    let input = input.attachments?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_chat_response_configurations_output_output_chat_response_configurations(
    input: crate::operation::list_chat_response_configurations::ListChatResponseConfigurationsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ChatResponseConfiguration>> {
    let input = input.chat_response_configurations?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_conversations_output_output_conversations(
    input: crate::operation::list_conversations::ListConversationsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Conversation>> {
    let input = input.conversations?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_data_accessors_output_output_data_accessors(
    input: crate::operation::list_data_accessors::ListDataAccessorsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::DataAccessor>> {
    let input = input.data_accessors?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_data_source_sync_jobs_output_output_history(
    input: crate::operation::list_data_source_sync_jobs::ListDataSourceSyncJobsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::DataSourceSyncJob>> {
    let input = input.history?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_data_sources_output_output_data_sources(
    input: crate::operation::list_data_sources::ListDataSourcesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::DataSource>> {
    let input = input.data_sources?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_documents_output_output_document_detail_list(
    input: crate::operation::list_documents::ListDocumentsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::DocumentDetails>> {
    let input = input.document_detail_list?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_groups_output_output_items(
    input: crate::operation::list_groups::ListGroupsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::GroupSummary>> {
    let input = input.items?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_indices_output_output_indices(
    input: crate::operation::list_indices::ListIndicesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Index>> {
    let input = input.indices?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_messages_output_output_messages(
    input: crate::operation::list_messages::ListMessagesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Message>> {
    let input = input.messages?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_plugin_actions_output_output_items(
    input: crate::operation::list_plugin_actions::ListPluginActionsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ActionSummary>> {
    let input = input.items?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_plugin_type_actions_output_output_items(
    input: crate::operation::list_plugin_type_actions::ListPluginTypeActionsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ActionSummary>> {
    let input = input.items?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_plugin_type_metadata_output_output_items(
    input: crate::operation::list_plugin_type_metadata::ListPluginTypeMetadataOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::PluginTypeMetadataSummary>> {
    let input = input.items?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_plugins_output_output_plugins(
    input: crate::operation::list_plugins::ListPluginsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Plugin>> {
    let input = input.plugins?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_retrievers_output_output_retrievers(
    input: crate::operation::list_retrievers::ListRetrieversOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Retriever>> {
    let input = input.retrievers?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_subscriptions_output_output_subscriptions(
    input: crate::operation::list_subscriptions::ListSubscriptionsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Subscription>> {
    let input = input.subscriptions?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_web_experiences_output_output_web_experiences(
    input: crate::operation::list_web_experiences::ListWebExperiencesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::WebExperience>> {
    let input = input.web_experiences?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_search_relevant_content_output_output_relevant_content(
    input: crate::operation::search_relevant_content::SearchRelevantContentOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::RelevantContent>> {
    let input = input.relevant_content?;
    ::std::option::Option::Some(input)
}
