// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DeleteChatResponseConfiguration`](crate::operation::delete_chat_response_configuration::builders::DeleteChatResponseConfigurationFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`application_id(impl Into<String>)`](crate::operation::delete_chat_response_configuration::builders::DeleteChatResponseConfigurationFluentBuilder::application_id) / [`set_application_id(Option<String>)`](crate::operation::delete_chat_response_configuration::builders::DeleteChatResponseConfigurationFluentBuilder::set_application_id):<br>required: **true**<br><p>The unique identifier of theAmazon Q Business application from which to delete the chat response configuration.</p><br>
    ///   - [`chat_response_configuration_id(impl Into<String>)`](crate::operation::delete_chat_response_configuration::builders::DeleteChatResponseConfigurationFluentBuilder::chat_response_configuration_id) / [`set_chat_response_configuration_id(Option<String>)`](crate::operation::delete_chat_response_configuration::builders::DeleteChatResponseConfigurationFluentBuilder::set_chat_response_configuration_id):<br>required: **true**<br><p>The unique identifier of the chat response configuration to delete from the specified application.</p><br>
    /// - On success, responds with [`DeleteChatResponseConfigurationOutput`](crate::operation::delete_chat_response_configuration::DeleteChatResponseConfigurationOutput)
    /// - On failure, responds with [`SdkError<DeleteChatResponseConfigurationError>`](crate::operation::delete_chat_response_configuration::DeleteChatResponseConfigurationError)
    pub fn delete_chat_response_configuration(
        &self,
    ) -> crate::operation::delete_chat_response_configuration::builders::DeleteChatResponseConfigurationFluentBuilder {
        crate::operation::delete_chat_response_configuration::builders::DeleteChatResponseConfigurationFluentBuilder::new(self.handle.clone())
    }
}
