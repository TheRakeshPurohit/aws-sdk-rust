// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The structure that represents a null filter.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct TopicNullFilter {
    /// <p>The type of the null filter. Valid values for this type are <code>NULLS_ONLY</code>, <code>NON_NULLS_ONLY</code>, and <code>ALL_VALUES</code>.</p>
    pub null_filter_type: ::std::option::Option<crate::types::NullFilterType>,
    /// <p>A structure that represents a singular filter constant, used in filters to specify a single value to match against.</p>
    pub constant: ::std::option::Option<crate::types::TopicSingularFilterConstant>,
    /// <p>A Boolean value that indicates if the filter is inverse.</p>
    pub inverse: bool,
}
impl TopicNullFilter {
    /// <p>The type of the null filter. Valid values for this type are <code>NULLS_ONLY</code>, <code>NON_NULLS_ONLY</code>, and <code>ALL_VALUES</code>.</p>
    pub fn null_filter_type(&self) -> ::std::option::Option<&crate::types::NullFilterType> {
        self.null_filter_type.as_ref()
    }
    /// <p>A structure that represents a singular filter constant, used in filters to specify a single value to match against.</p>
    pub fn constant(&self) -> ::std::option::Option<&crate::types::TopicSingularFilterConstant> {
        self.constant.as_ref()
    }
    /// <p>A Boolean value that indicates if the filter is inverse.</p>
    pub fn inverse(&self) -> bool {
        self.inverse
    }
}
impl ::std::fmt::Debug for TopicNullFilter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("TopicNullFilter");
        formatter.field("null_filter_type", &self.null_filter_type);
        formatter.field("constant", &"*** Sensitive Data Redacted ***");
        formatter.field("inverse", &self.inverse);
        formatter.finish()
    }
}
impl TopicNullFilter {
    /// Creates a new builder-style object to manufacture [`TopicNullFilter`](crate::types::TopicNullFilter).
    pub fn builder() -> crate::types::builders::TopicNullFilterBuilder {
        crate::types::builders::TopicNullFilterBuilder::default()
    }
}

/// A builder for [`TopicNullFilter`](crate::types::TopicNullFilter).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct TopicNullFilterBuilder {
    pub(crate) null_filter_type: ::std::option::Option<crate::types::NullFilterType>,
    pub(crate) constant: ::std::option::Option<crate::types::TopicSingularFilterConstant>,
    pub(crate) inverse: ::std::option::Option<bool>,
}
impl TopicNullFilterBuilder {
    /// <p>The type of the null filter. Valid values for this type are <code>NULLS_ONLY</code>, <code>NON_NULLS_ONLY</code>, and <code>ALL_VALUES</code>.</p>
    pub fn null_filter_type(mut self, input: crate::types::NullFilterType) -> Self {
        self.null_filter_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the null filter. Valid values for this type are <code>NULLS_ONLY</code>, <code>NON_NULLS_ONLY</code>, and <code>ALL_VALUES</code>.</p>
    pub fn set_null_filter_type(mut self, input: ::std::option::Option<crate::types::NullFilterType>) -> Self {
        self.null_filter_type = input;
        self
    }
    /// <p>The type of the null filter. Valid values for this type are <code>NULLS_ONLY</code>, <code>NON_NULLS_ONLY</code>, and <code>ALL_VALUES</code>.</p>
    pub fn get_null_filter_type(&self) -> &::std::option::Option<crate::types::NullFilterType> {
        &self.null_filter_type
    }
    /// <p>A structure that represents a singular filter constant, used in filters to specify a single value to match against.</p>
    pub fn constant(mut self, input: crate::types::TopicSingularFilterConstant) -> Self {
        self.constant = ::std::option::Option::Some(input);
        self
    }
    /// <p>A structure that represents a singular filter constant, used in filters to specify a single value to match against.</p>
    pub fn set_constant(mut self, input: ::std::option::Option<crate::types::TopicSingularFilterConstant>) -> Self {
        self.constant = input;
        self
    }
    /// <p>A structure that represents a singular filter constant, used in filters to specify a single value to match against.</p>
    pub fn get_constant(&self) -> &::std::option::Option<crate::types::TopicSingularFilterConstant> {
        &self.constant
    }
    /// <p>A Boolean value that indicates if the filter is inverse.</p>
    pub fn inverse(mut self, input: bool) -> Self {
        self.inverse = ::std::option::Option::Some(input);
        self
    }
    /// <p>A Boolean value that indicates if the filter is inverse.</p>
    pub fn set_inverse(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inverse = input;
        self
    }
    /// <p>A Boolean value that indicates if the filter is inverse.</p>
    pub fn get_inverse(&self) -> &::std::option::Option<bool> {
        &self.inverse
    }
    /// Consumes the builder and constructs a [`TopicNullFilter`](crate::types::TopicNullFilter).
    pub fn build(self) -> crate::types::TopicNullFilter {
        crate::types::TopicNullFilter {
            null_filter_type: self.null_filter_type,
            constant: self.constant,
            inverse: self.inverse.unwrap_or_default(),
        }
    }
}
impl ::std::fmt::Debug for TopicNullFilterBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("TopicNullFilterBuilder");
        formatter.field("null_filter_type", &self.null_filter_type);
        formatter.field("constant", &"*** Sensitive Data Redacted ***");
        formatter.field("inverse", &self.inverse);
        formatter.finish()
    }
}
