// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeClusterOutput {
    /// <p>The Amazon Resource Name (ARN) of the SageMaker HyperPod cluster.</p>
    pub cluster_arn: ::std::option::Option<::std::string::String>,
    /// <p>The name of the SageMaker HyperPod cluster.</p>
    pub cluster_name: ::std::option::Option<::std::string::String>,
    /// <p>The status of the SageMaker HyperPod cluster.</p>
    pub cluster_status: ::std::option::Option<crate::types::ClusterStatus>,
    /// <p>The time when the SageMaker Cluster is created.</p>
    pub creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The failure message of the SageMaker HyperPod cluster.</p>
    pub failure_message: ::std::option::Option<::std::string::String>,
    /// <p>The instance groups of the SageMaker HyperPod cluster.</p>
    pub instance_groups: ::std::option::Option<::std::vec::Vec<crate::types::ClusterInstanceGroupDetails>>,
    /// <p>The specialized instance groups for training models like Amazon Nova to be created in the SageMaker HyperPod cluster.</p>
    pub restricted_instance_groups: ::std::option::Option<::std::vec::Vec<crate::types::ClusterRestrictedInstanceGroupDetails>>,
    /// <p>Specifies an Amazon Virtual Private Cloud (VPC) that your SageMaker jobs, hosted models, and compute resources have access to. You can control access to and from your resources by configuring a VPC. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/infrastructure-give-access.html">Give SageMaker Access to Resources in your Amazon VPC</a>.</p>
    pub vpc_config: ::std::option::Option<crate::types::VpcConfig>,
    /// <p>The type of orchestrator used for the SageMaker HyperPod cluster.</p>
    pub orchestrator: ::std::option::Option<crate::types::ClusterOrchestrator>,
    /// <p>The current configuration for managed tier checkpointing on the HyperPod cluster. For example, this shows whether the feature is enabled and the percentage of cluster memory allocated for checkpoint storage.</p>
    pub tiered_storage_config: ::std::option::Option<crate::types::ClusterTieredStorageConfig>,
    /// <p>The node recovery mode configured for the SageMaker HyperPod cluster.</p>
    pub node_recovery: ::std::option::Option<crate::types::ClusterNodeRecovery>,
    /// <p>The mode used for provisioning nodes in the cluster.</p>
    pub node_provisioning_mode: ::std::option::Option<crate::types::ClusterNodeProvisioningMode>,
    /// <p>The Amazon Resource Name (ARN) of the IAM role that HyperPod uses for cluster autoscaling operations.</p>
    pub cluster_role: ::std::option::Option<::std::string::String>,
    /// <p>The current autoscaling configuration and status for the autoscaler.</p>
    pub auto_scaling: ::std::option::Option<crate::types::ClusterAutoScalingConfigOutput>,
    _request_id: Option<String>,
}
impl DescribeClusterOutput {
    /// <p>The Amazon Resource Name (ARN) of the SageMaker HyperPod cluster.</p>
    pub fn cluster_arn(&self) -> ::std::option::Option<&str> {
        self.cluster_arn.as_deref()
    }
    /// <p>The name of the SageMaker HyperPod cluster.</p>
    pub fn cluster_name(&self) -> ::std::option::Option<&str> {
        self.cluster_name.as_deref()
    }
    /// <p>The status of the SageMaker HyperPod cluster.</p>
    pub fn cluster_status(&self) -> ::std::option::Option<&crate::types::ClusterStatus> {
        self.cluster_status.as_ref()
    }
    /// <p>The time when the SageMaker Cluster is created.</p>
    pub fn creation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The failure message of the SageMaker HyperPod cluster.</p>
    pub fn failure_message(&self) -> ::std::option::Option<&str> {
        self.failure_message.as_deref()
    }
    /// <p>The instance groups of the SageMaker HyperPod cluster.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.instance_groups.is_none()`.
    pub fn instance_groups(&self) -> &[crate::types::ClusterInstanceGroupDetails] {
        self.instance_groups.as_deref().unwrap_or_default()
    }
    /// <p>The specialized instance groups for training models like Amazon Nova to be created in the SageMaker HyperPod cluster.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.restricted_instance_groups.is_none()`.
    pub fn restricted_instance_groups(&self) -> &[crate::types::ClusterRestrictedInstanceGroupDetails] {
        self.restricted_instance_groups.as_deref().unwrap_or_default()
    }
    /// <p>Specifies an Amazon Virtual Private Cloud (VPC) that your SageMaker jobs, hosted models, and compute resources have access to. You can control access to and from your resources by configuring a VPC. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/infrastructure-give-access.html">Give SageMaker Access to Resources in your Amazon VPC</a>.</p>
    pub fn vpc_config(&self) -> ::std::option::Option<&crate::types::VpcConfig> {
        self.vpc_config.as_ref()
    }
    /// <p>The type of orchestrator used for the SageMaker HyperPod cluster.</p>
    pub fn orchestrator(&self) -> ::std::option::Option<&crate::types::ClusterOrchestrator> {
        self.orchestrator.as_ref()
    }
    /// <p>The current configuration for managed tier checkpointing on the HyperPod cluster. For example, this shows whether the feature is enabled and the percentage of cluster memory allocated for checkpoint storage.</p>
    pub fn tiered_storage_config(&self) -> ::std::option::Option<&crate::types::ClusterTieredStorageConfig> {
        self.tiered_storage_config.as_ref()
    }
    /// <p>The node recovery mode configured for the SageMaker HyperPod cluster.</p>
    pub fn node_recovery(&self) -> ::std::option::Option<&crate::types::ClusterNodeRecovery> {
        self.node_recovery.as_ref()
    }
    /// <p>The mode used for provisioning nodes in the cluster.</p>
    pub fn node_provisioning_mode(&self) -> ::std::option::Option<&crate::types::ClusterNodeProvisioningMode> {
        self.node_provisioning_mode.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role that HyperPod uses for cluster autoscaling operations.</p>
    pub fn cluster_role(&self) -> ::std::option::Option<&str> {
        self.cluster_role.as_deref()
    }
    /// <p>The current autoscaling configuration and status for the autoscaler.</p>
    pub fn auto_scaling(&self) -> ::std::option::Option<&crate::types::ClusterAutoScalingConfigOutput> {
        self.auto_scaling.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for DescribeClusterOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeClusterOutput {
    /// Creates a new builder-style object to manufacture [`DescribeClusterOutput`](crate::operation::describe_cluster::DescribeClusterOutput).
    pub fn builder() -> crate::operation::describe_cluster::builders::DescribeClusterOutputBuilder {
        crate::operation::describe_cluster::builders::DescribeClusterOutputBuilder::default()
    }
}

/// A builder for [`DescribeClusterOutput`](crate::operation::describe_cluster::DescribeClusterOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DescribeClusterOutputBuilder {
    pub(crate) cluster_arn: ::std::option::Option<::std::string::String>,
    pub(crate) cluster_name: ::std::option::Option<::std::string::String>,
    pub(crate) cluster_status: ::std::option::Option<crate::types::ClusterStatus>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) failure_message: ::std::option::Option<::std::string::String>,
    pub(crate) instance_groups: ::std::option::Option<::std::vec::Vec<crate::types::ClusterInstanceGroupDetails>>,
    pub(crate) restricted_instance_groups: ::std::option::Option<::std::vec::Vec<crate::types::ClusterRestrictedInstanceGroupDetails>>,
    pub(crate) vpc_config: ::std::option::Option<crate::types::VpcConfig>,
    pub(crate) orchestrator: ::std::option::Option<crate::types::ClusterOrchestrator>,
    pub(crate) tiered_storage_config: ::std::option::Option<crate::types::ClusterTieredStorageConfig>,
    pub(crate) node_recovery: ::std::option::Option<crate::types::ClusterNodeRecovery>,
    pub(crate) node_provisioning_mode: ::std::option::Option<crate::types::ClusterNodeProvisioningMode>,
    pub(crate) cluster_role: ::std::option::Option<::std::string::String>,
    pub(crate) auto_scaling: ::std::option::Option<crate::types::ClusterAutoScalingConfigOutput>,
    _request_id: Option<String>,
}
impl DescribeClusterOutputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the SageMaker HyperPod cluster.</p>
    /// This field is required.
    pub fn cluster_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cluster_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the SageMaker HyperPod cluster.</p>
    pub fn set_cluster_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cluster_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the SageMaker HyperPod cluster.</p>
    pub fn get_cluster_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.cluster_arn
    }
    /// <p>The name of the SageMaker HyperPod cluster.</p>
    pub fn cluster_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cluster_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the SageMaker HyperPod cluster.</p>
    pub fn set_cluster_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cluster_name = input;
        self
    }
    /// <p>The name of the SageMaker HyperPod cluster.</p>
    pub fn get_cluster_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.cluster_name
    }
    /// <p>The status of the SageMaker HyperPod cluster.</p>
    /// This field is required.
    pub fn cluster_status(mut self, input: crate::types::ClusterStatus) -> Self {
        self.cluster_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the SageMaker HyperPod cluster.</p>
    pub fn set_cluster_status(mut self, input: ::std::option::Option<crate::types::ClusterStatus>) -> Self {
        self.cluster_status = input;
        self
    }
    /// <p>The status of the SageMaker HyperPod cluster.</p>
    pub fn get_cluster_status(&self) -> &::std::option::Option<crate::types::ClusterStatus> {
        &self.cluster_status
    }
    /// <p>The time when the SageMaker Cluster is created.</p>
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time when the SageMaker Cluster is created.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The time when the SageMaker Cluster is created.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>The failure message of the SageMaker HyperPod cluster.</p>
    pub fn failure_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.failure_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The failure message of the SageMaker HyperPod cluster.</p>
    pub fn set_failure_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.failure_message = input;
        self
    }
    /// <p>The failure message of the SageMaker HyperPod cluster.</p>
    pub fn get_failure_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.failure_message
    }
    /// Appends an item to `instance_groups`.
    ///
    /// To override the contents of this collection use [`set_instance_groups`](Self::set_instance_groups).
    ///
    /// <p>The instance groups of the SageMaker HyperPod cluster.</p>
    pub fn instance_groups(mut self, input: crate::types::ClusterInstanceGroupDetails) -> Self {
        let mut v = self.instance_groups.unwrap_or_default();
        v.push(input);
        self.instance_groups = ::std::option::Option::Some(v);
        self
    }
    /// <p>The instance groups of the SageMaker HyperPod cluster.</p>
    pub fn set_instance_groups(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ClusterInstanceGroupDetails>>) -> Self {
        self.instance_groups = input;
        self
    }
    /// <p>The instance groups of the SageMaker HyperPod cluster.</p>
    pub fn get_instance_groups(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ClusterInstanceGroupDetails>> {
        &self.instance_groups
    }
    /// Appends an item to `restricted_instance_groups`.
    ///
    /// To override the contents of this collection use [`set_restricted_instance_groups`](Self::set_restricted_instance_groups).
    ///
    /// <p>The specialized instance groups for training models like Amazon Nova to be created in the SageMaker HyperPod cluster.</p>
    pub fn restricted_instance_groups(mut self, input: crate::types::ClusterRestrictedInstanceGroupDetails) -> Self {
        let mut v = self.restricted_instance_groups.unwrap_or_default();
        v.push(input);
        self.restricted_instance_groups = ::std::option::Option::Some(v);
        self
    }
    /// <p>The specialized instance groups for training models like Amazon Nova to be created in the SageMaker HyperPod cluster.</p>
    pub fn set_restricted_instance_groups(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::ClusterRestrictedInstanceGroupDetails>>,
    ) -> Self {
        self.restricted_instance_groups = input;
        self
    }
    /// <p>The specialized instance groups for training models like Amazon Nova to be created in the SageMaker HyperPod cluster.</p>
    pub fn get_restricted_instance_groups(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ClusterRestrictedInstanceGroupDetails>> {
        &self.restricted_instance_groups
    }
    /// <p>Specifies an Amazon Virtual Private Cloud (VPC) that your SageMaker jobs, hosted models, and compute resources have access to. You can control access to and from your resources by configuring a VPC. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/infrastructure-give-access.html">Give SageMaker Access to Resources in your Amazon VPC</a>.</p>
    pub fn vpc_config(mut self, input: crate::types::VpcConfig) -> Self {
        self.vpc_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies an Amazon Virtual Private Cloud (VPC) that your SageMaker jobs, hosted models, and compute resources have access to. You can control access to and from your resources by configuring a VPC. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/infrastructure-give-access.html">Give SageMaker Access to Resources in your Amazon VPC</a>.</p>
    pub fn set_vpc_config(mut self, input: ::std::option::Option<crate::types::VpcConfig>) -> Self {
        self.vpc_config = input;
        self
    }
    /// <p>Specifies an Amazon Virtual Private Cloud (VPC) that your SageMaker jobs, hosted models, and compute resources have access to. You can control access to and from your resources by configuring a VPC. For more information, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/infrastructure-give-access.html">Give SageMaker Access to Resources in your Amazon VPC</a>.</p>
    pub fn get_vpc_config(&self) -> &::std::option::Option<crate::types::VpcConfig> {
        &self.vpc_config
    }
    /// <p>The type of orchestrator used for the SageMaker HyperPod cluster.</p>
    pub fn orchestrator(mut self, input: crate::types::ClusterOrchestrator) -> Self {
        self.orchestrator = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of orchestrator used for the SageMaker HyperPod cluster.</p>
    pub fn set_orchestrator(mut self, input: ::std::option::Option<crate::types::ClusterOrchestrator>) -> Self {
        self.orchestrator = input;
        self
    }
    /// <p>The type of orchestrator used for the SageMaker HyperPod cluster.</p>
    pub fn get_orchestrator(&self) -> &::std::option::Option<crate::types::ClusterOrchestrator> {
        &self.orchestrator
    }
    /// <p>The current configuration for managed tier checkpointing on the HyperPod cluster. For example, this shows whether the feature is enabled and the percentage of cluster memory allocated for checkpoint storage.</p>
    pub fn tiered_storage_config(mut self, input: crate::types::ClusterTieredStorageConfig) -> Self {
        self.tiered_storage_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current configuration for managed tier checkpointing on the HyperPod cluster. For example, this shows whether the feature is enabled and the percentage of cluster memory allocated for checkpoint storage.</p>
    pub fn set_tiered_storage_config(mut self, input: ::std::option::Option<crate::types::ClusterTieredStorageConfig>) -> Self {
        self.tiered_storage_config = input;
        self
    }
    /// <p>The current configuration for managed tier checkpointing on the HyperPod cluster. For example, this shows whether the feature is enabled and the percentage of cluster memory allocated for checkpoint storage.</p>
    pub fn get_tiered_storage_config(&self) -> &::std::option::Option<crate::types::ClusterTieredStorageConfig> {
        &self.tiered_storage_config
    }
    /// <p>The node recovery mode configured for the SageMaker HyperPod cluster.</p>
    pub fn node_recovery(mut self, input: crate::types::ClusterNodeRecovery) -> Self {
        self.node_recovery = ::std::option::Option::Some(input);
        self
    }
    /// <p>The node recovery mode configured for the SageMaker HyperPod cluster.</p>
    pub fn set_node_recovery(mut self, input: ::std::option::Option<crate::types::ClusterNodeRecovery>) -> Self {
        self.node_recovery = input;
        self
    }
    /// <p>The node recovery mode configured for the SageMaker HyperPod cluster.</p>
    pub fn get_node_recovery(&self) -> &::std::option::Option<crate::types::ClusterNodeRecovery> {
        &self.node_recovery
    }
    /// <p>The mode used for provisioning nodes in the cluster.</p>
    pub fn node_provisioning_mode(mut self, input: crate::types::ClusterNodeProvisioningMode) -> Self {
        self.node_provisioning_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>The mode used for provisioning nodes in the cluster.</p>
    pub fn set_node_provisioning_mode(mut self, input: ::std::option::Option<crate::types::ClusterNodeProvisioningMode>) -> Self {
        self.node_provisioning_mode = input;
        self
    }
    /// <p>The mode used for provisioning nodes in the cluster.</p>
    pub fn get_node_provisioning_mode(&self) -> &::std::option::Option<crate::types::ClusterNodeProvisioningMode> {
        &self.node_provisioning_mode
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role that HyperPod uses for cluster autoscaling operations.</p>
    pub fn cluster_role(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cluster_role = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role that HyperPod uses for cluster autoscaling operations.</p>
    pub fn set_cluster_role(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cluster_role = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role that HyperPod uses for cluster autoscaling operations.</p>
    pub fn get_cluster_role(&self) -> &::std::option::Option<::std::string::String> {
        &self.cluster_role
    }
    /// <p>The current autoscaling configuration and status for the autoscaler.</p>
    pub fn auto_scaling(mut self, input: crate::types::ClusterAutoScalingConfigOutput) -> Self {
        self.auto_scaling = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current autoscaling configuration and status for the autoscaler.</p>
    pub fn set_auto_scaling(mut self, input: ::std::option::Option<crate::types::ClusterAutoScalingConfigOutput>) -> Self {
        self.auto_scaling = input;
        self
    }
    /// <p>The current autoscaling configuration and status for the autoscaler.</p>
    pub fn get_auto_scaling(&self) -> &::std::option::Option<crate::types::ClusterAutoScalingConfigOutput> {
        &self.auto_scaling
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeClusterOutput`](crate::operation::describe_cluster::DescribeClusterOutput).
    pub fn build(self) -> crate::operation::describe_cluster::DescribeClusterOutput {
        crate::operation::describe_cluster::DescribeClusterOutput {
            cluster_arn: self.cluster_arn,
            cluster_name: self.cluster_name,
            cluster_status: self.cluster_status,
            creation_time: self.creation_time,
            failure_message: self.failure_message,
            instance_groups: self.instance_groups,
            restricted_instance_groups: self.restricted_instance_groups,
            vpc_config: self.vpc_config,
            orchestrator: self.orchestrator,
            tiered_storage_config: self.tiered_storage_config,
            node_recovery: self.node_recovery,
            node_provisioning_mode: self.node_provisioning_mode,
            cluster_role: self.cluster_role,
            auto_scaling: self.auto_scaling,
            _request_id: self._request_id,
        }
    }
}
