// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeClusterEventInput {
    /// <p>The unique identifier (UUID) of the event to describe. This ID can be obtained from the <code>ListClusterEvents</code> operation.</p>
    pub event_id: ::std::option::Option<::std::string::String>,
    /// <p>The name or Amazon Resource Name (ARN) of the HyperPod cluster associated with the event.</p>
    pub cluster_name: ::std::option::Option<::std::string::String>,
}
impl DescribeClusterEventInput {
    /// <p>The unique identifier (UUID) of the event to describe. This ID can be obtained from the <code>ListClusterEvents</code> operation.</p>
    pub fn event_id(&self) -> ::std::option::Option<&str> {
        self.event_id.as_deref()
    }
    /// <p>The name or Amazon Resource Name (ARN) of the HyperPod cluster associated with the event.</p>
    pub fn cluster_name(&self) -> ::std::option::Option<&str> {
        self.cluster_name.as_deref()
    }
}
impl DescribeClusterEventInput {
    /// Creates a new builder-style object to manufacture [`DescribeClusterEventInput`](crate::operation::describe_cluster_event::DescribeClusterEventInput).
    pub fn builder() -> crate::operation::describe_cluster_event::builders::DescribeClusterEventInputBuilder {
        crate::operation::describe_cluster_event::builders::DescribeClusterEventInputBuilder::default()
    }
}

/// A builder for [`DescribeClusterEventInput`](crate::operation::describe_cluster_event::DescribeClusterEventInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DescribeClusterEventInputBuilder {
    pub(crate) event_id: ::std::option::Option<::std::string::String>,
    pub(crate) cluster_name: ::std::option::Option<::std::string::String>,
}
impl DescribeClusterEventInputBuilder {
    /// <p>The unique identifier (UUID) of the event to describe. This ID can be obtained from the <code>ListClusterEvents</code> operation.</p>
    /// This field is required.
    pub fn event_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.event_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier (UUID) of the event to describe. This ID can be obtained from the <code>ListClusterEvents</code> operation.</p>
    pub fn set_event_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.event_id = input;
        self
    }
    /// <p>The unique identifier (UUID) of the event to describe. This ID can be obtained from the <code>ListClusterEvents</code> operation.</p>
    pub fn get_event_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.event_id
    }
    /// <p>The name or Amazon Resource Name (ARN) of the HyperPod cluster associated with the event.</p>
    /// This field is required.
    pub fn cluster_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cluster_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name or Amazon Resource Name (ARN) of the HyperPod cluster associated with the event.</p>
    pub fn set_cluster_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cluster_name = input;
        self
    }
    /// <p>The name or Amazon Resource Name (ARN) of the HyperPod cluster associated with the event.</p>
    pub fn get_cluster_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.cluster_name
    }
    /// Consumes the builder and constructs a [`DescribeClusterEventInput`](crate::operation::describe_cluster_event::DescribeClusterEventInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::describe_cluster_event::DescribeClusterEventInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::describe_cluster_event::DescribeClusterEventInput {
            event_id: self.event_id,
            cluster_name: self.cluster_name,
        })
    }
}
