// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListUltraServersByReservedCapacityInput {
    /// <p>The ARN of the reserved capacity to list UltraServers for.</p>
    pub reserved_capacity_arn: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of UltraServers to return in the response. The default value is 10.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>If the previous response was truncated, you receive this token. Use it in your next request to receive the next set of results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
}
impl ListUltraServersByReservedCapacityInput {
    /// <p>The ARN of the reserved capacity to list UltraServers for.</p>
    pub fn reserved_capacity_arn(&self) -> ::std::option::Option<&str> {
        self.reserved_capacity_arn.as_deref()
    }
    /// <p>The maximum number of UltraServers to return in the response. The default value is 10.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>If the previous response was truncated, you receive this token. Use it in your next request to receive the next set of results.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ListUltraServersByReservedCapacityInput {
    /// Creates a new builder-style object to manufacture [`ListUltraServersByReservedCapacityInput`](crate::operation::list_ultra_servers_by_reserved_capacity::ListUltraServersByReservedCapacityInput).
    pub fn builder() -> crate::operation::list_ultra_servers_by_reserved_capacity::builders::ListUltraServersByReservedCapacityInputBuilder {
        crate::operation::list_ultra_servers_by_reserved_capacity::builders::ListUltraServersByReservedCapacityInputBuilder::default()
    }
}

/// A builder for [`ListUltraServersByReservedCapacityInput`](crate::operation::list_ultra_servers_by_reserved_capacity::ListUltraServersByReservedCapacityInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListUltraServersByReservedCapacityInputBuilder {
    pub(crate) reserved_capacity_arn: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
}
impl ListUltraServersByReservedCapacityInputBuilder {
    /// <p>The ARN of the reserved capacity to list UltraServers for.</p>
    /// This field is required.
    pub fn reserved_capacity_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.reserved_capacity_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the reserved capacity to list UltraServers for.</p>
    pub fn set_reserved_capacity_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.reserved_capacity_arn = input;
        self
    }
    /// <p>The ARN of the reserved capacity to list UltraServers for.</p>
    pub fn get_reserved_capacity_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.reserved_capacity_arn
    }
    /// <p>The maximum number of UltraServers to return in the response. The default value is 10.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of UltraServers to return in the response. The default value is 10.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of UltraServers to return in the response. The default value is 10.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>If the previous response was truncated, you receive this token. Use it in your next request to receive the next set of results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If the previous response was truncated, you receive this token. Use it in your next request to receive the next set of results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>If the previous response was truncated, you receive this token. Use it in your next request to receive the next set of results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Consumes the builder and constructs a [`ListUltraServersByReservedCapacityInput`](crate::operation::list_ultra_servers_by_reserved_capacity::ListUltraServersByReservedCapacityInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_ultra_servers_by_reserved_capacity::ListUltraServersByReservedCapacityInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::list_ultra_servers_by_reserved_capacity::ListUltraServersByReservedCapacityInput {
                reserved_capacity_arn: self.reserved_capacity_arn,
                max_results: self.max_results,
                next_token: self.next_token,
            },
        )
    }
}
