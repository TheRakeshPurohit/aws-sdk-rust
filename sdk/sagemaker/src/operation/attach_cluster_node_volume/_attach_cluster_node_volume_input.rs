// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AttachClusterNodeVolumeInput {
    /// <p>The Amazon Resource Name (ARN) of your SageMaker HyperPod cluster containing the target node. Your cluster must use EKS as the orchestration and be in the <code>InService</code> state.</p>
    pub cluster_arn: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of the cluster node to which you want to attach the volume. The node must belong to your specified HyperPod cluster and cannot be part of a Restricted Instance Group (RIG).</p>
    pub node_id: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of your EBS volume to attach. The volume must be in the <code>available</code> state.</p>
    pub volume_id: ::std::option::Option<::std::string::String>,
}
impl AttachClusterNodeVolumeInput {
    /// <p>The Amazon Resource Name (ARN) of your SageMaker HyperPod cluster containing the target node. Your cluster must use EKS as the orchestration and be in the <code>InService</code> state.</p>
    pub fn cluster_arn(&self) -> ::std::option::Option<&str> {
        self.cluster_arn.as_deref()
    }
    /// <p>The unique identifier of the cluster node to which you want to attach the volume. The node must belong to your specified HyperPod cluster and cannot be part of a Restricted Instance Group (RIG).</p>
    pub fn node_id(&self) -> ::std::option::Option<&str> {
        self.node_id.as_deref()
    }
    /// <p>The unique identifier of your EBS volume to attach. The volume must be in the <code>available</code> state.</p>
    pub fn volume_id(&self) -> ::std::option::Option<&str> {
        self.volume_id.as_deref()
    }
}
impl AttachClusterNodeVolumeInput {
    /// Creates a new builder-style object to manufacture [`AttachClusterNodeVolumeInput`](crate::operation::attach_cluster_node_volume::AttachClusterNodeVolumeInput).
    pub fn builder() -> crate::operation::attach_cluster_node_volume::builders::AttachClusterNodeVolumeInputBuilder {
        crate::operation::attach_cluster_node_volume::builders::AttachClusterNodeVolumeInputBuilder::default()
    }
}

/// A builder for [`AttachClusterNodeVolumeInput`](crate::operation::attach_cluster_node_volume::AttachClusterNodeVolumeInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AttachClusterNodeVolumeInputBuilder {
    pub(crate) cluster_arn: ::std::option::Option<::std::string::String>,
    pub(crate) node_id: ::std::option::Option<::std::string::String>,
    pub(crate) volume_id: ::std::option::Option<::std::string::String>,
}
impl AttachClusterNodeVolumeInputBuilder {
    /// <p>The Amazon Resource Name (ARN) of your SageMaker HyperPod cluster containing the target node. Your cluster must use EKS as the orchestration and be in the <code>InService</code> state.</p>
    /// This field is required.
    pub fn cluster_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cluster_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of your SageMaker HyperPod cluster containing the target node. Your cluster must use EKS as the orchestration and be in the <code>InService</code> state.</p>
    pub fn set_cluster_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cluster_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of your SageMaker HyperPod cluster containing the target node. Your cluster must use EKS as the orchestration and be in the <code>InService</code> state.</p>
    pub fn get_cluster_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.cluster_arn
    }
    /// <p>The unique identifier of the cluster node to which you want to attach the volume. The node must belong to your specified HyperPod cluster and cannot be part of a Restricted Instance Group (RIG).</p>
    /// This field is required.
    pub fn node_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.node_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the cluster node to which you want to attach the volume. The node must belong to your specified HyperPod cluster and cannot be part of a Restricted Instance Group (RIG).</p>
    pub fn set_node_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.node_id = input;
        self
    }
    /// <p>The unique identifier of the cluster node to which you want to attach the volume. The node must belong to your specified HyperPod cluster and cannot be part of a Restricted Instance Group (RIG).</p>
    pub fn get_node_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.node_id
    }
    /// <p>The unique identifier of your EBS volume to attach. The volume must be in the <code>available</code> state.</p>
    /// This field is required.
    pub fn volume_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.volume_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of your EBS volume to attach. The volume must be in the <code>available</code> state.</p>
    pub fn set_volume_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.volume_id = input;
        self
    }
    /// <p>The unique identifier of your EBS volume to attach. The volume must be in the <code>available</code> state.</p>
    pub fn get_volume_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.volume_id
    }
    /// Consumes the builder and constructs a [`AttachClusterNodeVolumeInput`](crate::operation::attach_cluster_node_volume::AttachClusterNodeVolumeInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::attach_cluster_node_volume::AttachClusterNodeVolumeInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::attach_cluster_node_volume::AttachClusterNodeVolumeInput {
            cluster_arn: self.cluster_arn,
            node_id: self.node_id,
            volume_id: self.volume_id,
        })
    }
}
