// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AttachClusterNodeVolumeOutput {
    /// <p>The Amazon Resource Name (ARN) of your SageMaker HyperPod cluster where the volume attachment operation was performed.</p>
    pub cluster_arn: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of the cluster node where your volume was attached.</p>
    pub node_id: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of your EBS volume that was attached.</p>
    pub volume_id: ::std::option::Option<::std::string::String>,
    /// <p>The timestamp when the volume attachment operation was initiated by the SageMaker HyperPod service.</p>
    pub attach_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The current status of your volume attachment operation.</p>
    pub status: ::std::option::Option<crate::types::VolumeAttachmentStatus>,
    /// <p>The device name assigned to your attached volume on the target instance.</p>
    pub device_name: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl AttachClusterNodeVolumeOutput {
    /// <p>The Amazon Resource Name (ARN) of your SageMaker HyperPod cluster where the volume attachment operation was performed.</p>
    pub fn cluster_arn(&self) -> ::std::option::Option<&str> {
        self.cluster_arn.as_deref()
    }
    /// <p>The unique identifier of the cluster node where your volume was attached.</p>
    pub fn node_id(&self) -> ::std::option::Option<&str> {
        self.node_id.as_deref()
    }
    /// <p>The unique identifier of your EBS volume that was attached.</p>
    pub fn volume_id(&self) -> ::std::option::Option<&str> {
        self.volume_id.as_deref()
    }
    /// <p>The timestamp when the volume attachment operation was initiated by the SageMaker HyperPod service.</p>
    pub fn attach_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.attach_time.as_ref()
    }
    /// <p>The current status of your volume attachment operation.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::VolumeAttachmentStatus> {
        self.status.as_ref()
    }
    /// <p>The device name assigned to your attached volume on the target instance.</p>
    pub fn device_name(&self) -> ::std::option::Option<&str> {
        self.device_name.as_deref()
    }
}
impl ::aws_types::request_id::RequestId for AttachClusterNodeVolumeOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl AttachClusterNodeVolumeOutput {
    /// Creates a new builder-style object to manufacture [`AttachClusterNodeVolumeOutput`](crate::operation::attach_cluster_node_volume::AttachClusterNodeVolumeOutput).
    pub fn builder() -> crate::operation::attach_cluster_node_volume::builders::AttachClusterNodeVolumeOutputBuilder {
        crate::operation::attach_cluster_node_volume::builders::AttachClusterNodeVolumeOutputBuilder::default()
    }
}

/// A builder for [`AttachClusterNodeVolumeOutput`](crate::operation::attach_cluster_node_volume::AttachClusterNodeVolumeOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AttachClusterNodeVolumeOutputBuilder {
    pub(crate) cluster_arn: ::std::option::Option<::std::string::String>,
    pub(crate) node_id: ::std::option::Option<::std::string::String>,
    pub(crate) volume_id: ::std::option::Option<::std::string::String>,
    pub(crate) attach_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) status: ::std::option::Option<crate::types::VolumeAttachmentStatus>,
    pub(crate) device_name: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl AttachClusterNodeVolumeOutputBuilder {
    /// <p>The Amazon Resource Name (ARN) of your SageMaker HyperPod cluster where the volume attachment operation was performed.</p>
    /// This field is required.
    pub fn cluster_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cluster_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of your SageMaker HyperPod cluster where the volume attachment operation was performed.</p>
    pub fn set_cluster_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cluster_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of your SageMaker HyperPod cluster where the volume attachment operation was performed.</p>
    pub fn get_cluster_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.cluster_arn
    }
    /// <p>The unique identifier of the cluster node where your volume was attached.</p>
    /// This field is required.
    pub fn node_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.node_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the cluster node where your volume was attached.</p>
    pub fn set_node_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.node_id = input;
        self
    }
    /// <p>The unique identifier of the cluster node where your volume was attached.</p>
    pub fn get_node_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.node_id
    }
    /// <p>The unique identifier of your EBS volume that was attached.</p>
    /// This field is required.
    pub fn volume_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.volume_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of your EBS volume that was attached.</p>
    pub fn set_volume_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.volume_id = input;
        self
    }
    /// <p>The unique identifier of your EBS volume that was attached.</p>
    pub fn get_volume_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.volume_id
    }
    /// <p>The timestamp when the volume attachment operation was initiated by the SageMaker HyperPod service.</p>
    /// This field is required.
    pub fn attach_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.attach_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the volume attachment operation was initiated by the SageMaker HyperPod service.</p>
    pub fn set_attach_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.attach_time = input;
        self
    }
    /// <p>The timestamp when the volume attachment operation was initiated by the SageMaker HyperPod service.</p>
    pub fn get_attach_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.attach_time
    }
    /// <p>The current status of your volume attachment operation.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::VolumeAttachmentStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of your volume attachment operation.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::VolumeAttachmentStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status of your volume attachment operation.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::VolumeAttachmentStatus> {
        &self.status
    }
    /// <p>The device name assigned to your attached volume on the target instance.</p>
    /// This field is required.
    pub fn device_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.device_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The device name assigned to your attached volume on the target instance.</p>
    pub fn set_device_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.device_name = input;
        self
    }
    /// <p>The device name assigned to your attached volume on the target instance.</p>
    pub fn get_device_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.device_name
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`AttachClusterNodeVolumeOutput`](crate::operation::attach_cluster_node_volume::AttachClusterNodeVolumeOutput).
    pub fn build(self) -> crate::operation::attach_cluster_node_volume::AttachClusterNodeVolumeOutput {
        crate::operation::attach_cluster_node_volume::AttachClusterNodeVolumeOutput {
            cluster_arn: self.cluster_arn,
            node_id: self.node_id,
            volume_id: self.volume_id,
            attach_time: self.attach_time,
            status: self.status,
            device_name: self.device_name,
            _request_id: self._request_id,
        }
    }
}
