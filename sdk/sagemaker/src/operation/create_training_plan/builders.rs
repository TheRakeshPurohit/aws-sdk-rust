// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_training_plan::_create_training_plan_output::CreateTrainingPlanOutputBuilder;

pub use crate::operation::create_training_plan::_create_training_plan_input::CreateTrainingPlanInputBuilder;

impl crate::operation::create_training_plan::builders::CreateTrainingPlanInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_training_plan::CreateTrainingPlanOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_training_plan::CreateTrainingPlanError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_training_plan();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateTrainingPlan`.
///
/// <p>Creates a new training plan in SageMaker to reserve compute capacity.</p>
/// <p>Amazon SageMaker Training Plan is a capability within SageMaker that allows customers to reserve and manage GPU capacity for large-scale AI model training. It provides a way to secure predictable access to computational resources within specific timelines and budgets, without the need to manage underlying infrastructure.</p>
/// <p><b>How it works</b></p>
/// <p>Plans can be created for specific resources such as SageMaker Training Jobs or SageMaker HyperPod clusters, automatically provisioning resources, setting up infrastructure, executing workloads, and handling infrastructure failures.</p>
/// <p><b>Plan creation workflow</b></p>
/// <ul>
/// <li>
/// <p>Users search for available plan offerings based on their requirements (e.g., instance type, count, start time, duration) using the <code> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_SearchTrainingPlanOfferings.html">SearchTrainingPlanOfferings</a> </code> API operation.</p></li>
/// <li>
/// <p>They create a plan that best matches their needs using the ID of the plan offering they want to use.</p></li>
/// <li>
/// <p>After successful upfront payment, the plan's status becomes <code>Scheduled</code>.</p></li>
/// <li>
/// <p>The plan can be used to:</p>
/// <ul>
/// <li>
/// <p>Queue training jobs.</p></li>
/// <li>
/// <p>Allocate to an instance group of a SageMaker HyperPod cluster.</p></li>
/// </ul></li>
/// <li>
/// <p>When the plan start date arrives, it becomes <code>Active</code>. Based on available reserved capacity:</p>
/// <ul>
/// <li>
/// <p>Training jobs are launched.</p></li>
/// <li>
/// <p>Instance groups are provisioned.</p></li>
/// </ul></li>
/// </ul>
/// <p><b>Plan composition</b></p>
/// <p>A plan can consist of one or more Reserved Capacities, each defined by a specific instance type, quantity, Availability Zone, duration, and start and end times. For more information about Reserved Capacity, see <code> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ReservedCapacitySummary.html">ReservedCapacitySummary</a> </code>.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateTrainingPlanFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_training_plan::builders::CreateTrainingPlanInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_training_plan::CreateTrainingPlanOutput,
        crate::operation::create_training_plan::CreateTrainingPlanError,
    > for CreateTrainingPlanFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_training_plan::CreateTrainingPlanOutput,
            crate::operation::create_training_plan::CreateTrainingPlanError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreateTrainingPlanFluentBuilder {
    /// Creates a new `CreateTrainingPlanFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateTrainingPlan as a reference.
    pub fn as_input(&self) -> &crate::operation::create_training_plan::builders::CreateTrainingPlanInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_training_plan::CreateTrainingPlanOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_training_plan::CreateTrainingPlanError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_training_plan::CreateTrainingPlan::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_training_plan::CreateTrainingPlan::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_training_plan::CreateTrainingPlanOutput,
        crate::operation::create_training_plan::CreateTrainingPlanError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The name of the training plan to create.</p>
    pub fn training_plan_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.training_plan_name(input.into());
        self
    }
    /// <p>The name of the training plan to create.</p>
    pub fn set_training_plan_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_training_plan_name(input);
        self
    }
    /// <p>The name of the training plan to create.</p>
    pub fn get_training_plan_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_training_plan_name()
    }
    /// <p>The unique identifier of the training plan offering to use for creating this plan.</p>
    pub fn training_plan_offering_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.training_plan_offering_id(input.into());
        self
    }
    /// <p>The unique identifier of the training plan offering to use for creating this plan.</p>
    pub fn set_training_plan_offering_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_training_plan_offering_id(input);
        self
    }
    /// <p>The unique identifier of the training plan offering to use for creating this plan.</p>
    pub fn get_training_plan_offering_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_training_plan_offering_id()
    }
    /// <p>Number of spare instances to reserve per UltraServer for enhanced resiliency. Default is 1.</p>
    pub fn spare_instance_count_per_ultra_server(mut self, input: i32) -> Self {
        self.inner = self.inner.spare_instance_count_per_ultra_server(input);
        self
    }
    /// <p>Number of spare instances to reserve per UltraServer for enhanced resiliency. Default is 1.</p>
    pub fn set_spare_instance_count_per_ultra_server(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_spare_instance_count_per_ultra_server(input);
        self
    }
    /// <p>Number of spare instances to reserve per UltraServer for enhanced resiliency. Default is 1.</p>
    pub fn get_spare_instance_count_per_ultra_server(&self) -> &::std::option::Option<i32> {
        self.inner.get_spare_instance_count_per_ultra_server()
    }
    ///
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>An array of key-value pairs to apply to this training plan.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>An array of key-value pairs to apply to this training plan.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>An array of key-value pairs to apply to this training plan.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        self.inner.get_tags()
    }
}
