// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeReservedCapacityOutput {
    /// <p>ARN of the reserved capacity.</p>
    pub reserved_capacity_arn: ::std::option::Option<::std::string::String>,
    /// <p>The type of reserved capacity.</p>
    pub reserved_capacity_type: ::std::option::Option<crate::types::ReservedCapacityType>,
    /// <p>The current status of the reserved capacity.</p>
    pub status: ::std::option::Option<crate::types::ReservedCapacityStatus>,
    /// <p>The Availability Zone where the reserved capacity is provisioned.</p>
    pub availability_zone: ::std::option::Option<::std::string::String>,
    /// <p>The total duration of the reserved capacity in hours.</p>
    pub duration_hours: ::std::option::Option<i64>,
    /// <p>The number of minutes for the duration of the reserved capacity. For example, if a reserved capacity starts at 08:55 and ends at 11:30, the minutes field would be 35.</p>
    pub duration_minutes: ::std::option::Option<i64>,
    /// <p>The timestamp when the reserved capacity becomes active.</p>
    pub start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The timestamp when the reserved capacity expires.</p>
    pub end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The Amazon EC2 instance type used in the reserved capacity.</p>
    pub instance_type: ::std::option::Option<crate::types::ReservedCapacityInstanceType>,
    /// <p>The total number of instances allocated to this reserved capacity.</p>
    pub total_instance_count: ::std::option::Option<i32>,
    /// <p>The number of instances currently available for use in this reserved capacity.</p>
    pub available_instance_count: ::std::option::Option<i32>,
    /// <p>The number of instances currently in use from this reserved capacity.</p>
    pub in_use_instance_count: ::std::option::Option<i32>,
    /// <p>A summary of the UltraServer associated with this reserved capacity.</p>
    pub ultra_server_summary: ::std::option::Option<crate::types::UltraServerSummary>,
    _request_id: Option<String>,
}
impl DescribeReservedCapacityOutput {
    /// <p>ARN of the reserved capacity.</p>
    pub fn reserved_capacity_arn(&self) -> ::std::option::Option<&str> {
        self.reserved_capacity_arn.as_deref()
    }
    /// <p>The type of reserved capacity.</p>
    pub fn reserved_capacity_type(&self) -> ::std::option::Option<&crate::types::ReservedCapacityType> {
        self.reserved_capacity_type.as_ref()
    }
    /// <p>The current status of the reserved capacity.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::ReservedCapacityStatus> {
        self.status.as_ref()
    }
    /// <p>The Availability Zone where the reserved capacity is provisioned.</p>
    pub fn availability_zone(&self) -> ::std::option::Option<&str> {
        self.availability_zone.as_deref()
    }
    /// <p>The total duration of the reserved capacity in hours.</p>
    pub fn duration_hours(&self) -> ::std::option::Option<i64> {
        self.duration_hours
    }
    /// <p>The number of minutes for the duration of the reserved capacity. For example, if a reserved capacity starts at 08:55 and ends at 11:30, the minutes field would be 35.</p>
    pub fn duration_minutes(&self) -> ::std::option::Option<i64> {
        self.duration_minutes
    }
    /// <p>The timestamp when the reserved capacity becomes active.</p>
    pub fn start_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p>The timestamp when the reserved capacity expires.</p>
    pub fn end_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.end_time.as_ref()
    }
    /// <p>The Amazon EC2 instance type used in the reserved capacity.</p>
    pub fn instance_type(&self) -> ::std::option::Option<&crate::types::ReservedCapacityInstanceType> {
        self.instance_type.as_ref()
    }
    /// <p>The total number of instances allocated to this reserved capacity.</p>
    pub fn total_instance_count(&self) -> ::std::option::Option<i32> {
        self.total_instance_count
    }
    /// <p>The number of instances currently available for use in this reserved capacity.</p>
    pub fn available_instance_count(&self) -> ::std::option::Option<i32> {
        self.available_instance_count
    }
    /// <p>The number of instances currently in use from this reserved capacity.</p>
    pub fn in_use_instance_count(&self) -> ::std::option::Option<i32> {
        self.in_use_instance_count
    }
    /// <p>A summary of the UltraServer associated with this reserved capacity.</p>
    pub fn ultra_server_summary(&self) -> ::std::option::Option<&crate::types::UltraServerSummary> {
        self.ultra_server_summary.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for DescribeReservedCapacityOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeReservedCapacityOutput {
    /// Creates a new builder-style object to manufacture [`DescribeReservedCapacityOutput`](crate::operation::describe_reserved_capacity::DescribeReservedCapacityOutput).
    pub fn builder() -> crate::operation::describe_reserved_capacity::builders::DescribeReservedCapacityOutputBuilder {
        crate::operation::describe_reserved_capacity::builders::DescribeReservedCapacityOutputBuilder::default()
    }
}

/// A builder for [`DescribeReservedCapacityOutput`](crate::operation::describe_reserved_capacity::DescribeReservedCapacityOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DescribeReservedCapacityOutputBuilder {
    pub(crate) reserved_capacity_arn: ::std::option::Option<::std::string::String>,
    pub(crate) reserved_capacity_type: ::std::option::Option<crate::types::ReservedCapacityType>,
    pub(crate) status: ::std::option::Option<crate::types::ReservedCapacityStatus>,
    pub(crate) availability_zone: ::std::option::Option<::std::string::String>,
    pub(crate) duration_hours: ::std::option::Option<i64>,
    pub(crate) duration_minutes: ::std::option::Option<i64>,
    pub(crate) start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) instance_type: ::std::option::Option<crate::types::ReservedCapacityInstanceType>,
    pub(crate) total_instance_count: ::std::option::Option<i32>,
    pub(crate) available_instance_count: ::std::option::Option<i32>,
    pub(crate) in_use_instance_count: ::std::option::Option<i32>,
    pub(crate) ultra_server_summary: ::std::option::Option<crate::types::UltraServerSummary>,
    _request_id: Option<String>,
}
impl DescribeReservedCapacityOutputBuilder {
    /// <p>ARN of the reserved capacity.</p>
    /// This field is required.
    pub fn reserved_capacity_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.reserved_capacity_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>ARN of the reserved capacity.</p>
    pub fn set_reserved_capacity_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.reserved_capacity_arn = input;
        self
    }
    /// <p>ARN of the reserved capacity.</p>
    pub fn get_reserved_capacity_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.reserved_capacity_arn
    }
    /// <p>The type of reserved capacity.</p>
    pub fn reserved_capacity_type(mut self, input: crate::types::ReservedCapacityType) -> Self {
        self.reserved_capacity_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of reserved capacity.</p>
    pub fn set_reserved_capacity_type(mut self, input: ::std::option::Option<crate::types::ReservedCapacityType>) -> Self {
        self.reserved_capacity_type = input;
        self
    }
    /// <p>The type of reserved capacity.</p>
    pub fn get_reserved_capacity_type(&self) -> &::std::option::Option<crate::types::ReservedCapacityType> {
        &self.reserved_capacity_type
    }
    /// <p>The current status of the reserved capacity.</p>
    pub fn status(mut self, input: crate::types::ReservedCapacityStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the reserved capacity.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ReservedCapacityStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status of the reserved capacity.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ReservedCapacityStatus> {
        &self.status
    }
    /// <p>The Availability Zone where the reserved capacity is provisioned.</p>
    pub fn availability_zone(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.availability_zone = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Availability Zone where the reserved capacity is provisioned.</p>
    pub fn set_availability_zone(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.availability_zone = input;
        self
    }
    /// <p>The Availability Zone where the reserved capacity is provisioned.</p>
    pub fn get_availability_zone(&self) -> &::std::option::Option<::std::string::String> {
        &self.availability_zone
    }
    /// <p>The total duration of the reserved capacity in hours.</p>
    pub fn duration_hours(mut self, input: i64) -> Self {
        self.duration_hours = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total duration of the reserved capacity in hours.</p>
    pub fn set_duration_hours(mut self, input: ::std::option::Option<i64>) -> Self {
        self.duration_hours = input;
        self
    }
    /// <p>The total duration of the reserved capacity in hours.</p>
    pub fn get_duration_hours(&self) -> &::std::option::Option<i64> {
        &self.duration_hours
    }
    /// <p>The number of minutes for the duration of the reserved capacity. For example, if a reserved capacity starts at 08:55 and ends at 11:30, the minutes field would be 35.</p>
    pub fn duration_minutes(mut self, input: i64) -> Self {
        self.duration_minutes = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of minutes for the duration of the reserved capacity. For example, if a reserved capacity starts at 08:55 and ends at 11:30, the minutes field would be 35.</p>
    pub fn set_duration_minutes(mut self, input: ::std::option::Option<i64>) -> Self {
        self.duration_minutes = input;
        self
    }
    /// <p>The number of minutes for the duration of the reserved capacity. For example, if a reserved capacity starts at 08:55 and ends at 11:30, the minutes field would be 35.</p>
    pub fn get_duration_minutes(&self) -> &::std::option::Option<i64> {
        &self.duration_minutes
    }
    /// <p>The timestamp when the reserved capacity becomes active.</p>
    pub fn start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the reserved capacity becomes active.</p>
    pub fn set_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_time = input;
        self
    }
    /// <p>The timestamp when the reserved capacity becomes active.</p>
    pub fn get_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_time
    }
    /// <p>The timestamp when the reserved capacity expires.</p>
    pub fn end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.end_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the reserved capacity expires.</p>
    pub fn set_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.end_time = input;
        self
    }
    /// <p>The timestamp when the reserved capacity expires.</p>
    pub fn get_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.end_time
    }
    /// <p>The Amazon EC2 instance type used in the reserved capacity.</p>
    /// This field is required.
    pub fn instance_type(mut self, input: crate::types::ReservedCapacityInstanceType) -> Self {
        self.instance_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Amazon EC2 instance type used in the reserved capacity.</p>
    pub fn set_instance_type(mut self, input: ::std::option::Option<crate::types::ReservedCapacityInstanceType>) -> Self {
        self.instance_type = input;
        self
    }
    /// <p>The Amazon EC2 instance type used in the reserved capacity.</p>
    pub fn get_instance_type(&self) -> &::std::option::Option<crate::types::ReservedCapacityInstanceType> {
        &self.instance_type
    }
    /// <p>The total number of instances allocated to this reserved capacity.</p>
    /// This field is required.
    pub fn total_instance_count(mut self, input: i32) -> Self {
        self.total_instance_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total number of instances allocated to this reserved capacity.</p>
    pub fn set_total_instance_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.total_instance_count = input;
        self
    }
    /// <p>The total number of instances allocated to this reserved capacity.</p>
    pub fn get_total_instance_count(&self) -> &::std::option::Option<i32> {
        &self.total_instance_count
    }
    /// <p>The number of instances currently available for use in this reserved capacity.</p>
    pub fn available_instance_count(mut self, input: i32) -> Self {
        self.available_instance_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of instances currently available for use in this reserved capacity.</p>
    pub fn set_available_instance_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.available_instance_count = input;
        self
    }
    /// <p>The number of instances currently available for use in this reserved capacity.</p>
    pub fn get_available_instance_count(&self) -> &::std::option::Option<i32> {
        &self.available_instance_count
    }
    /// <p>The number of instances currently in use from this reserved capacity.</p>
    pub fn in_use_instance_count(mut self, input: i32) -> Self {
        self.in_use_instance_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of instances currently in use from this reserved capacity.</p>
    pub fn set_in_use_instance_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.in_use_instance_count = input;
        self
    }
    /// <p>The number of instances currently in use from this reserved capacity.</p>
    pub fn get_in_use_instance_count(&self) -> &::std::option::Option<i32> {
        &self.in_use_instance_count
    }
    /// <p>A summary of the UltraServer associated with this reserved capacity.</p>
    pub fn ultra_server_summary(mut self, input: crate::types::UltraServerSummary) -> Self {
        self.ultra_server_summary = ::std::option::Option::Some(input);
        self
    }
    /// <p>A summary of the UltraServer associated with this reserved capacity.</p>
    pub fn set_ultra_server_summary(mut self, input: ::std::option::Option<crate::types::UltraServerSummary>) -> Self {
        self.ultra_server_summary = input;
        self
    }
    /// <p>A summary of the UltraServer associated with this reserved capacity.</p>
    pub fn get_ultra_server_summary(&self) -> &::std::option::Option<crate::types::UltraServerSummary> {
        &self.ultra_server_summary
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeReservedCapacityOutput`](crate::operation::describe_reserved_capacity::DescribeReservedCapacityOutput).
    pub fn build(self) -> crate::operation::describe_reserved_capacity::DescribeReservedCapacityOutput {
        crate::operation::describe_reserved_capacity::DescribeReservedCapacityOutput {
            reserved_capacity_arn: self.reserved_capacity_arn,
            reserved_capacity_type: self.reserved_capacity_type,
            status: self.status,
            availability_zone: self.availability_zone,
            duration_hours: self.duration_hours,
            duration_minutes: self.duration_minutes,
            start_time: self.start_time,
            end_time: self.end_time,
            instance_type: self.instance_type,
            total_instance_count: self.total_instance_count,
            available_instance_count: self.available_instance_count,
            in_use_instance_count: self.in_use_instance_count,
            ultra_server_summary: self.ultra_server_summary,
            _request_id: self._request_id,
        }
    }
}
