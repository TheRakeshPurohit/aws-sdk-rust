// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::list_cluster_events::_list_cluster_events_output::ListClusterEventsOutputBuilder;

pub use crate::operation::list_cluster_events::_list_cluster_events_input::ListClusterEventsInputBuilder;

impl crate::operation::list_cluster_events::builders::ListClusterEventsInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::list_cluster_events::ListClusterEventsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_cluster_events::ListClusterEventsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.list_cluster_events();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `ListClusterEvents`.
///
/// <p>Retrieves a list of event summaries for a specified HyperPod cluster. The operation supports filtering, sorting, and pagination of results. This functionality is only supported when the <code>NodeProvisioningMode</code> is set to <code>Continuous</code>.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct ListClusterEventsFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::list_cluster_events::builders::ListClusterEventsInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::list_cluster_events::ListClusterEventsOutput,
        crate::operation::list_cluster_events::ListClusterEventsError,
    > for ListClusterEventsFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::list_cluster_events::ListClusterEventsOutput,
            crate::operation::list_cluster_events::ListClusterEventsError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl ListClusterEventsFluentBuilder {
    /// Creates a new `ListClusterEventsFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the ListClusterEvents as a reference.
    pub fn as_input(&self) -> &crate::operation::list_cluster_events::builders::ListClusterEventsInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_cluster_events::ListClusterEventsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_cluster_events::ListClusterEventsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::list_cluster_events::ListClusterEvents::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::list_cluster_events::ListClusterEvents::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::list_cluster_events::ListClusterEventsOutput,
        crate::operation::list_cluster_events::ListClusterEventsError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::list_cluster_events::paginator::ListClusterEventsPaginator::send) which returns a [`PaginationStream`](aws_smithy_async::future::pagination_stream::PaginationStream).
    pub fn into_paginator(self) -> crate::operation::list_cluster_events::paginator::ListClusterEventsPaginator {
        crate::operation::list_cluster_events::paginator::ListClusterEventsPaginator::new(self.handle, self.inner)
    }
    /// <p>The name or Amazon Resource Name (ARN) of the HyperPod cluster for which to list events.</p>
    pub fn cluster_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.cluster_name(input.into());
        self
    }
    /// <p>The name or Amazon Resource Name (ARN) of the HyperPod cluster for which to list events.</p>
    pub fn set_cluster_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_cluster_name(input);
        self
    }
    /// <p>The name or Amazon Resource Name (ARN) of the HyperPod cluster for which to list events.</p>
    pub fn get_cluster_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_cluster_name()
    }
    /// <p>The name of the instance group to filter events. If specified, only events related to this instance group are returned.</p>
    pub fn instance_group_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.instance_group_name(input.into());
        self
    }
    /// <p>The name of the instance group to filter events. If specified, only events related to this instance group are returned.</p>
    pub fn set_instance_group_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_instance_group_name(input);
        self
    }
    /// <p>The name of the instance group to filter events. If specified, only events related to this instance group are returned.</p>
    pub fn get_instance_group_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_instance_group_name()
    }
    /// <p>The EC2 instance ID to filter events. If specified, only events related to this instance are returned.</p>
    pub fn node_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.node_id(input.into());
        self
    }
    /// <p>The EC2 instance ID to filter events. If specified, only events related to this instance are returned.</p>
    pub fn set_node_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_node_id(input);
        self
    }
    /// <p>The EC2 instance ID to filter events. If specified, only events related to this instance are returned.</p>
    pub fn get_node_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_node_id()
    }
    /// <p>The start of the time range for filtering events. Only events that occurred after this time are included in the results.</p>
    pub fn event_time_after(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.event_time_after(input);
        self
    }
    /// <p>The start of the time range for filtering events. Only events that occurred after this time are included in the results.</p>
    pub fn set_event_time_after(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.inner = self.inner.set_event_time_after(input);
        self
    }
    /// <p>The start of the time range for filtering events. Only events that occurred after this time are included in the results.</p>
    pub fn get_event_time_after(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        self.inner.get_event_time_after()
    }
    /// <p>The end of the time range for filtering events. Only events that occurred before this time are included in the results.</p>
    pub fn event_time_before(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.event_time_before(input);
        self
    }
    /// <p>The end of the time range for filtering events. Only events that occurred before this time are included in the results.</p>
    pub fn set_event_time_before(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.inner = self.inner.set_event_time_before(input);
        self
    }
    /// <p>The end of the time range for filtering events. Only events that occurred before this time are included in the results.</p>
    pub fn get_event_time_before(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        self.inner.get_event_time_before()
    }
    /// <p>The field to use for sorting the event list. Currently, the only supported value is <code>EventTime</code>.</p>
    pub fn sort_by(mut self, input: crate::types::EventSortBy) -> Self {
        self.inner = self.inner.sort_by(input);
        self
    }
    /// <p>The field to use for sorting the event list. Currently, the only supported value is <code>EventTime</code>.</p>
    pub fn set_sort_by(mut self, input: ::std::option::Option<crate::types::EventSortBy>) -> Self {
        self.inner = self.inner.set_sort_by(input);
        self
    }
    /// <p>The field to use for sorting the event list. Currently, the only supported value is <code>EventTime</code>.</p>
    pub fn get_sort_by(&self) -> &::std::option::Option<crate::types::EventSortBy> {
        self.inner.get_sort_by()
    }
    /// <p>The order in which to sort the results. Valid values are <code>Ascending</code> or <code>Descending</code> (the default is <code>Descending</code>).</p>
    pub fn sort_order(mut self, input: crate::types::SortOrder) -> Self {
        self.inner = self.inner.sort_order(input);
        self
    }
    /// <p>The order in which to sort the results. Valid values are <code>Ascending</code> or <code>Descending</code> (the default is <code>Descending</code>).</p>
    pub fn set_sort_order(mut self, input: ::std::option::Option<crate::types::SortOrder>) -> Self {
        self.inner = self.inner.set_sort_order(input);
        self
    }
    /// <p>The order in which to sort the results. Valid values are <code>Ascending</code> or <code>Descending</code> (the default is <code>Descending</code>).</p>
    pub fn get_sort_order(&self) -> &::std::option::Option<crate::types::SortOrder> {
        self.inner.get_sort_order()
    }
    /// <p>The type of resource for which to filter events. Valid values are <code>Cluster</code>, <code>InstanceGroup</code>, or <code>Instance</code>.</p>
    pub fn resource_type(mut self, input: crate::types::ClusterEventResourceType) -> Self {
        self.inner = self.inner.resource_type(input);
        self
    }
    /// <p>The type of resource for which to filter events. Valid values are <code>Cluster</code>, <code>InstanceGroup</code>, or <code>Instance</code>.</p>
    pub fn set_resource_type(mut self, input: ::std::option::Option<crate::types::ClusterEventResourceType>) -> Self {
        self.inner = self.inner.set_resource_type(input);
        self
    }
    /// <p>The type of resource for which to filter events. Valid values are <code>Cluster</code>, <code>InstanceGroup</code>, or <code>Instance</code>.</p>
    pub fn get_resource_type(&self) -> &::std::option::Option<crate::types::ClusterEventResourceType> {
        self.inner.get_resource_type()
    }
    /// <p>The maximum number of events to return in the response. Valid range is 1 to 100.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of events to return in the response. Valid range is 1 to 100.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>The maximum number of events to return in the response. Valid range is 1 to 100.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        self.inner.get_max_results()
    }
    /// <p>A token to retrieve the next set of results. This token is obtained from the output of a previous <code>ListClusterEvents</code> call.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>A token to retrieve the next set of results. This token is obtained from the output of a previous <code>ListClusterEvents</code> call.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>A token to retrieve the next set of results. This token is obtained from the output of a previous <code>ListClusterEvents</code> call.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_next_token()
    }
}
