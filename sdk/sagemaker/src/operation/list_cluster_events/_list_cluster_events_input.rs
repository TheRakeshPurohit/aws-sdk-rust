// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListClusterEventsInput {
    /// <p>The name or Amazon Resource Name (ARN) of the HyperPod cluster for which to list events.</p>
    pub cluster_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the instance group to filter events. If specified, only events related to this instance group are returned.</p>
    pub instance_group_name: ::std::option::Option<::std::string::String>,
    /// <p>The EC2 instance ID to filter events. If specified, only events related to this instance are returned.</p>
    pub node_id: ::std::option::Option<::std::string::String>,
    /// <p>The start of the time range for filtering events. Only events that occurred after this time are included in the results.</p>
    pub event_time_after: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The end of the time range for filtering events. Only events that occurred before this time are included in the results.</p>
    pub event_time_before: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The field to use for sorting the event list. Currently, the only supported value is <code>EventTime</code>.</p>
    pub sort_by: ::std::option::Option<crate::types::EventSortBy>,
    /// <p>The order in which to sort the results. Valid values are <code>Ascending</code> or <code>Descending</code> (the default is <code>Descending</code>).</p>
    pub sort_order: ::std::option::Option<crate::types::SortOrder>,
    /// <p>The type of resource for which to filter events. Valid values are <code>Cluster</code>, <code>InstanceGroup</code>, or <code>Instance</code>.</p>
    pub resource_type: ::std::option::Option<crate::types::ClusterEventResourceType>,
    /// <p>The maximum number of events to return in the response. Valid range is 1 to 100.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>A token to retrieve the next set of results. This token is obtained from the output of a previous <code>ListClusterEvents</code> call.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
}
impl ListClusterEventsInput {
    /// <p>The name or Amazon Resource Name (ARN) of the HyperPod cluster for which to list events.</p>
    pub fn cluster_name(&self) -> ::std::option::Option<&str> {
        self.cluster_name.as_deref()
    }
    /// <p>The name of the instance group to filter events. If specified, only events related to this instance group are returned.</p>
    pub fn instance_group_name(&self) -> ::std::option::Option<&str> {
        self.instance_group_name.as_deref()
    }
    /// <p>The EC2 instance ID to filter events. If specified, only events related to this instance are returned.</p>
    pub fn node_id(&self) -> ::std::option::Option<&str> {
        self.node_id.as_deref()
    }
    /// <p>The start of the time range for filtering events. Only events that occurred after this time are included in the results.</p>
    pub fn event_time_after(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.event_time_after.as_ref()
    }
    /// <p>The end of the time range for filtering events. Only events that occurred before this time are included in the results.</p>
    pub fn event_time_before(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.event_time_before.as_ref()
    }
    /// <p>The field to use for sorting the event list. Currently, the only supported value is <code>EventTime</code>.</p>
    pub fn sort_by(&self) -> ::std::option::Option<&crate::types::EventSortBy> {
        self.sort_by.as_ref()
    }
    /// <p>The order in which to sort the results. Valid values are <code>Ascending</code> or <code>Descending</code> (the default is <code>Descending</code>).</p>
    pub fn sort_order(&self) -> ::std::option::Option<&crate::types::SortOrder> {
        self.sort_order.as_ref()
    }
    /// <p>The type of resource for which to filter events. Valid values are <code>Cluster</code>, <code>InstanceGroup</code>, or <code>Instance</code>.</p>
    pub fn resource_type(&self) -> ::std::option::Option<&crate::types::ClusterEventResourceType> {
        self.resource_type.as_ref()
    }
    /// <p>The maximum number of events to return in the response. Valid range is 1 to 100.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>A token to retrieve the next set of results. This token is obtained from the output of a previous <code>ListClusterEvents</code> call.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ListClusterEventsInput {
    /// Creates a new builder-style object to manufacture [`ListClusterEventsInput`](crate::operation::list_cluster_events::ListClusterEventsInput).
    pub fn builder() -> crate::operation::list_cluster_events::builders::ListClusterEventsInputBuilder {
        crate::operation::list_cluster_events::builders::ListClusterEventsInputBuilder::default()
    }
}

/// A builder for [`ListClusterEventsInput`](crate::operation::list_cluster_events::ListClusterEventsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListClusterEventsInputBuilder {
    pub(crate) cluster_name: ::std::option::Option<::std::string::String>,
    pub(crate) instance_group_name: ::std::option::Option<::std::string::String>,
    pub(crate) node_id: ::std::option::Option<::std::string::String>,
    pub(crate) event_time_after: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) event_time_before: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) sort_by: ::std::option::Option<crate::types::EventSortBy>,
    pub(crate) sort_order: ::std::option::Option<crate::types::SortOrder>,
    pub(crate) resource_type: ::std::option::Option<crate::types::ClusterEventResourceType>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
}
impl ListClusterEventsInputBuilder {
    /// <p>The name or Amazon Resource Name (ARN) of the HyperPod cluster for which to list events.</p>
    /// This field is required.
    pub fn cluster_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cluster_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name or Amazon Resource Name (ARN) of the HyperPod cluster for which to list events.</p>
    pub fn set_cluster_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cluster_name = input;
        self
    }
    /// <p>The name or Amazon Resource Name (ARN) of the HyperPod cluster for which to list events.</p>
    pub fn get_cluster_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.cluster_name
    }
    /// <p>The name of the instance group to filter events. If specified, only events related to this instance group are returned.</p>
    pub fn instance_group_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instance_group_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the instance group to filter events. If specified, only events related to this instance group are returned.</p>
    pub fn set_instance_group_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instance_group_name = input;
        self
    }
    /// <p>The name of the instance group to filter events. If specified, only events related to this instance group are returned.</p>
    pub fn get_instance_group_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.instance_group_name
    }
    /// <p>The EC2 instance ID to filter events. If specified, only events related to this instance are returned.</p>
    pub fn node_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.node_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The EC2 instance ID to filter events. If specified, only events related to this instance are returned.</p>
    pub fn set_node_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.node_id = input;
        self
    }
    /// <p>The EC2 instance ID to filter events. If specified, only events related to this instance are returned.</p>
    pub fn get_node_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.node_id
    }
    /// <p>The start of the time range for filtering events. Only events that occurred after this time are included in the results.</p>
    pub fn event_time_after(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.event_time_after = ::std::option::Option::Some(input);
        self
    }
    /// <p>The start of the time range for filtering events. Only events that occurred after this time are included in the results.</p>
    pub fn set_event_time_after(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.event_time_after = input;
        self
    }
    /// <p>The start of the time range for filtering events. Only events that occurred after this time are included in the results.</p>
    pub fn get_event_time_after(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.event_time_after
    }
    /// <p>The end of the time range for filtering events. Only events that occurred before this time are included in the results.</p>
    pub fn event_time_before(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.event_time_before = ::std::option::Option::Some(input);
        self
    }
    /// <p>The end of the time range for filtering events. Only events that occurred before this time are included in the results.</p>
    pub fn set_event_time_before(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.event_time_before = input;
        self
    }
    /// <p>The end of the time range for filtering events. Only events that occurred before this time are included in the results.</p>
    pub fn get_event_time_before(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.event_time_before
    }
    /// <p>The field to use for sorting the event list. Currently, the only supported value is <code>EventTime</code>.</p>
    pub fn sort_by(mut self, input: crate::types::EventSortBy) -> Self {
        self.sort_by = ::std::option::Option::Some(input);
        self
    }
    /// <p>The field to use for sorting the event list. Currently, the only supported value is <code>EventTime</code>.</p>
    pub fn set_sort_by(mut self, input: ::std::option::Option<crate::types::EventSortBy>) -> Self {
        self.sort_by = input;
        self
    }
    /// <p>The field to use for sorting the event list. Currently, the only supported value is <code>EventTime</code>.</p>
    pub fn get_sort_by(&self) -> &::std::option::Option<crate::types::EventSortBy> {
        &self.sort_by
    }
    /// <p>The order in which to sort the results. Valid values are <code>Ascending</code> or <code>Descending</code> (the default is <code>Descending</code>).</p>
    pub fn sort_order(mut self, input: crate::types::SortOrder) -> Self {
        self.sort_order = ::std::option::Option::Some(input);
        self
    }
    /// <p>The order in which to sort the results. Valid values are <code>Ascending</code> or <code>Descending</code> (the default is <code>Descending</code>).</p>
    pub fn set_sort_order(mut self, input: ::std::option::Option<crate::types::SortOrder>) -> Self {
        self.sort_order = input;
        self
    }
    /// <p>The order in which to sort the results. Valid values are <code>Ascending</code> or <code>Descending</code> (the default is <code>Descending</code>).</p>
    pub fn get_sort_order(&self) -> &::std::option::Option<crate::types::SortOrder> {
        &self.sort_order
    }
    /// <p>The type of resource for which to filter events. Valid values are <code>Cluster</code>, <code>InstanceGroup</code>, or <code>Instance</code>.</p>
    pub fn resource_type(mut self, input: crate::types::ClusterEventResourceType) -> Self {
        self.resource_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of resource for which to filter events. Valid values are <code>Cluster</code>, <code>InstanceGroup</code>, or <code>Instance</code>.</p>
    pub fn set_resource_type(mut self, input: ::std::option::Option<crate::types::ClusterEventResourceType>) -> Self {
        self.resource_type = input;
        self
    }
    /// <p>The type of resource for which to filter events. Valid values are <code>Cluster</code>, <code>InstanceGroup</code>, or <code>Instance</code>.</p>
    pub fn get_resource_type(&self) -> &::std::option::Option<crate::types::ClusterEventResourceType> {
        &self.resource_type
    }
    /// <p>The maximum number of events to return in the response. Valid range is 1 to 100.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of events to return in the response. Valid range is 1 to 100.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of events to return in the response. Valid range is 1 to 100.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>A token to retrieve the next set of results. This token is obtained from the output of a previous <code>ListClusterEvents</code> call.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A token to retrieve the next set of results. This token is obtained from the output of a previous <code>ListClusterEvents</code> call.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>A token to retrieve the next set of results. This token is obtained from the output of a previous <code>ListClusterEvents</code> call.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Consumes the builder and constructs a [`ListClusterEventsInput`](crate::operation::list_cluster_events::ListClusterEventsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_cluster_events::ListClusterEventsInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::list_cluster_events::ListClusterEventsInput {
            cluster_name: self.cluster_name,
            instance_group_name: self.instance_group_name,
            node_id: self.node_id,
            event_time_after: self.event_time_after,
            event_time_before: self.event_time_before,
            sort_by: self.sort_by,
            sort_order: self.sort_order,
            resource_type: self.resource_type,
            max_results: self.max_results,
            next_token: self.next_token,
        })
    }
}
