// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_cluster_software::_update_cluster_software_output::UpdateClusterSoftwareOutputBuilder;

pub use crate::operation::update_cluster_software::_update_cluster_software_input::UpdateClusterSoftwareInputBuilder;

impl crate::operation::update_cluster_software::builders::UpdateClusterSoftwareInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::update_cluster_software::UpdateClusterSoftwareOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_cluster_software::UpdateClusterSoftwareError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.update_cluster_software();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `UpdateClusterSoftware`.
///
/// <p>Updates the platform software of a SageMaker HyperPod cluster for security patching. To learn how to use this API, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-hyperpod-operate.html#sagemaker-hyperpod-operate-cli-command-update-cluster-software">Update the SageMaker HyperPod platform software of a cluster</a>.</p><important>
/// <p>The <code>UpgradeClusterSoftware</code> API call may impact your SageMaker HyperPod cluster uptime and availability. Plan accordingly to mitigate potential disruptions to your workloads.</p>
/// </important>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct UpdateClusterSoftwareFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_cluster_software::builders::UpdateClusterSoftwareInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::update_cluster_software::UpdateClusterSoftwareOutput,
        crate::operation::update_cluster_software::UpdateClusterSoftwareError,
    > for UpdateClusterSoftwareFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::update_cluster_software::UpdateClusterSoftwareOutput,
            crate::operation::update_cluster_software::UpdateClusterSoftwareError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl UpdateClusterSoftwareFluentBuilder {
    /// Creates a new `UpdateClusterSoftwareFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the UpdateClusterSoftware as a reference.
    pub fn as_input(&self) -> &crate::operation::update_cluster_software::builders::UpdateClusterSoftwareInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_cluster_software::UpdateClusterSoftwareOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_cluster_software::UpdateClusterSoftwareError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::update_cluster_software::UpdateClusterSoftware::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::update_cluster_software::UpdateClusterSoftware::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::update_cluster_software::UpdateClusterSoftwareOutput,
        crate::operation::update_cluster_software::UpdateClusterSoftwareError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>Specify the name or the Amazon Resource Name (ARN) of the SageMaker HyperPod cluster you want to update for security patching.</p>
    pub fn cluster_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.cluster_name(input.into());
        self
    }
    /// <p>Specify the name or the Amazon Resource Name (ARN) of the SageMaker HyperPod cluster you want to update for security patching.</p>
    pub fn set_cluster_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_cluster_name(input);
        self
    }
    /// <p>Specify the name or the Amazon Resource Name (ARN) of the SageMaker HyperPod cluster you want to update for security patching.</p>
    pub fn get_cluster_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_cluster_name()
    }
    ///
    /// Appends an item to `InstanceGroups`.
    ///
    /// To override the contents of this collection use [`set_instance_groups`](Self::set_instance_groups).
    ///
    /// <p>The array of instance groups for which to update AMI versions.</p>
    pub fn instance_groups(mut self, input: crate::types::UpdateClusterSoftwareInstanceGroupSpecification) -> Self {
        self.inner = self.inner.instance_groups(input);
        self
    }
    /// <p>The array of instance groups for which to update AMI versions.</p>
    pub fn set_instance_groups(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::UpdateClusterSoftwareInstanceGroupSpecification>>,
    ) -> Self {
        self.inner = self.inner.set_instance_groups(input);
        self
    }
    /// <p>The array of instance groups for which to update AMI versions.</p>
    pub fn get_instance_groups(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::UpdateClusterSoftwareInstanceGroupSpecification>> {
        self.inner.get_instance_groups()
    }
    /// <p>The configuration to use when updating the AMI versions.</p>
    pub fn deployment_config(mut self, input: crate::types::DeploymentConfiguration) -> Self {
        self.inner = self.inner.deployment_config(input);
        self
    }
    /// <p>The configuration to use when updating the AMI versions.</p>
    pub fn set_deployment_config(mut self, input: ::std::option::Option<crate::types::DeploymentConfiguration>) -> Self {
        self.inner = self.inner.set_deployment_config(input);
        self
    }
    /// <p>The configuration to use when updating the AMI versions.</p>
    pub fn get_deployment_config(&self) -> &::std::option::Option<crate::types::DeploymentConfiguration> {
        self.inner.get_deployment_config()
    }
    /// <p>When configuring your HyperPod cluster, you can specify an image ID using one of the following options:</p>
    /// <ul>
    /// <li>
    /// <p><code>HyperPodPublicAmiId</code>: Use a HyperPod public AMI</p></li>
    /// <li>
    /// <p><code>CustomAmiId</code>: Use your custom AMI</p></li>
    /// <li>
    /// <p><code>default</code>: Use the default latest system image</p></li>
    /// </ul>
    /// <p>If you choose to use a custom AMI (<code>CustomAmiId</code>), ensure it meets the following requirements:</p>
    /// <ul>
    /// <li>
    /// <p>Encryption: The custom AMI must be unencrypted.</p></li>
    /// <li>
    /// <p>Ownership: The custom AMI must be owned by the same Amazon Web Services account that is creating the HyperPod cluster.</p></li>
    /// <li>
    /// <p>Volume support: Only the primary AMI snapshot volume is supported; additional AMI volumes are not supported.</p></li>
    /// </ul>
    /// <p>When updating the instance group's AMI through the <code>UpdateClusterSoftware</code> operation, if an instance group uses a custom AMI, you must provide an <code>ImageId</code> or use the default as input. Note that if you don't specify an instance group in your <code>UpdateClusterSoftware</code> request, then all of the instance groups are patched with the specified image.</p>
    pub fn image_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.image_id(input.into());
        self
    }
    /// <p>When configuring your HyperPod cluster, you can specify an image ID using one of the following options:</p>
    /// <ul>
    /// <li>
    /// <p><code>HyperPodPublicAmiId</code>: Use a HyperPod public AMI</p></li>
    /// <li>
    /// <p><code>CustomAmiId</code>: Use your custom AMI</p></li>
    /// <li>
    /// <p><code>default</code>: Use the default latest system image</p></li>
    /// </ul>
    /// <p>If you choose to use a custom AMI (<code>CustomAmiId</code>), ensure it meets the following requirements:</p>
    /// <ul>
    /// <li>
    /// <p>Encryption: The custom AMI must be unencrypted.</p></li>
    /// <li>
    /// <p>Ownership: The custom AMI must be owned by the same Amazon Web Services account that is creating the HyperPod cluster.</p></li>
    /// <li>
    /// <p>Volume support: Only the primary AMI snapshot volume is supported; additional AMI volumes are not supported.</p></li>
    /// </ul>
    /// <p>When updating the instance group's AMI through the <code>UpdateClusterSoftware</code> operation, if an instance group uses a custom AMI, you must provide an <code>ImageId</code> or use the default as input. Note that if you don't specify an instance group in your <code>UpdateClusterSoftware</code> request, then all of the instance groups are patched with the specified image.</p>
    pub fn set_image_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_image_id(input);
        self
    }
    /// <p>When configuring your HyperPod cluster, you can specify an image ID using one of the following options:</p>
    /// <ul>
    /// <li>
    /// <p><code>HyperPodPublicAmiId</code>: Use a HyperPod public AMI</p></li>
    /// <li>
    /// <p><code>CustomAmiId</code>: Use your custom AMI</p></li>
    /// <li>
    /// <p><code>default</code>: Use the default latest system image</p></li>
    /// </ul>
    /// <p>If you choose to use a custom AMI (<code>CustomAmiId</code>), ensure it meets the following requirements:</p>
    /// <ul>
    /// <li>
    /// <p>Encryption: The custom AMI must be unencrypted.</p></li>
    /// <li>
    /// <p>Ownership: The custom AMI must be owned by the same Amazon Web Services account that is creating the HyperPod cluster.</p></li>
    /// <li>
    /// <p>Volume support: Only the primary AMI snapshot volume is supported; additional AMI volumes are not supported.</p></li>
    /// </ul>
    /// <p>When updating the instance group's AMI through the <code>UpdateClusterSoftware</code> operation, if an instance group uses a custom AMI, you must provide an <code>ImageId</code> or use the default as input. Note that if you don't specify an instance group in your <code>UpdateClusterSoftware</code> request, then all of the instance groups are patched with the specified image.</p>
    pub fn get_image_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_image_id()
    }
}
