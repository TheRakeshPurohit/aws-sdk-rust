// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::search_training_plan_offerings::_search_training_plan_offerings_output::SearchTrainingPlanOfferingsOutputBuilder;

pub use crate::operation::search_training_plan_offerings::_search_training_plan_offerings_input::SearchTrainingPlanOfferingsInputBuilder;

impl crate::operation::search_training_plan_offerings::builders::SearchTrainingPlanOfferingsInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::search_training_plan_offerings::SearchTrainingPlanOfferingsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::search_training_plan_offerings::SearchTrainingPlanOfferingsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.search_training_plan_offerings();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `SearchTrainingPlanOfferings`.
///
/// <p>Searches for available training plan offerings based on specified criteria.</p>
/// <ul>
/// <li>
/// <p>Users search for available plan offerings based on their requirements (e.g., instance type, count, start time, duration).</p></li>
/// <li>
/// <p>And then, they create a plan that best matches their needs using the ID of the plan offering they want to use.</p></li>
/// </ul>
/// <p>For more information about how to reserve GPU capacity for your SageMaker training jobs or SageMaker HyperPod clusters using Amazon SageMaker Training Plan , see <code> <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrainingPlan.html">CreateTrainingPlan</a> </code>.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct SearchTrainingPlanOfferingsFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::search_training_plan_offerings::builders::SearchTrainingPlanOfferingsInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::search_training_plan_offerings::SearchTrainingPlanOfferingsOutput,
        crate::operation::search_training_plan_offerings::SearchTrainingPlanOfferingsError,
    > for SearchTrainingPlanOfferingsFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::search_training_plan_offerings::SearchTrainingPlanOfferingsOutput,
            crate::operation::search_training_plan_offerings::SearchTrainingPlanOfferingsError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl SearchTrainingPlanOfferingsFluentBuilder {
    /// Creates a new `SearchTrainingPlanOfferingsFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the SearchTrainingPlanOfferings as a reference.
    pub fn as_input(&self) -> &crate::operation::search_training_plan_offerings::builders::SearchTrainingPlanOfferingsInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::search_training_plan_offerings::SearchTrainingPlanOfferingsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::search_training_plan_offerings::SearchTrainingPlanOfferingsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::search_training_plan_offerings::SearchTrainingPlanOfferings::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::search_training_plan_offerings::SearchTrainingPlanOfferings::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::search_training_plan_offerings::SearchTrainingPlanOfferingsOutput,
        crate::operation::search_training_plan_offerings::SearchTrainingPlanOfferingsError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The type of instance you want to search for in the available training plan offerings. This field allows you to filter the search results based on the specific compute resources you require for your SageMaker training jobs or SageMaker HyperPod clusters. When searching for training plan offerings, specifying the instance type helps you find Reserved Instances that match your computational needs.</p>
    pub fn instance_type(mut self, input: crate::types::ReservedCapacityInstanceType) -> Self {
        self.inner = self.inner.instance_type(input);
        self
    }
    /// <p>The type of instance you want to search for in the available training plan offerings. This field allows you to filter the search results based on the specific compute resources you require for your SageMaker training jobs or SageMaker HyperPod clusters. When searching for training plan offerings, specifying the instance type helps you find Reserved Instances that match your computational needs.</p>
    pub fn set_instance_type(mut self, input: ::std::option::Option<crate::types::ReservedCapacityInstanceType>) -> Self {
        self.inner = self.inner.set_instance_type(input);
        self
    }
    /// <p>The type of instance you want to search for in the available training plan offerings. This field allows you to filter the search results based on the specific compute resources you require for your SageMaker training jobs or SageMaker HyperPod clusters. When searching for training plan offerings, specifying the instance type helps you find Reserved Instances that match your computational needs.</p>
    pub fn get_instance_type(&self) -> &::std::option::Option<crate::types::ReservedCapacityInstanceType> {
        self.inner.get_instance_type()
    }
    /// <p>The number of instances you want to reserve in the training plan offerings. This allows you to specify the quantity of compute resources needed for your SageMaker training jobs or SageMaker HyperPod clusters, helping you find reserved capacity offerings that match your requirements.</p>
    pub fn instance_count(mut self, input: i32) -> Self {
        self.inner = self.inner.instance_count(input);
        self
    }
    /// <p>The number of instances you want to reserve in the training plan offerings. This allows you to specify the quantity of compute resources needed for your SageMaker training jobs or SageMaker HyperPod clusters, helping you find reserved capacity offerings that match your requirements.</p>
    pub fn set_instance_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_instance_count(input);
        self
    }
    /// <p>The number of instances you want to reserve in the training plan offerings. This allows you to specify the quantity of compute resources needed for your SageMaker training jobs or SageMaker HyperPod clusters, helping you find reserved capacity offerings that match your requirements.</p>
    pub fn get_instance_count(&self) -> &::std::option::Option<i32> {
        self.inner.get_instance_count()
    }
    /// <p>The type of UltraServer to search for, such as ml.u-p6e-gb200x72.</p>
    pub fn ultra_server_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.ultra_server_type(input.into());
        self
    }
    /// <p>The type of UltraServer to search for, such as ml.u-p6e-gb200x72.</p>
    pub fn set_ultra_server_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_ultra_server_type(input);
        self
    }
    /// <p>The type of UltraServer to search for, such as ml.u-p6e-gb200x72.</p>
    pub fn get_ultra_server_type(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_ultra_server_type()
    }
    /// <p>The number of UltraServers to search for.</p>
    pub fn ultra_server_count(mut self, input: i32) -> Self {
        self.inner = self.inner.ultra_server_count(input);
        self
    }
    /// <p>The number of UltraServers to search for.</p>
    pub fn set_ultra_server_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_ultra_server_count(input);
        self
    }
    /// <p>The number of UltraServers to search for.</p>
    pub fn get_ultra_server_count(&self) -> &::std::option::Option<i32> {
        self.inner.get_ultra_server_count()
    }
    /// <p>A filter to search for training plan offerings with a start time after a specified date.</p>
    pub fn start_time_after(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.start_time_after(input);
        self
    }
    /// <p>A filter to search for training plan offerings with a start time after a specified date.</p>
    pub fn set_start_time_after(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.inner = self.inner.set_start_time_after(input);
        self
    }
    /// <p>A filter to search for training plan offerings with a start time after a specified date.</p>
    pub fn get_start_time_after(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        self.inner.get_start_time_after()
    }
    /// <p>A filter to search for reserved capacity offerings with an end time before a specified date.</p>
    pub fn end_time_before(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.end_time_before(input);
        self
    }
    /// <p>A filter to search for reserved capacity offerings with an end time before a specified date.</p>
    pub fn set_end_time_before(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.inner = self.inner.set_end_time_before(input);
        self
    }
    /// <p>A filter to search for reserved capacity offerings with an end time before a specified date.</p>
    pub fn get_end_time_before(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        self.inner.get_end_time_before()
    }
    /// <p>The desired duration in hours for the training plan offerings.</p>
    pub fn duration_hours(mut self, input: i64) -> Self {
        self.inner = self.inner.duration_hours(input);
        self
    }
    /// <p>The desired duration in hours for the training plan offerings.</p>
    pub fn set_duration_hours(mut self, input: ::std::option::Option<i64>) -> Self {
        self.inner = self.inner.set_duration_hours(input);
        self
    }
    /// <p>The desired duration in hours for the training plan offerings.</p>
    pub fn get_duration_hours(&self) -> &::std::option::Option<i64> {
        self.inner.get_duration_hours()
    }
    ///
    /// Appends an item to `TargetResources`.
    ///
    /// To override the contents of this collection use [`set_target_resources`](Self::set_target_resources).
    ///
    /// <p>The target resources (e.g., SageMaker Training Jobs, SageMaker HyperPod) to search for in the offerings.</p>
    /// <p>Training plans are specific to their target resource.</p>
    /// <ul>
    /// <li>
    /// <p>A training plan designed for SageMaker training jobs can only be used to schedule and run training jobs.</p></li>
    /// <li>
    /// <p>A training plan for HyperPod clusters can be used exclusively to provide compute resources to a cluster's instance group.</p></li>
    /// </ul>
    pub fn target_resources(mut self, input: crate::types::SageMakerResourceName) -> Self {
        self.inner = self.inner.target_resources(input);
        self
    }
    /// <p>The target resources (e.g., SageMaker Training Jobs, SageMaker HyperPod) to search for in the offerings.</p>
    /// <p>Training plans are specific to their target resource.</p>
    /// <ul>
    /// <li>
    /// <p>A training plan designed for SageMaker training jobs can only be used to schedule and run training jobs.</p></li>
    /// <li>
    /// <p>A training plan for HyperPod clusters can be used exclusively to provide compute resources to a cluster's instance group.</p></li>
    /// </ul>
    pub fn set_target_resources(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::SageMakerResourceName>>) -> Self {
        self.inner = self.inner.set_target_resources(input);
        self
    }
    /// <p>The target resources (e.g., SageMaker Training Jobs, SageMaker HyperPod) to search for in the offerings.</p>
    /// <p>Training plans are specific to their target resource.</p>
    /// <ul>
    /// <li>
    /// <p>A training plan designed for SageMaker training jobs can only be used to schedule and run training jobs.</p></li>
    /// <li>
    /// <p>A training plan for HyperPod clusters can be used exclusively to provide compute resources to a cluster's instance group.</p></li>
    /// </ul>
    pub fn get_target_resources(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SageMakerResourceName>> {
        self.inner.get_target_resources()
    }
}
