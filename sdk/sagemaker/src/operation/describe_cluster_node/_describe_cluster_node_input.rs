// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeClusterNodeInput {
    /// <p>The string name or the Amazon Resource Name (ARN) of the SageMaker HyperPod cluster in which the node is.</p>
    pub cluster_name: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the SageMaker HyperPod cluster node.</p>
    pub node_id: ::std::option::Option<::std::string::String>,
    /// <p>The logical identifier of the node to describe. You can specify either <code>NodeLogicalId</code> or <code>InstanceId</code>, but not both. <code>NodeLogicalId</code> can be used to describe nodes that are still being provisioned and don't yet have an <code>InstanceId</code> assigned.</p>
    pub node_logical_id: ::std::option::Option<::std::string::String>,
}
impl DescribeClusterNodeInput {
    /// <p>The string name or the Amazon Resource Name (ARN) of the SageMaker HyperPod cluster in which the node is.</p>
    pub fn cluster_name(&self) -> ::std::option::Option<&str> {
        self.cluster_name.as_deref()
    }
    /// <p>The ID of the SageMaker HyperPod cluster node.</p>
    pub fn node_id(&self) -> ::std::option::Option<&str> {
        self.node_id.as_deref()
    }
    /// <p>The logical identifier of the node to describe. You can specify either <code>NodeLogicalId</code> or <code>InstanceId</code>, but not both. <code>NodeLogicalId</code> can be used to describe nodes that are still being provisioned and don't yet have an <code>InstanceId</code> assigned.</p>
    pub fn node_logical_id(&self) -> ::std::option::Option<&str> {
        self.node_logical_id.as_deref()
    }
}
impl DescribeClusterNodeInput {
    /// Creates a new builder-style object to manufacture [`DescribeClusterNodeInput`](crate::operation::describe_cluster_node::DescribeClusterNodeInput).
    pub fn builder() -> crate::operation::describe_cluster_node::builders::DescribeClusterNodeInputBuilder {
        crate::operation::describe_cluster_node::builders::DescribeClusterNodeInputBuilder::default()
    }
}

/// A builder for [`DescribeClusterNodeInput`](crate::operation::describe_cluster_node::DescribeClusterNodeInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DescribeClusterNodeInputBuilder {
    pub(crate) cluster_name: ::std::option::Option<::std::string::String>,
    pub(crate) node_id: ::std::option::Option<::std::string::String>,
    pub(crate) node_logical_id: ::std::option::Option<::std::string::String>,
}
impl DescribeClusterNodeInputBuilder {
    /// <p>The string name or the Amazon Resource Name (ARN) of the SageMaker HyperPod cluster in which the node is.</p>
    /// This field is required.
    pub fn cluster_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cluster_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The string name or the Amazon Resource Name (ARN) of the SageMaker HyperPod cluster in which the node is.</p>
    pub fn set_cluster_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cluster_name = input;
        self
    }
    /// <p>The string name or the Amazon Resource Name (ARN) of the SageMaker HyperPod cluster in which the node is.</p>
    pub fn get_cluster_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.cluster_name
    }
    /// <p>The ID of the SageMaker HyperPod cluster node.</p>
    pub fn node_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.node_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the SageMaker HyperPod cluster node.</p>
    pub fn set_node_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.node_id = input;
        self
    }
    /// <p>The ID of the SageMaker HyperPod cluster node.</p>
    pub fn get_node_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.node_id
    }
    /// <p>The logical identifier of the node to describe. You can specify either <code>NodeLogicalId</code> or <code>InstanceId</code>, but not both. <code>NodeLogicalId</code> can be used to describe nodes that are still being provisioned and don't yet have an <code>InstanceId</code> assigned.</p>
    pub fn node_logical_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.node_logical_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The logical identifier of the node to describe. You can specify either <code>NodeLogicalId</code> or <code>InstanceId</code>, but not both. <code>NodeLogicalId</code> can be used to describe nodes that are still being provisioned and don't yet have an <code>InstanceId</code> assigned.</p>
    pub fn set_node_logical_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.node_logical_id = input;
        self
    }
    /// <p>The logical identifier of the node to describe. You can specify either <code>NodeLogicalId</code> or <code>InstanceId</code>, but not both. <code>NodeLogicalId</code> can be used to describe nodes that are still being provisioned and don't yet have an <code>InstanceId</code> assigned.</p>
    pub fn get_node_logical_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.node_logical_id
    }
    /// Consumes the builder and constructs a [`DescribeClusterNodeInput`](crate::operation::describe_cluster_node::DescribeClusterNodeInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::describe_cluster_node::DescribeClusterNodeInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::describe_cluster_node::DescribeClusterNodeInput {
            cluster_name: self.cluster_name,
            node_id: self.node_id,
            node_logical_id: self.node_logical_id,
        })
    }
}
