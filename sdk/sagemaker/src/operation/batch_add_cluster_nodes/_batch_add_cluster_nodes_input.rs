// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchAddClusterNodesInput {
    /// <p>The name of the HyperPod cluster to which you want to add nodes.</p>
    pub cluster_name: ::std::option::Option<::std::string::String>,
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. This token is valid for 8 hours. If you retry the request with the same client token within this timeframe and the same parameters, the API returns the same set of <code>NodeLogicalIds</code> with their latest status.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>A list of instance groups and the number of nodes to add to each. You can specify up to 5 instance groups in a single request, with a maximum of 50 nodes total across all instance groups.</p>
    pub nodes_to_add: ::std::option::Option<::std::vec::Vec<crate::types::AddClusterNodeSpecification>>,
}
impl BatchAddClusterNodesInput {
    /// <p>The name of the HyperPod cluster to which you want to add nodes.</p>
    pub fn cluster_name(&self) -> ::std::option::Option<&str> {
        self.cluster_name.as_deref()
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. This token is valid for 8 hours. If you retry the request with the same client token within this timeframe and the same parameters, the API returns the same set of <code>NodeLogicalIds</code> with their latest status.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>A list of instance groups and the number of nodes to add to each. You can specify up to 5 instance groups in a single request, with a maximum of 50 nodes total across all instance groups.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.nodes_to_add.is_none()`.
    pub fn nodes_to_add(&self) -> &[crate::types::AddClusterNodeSpecification] {
        self.nodes_to_add.as_deref().unwrap_or_default()
    }
}
impl BatchAddClusterNodesInput {
    /// Creates a new builder-style object to manufacture [`BatchAddClusterNodesInput`](crate::operation::batch_add_cluster_nodes::BatchAddClusterNodesInput).
    pub fn builder() -> crate::operation::batch_add_cluster_nodes::builders::BatchAddClusterNodesInputBuilder {
        crate::operation::batch_add_cluster_nodes::builders::BatchAddClusterNodesInputBuilder::default()
    }
}

/// A builder for [`BatchAddClusterNodesInput`](crate::operation::batch_add_cluster_nodes::BatchAddClusterNodesInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct BatchAddClusterNodesInputBuilder {
    pub(crate) cluster_name: ::std::option::Option<::std::string::String>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) nodes_to_add: ::std::option::Option<::std::vec::Vec<crate::types::AddClusterNodeSpecification>>,
}
impl BatchAddClusterNodesInputBuilder {
    /// <p>The name of the HyperPod cluster to which you want to add nodes.</p>
    /// This field is required.
    pub fn cluster_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cluster_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the HyperPod cluster to which you want to add nodes.</p>
    pub fn set_cluster_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cluster_name = input;
        self
    }
    /// <p>The name of the HyperPod cluster to which you want to add nodes.</p>
    pub fn get_cluster_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.cluster_name
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. This token is valid for 8 hours. If you retry the request with the same client token within this timeframe and the same parameters, the API returns the same set of <code>NodeLogicalIds</code> with their latest status.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. This token is valid for 8 hours. If you retry the request with the same client token within this timeframe and the same parameters, the API returns the same set of <code>NodeLogicalIds</code> with their latest status.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. This token is valid for 8 hours. If you retry the request with the same client token within this timeframe and the same parameters, the API returns the same set of <code>NodeLogicalIds</code> with their latest status.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Appends an item to `nodes_to_add`.
    ///
    /// To override the contents of this collection use [`set_nodes_to_add`](Self::set_nodes_to_add).
    ///
    /// <p>A list of instance groups and the number of nodes to add to each. You can specify up to 5 instance groups in a single request, with a maximum of 50 nodes total across all instance groups.</p>
    pub fn nodes_to_add(mut self, input: crate::types::AddClusterNodeSpecification) -> Self {
        let mut v = self.nodes_to_add.unwrap_or_default();
        v.push(input);
        self.nodes_to_add = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of instance groups and the number of nodes to add to each. You can specify up to 5 instance groups in a single request, with a maximum of 50 nodes total across all instance groups.</p>
    pub fn set_nodes_to_add(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AddClusterNodeSpecification>>) -> Self {
        self.nodes_to_add = input;
        self
    }
    /// <p>A list of instance groups and the number of nodes to add to each. You can specify up to 5 instance groups in a single request, with a maximum of 50 nodes total across all instance groups.</p>
    pub fn get_nodes_to_add(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AddClusterNodeSpecification>> {
        &self.nodes_to_add
    }
    /// Consumes the builder and constructs a [`BatchAddClusterNodesInput`](crate::operation::batch_add_cluster_nodes::BatchAddClusterNodesInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::batch_add_cluster_nodes::BatchAddClusterNodesInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::batch_add_cluster_nodes::BatchAddClusterNodesInput {
            cluster_name: self.cluster_name,
            client_token: self.client_token,
            nodes_to_add: self.nodes_to_add,
        })
    }
}
