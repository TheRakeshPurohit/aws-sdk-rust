// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`BatchDeleteClusterNodes`](crate::operation::batch_delete_cluster_nodes::builders::BatchDeleteClusterNodesFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`cluster_name(impl Into<String>)`](crate::operation::batch_delete_cluster_nodes::builders::BatchDeleteClusterNodesFluentBuilder::cluster_name) / [`set_cluster_name(Option<String>)`](crate::operation::batch_delete_cluster_nodes::builders::BatchDeleteClusterNodesFluentBuilder::set_cluster_name):<br>required: **true**<br><p>The name of the SageMaker HyperPod cluster from which to delete the specified nodes.</p><br>
    ///   - [`node_ids(impl Into<String>)`](crate::operation::batch_delete_cluster_nodes::builders::BatchDeleteClusterNodesFluentBuilder::node_ids) / [`set_node_ids(Option<Vec::<String>>)`](crate::operation::batch_delete_cluster_nodes::builders::BatchDeleteClusterNodesFluentBuilder::set_node_ids):<br>required: **false**<br><p>A list of node IDs to be deleted from the specified cluster.</p><note>  <ul>   <li>    <p>For SageMaker HyperPod clusters using the Slurm workload manager, you cannot remove instances that are configured as Slurm controller nodes.</p></li>   <li>    <p>If you need to delete more than 99 instances, contact <a href="http://aws.amazon.com/contact-us/">Support</a> for assistance.</p></li>  </ul> </note><br>
    ///   - [`node_logical_ids(impl Into<String>)`](crate::operation::batch_delete_cluster_nodes::builders::BatchDeleteClusterNodesFluentBuilder::node_logical_ids) / [`set_node_logical_ids(Option<Vec::<String>>)`](crate::operation::batch_delete_cluster_nodes::builders::BatchDeleteClusterNodesFluentBuilder::set_node_logical_ids):<br>required: **false**<br><p>A list of <code>NodeLogicalIds</code> identifying the nodes to be deleted. You can specify up to 50 <code>NodeLogicalIds</code>. You must specify either <code>NodeLogicalIds</code>, <code>InstanceIds</code>, or both, with a combined maximum of 50 identifiers.</p><br>
    /// - On success, responds with [`BatchDeleteClusterNodesOutput`](crate::operation::batch_delete_cluster_nodes::BatchDeleteClusterNodesOutput) with field(s):
    ///   - [`failed(Option<Vec::<BatchDeleteClusterNodesError>>)`](crate::operation::batch_delete_cluster_nodes::BatchDeleteClusterNodesOutput::failed): <p>A list of errors encountered when deleting the specified nodes.</p>
    ///   - [`successful(Option<Vec::<String>>)`](crate::operation::batch_delete_cluster_nodes::BatchDeleteClusterNodesOutput::successful): <p>A list of node IDs that were successfully deleted from the specified cluster.</p>
    ///   - [`failed_node_logical_ids(Option<Vec::<BatchDeleteClusterNodeLogicalIdsError>>)`](crate::operation::batch_delete_cluster_nodes::BatchDeleteClusterNodesOutput::failed_node_logical_ids): <p>A list of <code>NodeLogicalIds</code> that could not be deleted, along with error information explaining why the deletion failed.</p>
    ///   - [`successful_node_logical_ids(Option<Vec::<String>>)`](crate::operation::batch_delete_cluster_nodes::BatchDeleteClusterNodesOutput::successful_node_logical_ids): <p>A list of <code>NodeLogicalIds</code> that were successfully deleted from the cluster.</p>
    /// - On failure, responds with [`SdkError<BatchDeleteClusterNodesError>`](crate::operation::batch_delete_cluster_nodes::BatchDeleteClusterNodesError)
    pub fn batch_delete_cluster_nodes(&self) -> crate::operation::batch_delete_cluster_nodes::builders::BatchDeleteClusterNodesFluentBuilder {
        crate::operation::batch_delete_cluster_nodes::builders::BatchDeleteClusterNodesFluentBuilder::new(self.handle.clone())
    }
}
