// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_cluster_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_cluster::CreateClusterInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.cluster_name {
        object.key("ClusterName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.instance_groups {
        let mut array_3 = object.key("InstanceGroups").start_array();
        for item_4 in var_2 {
            {
                #[allow(unused_mut)]
                let mut object_5 = array_3.value().start_object();
                crate::protocol_serde::shape_cluster_instance_group_specification::ser_cluster_instance_group_specification(&mut object_5, item_4)?;
                object_5.finish();
            }
        }
        array_3.finish();
    }
    if let Some(var_6) = &input.restricted_instance_groups {
        let mut array_7 = object.key("RestrictedInstanceGroups").start_array();
        for item_8 in var_6 {
            {
                #[allow(unused_mut)]
                let mut object_9 = array_7.value().start_object();
                crate::protocol_serde::shape_cluster_restricted_instance_group_specification::ser_cluster_restricted_instance_group_specification(
                    &mut object_9,
                    item_8,
                )?;
                object_9.finish();
            }
        }
        array_7.finish();
    }
    if let Some(var_10) = &input.vpc_config {
        #[allow(unused_mut)]
        let mut object_11 = object.key("VpcConfig").start_object();
        crate::protocol_serde::shape_vpc_config::ser_vpc_config(&mut object_11, var_10)?;
        object_11.finish();
    }
    if let Some(var_12) = &input.tags {
        let mut array_13 = object.key("Tags").start_array();
        for item_14 in var_12 {
            {
                #[allow(unused_mut)]
                let mut object_15 = array_13.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_15, item_14)?;
                object_15.finish();
            }
        }
        array_13.finish();
    }
    if let Some(var_16) = &input.orchestrator {
        #[allow(unused_mut)]
        let mut object_17 = object.key("Orchestrator").start_object();
        crate::protocol_serde::shape_cluster_orchestrator::ser_cluster_orchestrator(&mut object_17, var_16)?;
        object_17.finish();
    }
    if let Some(var_18) = &input.node_recovery {
        object.key("NodeRecovery").string(var_18.as_str());
    }
    if let Some(var_19) = &input.node_provisioning_mode {
        object.key("NodeProvisioningMode").string(var_19.as_str());
    }
    if let Some(var_20) = &input.cluster_role {
        object.key("ClusterRole").string(var_20.as_str());
    }
    if let Some(var_21) = &input.auto_scaling {
        #[allow(unused_mut)]
        let mut object_22 = object.key("AutoScaling").start_object();
        crate::protocol_serde::shape_cluster_auto_scaling_config::ser_cluster_auto_scaling_config(&mut object_22, var_21)?;
        object_22.finish();
    }
    Ok(())
}
