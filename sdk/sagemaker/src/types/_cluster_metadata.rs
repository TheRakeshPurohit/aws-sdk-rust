// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Metadata information about a HyperPod cluster showing information about the cluster level operations, such as creating, updating, and deleting.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ClusterMetadata {
    /// <p>An error message describing why the cluster level operation (such as creating, updating, or deleting) failed.</p>
    pub failure_message: ::std::option::Option<::std::string::String>,
    /// <p>A list of Amazon EKS IAM role ARNs associated with the cluster. This is created by HyperPod on your behalf and only applies for EKS orchestrated clusters.</p>
    pub eks_role_access_entries: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The Service-Linked Role (SLR) associated with the cluster. This is created by HyperPod on your behalf and only applies for EKS orchestrated clusters.</p>
    pub slr_access_entry: ::std::option::Option<::std::string::String>,
}
impl ClusterMetadata {
    /// <p>An error message describing why the cluster level operation (such as creating, updating, or deleting) failed.</p>
    pub fn failure_message(&self) -> ::std::option::Option<&str> {
        self.failure_message.as_deref()
    }
    /// <p>A list of Amazon EKS IAM role ARNs associated with the cluster. This is created by HyperPod on your behalf and only applies for EKS orchestrated clusters.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.eks_role_access_entries.is_none()`.
    pub fn eks_role_access_entries(&self) -> &[::std::string::String] {
        self.eks_role_access_entries.as_deref().unwrap_or_default()
    }
    /// <p>The Service-Linked Role (SLR) associated with the cluster. This is created by HyperPod on your behalf and only applies for EKS orchestrated clusters.</p>
    pub fn slr_access_entry(&self) -> ::std::option::Option<&str> {
        self.slr_access_entry.as_deref()
    }
}
impl ClusterMetadata {
    /// Creates a new builder-style object to manufacture [`ClusterMetadata`](crate::types::ClusterMetadata).
    pub fn builder() -> crate::types::builders::ClusterMetadataBuilder {
        crate::types::builders::ClusterMetadataBuilder::default()
    }
}

/// A builder for [`ClusterMetadata`](crate::types::ClusterMetadata).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ClusterMetadataBuilder {
    pub(crate) failure_message: ::std::option::Option<::std::string::String>,
    pub(crate) eks_role_access_entries: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) slr_access_entry: ::std::option::Option<::std::string::String>,
}
impl ClusterMetadataBuilder {
    /// <p>An error message describing why the cluster level operation (such as creating, updating, or deleting) failed.</p>
    pub fn failure_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.failure_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An error message describing why the cluster level operation (such as creating, updating, or deleting) failed.</p>
    pub fn set_failure_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.failure_message = input;
        self
    }
    /// <p>An error message describing why the cluster level operation (such as creating, updating, or deleting) failed.</p>
    pub fn get_failure_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.failure_message
    }
    /// Appends an item to `eks_role_access_entries`.
    ///
    /// To override the contents of this collection use [`set_eks_role_access_entries`](Self::set_eks_role_access_entries).
    ///
    /// <p>A list of Amazon EKS IAM role ARNs associated with the cluster. This is created by HyperPod on your behalf and only applies for EKS orchestrated clusters.</p>
    pub fn eks_role_access_entries(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.eks_role_access_entries.unwrap_or_default();
        v.push(input.into());
        self.eks_role_access_entries = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of Amazon EKS IAM role ARNs associated with the cluster. This is created by HyperPod on your behalf and only applies for EKS orchestrated clusters.</p>
    pub fn set_eks_role_access_entries(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.eks_role_access_entries = input;
        self
    }
    /// <p>A list of Amazon EKS IAM role ARNs associated with the cluster. This is created by HyperPod on your behalf and only applies for EKS orchestrated clusters.</p>
    pub fn get_eks_role_access_entries(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.eks_role_access_entries
    }
    /// <p>The Service-Linked Role (SLR) associated with the cluster. This is created by HyperPod on your behalf and only applies for EKS orchestrated clusters.</p>
    pub fn slr_access_entry(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.slr_access_entry = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Service-Linked Role (SLR) associated with the cluster. This is created by HyperPod on your behalf and only applies for EKS orchestrated clusters.</p>
    pub fn set_slr_access_entry(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.slr_access_entry = input;
        self
    }
    /// <p>The Service-Linked Role (SLR) associated with the cluster. This is created by HyperPod on your behalf and only applies for EKS orchestrated clusters.</p>
    pub fn get_slr_access_entry(&self) -> &::std::option::Option<::std::string::String> {
        &self.slr_access_entry
    }
    /// Consumes the builder and constructs a [`ClusterMetadata`](crate::types::ClusterMetadata).
    pub fn build(self) -> crate::types::ClusterMetadata {
        crate::types::ClusterMetadata {
            failure_message: self.failure_message,
            eks_role_access_entries: self.eks_role_access_entries,
            slr_access_entry: self.slr_access_entry,
        }
    }
}
