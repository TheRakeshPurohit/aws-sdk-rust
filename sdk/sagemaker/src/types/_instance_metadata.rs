// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Metadata information about an instance in a HyperPod cluster.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct InstanceMetadata {
    /// <p>The ID of the customer-managed Elastic Network Interface (ENI) associated with the instance.</p>
    pub customer_eni: ::std::option::Option<::std::string::String>,
    /// <p>Information about additional Elastic Network Interfaces (ENIs) associated with the instance.</p>
    pub additional_enis: ::std::option::Option<crate::types::AdditionalEnis>,
    /// <p>Information about the Capacity Reservation used by the instance.</p>
    pub capacity_reservation: ::std::option::Option<crate::types::CapacityReservation>,
    /// <p>An error message describing why the instance creation or update failed, if applicable.</p>
    pub failure_message: ::std::option::Option<::std::string::String>,
    /// <p>The execution state of the Lifecycle Script (LCS) for the instance.</p>
    pub lcs_execution_state: ::std::option::Option<::std::string::String>,
    /// <p>The unique logical identifier of the node within the cluster. The ID used here is the same object as in the <code>BatchAddClusterNodes</code> API.</p>
    pub node_logical_id: ::std::option::Option<::std::string::String>,
}
impl InstanceMetadata {
    /// <p>The ID of the customer-managed Elastic Network Interface (ENI) associated with the instance.</p>
    pub fn customer_eni(&self) -> ::std::option::Option<&str> {
        self.customer_eni.as_deref()
    }
    /// <p>Information about additional Elastic Network Interfaces (ENIs) associated with the instance.</p>
    pub fn additional_enis(&self) -> ::std::option::Option<&crate::types::AdditionalEnis> {
        self.additional_enis.as_ref()
    }
    /// <p>Information about the Capacity Reservation used by the instance.</p>
    pub fn capacity_reservation(&self) -> ::std::option::Option<&crate::types::CapacityReservation> {
        self.capacity_reservation.as_ref()
    }
    /// <p>An error message describing why the instance creation or update failed, if applicable.</p>
    pub fn failure_message(&self) -> ::std::option::Option<&str> {
        self.failure_message.as_deref()
    }
    /// <p>The execution state of the Lifecycle Script (LCS) for the instance.</p>
    pub fn lcs_execution_state(&self) -> ::std::option::Option<&str> {
        self.lcs_execution_state.as_deref()
    }
    /// <p>The unique logical identifier of the node within the cluster. The ID used here is the same object as in the <code>BatchAddClusterNodes</code> API.</p>
    pub fn node_logical_id(&self) -> ::std::option::Option<&str> {
        self.node_logical_id.as_deref()
    }
}
impl InstanceMetadata {
    /// Creates a new builder-style object to manufacture [`InstanceMetadata`](crate::types::InstanceMetadata).
    pub fn builder() -> crate::types::builders::InstanceMetadataBuilder {
        crate::types::builders::InstanceMetadataBuilder::default()
    }
}

/// A builder for [`InstanceMetadata`](crate::types::InstanceMetadata).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct InstanceMetadataBuilder {
    pub(crate) customer_eni: ::std::option::Option<::std::string::String>,
    pub(crate) additional_enis: ::std::option::Option<crate::types::AdditionalEnis>,
    pub(crate) capacity_reservation: ::std::option::Option<crate::types::CapacityReservation>,
    pub(crate) failure_message: ::std::option::Option<::std::string::String>,
    pub(crate) lcs_execution_state: ::std::option::Option<::std::string::String>,
    pub(crate) node_logical_id: ::std::option::Option<::std::string::String>,
}
impl InstanceMetadataBuilder {
    /// <p>The ID of the customer-managed Elastic Network Interface (ENI) associated with the instance.</p>
    pub fn customer_eni(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.customer_eni = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the customer-managed Elastic Network Interface (ENI) associated with the instance.</p>
    pub fn set_customer_eni(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.customer_eni = input;
        self
    }
    /// <p>The ID of the customer-managed Elastic Network Interface (ENI) associated with the instance.</p>
    pub fn get_customer_eni(&self) -> &::std::option::Option<::std::string::String> {
        &self.customer_eni
    }
    /// <p>Information about additional Elastic Network Interfaces (ENIs) associated with the instance.</p>
    pub fn additional_enis(mut self, input: crate::types::AdditionalEnis) -> Self {
        self.additional_enis = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about additional Elastic Network Interfaces (ENIs) associated with the instance.</p>
    pub fn set_additional_enis(mut self, input: ::std::option::Option<crate::types::AdditionalEnis>) -> Self {
        self.additional_enis = input;
        self
    }
    /// <p>Information about additional Elastic Network Interfaces (ENIs) associated with the instance.</p>
    pub fn get_additional_enis(&self) -> &::std::option::Option<crate::types::AdditionalEnis> {
        &self.additional_enis
    }
    /// <p>Information about the Capacity Reservation used by the instance.</p>
    pub fn capacity_reservation(mut self, input: crate::types::CapacityReservation) -> Self {
        self.capacity_reservation = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about the Capacity Reservation used by the instance.</p>
    pub fn set_capacity_reservation(mut self, input: ::std::option::Option<crate::types::CapacityReservation>) -> Self {
        self.capacity_reservation = input;
        self
    }
    /// <p>Information about the Capacity Reservation used by the instance.</p>
    pub fn get_capacity_reservation(&self) -> &::std::option::Option<crate::types::CapacityReservation> {
        &self.capacity_reservation
    }
    /// <p>An error message describing why the instance creation or update failed, if applicable.</p>
    pub fn failure_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.failure_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An error message describing why the instance creation or update failed, if applicable.</p>
    pub fn set_failure_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.failure_message = input;
        self
    }
    /// <p>An error message describing why the instance creation or update failed, if applicable.</p>
    pub fn get_failure_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.failure_message
    }
    /// <p>The execution state of the Lifecycle Script (LCS) for the instance.</p>
    pub fn lcs_execution_state(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.lcs_execution_state = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The execution state of the Lifecycle Script (LCS) for the instance.</p>
    pub fn set_lcs_execution_state(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.lcs_execution_state = input;
        self
    }
    /// <p>The execution state of the Lifecycle Script (LCS) for the instance.</p>
    pub fn get_lcs_execution_state(&self) -> &::std::option::Option<::std::string::String> {
        &self.lcs_execution_state
    }
    /// <p>The unique logical identifier of the node within the cluster. The ID used here is the same object as in the <code>BatchAddClusterNodes</code> API.</p>
    pub fn node_logical_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.node_logical_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique logical identifier of the node within the cluster. The ID used here is the same object as in the <code>BatchAddClusterNodes</code> API.</p>
    pub fn set_node_logical_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.node_logical_id = input;
        self
    }
    /// <p>The unique logical identifier of the node within the cluster. The ID used here is the same object as in the <code>BatchAddClusterNodes</code> API.</p>
    pub fn get_node_logical_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.node_logical_id
    }
    /// Consumes the builder and constructs a [`InstanceMetadata`](crate::types::InstanceMetadata).
    pub fn build(self) -> crate::types::InstanceMetadata {
        crate::types::InstanceMetadata {
            customer_eni: self.customer_eni,
            additional_enis: self.additional_enis,
            capacity_reservation: self.capacity_reservation,
            failure_message: self.failure_message,
            lcs_execution_state: self.lcs_execution_state,
            node_logical_id: self.node_logical_id,
        }
    }
}
