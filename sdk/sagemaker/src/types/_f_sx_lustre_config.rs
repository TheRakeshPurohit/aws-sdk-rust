// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration settings for an Amazon FSx for Lustre file system to be used with the cluster.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FSxLustreConfig {
    /// <p>The storage capacity of the Amazon FSx for Lustre file system, specified in gibibytes (GiB).</p>
    pub size_in_gib: ::std::option::Option<i32>,
    /// <p>The throughput capacity of the Amazon FSx for Lustre file system, measured in MB/s per TiB of storage.</p>
    pub per_unit_storage_throughput: ::std::option::Option<i32>,
}
impl FSxLustreConfig {
    /// <p>The storage capacity of the Amazon FSx for Lustre file system, specified in gibibytes (GiB).</p>
    pub fn size_in_gib(&self) -> ::std::option::Option<i32> {
        self.size_in_gib
    }
    /// <p>The throughput capacity of the Amazon FSx for Lustre file system, measured in MB/s per TiB of storage.</p>
    pub fn per_unit_storage_throughput(&self) -> ::std::option::Option<i32> {
        self.per_unit_storage_throughput
    }
}
impl FSxLustreConfig {
    /// Creates a new builder-style object to manufacture [`FSxLustreConfig`](crate::types::FSxLustreConfig).
    pub fn builder() -> crate::types::builders::FSxLustreConfigBuilder {
        crate::types::builders::FSxLustreConfigBuilder::default()
    }
}

/// A builder for [`FSxLustreConfig`](crate::types::FSxLustreConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct FSxLustreConfigBuilder {
    pub(crate) size_in_gib: ::std::option::Option<i32>,
    pub(crate) per_unit_storage_throughput: ::std::option::Option<i32>,
}
impl FSxLustreConfigBuilder {
    /// <p>The storage capacity of the Amazon FSx for Lustre file system, specified in gibibytes (GiB).</p>
    /// This field is required.
    pub fn size_in_gib(mut self, input: i32) -> Self {
        self.size_in_gib = ::std::option::Option::Some(input);
        self
    }
    /// <p>The storage capacity of the Amazon FSx for Lustre file system, specified in gibibytes (GiB).</p>
    pub fn set_size_in_gib(mut self, input: ::std::option::Option<i32>) -> Self {
        self.size_in_gib = input;
        self
    }
    /// <p>The storage capacity of the Amazon FSx for Lustre file system, specified in gibibytes (GiB).</p>
    pub fn get_size_in_gib(&self) -> &::std::option::Option<i32> {
        &self.size_in_gib
    }
    /// <p>The throughput capacity of the Amazon FSx for Lustre file system, measured in MB/s per TiB of storage.</p>
    /// This field is required.
    pub fn per_unit_storage_throughput(mut self, input: i32) -> Self {
        self.per_unit_storage_throughput = ::std::option::Option::Some(input);
        self
    }
    /// <p>The throughput capacity of the Amazon FSx for Lustre file system, measured in MB/s per TiB of storage.</p>
    pub fn set_per_unit_storage_throughput(mut self, input: ::std::option::Option<i32>) -> Self {
        self.per_unit_storage_throughput = input;
        self
    }
    /// <p>The throughput capacity of the Amazon FSx for Lustre file system, measured in MB/s per TiB of storage.</p>
    pub fn get_per_unit_storage_throughput(&self) -> &::std::option::Option<i32> {
        &self.per_unit_storage_throughput
    }
    /// Consumes the builder and constructs a [`FSxLustreConfig`](crate::types::FSxLustreConfig).
    pub fn build(self) -> crate::types::FSxLustreConfig {
        crate::types::FSxLustreConfig {
            size_in_gib: self.size_in_gib,
            per_unit_storage_throughput: self.per_unit_storage_throughput,
        }
    }
}
