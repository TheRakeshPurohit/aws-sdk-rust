// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Metadata associated with a cluster event, which may include details about various resource types.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum EventMetadata {
    /// <p>Metadata specific to cluster-level events.</p>
    Cluster(crate::types::ClusterMetadata),
    /// <p>Metadata specific to instance-level events.</p>
    Instance(crate::types::InstanceMetadata),
    /// <p>Metadata specific to instance group-level events.</p>
    InstanceGroup(crate::types::InstanceGroupMetadata),
    /// <p>Metadata related to instance group scaling events.</p>
    InstanceGroupScaling(crate::types::InstanceGroupScalingMetadata),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl EventMetadata {
    /// Tries to convert the enum instance into [`Cluster`](crate::types::EventMetadata::Cluster), extracting the inner [`ClusterMetadata`](crate::types::ClusterMetadata).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_cluster(&self) -> ::std::result::Result<&crate::types::ClusterMetadata, &Self> {
        if let EventMetadata::Cluster(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Cluster`](crate::types::EventMetadata::Cluster).
    pub fn is_cluster(&self) -> bool {
        self.as_cluster().is_ok()
    }
    /// Tries to convert the enum instance into [`Instance`](crate::types::EventMetadata::Instance), extracting the inner [`InstanceMetadata`](crate::types::InstanceMetadata).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_instance(&self) -> ::std::result::Result<&crate::types::InstanceMetadata, &Self> {
        if let EventMetadata::Instance(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Instance`](crate::types::EventMetadata::Instance).
    pub fn is_instance(&self) -> bool {
        self.as_instance().is_ok()
    }
    /// Tries to convert the enum instance into [`InstanceGroup`](crate::types::EventMetadata::InstanceGroup), extracting the inner [`InstanceGroupMetadata`](crate::types::InstanceGroupMetadata).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_instance_group(&self) -> ::std::result::Result<&crate::types::InstanceGroupMetadata, &Self> {
        if let EventMetadata::InstanceGroup(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`InstanceGroup`](crate::types::EventMetadata::InstanceGroup).
    pub fn is_instance_group(&self) -> bool {
        self.as_instance_group().is_ok()
    }
    /// Tries to convert the enum instance into [`InstanceGroupScaling`](crate::types::EventMetadata::InstanceGroupScaling), extracting the inner [`InstanceGroupScalingMetadata`](crate::types::InstanceGroupScalingMetadata).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_instance_group_scaling(&self) -> ::std::result::Result<&crate::types::InstanceGroupScalingMetadata, &Self> {
        if let EventMetadata::InstanceGroupScaling(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`InstanceGroupScaling`](crate::types::EventMetadata::InstanceGroupScaling).
    pub fn is_instance_group_scaling(&self) -> bool {
        self.as_instance_group_scaling().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
