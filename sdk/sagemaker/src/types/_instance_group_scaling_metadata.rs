// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Metadata information about scaling operations for an instance group.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct InstanceGroupScalingMetadata {
    /// <p>The current number of instances in the group.</p>
    pub instance_count: ::std::option::Option<i32>,
    /// <p>The desired number of instances for the group after scaling.</p>
    pub target_count: ::std::option::Option<i32>,
    /// <p>An error message describing why the scaling operation failed, if applicable.</p>
    pub failure_message: ::std::option::Option<::std::string::String>,
}
impl InstanceGroupScalingMetadata {
    /// <p>The current number of instances in the group.</p>
    pub fn instance_count(&self) -> ::std::option::Option<i32> {
        self.instance_count
    }
    /// <p>The desired number of instances for the group after scaling.</p>
    pub fn target_count(&self) -> ::std::option::Option<i32> {
        self.target_count
    }
    /// <p>An error message describing why the scaling operation failed, if applicable.</p>
    pub fn failure_message(&self) -> ::std::option::Option<&str> {
        self.failure_message.as_deref()
    }
}
impl InstanceGroupScalingMetadata {
    /// Creates a new builder-style object to manufacture [`InstanceGroupScalingMetadata`](crate::types::InstanceGroupScalingMetadata).
    pub fn builder() -> crate::types::builders::InstanceGroupScalingMetadataBuilder {
        crate::types::builders::InstanceGroupScalingMetadataBuilder::default()
    }
}

/// A builder for [`InstanceGroupScalingMetadata`](crate::types::InstanceGroupScalingMetadata).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct InstanceGroupScalingMetadataBuilder {
    pub(crate) instance_count: ::std::option::Option<i32>,
    pub(crate) target_count: ::std::option::Option<i32>,
    pub(crate) failure_message: ::std::option::Option<::std::string::String>,
}
impl InstanceGroupScalingMetadataBuilder {
    /// <p>The current number of instances in the group.</p>
    pub fn instance_count(mut self, input: i32) -> Self {
        self.instance_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current number of instances in the group.</p>
    pub fn set_instance_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.instance_count = input;
        self
    }
    /// <p>The current number of instances in the group.</p>
    pub fn get_instance_count(&self) -> &::std::option::Option<i32> {
        &self.instance_count
    }
    /// <p>The desired number of instances for the group after scaling.</p>
    pub fn target_count(mut self, input: i32) -> Self {
        self.target_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The desired number of instances for the group after scaling.</p>
    pub fn set_target_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.target_count = input;
        self
    }
    /// <p>The desired number of instances for the group after scaling.</p>
    pub fn get_target_count(&self) -> &::std::option::Option<i32> {
        &self.target_count
    }
    /// <p>An error message describing why the scaling operation failed, if applicable.</p>
    pub fn failure_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.failure_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An error message describing why the scaling operation failed, if applicable.</p>
    pub fn set_failure_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.failure_message = input;
        self
    }
    /// <p>An error message describing why the scaling operation failed, if applicable.</p>
    pub fn get_failure_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.failure_message
    }
    /// Consumes the builder and constructs a [`InstanceGroupScalingMetadata`](crate::types::InstanceGroupScalingMetadata).
    pub fn build(self) -> crate::types::InstanceGroupScalingMetadata {
        crate::types::InstanceGroupScalingMetadata {
            instance_count: self.instance_count,
            target_count: self.target_count,
            failure_message: self.failure_message,
        }
    }
}
