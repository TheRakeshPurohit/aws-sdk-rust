// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The autoscaling configuration and status information for a HyperPod cluster.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ClusterAutoScalingConfigOutput {
    /// <p>Describes whether autoscaling is enabled or disabled for the cluster.</p>
    pub mode: crate::types::ClusterAutoScalingMode,
    /// <p>The type of autoscaler configured for the cluster.</p>
    pub auto_scaler_type: ::std::option::Option<crate::types::ClusterAutoScalerType>,
    /// <p>The current status of the autoscaling configuration. Valid values are <code>InService</code>, <code>Failed</code>, <code>Creating</code>, and <code>Deleting</code>.</p>
    pub status: crate::types::ClusterAutoScalingStatus,
    /// <p>If the autoscaling status is <code>Failed</code>, this field contains a message describing the failure.</p>
    pub failure_message: ::std::option::Option<::std::string::String>,
}
impl ClusterAutoScalingConfigOutput {
    /// <p>Describes whether autoscaling is enabled or disabled for the cluster.</p>
    pub fn mode(&self) -> &crate::types::ClusterAutoScalingMode {
        &self.mode
    }
    /// <p>The type of autoscaler configured for the cluster.</p>
    pub fn auto_scaler_type(&self) -> ::std::option::Option<&crate::types::ClusterAutoScalerType> {
        self.auto_scaler_type.as_ref()
    }
    /// <p>The current status of the autoscaling configuration. Valid values are <code>InService</code>, <code>Failed</code>, <code>Creating</code>, and <code>Deleting</code>.</p>
    pub fn status(&self) -> &crate::types::ClusterAutoScalingStatus {
        &self.status
    }
    /// <p>If the autoscaling status is <code>Failed</code>, this field contains a message describing the failure.</p>
    pub fn failure_message(&self) -> ::std::option::Option<&str> {
        self.failure_message.as_deref()
    }
}
impl ClusterAutoScalingConfigOutput {
    /// Creates a new builder-style object to manufacture [`ClusterAutoScalingConfigOutput`](crate::types::ClusterAutoScalingConfigOutput).
    pub fn builder() -> crate::types::builders::ClusterAutoScalingConfigOutputBuilder {
        crate::types::builders::ClusterAutoScalingConfigOutputBuilder::default()
    }
}

/// A builder for [`ClusterAutoScalingConfigOutput`](crate::types::ClusterAutoScalingConfigOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ClusterAutoScalingConfigOutputBuilder {
    pub(crate) mode: ::std::option::Option<crate::types::ClusterAutoScalingMode>,
    pub(crate) auto_scaler_type: ::std::option::Option<crate::types::ClusterAutoScalerType>,
    pub(crate) status: ::std::option::Option<crate::types::ClusterAutoScalingStatus>,
    pub(crate) failure_message: ::std::option::Option<::std::string::String>,
}
impl ClusterAutoScalingConfigOutputBuilder {
    /// <p>Describes whether autoscaling is enabled or disabled for the cluster.</p>
    /// This field is required.
    pub fn mode(mut self, input: crate::types::ClusterAutoScalingMode) -> Self {
        self.mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes whether autoscaling is enabled or disabled for the cluster.</p>
    pub fn set_mode(mut self, input: ::std::option::Option<crate::types::ClusterAutoScalingMode>) -> Self {
        self.mode = input;
        self
    }
    /// <p>Describes whether autoscaling is enabled or disabled for the cluster.</p>
    pub fn get_mode(&self) -> &::std::option::Option<crate::types::ClusterAutoScalingMode> {
        &self.mode
    }
    /// <p>The type of autoscaler configured for the cluster.</p>
    pub fn auto_scaler_type(mut self, input: crate::types::ClusterAutoScalerType) -> Self {
        self.auto_scaler_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of autoscaler configured for the cluster.</p>
    pub fn set_auto_scaler_type(mut self, input: ::std::option::Option<crate::types::ClusterAutoScalerType>) -> Self {
        self.auto_scaler_type = input;
        self
    }
    /// <p>The type of autoscaler configured for the cluster.</p>
    pub fn get_auto_scaler_type(&self) -> &::std::option::Option<crate::types::ClusterAutoScalerType> {
        &self.auto_scaler_type
    }
    /// <p>The current status of the autoscaling configuration. Valid values are <code>InService</code>, <code>Failed</code>, <code>Creating</code>, and <code>Deleting</code>.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::ClusterAutoScalingStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the autoscaling configuration. Valid values are <code>InService</code>, <code>Failed</code>, <code>Creating</code>, and <code>Deleting</code>.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ClusterAutoScalingStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status of the autoscaling configuration. Valid values are <code>InService</code>, <code>Failed</code>, <code>Creating</code>, and <code>Deleting</code>.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ClusterAutoScalingStatus> {
        &self.status
    }
    /// <p>If the autoscaling status is <code>Failed</code>, this field contains a message describing the failure.</p>
    pub fn failure_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.failure_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If the autoscaling status is <code>Failed</code>, this field contains a message describing the failure.</p>
    pub fn set_failure_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.failure_message = input;
        self
    }
    /// <p>If the autoscaling status is <code>Failed</code>, this field contains a message describing the failure.</p>
    pub fn get_failure_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.failure_message
    }
    /// Consumes the builder and constructs a [`ClusterAutoScalingConfigOutput`](crate::types::ClusterAutoScalingConfigOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`mode`](crate::types::builders::ClusterAutoScalingConfigOutputBuilder::mode)
    /// - [`status`](crate::types::builders::ClusterAutoScalingConfigOutputBuilder::status)
    pub fn build(self) -> ::std::result::Result<crate::types::ClusterAutoScalingConfigOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ClusterAutoScalingConfigOutput {
            mode: self.mode.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "mode",
                    "mode was not specified but it is required when building ClusterAutoScalingConfigOutput",
                )
            })?,
            auto_scaler_type: self.auto_scaler_type,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building ClusterAutoScalingConfigOutput",
                )
            })?,
            failure_message: self.failure_message,
        })
    }
}
