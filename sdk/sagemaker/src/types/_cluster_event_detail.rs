// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Detailed information about a specific event in a HyperPod cluster.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ClusterEventDetail {
    /// <p>The unique identifier (UUID) of the event.</p>
    pub event_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the SageMaker HyperPod cluster associated with the event.</p>
    pub cluster_arn: ::std::option::Option<::std::string::String>,
    /// <p>The name of the SageMaker HyperPod cluster associated with the event.</p>
    pub cluster_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the instance group associated with the event, if applicable.</p>
    pub instance_group_name: ::std::option::Option<::std::string::String>,
    /// <p>The EC2 instance ID associated with the event, if applicable.</p>
    pub instance_id: ::std::option::Option<::std::string::String>,
    /// <p>The type of resource associated with the event. Valid values are "Cluster", "InstanceGroup", or "Instance".</p>
    pub resource_type: ::std::option::Option<crate::types::ClusterEventResourceType>,
    /// <p>The timestamp when the event occurred.</p>
    pub event_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Additional details about the event, including event-specific metadata.</p>
    pub event_details: ::std::option::Option<crate::types::EventDetails>,
    /// <p>A human-readable description of the event.</p>
    pub description: ::std::option::Option<::std::string::String>,
}
impl ClusterEventDetail {
    /// <p>The unique identifier (UUID) of the event.</p>
    pub fn event_id(&self) -> ::std::option::Option<&str> {
        self.event_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the SageMaker HyperPod cluster associated with the event.</p>
    pub fn cluster_arn(&self) -> ::std::option::Option<&str> {
        self.cluster_arn.as_deref()
    }
    /// <p>The name of the SageMaker HyperPod cluster associated with the event.</p>
    pub fn cluster_name(&self) -> ::std::option::Option<&str> {
        self.cluster_name.as_deref()
    }
    /// <p>The name of the instance group associated with the event, if applicable.</p>
    pub fn instance_group_name(&self) -> ::std::option::Option<&str> {
        self.instance_group_name.as_deref()
    }
    /// <p>The EC2 instance ID associated with the event, if applicable.</p>
    pub fn instance_id(&self) -> ::std::option::Option<&str> {
        self.instance_id.as_deref()
    }
    /// <p>The type of resource associated with the event. Valid values are "Cluster", "InstanceGroup", or "Instance".</p>
    pub fn resource_type(&self) -> ::std::option::Option<&crate::types::ClusterEventResourceType> {
        self.resource_type.as_ref()
    }
    /// <p>The timestamp when the event occurred.</p>
    pub fn event_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.event_time.as_ref()
    }
    /// <p>Additional details about the event, including event-specific metadata.</p>
    pub fn event_details(&self) -> ::std::option::Option<&crate::types::EventDetails> {
        self.event_details.as_ref()
    }
    /// <p>A human-readable description of the event.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
}
impl ClusterEventDetail {
    /// Creates a new builder-style object to manufacture [`ClusterEventDetail`](crate::types::ClusterEventDetail).
    pub fn builder() -> crate::types::builders::ClusterEventDetailBuilder {
        crate::types::builders::ClusterEventDetailBuilder::default()
    }
}

/// A builder for [`ClusterEventDetail`](crate::types::ClusterEventDetail).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ClusterEventDetailBuilder {
    pub(crate) event_id: ::std::option::Option<::std::string::String>,
    pub(crate) cluster_arn: ::std::option::Option<::std::string::String>,
    pub(crate) cluster_name: ::std::option::Option<::std::string::String>,
    pub(crate) instance_group_name: ::std::option::Option<::std::string::String>,
    pub(crate) instance_id: ::std::option::Option<::std::string::String>,
    pub(crate) resource_type: ::std::option::Option<crate::types::ClusterEventResourceType>,
    pub(crate) event_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) event_details: ::std::option::Option<crate::types::EventDetails>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
}
impl ClusterEventDetailBuilder {
    /// <p>The unique identifier (UUID) of the event.</p>
    /// This field is required.
    pub fn event_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.event_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier (UUID) of the event.</p>
    pub fn set_event_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.event_id = input;
        self
    }
    /// <p>The unique identifier (UUID) of the event.</p>
    pub fn get_event_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.event_id
    }
    /// <p>The Amazon Resource Name (ARN) of the SageMaker HyperPod cluster associated with the event.</p>
    /// This field is required.
    pub fn cluster_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cluster_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the SageMaker HyperPod cluster associated with the event.</p>
    pub fn set_cluster_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cluster_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the SageMaker HyperPod cluster associated with the event.</p>
    pub fn get_cluster_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.cluster_arn
    }
    /// <p>The name of the SageMaker HyperPod cluster associated with the event.</p>
    /// This field is required.
    pub fn cluster_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cluster_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the SageMaker HyperPod cluster associated with the event.</p>
    pub fn set_cluster_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cluster_name = input;
        self
    }
    /// <p>The name of the SageMaker HyperPod cluster associated with the event.</p>
    pub fn get_cluster_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.cluster_name
    }
    /// <p>The name of the instance group associated with the event, if applicable.</p>
    pub fn instance_group_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instance_group_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the instance group associated with the event, if applicable.</p>
    pub fn set_instance_group_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instance_group_name = input;
        self
    }
    /// <p>The name of the instance group associated with the event, if applicable.</p>
    pub fn get_instance_group_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.instance_group_name
    }
    /// <p>The EC2 instance ID associated with the event, if applicable.</p>
    pub fn instance_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instance_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The EC2 instance ID associated with the event, if applicable.</p>
    pub fn set_instance_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instance_id = input;
        self
    }
    /// <p>The EC2 instance ID associated with the event, if applicable.</p>
    pub fn get_instance_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.instance_id
    }
    /// <p>The type of resource associated with the event. Valid values are "Cluster", "InstanceGroup", or "Instance".</p>
    /// This field is required.
    pub fn resource_type(mut self, input: crate::types::ClusterEventResourceType) -> Self {
        self.resource_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of resource associated with the event. Valid values are "Cluster", "InstanceGroup", or "Instance".</p>
    pub fn set_resource_type(mut self, input: ::std::option::Option<crate::types::ClusterEventResourceType>) -> Self {
        self.resource_type = input;
        self
    }
    /// <p>The type of resource associated with the event. Valid values are "Cluster", "InstanceGroup", or "Instance".</p>
    pub fn get_resource_type(&self) -> &::std::option::Option<crate::types::ClusterEventResourceType> {
        &self.resource_type
    }
    /// <p>The timestamp when the event occurred.</p>
    /// This field is required.
    pub fn event_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.event_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the event occurred.</p>
    pub fn set_event_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.event_time = input;
        self
    }
    /// <p>The timestamp when the event occurred.</p>
    pub fn get_event_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.event_time
    }
    /// <p>Additional details about the event, including event-specific metadata.</p>
    pub fn event_details(mut self, input: crate::types::EventDetails) -> Self {
        self.event_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>Additional details about the event, including event-specific metadata.</p>
    pub fn set_event_details(mut self, input: ::std::option::Option<crate::types::EventDetails>) -> Self {
        self.event_details = input;
        self
    }
    /// <p>Additional details about the event, including event-specific metadata.</p>
    pub fn get_event_details(&self) -> &::std::option::Option<crate::types::EventDetails> {
        &self.event_details
    }
    /// <p>A human-readable description of the event.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A human-readable description of the event.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A human-readable description of the event.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Consumes the builder and constructs a [`ClusterEventDetail`](crate::types::ClusterEventDetail).
    pub fn build(self) -> crate::types::ClusterEventDetail {
        crate::types::ClusterEventDetail {
            event_id: self.event_id,
            cluster_arn: self.cluster_arn,
            cluster_name: self.cluster_name,
            instance_group_name: self.instance_group_name,
            instance_id: self.instance_id,
            resource_type: self.resource_type,
            event_time: self.event_time,
            event_details: self.event_details,
            description: self.description,
        }
    }
}
