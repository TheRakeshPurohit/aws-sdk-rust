// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about an error that occurred during the node addition operation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchAddClusterNodesError {
    /// <p>The name of the instance group for which the error occurred.</p>
    pub instance_group_name: ::std::string::String,
    /// <p>The error code associated with the failure. Possible values include <code>InstanceGroupNotFound</code> and <code>InvalidInstanceGroupState</code>.</p>
    pub error_code: crate::types::BatchAddClusterNodesErrorCode,
    /// <p>The number of nodes that failed to be added to the specified instance group.</p>
    pub failed_count: i32,
    /// <p>A descriptive message providing additional details about the error.</p>
    pub message: ::std::option::Option<::std::string::String>,
}
impl BatchAddClusterNodesError {
    /// <p>The name of the instance group for which the error occurred.</p>
    pub fn instance_group_name(&self) -> &str {
        use std::ops::Deref;
        self.instance_group_name.deref()
    }
    /// <p>The error code associated with the failure. Possible values include <code>InstanceGroupNotFound</code> and <code>InvalidInstanceGroupState</code>.</p>
    pub fn error_code(&self) -> &crate::types::BatchAddClusterNodesErrorCode {
        &self.error_code
    }
    /// <p>The number of nodes that failed to be added to the specified instance group.</p>
    pub fn failed_count(&self) -> i32 {
        self.failed_count
    }
    /// <p>A descriptive message providing additional details about the error.</p>
    pub fn message(&self) -> ::std::option::Option<&str> {
        self.message.as_deref()
    }
}
impl BatchAddClusterNodesError {
    /// Creates a new builder-style object to manufacture [`BatchAddClusterNodesError`](crate::types::BatchAddClusterNodesError).
    pub fn builder() -> crate::types::builders::BatchAddClusterNodesErrorBuilder {
        crate::types::builders::BatchAddClusterNodesErrorBuilder::default()
    }
}

/// A builder for [`BatchAddClusterNodesError`](crate::types::BatchAddClusterNodesError).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct BatchAddClusterNodesErrorBuilder {
    pub(crate) instance_group_name: ::std::option::Option<::std::string::String>,
    pub(crate) error_code: ::std::option::Option<crate::types::BatchAddClusterNodesErrorCode>,
    pub(crate) failed_count: ::std::option::Option<i32>,
    pub(crate) message: ::std::option::Option<::std::string::String>,
}
impl BatchAddClusterNodesErrorBuilder {
    /// <p>The name of the instance group for which the error occurred.</p>
    /// This field is required.
    pub fn instance_group_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instance_group_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the instance group for which the error occurred.</p>
    pub fn set_instance_group_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instance_group_name = input;
        self
    }
    /// <p>The name of the instance group for which the error occurred.</p>
    pub fn get_instance_group_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.instance_group_name
    }
    /// <p>The error code associated with the failure. Possible values include <code>InstanceGroupNotFound</code> and <code>InvalidInstanceGroupState</code>.</p>
    /// This field is required.
    pub fn error_code(mut self, input: crate::types::BatchAddClusterNodesErrorCode) -> Self {
        self.error_code = ::std::option::Option::Some(input);
        self
    }
    /// <p>The error code associated with the failure. Possible values include <code>InstanceGroupNotFound</code> and <code>InvalidInstanceGroupState</code>.</p>
    pub fn set_error_code(mut self, input: ::std::option::Option<crate::types::BatchAddClusterNodesErrorCode>) -> Self {
        self.error_code = input;
        self
    }
    /// <p>The error code associated with the failure. Possible values include <code>InstanceGroupNotFound</code> and <code>InvalidInstanceGroupState</code>.</p>
    pub fn get_error_code(&self) -> &::std::option::Option<crate::types::BatchAddClusterNodesErrorCode> {
        &self.error_code
    }
    /// <p>The number of nodes that failed to be added to the specified instance group.</p>
    /// This field is required.
    pub fn failed_count(mut self, input: i32) -> Self {
        self.failed_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of nodes that failed to be added to the specified instance group.</p>
    pub fn set_failed_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.failed_count = input;
        self
    }
    /// <p>The number of nodes that failed to be added to the specified instance group.</p>
    pub fn get_failed_count(&self) -> &::std::option::Option<i32> {
        &self.failed_count
    }
    /// <p>A descriptive message providing additional details about the error.</p>
    pub fn message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A descriptive message providing additional details about the error.</p>
    pub fn set_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// <p>A descriptive message providing additional details about the error.</p>
    pub fn get_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.message
    }
    /// Consumes the builder and constructs a [`BatchAddClusterNodesError`](crate::types::BatchAddClusterNodesError).
    /// This method will fail if any of the following fields are not set:
    /// - [`instance_group_name`](crate::types::builders::BatchAddClusterNodesErrorBuilder::instance_group_name)
    /// - [`error_code`](crate::types::builders::BatchAddClusterNodesErrorBuilder::error_code)
    /// - [`failed_count`](crate::types::builders::BatchAddClusterNodesErrorBuilder::failed_count)
    pub fn build(self) -> ::std::result::Result<crate::types::BatchAddClusterNodesError, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::BatchAddClusterNodesError {
            instance_group_name: self.instance_group_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "instance_group_name",
                    "instance_group_name was not specified but it is required when building BatchAddClusterNodesError",
                )
            })?,
            error_code: self.error_code.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "error_code",
                    "error_code was not specified but it is required when building BatchAddClusterNodesError",
                )
            })?,
            failed_count: self.failed_count.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "failed_count",
                    "failed_count was not specified but it is required when building BatchAddClusterNodesError",
                )
            })?,
            message: self.message,
        })
    }
}
