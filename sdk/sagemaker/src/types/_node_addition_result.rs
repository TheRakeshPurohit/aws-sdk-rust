// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a node that was successfully added to the cluster.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct NodeAdditionResult {
    /// <p>A unique identifier assigned to the node that can be used to track its provisioning status through the <code>DescribeClusterNode</code> operation.</p>
    pub node_logical_id: ::std::string::String,
    /// <p>The name of the instance group to which the node was added.</p>
    pub instance_group_name: ::std::string::String,
    /// <p>The current status of the node. Possible values include <code>Pending</code>, <code>Running</code>, <code>Failed</code>, <code>ShuttingDown</code>, <code>SystemUpdating</code>, <code>DeepHealthCheckInProgress</code>, and <code>NotFound</code>.</p>
    pub status: crate::types::ClusterInstanceStatus,
}
impl NodeAdditionResult {
    /// <p>A unique identifier assigned to the node that can be used to track its provisioning status through the <code>DescribeClusterNode</code> operation.</p>
    pub fn node_logical_id(&self) -> &str {
        use std::ops::Deref;
        self.node_logical_id.deref()
    }
    /// <p>The name of the instance group to which the node was added.</p>
    pub fn instance_group_name(&self) -> &str {
        use std::ops::Deref;
        self.instance_group_name.deref()
    }
    /// <p>The current status of the node. Possible values include <code>Pending</code>, <code>Running</code>, <code>Failed</code>, <code>ShuttingDown</code>, <code>SystemUpdating</code>, <code>DeepHealthCheckInProgress</code>, and <code>NotFound</code>.</p>
    pub fn status(&self) -> &crate::types::ClusterInstanceStatus {
        &self.status
    }
}
impl NodeAdditionResult {
    /// Creates a new builder-style object to manufacture [`NodeAdditionResult`](crate::types::NodeAdditionResult).
    pub fn builder() -> crate::types::builders::NodeAdditionResultBuilder {
        crate::types::builders::NodeAdditionResultBuilder::default()
    }
}

/// A builder for [`NodeAdditionResult`](crate::types::NodeAdditionResult).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct NodeAdditionResultBuilder {
    pub(crate) node_logical_id: ::std::option::Option<::std::string::String>,
    pub(crate) instance_group_name: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::ClusterInstanceStatus>,
}
impl NodeAdditionResultBuilder {
    /// <p>A unique identifier assigned to the node that can be used to track its provisioning status through the <code>DescribeClusterNode</code> operation.</p>
    /// This field is required.
    pub fn node_logical_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.node_logical_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier assigned to the node that can be used to track its provisioning status through the <code>DescribeClusterNode</code> operation.</p>
    pub fn set_node_logical_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.node_logical_id = input;
        self
    }
    /// <p>A unique identifier assigned to the node that can be used to track its provisioning status through the <code>DescribeClusterNode</code> operation.</p>
    pub fn get_node_logical_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.node_logical_id
    }
    /// <p>The name of the instance group to which the node was added.</p>
    /// This field is required.
    pub fn instance_group_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instance_group_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the instance group to which the node was added.</p>
    pub fn set_instance_group_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instance_group_name = input;
        self
    }
    /// <p>The name of the instance group to which the node was added.</p>
    pub fn get_instance_group_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.instance_group_name
    }
    /// <p>The current status of the node. Possible values include <code>Pending</code>, <code>Running</code>, <code>Failed</code>, <code>ShuttingDown</code>, <code>SystemUpdating</code>, <code>DeepHealthCheckInProgress</code>, and <code>NotFound</code>.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::ClusterInstanceStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the node. Possible values include <code>Pending</code>, <code>Running</code>, <code>Failed</code>, <code>ShuttingDown</code>, <code>SystemUpdating</code>, <code>DeepHealthCheckInProgress</code>, and <code>NotFound</code>.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ClusterInstanceStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status of the node. Possible values include <code>Pending</code>, <code>Running</code>, <code>Failed</code>, <code>ShuttingDown</code>, <code>SystemUpdating</code>, <code>DeepHealthCheckInProgress</code>, and <code>NotFound</code>.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ClusterInstanceStatus> {
        &self.status
    }
    /// Consumes the builder and constructs a [`NodeAdditionResult`](crate::types::NodeAdditionResult).
    /// This method will fail if any of the following fields are not set:
    /// - [`node_logical_id`](crate::types::builders::NodeAdditionResultBuilder::node_logical_id)
    /// - [`instance_group_name`](crate::types::builders::NodeAdditionResultBuilder::instance_group_name)
    /// - [`status`](crate::types::builders::NodeAdditionResultBuilder::status)
    pub fn build(self) -> ::std::result::Result<crate::types::NodeAdditionResult, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::NodeAdditionResult {
            node_logical_id: self.node_logical_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "node_logical_id",
                    "node_logical_id was not specified but it is required when building NodeAdditionResult",
                )
            })?,
            instance_group_name: self.instance_group_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "instance_group_name",
                    "instance_group_name was not specified but it is required when building NodeAdditionResult",
                )
            })?,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building NodeAdditionResult",
                )
            })?,
        })
    }
}
