// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A summary of UltraServer resources and their current status.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UltraServerSummary {
    /// <p>The type of UltraServer, such as ml.u-p6e-gb200x72.</p>
    pub ultra_server_type: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon EC2 instance type used in the UltraServer.</p>
    pub instance_type: ::std::option::Option<crate::types::ReservedCapacityInstanceType>,
    /// <p>The number of UltraServers of this type.</p>
    pub ultra_server_count: ::std::option::Option<i32>,
    /// <p>The number of available spare instances in the UltraServers.</p>
    pub available_spare_instance_count: ::std::option::Option<i32>,
    /// <p>The total number of instances across all UltraServers of this type that are currently in an unhealthy state.</p>
    pub unhealthy_instance_count: ::std::option::Option<i32>,
}
impl UltraServerSummary {
    /// <p>The type of UltraServer, such as ml.u-p6e-gb200x72.</p>
    pub fn ultra_server_type(&self) -> ::std::option::Option<&str> {
        self.ultra_server_type.as_deref()
    }
    /// <p>The Amazon EC2 instance type used in the UltraServer.</p>
    pub fn instance_type(&self) -> ::std::option::Option<&crate::types::ReservedCapacityInstanceType> {
        self.instance_type.as_ref()
    }
    /// <p>The number of UltraServers of this type.</p>
    pub fn ultra_server_count(&self) -> ::std::option::Option<i32> {
        self.ultra_server_count
    }
    /// <p>The number of available spare instances in the UltraServers.</p>
    pub fn available_spare_instance_count(&self) -> ::std::option::Option<i32> {
        self.available_spare_instance_count
    }
    /// <p>The total number of instances across all UltraServers of this type that are currently in an unhealthy state.</p>
    pub fn unhealthy_instance_count(&self) -> ::std::option::Option<i32> {
        self.unhealthy_instance_count
    }
}
impl UltraServerSummary {
    /// Creates a new builder-style object to manufacture [`UltraServerSummary`](crate::types::UltraServerSummary).
    pub fn builder() -> crate::types::builders::UltraServerSummaryBuilder {
        crate::types::builders::UltraServerSummaryBuilder::default()
    }
}

/// A builder for [`UltraServerSummary`](crate::types::UltraServerSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UltraServerSummaryBuilder {
    pub(crate) ultra_server_type: ::std::option::Option<::std::string::String>,
    pub(crate) instance_type: ::std::option::Option<crate::types::ReservedCapacityInstanceType>,
    pub(crate) ultra_server_count: ::std::option::Option<i32>,
    pub(crate) available_spare_instance_count: ::std::option::Option<i32>,
    pub(crate) unhealthy_instance_count: ::std::option::Option<i32>,
}
impl UltraServerSummaryBuilder {
    /// <p>The type of UltraServer, such as ml.u-p6e-gb200x72.</p>
    /// This field is required.
    pub fn ultra_server_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ultra_server_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of UltraServer, such as ml.u-p6e-gb200x72.</p>
    pub fn set_ultra_server_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ultra_server_type = input;
        self
    }
    /// <p>The type of UltraServer, such as ml.u-p6e-gb200x72.</p>
    pub fn get_ultra_server_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.ultra_server_type
    }
    /// <p>The Amazon EC2 instance type used in the UltraServer.</p>
    /// This field is required.
    pub fn instance_type(mut self, input: crate::types::ReservedCapacityInstanceType) -> Self {
        self.instance_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Amazon EC2 instance type used in the UltraServer.</p>
    pub fn set_instance_type(mut self, input: ::std::option::Option<crate::types::ReservedCapacityInstanceType>) -> Self {
        self.instance_type = input;
        self
    }
    /// <p>The Amazon EC2 instance type used in the UltraServer.</p>
    pub fn get_instance_type(&self) -> &::std::option::Option<crate::types::ReservedCapacityInstanceType> {
        &self.instance_type
    }
    /// <p>The number of UltraServers of this type.</p>
    pub fn ultra_server_count(mut self, input: i32) -> Self {
        self.ultra_server_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of UltraServers of this type.</p>
    pub fn set_ultra_server_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.ultra_server_count = input;
        self
    }
    /// <p>The number of UltraServers of this type.</p>
    pub fn get_ultra_server_count(&self) -> &::std::option::Option<i32> {
        &self.ultra_server_count
    }
    /// <p>The number of available spare instances in the UltraServers.</p>
    pub fn available_spare_instance_count(mut self, input: i32) -> Self {
        self.available_spare_instance_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of available spare instances in the UltraServers.</p>
    pub fn set_available_spare_instance_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.available_spare_instance_count = input;
        self
    }
    /// <p>The number of available spare instances in the UltraServers.</p>
    pub fn get_available_spare_instance_count(&self) -> &::std::option::Option<i32> {
        &self.available_spare_instance_count
    }
    /// <p>The total number of instances across all UltraServers of this type that are currently in an unhealthy state.</p>
    pub fn unhealthy_instance_count(mut self, input: i32) -> Self {
        self.unhealthy_instance_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total number of instances across all UltraServers of this type that are currently in an unhealthy state.</p>
    pub fn set_unhealthy_instance_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.unhealthy_instance_count = input;
        self
    }
    /// <p>The total number of instances across all UltraServers of this type that are currently in an unhealthy state.</p>
    pub fn get_unhealthy_instance_count(&self) -> &::std::option::Option<i32> {
        &self.unhealthy_instance_count
    }
    /// Consumes the builder and constructs a [`UltraServerSummary`](crate::types::UltraServerSummary).
    pub fn build(self) -> crate::types::UltraServerSummary {
        crate::types::UltraServerSummary {
            ultra_server_type: self.ultra_server_type,
            instance_type: self.instance_type,
            ultra_server_count: self.ultra_server_count,
            available_spare_instance_count: self.available_spare_instance_count,
            unhealthy_instance_count: self.unhealthy_instance_count,
        }
    }
}
