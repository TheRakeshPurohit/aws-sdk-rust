// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A collection of <code>Domain</code> configuration settings to update.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DomainSettingsForUpdate {
    /// <p>A collection of <code>RStudioServerPro</code> Domain-level app settings to update. A single <code>RStudioServerPro</code> application is created for a domain.</p>
    pub r_studio_server_pro_domain_settings_for_update: ::std::option::Option<crate::types::RStudioServerProDomainSettingsForUpdate>,
    /// <p>The configuration for attaching a SageMaker AI user profile name to the execution role as a <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_control-access_monitor.html">sts:SourceIdentity key</a>. This configuration can only be modified if there are no apps in the <code>InService</code> or <code>Pending</code> state.</p>
    pub execution_role_identity_config: ::std::option::Option<crate::types::ExecutionRoleIdentityConfig>,
    /// <p>The security groups for the Amazon Virtual Private Cloud that the <code>Domain</code> uses for communication between Domain-level apps and user apps.</p>
    pub security_group_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The Trusted Identity Propagation (TIP) settings for the SageMaker domain. These settings determine how user identities from IAM Identity Center are propagated through the domain to TIP enabled Amazon Web Services services.</p>
    pub trusted_identity_propagation_settings: ::std::option::Option<crate::types::TrustedIdentityPropagationSettings>,
    /// <p>A collection of settings that configure the domain's Docker interaction.</p>
    pub docker_settings: ::std::option::Option<crate::types::DockerSettings>,
    /// <p>A collection of settings that configure the Amazon Q experience within the domain.</p>
    pub amazon_q_settings: ::std::option::Option<crate::types::AmazonQSettings>,
    /// <p>The settings that apply to an SageMaker AI domain when you use it in Amazon SageMaker Unified Studio.</p>
    pub unified_studio_settings: ::std::option::Option<crate::types::UnifiedStudioSettings>,
    /// <p>The IP address type for the domain. Specify <code>ipv4</code> for IPv4-only connectivity or <code>dualstack</code> for both IPv4 and IPv6 connectivity. When you specify <code>dualstack</code>, the subnet must support IPv6 CIDR blocks.</p>
    pub ip_address_type: ::std::option::Option<crate::types::IpAddressType>,
}
impl DomainSettingsForUpdate {
    /// <p>A collection of <code>RStudioServerPro</code> Domain-level app settings to update. A single <code>RStudioServerPro</code> application is created for a domain.</p>
    pub fn r_studio_server_pro_domain_settings_for_update(&self) -> ::std::option::Option<&crate::types::RStudioServerProDomainSettingsForUpdate> {
        self.r_studio_server_pro_domain_settings_for_update.as_ref()
    }
    /// <p>The configuration for attaching a SageMaker AI user profile name to the execution role as a <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_control-access_monitor.html">sts:SourceIdentity key</a>. This configuration can only be modified if there are no apps in the <code>InService</code> or <code>Pending</code> state.</p>
    pub fn execution_role_identity_config(&self) -> ::std::option::Option<&crate::types::ExecutionRoleIdentityConfig> {
        self.execution_role_identity_config.as_ref()
    }
    /// <p>The security groups for the Amazon Virtual Private Cloud that the <code>Domain</code> uses for communication between Domain-level apps and user apps.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.security_group_ids.is_none()`.
    pub fn security_group_ids(&self) -> &[::std::string::String] {
        self.security_group_ids.as_deref().unwrap_or_default()
    }
    /// <p>The Trusted Identity Propagation (TIP) settings for the SageMaker domain. These settings determine how user identities from IAM Identity Center are propagated through the domain to TIP enabled Amazon Web Services services.</p>
    pub fn trusted_identity_propagation_settings(&self) -> ::std::option::Option<&crate::types::TrustedIdentityPropagationSettings> {
        self.trusted_identity_propagation_settings.as_ref()
    }
    /// <p>A collection of settings that configure the domain's Docker interaction.</p>
    pub fn docker_settings(&self) -> ::std::option::Option<&crate::types::DockerSettings> {
        self.docker_settings.as_ref()
    }
    /// <p>A collection of settings that configure the Amazon Q experience within the domain.</p>
    pub fn amazon_q_settings(&self) -> ::std::option::Option<&crate::types::AmazonQSettings> {
        self.amazon_q_settings.as_ref()
    }
    /// <p>The settings that apply to an SageMaker AI domain when you use it in Amazon SageMaker Unified Studio.</p>
    pub fn unified_studio_settings(&self) -> ::std::option::Option<&crate::types::UnifiedStudioSettings> {
        self.unified_studio_settings.as_ref()
    }
    /// <p>The IP address type for the domain. Specify <code>ipv4</code> for IPv4-only connectivity or <code>dualstack</code> for both IPv4 and IPv6 connectivity. When you specify <code>dualstack</code>, the subnet must support IPv6 CIDR blocks.</p>
    pub fn ip_address_type(&self) -> ::std::option::Option<&crate::types::IpAddressType> {
        self.ip_address_type.as_ref()
    }
}
impl DomainSettingsForUpdate {
    /// Creates a new builder-style object to manufacture [`DomainSettingsForUpdate`](crate::types::DomainSettingsForUpdate).
    pub fn builder() -> crate::types::builders::DomainSettingsForUpdateBuilder {
        crate::types::builders::DomainSettingsForUpdateBuilder::default()
    }
}

/// A builder for [`DomainSettingsForUpdate`](crate::types::DomainSettingsForUpdate).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DomainSettingsForUpdateBuilder {
    pub(crate) r_studio_server_pro_domain_settings_for_update: ::std::option::Option<crate::types::RStudioServerProDomainSettingsForUpdate>,
    pub(crate) execution_role_identity_config: ::std::option::Option<crate::types::ExecutionRoleIdentityConfig>,
    pub(crate) security_group_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) trusted_identity_propagation_settings: ::std::option::Option<crate::types::TrustedIdentityPropagationSettings>,
    pub(crate) docker_settings: ::std::option::Option<crate::types::DockerSettings>,
    pub(crate) amazon_q_settings: ::std::option::Option<crate::types::AmazonQSettings>,
    pub(crate) unified_studio_settings: ::std::option::Option<crate::types::UnifiedStudioSettings>,
    pub(crate) ip_address_type: ::std::option::Option<crate::types::IpAddressType>,
}
impl DomainSettingsForUpdateBuilder {
    /// <p>A collection of <code>RStudioServerPro</code> Domain-level app settings to update. A single <code>RStudioServerPro</code> application is created for a domain.</p>
    pub fn r_studio_server_pro_domain_settings_for_update(mut self, input: crate::types::RStudioServerProDomainSettingsForUpdate) -> Self {
        self.r_studio_server_pro_domain_settings_for_update = ::std::option::Option::Some(input);
        self
    }
    /// <p>A collection of <code>RStudioServerPro</code> Domain-level app settings to update. A single <code>RStudioServerPro</code> application is created for a domain.</p>
    pub fn set_r_studio_server_pro_domain_settings_for_update(
        mut self,
        input: ::std::option::Option<crate::types::RStudioServerProDomainSettingsForUpdate>,
    ) -> Self {
        self.r_studio_server_pro_domain_settings_for_update = input;
        self
    }
    /// <p>A collection of <code>RStudioServerPro</code> Domain-level app settings to update. A single <code>RStudioServerPro</code> application is created for a domain.</p>
    pub fn get_r_studio_server_pro_domain_settings_for_update(
        &self,
    ) -> &::std::option::Option<crate::types::RStudioServerProDomainSettingsForUpdate> {
        &self.r_studio_server_pro_domain_settings_for_update
    }
    /// <p>The configuration for attaching a SageMaker AI user profile name to the execution role as a <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_control-access_monitor.html">sts:SourceIdentity key</a>. This configuration can only be modified if there are no apps in the <code>InService</code> or <code>Pending</code> state.</p>
    pub fn execution_role_identity_config(mut self, input: crate::types::ExecutionRoleIdentityConfig) -> Self {
        self.execution_role_identity_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration for attaching a SageMaker AI user profile name to the execution role as a <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_control-access_monitor.html">sts:SourceIdentity key</a>. This configuration can only be modified if there are no apps in the <code>InService</code> or <code>Pending</code> state.</p>
    pub fn set_execution_role_identity_config(mut self, input: ::std::option::Option<crate::types::ExecutionRoleIdentityConfig>) -> Self {
        self.execution_role_identity_config = input;
        self
    }
    /// <p>The configuration for attaching a SageMaker AI user profile name to the execution role as a <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_control-access_monitor.html">sts:SourceIdentity key</a>. This configuration can only be modified if there are no apps in the <code>InService</code> or <code>Pending</code> state.</p>
    pub fn get_execution_role_identity_config(&self) -> &::std::option::Option<crate::types::ExecutionRoleIdentityConfig> {
        &self.execution_role_identity_config
    }
    /// Appends an item to `security_group_ids`.
    ///
    /// To override the contents of this collection use [`set_security_group_ids`](Self::set_security_group_ids).
    ///
    /// <p>The security groups for the Amazon Virtual Private Cloud that the <code>Domain</code> uses for communication between Domain-level apps and user apps.</p>
    pub fn security_group_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.security_group_ids.unwrap_or_default();
        v.push(input.into());
        self.security_group_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>The security groups for the Amazon Virtual Private Cloud that the <code>Domain</code> uses for communication between Domain-level apps and user apps.</p>
    pub fn set_security_group_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.security_group_ids = input;
        self
    }
    /// <p>The security groups for the Amazon Virtual Private Cloud that the <code>Domain</code> uses for communication between Domain-level apps and user apps.</p>
    pub fn get_security_group_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.security_group_ids
    }
    /// <p>The Trusted Identity Propagation (TIP) settings for the SageMaker domain. These settings determine how user identities from IAM Identity Center are propagated through the domain to TIP enabled Amazon Web Services services.</p>
    pub fn trusted_identity_propagation_settings(mut self, input: crate::types::TrustedIdentityPropagationSettings) -> Self {
        self.trusted_identity_propagation_settings = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Trusted Identity Propagation (TIP) settings for the SageMaker domain. These settings determine how user identities from IAM Identity Center are propagated through the domain to TIP enabled Amazon Web Services services.</p>
    pub fn set_trusted_identity_propagation_settings(
        mut self,
        input: ::std::option::Option<crate::types::TrustedIdentityPropagationSettings>,
    ) -> Self {
        self.trusted_identity_propagation_settings = input;
        self
    }
    /// <p>The Trusted Identity Propagation (TIP) settings for the SageMaker domain. These settings determine how user identities from IAM Identity Center are propagated through the domain to TIP enabled Amazon Web Services services.</p>
    pub fn get_trusted_identity_propagation_settings(&self) -> &::std::option::Option<crate::types::TrustedIdentityPropagationSettings> {
        &self.trusted_identity_propagation_settings
    }
    /// <p>A collection of settings that configure the domain's Docker interaction.</p>
    pub fn docker_settings(mut self, input: crate::types::DockerSettings) -> Self {
        self.docker_settings = ::std::option::Option::Some(input);
        self
    }
    /// <p>A collection of settings that configure the domain's Docker interaction.</p>
    pub fn set_docker_settings(mut self, input: ::std::option::Option<crate::types::DockerSettings>) -> Self {
        self.docker_settings = input;
        self
    }
    /// <p>A collection of settings that configure the domain's Docker interaction.</p>
    pub fn get_docker_settings(&self) -> &::std::option::Option<crate::types::DockerSettings> {
        &self.docker_settings
    }
    /// <p>A collection of settings that configure the Amazon Q experience within the domain.</p>
    pub fn amazon_q_settings(mut self, input: crate::types::AmazonQSettings) -> Self {
        self.amazon_q_settings = ::std::option::Option::Some(input);
        self
    }
    /// <p>A collection of settings that configure the Amazon Q experience within the domain.</p>
    pub fn set_amazon_q_settings(mut self, input: ::std::option::Option<crate::types::AmazonQSettings>) -> Self {
        self.amazon_q_settings = input;
        self
    }
    /// <p>A collection of settings that configure the Amazon Q experience within the domain.</p>
    pub fn get_amazon_q_settings(&self) -> &::std::option::Option<crate::types::AmazonQSettings> {
        &self.amazon_q_settings
    }
    /// <p>The settings that apply to an SageMaker AI domain when you use it in Amazon SageMaker Unified Studio.</p>
    pub fn unified_studio_settings(mut self, input: crate::types::UnifiedStudioSettings) -> Self {
        self.unified_studio_settings = ::std::option::Option::Some(input);
        self
    }
    /// <p>The settings that apply to an SageMaker AI domain when you use it in Amazon SageMaker Unified Studio.</p>
    pub fn set_unified_studio_settings(mut self, input: ::std::option::Option<crate::types::UnifiedStudioSettings>) -> Self {
        self.unified_studio_settings = input;
        self
    }
    /// <p>The settings that apply to an SageMaker AI domain when you use it in Amazon SageMaker Unified Studio.</p>
    pub fn get_unified_studio_settings(&self) -> &::std::option::Option<crate::types::UnifiedStudioSettings> {
        &self.unified_studio_settings
    }
    /// <p>The IP address type for the domain. Specify <code>ipv4</code> for IPv4-only connectivity or <code>dualstack</code> for both IPv4 and IPv6 connectivity. When you specify <code>dualstack</code>, the subnet must support IPv6 CIDR blocks.</p>
    pub fn ip_address_type(mut self, input: crate::types::IpAddressType) -> Self {
        self.ip_address_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The IP address type for the domain. Specify <code>ipv4</code> for IPv4-only connectivity or <code>dualstack</code> for both IPv4 and IPv6 connectivity. When you specify <code>dualstack</code>, the subnet must support IPv6 CIDR blocks.</p>
    pub fn set_ip_address_type(mut self, input: ::std::option::Option<crate::types::IpAddressType>) -> Self {
        self.ip_address_type = input;
        self
    }
    /// <p>The IP address type for the domain. Specify <code>ipv4</code> for IPv4-only connectivity or <code>dualstack</code> for both IPv4 and IPv6 connectivity. When you specify <code>dualstack</code>, the subnet must support IPv6 CIDR blocks.</p>
    pub fn get_ip_address_type(&self) -> &::std::option::Option<crate::types::IpAddressType> {
        &self.ip_address_type
    }
    /// Consumes the builder and constructs a [`DomainSettingsForUpdate`](crate::types::DomainSettingsForUpdate).
    pub fn build(self) -> crate::types::DomainSettingsForUpdate {
        crate::types::DomainSettingsForUpdate {
            r_studio_server_pro_domain_settings_for_update: self.r_studio_server_pro_domain_settings_for_update,
            execution_role_identity_config: self.execution_role_identity_config,
            security_group_ids: self.security_group_ids,
            trusted_identity_propagation_settings: self.trusted_identity_propagation_settings,
            docker_settings: self.docker_settings,
            amazon_q_settings: self.amazon_q_settings,
            unified_studio_settings: self.unified_studio_settings,
            ip_address_type: self.ip_address_type,
        }
    }
}
