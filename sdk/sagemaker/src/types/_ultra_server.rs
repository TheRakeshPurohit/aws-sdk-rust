// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a high-performance compute server used for distributed training in SageMaker AI. An UltraServer consists of multiple instances within a shared NVLink interconnect domain.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UltraServer {
    /// <p>The unique identifier for the UltraServer.</p>
    pub ultra_server_id: ::std::option::Option<::std::string::String>,
    /// <p>The type of UltraServer, such as ml.u-p6e-gb200x72.</p>
    pub ultra_server_type: ::std::option::Option<::std::string::String>,
    /// <p>The name of the Availability Zone where the UltraServer is provisioned.</p>
    pub availability_zone: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon EC2 instance type used in the UltraServer.</p>
    pub instance_type: ::std::option::Option<crate::types::ReservedCapacityInstanceType>,
    /// <p>The total number of instances in this UltraServer.</p>
    pub total_instance_count: ::std::option::Option<i32>,
    /// <p>The number of spare instances configured for this UltraServer to provide enhanced resiliency.</p>
    pub configured_spare_instance_count: ::std::option::Option<i32>,
    /// <p>The number of instances currently available for use in this UltraServer.</p>
    pub available_instance_count: ::std::option::Option<i32>,
    /// <p>The number of instances currently in use in this UltraServer.</p>
    pub in_use_instance_count: ::std::option::Option<i32>,
    /// <p>The number of available spare instances in the UltraServer.</p>
    pub available_spare_instance_count: ::std::option::Option<i32>,
    /// <p>The number of instances in this UltraServer that are currently in an unhealthy state.</p>
    pub unhealthy_instance_count: ::std::option::Option<i32>,
    /// <p>The overall health status of the UltraServer.</p>
    pub health_status: ::std::option::Option<crate::types::UltraServerHealthStatus>,
}
impl UltraServer {
    /// <p>The unique identifier for the UltraServer.</p>
    pub fn ultra_server_id(&self) -> ::std::option::Option<&str> {
        self.ultra_server_id.as_deref()
    }
    /// <p>The type of UltraServer, such as ml.u-p6e-gb200x72.</p>
    pub fn ultra_server_type(&self) -> ::std::option::Option<&str> {
        self.ultra_server_type.as_deref()
    }
    /// <p>The name of the Availability Zone where the UltraServer is provisioned.</p>
    pub fn availability_zone(&self) -> ::std::option::Option<&str> {
        self.availability_zone.as_deref()
    }
    /// <p>The Amazon EC2 instance type used in the UltraServer.</p>
    pub fn instance_type(&self) -> ::std::option::Option<&crate::types::ReservedCapacityInstanceType> {
        self.instance_type.as_ref()
    }
    /// <p>The total number of instances in this UltraServer.</p>
    pub fn total_instance_count(&self) -> ::std::option::Option<i32> {
        self.total_instance_count
    }
    /// <p>The number of spare instances configured for this UltraServer to provide enhanced resiliency.</p>
    pub fn configured_spare_instance_count(&self) -> ::std::option::Option<i32> {
        self.configured_spare_instance_count
    }
    /// <p>The number of instances currently available for use in this UltraServer.</p>
    pub fn available_instance_count(&self) -> ::std::option::Option<i32> {
        self.available_instance_count
    }
    /// <p>The number of instances currently in use in this UltraServer.</p>
    pub fn in_use_instance_count(&self) -> ::std::option::Option<i32> {
        self.in_use_instance_count
    }
    /// <p>The number of available spare instances in the UltraServer.</p>
    pub fn available_spare_instance_count(&self) -> ::std::option::Option<i32> {
        self.available_spare_instance_count
    }
    /// <p>The number of instances in this UltraServer that are currently in an unhealthy state.</p>
    pub fn unhealthy_instance_count(&self) -> ::std::option::Option<i32> {
        self.unhealthy_instance_count
    }
    /// <p>The overall health status of the UltraServer.</p>
    pub fn health_status(&self) -> ::std::option::Option<&crate::types::UltraServerHealthStatus> {
        self.health_status.as_ref()
    }
}
impl UltraServer {
    /// Creates a new builder-style object to manufacture [`UltraServer`](crate::types::UltraServer).
    pub fn builder() -> crate::types::builders::UltraServerBuilder {
        crate::types::builders::UltraServerBuilder::default()
    }
}

/// A builder for [`UltraServer`](crate::types::UltraServer).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UltraServerBuilder {
    pub(crate) ultra_server_id: ::std::option::Option<::std::string::String>,
    pub(crate) ultra_server_type: ::std::option::Option<::std::string::String>,
    pub(crate) availability_zone: ::std::option::Option<::std::string::String>,
    pub(crate) instance_type: ::std::option::Option<crate::types::ReservedCapacityInstanceType>,
    pub(crate) total_instance_count: ::std::option::Option<i32>,
    pub(crate) configured_spare_instance_count: ::std::option::Option<i32>,
    pub(crate) available_instance_count: ::std::option::Option<i32>,
    pub(crate) in_use_instance_count: ::std::option::Option<i32>,
    pub(crate) available_spare_instance_count: ::std::option::Option<i32>,
    pub(crate) unhealthy_instance_count: ::std::option::Option<i32>,
    pub(crate) health_status: ::std::option::Option<crate::types::UltraServerHealthStatus>,
}
impl UltraServerBuilder {
    /// <p>The unique identifier for the UltraServer.</p>
    /// This field is required.
    pub fn ultra_server_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ultra_server_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for the UltraServer.</p>
    pub fn set_ultra_server_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ultra_server_id = input;
        self
    }
    /// <p>The unique identifier for the UltraServer.</p>
    pub fn get_ultra_server_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.ultra_server_id
    }
    /// <p>The type of UltraServer, such as ml.u-p6e-gb200x72.</p>
    /// This field is required.
    pub fn ultra_server_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ultra_server_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of UltraServer, such as ml.u-p6e-gb200x72.</p>
    pub fn set_ultra_server_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ultra_server_type = input;
        self
    }
    /// <p>The type of UltraServer, such as ml.u-p6e-gb200x72.</p>
    pub fn get_ultra_server_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.ultra_server_type
    }
    /// <p>The name of the Availability Zone where the UltraServer is provisioned.</p>
    /// This field is required.
    pub fn availability_zone(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.availability_zone = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the Availability Zone where the UltraServer is provisioned.</p>
    pub fn set_availability_zone(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.availability_zone = input;
        self
    }
    /// <p>The name of the Availability Zone where the UltraServer is provisioned.</p>
    pub fn get_availability_zone(&self) -> &::std::option::Option<::std::string::String> {
        &self.availability_zone
    }
    /// <p>The Amazon EC2 instance type used in the UltraServer.</p>
    /// This field is required.
    pub fn instance_type(mut self, input: crate::types::ReservedCapacityInstanceType) -> Self {
        self.instance_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Amazon EC2 instance type used in the UltraServer.</p>
    pub fn set_instance_type(mut self, input: ::std::option::Option<crate::types::ReservedCapacityInstanceType>) -> Self {
        self.instance_type = input;
        self
    }
    /// <p>The Amazon EC2 instance type used in the UltraServer.</p>
    pub fn get_instance_type(&self) -> &::std::option::Option<crate::types::ReservedCapacityInstanceType> {
        &self.instance_type
    }
    /// <p>The total number of instances in this UltraServer.</p>
    /// This field is required.
    pub fn total_instance_count(mut self, input: i32) -> Self {
        self.total_instance_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total number of instances in this UltraServer.</p>
    pub fn set_total_instance_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.total_instance_count = input;
        self
    }
    /// <p>The total number of instances in this UltraServer.</p>
    pub fn get_total_instance_count(&self) -> &::std::option::Option<i32> {
        &self.total_instance_count
    }
    /// <p>The number of spare instances configured for this UltraServer to provide enhanced resiliency.</p>
    pub fn configured_spare_instance_count(mut self, input: i32) -> Self {
        self.configured_spare_instance_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of spare instances configured for this UltraServer to provide enhanced resiliency.</p>
    pub fn set_configured_spare_instance_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.configured_spare_instance_count = input;
        self
    }
    /// <p>The number of spare instances configured for this UltraServer to provide enhanced resiliency.</p>
    pub fn get_configured_spare_instance_count(&self) -> &::std::option::Option<i32> {
        &self.configured_spare_instance_count
    }
    /// <p>The number of instances currently available for use in this UltraServer.</p>
    pub fn available_instance_count(mut self, input: i32) -> Self {
        self.available_instance_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of instances currently available for use in this UltraServer.</p>
    pub fn set_available_instance_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.available_instance_count = input;
        self
    }
    /// <p>The number of instances currently available for use in this UltraServer.</p>
    pub fn get_available_instance_count(&self) -> &::std::option::Option<i32> {
        &self.available_instance_count
    }
    /// <p>The number of instances currently in use in this UltraServer.</p>
    pub fn in_use_instance_count(mut self, input: i32) -> Self {
        self.in_use_instance_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of instances currently in use in this UltraServer.</p>
    pub fn set_in_use_instance_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.in_use_instance_count = input;
        self
    }
    /// <p>The number of instances currently in use in this UltraServer.</p>
    pub fn get_in_use_instance_count(&self) -> &::std::option::Option<i32> {
        &self.in_use_instance_count
    }
    /// <p>The number of available spare instances in the UltraServer.</p>
    pub fn available_spare_instance_count(mut self, input: i32) -> Self {
        self.available_spare_instance_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of available spare instances in the UltraServer.</p>
    pub fn set_available_spare_instance_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.available_spare_instance_count = input;
        self
    }
    /// <p>The number of available spare instances in the UltraServer.</p>
    pub fn get_available_spare_instance_count(&self) -> &::std::option::Option<i32> {
        &self.available_spare_instance_count
    }
    /// <p>The number of instances in this UltraServer that are currently in an unhealthy state.</p>
    pub fn unhealthy_instance_count(mut self, input: i32) -> Self {
        self.unhealthy_instance_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of instances in this UltraServer that are currently in an unhealthy state.</p>
    pub fn set_unhealthy_instance_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.unhealthy_instance_count = input;
        self
    }
    /// <p>The number of instances in this UltraServer that are currently in an unhealthy state.</p>
    pub fn get_unhealthy_instance_count(&self) -> &::std::option::Option<i32> {
        &self.unhealthy_instance_count
    }
    /// <p>The overall health status of the UltraServer.</p>
    pub fn health_status(mut self, input: crate::types::UltraServerHealthStatus) -> Self {
        self.health_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The overall health status of the UltraServer.</p>
    pub fn set_health_status(mut self, input: ::std::option::Option<crate::types::UltraServerHealthStatus>) -> Self {
        self.health_status = input;
        self
    }
    /// <p>The overall health status of the UltraServer.</p>
    pub fn get_health_status(&self) -> &::std::option::Option<crate::types::UltraServerHealthStatus> {
        &self.health_status
    }
    /// Consumes the builder and constructs a [`UltraServer`](crate::types::UltraServer).
    pub fn build(self) -> crate::types::UltraServer {
        crate::types::UltraServer {
            ultra_server_id: self.ultra_server_id,
            ultra_server_type: self.ultra_server_type,
            availability_zone: self.availability_zone,
            instance_type: self.instance_type,
            total_instance_count: self.total_instance_count,
            configured_spare_instance_count: self.configured_spare_instance_count,
            available_instance_count: self.available_instance_count,
            in_use_instance_count: self.in_use_instance_count,
            available_spare_instance_count: self.available_spare_instance_count,
            unhealthy_instance_count: self.unhealthy_instance_count,
            health_status: self.health_status,
        }
    }
}
