// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about an error that occurred when attempting to delete a node identified by its <code>NodeLogicalId</code>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchDeleteClusterNodeLogicalIdsError {
    /// <p>The error code associated with the failure. Possible values include <code>NodeLogicalIdNotFound</code>, <code>InvalidNodeStatus</code>, and <code>InternalError</code>.</p>
    pub code: ::std::option::Option<crate::types::BatchDeleteClusterNodesErrorCode>,
    /// <p>A descriptive message providing additional details about the error.</p>
    pub message: ::std::option::Option<::std::string::String>,
    /// <p>The <code>NodeLogicalId</code> of the node that could not be deleted.</p>
    pub node_logical_id: ::std::option::Option<::std::string::String>,
}
impl BatchDeleteClusterNodeLogicalIdsError {
    /// <p>The error code associated with the failure. Possible values include <code>NodeLogicalIdNotFound</code>, <code>InvalidNodeStatus</code>, and <code>InternalError</code>.</p>
    pub fn code(&self) -> ::std::option::Option<&crate::types::BatchDeleteClusterNodesErrorCode> {
        self.code.as_ref()
    }
    /// <p>A descriptive message providing additional details about the error.</p>
    pub fn message(&self) -> ::std::option::Option<&str> {
        self.message.as_deref()
    }
    /// <p>The <code>NodeLogicalId</code> of the node that could not be deleted.</p>
    pub fn node_logical_id(&self) -> ::std::option::Option<&str> {
        self.node_logical_id.as_deref()
    }
}
impl BatchDeleteClusterNodeLogicalIdsError {
    /// Creates a new builder-style object to manufacture [`BatchDeleteClusterNodeLogicalIdsError`](crate::types::BatchDeleteClusterNodeLogicalIdsError).
    pub fn builder() -> crate::types::builders::BatchDeleteClusterNodeLogicalIdsErrorBuilder {
        crate::types::builders::BatchDeleteClusterNodeLogicalIdsErrorBuilder::default()
    }
}

/// A builder for [`BatchDeleteClusterNodeLogicalIdsError`](crate::types::BatchDeleteClusterNodeLogicalIdsError).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct BatchDeleteClusterNodeLogicalIdsErrorBuilder {
    pub(crate) code: ::std::option::Option<crate::types::BatchDeleteClusterNodesErrorCode>,
    pub(crate) message: ::std::option::Option<::std::string::String>,
    pub(crate) node_logical_id: ::std::option::Option<::std::string::String>,
}
impl BatchDeleteClusterNodeLogicalIdsErrorBuilder {
    /// <p>The error code associated with the failure. Possible values include <code>NodeLogicalIdNotFound</code>, <code>InvalidNodeStatus</code>, and <code>InternalError</code>.</p>
    /// This field is required.
    pub fn code(mut self, input: crate::types::BatchDeleteClusterNodesErrorCode) -> Self {
        self.code = ::std::option::Option::Some(input);
        self
    }
    /// <p>The error code associated with the failure. Possible values include <code>NodeLogicalIdNotFound</code>, <code>InvalidNodeStatus</code>, and <code>InternalError</code>.</p>
    pub fn set_code(mut self, input: ::std::option::Option<crate::types::BatchDeleteClusterNodesErrorCode>) -> Self {
        self.code = input;
        self
    }
    /// <p>The error code associated with the failure. Possible values include <code>NodeLogicalIdNotFound</code>, <code>InvalidNodeStatus</code>, and <code>InternalError</code>.</p>
    pub fn get_code(&self) -> &::std::option::Option<crate::types::BatchDeleteClusterNodesErrorCode> {
        &self.code
    }
    /// <p>A descriptive message providing additional details about the error.</p>
    /// This field is required.
    pub fn message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A descriptive message providing additional details about the error.</p>
    pub fn set_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// <p>A descriptive message providing additional details about the error.</p>
    pub fn get_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.message
    }
    /// <p>The <code>NodeLogicalId</code> of the node that could not be deleted.</p>
    /// This field is required.
    pub fn node_logical_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.node_logical_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The <code>NodeLogicalId</code> of the node that could not be deleted.</p>
    pub fn set_node_logical_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.node_logical_id = input;
        self
    }
    /// <p>The <code>NodeLogicalId</code> of the node that could not be deleted.</p>
    pub fn get_node_logical_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.node_logical_id
    }
    /// Consumes the builder and constructs a [`BatchDeleteClusterNodeLogicalIdsError`](crate::types::BatchDeleteClusterNodeLogicalIdsError).
    pub fn build(self) -> crate::types::BatchDeleteClusterNodeLogicalIdsError {
        crate::types::BatchDeleteClusterNodeLogicalIdsError {
            code: self.code,
            message: self.message,
            node_logical_id: self.node_logical_id,
        }
    }
}
