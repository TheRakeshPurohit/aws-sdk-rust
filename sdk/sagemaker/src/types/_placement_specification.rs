// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies how instances should be placed on a specific UltraServer.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PlacementSpecification {
    /// <p>The unique identifier of the UltraServer where instances should be placed.</p>
    pub ultra_server_id: ::std::option::Option<::std::string::String>,
    /// <p>The number of ML compute instances required to be placed together on the same UltraServer. Minimum value of 1.</p>
    pub instance_count: ::std::option::Option<i32>,
}
impl PlacementSpecification {
    /// <p>The unique identifier of the UltraServer where instances should be placed.</p>
    pub fn ultra_server_id(&self) -> ::std::option::Option<&str> {
        self.ultra_server_id.as_deref()
    }
    /// <p>The number of ML compute instances required to be placed together on the same UltraServer. Minimum value of 1.</p>
    pub fn instance_count(&self) -> ::std::option::Option<i32> {
        self.instance_count
    }
}
impl PlacementSpecification {
    /// Creates a new builder-style object to manufacture [`PlacementSpecification`](crate::types::PlacementSpecification).
    pub fn builder() -> crate::types::builders::PlacementSpecificationBuilder {
        crate::types::builders::PlacementSpecificationBuilder::default()
    }
}

/// A builder for [`PlacementSpecification`](crate::types::PlacementSpecification).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct PlacementSpecificationBuilder {
    pub(crate) ultra_server_id: ::std::option::Option<::std::string::String>,
    pub(crate) instance_count: ::std::option::Option<i32>,
}
impl PlacementSpecificationBuilder {
    /// <p>The unique identifier of the UltraServer where instances should be placed.</p>
    pub fn ultra_server_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ultra_server_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the UltraServer where instances should be placed.</p>
    pub fn set_ultra_server_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ultra_server_id = input;
        self
    }
    /// <p>The unique identifier of the UltraServer where instances should be placed.</p>
    pub fn get_ultra_server_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.ultra_server_id
    }
    /// <p>The number of ML compute instances required to be placed together on the same UltraServer. Minimum value of 1.</p>
    /// This field is required.
    pub fn instance_count(mut self, input: i32) -> Self {
        self.instance_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of ML compute instances required to be placed together on the same UltraServer. Minimum value of 1.</p>
    pub fn set_instance_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.instance_count = input;
        self
    }
    /// <p>The number of ML compute instances required to be placed together on the same UltraServer. Minimum value of 1.</p>
    pub fn get_instance_count(&self) -> &::std::option::Option<i32> {
        &self.instance_count
    }
    /// Consumes the builder and constructs a [`PlacementSpecification`](crate::types::PlacementSpecification).
    pub fn build(self) -> crate::types::PlacementSpecification {
        crate::types::PlacementSpecification {
            ultra_server_id: self.ultra_server_id,
            instance_count: self.instance_count,
        }
    }
}
