// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration for how instances are placed and allocated within UltraServers. This is only applicable for UltraServer capacity.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct InstancePlacementConfig {
    /// <p>If set to true, allows multiple jobs to share the same UltraServer instances. If set to false, ensures this job's instances are placed on an UltraServer exclusively, with no other jobs sharing the same UltraServer. Default is false.</p>
    pub enable_multiple_jobs: ::std::option::Option<bool>,
    /// <p>A list of specifications for how instances should be placed on specific UltraServers. Maximum of 10 items is supported.</p>
    pub placement_specifications: ::std::option::Option<::std::vec::Vec<crate::types::PlacementSpecification>>,
}
impl InstancePlacementConfig {
    /// <p>If set to true, allows multiple jobs to share the same UltraServer instances. If set to false, ensures this job's instances are placed on an UltraServer exclusively, with no other jobs sharing the same UltraServer. Default is false.</p>
    pub fn enable_multiple_jobs(&self) -> ::std::option::Option<bool> {
        self.enable_multiple_jobs
    }
    /// <p>A list of specifications for how instances should be placed on specific UltraServers. Maximum of 10 items is supported.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.placement_specifications.is_none()`.
    pub fn placement_specifications(&self) -> &[crate::types::PlacementSpecification] {
        self.placement_specifications.as_deref().unwrap_or_default()
    }
}
impl InstancePlacementConfig {
    /// Creates a new builder-style object to manufacture [`InstancePlacementConfig`](crate::types::InstancePlacementConfig).
    pub fn builder() -> crate::types::builders::InstancePlacementConfigBuilder {
        crate::types::builders::InstancePlacementConfigBuilder::default()
    }
}

/// A builder for [`InstancePlacementConfig`](crate::types::InstancePlacementConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct InstancePlacementConfigBuilder {
    pub(crate) enable_multiple_jobs: ::std::option::Option<bool>,
    pub(crate) placement_specifications: ::std::option::Option<::std::vec::Vec<crate::types::PlacementSpecification>>,
}
impl InstancePlacementConfigBuilder {
    /// <p>If set to true, allows multiple jobs to share the same UltraServer instances. If set to false, ensures this job's instances are placed on an UltraServer exclusively, with no other jobs sharing the same UltraServer. Default is false.</p>
    pub fn enable_multiple_jobs(mut self, input: bool) -> Self {
        self.enable_multiple_jobs = ::std::option::Option::Some(input);
        self
    }
    /// <p>If set to true, allows multiple jobs to share the same UltraServer instances. If set to false, ensures this job's instances are placed on an UltraServer exclusively, with no other jobs sharing the same UltraServer. Default is false.</p>
    pub fn set_enable_multiple_jobs(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enable_multiple_jobs = input;
        self
    }
    /// <p>If set to true, allows multiple jobs to share the same UltraServer instances. If set to false, ensures this job's instances are placed on an UltraServer exclusively, with no other jobs sharing the same UltraServer. Default is false.</p>
    pub fn get_enable_multiple_jobs(&self) -> &::std::option::Option<bool> {
        &self.enable_multiple_jobs
    }
    /// Appends an item to `placement_specifications`.
    ///
    /// To override the contents of this collection use [`set_placement_specifications`](Self::set_placement_specifications).
    ///
    /// <p>A list of specifications for how instances should be placed on specific UltraServers. Maximum of 10 items is supported.</p>
    pub fn placement_specifications(mut self, input: crate::types::PlacementSpecification) -> Self {
        let mut v = self.placement_specifications.unwrap_or_default();
        v.push(input);
        self.placement_specifications = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of specifications for how instances should be placed on specific UltraServers. Maximum of 10 items is supported.</p>
    pub fn set_placement_specifications(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::PlacementSpecification>>) -> Self {
        self.placement_specifications = input;
        self
    }
    /// <p>A list of specifications for how instances should be placed on specific UltraServers. Maximum of 10 items is supported.</p>
    pub fn get_placement_specifications(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PlacementSpecification>> {
        &self.placement_specifications
    }
    /// Consumes the builder and constructs a [`InstancePlacementConfig`](crate::types::InstancePlacementConfig).
    pub fn build(self) -> crate::types::InstancePlacementConfig {
        crate::types::InstancePlacementConfig {
            enable_multiple_jobs: self.enable_multiple_jobs,
            placement_specifications: self.placement_specifications,
        }
    }
}
