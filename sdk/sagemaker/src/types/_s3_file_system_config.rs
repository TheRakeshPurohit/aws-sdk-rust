// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration for the custom Amazon S3 file system.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct S3FileSystemConfig {
    /// <p>The file system path where the Amazon S3 storage location will be mounted within the Amazon SageMaker Studio environment.</p>
    pub mount_path: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon S3 URI of the S3 file system configuration.</p>
    pub s3_uri: ::std::option::Option<::std::string::String>,
}
impl S3FileSystemConfig {
    /// <p>The file system path where the Amazon S3 storage location will be mounted within the Amazon SageMaker Studio environment.</p>
    pub fn mount_path(&self) -> ::std::option::Option<&str> {
        self.mount_path.as_deref()
    }
    /// <p>The Amazon S3 URI of the S3 file system configuration.</p>
    pub fn s3_uri(&self) -> ::std::option::Option<&str> {
        self.s3_uri.as_deref()
    }
}
impl S3FileSystemConfig {
    /// Creates a new builder-style object to manufacture [`S3FileSystemConfig`](crate::types::S3FileSystemConfig).
    pub fn builder() -> crate::types::builders::S3FileSystemConfigBuilder {
        crate::types::builders::S3FileSystemConfigBuilder::default()
    }
}

/// A builder for [`S3FileSystemConfig`](crate::types::S3FileSystemConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct S3FileSystemConfigBuilder {
    pub(crate) mount_path: ::std::option::Option<::std::string::String>,
    pub(crate) s3_uri: ::std::option::Option<::std::string::String>,
}
impl S3FileSystemConfigBuilder {
    /// <p>The file system path where the Amazon S3 storage location will be mounted within the Amazon SageMaker Studio environment.</p>
    pub fn mount_path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.mount_path = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The file system path where the Amazon S3 storage location will be mounted within the Amazon SageMaker Studio environment.</p>
    pub fn set_mount_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.mount_path = input;
        self
    }
    /// <p>The file system path where the Amazon S3 storage location will be mounted within the Amazon SageMaker Studio environment.</p>
    pub fn get_mount_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.mount_path
    }
    /// <p>The Amazon S3 URI of the S3 file system configuration.</p>
    /// This field is required.
    pub fn s3_uri(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.s3_uri = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon S3 URI of the S3 file system configuration.</p>
    pub fn set_s3_uri(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.s3_uri = input;
        self
    }
    /// <p>The Amazon S3 URI of the S3 file system configuration.</p>
    pub fn get_s3_uri(&self) -> &::std::option::Option<::std::string::String> {
        &self.s3_uri
    }
    /// Consumes the builder and constructs a [`S3FileSystemConfig`](crate::types::S3FileSystemConfig).
    pub fn build(self) -> crate::types::S3FileSystemConfig {
        crate::types::S3FileSystemConfig {
            mount_path: self.mount_path,
            s3_uri: self.s3_uri,
        }
    }
}
