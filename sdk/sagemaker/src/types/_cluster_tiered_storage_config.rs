// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines the configuration for managed tier checkpointing in a HyperPod cluster. Managed tier checkpointing uses multiple storage tiers, including cluster CPU memory, to provide faster checkpoint operations and improved fault tolerance for large-scale model training. The system automatically saves checkpoints at high frequency to memory and periodically persists them to durable storage, like Amazon S3.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ClusterTieredStorageConfig {
    /// <p>Specifies whether managed tier checkpointing is enabled or disabled for the HyperPod cluster. When set to <code>Enable</code>, the system installs a memory management daemon that provides disaggregated memory as a service for checkpoint storage. When set to <code>Disable</code>, the feature is turned off and the memory management daemon is removed from the cluster.</p>
    pub mode: ::std::option::Option<crate::types::ClusterConfigMode>,
    /// <p>The percentage (int) of cluster memory to allocate for checkpointing.</p>
    pub instance_memory_allocation_percentage: ::std::option::Option<i32>,
}
impl ClusterTieredStorageConfig {
    /// <p>Specifies whether managed tier checkpointing is enabled or disabled for the HyperPod cluster. When set to <code>Enable</code>, the system installs a memory management daemon that provides disaggregated memory as a service for checkpoint storage. When set to <code>Disable</code>, the feature is turned off and the memory management daemon is removed from the cluster.</p>
    pub fn mode(&self) -> ::std::option::Option<&crate::types::ClusterConfigMode> {
        self.mode.as_ref()
    }
    /// <p>The percentage (int) of cluster memory to allocate for checkpointing.</p>
    pub fn instance_memory_allocation_percentage(&self) -> ::std::option::Option<i32> {
        self.instance_memory_allocation_percentage
    }
}
impl ClusterTieredStorageConfig {
    /// Creates a new builder-style object to manufacture [`ClusterTieredStorageConfig`](crate::types::ClusterTieredStorageConfig).
    pub fn builder() -> crate::types::builders::ClusterTieredStorageConfigBuilder {
        crate::types::builders::ClusterTieredStorageConfigBuilder::default()
    }
}

/// A builder for [`ClusterTieredStorageConfig`](crate::types::ClusterTieredStorageConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ClusterTieredStorageConfigBuilder {
    pub(crate) mode: ::std::option::Option<crate::types::ClusterConfigMode>,
    pub(crate) instance_memory_allocation_percentage: ::std::option::Option<i32>,
}
impl ClusterTieredStorageConfigBuilder {
    /// <p>Specifies whether managed tier checkpointing is enabled or disabled for the HyperPod cluster. When set to <code>Enable</code>, the system installs a memory management daemon that provides disaggregated memory as a service for checkpoint storage. When set to <code>Disable</code>, the feature is turned off and the memory management daemon is removed from the cluster.</p>
    /// This field is required.
    pub fn mode(mut self, input: crate::types::ClusterConfigMode) -> Self {
        self.mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether managed tier checkpointing is enabled or disabled for the HyperPod cluster. When set to <code>Enable</code>, the system installs a memory management daemon that provides disaggregated memory as a service for checkpoint storage. When set to <code>Disable</code>, the feature is turned off and the memory management daemon is removed from the cluster.</p>
    pub fn set_mode(mut self, input: ::std::option::Option<crate::types::ClusterConfigMode>) -> Self {
        self.mode = input;
        self
    }
    /// <p>Specifies whether managed tier checkpointing is enabled or disabled for the HyperPod cluster. When set to <code>Enable</code>, the system installs a memory management daemon that provides disaggregated memory as a service for checkpoint storage. When set to <code>Disable</code>, the feature is turned off and the memory management daemon is removed from the cluster.</p>
    pub fn get_mode(&self) -> &::std::option::Option<crate::types::ClusterConfigMode> {
        &self.mode
    }
    /// <p>The percentage (int) of cluster memory to allocate for checkpointing.</p>
    pub fn instance_memory_allocation_percentage(mut self, input: i32) -> Self {
        self.instance_memory_allocation_percentage = ::std::option::Option::Some(input);
        self
    }
    /// <p>The percentage (int) of cluster memory to allocate for checkpointing.</p>
    pub fn set_instance_memory_allocation_percentage(mut self, input: ::std::option::Option<i32>) -> Self {
        self.instance_memory_allocation_percentage = input;
        self
    }
    /// <p>The percentage (int) of cluster memory to allocate for checkpointing.</p>
    pub fn get_instance_memory_allocation_percentage(&self) -> &::std::option::Option<i32> {
        &self.instance_memory_allocation_percentage
    }
    /// Consumes the builder and constructs a [`ClusterTieredStorageConfig`](crate::types::ClusterTieredStorageConfig).
    pub fn build(self) -> crate::types::ClusterTieredStorageConfig {
        crate::types::ClusterTieredStorageConfig {
            mode: self.mode,
            instance_memory_allocation_percentage: self.instance_memory_allocation_percentage,
        }
    }
}
