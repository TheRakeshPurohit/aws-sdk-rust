// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Container for parameters representing the state of machine learning features on the specified domain.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AimlOptionsOutput {
    /// <p>Container for parameters required for natural language query generation on the specified domain.</p>
    pub natural_language_query_generation_options: ::std::option::Option<crate::types::NaturalLanguageQueryGenerationOptionsOutput>,
    /// <p>Container for parameters representing the state of S3 vectors engine features on the specified domain.</p>
    pub s3_vectors_engine: ::std::option::Option<crate::types::S3VectorsEngine>,
}
impl AimlOptionsOutput {
    /// <p>Container for parameters required for natural language query generation on the specified domain.</p>
    pub fn natural_language_query_generation_options(&self) -> ::std::option::Option<&crate::types::NaturalLanguageQueryGenerationOptionsOutput> {
        self.natural_language_query_generation_options.as_ref()
    }
    /// <p>Container for parameters representing the state of S3 vectors engine features on the specified domain.</p>
    pub fn s3_vectors_engine(&self) -> ::std::option::Option<&crate::types::S3VectorsEngine> {
        self.s3_vectors_engine.as_ref()
    }
}
impl AimlOptionsOutput {
    /// Creates a new builder-style object to manufacture [`AimlOptionsOutput`](crate::types::AimlOptionsOutput).
    pub fn builder() -> crate::types::builders::AimlOptionsOutputBuilder {
        crate::types::builders::AimlOptionsOutputBuilder::default()
    }
}

/// A builder for [`AimlOptionsOutput`](crate::types::AimlOptionsOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AimlOptionsOutputBuilder {
    pub(crate) natural_language_query_generation_options: ::std::option::Option<crate::types::NaturalLanguageQueryGenerationOptionsOutput>,
    pub(crate) s3_vectors_engine: ::std::option::Option<crate::types::S3VectorsEngine>,
}
impl AimlOptionsOutputBuilder {
    /// <p>Container for parameters required for natural language query generation on the specified domain.</p>
    pub fn natural_language_query_generation_options(mut self, input: crate::types::NaturalLanguageQueryGenerationOptionsOutput) -> Self {
        self.natural_language_query_generation_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>Container for parameters required for natural language query generation on the specified domain.</p>
    pub fn set_natural_language_query_generation_options(
        mut self,
        input: ::std::option::Option<crate::types::NaturalLanguageQueryGenerationOptionsOutput>,
    ) -> Self {
        self.natural_language_query_generation_options = input;
        self
    }
    /// <p>Container for parameters required for natural language query generation on the specified domain.</p>
    pub fn get_natural_language_query_generation_options(&self) -> &::std::option::Option<crate::types::NaturalLanguageQueryGenerationOptionsOutput> {
        &self.natural_language_query_generation_options
    }
    /// <p>Container for parameters representing the state of S3 vectors engine features on the specified domain.</p>
    pub fn s3_vectors_engine(mut self, input: crate::types::S3VectorsEngine) -> Self {
        self.s3_vectors_engine = ::std::option::Option::Some(input);
        self
    }
    /// <p>Container for parameters representing the state of S3 vectors engine features on the specified domain.</p>
    pub fn set_s3_vectors_engine(mut self, input: ::std::option::Option<crate::types::S3VectorsEngine>) -> Self {
        self.s3_vectors_engine = input;
        self
    }
    /// <p>Container for parameters representing the state of S3 vectors engine features on the specified domain.</p>
    pub fn get_s3_vectors_engine(&self) -> &::std::option::Option<crate::types::S3VectorsEngine> {
        &self.s3_vectors_engine
    }
    /// Consumes the builder and constructs a [`AimlOptionsOutput`](crate::types::AimlOptionsOutput).
    pub fn build(self) -> crate::types::AimlOptionsOutput {
        crate::types::AimlOptionsOutput {
            natural_language_query_generation_options: self.natural_language_query_generation_options,
            s3_vectors_engine: self.s3_vectors_engine,
        }
    }
}
