// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about validation failures that occurred during the processing of a program set in a quantum task.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ProgramSetValidationFailure {
    /// <p>The index of the program within the program set that failed validation.</p>
    pub program_index: i64,
    /// <p>The index of the input within the program set that failed validation.</p>
    pub inputs_index: ::std::option::Option<i64>,
    /// <p>A list of error messages describing the validation failures that occurred.</p>
    pub errors: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl ProgramSetValidationFailure {
    /// <p>The index of the program within the program set that failed validation.</p>
    pub fn program_index(&self) -> i64 {
        self.program_index
    }
    /// <p>The index of the input within the program set that failed validation.</p>
    pub fn inputs_index(&self) -> ::std::option::Option<i64> {
        self.inputs_index
    }
    /// <p>A list of error messages describing the validation failures that occurred.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.errors.is_none()`.
    pub fn errors(&self) -> &[::std::string::String] {
        self.errors.as_deref().unwrap_or_default()
    }
}
impl ProgramSetValidationFailure {
    /// Creates a new builder-style object to manufacture [`ProgramSetValidationFailure`](crate::types::ProgramSetValidationFailure).
    pub fn builder() -> crate::types::builders::ProgramSetValidationFailureBuilder {
        crate::types::builders::ProgramSetValidationFailureBuilder::default()
    }
}

/// A builder for [`ProgramSetValidationFailure`](crate::types::ProgramSetValidationFailure).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ProgramSetValidationFailureBuilder {
    pub(crate) program_index: ::std::option::Option<i64>,
    pub(crate) inputs_index: ::std::option::Option<i64>,
    pub(crate) errors: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl ProgramSetValidationFailureBuilder {
    /// <p>The index of the program within the program set that failed validation.</p>
    /// This field is required.
    pub fn program_index(mut self, input: i64) -> Self {
        self.program_index = ::std::option::Option::Some(input);
        self
    }
    /// <p>The index of the program within the program set that failed validation.</p>
    pub fn set_program_index(mut self, input: ::std::option::Option<i64>) -> Self {
        self.program_index = input;
        self
    }
    /// <p>The index of the program within the program set that failed validation.</p>
    pub fn get_program_index(&self) -> &::std::option::Option<i64> {
        &self.program_index
    }
    /// <p>The index of the input within the program set that failed validation.</p>
    pub fn inputs_index(mut self, input: i64) -> Self {
        self.inputs_index = ::std::option::Option::Some(input);
        self
    }
    /// <p>The index of the input within the program set that failed validation.</p>
    pub fn set_inputs_index(mut self, input: ::std::option::Option<i64>) -> Self {
        self.inputs_index = input;
        self
    }
    /// <p>The index of the input within the program set that failed validation.</p>
    pub fn get_inputs_index(&self) -> &::std::option::Option<i64> {
        &self.inputs_index
    }
    /// Appends an item to `errors`.
    ///
    /// To override the contents of this collection use [`set_errors`](Self::set_errors).
    ///
    /// <p>A list of error messages describing the validation failures that occurred.</p>
    pub fn errors(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.errors.unwrap_or_default();
        v.push(input.into());
        self.errors = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of error messages describing the validation failures that occurred.</p>
    pub fn set_errors(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.errors = input;
        self
    }
    /// <p>A list of error messages describing the validation failures that occurred.</p>
    pub fn get_errors(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.errors
    }
    /// Consumes the builder and constructs a [`ProgramSetValidationFailure`](crate::types::ProgramSetValidationFailure).
    /// This method will fail if any of the following fields are not set:
    /// - [`program_index`](crate::types::builders::ProgramSetValidationFailureBuilder::program_index)
    pub fn build(self) -> ::std::result::Result<crate::types::ProgramSetValidationFailure, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ProgramSetValidationFailure {
            program_index: self.program_index.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "program_index",
                    "program_index was not specified but it is required when building ProgramSetValidationFailure",
                )
            })?,
            inputs_index: self.inputs_index,
            errors: self.errors,
        })
    }
}
