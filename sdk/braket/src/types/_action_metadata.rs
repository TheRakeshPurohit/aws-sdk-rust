// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains metadata about the quantum task action, including the action type and program statistics.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ActionMetadata {
    /// <p>The type of action associated with the quantum task.</p>
    pub action_type: ::std::string::String,
    /// <p>The number of programs in a program set. This is only available for a Program Set.</p>
    pub program_count: ::std::option::Option<i64>,
    /// <p>The number of executables in a program set. This is only available for a Program Set.</p>
    pub executable_count: ::std::option::Option<i64>,
}
impl ActionMetadata {
    /// <p>The type of action associated with the quantum task.</p>
    pub fn action_type(&self) -> &str {
        use std::ops::Deref;
        self.action_type.deref()
    }
    /// <p>The number of programs in a program set. This is only available for a Program Set.</p>
    pub fn program_count(&self) -> ::std::option::Option<i64> {
        self.program_count
    }
    /// <p>The number of executables in a program set. This is only available for a Program Set.</p>
    pub fn executable_count(&self) -> ::std::option::Option<i64> {
        self.executable_count
    }
}
impl ActionMetadata {
    /// Creates a new builder-style object to manufacture [`ActionMetadata`](crate::types::ActionMetadata).
    pub fn builder() -> crate::types::builders::ActionMetadataBuilder {
        crate::types::builders::ActionMetadataBuilder::default()
    }
}

/// A builder for [`ActionMetadata`](crate::types::ActionMetadata).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ActionMetadataBuilder {
    pub(crate) action_type: ::std::option::Option<::std::string::String>,
    pub(crate) program_count: ::std::option::Option<i64>,
    pub(crate) executable_count: ::std::option::Option<i64>,
}
impl ActionMetadataBuilder {
    /// <p>The type of action associated with the quantum task.</p>
    /// This field is required.
    pub fn action_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.action_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of action associated with the quantum task.</p>
    pub fn set_action_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.action_type = input;
        self
    }
    /// <p>The type of action associated with the quantum task.</p>
    pub fn get_action_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.action_type
    }
    /// <p>The number of programs in a program set. This is only available for a Program Set.</p>
    pub fn program_count(mut self, input: i64) -> Self {
        self.program_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of programs in a program set. This is only available for a Program Set.</p>
    pub fn set_program_count(mut self, input: ::std::option::Option<i64>) -> Self {
        self.program_count = input;
        self
    }
    /// <p>The number of programs in a program set. This is only available for a Program Set.</p>
    pub fn get_program_count(&self) -> &::std::option::Option<i64> {
        &self.program_count
    }
    /// <p>The number of executables in a program set. This is only available for a Program Set.</p>
    pub fn executable_count(mut self, input: i64) -> Self {
        self.executable_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of executables in a program set. This is only available for a Program Set.</p>
    pub fn set_executable_count(mut self, input: ::std::option::Option<i64>) -> Self {
        self.executable_count = input;
        self
    }
    /// <p>The number of executables in a program set. This is only available for a Program Set.</p>
    pub fn get_executable_count(&self) -> &::std::option::Option<i64> {
        &self.executable_count
    }
    /// Consumes the builder and constructs a [`ActionMetadata`](crate::types::ActionMetadata).
    /// This method will fail if any of the following fields are not set:
    /// - [`action_type`](crate::types::builders::ActionMetadataBuilder::action_type)
    pub fn build(self) -> ::std::result::Result<crate::types::ActionMetadata, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ActionMetadata {
            action_type: self.action_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "action_type",
                    "action_type was not specified but it is required when building ActionMetadata",
                )
            })?,
            program_count: self.program_count,
            executable_count: self.executable_count,
        })
    }
}
