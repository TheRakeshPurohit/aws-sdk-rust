// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The list of types of related items and their parameters to use for filtering.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum RelatedItemTypeFilter {
    /// <p>A filter for related items of type <code>Comment</code>.</p>
    Comment(crate::types::CommentFilter),
    /// <p>Represents the Amazon Connect case to be created as a related item.</p>
    ConnectCase(crate::types::ConnectCaseFilter),
    /// <p>A filter for related items of type <code>Contact</code>.</p>
    Contact(crate::types::ContactFilter),
    /// <p>Represents the content of a <code>Custom</code> type related item.</p>
    Custom(crate::types::CustomFilter),
    /// <p>A filter for related items of this type of <code>File</code>.</p>
    File(crate::types::FileFilter),
    /// <p>Filter for related items of type <code>SLA</code>.</p>
    Sla(crate::types::SlaFilter),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl RelatedItemTypeFilter {
    /// Tries to convert the enum instance into [`Comment`](crate::types::RelatedItemTypeFilter::Comment), extracting the inner [`CommentFilter`](crate::types::CommentFilter).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_comment(&self) -> ::std::result::Result<&crate::types::CommentFilter, &Self> {
        if let RelatedItemTypeFilter::Comment(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Comment`](crate::types::RelatedItemTypeFilter::Comment).
    pub fn is_comment(&self) -> bool {
        self.as_comment().is_ok()
    }
    /// Tries to convert the enum instance into [`ConnectCase`](crate::types::RelatedItemTypeFilter::ConnectCase), extracting the inner [`ConnectCaseFilter`](crate::types::ConnectCaseFilter).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_connect_case(&self) -> ::std::result::Result<&crate::types::ConnectCaseFilter, &Self> {
        if let RelatedItemTypeFilter::ConnectCase(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`ConnectCase`](crate::types::RelatedItemTypeFilter::ConnectCase).
    pub fn is_connect_case(&self) -> bool {
        self.as_connect_case().is_ok()
    }
    /// Tries to convert the enum instance into [`Contact`](crate::types::RelatedItemTypeFilter::Contact), extracting the inner [`ContactFilter`](crate::types::ContactFilter).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_contact(&self) -> ::std::result::Result<&crate::types::ContactFilter, &Self> {
        if let RelatedItemTypeFilter::Contact(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Contact`](crate::types::RelatedItemTypeFilter::Contact).
    pub fn is_contact(&self) -> bool {
        self.as_contact().is_ok()
    }
    /// Tries to convert the enum instance into [`Custom`](crate::types::RelatedItemTypeFilter::Custom), extracting the inner [`CustomFilter`](crate::types::CustomFilter).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_custom(&self) -> ::std::result::Result<&crate::types::CustomFilter, &Self> {
        if let RelatedItemTypeFilter::Custom(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Custom`](crate::types::RelatedItemTypeFilter::Custom).
    pub fn is_custom(&self) -> bool {
        self.as_custom().is_ok()
    }
    /// Tries to convert the enum instance into [`File`](crate::types::RelatedItemTypeFilter::File), extracting the inner [`FileFilter`](crate::types::FileFilter).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_file(&self) -> ::std::result::Result<&crate::types::FileFilter, &Self> {
        if let RelatedItemTypeFilter::File(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`File`](crate::types::RelatedItemTypeFilter::File).
    pub fn is_file(&self) -> bool {
        self.as_file().is_ok()
    }
    /// Tries to convert the enum instance into [`Sla`](crate::types::RelatedItemTypeFilter::Sla), extracting the inner [`SlaFilter`](crate::types::SlaFilter).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_sla(&self) -> ::std::result::Result<&crate::types::SlaFilter, &Self> {
        if let RelatedItemTypeFilter::Sla(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Sla`](crate::types::RelatedItemTypeFilter::Sla).
    pub fn is_sla(&self) -> bool {
        self.as_sla().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
