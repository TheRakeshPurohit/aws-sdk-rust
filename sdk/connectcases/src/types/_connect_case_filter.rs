// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A filter for related items of type <code>ConnectCase</code>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ConnectCaseFilter {
    /// <p>A unique identifier of the case.</p>
    pub case_id: ::std::option::Option<::std::string::String>,
}
impl ConnectCaseFilter {
    /// <p>A unique identifier of the case.</p>
    pub fn case_id(&self) -> ::std::option::Option<&str> {
        self.case_id.as_deref()
    }
}
impl ConnectCaseFilter {
    /// Creates a new builder-style object to manufacture [`ConnectCaseFilter`](crate::types::ConnectCaseFilter).
    pub fn builder() -> crate::types::builders::ConnectCaseFilterBuilder {
        crate::types::builders::ConnectCaseFilterBuilder::default()
    }
}

/// A builder for [`ConnectCaseFilter`](crate::types::ConnectCaseFilter).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ConnectCaseFilterBuilder {
    pub(crate) case_id: ::std::option::Option<::std::string::String>,
}
impl ConnectCaseFilterBuilder {
    /// <p>A unique identifier of the case.</p>
    pub fn case_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.case_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier of the case.</p>
    pub fn set_case_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.case_id = input;
        self
    }
    /// <p>A unique identifier of the case.</p>
    pub fn get_case_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.case_id
    }
    /// Consumes the builder and constructs a [`ConnectCaseFilter`](crate::types::ConnectCaseFilter).
    pub fn build(self) -> crate::types::ConnectCaseFilter {
        crate::types::ConnectCaseFilter { case_id: self.case_id }
    }
}
