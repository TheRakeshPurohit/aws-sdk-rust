// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// A filter for related items of type Custom
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CustomFilter {
    /// Filter conditions for custom fields
    pub fields: ::std::option::Option<crate::types::CustomFieldsFilter>,
}
impl CustomFilter {
    /// Filter conditions for custom fields
    pub fn fields(&self) -> ::std::option::Option<&crate::types::CustomFieldsFilter> {
        self.fields.as_ref()
    }
}
impl CustomFilter {
    /// Creates a new builder-style object to manufacture [`CustomFilter`](crate::types::CustomFilter).
    pub fn builder() -> crate::types::builders::CustomFilterBuilder {
        crate::types::builders::CustomFilterBuilder::default()
    }
}

/// A builder for [`CustomFilter`](crate::types::CustomFilter).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CustomFilterBuilder {
    pub(crate) fields: ::std::option::Option<crate::types::CustomFieldsFilter>,
}
impl CustomFilterBuilder {
    /// Filter conditions for custom fields
    pub fn fields(mut self, input: crate::types::CustomFieldsFilter) -> Self {
        self.fields = ::std::option::Option::Some(input);
        self
    }
    /// Filter conditions for custom fields
    pub fn set_fields(mut self, input: ::std::option::Option<crate::types::CustomFieldsFilter>) -> Self {
        self.fields = input;
        self
    }
    /// Filter conditions for custom fields
    pub fn get_fields(&self) -> &::std::option::Option<crate::types::CustomFieldsFilter> {
        &self.fields
    }
    /// Consumes the builder and constructs a [`CustomFilter`](crate::types::CustomFilter).
    pub fn build(self) -> crate::types::CustomFilter {
        crate::types::CustomFilter { fields: self.fields }
    }
}
