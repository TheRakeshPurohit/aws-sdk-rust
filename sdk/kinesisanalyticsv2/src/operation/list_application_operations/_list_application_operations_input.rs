// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A request for a list of operations performed on an application.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListApplicationOperationsInput {
    /// <p>The name of the application.</p>
    pub application_name: ::std::option::Option<::std::string::String>,
    /// <p>The limit on the number of records to be returned in the response.</p>
    pub limit: ::std::option::Option<i32>,
    /// <p>A pagination token that can be used in a subsequent request.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The type of operation that is performed on an application.</p>
    pub operation: ::std::option::Option<::std::string::String>,
    /// <p>The status of the operation.</p>
    pub operation_status: ::std::option::Option<crate::types::OperationStatus>,
}
impl ListApplicationOperationsInput {
    /// <p>The name of the application.</p>
    pub fn application_name(&self) -> ::std::option::Option<&str> {
        self.application_name.as_deref()
    }
    /// <p>The limit on the number of records to be returned in the response.</p>
    pub fn limit(&self) -> ::std::option::Option<i32> {
        self.limit
    }
    /// <p>A pagination token that can be used in a subsequent request.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The type of operation that is performed on an application.</p>
    pub fn operation(&self) -> ::std::option::Option<&str> {
        self.operation.as_deref()
    }
    /// <p>The status of the operation.</p>
    pub fn operation_status(&self) -> ::std::option::Option<&crate::types::OperationStatus> {
        self.operation_status.as_ref()
    }
}
impl ListApplicationOperationsInput {
    /// Creates a new builder-style object to manufacture [`ListApplicationOperationsInput`](crate::operation::list_application_operations::ListApplicationOperationsInput).
    pub fn builder() -> crate::operation::list_application_operations::builders::ListApplicationOperationsInputBuilder {
        crate::operation::list_application_operations::builders::ListApplicationOperationsInputBuilder::default()
    }
}

/// A builder for [`ListApplicationOperationsInput`](crate::operation::list_application_operations::ListApplicationOperationsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListApplicationOperationsInputBuilder {
    pub(crate) application_name: ::std::option::Option<::std::string::String>,
    pub(crate) limit: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) operation: ::std::option::Option<::std::string::String>,
    pub(crate) operation_status: ::std::option::Option<crate::types::OperationStatus>,
}
impl ListApplicationOperationsInputBuilder {
    /// <p>The name of the application.</p>
    /// This field is required.
    pub fn application_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.application_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the application.</p>
    pub fn set_application_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.application_name = input;
        self
    }
    /// <p>The name of the application.</p>
    pub fn get_application_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.application_name
    }
    /// <p>The limit on the number of records to be returned in the response.</p>
    pub fn limit(mut self, input: i32) -> Self {
        self.limit = ::std::option::Option::Some(input);
        self
    }
    /// <p>The limit on the number of records to be returned in the response.</p>
    pub fn set_limit(mut self, input: ::std::option::Option<i32>) -> Self {
        self.limit = input;
        self
    }
    /// <p>The limit on the number of records to be returned in the response.</p>
    pub fn get_limit(&self) -> &::std::option::Option<i32> {
        &self.limit
    }
    /// <p>A pagination token that can be used in a subsequent request.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A pagination token that can be used in a subsequent request.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>A pagination token that can be used in a subsequent request.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The type of operation that is performed on an application.</p>
    pub fn operation(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.operation = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of operation that is performed on an application.</p>
    pub fn set_operation(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.operation = input;
        self
    }
    /// <p>The type of operation that is performed on an application.</p>
    pub fn get_operation(&self) -> &::std::option::Option<::std::string::String> {
        &self.operation
    }
    /// <p>The status of the operation.</p>
    pub fn operation_status(mut self, input: crate::types::OperationStatus) -> Self {
        self.operation_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the operation.</p>
    pub fn set_operation_status(mut self, input: ::std::option::Option<crate::types::OperationStatus>) -> Self {
        self.operation_status = input;
        self
    }
    /// <p>The status of the operation.</p>
    pub fn get_operation_status(&self) -> &::std::option::Option<crate::types::OperationStatus> {
        &self.operation_status
    }
    /// Consumes the builder and constructs a [`ListApplicationOperationsInput`](crate::operation::list_application_operations::ListApplicationOperationsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_application_operations::ListApplicationOperationsInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::list_application_operations::ListApplicationOperationsInput {
            application_name: self.application_name,
            limit: self.limit,
            next_token: self.next_token,
            operation: self.operation,
            operation_status: self.operation_status,
        })
    }
}
