// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The encryption configuration of your IAM Identity Center instance, including the key type, KMS key ARN, and current encryption status.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EncryptionConfigurationDetails {
    /// <p>The type of KMS key used for encryption.</p>
    pub key_type: ::std::option::Option<crate::types::KmsKeyType>,
    /// <p>The ARN of the KMS key currently used to encrypt data in your IAM Identity Center instance.</p>
    pub kms_key_arn: ::std::option::Option<::std::string::String>,
    /// <p>The current status of encryption configuration.</p>
    pub encryption_status: ::std::option::Option<crate::types::KmsKeyStatus>,
    /// <p>Provides additional context about the current encryption status. This field is particularly useful when the encryption status is UPDATE_FAILED. When encryption configuration update fails, this field contains information about the cause, which may include KMS key access issues, key not found errors, invalid key configuration, key in an invalid state, or a disabled key.</p>
    pub encryption_status_reason: ::std::option::Option<::std::string::String>,
}
impl EncryptionConfigurationDetails {
    /// <p>The type of KMS key used for encryption.</p>
    pub fn key_type(&self) -> ::std::option::Option<&crate::types::KmsKeyType> {
        self.key_type.as_ref()
    }
    /// <p>The ARN of the KMS key currently used to encrypt data in your IAM Identity Center instance.</p>
    pub fn kms_key_arn(&self) -> ::std::option::Option<&str> {
        self.kms_key_arn.as_deref()
    }
    /// <p>The current status of encryption configuration.</p>
    pub fn encryption_status(&self) -> ::std::option::Option<&crate::types::KmsKeyStatus> {
        self.encryption_status.as_ref()
    }
    /// <p>Provides additional context about the current encryption status. This field is particularly useful when the encryption status is UPDATE_FAILED. When encryption configuration update fails, this field contains information about the cause, which may include KMS key access issues, key not found errors, invalid key configuration, key in an invalid state, or a disabled key.</p>
    pub fn encryption_status_reason(&self) -> ::std::option::Option<&str> {
        self.encryption_status_reason.as_deref()
    }
}
impl EncryptionConfigurationDetails {
    /// Creates a new builder-style object to manufacture [`EncryptionConfigurationDetails`](crate::types::EncryptionConfigurationDetails).
    pub fn builder() -> crate::types::builders::EncryptionConfigurationDetailsBuilder {
        crate::types::builders::EncryptionConfigurationDetailsBuilder::default()
    }
}

/// A builder for [`EncryptionConfigurationDetails`](crate::types::EncryptionConfigurationDetails).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct EncryptionConfigurationDetailsBuilder {
    pub(crate) key_type: ::std::option::Option<crate::types::KmsKeyType>,
    pub(crate) kms_key_arn: ::std::option::Option<::std::string::String>,
    pub(crate) encryption_status: ::std::option::Option<crate::types::KmsKeyStatus>,
    pub(crate) encryption_status_reason: ::std::option::Option<::std::string::String>,
}
impl EncryptionConfigurationDetailsBuilder {
    /// <p>The type of KMS key used for encryption.</p>
    pub fn key_type(mut self, input: crate::types::KmsKeyType) -> Self {
        self.key_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of KMS key used for encryption.</p>
    pub fn set_key_type(mut self, input: ::std::option::Option<crate::types::KmsKeyType>) -> Self {
        self.key_type = input;
        self
    }
    /// <p>The type of KMS key used for encryption.</p>
    pub fn get_key_type(&self) -> &::std::option::Option<crate::types::KmsKeyType> {
        &self.key_type
    }
    /// <p>The ARN of the KMS key currently used to encrypt data in your IAM Identity Center instance.</p>
    pub fn kms_key_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.kms_key_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the KMS key currently used to encrypt data in your IAM Identity Center instance.</p>
    pub fn set_kms_key_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.kms_key_arn = input;
        self
    }
    /// <p>The ARN of the KMS key currently used to encrypt data in your IAM Identity Center instance.</p>
    pub fn get_kms_key_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.kms_key_arn
    }
    /// <p>The current status of encryption configuration.</p>
    pub fn encryption_status(mut self, input: crate::types::KmsKeyStatus) -> Self {
        self.encryption_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of encryption configuration.</p>
    pub fn set_encryption_status(mut self, input: ::std::option::Option<crate::types::KmsKeyStatus>) -> Self {
        self.encryption_status = input;
        self
    }
    /// <p>The current status of encryption configuration.</p>
    pub fn get_encryption_status(&self) -> &::std::option::Option<crate::types::KmsKeyStatus> {
        &self.encryption_status
    }
    /// <p>Provides additional context about the current encryption status. This field is particularly useful when the encryption status is UPDATE_FAILED. When encryption configuration update fails, this field contains information about the cause, which may include KMS key access issues, key not found errors, invalid key configuration, key in an invalid state, or a disabled key.</p>
    pub fn encryption_status_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.encryption_status_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Provides additional context about the current encryption status. This field is particularly useful when the encryption status is UPDATE_FAILED. When encryption configuration update fails, this field contains information about the cause, which may include KMS key access issues, key not found errors, invalid key configuration, key in an invalid state, or a disabled key.</p>
    pub fn set_encryption_status_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.encryption_status_reason = input;
        self
    }
    /// <p>Provides additional context about the current encryption status. This field is particularly useful when the encryption status is UPDATE_FAILED. When encryption configuration update fails, this field contains information about the cause, which may include KMS key access issues, key not found errors, invalid key configuration, key in an invalid state, or a disabled key.</p>
    pub fn get_encryption_status_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.encryption_status_reason
    }
    /// Consumes the builder and constructs a [`EncryptionConfigurationDetails`](crate::types::EncryptionConfigurationDetails).
    pub fn build(self) -> crate::types::EncryptionConfigurationDetails {
        crate::types::EncryptionConfigurationDetails {
            key_type: self.key_type,
            kms_key_arn: self.kms_key_arn,
            encryption_status: self.encryption_status,
            encryption_status_reason: self.encryption_status_reason,
        }
    }
}
