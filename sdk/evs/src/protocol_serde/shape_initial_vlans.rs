// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_initial_vlans(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::InitialVlans,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.vmk_management {
        #[allow(unused_mut)]
        let mut object_2 = object.key("vmkManagement").start_object();
        crate::protocol_serde::shape_initial_vlan_info::ser_initial_vlan_info(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.vm_management {
        #[allow(unused_mut)]
        let mut object_4 = object.key("vmManagement").start_object();
        crate::protocol_serde::shape_initial_vlan_info::ser_initial_vlan_info(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.v_motion {
        #[allow(unused_mut)]
        let mut object_6 = object.key("vMotion").start_object();
        crate::protocol_serde::shape_initial_vlan_info::ser_initial_vlan_info(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.v_san {
        #[allow(unused_mut)]
        let mut object_8 = object.key("vSan").start_object();
        crate::protocol_serde::shape_initial_vlan_info::ser_initial_vlan_info(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.v_tep {
        #[allow(unused_mut)]
        let mut object_10 = object.key("vTep").start_object();
        crate::protocol_serde::shape_initial_vlan_info::ser_initial_vlan_info(&mut object_10, var_9)?;
        object_10.finish();
    }
    if let Some(var_11) = &input.edge_v_tep {
        #[allow(unused_mut)]
        let mut object_12 = object.key("edgeVTep").start_object();
        crate::protocol_serde::shape_initial_vlan_info::ser_initial_vlan_info(&mut object_12, var_11)?;
        object_12.finish();
    }
    if let Some(var_13) = &input.nsx_uplink {
        #[allow(unused_mut)]
        let mut object_14 = object.key("nsxUplink").start_object();
        crate::protocol_serde::shape_initial_vlan_info::ser_initial_vlan_info(&mut object_14, var_13)?;
        object_14.finish();
    }
    if let Some(var_15) = &input.hcx {
        #[allow(unused_mut)]
        let mut object_16 = object.key("hcx").start_object();
        crate::protocol_serde::shape_initial_vlan_info::ser_initial_vlan_info(&mut object_16, var_15)?;
        object_16.finish();
    }
    if let Some(var_17) = &input.expansion_vlan1 {
        #[allow(unused_mut)]
        let mut object_18 = object.key("expansionVlan1").start_object();
        crate::protocol_serde::shape_initial_vlan_info::ser_initial_vlan_info(&mut object_18, var_17)?;
        object_18.finish();
    }
    if let Some(var_19) = &input.expansion_vlan2 {
        #[allow(unused_mut)]
        let mut object_20 = object.key("expansionVlan2").start_object();
        crate::protocol_serde::shape_initial_vlan_info::ser_initial_vlan_info(&mut object_20, var_19)?;
        object_20.finish();
    }
    if input.is_hcx_public {
        object.key("isHcxPublic").boolean(input.is_hcx_public);
    }
    if let Some(var_21) = &input.hcx_network_acl_id {
        object.key("hcxNetworkAclId").string(var_21.as_str());
    }
    Ok(())
}
