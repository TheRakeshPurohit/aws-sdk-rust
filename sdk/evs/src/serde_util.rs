// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn validation_exception_correct_errors(
    mut builder: crate::types::error::builders::ValidationExceptionBuilder,
) -> crate::types::error::builders::ValidationExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.reason.is_none() {
        builder.reason = "no value was set".parse::<crate::types::ValidationExceptionReason>().ok()
    }
    builder
}

pub(crate) fn throttling_exception_correct_errors(
    mut builder: crate::types::error::builders::ThrottlingExceptionBuilder,
) -> crate::types::error::builders::ThrottlingExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_not_found_exception_correct_errors(
    mut builder: crate::types::error::builders::ResourceNotFoundExceptionBuilder,
) -> crate::types::error::builders::ResourceNotFoundExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    builder
}

pub(crate) fn service_quota_exceeded_exception_correct_errors(
    mut builder: crate::types::error::builders::ServiceQuotaExceededExceptionBuilder,
) -> crate::types::error::builders::ServiceQuotaExceededExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn tag_policy_exception_correct_errors(
    mut builder: crate::types::error::builders::TagPolicyExceptionBuilder,
) -> crate::types::error::builders::TagPolicyExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn too_many_tags_exception_correct_errors(
    mut builder: crate::types::error::builders::TooManyTagsExceptionBuilder,
) -> crate::types::error::builders::TooManyTagsExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn connectivity_info_correct_errors(
    mut builder: crate::types::builders::ConnectivityInfoBuilder,
) -> crate::types::builders::ConnectivityInfoBuilder {
    if builder.private_route_server_peerings.is_none() {
        builder.private_route_server_peerings = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_field_correct_errors(
    mut builder: crate::types::builders::ValidationExceptionFieldBuilder,
) -> crate::types::builders::ValidationExceptionFieldBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn vcf_hostnames_correct_errors(mut builder: crate::types::builders::VcfHostnamesBuilder) -> crate::types::builders::VcfHostnamesBuilder {
    if builder.v_center.is_none() {
        builder.v_center = Some(Default::default())
    }
    if builder.nsx.is_none() {
        builder.nsx = Some(Default::default())
    }
    if builder.nsx_manager1.is_none() {
        builder.nsx_manager1 = Some(Default::default())
    }
    if builder.nsx_manager2.is_none() {
        builder.nsx_manager2 = Some(Default::default())
    }
    if builder.nsx_manager3.is_none() {
        builder.nsx_manager3 = Some(Default::default())
    }
    if builder.nsx_edge1.is_none() {
        builder.nsx_edge1 = Some(Default::default())
    }
    if builder.nsx_edge2.is_none() {
        builder.nsx_edge2 = Some(Default::default())
    }
    if builder.sddc_manager.is_none() {
        builder.sddc_manager = Some(Default::default())
    }
    if builder.cloud_builder.is_none() {
        builder.cloud_builder = Some(Default::default())
    }
    builder
}

pub(crate) fn license_info_correct_errors(mut builder: crate::types::builders::LicenseInfoBuilder) -> crate::types::builders::LicenseInfoBuilder {
    if builder.solution_key.is_none() {
        builder.solution_key = Some(Default::default())
    }
    if builder.vsan_key.is_none() {
        builder.vsan_key = Some(Default::default())
    }
    builder
}
