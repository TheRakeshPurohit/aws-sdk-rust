// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An Elastic IP address association with the elastic network interface in the VLAN subnet.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EipAssociation {
    /// <p>A unique ID for the elastic IP address association with the VLAN subnet.</p>
    pub association_id: ::std::option::Option<::std::string::String>,
    /// <p>The Elastic IP address allocation ID.</p>
    pub allocation_id: ::std::option::Option<::std::string::String>,
    /// <p>The Elastic IP address.</p>
    pub ip_address: ::std::option::Option<::std::string::String>,
}
impl EipAssociation {
    /// <p>A unique ID for the elastic IP address association with the VLAN subnet.</p>
    pub fn association_id(&self) -> ::std::option::Option<&str> {
        self.association_id.as_deref()
    }
    /// <p>The Elastic IP address allocation ID.</p>
    pub fn allocation_id(&self) -> ::std::option::Option<&str> {
        self.allocation_id.as_deref()
    }
    /// <p>The Elastic IP address.</p>
    pub fn ip_address(&self) -> ::std::option::Option<&str> {
        self.ip_address.as_deref()
    }
}
impl EipAssociation {
    /// Creates a new builder-style object to manufacture [`EipAssociation`](crate::types::EipAssociation).
    pub fn builder() -> crate::types::builders::EipAssociationBuilder {
        crate::types::builders::EipAssociationBuilder::default()
    }
}

/// A builder for [`EipAssociation`](crate::types::EipAssociation).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct EipAssociationBuilder {
    pub(crate) association_id: ::std::option::Option<::std::string::String>,
    pub(crate) allocation_id: ::std::option::Option<::std::string::String>,
    pub(crate) ip_address: ::std::option::Option<::std::string::String>,
}
impl EipAssociationBuilder {
    /// <p>A unique ID for the elastic IP address association with the VLAN subnet.</p>
    pub fn association_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.association_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique ID for the elastic IP address association with the VLAN subnet.</p>
    pub fn set_association_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.association_id = input;
        self
    }
    /// <p>A unique ID for the elastic IP address association with the VLAN subnet.</p>
    pub fn get_association_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.association_id
    }
    /// <p>The Elastic IP address allocation ID.</p>
    pub fn allocation_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.allocation_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Elastic IP address allocation ID.</p>
    pub fn set_allocation_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.allocation_id = input;
        self
    }
    /// <p>The Elastic IP address allocation ID.</p>
    pub fn get_allocation_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.allocation_id
    }
    /// <p>The Elastic IP address.</p>
    pub fn ip_address(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ip_address = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Elastic IP address.</p>
    pub fn set_ip_address(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ip_address = input;
        self
    }
    /// <p>The Elastic IP address.</p>
    pub fn get_ip_address(&self) -> &::std::option::Option<::std::string::String> {
        &self.ip_address
    }
    /// Consumes the builder and constructs a [`EipAssociation`](crate::types::EipAssociation).
    pub fn build(self) -> crate::types::EipAssociation {
        crate::types::EipAssociation {
            association_id: self.association_id,
            allocation_id: self.allocation_id,
            ip_address: self.ip_address,
        }
    }
}
