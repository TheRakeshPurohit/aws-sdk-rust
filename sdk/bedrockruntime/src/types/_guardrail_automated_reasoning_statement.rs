// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A logical statement that includes both formal logic representation and natural language explanation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GuardrailAutomatedReasoningStatement {
    /// <p>The formal logical representation of the statement.</p>
    pub logic: ::std::option::Option<::std::string::String>,
    /// <p>The natural language explanation of the logical statement.</p>
    pub natural_language: ::std::option::Option<::std::string::String>,
}
impl GuardrailAutomatedReasoningStatement {
    /// <p>The formal logical representation of the statement.</p>
    pub fn logic(&self) -> ::std::option::Option<&str> {
        self.logic.as_deref()
    }
    /// <p>The natural language explanation of the logical statement.</p>
    pub fn natural_language(&self) -> ::std::option::Option<&str> {
        self.natural_language.as_deref()
    }
}
impl ::std::fmt::Debug for GuardrailAutomatedReasoningStatement {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GuardrailAutomatedReasoningStatement");
        formatter.field("logic", &"*** Sensitive Data Redacted ***");
        formatter.field("natural_language", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl GuardrailAutomatedReasoningStatement {
    /// Creates a new builder-style object to manufacture [`GuardrailAutomatedReasoningStatement`](crate::types::GuardrailAutomatedReasoningStatement).
    pub fn builder() -> crate::types::builders::GuardrailAutomatedReasoningStatementBuilder {
        crate::types::builders::GuardrailAutomatedReasoningStatementBuilder::default()
    }
}

/// A builder for [`GuardrailAutomatedReasoningStatement`](crate::types::GuardrailAutomatedReasoningStatement).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct GuardrailAutomatedReasoningStatementBuilder {
    pub(crate) logic: ::std::option::Option<::std::string::String>,
    pub(crate) natural_language: ::std::option::Option<::std::string::String>,
}
impl GuardrailAutomatedReasoningStatementBuilder {
    /// <p>The formal logical representation of the statement.</p>
    pub fn logic(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.logic = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The formal logical representation of the statement.</p>
    pub fn set_logic(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.logic = input;
        self
    }
    /// <p>The formal logical representation of the statement.</p>
    pub fn get_logic(&self) -> &::std::option::Option<::std::string::String> {
        &self.logic
    }
    /// <p>The natural language explanation of the logical statement.</p>
    pub fn natural_language(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.natural_language = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The natural language explanation of the logical statement.</p>
    pub fn set_natural_language(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.natural_language = input;
        self
    }
    /// <p>The natural language explanation of the logical statement.</p>
    pub fn get_natural_language(&self) -> &::std::option::Option<::std::string::String> {
        &self.natural_language
    }
    /// Consumes the builder and constructs a [`GuardrailAutomatedReasoningStatement`](crate::types::GuardrailAutomatedReasoningStatement).
    pub fn build(self) -> crate::types::GuardrailAutomatedReasoningStatement {
        crate::types::GuardrailAutomatedReasoningStatement {
            logic: self.logic,
            natural_language: self.natural_language,
        }
    }
}
impl ::std::fmt::Debug for GuardrailAutomatedReasoningStatementBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GuardrailAutomatedReasoningStatementBuilder");
        formatter.field("logic", &"*** Sensitive Data Redacted ***");
        formatter.field("natural_language", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
