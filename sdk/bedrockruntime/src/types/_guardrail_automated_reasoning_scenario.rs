// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a logical scenario where claims can be evaluated as true or false, containing specific logical assignments.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GuardrailAutomatedReasoningScenario {
    /// <p>List of logical assignments and statements that define this scenario.</p>
    pub statements: ::std::option::Option<::std::vec::Vec<crate::types::GuardrailAutomatedReasoningStatement>>,
}
impl GuardrailAutomatedReasoningScenario {
    /// <p>List of logical assignments and statements that define this scenario.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.statements.is_none()`.
    pub fn statements(&self) -> &[crate::types::GuardrailAutomatedReasoningStatement] {
        self.statements.as_deref().unwrap_or_default()
    }
}
impl GuardrailAutomatedReasoningScenario {
    /// Creates a new builder-style object to manufacture [`GuardrailAutomatedReasoningScenario`](crate::types::GuardrailAutomatedReasoningScenario).
    pub fn builder() -> crate::types::builders::GuardrailAutomatedReasoningScenarioBuilder {
        crate::types::builders::GuardrailAutomatedReasoningScenarioBuilder::default()
    }
}

/// A builder for [`GuardrailAutomatedReasoningScenario`](crate::types::GuardrailAutomatedReasoningScenario).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GuardrailAutomatedReasoningScenarioBuilder {
    pub(crate) statements: ::std::option::Option<::std::vec::Vec<crate::types::GuardrailAutomatedReasoningStatement>>,
}
impl GuardrailAutomatedReasoningScenarioBuilder {
    /// Appends an item to `statements`.
    ///
    /// To override the contents of this collection use [`set_statements`](Self::set_statements).
    ///
    /// <p>List of logical assignments and statements that define this scenario.</p>
    pub fn statements(mut self, input: crate::types::GuardrailAutomatedReasoningStatement) -> Self {
        let mut v = self.statements.unwrap_or_default();
        v.push(input);
        self.statements = ::std::option::Option::Some(v);
        self
    }
    /// <p>List of logical assignments and statements that define this scenario.</p>
    pub fn set_statements(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::GuardrailAutomatedReasoningStatement>>) -> Self {
        self.statements = input;
        self
    }
    /// <p>List of logical assignments and statements that define this scenario.</p>
    pub fn get_statements(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::GuardrailAutomatedReasoningStatement>> {
        &self.statements
    }
    /// Consumes the builder and constructs a [`GuardrailAutomatedReasoningScenario`](crate::types::GuardrailAutomatedReasoningScenario).
    pub fn build(self) -> crate::types::GuardrailAutomatedReasoningScenario {
        crate::types::GuardrailAutomatedReasoningScenario { statements: self.statements }
    }
}
