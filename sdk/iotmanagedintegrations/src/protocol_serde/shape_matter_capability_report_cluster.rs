// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_matter_capability_report_cluster(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::MatterCapabilityReportCluster,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    {
        object.key("id").string(input.id.as_str());
    }
    {
        object.key("revision").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((input.revision).into()),
        );
    }
    if let Some(var_1) = &input.public_id {
        object.key("publicId").string(var_1.as_str());
    }
    if let Some(var_2) = &input.name {
        object.key("name").string(var_2.as_str());
    }
    if let Some(var_3) = &input.spec_version {
        object.key("specVersion").string(var_3.as_str());
    }
    if let Some(var_4) = &input.attributes {
        let mut array_5 = object.key("attributes").start_array();
        for item_6 in var_4 {
            {
                #[allow(unused_mut)]
                let mut object_7 = array_5.value().start_object();
                crate::protocol_serde::shape_matter_capability_report_attribute::ser_matter_capability_report_attribute(&mut object_7, item_6)?;
                object_7.finish();
            }
        }
        array_5.finish();
    }
    if let Some(var_8) = &input.commands {
        let mut array_9 = object.key("commands").start_array();
        for item_10 in var_8 {
            {
                array_9.value().string(item_10.as_str());
            }
        }
        array_9.finish();
    }
    if let Some(var_11) = &input.events {
        let mut array_12 = object.key("events").start_array();
        for item_13 in var_11 {
            {
                array_12.value().string(item_13.as_str());
            }
        }
        array_12.finish();
    }
    if let Some(var_14) = &input.feature_map {
        object.key("featureMap").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_14).into()),
        );
    }
    if let Some(var_15) = &input.generated_commands {
        let mut array_16 = object.key("generatedCommands").start_array();
        for item_17 in var_15 {
            {
                array_16.value().string(item_17.as_str());
            }
        }
        array_16.finish();
    }
    if let Some(var_18) = &input.fabric_index {
        object.key("fabricIndex").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_18).into()),
        );
    }
    Ok(())
}
