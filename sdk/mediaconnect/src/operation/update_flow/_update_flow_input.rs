// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateFlowInput {
    /// <p>The Amazon Resource Name (ARN) of the flow that you want to update.</p>
    pub flow_arn: ::std::option::Option<::std::string::String>,
    /// <p>The settings for source failover.</p>
    pub source_failover_config: ::std::option::Option<crate::types::UpdateFailoverConfig>,
    /// <p>The maintenance setting of the flow.</p>
    pub maintenance: ::std::option::Option<crate::types::UpdateMaintenance>,
    /// <p>The settings for source monitoring.</p>
    pub source_monitoring_config: ::std::option::Option<crate::types::MonitoringConfig>,
    /// <p>Specifies the configuration settings for NDI outputs. Required when the flow includes NDI outputs.</p>
    pub ndi_config: ::std::option::Option<crate::types::NdiConfig>,
    /// <p>Determines the processing capacity and feature set of the flow.</p>
    pub flow_size: ::std::option::Option<crate::types::FlowSize>,
}
impl UpdateFlowInput {
    /// <p>The Amazon Resource Name (ARN) of the flow that you want to update.</p>
    pub fn flow_arn(&self) -> ::std::option::Option<&str> {
        self.flow_arn.as_deref()
    }
    /// <p>The settings for source failover.</p>
    pub fn source_failover_config(&self) -> ::std::option::Option<&crate::types::UpdateFailoverConfig> {
        self.source_failover_config.as_ref()
    }
    /// <p>The maintenance setting of the flow.</p>
    pub fn maintenance(&self) -> ::std::option::Option<&crate::types::UpdateMaintenance> {
        self.maintenance.as_ref()
    }
    /// <p>The settings for source monitoring.</p>
    pub fn source_monitoring_config(&self) -> ::std::option::Option<&crate::types::MonitoringConfig> {
        self.source_monitoring_config.as_ref()
    }
    /// <p>Specifies the configuration settings for NDI outputs. Required when the flow includes NDI outputs.</p>
    pub fn ndi_config(&self) -> ::std::option::Option<&crate::types::NdiConfig> {
        self.ndi_config.as_ref()
    }
    /// <p>Determines the processing capacity and feature set of the flow.</p>
    pub fn flow_size(&self) -> ::std::option::Option<&crate::types::FlowSize> {
        self.flow_size.as_ref()
    }
}
impl UpdateFlowInput {
    /// Creates a new builder-style object to manufacture [`UpdateFlowInput`](crate::operation::update_flow::UpdateFlowInput).
    pub fn builder() -> crate::operation::update_flow::builders::UpdateFlowInputBuilder {
        crate::operation::update_flow::builders::UpdateFlowInputBuilder::default()
    }
}

/// A builder for [`UpdateFlowInput`](crate::operation::update_flow::UpdateFlowInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateFlowInputBuilder {
    pub(crate) flow_arn: ::std::option::Option<::std::string::String>,
    pub(crate) source_failover_config: ::std::option::Option<crate::types::UpdateFailoverConfig>,
    pub(crate) maintenance: ::std::option::Option<crate::types::UpdateMaintenance>,
    pub(crate) source_monitoring_config: ::std::option::Option<crate::types::MonitoringConfig>,
    pub(crate) ndi_config: ::std::option::Option<crate::types::NdiConfig>,
    pub(crate) flow_size: ::std::option::Option<crate::types::FlowSize>,
}
impl UpdateFlowInputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the flow that you want to update.</p>
    /// This field is required.
    pub fn flow_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.flow_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the flow that you want to update.</p>
    pub fn set_flow_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.flow_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the flow that you want to update.</p>
    pub fn get_flow_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.flow_arn
    }
    /// <p>The settings for source failover.</p>
    pub fn source_failover_config(mut self, input: crate::types::UpdateFailoverConfig) -> Self {
        self.source_failover_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The settings for source failover.</p>
    pub fn set_source_failover_config(mut self, input: ::std::option::Option<crate::types::UpdateFailoverConfig>) -> Self {
        self.source_failover_config = input;
        self
    }
    /// <p>The settings for source failover.</p>
    pub fn get_source_failover_config(&self) -> &::std::option::Option<crate::types::UpdateFailoverConfig> {
        &self.source_failover_config
    }
    /// <p>The maintenance setting of the flow.</p>
    pub fn maintenance(mut self, input: crate::types::UpdateMaintenance) -> Self {
        self.maintenance = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maintenance setting of the flow.</p>
    pub fn set_maintenance(mut self, input: ::std::option::Option<crate::types::UpdateMaintenance>) -> Self {
        self.maintenance = input;
        self
    }
    /// <p>The maintenance setting of the flow.</p>
    pub fn get_maintenance(&self) -> &::std::option::Option<crate::types::UpdateMaintenance> {
        &self.maintenance
    }
    /// <p>The settings for source monitoring.</p>
    pub fn source_monitoring_config(mut self, input: crate::types::MonitoringConfig) -> Self {
        self.source_monitoring_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The settings for source monitoring.</p>
    pub fn set_source_monitoring_config(mut self, input: ::std::option::Option<crate::types::MonitoringConfig>) -> Self {
        self.source_monitoring_config = input;
        self
    }
    /// <p>The settings for source monitoring.</p>
    pub fn get_source_monitoring_config(&self) -> &::std::option::Option<crate::types::MonitoringConfig> {
        &self.source_monitoring_config
    }
    /// <p>Specifies the configuration settings for NDI outputs. Required when the flow includes NDI outputs.</p>
    pub fn ndi_config(mut self, input: crate::types::NdiConfig) -> Self {
        self.ndi_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the configuration settings for NDI outputs. Required when the flow includes NDI outputs.</p>
    pub fn set_ndi_config(mut self, input: ::std::option::Option<crate::types::NdiConfig>) -> Self {
        self.ndi_config = input;
        self
    }
    /// <p>Specifies the configuration settings for NDI outputs. Required when the flow includes NDI outputs.</p>
    pub fn get_ndi_config(&self) -> &::std::option::Option<crate::types::NdiConfig> {
        &self.ndi_config
    }
    /// <p>Determines the processing capacity and feature set of the flow.</p>
    pub fn flow_size(mut self, input: crate::types::FlowSize) -> Self {
        self.flow_size = ::std::option::Option::Some(input);
        self
    }
    /// <p>Determines the processing capacity and feature set of the flow.</p>
    pub fn set_flow_size(mut self, input: ::std::option::Option<crate::types::FlowSize>) -> Self {
        self.flow_size = input;
        self
    }
    /// <p>Determines the processing capacity and feature set of the flow.</p>
    pub fn get_flow_size(&self) -> &::std::option::Option<crate::types::FlowSize> {
        &self.flow_size
    }
    /// Consumes the builder and constructs a [`UpdateFlowInput`](crate::operation::update_flow::UpdateFlowInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::update_flow::UpdateFlowInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_flow::UpdateFlowInput {
            flow_arn: self.flow_arn,
            source_failover_config: self.source_failover_config,
            maintenance: self.maintenance,
            source_monitoring_config: self.source_monitoring_config,
            ndi_config: self.ndi_config,
            flow_size: self.flow_size,
        })
    }
}
