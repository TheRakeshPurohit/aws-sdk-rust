// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_container_fleet::_update_container_fleet_output::UpdateContainerFleetOutputBuilder;

pub use crate::operation::update_container_fleet::_update_container_fleet_input::UpdateContainerFleetInputBuilder;

impl crate::operation::update_container_fleet::builders::UpdateContainerFleetInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::update_container_fleet::UpdateContainerFleetOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_container_fleet::UpdateContainerFleetError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.update_container_fleet();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `UpdateContainerFleet`.
///
/// <p>Updates the properties of a managed container fleet. Depending on the properties being updated, this operation might initiate a fleet deployment. You can track deployments for a fleet using <a href="https://docs.aws.amazon.com/gamelift/latest/apireference/API_DescribeFleetDeployment.html">https://docs.aws.amazon.com/gamelift/latest/apireference/API_DescribeFleetDeployment.html</a>.</p>
/// <p><b>Request options</b></p>
/// <p>As with CreateContainerFleet, many fleet properties use common defaults or are calculated based on the fleet's container group definitions.</p>
/// <ul>
/// <li>
/// <p>Update fleet properties that result in a fleet deployment. Include only those properties that you want to change. Specify deployment configuration settings.</p></li>
/// <li>
/// <p>Update fleet properties that don't result in a fleet deployment. Include only those properties that you want to change.</p></li>
/// </ul>
/// <p>Changes to the following properties initiate a fleet deployment:</p>
/// <ul>
/// <li>
/// <p><code>GameServerContainerGroupDefinition</code></p></li>
/// <li>
/// <p><code>PerInstanceContainerGroupDefinition</code></p></li>
/// <li>
/// <p><code>GameServerContainerGroupsPerInstance</code></p></li>
/// <li>
/// <p><code>InstanceInboundPermissions</code></p></li>
/// <li>
/// <p><code>InstanceConnectionPortRange</code></p></li>
/// <li>
/// <p><code>LogConfiguration</code></p></li>
/// </ul>
/// <p><b>Results</b></p>
/// <p>If successful, this operation updates the container fleet resource, and might initiate a new deployment of fleet resources using the deployment configuration provided. A deployment replaces existing fleet instances with new instances that are deployed with the updated fleet properties. The fleet is placed in <code>UPDATING</code> status until the deployment is complete, then return to <code>ACTIVE</code>.</p>
/// <p>You can have only one update deployment active at a time for a fleet. If a second update request initiates a deployment while another deployment is in progress, the first deployment is cancelled.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct UpdateContainerFleetFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_container_fleet::builders::UpdateContainerFleetInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::update_container_fleet::UpdateContainerFleetOutput,
        crate::operation::update_container_fleet::UpdateContainerFleetError,
    > for UpdateContainerFleetFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::update_container_fleet::UpdateContainerFleetOutput,
            crate::operation::update_container_fleet::UpdateContainerFleetError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl UpdateContainerFleetFluentBuilder {
    /// Creates a new `UpdateContainerFleetFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the UpdateContainerFleet as a reference.
    pub fn as_input(&self) -> &crate::operation::update_container_fleet::builders::UpdateContainerFleetInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_container_fleet::UpdateContainerFleetOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_container_fleet::UpdateContainerFleetError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::update_container_fleet::UpdateContainerFleet::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::update_container_fleet::UpdateContainerFleet::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::update_container_fleet::UpdateContainerFleetOutput,
        crate::operation::update_container_fleet::UpdateContainerFleetError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>A unique identifier for the container fleet to update. You can use either the fleet ID or ARN value.</p>
    pub fn fleet_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.fleet_id(input.into());
        self
    }
    /// <p>A unique identifier for the container fleet to update. You can use either the fleet ID or ARN value.</p>
    pub fn set_fleet_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_fleet_id(input);
        self
    }
    /// <p>A unique identifier for the container fleet to update. You can use either the fleet ID or ARN value.</p>
    pub fn get_fleet_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_fleet_id()
    }
    /// <p>The name or ARN value of a new game server container group definition to deploy on the fleet. If you're updating the fleet to a specific version of a container group definition, use the ARN value and include the version number. If you're updating the fleet to the latest version of a container group definition, you can use the name value. You can't remove a fleet's game server container group definition, you can only update or replace it with another definition.</p>
    /// <p>Update a container group definition by calling <a href="https://docs.aws.amazon.com/gamelift/latest/apireference/API_UpdateContainerGroupDefinition.html">UpdateContainerGroupDefinition</a>. This operation creates a <a href="https://docs.aws.amazon.com/gamelift/latest/apireference/API_ContainerGroupDefinition.html">ContainerGroupDefinition</a> resource with an incremented version.</p>
    pub fn game_server_container_group_definition_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.game_server_container_group_definition_name(input.into());
        self
    }
    /// <p>The name or ARN value of a new game server container group definition to deploy on the fleet. If you're updating the fleet to a specific version of a container group definition, use the ARN value and include the version number. If you're updating the fleet to the latest version of a container group definition, you can use the name value. You can't remove a fleet's game server container group definition, you can only update or replace it with another definition.</p>
    /// <p>Update a container group definition by calling <a href="https://docs.aws.amazon.com/gamelift/latest/apireference/API_UpdateContainerGroupDefinition.html">UpdateContainerGroupDefinition</a>. This operation creates a <a href="https://docs.aws.amazon.com/gamelift/latest/apireference/API_ContainerGroupDefinition.html">ContainerGroupDefinition</a> resource with an incremented version.</p>
    pub fn set_game_server_container_group_definition_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_game_server_container_group_definition_name(input);
        self
    }
    /// <p>The name or ARN value of a new game server container group definition to deploy on the fleet. If you're updating the fleet to a specific version of a container group definition, use the ARN value and include the version number. If you're updating the fleet to the latest version of a container group definition, you can use the name value. You can't remove a fleet's game server container group definition, you can only update or replace it with another definition.</p>
    /// <p>Update a container group definition by calling <a href="https://docs.aws.amazon.com/gamelift/latest/apireference/API_UpdateContainerGroupDefinition.html">UpdateContainerGroupDefinition</a>. This operation creates a <a href="https://docs.aws.amazon.com/gamelift/latest/apireference/API_ContainerGroupDefinition.html">ContainerGroupDefinition</a> resource with an incremented version.</p>
    pub fn get_game_server_container_group_definition_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_game_server_container_group_definition_name()
    }
    /// <p>The name or ARN value of a new per-instance container group definition to deploy on the fleet. If you're updating the fleet to a specific version of a container group definition, use the ARN value and include the version number. If you're updating the fleet to the latest version of a container group definition, you can use the name value.</p>
    /// <p>Update a container group definition by calling <a href="https://docs.aws.amazon.com/gamelift/latest/apireference/API_UpdateContainerGroupDefinition.html">UpdateContainerGroupDefinition</a>. This operation creates a <a href="https://docs.aws.amazon.com/gamelift/latest/apireference/API_ContainerGroupDefinition.html">ContainerGroupDefinition</a> resource with an incremented version.</p>
    /// <p>To remove a fleet's per-instance container group definition, leave this parameter empty and use the parameter <code>RemoveAttributes</code>.</p>
    pub fn per_instance_container_group_definition_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.per_instance_container_group_definition_name(input.into());
        self
    }
    /// <p>The name or ARN value of a new per-instance container group definition to deploy on the fleet. If you're updating the fleet to a specific version of a container group definition, use the ARN value and include the version number. If you're updating the fleet to the latest version of a container group definition, you can use the name value.</p>
    /// <p>Update a container group definition by calling <a href="https://docs.aws.amazon.com/gamelift/latest/apireference/API_UpdateContainerGroupDefinition.html">UpdateContainerGroupDefinition</a>. This operation creates a <a href="https://docs.aws.amazon.com/gamelift/latest/apireference/API_ContainerGroupDefinition.html">ContainerGroupDefinition</a> resource with an incremented version.</p>
    /// <p>To remove a fleet's per-instance container group definition, leave this parameter empty and use the parameter <code>RemoveAttributes</code>.</p>
    pub fn set_per_instance_container_group_definition_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_per_instance_container_group_definition_name(input);
        self
    }
    /// <p>The name or ARN value of a new per-instance container group definition to deploy on the fleet. If you're updating the fleet to a specific version of a container group definition, use the ARN value and include the version number. If you're updating the fleet to the latest version of a container group definition, you can use the name value.</p>
    /// <p>Update a container group definition by calling <a href="https://docs.aws.amazon.com/gamelift/latest/apireference/API_UpdateContainerGroupDefinition.html">UpdateContainerGroupDefinition</a>. This operation creates a <a href="https://docs.aws.amazon.com/gamelift/latest/apireference/API_ContainerGroupDefinition.html">ContainerGroupDefinition</a> resource with an incremented version.</p>
    /// <p>To remove a fleet's per-instance container group definition, leave this parameter empty and use the parameter <code>RemoveAttributes</code>.</p>
    pub fn get_per_instance_container_group_definition_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_per_instance_container_group_definition_name()
    }
    /// <p>The number of times to replicate the game server container group on each fleet instance. By default, Amazon GameLift Servers calculates the maximum number of game server container groups that can fit on each instance. You can remove this property value to use the calculated value, or set it manually. If you set this number manually, Amazon GameLift Servers uses your value as long as it's less than the calculated maximum.</p>
    pub fn game_server_container_groups_per_instance(mut self, input: i32) -> Self {
        self.inner = self.inner.game_server_container_groups_per_instance(input);
        self
    }
    /// <p>The number of times to replicate the game server container group on each fleet instance. By default, Amazon GameLift Servers calculates the maximum number of game server container groups that can fit on each instance. You can remove this property value to use the calculated value, or set it manually. If you set this number manually, Amazon GameLift Servers uses your value as long as it's less than the calculated maximum.</p>
    pub fn set_game_server_container_groups_per_instance(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_game_server_container_groups_per_instance(input);
        self
    }
    /// <p>The number of times to replicate the game server container group on each fleet instance. By default, Amazon GameLift Servers calculates the maximum number of game server container groups that can fit on each instance. You can remove this property value to use the calculated value, or set it manually. If you set this number manually, Amazon GameLift Servers uses your value as long as it's less than the calculated maximum.</p>
    pub fn get_game_server_container_groups_per_instance(&self) -> &::std::option::Option<i32> {
        self.inner.get_game_server_container_groups_per_instance()
    }
    /// <p>A revised set of port numbers to open on each fleet instance. By default, Amazon GameLift Servers calculates an optimal port range based on your fleet configuration. If you previously set this parameter manually, you can't reset this to use the calculated settings.</p>
    pub fn instance_connection_port_range(mut self, input: crate::types::ConnectionPortRange) -> Self {
        self.inner = self.inner.instance_connection_port_range(input);
        self
    }
    /// <p>A revised set of port numbers to open on each fleet instance. By default, Amazon GameLift Servers calculates an optimal port range based on your fleet configuration. If you previously set this parameter manually, you can't reset this to use the calculated settings.</p>
    pub fn set_instance_connection_port_range(mut self, input: ::std::option::Option<crate::types::ConnectionPortRange>) -> Self {
        self.inner = self.inner.set_instance_connection_port_range(input);
        self
    }
    /// <p>A revised set of port numbers to open on each fleet instance. By default, Amazon GameLift Servers calculates an optimal port range based on your fleet configuration. If you previously set this parameter manually, you can't reset this to use the calculated settings.</p>
    pub fn get_instance_connection_port_range(&self) -> &::std::option::Option<crate::types::ConnectionPortRange> {
        self.inner.get_instance_connection_port_range()
    }
    ///
    /// Appends an item to `InstanceInboundPermissionAuthorizations`.
    ///
    /// To override the contents of this collection use [`set_instance_inbound_permission_authorizations`](Self::set_instance_inbound_permission_authorizations).
    ///
    /// <p>A set of ports to add to the container fleet's inbound permissions.</p>
    pub fn instance_inbound_permission_authorizations(mut self, input: crate::types::IpPermission) -> Self {
        self.inner = self.inner.instance_inbound_permission_authorizations(input);
        self
    }
    /// <p>A set of ports to add to the container fleet's inbound permissions.</p>
    pub fn set_instance_inbound_permission_authorizations(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::IpPermission>>,
    ) -> Self {
        self.inner = self.inner.set_instance_inbound_permission_authorizations(input);
        self
    }
    /// <p>A set of ports to add to the container fleet's inbound permissions.</p>
    pub fn get_instance_inbound_permission_authorizations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::IpPermission>> {
        self.inner.get_instance_inbound_permission_authorizations()
    }
    ///
    /// Appends an item to `InstanceInboundPermissionRevocations`.
    ///
    /// To override the contents of this collection use [`set_instance_inbound_permission_revocations`](Self::set_instance_inbound_permission_revocations).
    ///
    /// <p>A set of ports to remove from the container fleet's inbound permissions.</p>
    pub fn instance_inbound_permission_revocations(mut self, input: crate::types::IpPermission) -> Self {
        self.inner = self.inner.instance_inbound_permission_revocations(input);
        self
    }
    /// <p>A set of ports to remove from the container fleet's inbound permissions.</p>
    pub fn set_instance_inbound_permission_revocations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::IpPermission>>) -> Self {
        self.inner = self.inner.set_instance_inbound_permission_revocations(input);
        self
    }
    /// <p>A set of ports to remove from the container fleet's inbound permissions.</p>
    pub fn get_instance_inbound_permission_revocations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::IpPermission>> {
        self.inner.get_instance_inbound_permission_revocations()
    }
    /// <p>Instructions for how to deploy updates to a container fleet, if the fleet update initiates a deployment. The deployment configuration lets you determine how to replace fleet instances and what actions to take if the deployment fails.</p>
    pub fn deployment_configuration(mut self, input: crate::types::DeploymentConfiguration) -> Self {
        self.inner = self.inner.deployment_configuration(input);
        self
    }
    /// <p>Instructions for how to deploy updates to a container fleet, if the fleet update initiates a deployment. The deployment configuration lets you determine how to replace fleet instances and what actions to take if the deployment fails.</p>
    pub fn set_deployment_configuration(mut self, input: ::std::option::Option<crate::types::DeploymentConfiguration>) -> Self {
        self.inner = self.inner.set_deployment_configuration(input);
        self
    }
    /// <p>Instructions for how to deploy updates to a container fleet, if the fleet update initiates a deployment. The deployment configuration lets you determine how to replace fleet instances and what actions to take if the deployment fails.</p>
    pub fn get_deployment_configuration(&self) -> &::std::option::Option<crate::types::DeploymentConfiguration> {
        self.inner.get_deployment_configuration()
    }
    /// <p>A meaningful description of the container fleet.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>A meaningful description of the container fleet.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>A meaningful description of the container fleet.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_description()
    }
    ///
    /// Appends an item to `MetricGroups`.
    ///
    /// To override the contents of this collection use [`set_metric_groups`](Self::set_metric_groups).
    ///
    /// <p>The name of an Amazon Web Services CloudWatch metric group to add this fleet to.</p>
    pub fn metric_groups(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.metric_groups(input.into());
        self
    }
    /// <p>The name of an Amazon Web Services CloudWatch metric group to add this fleet to.</p>
    pub fn set_metric_groups(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_metric_groups(input);
        self
    }
    /// <p>The name of an Amazon Web Services CloudWatch metric group to add this fleet to.</p>
    pub fn get_metric_groups(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_metric_groups()
    }
    /// <p>The game session protection policy to apply to all new game sessions that are started in this fleet. Game sessions that already exist are not affected.</p>
    pub fn new_game_session_protection_policy(mut self, input: crate::types::ProtectionPolicy) -> Self {
        self.inner = self.inner.new_game_session_protection_policy(input);
        self
    }
    /// <p>The game session protection policy to apply to all new game sessions that are started in this fleet. Game sessions that already exist are not affected.</p>
    pub fn set_new_game_session_protection_policy(mut self, input: ::std::option::Option<crate::types::ProtectionPolicy>) -> Self {
        self.inner = self.inner.set_new_game_session_protection_policy(input);
        self
    }
    /// <p>The game session protection policy to apply to all new game sessions that are started in this fleet. Game sessions that already exist are not affected.</p>
    pub fn get_new_game_session_protection_policy(&self) -> &::std::option::Option<crate::types::ProtectionPolicy> {
        self.inner.get_new_game_session_protection_policy()
    }
    /// <p>A policy that limits the number of game sessions that each individual player can create on instances in this fleet. The limit applies for a specified span of time.</p>
    pub fn game_session_creation_limit_policy(mut self, input: crate::types::GameSessionCreationLimitPolicy) -> Self {
        self.inner = self.inner.game_session_creation_limit_policy(input);
        self
    }
    /// <p>A policy that limits the number of game sessions that each individual player can create on instances in this fleet. The limit applies for a specified span of time.</p>
    pub fn set_game_session_creation_limit_policy(mut self, input: ::std::option::Option<crate::types::GameSessionCreationLimitPolicy>) -> Self {
        self.inner = self.inner.set_game_session_creation_limit_policy(input);
        self
    }
    /// <p>A policy that limits the number of game sessions that each individual player can create on instances in this fleet. The limit applies for a specified span of time.</p>
    pub fn get_game_session_creation_limit_policy(&self) -> &::std::option::Option<crate::types::GameSessionCreationLimitPolicy> {
        self.inner.get_game_session_creation_limit_policy()
    }
    /// <p>The method for collecting container logs for the fleet.</p>
    pub fn log_configuration(mut self, input: crate::types::LogConfiguration) -> Self {
        self.inner = self.inner.log_configuration(input);
        self
    }
    /// <p>The method for collecting container logs for the fleet.</p>
    pub fn set_log_configuration(mut self, input: ::std::option::Option<crate::types::LogConfiguration>) -> Self {
        self.inner = self.inner.set_log_configuration(input);
        self
    }
    /// <p>The method for collecting container logs for the fleet.</p>
    pub fn get_log_configuration(&self) -> &::std::option::Option<crate::types::LogConfiguration> {
        self.inner.get_log_configuration()
    }
    ///
    /// Appends an item to `RemoveAttributes`.
    ///
    /// To override the contents of this collection use [`set_remove_attributes`](Self::set_remove_attributes).
    ///
    /// <p>If set, this update removes a fleet's per-instance container group definition. You can't remove a fleet's game server container group definition.</p>
    pub fn remove_attributes(mut self, input: crate::types::ContainerFleetRemoveAttribute) -> Self {
        self.inner = self.inner.remove_attributes(input);
        self
    }
    /// <p>If set, this update removes a fleet's per-instance container group definition. You can't remove a fleet's game server container group definition.</p>
    pub fn set_remove_attributes(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ContainerFleetRemoveAttribute>>) -> Self {
        self.inner = self.inner.set_remove_attributes(input);
        self
    }
    /// <p>If set, this update removes a fleet's per-instance container group definition. You can't remove a fleet's game server container group definition.</p>
    pub fn get_remove_attributes(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ContainerFleetRemoveAttribute>> {
        self.inner.get_remove_attributes()
    }
}
