// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ListCompute`](crate::operation::list_compute::builders::ListComputeFluentBuilder) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::operation::list_compute::builders::ListComputeFluentBuilder::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`fleet_id(impl Into<String>)`](crate::operation::list_compute::builders::ListComputeFluentBuilder::fleet_id) / [`set_fleet_id(Option<String>)`](crate::operation::list_compute::builders::ListComputeFluentBuilder::set_fleet_id):<br>required: **true**<br><p>A unique identifier for the fleet to retrieve compute resources for.</p><br>
    ///   - [`location(impl Into<String>)`](crate::operation::list_compute::builders::ListComputeFluentBuilder::location) / [`set_location(Option<String>)`](crate::operation::list_compute::builders::ListComputeFluentBuilder::set_location):<br>required: **false**<br><p>The name of a location to retrieve compute resources for. For an Amazon GameLift Servers Anywhere fleet, use a custom location. For a managed fleet, provide a Amazon Web Services Region or Local Zone code (for example: <code>us-west-2</code> or <code>us-west-2-lax-1</code>).</p><br>
    ///   - [`container_group_definition_name(impl Into<String>)`](crate::operation::list_compute::builders::ListComputeFluentBuilder::container_group_definition_name) / [`set_container_group_definition_name(Option<String>)`](crate::operation::list_compute::builders::ListComputeFluentBuilder::set_container_group_definition_name):<br>required: **false**<br><p>For computes in a managed container fleet, the name of the deployed container group definition.</p><br>
    ///   - [`compute_status(ListComputeInputStatus)`](crate::operation::list_compute::builders::ListComputeFluentBuilder::compute_status) / [`set_compute_status(Option<ListComputeInputStatus>)`](crate::operation::list_compute::builders::ListComputeFluentBuilder::set_compute_status):<br>required: **false**<br><p>The status of computes in a managed container fleet, based on the success of the latest update deployment.</p> <ul>  <li>   <p><code>ACTIVE</code> -- The compute is deployed with the correct container definitions. It is ready to process game servers and host game sessions.</p></li>  <li>   <p><code>IMPAIRED</code> -- An update deployment to the compute failed, and the compute is deployed with incorrect container definitions.</p></li> </ul><br>
    ///   - [`limit(i32)`](crate::operation::list_compute::builders::ListComputeFluentBuilder::limit) / [`set_limit(Option<i32>)`](crate::operation::list_compute::builders::ListComputeFluentBuilder::set_limit):<br>required: **false**<br><p>The maximum number of results to return. Use this parameter with <code>NextToken</code> to get results as a set of sequential pages.</p><br>
    ///   - [`next_token(impl Into<String>)`](crate::operation::list_compute::builders::ListComputeFluentBuilder::next_token) / [`set_next_token(Option<String>)`](crate::operation::list_compute::builders::ListComputeFluentBuilder::set_next_token):<br>required: **false**<br><p>A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.</p><br>
    /// - On success, responds with [`ListComputeOutput`](crate::operation::list_compute::ListComputeOutput) with field(s):
    ///   - [`compute_list(Option<Vec::<Compute>>)`](crate::operation::list_compute::ListComputeOutput::compute_list): <p>A list of compute resources in the specified fleet.</p>
    ///   - [`next_token(Option<String>)`](crate::operation::list_compute::ListComputeOutput::next_token): <p>A token that indicates where to resume retrieving results on the next call to this operation. If no token is returned, these results represent the end of the list.</p>
    /// - On failure, responds with [`SdkError<ListComputeError>`](crate::operation::list_compute::ListComputeError)
    pub fn list_compute(&self) -> crate::operation::list_compute::builders::ListComputeFluentBuilder {
        crate::operation::list_compute::builders::ListComputeFluentBuilder::new(self.handle.clone())
    }
}
