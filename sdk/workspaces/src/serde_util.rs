// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn workspaces_pool_correct_errors(
    mut builder: crate::types::builders::WorkspacesPoolBuilder,
) -> crate::types::builders::WorkspacesPoolBuilder {
    if builder.pool_id.is_none() {
        builder.pool_id = Some(Default::default())
    }
    if builder.pool_arn.is_none() {
        builder.pool_arn = Some(Default::default())
    }
    if builder.capacity_status.is_none() {
        builder.capacity_status = {
            let builder = crate::types::builders::CapacityStatusBuilder::default();
            crate::serde_util::capacity_status_correct_errors(builder).build().ok()
        }
    }
    if builder.pool_name.is_none() {
        builder.pool_name = Some(Default::default())
    }
    if builder.state.is_none() {
        builder.state = "no value was set".parse::<crate::types::WorkspacesPoolState>().ok()
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.bundle_id.is_none() {
        builder.bundle_id = Some(Default::default())
    }
    if builder.directory_id.is_none() {
        builder.directory_id = Some(Default::default())
    }
    if builder.running_mode.is_none() {
        builder.running_mode = "no value was set".parse::<crate::types::PoolsRunningMode>().ok()
    }
    builder
}

pub(crate) fn application_settings_response_correct_errors(
    mut builder: crate::types::builders::ApplicationSettingsResponseBuilder,
) -> crate::types::builders::ApplicationSettingsResponseBuilder {
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ApplicationSettingsStatusEnum>().ok()
    }
    builder
}

pub(crate) fn capacity_status_correct_errors(
    mut builder: crate::types::builders::CapacityStatusBuilder,
) -> crate::types::builders::CapacityStatusBuilder {
    if builder.available_user_sessions.is_none() {
        builder.available_user_sessions = Some(Default::default())
    }
    if builder.desired_user_sessions.is_none() {
        builder.desired_user_sessions = Some(Default::default())
    }
    if builder.actual_user_sessions.is_none() {
        builder.actual_user_sessions = Some(Default::default())
    }
    if builder.active_user_sessions.is_none() {
        builder.active_user_sessions = Some(Default::default())
    }
    builder
}

pub(crate) fn connection_alias_permission_correct_errors(
    mut builder: crate::types::builders::ConnectionAliasPermissionBuilder,
) -> crate::types::builders::ConnectionAliasPermissionBuilder {
    if builder.shared_account_id.is_none() {
        builder.shared_account_id = Some(Default::default())
    }
    if builder.allow_association.is_none() {
        builder.allow_association = Some(Default::default())
    }
    builder
}

pub(crate) fn root_storage_correct_errors(mut builder: crate::types::builders::RootStorageBuilder) -> crate::types::builders::RootStorageBuilder {
    if builder.capacity.is_none() {
        builder.capacity = Some(Default::default())
    }
    builder
}

pub(crate) fn tag_correct_errors(mut builder: crate::types::builders::TagBuilder) -> crate::types::builders::TagBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    builder
}

pub(crate) fn user_storage_correct_errors(mut builder: crate::types::builders::UserStorageBuilder) -> crate::types::builders::UserStorageBuilder {
    if builder.capacity.is_none() {
        builder.capacity = Some(Default::default())
    }
    builder
}

pub(crate) fn workspaces_pool_session_correct_errors(
    mut builder: crate::types::builders::WorkspacesPoolSessionBuilder,
) -> crate::types::builders::WorkspacesPoolSessionBuilder {
    if builder.session_id.is_none() {
        builder.session_id = Some(Default::default())
    }
    if builder.pool_id.is_none() {
        builder.pool_id = Some(Default::default())
    }
    if builder.user_id.is_none() {
        builder.user_id = Some(Default::default())
    }
    builder
}

pub(crate) fn active_directory_config_correct_errors(
    mut builder: crate::types::builders::ActiveDirectoryConfigBuilder,
) -> crate::types::builders::ActiveDirectoryConfigBuilder {
    if builder.domain_name.is_none() {
        builder.domain_name = Some(Default::default())
    }
    if builder.service_account_secret_arn.is_none() {
        builder.service_account_secret_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn standby_workspace_correct_errors(
    mut builder: crate::types::builders::StandbyWorkspaceBuilder,
) -> crate::types::builders::StandbyWorkspaceBuilder {
    if builder.primary_workspace_id.is_none() {
        builder.primary_workspace_id = Some(Default::default())
    }
    if builder.directory_id.is_none() {
        builder.directory_id = Some(Default::default())
    }
    builder
}

pub(crate) fn workspace_request_correct_errors(
    mut builder: crate::types::builders::WorkspaceRequestBuilder,
) -> crate::types::builders::WorkspaceRequestBuilder {
    if builder.directory_id.is_none() {
        builder.directory_id = Some(Default::default())
    }
    if builder.user_name.is_none() {
        builder.user_name = Some(Default::default())
    }
    if builder.bundle_id.is_none() {
        builder.bundle_id = Some(Default::default())
    }
    builder
}

pub(crate) fn access_endpoint_config_correct_errors(
    mut builder: crate::types::builders::AccessEndpointConfigBuilder,
) -> crate::types::builders::AccessEndpointConfigBuilder {
    if builder.access_endpoints.is_none() {
        builder.access_endpoints = Some(Default::default())
    }
    builder
}

pub(crate) fn global_accelerator_for_directory_correct_errors(
    mut builder: crate::types::builders::GlobalAcceleratorForDirectoryBuilder,
) -> crate::types::builders::GlobalAcceleratorForDirectoryBuilder {
    if builder.mode.is_none() {
        builder.mode = "no value was set".parse::<crate::types::AgaModeForDirectoryEnum>().ok()
    }
    builder
}

pub(crate) fn global_accelerator_for_work_space_correct_errors(
    mut builder: crate::types::builders::GlobalAcceleratorForWorkSpaceBuilder,
) -> crate::types::builders::GlobalAcceleratorForWorkSpaceBuilder {
    if builder.mode.is_none() {
        builder.mode = "no value was set".parse::<crate::types::AgaModeForWorkSpaceEnum>().ok()
    }
    builder
}

pub(crate) fn storage_connector_correct_errors(
    mut builder: crate::types::builders::StorageConnectorBuilder,
) -> crate::types::builders::StorageConnectorBuilder {
    if builder.connector_type.is_none() {
        builder.connector_type = "no value was set".parse::<crate::types::StorageConnectorTypeEnum>().ok()
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::StorageConnectorStatusEnum>().ok()
    }
    builder
}

pub(crate) fn user_setting_correct_errors(mut builder: crate::types::builders::UserSettingBuilder) -> crate::types::builders::UserSettingBuilder {
    if builder.action.is_none() {
        builder.action = "no value was set".parse::<crate::types::UserSettingActionEnum>().ok()
    }
    if builder.permission.is_none() {
        builder.permission = "no value was set".parse::<crate::types::UserSettingPermissionEnum>().ok()
    }
    builder
}
