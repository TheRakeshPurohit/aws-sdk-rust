// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ImportCustomWorkspaceImageInput {
    /// <p>The name of the WorkSpace image.</p>
    pub image_name: ::std::option::Option<::std::string::String>,
    /// <p>The description of the WorkSpace image.</p>
    pub image_description: ::std::option::Option<::std::string::String>,
    /// <p>The supported compute type for the WorkSpace image.</p>
    pub compute_type: ::std::option::Option<crate::types::ImageComputeType>,
    /// <p>The supported protocol for the WorkSpace image. Windows 11 does not support PCOIP protocol.</p>
    pub protocol: ::std::option::Option<crate::types::CustomImageProtocol>,
    /// <p>The options for image import source.</p>
    pub image_source: ::std::option::Option<crate::types::ImageSourceIdentifier>,
    /// <p>The infrastructure configuration ARN that specifies how the WorkSpace image is built.</p>
    pub infrastructure_configuration_arn: ::std::option::Option<::std::string::String>,
    /// <p>The platform for the WorkSpace image source.</p>
    pub platform: ::std::option::Option<crate::types::Platform>,
    /// <p>The OS version for the WorkSpace image source.</p>
    pub os_version: ::std::option::Option<crate::types::OsVersion>,
    /// <p>The resource tags. Each WorkSpaces resource can have a maximum of 50 tags.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl ImportCustomWorkspaceImageInput {
    /// <p>The name of the WorkSpace image.</p>
    pub fn image_name(&self) -> ::std::option::Option<&str> {
        self.image_name.as_deref()
    }
    /// <p>The description of the WorkSpace image.</p>
    pub fn image_description(&self) -> ::std::option::Option<&str> {
        self.image_description.as_deref()
    }
    /// <p>The supported compute type for the WorkSpace image.</p>
    pub fn compute_type(&self) -> ::std::option::Option<&crate::types::ImageComputeType> {
        self.compute_type.as_ref()
    }
    /// <p>The supported protocol for the WorkSpace image. Windows 11 does not support PCOIP protocol.</p>
    pub fn protocol(&self) -> ::std::option::Option<&crate::types::CustomImageProtocol> {
        self.protocol.as_ref()
    }
    /// <p>The options for image import source.</p>
    pub fn image_source(&self) -> ::std::option::Option<&crate::types::ImageSourceIdentifier> {
        self.image_source.as_ref()
    }
    /// <p>The infrastructure configuration ARN that specifies how the WorkSpace image is built.</p>
    pub fn infrastructure_configuration_arn(&self) -> ::std::option::Option<&str> {
        self.infrastructure_configuration_arn.as_deref()
    }
    /// <p>The platform for the WorkSpace image source.</p>
    pub fn platform(&self) -> ::std::option::Option<&crate::types::Platform> {
        self.platform.as_ref()
    }
    /// <p>The OS version for the WorkSpace image source.</p>
    pub fn os_version(&self) -> ::std::option::Option<&crate::types::OsVersion> {
        self.os_version.as_ref()
    }
    /// <p>The resource tags. Each WorkSpaces resource can have a maximum of 50 tags.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl ImportCustomWorkspaceImageInput {
    /// Creates a new builder-style object to manufacture [`ImportCustomWorkspaceImageInput`](crate::operation::import_custom_workspace_image::ImportCustomWorkspaceImageInput).
    pub fn builder() -> crate::operation::import_custom_workspace_image::builders::ImportCustomWorkspaceImageInputBuilder {
        crate::operation::import_custom_workspace_image::builders::ImportCustomWorkspaceImageInputBuilder::default()
    }
}

/// A builder for [`ImportCustomWorkspaceImageInput`](crate::operation::import_custom_workspace_image::ImportCustomWorkspaceImageInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ImportCustomWorkspaceImageInputBuilder {
    pub(crate) image_name: ::std::option::Option<::std::string::String>,
    pub(crate) image_description: ::std::option::Option<::std::string::String>,
    pub(crate) compute_type: ::std::option::Option<crate::types::ImageComputeType>,
    pub(crate) protocol: ::std::option::Option<crate::types::CustomImageProtocol>,
    pub(crate) image_source: ::std::option::Option<crate::types::ImageSourceIdentifier>,
    pub(crate) infrastructure_configuration_arn: ::std::option::Option<::std::string::String>,
    pub(crate) platform: ::std::option::Option<crate::types::Platform>,
    pub(crate) os_version: ::std::option::Option<crate::types::OsVersion>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl ImportCustomWorkspaceImageInputBuilder {
    /// <p>The name of the WorkSpace image.</p>
    /// This field is required.
    pub fn image_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.image_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the WorkSpace image.</p>
    pub fn set_image_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.image_name = input;
        self
    }
    /// <p>The name of the WorkSpace image.</p>
    pub fn get_image_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.image_name
    }
    /// <p>The description of the WorkSpace image.</p>
    /// This field is required.
    pub fn image_description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.image_description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the WorkSpace image.</p>
    pub fn set_image_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.image_description = input;
        self
    }
    /// <p>The description of the WorkSpace image.</p>
    pub fn get_image_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.image_description
    }
    /// <p>The supported compute type for the WorkSpace image.</p>
    /// This field is required.
    pub fn compute_type(mut self, input: crate::types::ImageComputeType) -> Self {
        self.compute_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The supported compute type for the WorkSpace image.</p>
    pub fn set_compute_type(mut self, input: ::std::option::Option<crate::types::ImageComputeType>) -> Self {
        self.compute_type = input;
        self
    }
    /// <p>The supported compute type for the WorkSpace image.</p>
    pub fn get_compute_type(&self) -> &::std::option::Option<crate::types::ImageComputeType> {
        &self.compute_type
    }
    /// <p>The supported protocol for the WorkSpace image. Windows 11 does not support PCOIP protocol.</p>
    /// This field is required.
    pub fn protocol(mut self, input: crate::types::CustomImageProtocol) -> Self {
        self.protocol = ::std::option::Option::Some(input);
        self
    }
    /// <p>The supported protocol for the WorkSpace image. Windows 11 does not support PCOIP protocol.</p>
    pub fn set_protocol(mut self, input: ::std::option::Option<crate::types::CustomImageProtocol>) -> Self {
        self.protocol = input;
        self
    }
    /// <p>The supported protocol for the WorkSpace image. Windows 11 does not support PCOIP protocol.</p>
    pub fn get_protocol(&self) -> &::std::option::Option<crate::types::CustomImageProtocol> {
        &self.protocol
    }
    /// <p>The options for image import source.</p>
    /// This field is required.
    pub fn image_source(mut self, input: crate::types::ImageSourceIdentifier) -> Self {
        self.image_source = ::std::option::Option::Some(input);
        self
    }
    /// <p>The options for image import source.</p>
    pub fn set_image_source(mut self, input: ::std::option::Option<crate::types::ImageSourceIdentifier>) -> Self {
        self.image_source = input;
        self
    }
    /// <p>The options for image import source.</p>
    pub fn get_image_source(&self) -> &::std::option::Option<crate::types::ImageSourceIdentifier> {
        &self.image_source
    }
    /// <p>The infrastructure configuration ARN that specifies how the WorkSpace image is built.</p>
    /// This field is required.
    pub fn infrastructure_configuration_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.infrastructure_configuration_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The infrastructure configuration ARN that specifies how the WorkSpace image is built.</p>
    pub fn set_infrastructure_configuration_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.infrastructure_configuration_arn = input;
        self
    }
    /// <p>The infrastructure configuration ARN that specifies how the WorkSpace image is built.</p>
    pub fn get_infrastructure_configuration_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.infrastructure_configuration_arn
    }
    /// <p>The platform for the WorkSpace image source.</p>
    /// This field is required.
    pub fn platform(mut self, input: crate::types::Platform) -> Self {
        self.platform = ::std::option::Option::Some(input);
        self
    }
    /// <p>The platform for the WorkSpace image source.</p>
    pub fn set_platform(mut self, input: ::std::option::Option<crate::types::Platform>) -> Self {
        self.platform = input;
        self
    }
    /// <p>The platform for the WorkSpace image source.</p>
    pub fn get_platform(&self) -> &::std::option::Option<crate::types::Platform> {
        &self.platform
    }
    /// <p>The OS version for the WorkSpace image source.</p>
    /// This field is required.
    pub fn os_version(mut self, input: crate::types::OsVersion) -> Self {
        self.os_version = ::std::option::Option::Some(input);
        self
    }
    /// <p>The OS version for the WorkSpace image source.</p>
    pub fn set_os_version(mut self, input: ::std::option::Option<crate::types::OsVersion>) -> Self {
        self.os_version = input;
        self
    }
    /// <p>The OS version for the WorkSpace image source.</p>
    pub fn get_os_version(&self) -> &::std::option::Option<crate::types::OsVersion> {
        &self.os_version
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The resource tags. Each WorkSpaces resource can have a maximum of 50 tags.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>The resource tags. Each WorkSpaces resource can have a maximum of 50 tags.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The resource tags. Each WorkSpaces resource can have a maximum of 50 tags.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`ImportCustomWorkspaceImageInput`](crate::operation::import_custom_workspace_image::ImportCustomWorkspaceImageInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::import_custom_workspace_image::ImportCustomWorkspaceImageInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::import_custom_workspace_image::ImportCustomWorkspaceImageInput {
            image_name: self.image_name,
            image_description: self.image_description,
            compute_type: self.compute_type,
            protocol: self.protocol,
            image_source: self.image_source,
            infrastructure_configuration_arn: self.infrastructure_configuration_arn,
            platform: self.platform,
            os_version: self.os_version,
            tags: self.tags,
        })
    }
}
