// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeCustomWorkspaceImageImportOutput {
    /// <p>The identifier of the WorkSpace image.</p>
    pub image_id: ::std::option::Option<::std::string::String>,
    /// <p>The infrastructure configuration ARN that specifies how the WorkSpace image is built.</p>
    pub infrastructure_configuration_arn: ::std::option::Option<::std::string::String>,
    /// <p>The state of the WorkSpace image.</p>
    pub state: ::std::option::Option<crate::types::CustomWorkspaceImageImportState>,
    /// <p>The timestamp when the WorkSpace image import was created.</p>
    pub created: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The timestamp when the WorkSpace image import was last updated.</p>
    pub last_updated_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Describes the image import source.</p>
    pub image_source: ::std::option::Option<crate::types::ImageSourceIdentifier>,
    /// <p>The image builder instance ID of the WorkSpace image.</p>
    pub image_builder_instance_id: ::std::option::Option<::std::string::String>,
    /// <p>Describes in-depth details about the error. These details include the possible causes of the error and troubleshooting information.</p>
    pub error_details: ::std::option::Option<::std::vec::Vec<crate::types::CustomWorkspaceImageImportErrorDetails>>,
    _request_id: Option<String>,
}
impl DescribeCustomWorkspaceImageImportOutput {
    /// <p>The identifier of the WorkSpace image.</p>
    pub fn image_id(&self) -> ::std::option::Option<&str> {
        self.image_id.as_deref()
    }
    /// <p>The infrastructure configuration ARN that specifies how the WorkSpace image is built.</p>
    pub fn infrastructure_configuration_arn(&self) -> ::std::option::Option<&str> {
        self.infrastructure_configuration_arn.as_deref()
    }
    /// <p>The state of the WorkSpace image.</p>
    pub fn state(&self) -> ::std::option::Option<&crate::types::CustomWorkspaceImageImportState> {
        self.state.as_ref()
    }
    /// <p>The timestamp when the WorkSpace image import was created.</p>
    pub fn created(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created.as_ref()
    }
    /// <p>The timestamp when the WorkSpace image import was last updated.</p>
    pub fn last_updated_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_updated_time.as_ref()
    }
    /// <p>Describes the image import source.</p>
    pub fn image_source(&self) -> ::std::option::Option<&crate::types::ImageSourceIdentifier> {
        self.image_source.as_ref()
    }
    /// <p>The image builder instance ID of the WorkSpace image.</p>
    pub fn image_builder_instance_id(&self) -> ::std::option::Option<&str> {
        self.image_builder_instance_id.as_deref()
    }
    /// <p>Describes in-depth details about the error. These details include the possible causes of the error and troubleshooting information.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.error_details.is_none()`.
    pub fn error_details(&self) -> &[crate::types::CustomWorkspaceImageImportErrorDetails] {
        self.error_details.as_deref().unwrap_or_default()
    }
}
impl ::aws_types::request_id::RequestId for DescribeCustomWorkspaceImageImportOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeCustomWorkspaceImageImportOutput {
    /// Creates a new builder-style object to manufacture [`DescribeCustomWorkspaceImageImportOutput`](crate::operation::describe_custom_workspace_image_import::DescribeCustomWorkspaceImageImportOutput).
    pub fn builder() -> crate::operation::describe_custom_workspace_image_import::builders::DescribeCustomWorkspaceImageImportOutputBuilder {
        crate::operation::describe_custom_workspace_image_import::builders::DescribeCustomWorkspaceImageImportOutputBuilder::default()
    }
}

/// A builder for [`DescribeCustomWorkspaceImageImportOutput`](crate::operation::describe_custom_workspace_image_import::DescribeCustomWorkspaceImageImportOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DescribeCustomWorkspaceImageImportOutputBuilder {
    pub(crate) image_id: ::std::option::Option<::std::string::String>,
    pub(crate) infrastructure_configuration_arn: ::std::option::Option<::std::string::String>,
    pub(crate) state: ::std::option::Option<crate::types::CustomWorkspaceImageImportState>,
    pub(crate) created: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_updated_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) image_source: ::std::option::Option<crate::types::ImageSourceIdentifier>,
    pub(crate) image_builder_instance_id: ::std::option::Option<::std::string::String>,
    pub(crate) error_details: ::std::option::Option<::std::vec::Vec<crate::types::CustomWorkspaceImageImportErrorDetails>>,
    _request_id: Option<String>,
}
impl DescribeCustomWorkspaceImageImportOutputBuilder {
    /// <p>The identifier of the WorkSpace image.</p>
    pub fn image_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.image_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the WorkSpace image.</p>
    pub fn set_image_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.image_id = input;
        self
    }
    /// <p>The identifier of the WorkSpace image.</p>
    pub fn get_image_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.image_id
    }
    /// <p>The infrastructure configuration ARN that specifies how the WorkSpace image is built.</p>
    pub fn infrastructure_configuration_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.infrastructure_configuration_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The infrastructure configuration ARN that specifies how the WorkSpace image is built.</p>
    pub fn set_infrastructure_configuration_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.infrastructure_configuration_arn = input;
        self
    }
    /// <p>The infrastructure configuration ARN that specifies how the WorkSpace image is built.</p>
    pub fn get_infrastructure_configuration_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.infrastructure_configuration_arn
    }
    /// <p>The state of the WorkSpace image.</p>
    pub fn state(mut self, input: crate::types::CustomWorkspaceImageImportState) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The state of the WorkSpace image.</p>
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::CustomWorkspaceImageImportState>) -> Self {
        self.state = input;
        self
    }
    /// <p>The state of the WorkSpace image.</p>
    pub fn get_state(&self) -> &::std::option::Option<crate::types::CustomWorkspaceImageImportState> {
        &self.state
    }
    /// <p>The timestamp when the WorkSpace image import was created.</p>
    pub fn created(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the WorkSpace image import was created.</p>
    pub fn set_created(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created = input;
        self
    }
    /// <p>The timestamp when the WorkSpace image import was created.</p>
    pub fn get_created(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created
    }
    /// <p>The timestamp when the WorkSpace image import was last updated.</p>
    pub fn last_updated_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the WorkSpace image import was last updated.</p>
    pub fn set_last_updated_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated_time = input;
        self
    }
    /// <p>The timestamp when the WorkSpace image import was last updated.</p>
    pub fn get_last_updated_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated_time
    }
    /// <p>Describes the image import source.</p>
    pub fn image_source(mut self, input: crate::types::ImageSourceIdentifier) -> Self {
        self.image_source = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes the image import source.</p>
    pub fn set_image_source(mut self, input: ::std::option::Option<crate::types::ImageSourceIdentifier>) -> Self {
        self.image_source = input;
        self
    }
    /// <p>Describes the image import source.</p>
    pub fn get_image_source(&self) -> &::std::option::Option<crate::types::ImageSourceIdentifier> {
        &self.image_source
    }
    /// <p>The image builder instance ID of the WorkSpace image.</p>
    pub fn image_builder_instance_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.image_builder_instance_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The image builder instance ID of the WorkSpace image.</p>
    pub fn set_image_builder_instance_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.image_builder_instance_id = input;
        self
    }
    /// <p>The image builder instance ID of the WorkSpace image.</p>
    pub fn get_image_builder_instance_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.image_builder_instance_id
    }
    /// Appends an item to `error_details`.
    ///
    /// To override the contents of this collection use [`set_error_details`](Self::set_error_details).
    ///
    /// <p>Describes in-depth details about the error. These details include the possible causes of the error and troubleshooting information.</p>
    pub fn error_details(mut self, input: crate::types::CustomWorkspaceImageImportErrorDetails) -> Self {
        let mut v = self.error_details.unwrap_or_default();
        v.push(input);
        self.error_details = ::std::option::Option::Some(v);
        self
    }
    /// <p>Describes in-depth details about the error. These details include the possible causes of the error and troubleshooting information.</p>
    pub fn set_error_details(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::CustomWorkspaceImageImportErrorDetails>>) -> Self {
        self.error_details = input;
        self
    }
    /// <p>Describes in-depth details about the error. These details include the possible causes of the error and troubleshooting information.</p>
    pub fn get_error_details(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CustomWorkspaceImageImportErrorDetails>> {
        &self.error_details
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeCustomWorkspaceImageImportOutput`](crate::operation::describe_custom_workspace_image_import::DescribeCustomWorkspaceImageImportOutput).
    pub fn build(self) -> crate::operation::describe_custom_workspace_image_import::DescribeCustomWorkspaceImageImportOutput {
        crate::operation::describe_custom_workspace_image_import::DescribeCustomWorkspaceImageImportOutput {
            image_id: self.image_id,
            infrastructure_configuration_arn: self.infrastructure_configuration_arn,
            state: self.state,
            created: self.created,
            last_updated_time: self.last_updated_time,
            image_source: self.image_source,
            image_builder_instance_id: self.image_builder_instance_id,
            error_details: self.error_details,
            _request_id: self._request_id,
        }
    }
}
