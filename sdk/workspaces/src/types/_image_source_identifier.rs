// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the image import source.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum ImageSourceIdentifier {
    /// <p>The identifier of the EC2 image.</p>
    Ec2ImageId(::std::string::String),
    /// <p>The EC2 import task ID to import the image from the Amazon EC2 VM import process.</p>
    Ec2ImportTaskId(::std::string::String),
    /// <p>The ARN of the EC2 Image Builder image.</p>
    ImageBuildVersionArn(::std::string::String),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl ImageSourceIdentifier {
    /// Tries to convert the enum instance into [`Ec2ImageId`](crate::types::ImageSourceIdentifier::Ec2ImageId), extracting the inner [`String`](::std::string::String).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_ec2_image_id(&self) -> ::std::result::Result<&::std::string::String, &Self> {
        if let ImageSourceIdentifier::Ec2ImageId(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Ec2ImageId`](crate::types::ImageSourceIdentifier::Ec2ImageId).
    pub fn is_ec2_image_id(&self) -> bool {
        self.as_ec2_image_id().is_ok()
    }
    /// Tries to convert the enum instance into [`Ec2ImportTaskId`](crate::types::ImageSourceIdentifier::Ec2ImportTaskId), extracting the inner [`String`](::std::string::String).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_ec2_import_task_id(&self) -> ::std::result::Result<&::std::string::String, &Self> {
        if let ImageSourceIdentifier::Ec2ImportTaskId(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Ec2ImportTaskId`](crate::types::ImageSourceIdentifier::Ec2ImportTaskId).
    pub fn is_ec2_import_task_id(&self) -> bool {
        self.as_ec2_import_task_id().is_ok()
    }
    /// Tries to convert the enum instance into [`ImageBuildVersionArn`](crate::types::ImageSourceIdentifier::ImageBuildVersionArn), extracting the inner [`String`](::std::string::String).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_image_build_version_arn(&self) -> ::std::result::Result<&::std::string::String, &Self> {
        if let ImageSourceIdentifier::ImageBuildVersionArn(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`ImageBuildVersionArn`](crate::types::ImageSourceIdentifier::ImageBuildVersionArn).
    pub fn is_image_build_version_arn(&self) -> bool {
        self.as_image_build_version_arn().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
