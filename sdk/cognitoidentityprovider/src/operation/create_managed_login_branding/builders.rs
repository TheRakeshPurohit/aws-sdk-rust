// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_managed_login_branding::_create_managed_login_branding_output::CreateManagedLoginBrandingOutputBuilder;

pub use crate::operation::create_managed_login_branding::_create_managed_login_branding_input::CreateManagedLoginBrandingInputBuilder;

impl crate::operation::create_managed_login_branding::builders::CreateManagedLoginBrandingInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_managed_login_branding::CreateManagedLoginBrandingOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_managed_login_branding::CreateManagedLoginBrandingError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_managed_login_branding();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateManagedLoginBranding`.
///
/// <p>Creates a new set of branding settings for a user pool style and associates it with an app client. This operation is the programmatic option for the creation of a new style in the branding editor.</p>
/// <p>Provides values for UI customization in a <code>Settings</code> JSON object and image files in an <code>Assets</code> array. To send the JSON object <code>Document</code> type parameter in <code>Settings</code>, you might need to update to the most recent version of your Amazon Web Services SDK. To create a new style with default settings, set <code>UseCognitoProvidedValues</code> to <code>true</code> and don't provide values for any other options.</p>
/// <p>This operation has a 2-megabyte request-size limit and include the CSS settings and image assets for your app client. Your branding settings might exceed 2MB in size. Amazon Cognito doesn't require that you pass all parameters in one request and preserves existing style settings that you don't specify. If your request is larger than 2MB, separate it into multiple requests, each with a size smaller than the limit.</p><note>
/// <p>Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.</p>
/// <p class="title"><b>Learn more</b></p>
/// <ul>
/// <li>
/// <p><a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html">Signing Amazon Web Services API Requests</a></p></li>
/// <li>
/// <p><a href="https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html">Using the Amazon Cognito user pools API and user pool endpoints</a></p></li>
/// </ul>
/// </note>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateManagedLoginBrandingFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_managed_login_branding::builders::CreateManagedLoginBrandingInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_managed_login_branding::CreateManagedLoginBrandingOutput,
        crate::operation::create_managed_login_branding::CreateManagedLoginBrandingError,
    > for CreateManagedLoginBrandingFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_managed_login_branding::CreateManagedLoginBrandingOutput,
            crate::operation::create_managed_login_branding::CreateManagedLoginBrandingError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreateManagedLoginBrandingFluentBuilder {
    /// Creates a new `CreateManagedLoginBrandingFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateManagedLoginBranding as a reference.
    pub fn as_input(&self) -> &crate::operation::create_managed_login_branding::builders::CreateManagedLoginBrandingInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_managed_login_branding::CreateManagedLoginBrandingOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_managed_login_branding::CreateManagedLoginBrandingError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_managed_login_branding::CreateManagedLoginBranding::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_managed_login_branding::CreateManagedLoginBranding::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_managed_login_branding::CreateManagedLoginBrandingOutput,
        crate::operation::create_managed_login_branding::CreateManagedLoginBrandingError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The ID of the user pool where you want to create a new branding style.</p>
    pub fn user_pool_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.user_pool_id(input.into());
        self
    }
    /// <p>The ID of the user pool where you want to create a new branding style.</p>
    pub fn set_user_pool_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_user_pool_id(input);
        self
    }
    /// <p>The ID of the user pool where you want to create a new branding style.</p>
    pub fn get_user_pool_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_user_pool_id()
    }
    /// <p>The app client that you want to create the branding style for. Each style is linked to an app client until you delete it.</p>
    pub fn client_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.client_id(input.into());
        self
    }
    /// <p>The app client that you want to create the branding style for. Each style is linked to an app client until you delete it.</p>
    pub fn set_client_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_client_id(input);
        self
    }
    /// <p>The app client that you want to create the branding style for. Each style is linked to an app client until you delete it.</p>
    pub fn get_client_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_client_id()
    }
    /// <p>When true, applies the default branding style options. These default options are managed by Amazon Cognito. You can modify them later in the branding editor.</p>
    /// <p>When you specify <code>true</code> for this option, you must also omit values for <code>Settings</code> and <code>Assets</code> in the request.</p>
    pub fn use_cognito_provided_values(mut self, input: bool) -> Self {
        self.inner = self.inner.use_cognito_provided_values(input);
        self
    }
    /// <p>When true, applies the default branding style options. These default options are managed by Amazon Cognito. You can modify them later in the branding editor.</p>
    /// <p>When you specify <code>true</code> for this option, you must also omit values for <code>Settings</code> and <code>Assets</code> in the request.</p>
    pub fn set_use_cognito_provided_values(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_use_cognito_provided_values(input);
        self
    }
    /// <p>When true, applies the default branding style options. These default options are managed by Amazon Cognito. You can modify them later in the branding editor.</p>
    /// <p>When you specify <code>true</code> for this option, you must also omit values for <code>Settings</code> and <code>Assets</code> in the request.</p>
    pub fn get_use_cognito_provided_values(&self) -> &::std::option::Option<bool> {
        self.inner.get_use_cognito_provided_values()
    }
    /// <p>A JSON file, encoded as a <code>Document</code> type, with the the settings that you want to apply to your style.</p>
    /// <p>The following components are not currently implemented and reserved for future use:</p>
    /// <ul>
    /// <li>
    /// <p><code>signUp</code></p></li>
    /// <li>
    /// <p><code>instructions</code></p></li>
    /// <li>
    /// <p><code>sessionTimerDisplay</code></p></li>
    /// <li>
    /// <p><code>languageSelector</code> (for localization, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-managed-login.html#managed-login-localization">Managed login localization)</a></p></li>
    /// </ul>
    pub fn settings(mut self, input: ::aws_smithy_types::Document) -> Self {
        self.inner = self.inner.settings(input);
        self
    }
    /// <p>A JSON file, encoded as a <code>Document</code> type, with the the settings that you want to apply to your style.</p>
    /// <p>The following components are not currently implemented and reserved for future use:</p>
    /// <ul>
    /// <li>
    /// <p><code>signUp</code></p></li>
    /// <li>
    /// <p><code>instructions</code></p></li>
    /// <li>
    /// <p><code>sessionTimerDisplay</code></p></li>
    /// <li>
    /// <p><code>languageSelector</code> (for localization, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-managed-login.html#managed-login-localization">Managed login localization)</a></p></li>
    /// </ul>
    pub fn set_settings(mut self, input: ::std::option::Option<::aws_smithy_types::Document>) -> Self {
        self.inner = self.inner.set_settings(input);
        self
    }
    /// <p>A JSON file, encoded as a <code>Document</code> type, with the the settings that you want to apply to your style.</p>
    /// <p>The following components are not currently implemented and reserved for future use:</p>
    /// <ul>
    /// <li>
    /// <p><code>signUp</code></p></li>
    /// <li>
    /// <p><code>instructions</code></p></li>
    /// <li>
    /// <p><code>sessionTimerDisplay</code></p></li>
    /// <li>
    /// <p><code>languageSelector</code> (for localization, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-managed-login.html#managed-login-localization">Managed login localization)</a></p></li>
    /// </ul>
    pub fn get_settings(&self) -> &::std::option::Option<::aws_smithy_types::Document> {
        self.inner.get_settings()
    }
    ///
    /// Appends an item to `Assets`.
    ///
    /// To override the contents of this collection use [`set_assets`](Self::set_assets).
    ///
    /// <p>An array of image files that you want to apply to functions like backgrounds, logos, and icons. Each object must also indicate whether it is for dark mode, light mode, or browser-adaptive mode.</p>
    pub fn assets(mut self, input: crate::types::AssetType) -> Self {
        self.inner = self.inner.assets(input);
        self
    }
    /// <p>An array of image files that you want to apply to functions like backgrounds, logos, and icons. Each object must also indicate whether it is for dark mode, light mode, or browser-adaptive mode.</p>
    pub fn set_assets(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AssetType>>) -> Self {
        self.inner = self.inner.set_assets(input);
        self
    }
    /// <p>An array of image files that you want to apply to functions like backgrounds, logos, and icons. Each object must also indicate whether it is for dark mode, light mode, or browser-adaptive mode.</p>
    pub fn get_assets(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AssetType>> {
        self.inner.get_assets()
    }
}
