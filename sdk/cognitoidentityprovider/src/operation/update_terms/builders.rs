// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_terms::_update_terms_output::UpdateTermsOutputBuilder;

pub use crate::operation::update_terms::_update_terms_input::UpdateTermsInputBuilder;

impl crate::operation::update_terms::builders::UpdateTermsInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::update_terms::UpdateTermsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_terms::UpdateTermsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.update_terms();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `UpdateTerms`.
///
/// <p>Modifies existing terms documents for the requested app client. When Terms and conditions and Privacy policy documents are configured, the app client displays links to them in the sign-up page of managed login for the app client.</p>
/// <p>You can provide URLs for terms documents in the languages that are supported by <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-managed-login.html#managed-login-localization">managed login localization</a>. Amazon Cognito directs users to the terms documents for their current language, with fallback to <code>default</code> if no document exists for the language.</p>
/// <p>Each request accepts one type of terms document and a map of language-to-link for that document type. You must provide both types of terms documents in at least one language before Amazon Cognito displays your terms documents. Supply each type in separate requests.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-managed-login.html#managed-login-terms-documents">Terms documents</a>.</p><note>
/// <p>Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.</p>
/// <p class="title"><b>Learn more</b></p>
/// <ul>
/// <li>
/// <p><a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html">Signing Amazon Web Services API Requests</a></p></li>
/// <li>
/// <p><a href="https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html">Using the Amazon Cognito user pools API and user pool endpoints</a></p></li>
/// </ul>
/// </note>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct UpdateTermsFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_terms::builders::UpdateTermsInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::update_terms::UpdateTermsOutput,
        crate::operation::update_terms::UpdateTermsError,
    > for UpdateTermsFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::update_terms::UpdateTermsOutput,
            crate::operation::update_terms::UpdateTermsError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl UpdateTermsFluentBuilder {
    /// Creates a new `UpdateTermsFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the UpdateTerms as a reference.
    pub fn as_input(&self) -> &crate::operation::update_terms::builders::UpdateTermsInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_terms::UpdateTermsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_terms::UpdateTermsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::update_terms::UpdateTerms::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::update_terms::UpdateTerms::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::update_terms::UpdateTermsOutput,
        crate::operation::update_terms::UpdateTermsError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The ID of the terms document that you want to update.</p>
    pub fn terms_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.terms_id(input.into());
        self
    }
    /// <p>The ID of the terms document that you want to update.</p>
    pub fn set_terms_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_terms_id(input);
        self
    }
    /// <p>The ID of the terms document that you want to update.</p>
    pub fn get_terms_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_terms_id()
    }
    /// <p>The ID of the user pool that contains the terms that you want to update.</p>
    pub fn user_pool_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.user_pool_id(input.into());
        self
    }
    /// <p>The ID of the user pool that contains the terms that you want to update.</p>
    pub fn set_user_pool_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_user_pool_id(input);
        self
    }
    /// <p>The ID of the user pool that contains the terms that you want to update.</p>
    pub fn get_user_pool_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_user_pool_id()
    }
    /// <p>The new name that you want to apply to the requested terms documents.</p>
    pub fn terms_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.terms_name(input.into());
        self
    }
    /// <p>The new name that you want to apply to the requested terms documents.</p>
    pub fn set_terms_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_terms_name(input);
        self
    }
    /// <p>The new name that you want to apply to the requested terms documents.</p>
    pub fn get_terms_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_terms_name()
    }
    /// <p>This parameter is reserved for future use and currently accepts only one value.</p>
    pub fn terms_source(mut self, input: crate::types::TermsSourceType) -> Self {
        self.inner = self.inner.terms_source(input);
        self
    }
    /// <p>This parameter is reserved for future use and currently accepts only one value.</p>
    pub fn set_terms_source(mut self, input: ::std::option::Option<crate::types::TermsSourceType>) -> Self {
        self.inner = self.inner.set_terms_source(input);
        self
    }
    /// <p>This parameter is reserved for future use and currently accepts only one value.</p>
    pub fn get_terms_source(&self) -> &::std::option::Option<crate::types::TermsSourceType> {
        self.inner.get_terms_source()
    }
    /// <p>This parameter is reserved for future use and currently accepts only one value.</p>
    pub fn enforcement(mut self, input: crate::types::TermsEnforcementType) -> Self {
        self.inner = self.inner.enforcement(input);
        self
    }
    /// <p>This parameter is reserved for future use and currently accepts only one value.</p>
    pub fn set_enforcement(mut self, input: ::std::option::Option<crate::types::TermsEnforcementType>) -> Self {
        self.inner = self.inner.set_enforcement(input);
        self
    }
    /// <p>This parameter is reserved for future use and currently accepts only one value.</p>
    pub fn get_enforcement(&self) -> &::std::option::Option<crate::types::TermsEnforcementType> {
        self.inner.get_enforcement()
    }
    ///
    /// Adds a key-value pair to `Links`.
    ///
    /// To override the contents of this collection use [`set_links`](Self::set_links).
    ///
    /// <p>A map of URLs to languages. For each localized language that will view the requested <code>TermsName</code>, assign a URL. A selection of <code>cognito:default</code> displays for all languages that don't have a language-specific URL.</p>
    /// <p>For example, <code>"cognito:default": "https://terms.example.com", "cognito:spanish": "https://terms.example.com/es"</code>.</p>
    pub fn links(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.links(k.into(), v.into());
        self
    }
    /// <p>A map of URLs to languages. For each localized language that will view the requested <code>TermsName</code>, assign a URL. A selection of <code>cognito:default</code> displays for all languages that don't have a language-specific URL.</p>
    /// <p>For example, <code>"cognito:default": "https://terms.example.com", "cognito:spanish": "https://terms.example.com/es"</code>.</p>
    pub fn set_links(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.inner = self.inner.set_links(input);
        self
    }
    /// <p>A map of URLs to languages. For each localized language that will view the requested <code>TermsName</code>, assign a URL. A selection of <code>cognito:default</code> displays for all languages that don't have a language-specific URL.</p>
    /// <p>For example, <code>"cognito:default": "https://terms.example.com", "cognito:spanish": "https://terms.example.com/es"</code>.</p>
    pub fn get_links(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.inner.get_links()
    }
}
