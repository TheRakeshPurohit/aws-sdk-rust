// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateTermsOutput {
    /// <p>A summary of your terms documents. Includes a unique identifier for later changes to the terms documents.</p>
    pub terms: ::std::option::Option<crate::types::TermsType>,
    _request_id: Option<String>,
}
impl CreateTermsOutput {
    /// <p>A summary of your terms documents. Includes a unique identifier for later changes to the terms documents.</p>
    pub fn terms(&self) -> ::std::option::Option<&crate::types::TermsType> {
        self.terms.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for CreateTermsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateTermsOutput {
    /// Creates a new builder-style object to manufacture [`CreateTermsOutput`](crate::operation::create_terms::CreateTermsOutput).
    pub fn builder() -> crate::operation::create_terms::builders::CreateTermsOutputBuilder {
        crate::operation::create_terms::builders::CreateTermsOutputBuilder::default()
    }
}

/// A builder for [`CreateTermsOutput`](crate::operation::create_terms::CreateTermsOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateTermsOutputBuilder {
    pub(crate) terms: ::std::option::Option<crate::types::TermsType>,
    _request_id: Option<String>,
}
impl CreateTermsOutputBuilder {
    /// <p>A summary of your terms documents. Includes a unique identifier for later changes to the terms documents.</p>
    pub fn terms(mut self, input: crate::types::TermsType) -> Self {
        self.terms = ::std::option::Option::Some(input);
        self
    }
    /// <p>A summary of your terms documents. Includes a unique identifier for later changes to the terms documents.</p>
    pub fn set_terms(mut self, input: ::std::option::Option<crate::types::TermsType>) -> Self {
        self.terms = input;
        self
    }
    /// <p>A summary of your terms documents. Includes a unique identifier for later changes to the terms documents.</p>
    pub fn get_terms(&self) -> &::std::option::Option<crate::types::TermsType> {
        &self.terms
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CreateTermsOutput`](crate::operation::create_terms::CreateTermsOutput).
    pub fn build(self) -> crate::operation::create_terms::CreateTermsOutput {
        crate::operation::create_terms::CreateTermsOutput {
            terms: self.terms,
            _request_id: self._request_id,
        }
    }
}
