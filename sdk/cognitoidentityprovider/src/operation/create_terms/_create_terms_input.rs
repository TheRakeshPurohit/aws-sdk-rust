// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CreateTermsInput {
    /// <p>The ID of the user pool where you want to create terms documents.</p>
    pub user_pool_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the app client where you want to create terms documents. Must be an app client in the requested user pool.</p>
    pub client_id: ::std::option::Option<::std::string::String>,
    /// <p>A friendly name for the document that you want to create in the current request. Must begin with <code>terms-of-use</code> or <code>privacy-policy</code> as identification of the document type. Provide URLs for both <code>terms-of-use</code> and <code>privacy-policy</code> in separate requests.</p>
    pub terms_name: ::std::option::Option<::std::string::String>,
    /// <p>This parameter is reserved for future use and currently accepts only one value.</p>
    pub terms_source: ::std::option::Option<crate::types::TermsSourceType>,
    /// <p>This parameter is reserved for future use and currently accepts only one value.</p>
    pub enforcement: ::std::option::Option<crate::types::TermsEnforcementType>,
    /// <p>A map of URLs to languages. For each localized language that will view the requested <code>TermsName</code>, assign a URL. A selection of <code>cognito:default</code> displays for all languages that don't have a language-specific URL.</p>
    /// <p>For example, <code>"cognito:default": "https://terms.example.com", "cognito:spanish": "https://terms.example.com/es"</code>.</p>
    pub links: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateTermsInput {
    /// <p>The ID of the user pool where you want to create terms documents.</p>
    pub fn user_pool_id(&self) -> ::std::option::Option<&str> {
        self.user_pool_id.as_deref()
    }
    /// <p>The ID of the app client where you want to create terms documents. Must be an app client in the requested user pool.</p>
    pub fn client_id(&self) -> ::std::option::Option<&str> {
        self.client_id.as_deref()
    }
    /// <p>A friendly name for the document that you want to create in the current request. Must begin with <code>terms-of-use</code> or <code>privacy-policy</code> as identification of the document type. Provide URLs for both <code>terms-of-use</code> and <code>privacy-policy</code> in separate requests.</p>
    pub fn terms_name(&self) -> ::std::option::Option<&str> {
        self.terms_name.as_deref()
    }
    /// <p>This parameter is reserved for future use and currently accepts only one value.</p>
    pub fn terms_source(&self) -> ::std::option::Option<&crate::types::TermsSourceType> {
        self.terms_source.as_ref()
    }
    /// <p>This parameter is reserved for future use and currently accepts only one value.</p>
    pub fn enforcement(&self) -> ::std::option::Option<&crate::types::TermsEnforcementType> {
        self.enforcement.as_ref()
    }
    /// <p>A map of URLs to languages. For each localized language that will view the requested <code>TermsName</code>, assign a URL. A selection of <code>cognito:default</code> displays for all languages that don't have a language-specific URL.</p>
    /// <p>For example, <code>"cognito:default": "https://terms.example.com", "cognito:spanish": "https://terms.example.com/es"</code>.</p>
    pub fn links(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.links.as_ref()
    }
}
impl ::std::fmt::Debug for CreateTermsInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateTermsInput");
        formatter.field("user_pool_id", &self.user_pool_id);
        formatter.field("client_id", &"*** Sensitive Data Redacted ***");
        formatter.field("terms_name", &self.terms_name);
        formatter.field("terms_source", &self.terms_source);
        formatter.field("enforcement", &self.enforcement);
        formatter.field("links", &self.links);
        formatter.finish()
    }
}
impl CreateTermsInput {
    /// Creates a new builder-style object to manufacture [`CreateTermsInput`](crate::operation::create_terms::CreateTermsInput).
    pub fn builder() -> crate::operation::create_terms::builders::CreateTermsInputBuilder {
        crate::operation::create_terms::builders::CreateTermsInputBuilder::default()
    }
}

/// A builder for [`CreateTermsInput`](crate::operation::create_terms::CreateTermsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct CreateTermsInputBuilder {
    pub(crate) user_pool_id: ::std::option::Option<::std::string::String>,
    pub(crate) client_id: ::std::option::Option<::std::string::String>,
    pub(crate) terms_name: ::std::option::Option<::std::string::String>,
    pub(crate) terms_source: ::std::option::Option<crate::types::TermsSourceType>,
    pub(crate) enforcement: ::std::option::Option<crate::types::TermsEnforcementType>,
    pub(crate) links: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateTermsInputBuilder {
    /// <p>The ID of the user pool where you want to create terms documents.</p>
    /// This field is required.
    pub fn user_pool_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_pool_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the user pool where you want to create terms documents.</p>
    pub fn set_user_pool_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_pool_id = input;
        self
    }
    /// <p>The ID of the user pool where you want to create terms documents.</p>
    pub fn get_user_pool_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_pool_id
    }
    /// <p>The ID of the app client where you want to create terms documents. Must be an app client in the requested user pool.</p>
    /// This field is required.
    pub fn client_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the app client where you want to create terms documents. Must be an app client in the requested user pool.</p>
    pub fn set_client_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_id = input;
        self
    }
    /// <p>The ID of the app client where you want to create terms documents. Must be an app client in the requested user pool.</p>
    pub fn get_client_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_id
    }
    /// <p>A friendly name for the document that you want to create in the current request. Must begin with <code>terms-of-use</code> or <code>privacy-policy</code> as identification of the document type. Provide URLs for both <code>terms-of-use</code> and <code>privacy-policy</code> in separate requests.</p>
    /// This field is required.
    pub fn terms_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.terms_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A friendly name for the document that you want to create in the current request. Must begin with <code>terms-of-use</code> or <code>privacy-policy</code> as identification of the document type. Provide URLs for both <code>terms-of-use</code> and <code>privacy-policy</code> in separate requests.</p>
    pub fn set_terms_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.terms_name = input;
        self
    }
    /// <p>A friendly name for the document that you want to create in the current request. Must begin with <code>terms-of-use</code> or <code>privacy-policy</code> as identification of the document type. Provide URLs for both <code>terms-of-use</code> and <code>privacy-policy</code> in separate requests.</p>
    pub fn get_terms_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.terms_name
    }
    /// <p>This parameter is reserved for future use and currently accepts only one value.</p>
    /// This field is required.
    pub fn terms_source(mut self, input: crate::types::TermsSourceType) -> Self {
        self.terms_source = ::std::option::Option::Some(input);
        self
    }
    /// <p>This parameter is reserved for future use and currently accepts only one value.</p>
    pub fn set_terms_source(mut self, input: ::std::option::Option<crate::types::TermsSourceType>) -> Self {
        self.terms_source = input;
        self
    }
    /// <p>This parameter is reserved for future use and currently accepts only one value.</p>
    pub fn get_terms_source(&self) -> &::std::option::Option<crate::types::TermsSourceType> {
        &self.terms_source
    }
    /// <p>This parameter is reserved for future use and currently accepts only one value.</p>
    /// This field is required.
    pub fn enforcement(mut self, input: crate::types::TermsEnforcementType) -> Self {
        self.enforcement = ::std::option::Option::Some(input);
        self
    }
    /// <p>This parameter is reserved for future use and currently accepts only one value.</p>
    pub fn set_enforcement(mut self, input: ::std::option::Option<crate::types::TermsEnforcementType>) -> Self {
        self.enforcement = input;
        self
    }
    /// <p>This parameter is reserved for future use and currently accepts only one value.</p>
    pub fn get_enforcement(&self) -> &::std::option::Option<crate::types::TermsEnforcementType> {
        &self.enforcement
    }
    /// Adds a key-value pair to `links`.
    ///
    /// To override the contents of this collection use [`set_links`](Self::set_links).
    ///
    /// <p>A map of URLs to languages. For each localized language that will view the requested <code>TermsName</code>, assign a URL. A selection of <code>cognito:default</code> displays for all languages that don't have a language-specific URL.</p>
    /// <p>For example, <code>"cognito:default": "https://terms.example.com", "cognito:spanish": "https://terms.example.com/es"</code>.</p>
    pub fn links(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.links.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.links = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>A map of URLs to languages. For each localized language that will view the requested <code>TermsName</code>, assign a URL. A selection of <code>cognito:default</code> displays for all languages that don't have a language-specific URL.</p>
    /// <p>For example, <code>"cognito:default": "https://terms.example.com", "cognito:spanish": "https://terms.example.com/es"</code>.</p>
    pub fn set_links(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.links = input;
        self
    }
    /// <p>A map of URLs to languages. For each localized language that will view the requested <code>TermsName</code>, assign a URL. A selection of <code>cognito:default</code> displays for all languages that don't have a language-specific URL.</p>
    /// <p>For example, <code>"cognito:default": "https://terms.example.com", "cognito:spanish": "https://terms.example.com/es"</code>.</p>
    pub fn get_links(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.links
    }
    /// Consumes the builder and constructs a [`CreateTermsInput`](crate::operation::create_terms::CreateTermsInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::create_terms::CreateTermsInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_terms::CreateTermsInput {
            user_pool_id: self.user_pool_id,
            client_id: self.client_id,
            terms_name: self.terms_name,
            terms_source: self.terms_source,
            enforcement: self.enforcement,
            links: self.links,
        })
    }
}
impl ::std::fmt::Debug for CreateTermsInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateTermsInputBuilder");
        formatter.field("user_pool_id", &self.user_pool_id);
        formatter.field("client_id", &"*** Sensitive Data Redacted ***");
        formatter.field("terms_name", &self.terms_name);
        formatter.field("terms_source", &self.terms_source);
        formatter.field("enforcement", &self.enforcement);
        formatter.field("links", &self.links);
        formatter.finish()
    }
}
