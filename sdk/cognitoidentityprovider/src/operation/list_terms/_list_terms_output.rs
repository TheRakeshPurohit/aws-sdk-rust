// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListTermsOutput {
    /// <p>A summary of the requested terms documents. Includes unique identifiers for later changes to the terms documents.</p>
    pub terms: ::std::vec::Vec<crate::types::TermsDescriptionType>,
    /// <p>This API operation returns a limited number of results. The pagination token is an identifier that you can present in an additional API request with the same parameters. When you include the pagination token, Amazon Cognito returns the next set of items after the current list. Subsequent requests return a new pagination token. By use of this token, you can paginate through the full list of items.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListTermsOutput {
    /// <p>A summary of the requested terms documents. Includes unique identifiers for later changes to the terms documents.</p>
    pub fn terms(&self) -> &[crate::types::TermsDescriptionType] {
        use std::ops::Deref;
        self.terms.deref()
    }
    /// <p>This API operation returns a limited number of results. The pagination token is an identifier that you can present in an additional API request with the same parameters. When you include the pagination token, Amazon Cognito returns the next set of items after the current list. Subsequent requests return a new pagination token. By use of this token, you can paginate through the full list of items.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ::aws_types::request_id::RequestId for ListTermsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListTermsOutput {
    /// Creates a new builder-style object to manufacture [`ListTermsOutput`](crate::operation::list_terms::ListTermsOutput).
    pub fn builder() -> crate::operation::list_terms::builders::ListTermsOutputBuilder {
        crate::operation::list_terms::builders::ListTermsOutputBuilder::default()
    }
}

/// A builder for [`ListTermsOutput`](crate::operation::list_terms::ListTermsOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListTermsOutputBuilder {
    pub(crate) terms: ::std::option::Option<::std::vec::Vec<crate::types::TermsDescriptionType>>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListTermsOutputBuilder {
    /// Appends an item to `terms`.
    ///
    /// To override the contents of this collection use [`set_terms`](Self::set_terms).
    ///
    /// <p>A summary of the requested terms documents. Includes unique identifiers for later changes to the terms documents.</p>
    pub fn terms(mut self, input: crate::types::TermsDescriptionType) -> Self {
        let mut v = self.terms.unwrap_or_default();
        v.push(input);
        self.terms = ::std::option::Option::Some(v);
        self
    }
    /// <p>A summary of the requested terms documents. Includes unique identifiers for later changes to the terms documents.</p>
    pub fn set_terms(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::TermsDescriptionType>>) -> Self {
        self.terms = input;
        self
    }
    /// <p>A summary of the requested terms documents. Includes unique identifiers for later changes to the terms documents.</p>
    pub fn get_terms(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TermsDescriptionType>> {
        &self.terms
    }
    /// <p>This API operation returns a limited number of results. The pagination token is an identifier that you can present in an additional API request with the same parameters. When you include the pagination token, Amazon Cognito returns the next set of items after the current list. Subsequent requests return a new pagination token. By use of this token, you can paginate through the full list of items.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>This API operation returns a limited number of results. The pagination token is an identifier that you can present in an additional API request with the same parameters. When you include the pagination token, Amazon Cognito returns the next set of items after the current list. Subsequent requests return a new pagination token. By use of this token, you can paginate through the full list of items.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>This API operation returns a limited number of results. The pagination token is an identifier that you can present in an additional API request with the same parameters. When you include the pagination token, Amazon Cognito returns the next set of items after the current list. Subsequent requests return a new pagination token. By use of this token, you can paginate through the full list of items.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListTermsOutput`](crate::operation::list_terms::ListTermsOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`terms`](crate::operation::list_terms::builders::ListTermsOutputBuilder::terms)
    pub fn build(self) -> ::std::result::Result<crate::operation::list_terms::ListTermsOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::list_terms::ListTermsOutput {
            terms: self.terms.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "terms",
                    "terms was not specified but it is required when building ListTermsOutput",
                )
            })?,
            next_token: self.next_token,
            _request_id: self._request_id,
        })
    }
}
