// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateTerms`](crate::operation::create_terms::builders::CreateTermsFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`user_pool_id(impl Into<String>)`](crate::operation::create_terms::builders::CreateTermsFluentBuilder::user_pool_id) / [`set_user_pool_id(Option<String>)`](crate::operation::create_terms::builders::CreateTermsFluentBuilder::set_user_pool_id):<br>required: **true**<br><p>The ID of the user pool where you want to create terms documents.</p><br>
    ///   - [`client_id(impl Into<String>)`](crate::operation::create_terms::builders::CreateTermsFluentBuilder::client_id) / [`set_client_id(Option<String>)`](crate::operation::create_terms::builders::CreateTermsFluentBuilder::set_client_id):<br>required: **true**<br><p>The ID of the app client where you want to create terms documents. Must be an app client in the requested user pool.</p><br>
    ///   - [`terms_name(impl Into<String>)`](crate::operation::create_terms::builders::CreateTermsFluentBuilder::terms_name) / [`set_terms_name(Option<String>)`](crate::operation::create_terms::builders::CreateTermsFluentBuilder::set_terms_name):<br>required: **true**<br><p>A friendly name for the document that you want to create in the current request. Must begin with <code>terms-of-use</code> or <code>privacy-policy</code> as identification of the document type. Provide URLs for both <code>terms-of-use</code> and <code>privacy-policy</code> in separate requests.</p><br>
    ///   - [`terms_source(TermsSourceType)`](crate::operation::create_terms::builders::CreateTermsFluentBuilder::terms_source) / [`set_terms_source(Option<TermsSourceType>)`](crate::operation::create_terms::builders::CreateTermsFluentBuilder::set_terms_source):<br>required: **true**<br><p>This parameter is reserved for future use and currently accepts only one value.</p><br>
    ///   - [`enforcement(TermsEnforcementType)`](crate::operation::create_terms::builders::CreateTermsFluentBuilder::enforcement) / [`set_enforcement(Option<TermsEnforcementType>)`](crate::operation::create_terms::builders::CreateTermsFluentBuilder::set_enforcement):<br>required: **true**<br><p>This parameter is reserved for future use and currently accepts only one value.</p><br>
    ///   - [`links(impl Into<String>, impl Into<String>)`](crate::operation::create_terms::builders::CreateTermsFluentBuilder::links) / [`set_links(Option<HashMap::<String, String>>)`](crate::operation::create_terms::builders::CreateTermsFluentBuilder::set_links):<br>required: **false**<br><p>A map of URLs to languages. For each localized language that will view the requested <code>TermsName</code>, assign a URL. A selection of <code>cognito:default</code> displays for all languages that don't have a language-specific URL.</p> <p>For example, <code>"cognito:default": "https://terms.example.com", "cognito:spanish": "https://terms.example.com/es"</code>.</p><br>
    /// - On success, responds with [`CreateTermsOutput`](crate::operation::create_terms::CreateTermsOutput) with field(s):
    ///   - [`terms(Option<TermsType>)`](crate::operation::create_terms::CreateTermsOutput::terms): <p>A summary of your terms documents. Includes a unique identifier for later changes to the terms documents.</p>
    /// - On failure, responds with [`SdkError<CreateTermsError>`](crate::operation::create_terms::CreateTermsError)
    pub fn create_terms(&self) -> crate::operation::create_terms::builders::CreateTermsFluentBuilder {
        crate::operation::create_terms::builders::CreateTermsFluentBuilder::new(self.handle.clone())
    }
}
