// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateManagedLoginBranding`](crate::operation::create_managed_login_branding::builders::CreateManagedLoginBrandingFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`user_pool_id(impl Into<String>)`](crate::operation::create_managed_login_branding::builders::CreateManagedLoginBrandingFluentBuilder::user_pool_id) / [`set_user_pool_id(Option<String>)`](crate::operation::create_managed_login_branding::builders::CreateManagedLoginBrandingFluentBuilder::set_user_pool_id):<br>required: **true**<br><p>The ID of the user pool where you want to create a new branding style.</p><br>
    ///   - [`client_id(impl Into<String>)`](crate::operation::create_managed_login_branding::builders::CreateManagedLoginBrandingFluentBuilder::client_id) / [`set_client_id(Option<String>)`](crate::operation::create_managed_login_branding::builders::CreateManagedLoginBrandingFluentBuilder::set_client_id):<br>required: **true**<br><p>The app client that you want to create the branding style for. Each style is linked to an app client until you delete it.</p><br>
    ///   - [`use_cognito_provided_values(bool)`](crate::operation::create_managed_login_branding::builders::CreateManagedLoginBrandingFluentBuilder::use_cognito_provided_values) / [`set_use_cognito_provided_values(Option<bool>)`](crate::operation::create_managed_login_branding::builders::CreateManagedLoginBrandingFluentBuilder::set_use_cognito_provided_values):<br>required: **false**<br><p>When true, applies the default branding style options. These default options are managed by Amazon Cognito. You can modify them later in the branding editor.</p> <p>When you specify <code>true</code> for this option, you must also omit values for <code>Settings</code> and <code>Assets</code> in the request.</p><br>
    ///   - [`settings(Document)`](crate::operation::create_managed_login_branding::builders::CreateManagedLoginBrandingFluentBuilder::settings) / [`set_settings(Option<Document>)`](crate::operation::create_managed_login_branding::builders::CreateManagedLoginBrandingFluentBuilder::set_settings):<br>required: **false**<br><p>A JSON file, encoded as a <code>Document</code> type, with the the settings that you want to apply to your style.</p> <p>The following components are not currently implemented and reserved for future use:</p> <ul>  <li>   <p><code>signUp</code></p></li>  <li>   <p><code>instructions</code></p></li>  <li>   <p><code>sessionTimerDisplay</code></p></li>  <li>   <p><code>languageSelector</code> (for localization, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-managed-login.html#managed-login-localization">Managed login localization)</a></p></li> </ul><br>
    ///   - [`assets(AssetType)`](crate::operation::create_managed_login_branding::builders::CreateManagedLoginBrandingFluentBuilder::assets) / [`set_assets(Option<Vec::<AssetType>>)`](crate::operation::create_managed_login_branding::builders::CreateManagedLoginBrandingFluentBuilder::set_assets):<br>required: **false**<br><p>An array of image files that you want to apply to functions like backgrounds, logos, and icons. Each object must also indicate whether it is for dark mode, light mode, or browser-adaptive mode.</p><br>
    /// - On success, responds with [`CreateManagedLoginBrandingOutput`](crate::operation::create_managed_login_branding::CreateManagedLoginBrandingOutput) with field(s):
    ///   - [`managed_login_branding(Option<ManagedLoginBrandingType>)`](crate::operation::create_managed_login_branding::CreateManagedLoginBrandingOutput::managed_login_branding): <p>The details of the branding style that you created.</p>
    /// - On failure, responds with [`SdkError<CreateManagedLoginBrandingError>`](crate::operation::create_managed_login_branding::CreateManagedLoginBrandingError)
    pub fn create_managed_login_branding(
        &self,
    ) -> crate::operation::create_managed_login_branding::builders::CreateManagedLoginBrandingFluentBuilder {
        crate::operation::create_managed_login_branding::builders::CreateManagedLoginBrandingFluentBuilder::new(self.handle.clone())
    }
}
