// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`UpdateManagedLoginBranding`](crate::operation::update_managed_login_branding::builders::UpdateManagedLoginBrandingFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`user_pool_id(impl Into<String>)`](crate::operation::update_managed_login_branding::builders::UpdateManagedLoginBrandingFluentBuilder::user_pool_id) / [`set_user_pool_id(Option<String>)`](crate::operation::update_managed_login_branding::builders::UpdateManagedLoginBrandingFluentBuilder::set_user_pool_id):<br>required: **false**<br><p>The ID of the user pool that contains the managed login branding style that you want to update.</p><br>
    ///   - [`managed_login_branding_id(impl Into<String>)`](crate::operation::update_managed_login_branding::builders::UpdateManagedLoginBrandingFluentBuilder::managed_login_branding_id) / [`set_managed_login_branding_id(Option<String>)`](crate::operation::update_managed_login_branding::builders::UpdateManagedLoginBrandingFluentBuilder::set_managed_login_branding_id):<br>required: **false**<br><p>The ID of the managed login branding style that you want to update.</p><br>
    ///   - [`use_cognito_provided_values(bool)`](crate::operation::update_managed_login_branding::builders::UpdateManagedLoginBrandingFluentBuilder::use_cognito_provided_values) / [`set_use_cognito_provided_values(Option<bool>)`](crate::operation::update_managed_login_branding::builders::UpdateManagedLoginBrandingFluentBuilder::set_use_cognito_provided_values):<br>required: **false**<br><p>When <code>true</code>, applies the default branding style options. This option reverts to default style options that are managed by Amazon Cognito. You can modify them later in the branding editor.</p> <p>When you specify <code>true</code> for this option, you must also omit values for <code>Settings</code> and <code>Assets</code> in the request.</p><br>
    ///   - [`settings(Document)`](crate::operation::update_managed_login_branding::builders::UpdateManagedLoginBrandingFluentBuilder::settings) / [`set_settings(Option<Document>)`](crate::operation::update_managed_login_branding::builders::UpdateManagedLoginBrandingFluentBuilder::set_settings):<br>required: **false**<br><p>A JSON file, encoded as a <code>Document</code> type, with the the settings that you want to apply to your style.</p> <p>The following components are not currently implemented and reserved for future use:</p> <ul>  <li>   <p><code>signUp</code></p></li>  <li>   <p><code>instructions</code></p></li>  <li>   <p><code>sessionTimerDisplay</code></p></li>  <li>   <p><code>languageSelector</code> (for localization, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-managed-login.html#managed-login-localization">Managed login localization)</a></p></li> </ul><br>
    ///   - [`assets(AssetType)`](crate::operation::update_managed_login_branding::builders::UpdateManagedLoginBrandingFluentBuilder::assets) / [`set_assets(Option<Vec::<AssetType>>)`](crate::operation::update_managed_login_branding::builders::UpdateManagedLoginBrandingFluentBuilder::set_assets):<br>required: **false**<br><p>An array of image files that you want to apply to roles like backgrounds, logos, and icons. Each object must also indicate whether it is for dark mode, light mode, or browser-adaptive mode.</p><br>
    /// - On success, responds with [`UpdateManagedLoginBrandingOutput`](crate::operation::update_managed_login_branding::UpdateManagedLoginBrandingOutput) with field(s):
    ///   - [`managed_login_branding(Option<ManagedLoginBrandingType>)`](crate::operation::update_managed_login_branding::UpdateManagedLoginBrandingOutput::managed_login_branding): <p>The details of the branding style that you updated.</p>
    /// - On failure, responds with [`SdkError<UpdateManagedLoginBrandingError>`](crate::operation::update_managed_login_branding::UpdateManagedLoginBrandingError)
    pub fn update_managed_login_branding(
        &self,
    ) -> crate::operation::update_managed_login_branding::builders::UpdateManagedLoginBrandingFluentBuilder {
        crate::operation::update_managed_login_branding::builders::UpdateManagedLoginBrandingFluentBuilder::new(self.handle.clone())
    }
}
