// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The details of a set of terms documents. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-managed-login.html#managed-login-terms-documents">Terms documents</a>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct TermsType {
    /// <p>The ID of the terms documents.</p>
    pub terms_id: ::std::string::String,
    /// <p>The ID of the user pool that contains the terms documents.</p>
    pub user_pool_id: ::std::string::String,
    /// <p>The ID of the app client that the terms documents are assigned to.</p>
    pub client_id: ::std::string::String,
    /// <p>The type and friendly name of the terms documents.</p>
    pub terms_name: ::std::string::String,
    /// <p>This parameter is reserved for future use and currently accepts one value.</p>
    pub terms_source: crate::types::TermsSourceType,
    /// <p>This parameter is reserved for future use and currently accepts one value.</p>
    pub enforcement: crate::types::TermsEnforcementType,
    /// <p>A map of URLs to languages. For each localized language that will view the requested <code>TermsName</code>, assign a URL. A selection of <code>cognito:default</code> displays for all languages that don't have a language-specific URL.</p>
    /// <p>For example, <code>"cognito:default": "https://terms.example.com", "cognito:spanish": "https://terms.example.com/es"</code>.</p>
    pub links: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    /// <p>The date and time when the item was created. Amazon Cognito returns this timestamp in UNIX epoch time format. Your SDK might render the output in a human-readable format like ISO 8601 or a Java <code>Date</code> object.</p>
    pub creation_date: ::aws_smithy_types::DateTime,
    /// <p>The date and time when the item was modified. Amazon Cognito returns this timestamp in UNIX epoch time format. Your SDK might render the output in a human-readable format like ISO 8601 or a Java <code>Date</code> object.</p>
    pub last_modified_date: ::aws_smithy_types::DateTime,
}
impl TermsType {
    /// <p>The ID of the terms documents.</p>
    pub fn terms_id(&self) -> &str {
        use std::ops::Deref;
        self.terms_id.deref()
    }
    /// <p>The ID of the user pool that contains the terms documents.</p>
    pub fn user_pool_id(&self) -> &str {
        use std::ops::Deref;
        self.user_pool_id.deref()
    }
    /// <p>The ID of the app client that the terms documents are assigned to.</p>
    pub fn client_id(&self) -> &str {
        use std::ops::Deref;
        self.client_id.deref()
    }
    /// <p>The type and friendly name of the terms documents.</p>
    pub fn terms_name(&self) -> &str {
        use std::ops::Deref;
        self.terms_name.deref()
    }
    /// <p>This parameter is reserved for future use and currently accepts one value.</p>
    pub fn terms_source(&self) -> &crate::types::TermsSourceType {
        &self.terms_source
    }
    /// <p>This parameter is reserved for future use and currently accepts one value.</p>
    pub fn enforcement(&self) -> &crate::types::TermsEnforcementType {
        &self.enforcement
    }
    /// <p>A map of URLs to languages. For each localized language that will view the requested <code>TermsName</code>, assign a URL. A selection of <code>cognito:default</code> displays for all languages that don't have a language-specific URL.</p>
    /// <p>For example, <code>"cognito:default": "https://terms.example.com", "cognito:spanish": "https://terms.example.com/es"</code>.</p>
    pub fn links(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.links
    }
    /// <p>The date and time when the item was created. Amazon Cognito returns this timestamp in UNIX epoch time format. Your SDK might render the output in a human-readable format like ISO 8601 or a Java <code>Date</code> object.</p>
    pub fn creation_date(&self) -> &::aws_smithy_types::DateTime {
        &self.creation_date
    }
    /// <p>The date and time when the item was modified. Amazon Cognito returns this timestamp in UNIX epoch time format. Your SDK might render the output in a human-readable format like ISO 8601 or a Java <code>Date</code> object.</p>
    pub fn last_modified_date(&self) -> &::aws_smithy_types::DateTime {
        &self.last_modified_date
    }
}
impl ::std::fmt::Debug for TermsType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("TermsType");
        formatter.field("terms_id", &self.terms_id);
        formatter.field("user_pool_id", &self.user_pool_id);
        formatter.field("client_id", &"*** Sensitive Data Redacted ***");
        formatter.field("terms_name", &self.terms_name);
        formatter.field("terms_source", &self.terms_source);
        formatter.field("enforcement", &self.enforcement);
        formatter.field("links", &self.links);
        formatter.field("creation_date", &self.creation_date);
        formatter.field("last_modified_date", &self.last_modified_date);
        formatter.finish()
    }
}
impl TermsType {
    /// Creates a new builder-style object to manufacture [`TermsType`](crate::types::TermsType).
    pub fn builder() -> crate::types::builders::TermsTypeBuilder {
        crate::types::builders::TermsTypeBuilder::default()
    }
}

/// A builder for [`TermsType`](crate::types::TermsType).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct TermsTypeBuilder {
    pub(crate) terms_id: ::std::option::Option<::std::string::String>,
    pub(crate) user_pool_id: ::std::option::Option<::std::string::String>,
    pub(crate) client_id: ::std::option::Option<::std::string::String>,
    pub(crate) terms_name: ::std::option::Option<::std::string::String>,
    pub(crate) terms_source: ::std::option::Option<crate::types::TermsSourceType>,
    pub(crate) enforcement: ::std::option::Option<crate::types::TermsEnforcementType>,
    pub(crate) links: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) creation_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_modified_date: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl TermsTypeBuilder {
    /// <p>The ID of the terms documents.</p>
    /// This field is required.
    pub fn terms_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.terms_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the terms documents.</p>
    pub fn set_terms_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.terms_id = input;
        self
    }
    /// <p>The ID of the terms documents.</p>
    pub fn get_terms_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.terms_id
    }
    /// <p>The ID of the user pool that contains the terms documents.</p>
    /// This field is required.
    pub fn user_pool_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_pool_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the user pool that contains the terms documents.</p>
    pub fn set_user_pool_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_pool_id = input;
        self
    }
    /// <p>The ID of the user pool that contains the terms documents.</p>
    pub fn get_user_pool_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_pool_id
    }
    /// <p>The ID of the app client that the terms documents are assigned to.</p>
    /// This field is required.
    pub fn client_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the app client that the terms documents are assigned to.</p>
    pub fn set_client_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_id = input;
        self
    }
    /// <p>The ID of the app client that the terms documents are assigned to.</p>
    pub fn get_client_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_id
    }
    /// <p>The type and friendly name of the terms documents.</p>
    /// This field is required.
    pub fn terms_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.terms_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type and friendly name of the terms documents.</p>
    pub fn set_terms_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.terms_name = input;
        self
    }
    /// <p>The type and friendly name of the terms documents.</p>
    pub fn get_terms_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.terms_name
    }
    /// <p>This parameter is reserved for future use and currently accepts one value.</p>
    /// This field is required.
    pub fn terms_source(mut self, input: crate::types::TermsSourceType) -> Self {
        self.terms_source = ::std::option::Option::Some(input);
        self
    }
    /// <p>This parameter is reserved for future use and currently accepts one value.</p>
    pub fn set_terms_source(mut self, input: ::std::option::Option<crate::types::TermsSourceType>) -> Self {
        self.terms_source = input;
        self
    }
    /// <p>This parameter is reserved for future use and currently accepts one value.</p>
    pub fn get_terms_source(&self) -> &::std::option::Option<crate::types::TermsSourceType> {
        &self.terms_source
    }
    /// <p>This parameter is reserved for future use and currently accepts one value.</p>
    /// This field is required.
    pub fn enforcement(mut self, input: crate::types::TermsEnforcementType) -> Self {
        self.enforcement = ::std::option::Option::Some(input);
        self
    }
    /// <p>This parameter is reserved for future use and currently accepts one value.</p>
    pub fn set_enforcement(mut self, input: ::std::option::Option<crate::types::TermsEnforcementType>) -> Self {
        self.enforcement = input;
        self
    }
    /// <p>This parameter is reserved for future use and currently accepts one value.</p>
    pub fn get_enforcement(&self) -> &::std::option::Option<crate::types::TermsEnforcementType> {
        &self.enforcement
    }
    /// Adds a key-value pair to `links`.
    ///
    /// To override the contents of this collection use [`set_links`](Self::set_links).
    ///
    /// <p>A map of URLs to languages. For each localized language that will view the requested <code>TermsName</code>, assign a URL. A selection of <code>cognito:default</code> displays for all languages that don't have a language-specific URL.</p>
    /// <p>For example, <code>"cognito:default": "https://terms.example.com", "cognito:spanish": "https://terms.example.com/es"</code>.</p>
    pub fn links(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.links.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.links = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>A map of URLs to languages. For each localized language that will view the requested <code>TermsName</code>, assign a URL. A selection of <code>cognito:default</code> displays for all languages that don't have a language-specific URL.</p>
    /// <p>For example, <code>"cognito:default": "https://terms.example.com", "cognito:spanish": "https://terms.example.com/es"</code>.</p>
    pub fn set_links(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.links = input;
        self
    }
    /// <p>A map of URLs to languages. For each localized language that will view the requested <code>TermsName</code>, assign a URL. A selection of <code>cognito:default</code> displays for all languages that don't have a language-specific URL.</p>
    /// <p>For example, <code>"cognito:default": "https://terms.example.com", "cognito:spanish": "https://terms.example.com/es"</code>.</p>
    pub fn get_links(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.links
    }
    /// <p>The date and time when the item was created. Amazon Cognito returns this timestamp in UNIX epoch time format. Your SDK might render the output in a human-readable format like ISO 8601 or a Java <code>Date</code> object.</p>
    /// This field is required.
    pub fn creation_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time when the item was created. Amazon Cognito returns this timestamp in UNIX epoch time format. Your SDK might render the output in a human-readable format like ISO 8601 or a Java <code>Date</code> object.</p>
    pub fn set_creation_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_date = input;
        self
    }
    /// <p>The date and time when the item was created. Amazon Cognito returns this timestamp in UNIX epoch time format. Your SDK might render the output in a human-readable format like ISO 8601 or a Java <code>Date</code> object.</p>
    pub fn get_creation_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_date
    }
    /// <p>The date and time when the item was modified. Amazon Cognito returns this timestamp in UNIX epoch time format. Your SDK might render the output in a human-readable format like ISO 8601 or a Java <code>Date</code> object.</p>
    /// This field is required.
    pub fn last_modified_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_modified_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time when the item was modified. Amazon Cognito returns this timestamp in UNIX epoch time format. Your SDK might render the output in a human-readable format like ISO 8601 or a Java <code>Date</code> object.</p>
    pub fn set_last_modified_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_modified_date = input;
        self
    }
    /// <p>The date and time when the item was modified. Amazon Cognito returns this timestamp in UNIX epoch time format. Your SDK might render the output in a human-readable format like ISO 8601 or a Java <code>Date</code> object.</p>
    pub fn get_last_modified_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_modified_date
    }
    /// Consumes the builder and constructs a [`TermsType`](crate::types::TermsType).
    /// This method will fail if any of the following fields are not set:
    /// - [`terms_id`](crate::types::builders::TermsTypeBuilder::terms_id)
    /// - [`user_pool_id`](crate::types::builders::TermsTypeBuilder::user_pool_id)
    /// - [`client_id`](crate::types::builders::TermsTypeBuilder::client_id)
    /// - [`terms_name`](crate::types::builders::TermsTypeBuilder::terms_name)
    /// - [`terms_source`](crate::types::builders::TermsTypeBuilder::terms_source)
    /// - [`enforcement`](crate::types::builders::TermsTypeBuilder::enforcement)
    /// - [`links`](crate::types::builders::TermsTypeBuilder::links)
    /// - [`creation_date`](crate::types::builders::TermsTypeBuilder::creation_date)
    /// - [`last_modified_date`](crate::types::builders::TermsTypeBuilder::last_modified_date)
    pub fn build(self) -> ::std::result::Result<crate::types::TermsType, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::TermsType {
            terms_id: self.terms_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "terms_id",
                    "terms_id was not specified but it is required when building TermsType",
                )
            })?,
            user_pool_id: self.user_pool_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "user_pool_id",
                    "user_pool_id was not specified but it is required when building TermsType",
                )
            })?,
            client_id: self.client_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "client_id",
                    "client_id was not specified but it is required when building TermsType",
                )
            })?,
            terms_name: self.terms_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "terms_name",
                    "terms_name was not specified but it is required when building TermsType",
                )
            })?,
            terms_source: self.terms_source.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "terms_source",
                    "terms_source was not specified but it is required when building TermsType",
                )
            })?,
            enforcement: self.enforcement.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "enforcement",
                    "enforcement was not specified but it is required when building TermsType",
                )
            })?,
            links: self.links.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "links",
                    "links was not specified but it is required when building TermsType",
                )
            })?,
            creation_date: self.creation_date.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "creation_date",
                    "creation_date was not specified but it is required when building TermsType",
                )
            })?,
            last_modified_date: self.last_modified_date.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "last_modified_date",
                    "last_modified_date was not specified but it is required when building TermsType",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for TermsTypeBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("TermsTypeBuilder");
        formatter.field("terms_id", &self.terms_id);
        formatter.field("user_pool_id", &self.user_pool_id);
        formatter.field("client_id", &"*** Sensitive Data Redacted ***");
        formatter.field("terms_name", &self.terms_name);
        formatter.field("terms_source", &self.terms_source);
        formatter.field("enforcement", &self.enforcement);
        formatter.field("links", &self.links);
        formatter.field("creation_date", &self.creation_date);
        formatter.field("last_modified_date", &self.last_modified_date);
        formatter.finish()
    }
}
