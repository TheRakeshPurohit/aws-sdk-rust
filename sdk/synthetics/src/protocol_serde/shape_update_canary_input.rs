// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_canary_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_canary::UpdateCanaryInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.artifact_config {
        #[allow(unused_mut)]
        let mut object_2 = object.key("ArtifactConfig").start_object();
        crate::protocol_serde::shape_artifact_config_input::ser_artifact_config_input(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.artifact_s3_location {
        object.key("ArtifactS3Location").string(var_3.as_str());
    }
    if let Some(var_4) = &input.browser_configs {
        let mut array_5 = object.key("BrowserConfigs").start_array();
        for item_6 in var_4 {
            {
                #[allow(unused_mut)]
                let mut object_7 = array_5.value().start_object();
                crate::protocol_serde::shape_browser_config::ser_browser_config(&mut object_7, item_6)?;
                object_7.finish();
            }
        }
        array_5.finish();
    }
    if let Some(var_8) = &input.code {
        #[allow(unused_mut)]
        let mut object_9 = object.key("Code").start_object();
        crate::protocol_serde::shape_canary_code_input::ser_canary_code_input(&mut object_9, var_8)?;
        object_9.finish();
    }
    if let Some(var_10) = &input.dry_run_id {
        object.key("DryRunId").string(var_10.as_str());
    }
    if let Some(var_11) = &input.execution_role_arn {
        object.key("ExecutionRoleArn").string(var_11.as_str());
    }
    if let Some(var_12) = &input.failure_retention_period_in_days {
        object.key("FailureRetentionPeriodInDays").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_12).into()),
        );
    }
    if let Some(var_13) = &input.provisioned_resource_cleanup {
        object.key("ProvisionedResourceCleanup").string(var_13.as_str());
    }
    if let Some(var_14) = &input.run_config {
        #[allow(unused_mut)]
        let mut object_15 = object.key("RunConfig").start_object();
        crate::protocol_serde::shape_canary_run_config_input::ser_canary_run_config_input(&mut object_15, var_14)?;
        object_15.finish();
    }
    if let Some(var_16) = &input.runtime_version {
        object.key("RuntimeVersion").string(var_16.as_str());
    }
    if let Some(var_17) = &input.schedule {
        #[allow(unused_mut)]
        let mut object_18 = object.key("Schedule").start_object();
        crate::protocol_serde::shape_canary_schedule_input::ser_canary_schedule_input(&mut object_18, var_17)?;
        object_18.finish();
    }
    if let Some(var_19) = &input.success_retention_period_in_days {
        object.key("SuccessRetentionPeriodInDays").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_19).into()),
        );
    }
    if let Some(var_20) = &input.visual_reference {
        #[allow(unused_mut)]
        let mut object_21 = object.key("VisualReference").start_object();
        crate::protocol_serde::shape_visual_reference_input::ser_visual_reference_input(&mut object_21, var_20)?;
        object_21.finish();
    }
    if let Some(var_22) = &input.visual_references {
        let mut array_23 = object.key("VisualReferences").start_array();
        for item_24 in var_22 {
            {
                #[allow(unused_mut)]
                let mut object_25 = array_23.value().start_object();
                crate::protocol_serde::shape_visual_reference_input::ser_visual_reference_input(&mut object_25, item_24)?;
                object_25.finish();
            }
        }
        array_23.finish();
    }
    if let Some(var_26) = &input.vpc_config {
        #[allow(unused_mut)]
        let mut object_27 = object.key("VpcConfig").start_object();
        crate::protocol_serde::shape_vpc_config_input::ser_vpc_config_input(&mut object_27, var_26)?;
        object_27.finish();
    }
    Ok(())
}
