// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure of engine configurations for the canary, one for each browser type that the canary is configured to run on.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EngineConfig {
    /// <p>Each engine configuration contains the ARN of the Lambda function that is used as the canary's engine for a specific browser type.</p>
    pub engine_arn: ::std::option::Option<::std::string::String>,
    /// <p>The browser type associated with this engine configuration.</p>
    pub browser_type: ::std::option::Option<crate::types::BrowserType>,
}
impl EngineConfig {
    /// <p>Each engine configuration contains the ARN of the Lambda function that is used as the canary's engine for a specific browser type.</p>
    pub fn engine_arn(&self) -> ::std::option::Option<&str> {
        self.engine_arn.as_deref()
    }
    /// <p>The browser type associated with this engine configuration.</p>
    pub fn browser_type(&self) -> ::std::option::Option<&crate::types::BrowserType> {
        self.browser_type.as_ref()
    }
}
impl EngineConfig {
    /// Creates a new builder-style object to manufacture [`EngineConfig`](crate::types::EngineConfig).
    pub fn builder() -> crate::types::builders::EngineConfigBuilder {
        crate::types::builders::EngineConfigBuilder::default()
    }
}

/// A builder for [`EngineConfig`](crate::types::EngineConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct EngineConfigBuilder {
    pub(crate) engine_arn: ::std::option::Option<::std::string::String>,
    pub(crate) browser_type: ::std::option::Option<crate::types::BrowserType>,
}
impl EngineConfigBuilder {
    /// <p>Each engine configuration contains the ARN of the Lambda function that is used as the canary's engine for a specific browser type.</p>
    pub fn engine_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.engine_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Each engine configuration contains the ARN of the Lambda function that is used as the canary's engine for a specific browser type.</p>
    pub fn set_engine_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.engine_arn = input;
        self
    }
    /// <p>Each engine configuration contains the ARN of the Lambda function that is used as the canary's engine for a specific browser type.</p>
    pub fn get_engine_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.engine_arn
    }
    /// <p>The browser type associated with this engine configuration.</p>
    pub fn browser_type(mut self, input: crate::types::BrowserType) -> Self {
        self.browser_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The browser type associated with this engine configuration.</p>
    pub fn set_browser_type(mut self, input: ::std::option::Option<crate::types::BrowserType>) -> Self {
        self.browser_type = input;
        self
    }
    /// <p>The browser type associated with this engine configuration.</p>
    pub fn get_browser_type(&self) -> &::std::option::Option<crate::types::BrowserType> {
        &self.browser_type
    }
    /// Consumes the builder and constructs a [`EngineConfig`](crate::types::EngineConfig).
    pub fn build(self) -> crate::types::EngineConfig {
        crate::types::EngineConfig {
            engine_arn: self.engine_arn,
            browser_type: self.browser_type,
        }
    }
}
