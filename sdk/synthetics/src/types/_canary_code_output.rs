// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This structure contains information about the canary's Lambda handler and where its code is stored by CloudWatch Synthetics.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CanaryCodeOutput {
    /// <p>The ARN of the Lambda layer where Synthetics stores the canary script code.</p>
    pub source_location_arn: ::std::option::Option<::std::string::String>,
    /// <p>The entry point to use for the source code when running the canary.</p>
    /// <p>This field is required when you don't specify <code>BlueprintTypes</code> and is not allowed when you specify <code>BlueprintTypes</code>.</p>
    pub handler: ::std::option::Option<::std::string::String>,
    /// <p><code>BlueprintTypes</code> is a list of templates that enable simplified canary creation. You can create canaries for common monitoring scenarios by providing only a JSON configuration file instead of writing custom scripts. The only supported value is <code>multi-checks</code>.</p>
    /// <p>Multi-checks monitors HTTP/DNS/SSL/TCP endpoints with built-in authentication schemes (Basic, API Key, OAuth, SigV4) and assertion capabilities. When you specify <code>BlueprintTypes</code>, the Handler field cannot be specified since the blueprint provides a pre-defined entry point.</p>
    /// <p><code>BlueprintTypes</code> is supported only on canaries for syn-nodejs-3.0 runtime or later.</p>
    pub blueprint_types: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>A list of dependencies that are used for running this canary. The dependencies are specified as a key-value pair, where the key is the type of dependency and the value is the dependency reference.</p>
    pub dependencies: ::std::option::Option<::std::vec::Vec<crate::types::Dependency>>,
}
impl CanaryCodeOutput {
    /// <p>The ARN of the Lambda layer where Synthetics stores the canary script code.</p>
    pub fn source_location_arn(&self) -> ::std::option::Option<&str> {
        self.source_location_arn.as_deref()
    }
    /// <p>The entry point to use for the source code when running the canary.</p>
    /// <p>This field is required when you don't specify <code>BlueprintTypes</code> and is not allowed when you specify <code>BlueprintTypes</code>.</p>
    pub fn handler(&self) -> ::std::option::Option<&str> {
        self.handler.as_deref()
    }
    /// <p><code>BlueprintTypes</code> is a list of templates that enable simplified canary creation. You can create canaries for common monitoring scenarios by providing only a JSON configuration file instead of writing custom scripts. The only supported value is <code>multi-checks</code>.</p>
    /// <p>Multi-checks monitors HTTP/DNS/SSL/TCP endpoints with built-in authentication schemes (Basic, API Key, OAuth, SigV4) and assertion capabilities. When you specify <code>BlueprintTypes</code>, the Handler field cannot be specified since the blueprint provides a pre-defined entry point.</p>
    /// <p><code>BlueprintTypes</code> is supported only on canaries for syn-nodejs-3.0 runtime or later.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.blueprint_types.is_none()`.
    pub fn blueprint_types(&self) -> &[::std::string::String] {
        self.blueprint_types.as_deref().unwrap_or_default()
    }
    /// <p>A list of dependencies that are used for running this canary. The dependencies are specified as a key-value pair, where the key is the type of dependency and the value is the dependency reference.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.dependencies.is_none()`.
    pub fn dependencies(&self) -> &[crate::types::Dependency] {
        self.dependencies.as_deref().unwrap_or_default()
    }
}
impl CanaryCodeOutput {
    /// Creates a new builder-style object to manufacture [`CanaryCodeOutput`](crate::types::CanaryCodeOutput).
    pub fn builder() -> crate::types::builders::CanaryCodeOutputBuilder {
        crate::types::builders::CanaryCodeOutputBuilder::default()
    }
}

/// A builder for [`CanaryCodeOutput`](crate::types::CanaryCodeOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CanaryCodeOutputBuilder {
    pub(crate) source_location_arn: ::std::option::Option<::std::string::String>,
    pub(crate) handler: ::std::option::Option<::std::string::String>,
    pub(crate) blueprint_types: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) dependencies: ::std::option::Option<::std::vec::Vec<crate::types::Dependency>>,
}
impl CanaryCodeOutputBuilder {
    /// <p>The ARN of the Lambda layer where Synthetics stores the canary script code.</p>
    pub fn source_location_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_location_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the Lambda layer where Synthetics stores the canary script code.</p>
    pub fn set_source_location_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_location_arn = input;
        self
    }
    /// <p>The ARN of the Lambda layer where Synthetics stores the canary script code.</p>
    pub fn get_source_location_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_location_arn
    }
    /// <p>The entry point to use for the source code when running the canary.</p>
    /// <p>This field is required when you don't specify <code>BlueprintTypes</code> and is not allowed when you specify <code>BlueprintTypes</code>.</p>
    pub fn handler(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.handler = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The entry point to use for the source code when running the canary.</p>
    /// <p>This field is required when you don't specify <code>BlueprintTypes</code> and is not allowed when you specify <code>BlueprintTypes</code>.</p>
    pub fn set_handler(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.handler = input;
        self
    }
    /// <p>The entry point to use for the source code when running the canary.</p>
    /// <p>This field is required when you don't specify <code>BlueprintTypes</code> and is not allowed when you specify <code>BlueprintTypes</code>.</p>
    pub fn get_handler(&self) -> &::std::option::Option<::std::string::String> {
        &self.handler
    }
    /// Appends an item to `blueprint_types`.
    ///
    /// To override the contents of this collection use [`set_blueprint_types`](Self::set_blueprint_types).
    ///
    /// <p><code>BlueprintTypes</code> is a list of templates that enable simplified canary creation. You can create canaries for common monitoring scenarios by providing only a JSON configuration file instead of writing custom scripts. The only supported value is <code>multi-checks</code>.</p>
    /// <p>Multi-checks monitors HTTP/DNS/SSL/TCP endpoints with built-in authentication schemes (Basic, API Key, OAuth, SigV4) and assertion capabilities. When you specify <code>BlueprintTypes</code>, the Handler field cannot be specified since the blueprint provides a pre-defined entry point.</p>
    /// <p><code>BlueprintTypes</code> is supported only on canaries for syn-nodejs-3.0 runtime or later.</p>
    pub fn blueprint_types(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.blueprint_types.unwrap_or_default();
        v.push(input.into());
        self.blueprint_types = ::std::option::Option::Some(v);
        self
    }
    /// <p><code>BlueprintTypes</code> is a list of templates that enable simplified canary creation. You can create canaries for common monitoring scenarios by providing only a JSON configuration file instead of writing custom scripts. The only supported value is <code>multi-checks</code>.</p>
    /// <p>Multi-checks monitors HTTP/DNS/SSL/TCP endpoints with built-in authentication schemes (Basic, API Key, OAuth, SigV4) and assertion capabilities. When you specify <code>BlueprintTypes</code>, the Handler field cannot be specified since the blueprint provides a pre-defined entry point.</p>
    /// <p><code>BlueprintTypes</code> is supported only on canaries for syn-nodejs-3.0 runtime or later.</p>
    pub fn set_blueprint_types(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.blueprint_types = input;
        self
    }
    /// <p><code>BlueprintTypes</code> is a list of templates that enable simplified canary creation. You can create canaries for common monitoring scenarios by providing only a JSON configuration file instead of writing custom scripts. The only supported value is <code>multi-checks</code>.</p>
    /// <p>Multi-checks monitors HTTP/DNS/SSL/TCP endpoints with built-in authentication schemes (Basic, API Key, OAuth, SigV4) and assertion capabilities. When you specify <code>BlueprintTypes</code>, the Handler field cannot be specified since the blueprint provides a pre-defined entry point.</p>
    /// <p><code>BlueprintTypes</code> is supported only on canaries for syn-nodejs-3.0 runtime or later.</p>
    pub fn get_blueprint_types(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.blueprint_types
    }
    /// Appends an item to `dependencies`.
    ///
    /// To override the contents of this collection use [`set_dependencies`](Self::set_dependencies).
    ///
    /// <p>A list of dependencies that are used for running this canary. The dependencies are specified as a key-value pair, where the key is the type of dependency and the value is the dependency reference.</p>
    pub fn dependencies(mut self, input: crate::types::Dependency) -> Self {
        let mut v = self.dependencies.unwrap_or_default();
        v.push(input);
        self.dependencies = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of dependencies that are used for running this canary. The dependencies are specified as a key-value pair, where the key is the type of dependency and the value is the dependency reference.</p>
    pub fn set_dependencies(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Dependency>>) -> Self {
        self.dependencies = input;
        self
    }
    /// <p>A list of dependencies that are used for running this canary. The dependencies are specified as a key-value pair, where the key is the type of dependency and the value is the dependency reference.</p>
    pub fn get_dependencies(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Dependency>> {
        &self.dependencies
    }
    /// Consumes the builder and constructs a [`CanaryCodeOutput`](crate::types::CanaryCodeOutput).
    pub fn build(self) -> crate::types::CanaryCodeOutput {
        crate::types::CanaryCodeOutput {
            source_location_arn: self.source_location_arn,
            handler: self.handler,
            blueprint_types: self.blueprint_types,
            dependencies: self.dependencies,
        }
    }
}
