// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure that specifies the browser type to use for a canary run.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BrowserConfig {
    /// <p>The browser type associated with this browser configuration.</p>
    pub browser_type: ::std::option::Option<crate::types::BrowserType>,
}
impl BrowserConfig {
    /// <p>The browser type associated with this browser configuration.</p>
    pub fn browser_type(&self) -> ::std::option::Option<&crate::types::BrowserType> {
        self.browser_type.as_ref()
    }
}
impl BrowserConfig {
    /// Creates a new builder-style object to manufacture [`BrowserConfig`](crate::types::BrowserConfig).
    pub fn builder() -> crate::types::builders::BrowserConfigBuilder {
        crate::types::builders::BrowserConfigBuilder::default()
    }
}

/// A builder for [`BrowserConfig`](crate::types::BrowserConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct BrowserConfigBuilder {
    pub(crate) browser_type: ::std::option::Option<crate::types::BrowserType>,
}
impl BrowserConfigBuilder {
    /// <p>The browser type associated with this browser configuration.</p>
    pub fn browser_type(mut self, input: crate::types::BrowserType) -> Self {
        self.browser_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The browser type associated with this browser configuration.</p>
    pub fn set_browser_type(mut self, input: ::std::option::Option<crate::types::BrowserType>) -> Self {
        self.browser_type = input;
        self
    }
    /// <p>The browser type associated with this browser configuration.</p>
    pub fn get_browser_type(&self) -> &::std::option::Option<crate::types::BrowserType> {
        &self.browser_type
    }
    /// Consumes the builder and constructs a [`BrowserConfig`](crate::types::BrowserConfig).
    pub fn build(self) -> crate::types::BrowserConfig {
        crate::types::BrowserConfig {
            browser_type: self.browser_type,
        }
    }
}
