// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_canary::_update_canary_output::UpdateCanaryOutputBuilder;

pub use crate::operation::update_canary::_update_canary_input::UpdateCanaryInputBuilder;

impl crate::operation::update_canary::builders::UpdateCanaryInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::update_canary::UpdateCanaryOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_canary::UpdateCanaryError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.update_canary();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `UpdateCanary`.
///
/// <p>Updates the configuration of a canary that has already been created.</p>
/// <p>For multibrowser canaries, you can add or remove browsers by updating the browserConfig list in the update call. For example:</p>
/// <ul>
/// <li>
/// <p>To add Firefox to a canary that currently uses Chrome, specify browserConfigs as \[CHROME, FIREFOX\]</p></li>
/// <li>
/// <p>To remove Firefox and keep only Chrome, specify browserConfigs as \[CHROME\]</p></li>
/// </ul>
/// <p>You can't use this operation to update the tags of an existing canary. To change the tags of an existing canary, use <a href="https://docs.aws.amazon.com/AmazonSynthetics/latest/APIReference/API_TagResource.html">TagResource</a>.</p><note>
/// <p>When you use the <code>dryRunId</code> field when updating a canary, the only other field you can provide is the <code>Schedule</code>. Adding any other field will thrown an exception.</p>
/// </note>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct UpdateCanaryFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_canary::builders::UpdateCanaryInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::update_canary::UpdateCanaryOutput,
        crate::operation::update_canary::UpdateCanaryError,
    > for UpdateCanaryFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::update_canary::UpdateCanaryOutput,
            crate::operation::update_canary::UpdateCanaryError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl UpdateCanaryFluentBuilder {
    /// Creates a new `UpdateCanaryFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the UpdateCanary as a reference.
    pub fn as_input(&self) -> &crate::operation::update_canary::builders::UpdateCanaryInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_canary::UpdateCanaryOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_canary::UpdateCanaryError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::update_canary::UpdateCanary::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::update_canary::UpdateCanary::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::update_canary::UpdateCanaryOutput,
        crate::operation::update_canary::UpdateCanaryError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The name of the canary that you want to update. To find the names of your canaries, use <a href="https://docs.aws.amazon.com/AmazonSynthetics/latest/APIReference/API_DescribeCanaries.html">DescribeCanaries</a>.</p>
    /// <p>You cannot change the name of a canary that has already been created.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>The name of the canary that you want to update. To find the names of your canaries, use <a href="https://docs.aws.amazon.com/AmazonSynthetics/latest/APIReference/API_DescribeCanaries.html">DescribeCanaries</a>.</p>
    /// <p>You cannot change the name of a canary that has already been created.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>The name of the canary that you want to update. To find the names of your canaries, use <a href="https://docs.aws.amazon.com/AmazonSynthetics/latest/APIReference/API_DescribeCanaries.html">DescribeCanaries</a>.</p>
    /// <p>You cannot change the name of a canary that has already been created.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_name()
    }
    /// <p>A structure that includes the entry point from which the canary should start running your script. If the script is stored in an Amazon S3 bucket, the bucket name, key, and version are also included.</p>
    pub fn code(mut self, input: crate::types::CanaryCodeInput) -> Self {
        self.inner = self.inner.code(input);
        self
    }
    /// <p>A structure that includes the entry point from which the canary should start running your script. If the script is stored in an Amazon S3 bucket, the bucket name, key, and version are also included.</p>
    pub fn set_code(mut self, input: ::std::option::Option<crate::types::CanaryCodeInput>) -> Self {
        self.inner = self.inner.set_code(input);
        self
    }
    /// <p>A structure that includes the entry point from which the canary should start running your script. If the script is stored in an Amazon S3 bucket, the bucket name, key, and version are also included.</p>
    pub fn get_code(&self) -> &::std::option::Option<crate::types::CanaryCodeInput> {
        self.inner.get_code()
    }
    /// <p>The ARN of the IAM role to be used to run the canary. This role must already exist, and must include <code>lambda.amazonaws.com</code> as a principal in the trust policy. The role must also have the following permissions:</p>
    /// <ul>
    /// <li>
    /// <p><code>s3:PutObject</code></p></li>
    /// <li>
    /// <p><code>s3:GetBucketLocation</code></p></li>
    /// <li>
    /// <p><code>s3:ListAllMyBuckets</code></p></li>
    /// <li>
    /// <p><code>cloudwatch:PutMetricData</code></p></li>
    /// <li>
    /// <p><code>logs:CreateLogGroup</code></p></li>
    /// <li>
    /// <p><code>logs:CreateLogStream</code></p></li>
    /// <li>
    /// <p><code>logs:CreateLogStream</code></p></li>
    /// </ul>
    pub fn execution_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.execution_role_arn(input.into());
        self
    }
    /// <p>The ARN of the IAM role to be used to run the canary. This role must already exist, and must include <code>lambda.amazonaws.com</code> as a principal in the trust policy. The role must also have the following permissions:</p>
    /// <ul>
    /// <li>
    /// <p><code>s3:PutObject</code></p></li>
    /// <li>
    /// <p><code>s3:GetBucketLocation</code></p></li>
    /// <li>
    /// <p><code>s3:ListAllMyBuckets</code></p></li>
    /// <li>
    /// <p><code>cloudwatch:PutMetricData</code></p></li>
    /// <li>
    /// <p><code>logs:CreateLogGroup</code></p></li>
    /// <li>
    /// <p><code>logs:CreateLogStream</code></p></li>
    /// <li>
    /// <p><code>logs:CreateLogStream</code></p></li>
    /// </ul>
    pub fn set_execution_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_execution_role_arn(input);
        self
    }
    /// <p>The ARN of the IAM role to be used to run the canary. This role must already exist, and must include <code>lambda.amazonaws.com</code> as a principal in the trust policy. The role must also have the following permissions:</p>
    /// <ul>
    /// <li>
    /// <p><code>s3:PutObject</code></p></li>
    /// <li>
    /// <p><code>s3:GetBucketLocation</code></p></li>
    /// <li>
    /// <p><code>s3:ListAllMyBuckets</code></p></li>
    /// <li>
    /// <p><code>cloudwatch:PutMetricData</code></p></li>
    /// <li>
    /// <p><code>logs:CreateLogGroup</code></p></li>
    /// <li>
    /// <p><code>logs:CreateLogStream</code></p></li>
    /// <li>
    /// <p><code>logs:CreateLogStream</code></p></li>
    /// </ul>
    pub fn get_execution_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_execution_role_arn()
    }
    /// <p>Specifies the runtime version to use for the canary. For a list of valid runtime versions and for more information about runtime versions, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_Library.html"> Canary Runtime Versions</a>.</p>
    pub fn runtime_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.runtime_version(input.into());
        self
    }
    /// <p>Specifies the runtime version to use for the canary. For a list of valid runtime versions and for more information about runtime versions, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_Library.html"> Canary Runtime Versions</a>.</p>
    pub fn set_runtime_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_runtime_version(input);
        self
    }
    /// <p>Specifies the runtime version to use for the canary. For a list of valid runtime versions and for more information about runtime versions, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_Library.html"> Canary Runtime Versions</a>.</p>
    pub fn get_runtime_version(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_runtime_version()
    }
    /// <p>A structure that contains information about how often the canary is to run, and when these runs are to stop.</p>
    pub fn schedule(mut self, input: crate::types::CanaryScheduleInput) -> Self {
        self.inner = self.inner.schedule(input);
        self
    }
    /// <p>A structure that contains information about how often the canary is to run, and when these runs are to stop.</p>
    pub fn set_schedule(mut self, input: ::std::option::Option<crate::types::CanaryScheduleInput>) -> Self {
        self.inner = self.inner.set_schedule(input);
        self
    }
    /// <p>A structure that contains information about how often the canary is to run, and when these runs are to stop.</p>
    pub fn get_schedule(&self) -> &::std::option::Option<crate::types::CanaryScheduleInput> {
        self.inner.get_schedule()
    }
    /// <p>A structure that contains the timeout value that is used for each individual run of the canary.</p><important>
    /// <p>Environment variable keys and values are encrypted at rest using Amazon Web Services owned KMS keys. However, the environment variables are not encrypted on the client side. Do not store sensitive information in them.</p>
    /// </important>
    pub fn run_config(mut self, input: crate::types::CanaryRunConfigInput) -> Self {
        self.inner = self.inner.run_config(input);
        self
    }
    /// <p>A structure that contains the timeout value that is used for each individual run of the canary.</p><important>
    /// <p>Environment variable keys and values are encrypted at rest using Amazon Web Services owned KMS keys. However, the environment variables are not encrypted on the client side. Do not store sensitive information in them.</p>
    /// </important>
    pub fn set_run_config(mut self, input: ::std::option::Option<crate::types::CanaryRunConfigInput>) -> Self {
        self.inner = self.inner.set_run_config(input);
        self
    }
    /// <p>A structure that contains the timeout value that is used for each individual run of the canary.</p><important>
    /// <p>Environment variable keys and values are encrypted at rest using Amazon Web Services owned KMS keys. However, the environment variables are not encrypted on the client side. Do not store sensitive information in them.</p>
    /// </important>
    pub fn get_run_config(&self) -> &::std::option::Option<crate::types::CanaryRunConfigInput> {
        self.inner.get_run_config()
    }
    /// <p>The number of days to retain data about successful runs of this canary.</p>
    /// <p>This setting affects the range of information returned by <a href="https://docs.aws.amazon.com/AmazonSynthetics/latest/APIReference/API_GetCanaryRuns.html">GetCanaryRuns</a>, as well as the range of information displayed in the Synthetics console.</p>
    pub fn success_retention_period_in_days(mut self, input: i32) -> Self {
        self.inner = self.inner.success_retention_period_in_days(input);
        self
    }
    /// <p>The number of days to retain data about successful runs of this canary.</p>
    /// <p>This setting affects the range of information returned by <a href="https://docs.aws.amazon.com/AmazonSynthetics/latest/APIReference/API_GetCanaryRuns.html">GetCanaryRuns</a>, as well as the range of information displayed in the Synthetics console.</p>
    pub fn set_success_retention_period_in_days(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_success_retention_period_in_days(input);
        self
    }
    /// <p>The number of days to retain data about successful runs of this canary.</p>
    /// <p>This setting affects the range of information returned by <a href="https://docs.aws.amazon.com/AmazonSynthetics/latest/APIReference/API_GetCanaryRuns.html">GetCanaryRuns</a>, as well as the range of information displayed in the Synthetics console.</p>
    pub fn get_success_retention_period_in_days(&self) -> &::std::option::Option<i32> {
        self.inner.get_success_retention_period_in_days()
    }
    /// <p>The number of days to retain data about failed runs of this canary.</p>
    /// <p>This setting affects the range of information returned by <a href="https://docs.aws.amazon.com/AmazonSynthetics/latest/APIReference/API_GetCanaryRuns.html">GetCanaryRuns</a>, as well as the range of information displayed in the Synthetics console.</p>
    pub fn failure_retention_period_in_days(mut self, input: i32) -> Self {
        self.inner = self.inner.failure_retention_period_in_days(input);
        self
    }
    /// <p>The number of days to retain data about failed runs of this canary.</p>
    /// <p>This setting affects the range of information returned by <a href="https://docs.aws.amazon.com/AmazonSynthetics/latest/APIReference/API_GetCanaryRuns.html">GetCanaryRuns</a>, as well as the range of information displayed in the Synthetics console.</p>
    pub fn set_failure_retention_period_in_days(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_failure_retention_period_in_days(input);
        self
    }
    /// <p>The number of days to retain data about failed runs of this canary.</p>
    /// <p>This setting affects the range of information returned by <a href="https://docs.aws.amazon.com/AmazonSynthetics/latest/APIReference/API_GetCanaryRuns.html">GetCanaryRuns</a>, as well as the range of information displayed in the Synthetics console.</p>
    pub fn get_failure_retention_period_in_days(&self) -> &::std::option::Option<i32> {
        self.inner.get_failure_retention_period_in_days()
    }
    /// <p>If this canary is to test an endpoint in a VPC, this structure contains information about the subnet and security groups of the VPC endpoint. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_VPC.html"> Running a Canary in a VPC</a>.</p>
    pub fn vpc_config(mut self, input: crate::types::VpcConfigInput) -> Self {
        self.inner = self.inner.vpc_config(input);
        self
    }
    /// <p>If this canary is to test an endpoint in a VPC, this structure contains information about the subnet and security groups of the VPC endpoint. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_VPC.html"> Running a Canary in a VPC</a>.</p>
    pub fn set_vpc_config(mut self, input: ::std::option::Option<crate::types::VpcConfigInput>) -> Self {
        self.inner = self.inner.set_vpc_config(input);
        self
    }
    /// <p>If this canary is to test an endpoint in a VPC, this structure contains information about the subnet and security groups of the VPC endpoint. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_VPC.html"> Running a Canary in a VPC</a>.</p>
    pub fn get_vpc_config(&self) -> &::std::option::Option<crate::types::VpcConfigInput> {
        self.inner.get_vpc_config()
    }
    /// <p>Defines the screenshots to use as the baseline for comparisons during visual monitoring comparisons during future runs of this canary. If you omit this parameter, no changes are made to any baseline screenshots that the canary might be using already.</p>
    /// <p>Visual monitoring is supported only on canaries running the <b>syn-puppeteer-node-3.2</b> runtime or later. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Library_SyntheticsLogger_VisualTesting.html"> Visual monitoring</a> and <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_Blueprints_VisualTesting.html"> Visual monitoring blueprint</a></p>
    pub fn visual_reference(mut self, input: crate::types::VisualReferenceInput) -> Self {
        self.inner = self.inner.visual_reference(input);
        self
    }
    /// <p>Defines the screenshots to use as the baseline for comparisons during visual monitoring comparisons during future runs of this canary. If you omit this parameter, no changes are made to any baseline screenshots that the canary might be using already.</p>
    /// <p>Visual monitoring is supported only on canaries running the <b>syn-puppeteer-node-3.2</b> runtime or later. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Library_SyntheticsLogger_VisualTesting.html"> Visual monitoring</a> and <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_Blueprints_VisualTesting.html"> Visual monitoring blueprint</a></p>
    pub fn set_visual_reference(mut self, input: ::std::option::Option<crate::types::VisualReferenceInput>) -> Self {
        self.inner = self.inner.set_visual_reference(input);
        self
    }
    /// <p>Defines the screenshots to use as the baseline for comparisons during visual monitoring comparisons during future runs of this canary. If you omit this parameter, no changes are made to any baseline screenshots that the canary might be using already.</p>
    /// <p>Visual monitoring is supported only on canaries running the <b>syn-puppeteer-node-3.2</b> runtime or later. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Library_SyntheticsLogger_VisualTesting.html"> Visual monitoring</a> and <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_Blueprints_VisualTesting.html"> Visual monitoring blueprint</a></p>
    pub fn get_visual_reference(&self) -> &::std::option::Option<crate::types::VisualReferenceInput> {
        self.inner.get_visual_reference()
    }
    /// <p>The location in Amazon S3 where Synthetics stores artifacts from the test runs of this canary. Artifacts include the log file, screenshots, and HAR files. The name of the Amazon S3 bucket can't include a period (.).</p>
    pub fn artifact_s3_location(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.artifact_s3_location(input.into());
        self
    }
    /// <p>The location in Amazon S3 where Synthetics stores artifacts from the test runs of this canary. Artifacts include the log file, screenshots, and HAR files. The name of the Amazon S3 bucket can't include a period (.).</p>
    pub fn set_artifact_s3_location(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_artifact_s3_location(input);
        self
    }
    /// <p>The location in Amazon S3 where Synthetics stores artifacts from the test runs of this canary. Artifacts include the log file, screenshots, and HAR files. The name of the Amazon S3 bucket can't include a period (.).</p>
    pub fn get_artifact_s3_location(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_artifact_s3_location()
    }
    /// <p>A structure that contains the configuration for canary artifacts, including the encryption-at-rest settings for artifacts that the canary uploads to Amazon S3.</p>
    pub fn artifact_config(mut self, input: crate::types::ArtifactConfigInput) -> Self {
        self.inner = self.inner.artifact_config(input);
        self
    }
    /// <p>A structure that contains the configuration for canary artifacts, including the encryption-at-rest settings for artifacts that the canary uploads to Amazon S3.</p>
    pub fn set_artifact_config(mut self, input: ::std::option::Option<crate::types::ArtifactConfigInput>) -> Self {
        self.inner = self.inner.set_artifact_config(input);
        self
    }
    /// <p>A structure that contains the configuration for canary artifacts, including the encryption-at-rest settings for artifacts that the canary uploads to Amazon S3.</p>
    pub fn get_artifact_config(&self) -> &::std::option::Option<crate::types::ArtifactConfigInput> {
        self.inner.get_artifact_config()
    }
    /// <p>Specifies whether to also delete the Lambda functions and layers used by this canary when the canary is deleted.</p>
    /// <p>If the value of this parameter is <code>OFF</code>, then the value of the <code>DeleteLambda</code> parameter of the <a href="https://docs.aws.amazon.com/AmazonSynthetics/latest/APIReference/API_DeleteCanary.html">DeleteCanary</a> operation determines whether the Lambda functions and layers will be deleted.</p>
    pub fn provisioned_resource_cleanup(mut self, input: crate::types::ProvisionedResourceCleanupSetting) -> Self {
        self.inner = self.inner.provisioned_resource_cleanup(input);
        self
    }
    /// <p>Specifies whether to also delete the Lambda functions and layers used by this canary when the canary is deleted.</p>
    /// <p>If the value of this parameter is <code>OFF</code>, then the value of the <code>DeleteLambda</code> parameter of the <a href="https://docs.aws.amazon.com/AmazonSynthetics/latest/APIReference/API_DeleteCanary.html">DeleteCanary</a> operation determines whether the Lambda functions and layers will be deleted.</p>
    pub fn set_provisioned_resource_cleanup(mut self, input: ::std::option::Option<crate::types::ProvisionedResourceCleanupSetting>) -> Self {
        self.inner = self.inner.set_provisioned_resource_cleanup(input);
        self
    }
    /// <p>Specifies whether to also delete the Lambda functions and layers used by this canary when the canary is deleted.</p>
    /// <p>If the value of this parameter is <code>OFF</code>, then the value of the <code>DeleteLambda</code> parameter of the <a href="https://docs.aws.amazon.com/AmazonSynthetics/latest/APIReference/API_DeleteCanary.html">DeleteCanary</a> operation determines whether the Lambda functions and layers will be deleted.</p>
    pub fn get_provisioned_resource_cleanup(&self) -> &::std::option::Option<crate::types::ProvisionedResourceCleanupSetting> {
        self.inner.get_provisioned_resource_cleanup()
    }
    /// <p>Update the existing canary using the updated configurations from the DryRun associated with the DryRunId.</p><note>
    /// <p>When you use the <code>dryRunId</code> field when updating a canary, the only other field you can provide is the <code>Schedule</code>. Adding any other field will thrown an exception.</p>
    /// </note>
    pub fn dry_run_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.dry_run_id(input.into());
        self
    }
    /// <p>Update the existing canary using the updated configurations from the DryRun associated with the DryRunId.</p><note>
    /// <p>When you use the <code>dryRunId</code> field when updating a canary, the only other field you can provide is the <code>Schedule</code>. Adding any other field will thrown an exception.</p>
    /// </note>
    pub fn set_dry_run_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_dry_run_id(input);
        self
    }
    /// <p>Update the existing canary using the updated configurations from the DryRun associated with the DryRunId.</p><note>
    /// <p>When you use the <code>dryRunId</code> field when updating a canary, the only other field you can provide is the <code>Schedule</code>. Adding any other field will thrown an exception.</p>
    /// </note>
    pub fn get_dry_run_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_dry_run_id()
    }
    ///
    /// Appends an item to `VisualReferences`.
    ///
    /// To override the contents of this collection use [`set_visual_references`](Self::set_visual_references).
    ///
    /// <p>A list of visual reference configurations for the canary, one for each browser type that the canary is configured to run on. Visual references are used for visual monitoring comparisons.</p>
    /// <p><code>syn-nodejs-puppeteer-11.0</code> and above, and <code>syn-nodejs-playwright-3.0</code> and above, only supports <code>visualReferences</code>. <code>visualReference</code> field is not supported.</p>
    /// <p>Versions older than <code>syn-nodejs-puppeteer-11.0</code> supports both <code>visualReference</code> and <code>visualReferences</code> for backward compatibility. It is recommended to use <code>visualReferences</code> for consistency and future compatibility.</p>
    /// <p>For multibrowser visual monitoring, you can update the baseline for all configured browsers in a single update call by specifying a list of VisualReference objects, one per browser. Each VisualReference object maps to a specific browser configuration, allowing you to manage visual baselines for multiple browsers simultaneously.</p>
    /// <p>For single configuration canaries using Chrome browser (default browser), use visualReferences for <code>syn-nodejs-puppeteer-11.0</code> and above, and <code>syn-nodejs-playwright-3.0</code> and above canaries. The browserType in the visualReference object is not mandatory.</p>
    pub fn visual_references(mut self, input: crate::types::VisualReferenceInput) -> Self {
        self.inner = self.inner.visual_references(input);
        self
    }
    /// <p>A list of visual reference configurations for the canary, one for each browser type that the canary is configured to run on. Visual references are used for visual monitoring comparisons.</p>
    /// <p><code>syn-nodejs-puppeteer-11.0</code> and above, and <code>syn-nodejs-playwright-3.0</code> and above, only supports <code>visualReferences</code>. <code>visualReference</code> field is not supported.</p>
    /// <p>Versions older than <code>syn-nodejs-puppeteer-11.0</code> supports both <code>visualReference</code> and <code>visualReferences</code> for backward compatibility. It is recommended to use <code>visualReferences</code> for consistency and future compatibility.</p>
    /// <p>For multibrowser visual monitoring, you can update the baseline for all configured browsers in a single update call by specifying a list of VisualReference objects, one per browser. Each VisualReference object maps to a specific browser configuration, allowing you to manage visual baselines for multiple browsers simultaneously.</p>
    /// <p>For single configuration canaries using Chrome browser (default browser), use visualReferences for <code>syn-nodejs-puppeteer-11.0</code> and above, and <code>syn-nodejs-playwright-3.0</code> and above canaries. The browserType in the visualReference object is not mandatory.</p>
    pub fn set_visual_references(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::VisualReferenceInput>>) -> Self {
        self.inner = self.inner.set_visual_references(input);
        self
    }
    /// <p>A list of visual reference configurations for the canary, one for each browser type that the canary is configured to run on. Visual references are used for visual monitoring comparisons.</p>
    /// <p><code>syn-nodejs-puppeteer-11.0</code> and above, and <code>syn-nodejs-playwright-3.0</code> and above, only supports <code>visualReferences</code>. <code>visualReference</code> field is not supported.</p>
    /// <p>Versions older than <code>syn-nodejs-puppeteer-11.0</code> supports both <code>visualReference</code> and <code>visualReferences</code> for backward compatibility. It is recommended to use <code>visualReferences</code> for consistency and future compatibility.</p>
    /// <p>For multibrowser visual monitoring, you can update the baseline for all configured browsers in a single update call by specifying a list of VisualReference objects, one per browser. Each VisualReference object maps to a specific browser configuration, allowing you to manage visual baselines for multiple browsers simultaneously.</p>
    /// <p>For single configuration canaries using Chrome browser (default browser), use visualReferences for <code>syn-nodejs-puppeteer-11.0</code> and above, and <code>syn-nodejs-playwright-3.0</code> and above canaries. The browserType in the visualReference object is not mandatory.</p>
    pub fn get_visual_references(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::VisualReferenceInput>> {
        self.inner.get_visual_references()
    }
    ///
    /// Appends an item to `BrowserConfigs`.
    ///
    /// To override the contents of this collection use [`set_browser_configs`](Self::set_browser_configs).
    ///
    /// <p>A structure that specifies the browser type to use for a canary run. CloudWatch Synthetics supports running canaries on both <code>CHROME</code> and <code>FIREFOX</code> browsers.</p><note>
    /// <p>If not specified, <code>browserConfigs</code> defaults to Chrome.</p>
    /// </note>
    pub fn browser_configs(mut self, input: crate::types::BrowserConfig) -> Self {
        self.inner = self.inner.browser_configs(input);
        self
    }
    /// <p>A structure that specifies the browser type to use for a canary run. CloudWatch Synthetics supports running canaries on both <code>CHROME</code> and <code>FIREFOX</code> browsers.</p><note>
    /// <p>If not specified, <code>browserConfigs</code> defaults to Chrome.</p>
    /// </note>
    pub fn set_browser_configs(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::BrowserConfig>>) -> Self {
        self.inner = self.inner.set_browser_configs(input);
        self
    }
    /// <p>A structure that specifies the browser type to use for a canary run. CloudWatch Synthetics supports running canaries on both <code>CHROME</code> and <code>FIREFOX</code> browsers.</p><note>
    /// <p>If not specified, <code>browserConfigs</code> defaults to Chrome.</p>
    /// </note>
    pub fn get_browser_configs(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::BrowserConfig>> {
        self.inner.get_browser_configs()
    }
}
