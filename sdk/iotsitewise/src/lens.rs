// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_batch_get_asset_property_aggregates_output_output_next_token(
    input: &crate::operation::batch_get_asset_property_aggregates::BatchGetAssetPropertyAggregatesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_batch_get_asset_property_value_output_output_next_token(
    input: &crate::operation::batch_get_asset_property_value::BatchGetAssetPropertyValueOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_batch_get_asset_property_value_history_output_output_next_token(
    input: &crate::operation::batch_get_asset_property_value_history::BatchGetAssetPropertyValueHistoryOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_get_asset_property_aggregates_output_output_next_token(
    input: &crate::operation::get_asset_property_aggregates::GetAssetPropertyAggregatesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_get_asset_property_value_history_output_output_next_token(
    input: &crate::operation::get_asset_property_value_history::GetAssetPropertyValueHistoryOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_get_interpolated_asset_property_values_output_output_next_token(
    input: &crate::operation::get_interpolated_asset_property_values::GetInterpolatedAssetPropertyValuesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_access_policies_output_output_next_token(
    input: &crate::operation::list_access_policies::ListAccessPoliciesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_asset_model_composite_models_output_output_next_token(
    input: &crate::operation::list_asset_model_composite_models::ListAssetModelCompositeModelsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_asset_model_properties_output_output_next_token(
    input: &crate::operation::list_asset_model_properties::ListAssetModelPropertiesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_asset_models_output_output_next_token(
    input: &crate::operation::list_asset_models::ListAssetModelsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_asset_properties_output_output_next_token(
    input: &crate::operation::list_asset_properties::ListAssetPropertiesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_asset_relationships_output_output_next_token(
    input: &crate::operation::list_asset_relationships::ListAssetRelationshipsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_assets_output_output_next_token(
    input: &crate::operation::list_assets::ListAssetsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_associated_assets_output_output_next_token(
    input: &crate::operation::list_associated_assets::ListAssociatedAssetsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_bulk_import_jobs_output_output_next_token(
    input: &crate::operation::list_bulk_import_jobs::ListBulkImportJobsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_composition_relationships_output_output_next_token(
    input: &crate::operation::list_composition_relationships::ListCompositionRelationshipsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_computation_model_data_binding_usages_output_output_next_token(
    input: &crate::operation::list_computation_model_data_binding_usages::ListComputationModelDataBindingUsagesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_computation_model_resolve_to_resources_output_output_next_token(
    input: &crate::operation::list_computation_model_resolve_to_resources::ListComputationModelResolveToResourcesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_computation_models_output_output_next_token(
    input: &crate::operation::list_computation_models::ListComputationModelsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_dashboards_output_output_next_token(
    input: &crate::operation::list_dashboards::ListDashboardsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_datasets_output_output_next_token(
    input: &crate::operation::list_datasets::ListDatasetsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_executions_output_output_next_token(
    input: &crate::operation::list_executions::ListExecutionsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_gateways_output_output_next_token(
    input: &crate::operation::list_gateways::ListGatewaysOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_interface_relationships_output_output_next_token(
    input: &crate::operation::list_interface_relationships::ListInterfaceRelationshipsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_portals_output_output_next_token(
    input: &crate::operation::list_portals::ListPortalsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_project_assets_output_output_next_token(
    input: &crate::operation::list_project_assets::ListProjectAssetsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_projects_output_output_next_token(
    input: &crate::operation::list_projects::ListProjectsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_time_series_output_output_next_token(
    input: &crate::operation::list_time_series::ListTimeSeriesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_get_asset_property_aggregates_output_output_aggregated_values(
    input: crate::operation::get_asset_property_aggregates::GetAssetPropertyAggregatesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::AggregatedValue>> {
    let input = input.aggregated_values;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_get_asset_property_value_history_output_output_asset_property_value_history(
    input: crate::operation::get_asset_property_value_history::GetAssetPropertyValueHistoryOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::AssetPropertyValue>> {
    let input = input.asset_property_value_history;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_get_interpolated_asset_property_values_output_output_interpolated_asset_property_values(
    input: crate::operation::get_interpolated_asset_property_values::GetInterpolatedAssetPropertyValuesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::InterpolatedAssetPropertyValue>> {
    let input = input.interpolated_asset_property_values;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_access_policies_output_output_access_policy_summaries(
    input: crate::operation::list_access_policies::ListAccessPoliciesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::AccessPolicySummary>> {
    let input = input.access_policy_summaries;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_asset_model_composite_models_output_output_asset_model_composite_model_summaries(
    input: crate::operation::list_asset_model_composite_models::ListAssetModelCompositeModelsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::AssetModelCompositeModelSummary>> {
    let input = input.asset_model_composite_model_summaries;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_asset_model_properties_output_output_asset_model_property_summaries(
    input: crate::operation::list_asset_model_properties::ListAssetModelPropertiesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::AssetModelPropertySummary>> {
    let input = input.asset_model_property_summaries;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_asset_models_output_output_asset_model_summaries(
    input: crate::operation::list_asset_models::ListAssetModelsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::AssetModelSummary>> {
    let input = input.asset_model_summaries;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_asset_properties_output_output_asset_property_summaries(
    input: crate::operation::list_asset_properties::ListAssetPropertiesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::AssetPropertySummary>> {
    let input = input.asset_property_summaries;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_asset_relationships_output_output_asset_relationship_summaries(
    input: crate::operation::list_asset_relationships::ListAssetRelationshipsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::AssetRelationshipSummary>> {
    let input = input.asset_relationship_summaries;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_assets_output_output_asset_summaries(
    input: crate::operation::list_assets::ListAssetsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::AssetSummary>> {
    let input = input.asset_summaries;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_associated_assets_output_output_asset_summaries(
    input: crate::operation::list_associated_assets::ListAssociatedAssetsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::AssociatedAssetsSummary>> {
    let input = input.asset_summaries;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_bulk_import_jobs_output_output_job_summaries(
    input: crate::operation::list_bulk_import_jobs::ListBulkImportJobsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::JobSummary>> {
    let input = input.job_summaries;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_composition_relationships_output_output_composition_relationship_summaries(
    input: crate::operation::list_composition_relationships::ListCompositionRelationshipsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::CompositionRelationshipSummary>> {
    let input = input.composition_relationship_summaries;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_computation_model_data_binding_usages_output_output_data_binding_usage_summaries(
    input: crate::operation::list_computation_model_data_binding_usages::ListComputationModelDataBindingUsagesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ComputationModelDataBindingUsageSummary>> {
    let input = input.data_binding_usage_summaries;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_computation_model_resolve_to_resources_output_output_computation_model_resolve_to_resource_summaries(
    input: crate::operation::list_computation_model_resolve_to_resources::ListComputationModelResolveToResourcesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ComputationModelResolveToResourceSummary>> {
    let input = input.computation_model_resolve_to_resource_summaries;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_computation_models_output_output_computation_model_summaries(
    input: crate::operation::list_computation_models::ListComputationModelsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ComputationModelSummary>> {
    let input = input.computation_model_summaries;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_dashboards_output_output_dashboard_summaries(
    input: crate::operation::list_dashboards::ListDashboardsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::DashboardSummary>> {
    let input = input.dashboard_summaries;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_datasets_output_output_dataset_summaries(
    input: crate::operation::list_datasets::ListDatasetsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::DatasetSummary>> {
    let input = input.dataset_summaries;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_executions_output_output_execution_summaries(
    input: crate::operation::list_executions::ListExecutionsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ExecutionSummary>> {
    let input = input.execution_summaries;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_gateways_output_output_gateway_summaries(
    input: crate::operation::list_gateways::ListGatewaysOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::GatewaySummary>> {
    let input = input.gateway_summaries;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_interface_relationships_output_output_interface_relationship_summaries(
    input: crate::operation::list_interface_relationships::ListInterfaceRelationshipsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::InterfaceRelationshipSummary>> {
    let input = input.interface_relationship_summaries;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_portals_output_output_portal_summaries(
    input: crate::operation::list_portals::ListPortalsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::PortalSummary>> {
    let input = input.portal_summaries?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_project_assets_output_output_asset_ids(
    input: crate::operation::list_project_assets::ListProjectAssetsOutput,
) -> ::std::option::Option<::std::vec::Vec<::std::string::String>> {
    let input = input.asset_ids;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_projects_output_output_project_summaries(
    input: crate::operation::list_projects::ListProjectsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ProjectSummary>> {
    let input = input.project_summaries;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_time_series_output_output_time_series_summaries(
    input: crate::operation::list_time_series::ListTimeSeriesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::TimeSeriesSummary>> {
    let input = input.time_series_summaries;
    ::std::option::Option::Some(input)
}
