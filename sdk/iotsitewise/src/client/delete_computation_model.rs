// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DeleteComputationModel`](crate::operation::delete_computation_model::builders::DeleteComputationModelFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`computation_model_id(impl Into<String>)`](crate::operation::delete_computation_model::builders::DeleteComputationModelFluentBuilder::computation_model_id) / [`set_computation_model_id(Option<String>)`](crate::operation::delete_computation_model::builders::DeleteComputationModelFluentBuilder::set_computation_model_id):<br>required: **true**<br><p>The ID of the computation model.</p><br>
    ///   - [`client_token(impl Into<String>)`](crate::operation::delete_computation_model::builders::DeleteComputationModelFluentBuilder::client_token) / [`set_client_token(Option<String>)`](crate::operation::delete_computation_model::builders::DeleteComputationModelFluentBuilder::set_client_token):<br>required: **false**<br><p>A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.</p><br>
    /// - On success, responds with [`DeleteComputationModelOutput`](crate::operation::delete_computation_model::DeleteComputationModelOutput) with field(s):
    ///   - [`computation_model_status(Option<ComputationModelStatus>)`](crate::operation::delete_computation_model::DeleteComputationModelOutput::computation_model_status): <p>The status of the computation model. It contains a state (DELETING after successfully calling this operation) and any error messages.</p>
    /// - On failure, responds with [`SdkError<DeleteComputationModelError>`](crate::operation::delete_computation_model::DeleteComputationModelError)
    pub fn delete_computation_model(&self) -> crate::operation::delete_computation_model::builders::DeleteComputationModelFluentBuilder {
        crate::operation::delete_computation_model::builders::DeleteComputationModelFluentBuilder::new(self.handle.clone())
    }
}
