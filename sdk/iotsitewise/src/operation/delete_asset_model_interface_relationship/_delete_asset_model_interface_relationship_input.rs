// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DeleteAssetModelInterfaceRelationshipInput {
    /// <p>The ID of the asset model. This can be either the actual ID in UUID format, or else externalId: followed by the external ID.</p>
    pub asset_model_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the interface asset model. This can be either the actual ID in UUID format, or else externalId: followed by the external ID.</p>
    pub interface_asset_model_id: ::std::option::Option<::std::string::String>,
    /// <p>A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
}
impl DeleteAssetModelInterfaceRelationshipInput {
    /// <p>The ID of the asset model. This can be either the actual ID in UUID format, or else externalId: followed by the external ID.</p>
    pub fn asset_model_id(&self) -> ::std::option::Option<&str> {
        self.asset_model_id.as_deref()
    }
    /// <p>The ID of the interface asset model. This can be either the actual ID in UUID format, or else externalId: followed by the external ID.</p>
    pub fn interface_asset_model_id(&self) -> ::std::option::Option<&str> {
        self.interface_asset_model_id.as_deref()
    }
    /// <p>A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl DeleteAssetModelInterfaceRelationshipInput {
    /// Creates a new builder-style object to manufacture [`DeleteAssetModelInterfaceRelationshipInput`](crate::operation::delete_asset_model_interface_relationship::DeleteAssetModelInterfaceRelationshipInput).
    pub fn builder() -> crate::operation::delete_asset_model_interface_relationship::builders::DeleteAssetModelInterfaceRelationshipInputBuilder {
        crate::operation::delete_asset_model_interface_relationship::builders::DeleteAssetModelInterfaceRelationshipInputBuilder::default()
    }
}

/// A builder for [`DeleteAssetModelInterfaceRelationshipInput`](crate::operation::delete_asset_model_interface_relationship::DeleteAssetModelInterfaceRelationshipInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DeleteAssetModelInterfaceRelationshipInputBuilder {
    pub(crate) asset_model_id: ::std::option::Option<::std::string::String>,
    pub(crate) interface_asset_model_id: ::std::option::Option<::std::string::String>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
}
impl DeleteAssetModelInterfaceRelationshipInputBuilder {
    /// <p>The ID of the asset model. This can be either the actual ID in UUID format, or else externalId: followed by the external ID.</p>
    /// This field is required.
    pub fn asset_model_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.asset_model_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the asset model. This can be either the actual ID in UUID format, or else externalId: followed by the external ID.</p>
    pub fn set_asset_model_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.asset_model_id = input;
        self
    }
    /// <p>The ID of the asset model. This can be either the actual ID in UUID format, or else externalId: followed by the external ID.</p>
    pub fn get_asset_model_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.asset_model_id
    }
    /// <p>The ID of the interface asset model. This can be either the actual ID in UUID format, or else externalId: followed by the external ID.</p>
    /// This field is required.
    pub fn interface_asset_model_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.interface_asset_model_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the interface asset model. This can be either the actual ID in UUID format, or else externalId: followed by the external ID.</p>
    pub fn set_interface_asset_model_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.interface_asset_model_id = input;
        self
    }
    /// <p>The ID of the interface asset model. This can be either the actual ID in UUID format, or else externalId: followed by the external ID.</p>
    pub fn get_interface_asset_model_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.interface_asset_model_id
    }
    /// <p>A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Consumes the builder and constructs a [`DeleteAssetModelInterfaceRelationshipInput`](crate::operation::delete_asset_model_interface_relationship::DeleteAssetModelInterfaceRelationshipInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::delete_asset_model_interface_relationship::DeleteAssetModelInterfaceRelationshipInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::delete_asset_model_interface_relationship::DeleteAssetModelInterfaceRelationshipInput {
                asset_model_id: self.asset_model_id,
                interface_asset_model_id: self.interface_asset_model_id,
                client_token: self.client_token,
            },
        )
    }
}
