// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListExecutionsInput {
    /// <p>The type of the target resource.</p>
    pub target_resource_type: ::std::option::Option<crate::types::TargetResourceType>,
    /// <p>The ID of the target resource.</p>
    pub target_resource_id: ::std::option::Option<::std::string::String>,
    /// <p>The type of the resolved resource.</p>
    pub resolve_to_resource_type: ::std::option::Option<crate::types::ResolveToResourceType>,
    /// <p>The ID of the resolved resource.</p>
    pub resolve_to_resource_id: ::std::option::Option<::std::string::String>,
    /// <p>The token used for the next set of paginated results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of results returned for each paginated request.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>The type of action exectued.</p>
    pub action_type: ::std::option::Option<::std::string::String>,
}
impl ListExecutionsInput {
    /// <p>The type of the target resource.</p>
    pub fn target_resource_type(&self) -> ::std::option::Option<&crate::types::TargetResourceType> {
        self.target_resource_type.as_ref()
    }
    /// <p>The ID of the target resource.</p>
    pub fn target_resource_id(&self) -> ::std::option::Option<&str> {
        self.target_resource_id.as_deref()
    }
    /// <p>The type of the resolved resource.</p>
    pub fn resolve_to_resource_type(&self) -> ::std::option::Option<&crate::types::ResolveToResourceType> {
        self.resolve_to_resource_type.as_ref()
    }
    /// <p>The ID of the resolved resource.</p>
    pub fn resolve_to_resource_id(&self) -> ::std::option::Option<&str> {
        self.resolve_to_resource_id.as_deref()
    }
    /// <p>The token used for the next set of paginated results.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of results returned for each paginated request.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>The type of action exectued.</p>
    pub fn action_type(&self) -> ::std::option::Option<&str> {
        self.action_type.as_deref()
    }
}
impl ListExecutionsInput {
    /// Creates a new builder-style object to manufacture [`ListExecutionsInput`](crate::operation::list_executions::ListExecutionsInput).
    pub fn builder() -> crate::operation::list_executions::builders::ListExecutionsInputBuilder {
        crate::operation::list_executions::builders::ListExecutionsInputBuilder::default()
    }
}

/// A builder for [`ListExecutionsInput`](crate::operation::list_executions::ListExecutionsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListExecutionsInputBuilder {
    pub(crate) target_resource_type: ::std::option::Option<crate::types::TargetResourceType>,
    pub(crate) target_resource_id: ::std::option::Option<::std::string::String>,
    pub(crate) resolve_to_resource_type: ::std::option::Option<crate::types::ResolveToResourceType>,
    pub(crate) resolve_to_resource_id: ::std::option::Option<::std::string::String>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) action_type: ::std::option::Option<::std::string::String>,
}
impl ListExecutionsInputBuilder {
    /// <p>The type of the target resource.</p>
    /// This field is required.
    pub fn target_resource_type(mut self, input: crate::types::TargetResourceType) -> Self {
        self.target_resource_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the target resource.</p>
    pub fn set_target_resource_type(mut self, input: ::std::option::Option<crate::types::TargetResourceType>) -> Self {
        self.target_resource_type = input;
        self
    }
    /// <p>The type of the target resource.</p>
    pub fn get_target_resource_type(&self) -> &::std::option::Option<crate::types::TargetResourceType> {
        &self.target_resource_type
    }
    /// <p>The ID of the target resource.</p>
    /// This field is required.
    pub fn target_resource_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.target_resource_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the target resource.</p>
    pub fn set_target_resource_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.target_resource_id = input;
        self
    }
    /// <p>The ID of the target resource.</p>
    pub fn get_target_resource_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.target_resource_id
    }
    /// <p>The type of the resolved resource.</p>
    pub fn resolve_to_resource_type(mut self, input: crate::types::ResolveToResourceType) -> Self {
        self.resolve_to_resource_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the resolved resource.</p>
    pub fn set_resolve_to_resource_type(mut self, input: ::std::option::Option<crate::types::ResolveToResourceType>) -> Self {
        self.resolve_to_resource_type = input;
        self
    }
    /// <p>The type of the resolved resource.</p>
    pub fn get_resolve_to_resource_type(&self) -> &::std::option::Option<crate::types::ResolveToResourceType> {
        &self.resolve_to_resource_type
    }
    /// <p>The ID of the resolved resource.</p>
    pub fn resolve_to_resource_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resolve_to_resource_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the resolved resource.</p>
    pub fn set_resolve_to_resource_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resolve_to_resource_id = input;
        self
    }
    /// <p>The ID of the resolved resource.</p>
    pub fn get_resolve_to_resource_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.resolve_to_resource_id
    }
    /// <p>The token used for the next set of paginated results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The token used for the next set of paginated results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The token used for the next set of paginated results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The maximum number of results returned for each paginated request.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results returned for each paginated request.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of results returned for each paginated request.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>The type of action exectued.</p>
    pub fn action_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.action_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of action exectued.</p>
    pub fn set_action_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.action_type = input;
        self
    }
    /// <p>The type of action exectued.</p>
    pub fn get_action_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.action_type
    }
    /// Consumes the builder and constructs a [`ListExecutionsInput`](crate::operation::list_executions::ListExecutionsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_executions::ListExecutionsInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::list_executions::ListExecutionsInput {
            target_resource_type: self.target_resource_type,
            target_resource_id: self.target_resource_id,
            resolve_to_resource_type: self.resolve_to_resource_type,
            resolve_to_resource_id: self.resolve_to_resource_id,
            next_token: self.next_token,
            max_results: self.max_results,
            action_type: self.action_type,
        })
    }
}
