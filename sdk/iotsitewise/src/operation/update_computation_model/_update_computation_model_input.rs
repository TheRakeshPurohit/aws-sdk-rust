// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateComputationModelInput {
    /// <p>The ID of the computation model.</p>
    pub computation_model_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the computation model.</p>
    pub computation_model_name: ::std::option::Option<::std::string::String>,
    /// <p>The description of the computation model.</p>
    pub computation_model_description: ::std::option::Option<::std::string::String>,
    /// <p>The configuration for the computation model.</p>
    pub computation_model_configuration: ::std::option::Option<crate::types::ComputationModelConfiguration>,
    /// <p>The data binding for the computation model. Key is a variable name defined in configuration. Value is a <code>ComputationModelDataBindingValue</code> referenced by the variable.</p>
    pub computation_model_data_binding:
        ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::ComputationModelDataBindingValue>>,
    /// <p>A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
}
impl UpdateComputationModelInput {
    /// <p>The ID of the computation model.</p>
    pub fn computation_model_id(&self) -> ::std::option::Option<&str> {
        self.computation_model_id.as_deref()
    }
    /// <p>The name of the computation model.</p>
    pub fn computation_model_name(&self) -> ::std::option::Option<&str> {
        self.computation_model_name.as_deref()
    }
    /// <p>The description of the computation model.</p>
    pub fn computation_model_description(&self) -> ::std::option::Option<&str> {
        self.computation_model_description.as_deref()
    }
    /// <p>The configuration for the computation model.</p>
    pub fn computation_model_configuration(&self) -> ::std::option::Option<&crate::types::ComputationModelConfiguration> {
        self.computation_model_configuration.as_ref()
    }
    /// <p>The data binding for the computation model. Key is a variable name defined in configuration. Value is a <code>ComputationModelDataBindingValue</code> referenced by the variable.</p>
    pub fn computation_model_data_binding(
        &self,
    ) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, crate::types::ComputationModelDataBindingValue>> {
        self.computation_model_data_binding.as_ref()
    }
    /// <p>A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl UpdateComputationModelInput {
    /// Creates a new builder-style object to manufacture [`UpdateComputationModelInput`](crate::operation::update_computation_model::UpdateComputationModelInput).
    pub fn builder() -> crate::operation::update_computation_model::builders::UpdateComputationModelInputBuilder {
        crate::operation::update_computation_model::builders::UpdateComputationModelInputBuilder::default()
    }
}

/// A builder for [`UpdateComputationModelInput`](crate::operation::update_computation_model::UpdateComputationModelInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateComputationModelInputBuilder {
    pub(crate) computation_model_id: ::std::option::Option<::std::string::String>,
    pub(crate) computation_model_name: ::std::option::Option<::std::string::String>,
    pub(crate) computation_model_description: ::std::option::Option<::std::string::String>,
    pub(crate) computation_model_configuration: ::std::option::Option<crate::types::ComputationModelConfiguration>,
    pub(crate) computation_model_data_binding:
        ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::ComputationModelDataBindingValue>>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
}
impl UpdateComputationModelInputBuilder {
    /// <p>The ID of the computation model.</p>
    /// This field is required.
    pub fn computation_model_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.computation_model_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the computation model.</p>
    pub fn set_computation_model_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.computation_model_id = input;
        self
    }
    /// <p>The ID of the computation model.</p>
    pub fn get_computation_model_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.computation_model_id
    }
    /// <p>The name of the computation model.</p>
    /// This field is required.
    pub fn computation_model_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.computation_model_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the computation model.</p>
    pub fn set_computation_model_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.computation_model_name = input;
        self
    }
    /// <p>The name of the computation model.</p>
    pub fn get_computation_model_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.computation_model_name
    }
    /// <p>The description of the computation model.</p>
    pub fn computation_model_description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.computation_model_description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the computation model.</p>
    pub fn set_computation_model_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.computation_model_description = input;
        self
    }
    /// <p>The description of the computation model.</p>
    pub fn get_computation_model_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.computation_model_description
    }
    /// <p>The configuration for the computation model.</p>
    /// This field is required.
    pub fn computation_model_configuration(mut self, input: crate::types::ComputationModelConfiguration) -> Self {
        self.computation_model_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration for the computation model.</p>
    pub fn set_computation_model_configuration(mut self, input: ::std::option::Option<crate::types::ComputationModelConfiguration>) -> Self {
        self.computation_model_configuration = input;
        self
    }
    /// <p>The configuration for the computation model.</p>
    pub fn get_computation_model_configuration(&self) -> &::std::option::Option<crate::types::ComputationModelConfiguration> {
        &self.computation_model_configuration
    }
    /// Adds a key-value pair to `computation_model_data_binding`.
    ///
    /// To override the contents of this collection use [`set_computation_model_data_binding`](Self::set_computation_model_data_binding).
    ///
    /// <p>The data binding for the computation model. Key is a variable name defined in configuration. Value is a <code>ComputationModelDataBindingValue</code> referenced by the variable.</p>
    pub fn computation_model_data_binding(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: crate::types::ComputationModelDataBindingValue,
    ) -> Self {
        let mut hash_map = self.computation_model_data_binding.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.computation_model_data_binding = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The data binding for the computation model. Key is a variable name defined in configuration. Value is a <code>ComputationModelDataBindingValue</code> referenced by the variable.</p>
    pub fn set_computation_model_data_binding(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::ComputationModelDataBindingValue>>,
    ) -> Self {
        self.computation_model_data_binding = input;
        self
    }
    /// <p>The data binding for the computation model. Key is a variable name defined in configuration. Value is a <code>ComputationModelDataBindingValue</code> referenced by the variable.</p>
    pub fn get_computation_model_data_binding(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::ComputationModelDataBindingValue>> {
        &self.computation_model_data_binding
    }
    /// <p>A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Consumes the builder and constructs a [`UpdateComputationModelInput`](crate::operation::update_computation_model::UpdateComputationModelInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_computation_model::UpdateComputationModelInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::update_computation_model::UpdateComputationModelInput {
            computation_model_id: self.computation_model_id,
            computation_model_name: self.computation_model_name,
            computation_model_description: self.computation_model_description,
            computation_model_configuration: self.computation_model_configuration,
            computation_model_data_binding: self.computation_model_data_binding,
            client_token: self.client_token,
        })
    }
}
