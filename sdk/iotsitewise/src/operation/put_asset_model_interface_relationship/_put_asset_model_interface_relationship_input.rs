// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PutAssetModelInterfaceRelationshipInput {
    /// <p>The ID of the asset model. This can be either the actual ID in UUID format, or else externalId: followed by the external ID.</p>
    pub asset_model_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the interface asset model. This can be either the actual ID in UUID format, or else externalId: followed by the external ID.</p>
    pub interface_asset_model_id: ::std::option::Option<::std::string::String>,
    /// <p>The configuration for mapping properties from the interface asset model to the asset model where the interface is applied. This configuration controls how properties are matched and created during the interface application process.</p>
    pub property_mapping_configuration: ::std::option::Option<crate::types::PropertyMappingConfiguration>,
    /// <p>A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
}
impl PutAssetModelInterfaceRelationshipInput {
    /// <p>The ID of the asset model. This can be either the actual ID in UUID format, or else externalId: followed by the external ID.</p>
    pub fn asset_model_id(&self) -> ::std::option::Option<&str> {
        self.asset_model_id.as_deref()
    }
    /// <p>The ID of the interface asset model. This can be either the actual ID in UUID format, or else externalId: followed by the external ID.</p>
    pub fn interface_asset_model_id(&self) -> ::std::option::Option<&str> {
        self.interface_asset_model_id.as_deref()
    }
    /// <p>The configuration for mapping properties from the interface asset model to the asset model where the interface is applied. This configuration controls how properties are matched and created during the interface application process.</p>
    pub fn property_mapping_configuration(&self) -> ::std::option::Option<&crate::types::PropertyMappingConfiguration> {
        self.property_mapping_configuration.as_ref()
    }
    /// <p>A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl PutAssetModelInterfaceRelationshipInput {
    /// Creates a new builder-style object to manufacture [`PutAssetModelInterfaceRelationshipInput`](crate::operation::put_asset_model_interface_relationship::PutAssetModelInterfaceRelationshipInput).
    pub fn builder() -> crate::operation::put_asset_model_interface_relationship::builders::PutAssetModelInterfaceRelationshipInputBuilder {
        crate::operation::put_asset_model_interface_relationship::builders::PutAssetModelInterfaceRelationshipInputBuilder::default()
    }
}

/// A builder for [`PutAssetModelInterfaceRelationshipInput`](crate::operation::put_asset_model_interface_relationship::PutAssetModelInterfaceRelationshipInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct PutAssetModelInterfaceRelationshipInputBuilder {
    pub(crate) asset_model_id: ::std::option::Option<::std::string::String>,
    pub(crate) interface_asset_model_id: ::std::option::Option<::std::string::String>,
    pub(crate) property_mapping_configuration: ::std::option::Option<crate::types::PropertyMappingConfiguration>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
}
impl PutAssetModelInterfaceRelationshipInputBuilder {
    /// <p>The ID of the asset model. This can be either the actual ID in UUID format, or else externalId: followed by the external ID.</p>
    /// This field is required.
    pub fn asset_model_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.asset_model_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the asset model. This can be either the actual ID in UUID format, or else externalId: followed by the external ID.</p>
    pub fn set_asset_model_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.asset_model_id = input;
        self
    }
    /// <p>The ID of the asset model. This can be either the actual ID in UUID format, or else externalId: followed by the external ID.</p>
    pub fn get_asset_model_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.asset_model_id
    }
    /// <p>The ID of the interface asset model. This can be either the actual ID in UUID format, or else externalId: followed by the external ID.</p>
    /// This field is required.
    pub fn interface_asset_model_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.interface_asset_model_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the interface asset model. This can be either the actual ID in UUID format, or else externalId: followed by the external ID.</p>
    pub fn set_interface_asset_model_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.interface_asset_model_id = input;
        self
    }
    /// <p>The ID of the interface asset model. This can be either the actual ID in UUID format, or else externalId: followed by the external ID.</p>
    pub fn get_interface_asset_model_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.interface_asset_model_id
    }
    /// <p>The configuration for mapping properties from the interface asset model to the asset model where the interface is applied. This configuration controls how properties are matched and created during the interface application process.</p>
    /// This field is required.
    pub fn property_mapping_configuration(mut self, input: crate::types::PropertyMappingConfiguration) -> Self {
        self.property_mapping_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration for mapping properties from the interface asset model to the asset model where the interface is applied. This configuration controls how properties are matched and created during the interface application process.</p>
    pub fn set_property_mapping_configuration(mut self, input: ::std::option::Option<crate::types::PropertyMappingConfiguration>) -> Self {
        self.property_mapping_configuration = input;
        self
    }
    /// <p>The configuration for mapping properties from the interface asset model to the asset model where the interface is applied. This configuration controls how properties are matched and created during the interface application process.</p>
    pub fn get_property_mapping_configuration(&self) -> &::std::option::Option<crate::types::PropertyMappingConfiguration> {
        &self.property_mapping_configuration
    }
    /// <p>A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Consumes the builder and constructs a [`PutAssetModelInterfaceRelationshipInput`](crate::operation::put_asset_model_interface_relationship::PutAssetModelInterfaceRelationshipInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::put_asset_model_interface_relationship::PutAssetModelInterfaceRelationshipInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::put_asset_model_interface_relationship::PutAssetModelInterfaceRelationshipInput {
                asset_model_id: self.asset_model_id,
                interface_asset_model_id: self.interface_asset_model_id,
                property_mapping_configuration: self.property_mapping_configuration,
                client_token: self.client_token,
            },
        )
    }
}
