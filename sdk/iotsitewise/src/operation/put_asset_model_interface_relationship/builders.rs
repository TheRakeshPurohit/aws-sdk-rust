// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::put_asset_model_interface_relationship::_put_asset_model_interface_relationship_output::PutAssetModelInterfaceRelationshipOutputBuilder;

pub use crate::operation::put_asset_model_interface_relationship::_put_asset_model_interface_relationship_input::PutAssetModelInterfaceRelationshipInputBuilder;

impl crate::operation::put_asset_model_interface_relationship::builders::PutAssetModelInterfaceRelationshipInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::put_asset_model_interface_relationship::PutAssetModelInterfaceRelationshipOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::put_asset_model_interface_relationship::PutAssetModelInterfaceRelationshipError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.put_asset_model_interface_relationship();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `PutAssetModelInterfaceRelationship`.
///
/// <p>Creates or updates an interface relationship between an asset model and an interface asset model. This operation applies an interface to an asset model.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct PutAssetModelInterfaceRelationshipFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::put_asset_model_interface_relationship::builders::PutAssetModelInterfaceRelationshipInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::put_asset_model_interface_relationship::PutAssetModelInterfaceRelationshipOutput,
        crate::operation::put_asset_model_interface_relationship::PutAssetModelInterfaceRelationshipError,
    > for PutAssetModelInterfaceRelationshipFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::put_asset_model_interface_relationship::PutAssetModelInterfaceRelationshipOutput,
            crate::operation::put_asset_model_interface_relationship::PutAssetModelInterfaceRelationshipError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl PutAssetModelInterfaceRelationshipFluentBuilder {
    /// Creates a new `PutAssetModelInterfaceRelationshipFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the PutAssetModelInterfaceRelationship as a reference.
    pub fn as_input(&self) -> &crate::operation::put_asset_model_interface_relationship::builders::PutAssetModelInterfaceRelationshipInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::put_asset_model_interface_relationship::PutAssetModelInterfaceRelationshipOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::put_asset_model_interface_relationship::PutAssetModelInterfaceRelationshipError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::put_asset_model_interface_relationship::PutAssetModelInterfaceRelationship::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::put_asset_model_interface_relationship::PutAssetModelInterfaceRelationship::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::put_asset_model_interface_relationship::PutAssetModelInterfaceRelationshipOutput,
        crate::operation::put_asset_model_interface_relationship::PutAssetModelInterfaceRelationshipError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The ID of the asset model. This can be either the actual ID in UUID format, or else externalId: followed by the external ID.</p>
    pub fn asset_model_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.asset_model_id(input.into());
        self
    }
    /// <p>The ID of the asset model. This can be either the actual ID in UUID format, or else externalId: followed by the external ID.</p>
    pub fn set_asset_model_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_asset_model_id(input);
        self
    }
    /// <p>The ID of the asset model. This can be either the actual ID in UUID format, or else externalId: followed by the external ID.</p>
    pub fn get_asset_model_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_asset_model_id()
    }
    /// <p>The ID of the interface asset model. This can be either the actual ID in UUID format, or else externalId: followed by the external ID.</p>
    pub fn interface_asset_model_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.interface_asset_model_id(input.into());
        self
    }
    /// <p>The ID of the interface asset model. This can be either the actual ID in UUID format, or else externalId: followed by the external ID.</p>
    pub fn set_interface_asset_model_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_interface_asset_model_id(input);
        self
    }
    /// <p>The ID of the interface asset model. This can be either the actual ID in UUID format, or else externalId: followed by the external ID.</p>
    pub fn get_interface_asset_model_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_interface_asset_model_id()
    }
    /// <p>The configuration for mapping properties from the interface asset model to the asset model where the interface is applied. This configuration controls how properties are matched and created during the interface application process.</p>
    pub fn property_mapping_configuration(mut self, input: crate::types::PropertyMappingConfiguration) -> Self {
        self.inner = self.inner.property_mapping_configuration(input);
        self
    }
    /// <p>The configuration for mapping properties from the interface asset model to the asset model where the interface is applied. This configuration controls how properties are matched and created during the interface application process.</p>
    pub fn set_property_mapping_configuration(mut self, input: ::std::option::Option<crate::types::PropertyMappingConfiguration>) -> Self {
        self.inner = self.inner.set_property_mapping_configuration(input);
        self
    }
    /// <p>The configuration for mapping properties from the interface asset model to the asset model where the interface is applied. This configuration controls how properties are matched and created during the interface application process.</p>
    pub fn get_property_mapping_configuration(&self) -> &::std::option::Option<crate::types::PropertyMappingConfiguration> {
        self.inner.get_property_mapping_configuration()
    }
    /// <p>A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
    /// <p>A unique case-sensitive identifier that you can provide to ensure the idempotency of the request. Don't reuse this client token if a new idempotent request is required.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_client_token()
    }
}
