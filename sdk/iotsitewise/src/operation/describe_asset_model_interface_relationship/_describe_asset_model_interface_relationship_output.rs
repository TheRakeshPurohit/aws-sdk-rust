// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeAssetModelInterfaceRelationshipOutput {
    /// <p>The ID of the asset model.</p>
    pub asset_model_id: ::std::string::String,
    /// <p>The ID of the interface asset model.</p>
    pub interface_asset_model_id: ::std::string::String,
    /// <p>A list of property mappings between the interface asset model and the asset model where the interface is applied.</p>
    pub property_mappings: ::std::vec::Vec<crate::types::PropertyMapping>,
    /// <p>A list of hierarchy mappings between the interface asset model and the asset model where the interface is applied.</p>
    pub hierarchy_mappings: ::std::vec::Vec<crate::types::HierarchyMapping>,
    _request_id: Option<String>,
}
impl DescribeAssetModelInterfaceRelationshipOutput {
    /// <p>The ID of the asset model.</p>
    pub fn asset_model_id(&self) -> &str {
        use std::ops::Deref;
        self.asset_model_id.deref()
    }
    /// <p>The ID of the interface asset model.</p>
    pub fn interface_asset_model_id(&self) -> &str {
        use std::ops::Deref;
        self.interface_asset_model_id.deref()
    }
    /// <p>A list of property mappings between the interface asset model and the asset model where the interface is applied.</p>
    pub fn property_mappings(&self) -> &[crate::types::PropertyMapping] {
        use std::ops::Deref;
        self.property_mappings.deref()
    }
    /// <p>A list of hierarchy mappings between the interface asset model and the asset model where the interface is applied.</p>
    pub fn hierarchy_mappings(&self) -> &[crate::types::HierarchyMapping] {
        use std::ops::Deref;
        self.hierarchy_mappings.deref()
    }
}
impl ::aws_types::request_id::RequestId for DescribeAssetModelInterfaceRelationshipOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeAssetModelInterfaceRelationshipOutput {
    /// Creates a new builder-style object to manufacture [`DescribeAssetModelInterfaceRelationshipOutput`](crate::operation::describe_asset_model_interface_relationship::DescribeAssetModelInterfaceRelationshipOutput).
    pub fn builder() -> crate::operation::describe_asset_model_interface_relationship::builders::DescribeAssetModelInterfaceRelationshipOutputBuilder
    {
        crate::operation::describe_asset_model_interface_relationship::builders::DescribeAssetModelInterfaceRelationshipOutputBuilder::default()
    }
}

/// A builder for [`DescribeAssetModelInterfaceRelationshipOutput`](crate::operation::describe_asset_model_interface_relationship::DescribeAssetModelInterfaceRelationshipOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DescribeAssetModelInterfaceRelationshipOutputBuilder {
    pub(crate) asset_model_id: ::std::option::Option<::std::string::String>,
    pub(crate) interface_asset_model_id: ::std::option::Option<::std::string::String>,
    pub(crate) property_mappings: ::std::option::Option<::std::vec::Vec<crate::types::PropertyMapping>>,
    pub(crate) hierarchy_mappings: ::std::option::Option<::std::vec::Vec<crate::types::HierarchyMapping>>,
    _request_id: Option<String>,
}
impl DescribeAssetModelInterfaceRelationshipOutputBuilder {
    /// <p>The ID of the asset model.</p>
    /// This field is required.
    pub fn asset_model_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.asset_model_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the asset model.</p>
    pub fn set_asset_model_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.asset_model_id = input;
        self
    }
    /// <p>The ID of the asset model.</p>
    pub fn get_asset_model_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.asset_model_id
    }
    /// <p>The ID of the interface asset model.</p>
    /// This field is required.
    pub fn interface_asset_model_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.interface_asset_model_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the interface asset model.</p>
    pub fn set_interface_asset_model_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.interface_asset_model_id = input;
        self
    }
    /// <p>The ID of the interface asset model.</p>
    pub fn get_interface_asset_model_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.interface_asset_model_id
    }
    /// Appends an item to `property_mappings`.
    ///
    /// To override the contents of this collection use [`set_property_mappings`](Self::set_property_mappings).
    ///
    /// <p>A list of property mappings between the interface asset model and the asset model where the interface is applied.</p>
    pub fn property_mappings(mut self, input: crate::types::PropertyMapping) -> Self {
        let mut v = self.property_mappings.unwrap_or_default();
        v.push(input);
        self.property_mappings = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of property mappings between the interface asset model and the asset model where the interface is applied.</p>
    pub fn set_property_mappings(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::PropertyMapping>>) -> Self {
        self.property_mappings = input;
        self
    }
    /// <p>A list of property mappings between the interface asset model and the asset model where the interface is applied.</p>
    pub fn get_property_mappings(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PropertyMapping>> {
        &self.property_mappings
    }
    /// Appends an item to `hierarchy_mappings`.
    ///
    /// To override the contents of this collection use [`set_hierarchy_mappings`](Self::set_hierarchy_mappings).
    ///
    /// <p>A list of hierarchy mappings between the interface asset model and the asset model where the interface is applied.</p>
    pub fn hierarchy_mappings(mut self, input: crate::types::HierarchyMapping) -> Self {
        let mut v = self.hierarchy_mappings.unwrap_or_default();
        v.push(input);
        self.hierarchy_mappings = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of hierarchy mappings between the interface asset model and the asset model where the interface is applied.</p>
    pub fn set_hierarchy_mappings(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::HierarchyMapping>>) -> Self {
        self.hierarchy_mappings = input;
        self
    }
    /// <p>A list of hierarchy mappings between the interface asset model and the asset model where the interface is applied.</p>
    pub fn get_hierarchy_mappings(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::HierarchyMapping>> {
        &self.hierarchy_mappings
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeAssetModelInterfaceRelationshipOutput`](crate::operation::describe_asset_model_interface_relationship::DescribeAssetModelInterfaceRelationshipOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`asset_model_id`](crate::operation::describe_asset_model_interface_relationship::builders::DescribeAssetModelInterfaceRelationshipOutputBuilder::asset_model_id)
    /// - [`interface_asset_model_id`](crate::operation::describe_asset_model_interface_relationship::builders::DescribeAssetModelInterfaceRelationshipOutputBuilder::interface_asset_model_id)
    /// - [`property_mappings`](crate::operation::describe_asset_model_interface_relationship::builders::DescribeAssetModelInterfaceRelationshipOutputBuilder::property_mappings)
    /// - [`hierarchy_mappings`](crate::operation::describe_asset_model_interface_relationship::builders::DescribeAssetModelInterfaceRelationshipOutputBuilder::hierarchy_mappings)
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::describe_asset_model_interface_relationship::DescribeAssetModelInterfaceRelationshipOutput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::describe_asset_model_interface_relationship::DescribeAssetModelInterfaceRelationshipOutput {
                asset_model_id: self.asset_model_id.ok_or_else(|| {
                    ::aws_smithy_types::error::operation::BuildError::missing_field(
                        "asset_model_id",
                        "asset_model_id was not specified but it is required when building DescribeAssetModelInterfaceRelationshipOutput",
                    )
                })?,
                interface_asset_model_id: self.interface_asset_model_id.ok_or_else(|| {
                    ::aws_smithy_types::error::operation::BuildError::missing_field(
                        "interface_asset_model_id",
                        "interface_asset_model_id was not specified but it is required when building DescribeAssetModelInterfaceRelationshipOutput",
                    )
                })?,
                property_mappings: self.property_mappings.ok_or_else(|| {
                    ::aws_smithy_types::error::operation::BuildError::missing_field(
                        "property_mappings",
                        "property_mappings was not specified but it is required when building DescribeAssetModelInterfaceRelationshipOutput",
                    )
                })?,
                hierarchy_mappings: self.hierarchy_mappings.ok_or_else(|| {
                    ::aws_smithy_types::error::operation::BuildError::missing_field(
                        "hierarchy_mappings",
                        "hierarchy_mappings was not specified but it is required when building DescribeAssetModelInterfaceRelationshipOutput",
                    )
                })?,
                _request_id: self._request_id,
            },
        )
    }
}
