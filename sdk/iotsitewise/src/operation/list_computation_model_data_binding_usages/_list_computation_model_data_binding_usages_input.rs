// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListComputationModelDataBindingUsagesInput {
    /// <p>A filter used to limit the returned data binding usages based on specific data binding values. You can filter by asset, asset model, asset property, or asset model property to find all computation models using these specific data sources.</p>
    pub data_binding_value_filter: ::std::option::Option<crate::types::DataBindingValueFilter>,
    /// <p>The token used for the next set of paginated results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of results returned for each paginated request.</p>
    pub max_results: ::std::option::Option<i32>,
}
impl ListComputationModelDataBindingUsagesInput {
    /// <p>A filter used to limit the returned data binding usages based on specific data binding values. You can filter by asset, asset model, asset property, or asset model property to find all computation models using these specific data sources.</p>
    pub fn data_binding_value_filter(&self) -> ::std::option::Option<&crate::types::DataBindingValueFilter> {
        self.data_binding_value_filter.as_ref()
    }
    /// <p>The token used for the next set of paginated results.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of results returned for each paginated request.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
}
impl ListComputationModelDataBindingUsagesInput {
    /// Creates a new builder-style object to manufacture [`ListComputationModelDataBindingUsagesInput`](crate::operation::list_computation_model_data_binding_usages::ListComputationModelDataBindingUsagesInput).
    pub fn builder() -> crate::operation::list_computation_model_data_binding_usages::builders::ListComputationModelDataBindingUsagesInputBuilder {
        crate::operation::list_computation_model_data_binding_usages::builders::ListComputationModelDataBindingUsagesInputBuilder::default()
    }
}

/// A builder for [`ListComputationModelDataBindingUsagesInput`](crate::operation::list_computation_model_data_binding_usages::ListComputationModelDataBindingUsagesInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListComputationModelDataBindingUsagesInputBuilder {
    pub(crate) data_binding_value_filter: ::std::option::Option<crate::types::DataBindingValueFilter>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
}
impl ListComputationModelDataBindingUsagesInputBuilder {
    /// <p>A filter used to limit the returned data binding usages based on specific data binding values. You can filter by asset, asset model, asset property, or asset model property to find all computation models using these specific data sources.</p>
    /// This field is required.
    pub fn data_binding_value_filter(mut self, input: crate::types::DataBindingValueFilter) -> Self {
        self.data_binding_value_filter = ::std::option::Option::Some(input);
        self
    }
    /// <p>A filter used to limit the returned data binding usages based on specific data binding values. You can filter by asset, asset model, asset property, or asset model property to find all computation models using these specific data sources.</p>
    pub fn set_data_binding_value_filter(mut self, input: ::std::option::Option<crate::types::DataBindingValueFilter>) -> Self {
        self.data_binding_value_filter = input;
        self
    }
    /// <p>A filter used to limit the returned data binding usages based on specific data binding values. You can filter by asset, asset model, asset property, or asset model property to find all computation models using these specific data sources.</p>
    pub fn get_data_binding_value_filter(&self) -> &::std::option::Option<crate::types::DataBindingValueFilter> {
        &self.data_binding_value_filter
    }
    /// <p>The token used for the next set of paginated results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The token used for the next set of paginated results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The token used for the next set of paginated results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The maximum number of results returned for each paginated request.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results returned for each paginated request.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of results returned for each paginated request.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// Consumes the builder and constructs a [`ListComputationModelDataBindingUsagesInput`](crate::operation::list_computation_model_data_binding_usages::ListComputationModelDataBindingUsagesInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_computation_model_data_binding_usages::ListComputationModelDataBindingUsagesInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::list_computation_model_data_binding_usages::ListComputationModelDataBindingUsagesInput {
                data_binding_value_filter: self.data_binding_value_filter,
                next_token: self.next_token,
                max_results: self.max_results,
            },
        )
    }
}
