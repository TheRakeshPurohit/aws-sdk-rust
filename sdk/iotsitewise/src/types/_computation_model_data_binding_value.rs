// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains computation model data binding value information, which can be one of <code>assetModelProperty</code>, <code>list</code>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ComputationModelDataBindingValue {
    /// <p>Specifies an asset model property data binding value.</p>
    pub asset_model_property: ::std::option::Option<crate::types::AssetModelPropertyBindingValue>,
    /// <p>The asset property value used for computation model data binding.</p>
    pub asset_property: ::std::option::Option<crate::types::AssetPropertyBindingValue>,
    /// <p>Specifies a list of data binding value.</p>
    pub list: ::std::option::Option<::std::vec::Vec<crate::types::ComputationModelDataBindingValue>>,
}
impl ComputationModelDataBindingValue {
    /// <p>Specifies an asset model property data binding value.</p>
    pub fn asset_model_property(&self) -> ::std::option::Option<&crate::types::AssetModelPropertyBindingValue> {
        self.asset_model_property.as_ref()
    }
    /// <p>The asset property value used for computation model data binding.</p>
    pub fn asset_property(&self) -> ::std::option::Option<&crate::types::AssetPropertyBindingValue> {
        self.asset_property.as_ref()
    }
    /// <p>Specifies a list of data binding value.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.list.is_none()`.
    pub fn list(&self) -> &[crate::types::ComputationModelDataBindingValue] {
        self.list.as_deref().unwrap_or_default()
    }
}
impl ComputationModelDataBindingValue {
    /// Creates a new builder-style object to manufacture [`ComputationModelDataBindingValue`](crate::types::ComputationModelDataBindingValue).
    pub fn builder() -> crate::types::builders::ComputationModelDataBindingValueBuilder {
        crate::types::builders::ComputationModelDataBindingValueBuilder::default()
    }
}

/// A builder for [`ComputationModelDataBindingValue`](crate::types::ComputationModelDataBindingValue).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ComputationModelDataBindingValueBuilder {
    pub(crate) asset_model_property: ::std::option::Option<crate::types::AssetModelPropertyBindingValue>,
    pub(crate) asset_property: ::std::option::Option<crate::types::AssetPropertyBindingValue>,
    pub(crate) list: ::std::option::Option<::std::vec::Vec<crate::types::ComputationModelDataBindingValue>>,
}
impl ComputationModelDataBindingValueBuilder {
    /// <p>Specifies an asset model property data binding value.</p>
    pub fn asset_model_property(mut self, input: crate::types::AssetModelPropertyBindingValue) -> Self {
        self.asset_model_property = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies an asset model property data binding value.</p>
    pub fn set_asset_model_property(mut self, input: ::std::option::Option<crate::types::AssetModelPropertyBindingValue>) -> Self {
        self.asset_model_property = input;
        self
    }
    /// <p>Specifies an asset model property data binding value.</p>
    pub fn get_asset_model_property(&self) -> &::std::option::Option<crate::types::AssetModelPropertyBindingValue> {
        &self.asset_model_property
    }
    /// <p>The asset property value used for computation model data binding.</p>
    pub fn asset_property(mut self, input: crate::types::AssetPropertyBindingValue) -> Self {
        self.asset_property = ::std::option::Option::Some(input);
        self
    }
    /// <p>The asset property value used for computation model data binding.</p>
    pub fn set_asset_property(mut self, input: ::std::option::Option<crate::types::AssetPropertyBindingValue>) -> Self {
        self.asset_property = input;
        self
    }
    /// <p>The asset property value used for computation model data binding.</p>
    pub fn get_asset_property(&self) -> &::std::option::Option<crate::types::AssetPropertyBindingValue> {
        &self.asset_property
    }
    /// Appends an item to `list`.
    ///
    /// To override the contents of this collection use [`set_list`](Self::set_list).
    ///
    /// <p>Specifies a list of data binding value.</p>
    pub fn list(mut self, input: crate::types::ComputationModelDataBindingValue) -> Self {
        let mut v = self.list.unwrap_or_default();
        v.push(input);
        self.list = ::std::option::Option::Some(v);
        self
    }
    /// <p>Specifies a list of data binding value.</p>
    pub fn set_list(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ComputationModelDataBindingValue>>) -> Self {
        self.list = input;
        self
    }
    /// <p>Specifies a list of data binding value.</p>
    pub fn get_list(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ComputationModelDataBindingValue>> {
        &self.list
    }
    /// Consumes the builder and constructs a [`ComputationModelDataBindingValue`](crate::types::ComputationModelDataBindingValue).
    pub fn build(self) -> crate::types::ComputationModelDataBindingValue {
        crate::types::ComputationModelDataBindingValue {
            asset_model_property: self.asset_model_property,
            asset_property: self.asset_property,
            list: self.list,
        }
    }
}
