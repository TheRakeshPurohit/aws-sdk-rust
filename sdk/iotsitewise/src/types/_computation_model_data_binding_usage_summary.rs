// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A summary of how a specific data binding is used across computation models. This tracks dependencies between data sources and computation models, allowing you to understand the impact of changes to data sources.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ComputationModelDataBindingUsageSummary {
    /// <p>The list of computation model IDs that use this data binding. This allows identification of all computation models affected by changes to the referenced data source.</p>
    pub computation_model_ids: ::std::vec::Vec<::std::string::String>,
    /// <p>The data binding matched by the filter criteria. Contains details about specific data binding values used by the computation models.</p>
    pub matched_data_binding: ::std::option::Option<crate::types::MatchedDataBinding>,
}
impl ComputationModelDataBindingUsageSummary {
    /// <p>The list of computation model IDs that use this data binding. This allows identification of all computation models affected by changes to the referenced data source.</p>
    pub fn computation_model_ids(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.computation_model_ids.deref()
    }
    /// <p>The data binding matched by the filter criteria. Contains details about specific data binding values used by the computation models.</p>
    pub fn matched_data_binding(&self) -> ::std::option::Option<&crate::types::MatchedDataBinding> {
        self.matched_data_binding.as_ref()
    }
}
impl ComputationModelDataBindingUsageSummary {
    /// Creates a new builder-style object to manufacture [`ComputationModelDataBindingUsageSummary`](crate::types::ComputationModelDataBindingUsageSummary).
    pub fn builder() -> crate::types::builders::ComputationModelDataBindingUsageSummaryBuilder {
        crate::types::builders::ComputationModelDataBindingUsageSummaryBuilder::default()
    }
}

/// A builder for [`ComputationModelDataBindingUsageSummary`](crate::types::ComputationModelDataBindingUsageSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ComputationModelDataBindingUsageSummaryBuilder {
    pub(crate) computation_model_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) matched_data_binding: ::std::option::Option<crate::types::MatchedDataBinding>,
}
impl ComputationModelDataBindingUsageSummaryBuilder {
    /// Appends an item to `computation_model_ids`.
    ///
    /// To override the contents of this collection use [`set_computation_model_ids`](Self::set_computation_model_ids).
    ///
    /// <p>The list of computation model IDs that use this data binding. This allows identification of all computation models affected by changes to the referenced data source.</p>
    pub fn computation_model_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.computation_model_ids.unwrap_or_default();
        v.push(input.into());
        self.computation_model_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of computation model IDs that use this data binding. This allows identification of all computation models affected by changes to the referenced data source.</p>
    pub fn set_computation_model_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.computation_model_ids = input;
        self
    }
    /// <p>The list of computation model IDs that use this data binding. This allows identification of all computation models affected by changes to the referenced data source.</p>
    pub fn get_computation_model_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.computation_model_ids
    }
    /// <p>The data binding matched by the filter criteria. Contains details about specific data binding values used by the computation models.</p>
    /// This field is required.
    pub fn matched_data_binding(mut self, input: crate::types::MatchedDataBinding) -> Self {
        self.matched_data_binding = ::std::option::Option::Some(input);
        self
    }
    /// <p>The data binding matched by the filter criteria. Contains details about specific data binding values used by the computation models.</p>
    pub fn set_matched_data_binding(mut self, input: ::std::option::Option<crate::types::MatchedDataBinding>) -> Self {
        self.matched_data_binding = input;
        self
    }
    /// <p>The data binding matched by the filter criteria. Contains details about specific data binding values used by the computation models.</p>
    pub fn get_matched_data_binding(&self) -> &::std::option::Option<crate::types::MatchedDataBinding> {
        &self.matched_data_binding
    }
    /// Consumes the builder and constructs a [`ComputationModelDataBindingUsageSummary`](crate::types::ComputationModelDataBindingUsageSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`computation_model_ids`](crate::types::builders::ComputationModelDataBindingUsageSummaryBuilder::computation_model_ids)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::ComputationModelDataBindingUsageSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ComputationModelDataBindingUsageSummary {
            computation_model_ids: self.computation_model_ids.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "computation_model_ids",
                    "computation_model_ids was not specified but it is required when building ComputationModelDataBindingUsageSummary",
                )
            })?,
            matched_data_binding: self.matched_data_binding,
        })
    }
}
