// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The resource the action will be taken on. This can include asset-based resources and computation model resources.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TargetResource {
    /// <p>The ID of the asset, in UUID format.</p>
    pub asset_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the computation model.</p>
    pub computation_model_id: ::std::option::Option<::std::string::String>,
}
impl TargetResource {
    /// <p>The ID of the asset, in UUID format.</p>
    pub fn asset_id(&self) -> ::std::option::Option<&str> {
        self.asset_id.as_deref()
    }
    /// <p>The ID of the computation model.</p>
    pub fn computation_model_id(&self) -> ::std::option::Option<&str> {
        self.computation_model_id.as_deref()
    }
}
impl TargetResource {
    /// Creates a new builder-style object to manufacture [`TargetResource`](crate::types::TargetResource).
    pub fn builder() -> crate::types::builders::TargetResourceBuilder {
        crate::types::builders::TargetResourceBuilder::default()
    }
}

/// A builder for [`TargetResource`](crate::types::TargetResource).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct TargetResourceBuilder {
    pub(crate) asset_id: ::std::option::Option<::std::string::String>,
    pub(crate) computation_model_id: ::std::option::Option<::std::string::String>,
}
impl TargetResourceBuilder {
    /// <p>The ID of the asset, in UUID format.</p>
    pub fn asset_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.asset_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the asset, in UUID format.</p>
    pub fn set_asset_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.asset_id = input;
        self
    }
    /// <p>The ID of the asset, in UUID format.</p>
    pub fn get_asset_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.asset_id
    }
    /// <p>The ID of the computation model.</p>
    pub fn computation_model_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.computation_model_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the computation model.</p>
    pub fn set_computation_model_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.computation_model_id = input;
        self
    }
    /// <p>The ID of the computation model.</p>
    pub fn get_computation_model_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.computation_model_id
    }
    /// Consumes the builder and constructs a [`TargetResource`](crate::types::TargetResource).
    pub fn build(self) -> crate::types::TargetResource {
        crate::types::TargetResource {
            asset_id: self.asset_id,
            computation_model_id: self.computation_model_id,
        }
    }
}
