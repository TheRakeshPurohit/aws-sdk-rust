// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains configuration options for mapping properties from an interface asset model to an asset model where the interface is applied.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PropertyMappingConfiguration {
    /// <p>If true, properties are matched by name between the interface asset model and the asset model where the interface is applied.</p>
    pub match_by_property_name: bool,
    /// <p>If true, missing properties from the interface asset model are automatically created in the asset model where the interface is applied.</p>
    pub create_missing_property: bool,
    /// <p>A list of specific property mappings that override the automatic mapping by name when an interface is applied to an asset model.</p>
    pub overrides: ::std::option::Option<::std::vec::Vec<crate::types::PropertyMapping>>,
}
impl PropertyMappingConfiguration {
    /// <p>If true, properties are matched by name between the interface asset model and the asset model where the interface is applied.</p>
    pub fn match_by_property_name(&self) -> bool {
        self.match_by_property_name
    }
    /// <p>If true, missing properties from the interface asset model are automatically created in the asset model where the interface is applied.</p>
    pub fn create_missing_property(&self) -> bool {
        self.create_missing_property
    }
    /// <p>A list of specific property mappings that override the automatic mapping by name when an interface is applied to an asset model.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.overrides.is_none()`.
    pub fn overrides(&self) -> &[crate::types::PropertyMapping] {
        self.overrides.as_deref().unwrap_or_default()
    }
}
impl PropertyMappingConfiguration {
    /// Creates a new builder-style object to manufacture [`PropertyMappingConfiguration`](crate::types::PropertyMappingConfiguration).
    pub fn builder() -> crate::types::builders::PropertyMappingConfigurationBuilder {
        crate::types::builders::PropertyMappingConfigurationBuilder::default()
    }
}

/// A builder for [`PropertyMappingConfiguration`](crate::types::PropertyMappingConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct PropertyMappingConfigurationBuilder {
    pub(crate) match_by_property_name: ::std::option::Option<bool>,
    pub(crate) create_missing_property: ::std::option::Option<bool>,
    pub(crate) overrides: ::std::option::Option<::std::vec::Vec<crate::types::PropertyMapping>>,
}
impl PropertyMappingConfigurationBuilder {
    /// <p>If true, properties are matched by name between the interface asset model and the asset model where the interface is applied.</p>
    pub fn match_by_property_name(mut self, input: bool) -> Self {
        self.match_by_property_name = ::std::option::Option::Some(input);
        self
    }
    /// <p>If true, properties are matched by name between the interface asset model and the asset model where the interface is applied.</p>
    pub fn set_match_by_property_name(mut self, input: ::std::option::Option<bool>) -> Self {
        self.match_by_property_name = input;
        self
    }
    /// <p>If true, properties are matched by name between the interface asset model and the asset model where the interface is applied.</p>
    pub fn get_match_by_property_name(&self) -> &::std::option::Option<bool> {
        &self.match_by_property_name
    }
    /// <p>If true, missing properties from the interface asset model are automatically created in the asset model where the interface is applied.</p>
    pub fn create_missing_property(mut self, input: bool) -> Self {
        self.create_missing_property = ::std::option::Option::Some(input);
        self
    }
    /// <p>If true, missing properties from the interface asset model are automatically created in the asset model where the interface is applied.</p>
    pub fn set_create_missing_property(mut self, input: ::std::option::Option<bool>) -> Self {
        self.create_missing_property = input;
        self
    }
    /// <p>If true, missing properties from the interface asset model are automatically created in the asset model where the interface is applied.</p>
    pub fn get_create_missing_property(&self) -> &::std::option::Option<bool> {
        &self.create_missing_property
    }
    /// Appends an item to `overrides`.
    ///
    /// To override the contents of this collection use [`set_overrides`](Self::set_overrides).
    ///
    /// <p>A list of specific property mappings that override the automatic mapping by name when an interface is applied to an asset model.</p>
    pub fn overrides(mut self, input: crate::types::PropertyMapping) -> Self {
        let mut v = self.overrides.unwrap_or_default();
        v.push(input);
        self.overrides = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of specific property mappings that override the automatic mapping by name when an interface is applied to an asset model.</p>
    pub fn set_overrides(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::PropertyMapping>>) -> Self {
        self.overrides = input;
        self
    }
    /// <p>A list of specific property mappings that override the automatic mapping by name when an interface is applied to an asset model.</p>
    pub fn get_overrides(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PropertyMapping>> {
        &self.overrides
    }
    /// Consumes the builder and constructs a [`PropertyMappingConfiguration`](crate::types::PropertyMappingConfiguration).
    pub fn build(self) -> crate::types::PropertyMappingConfiguration {
        crate::types::PropertyMappingConfiguration {
            match_by_property_name: self.match_by_property_name.unwrap_or_default(),
            create_missing_property: self.create_missing_property.unwrap_or_default(),
            overrides: self.overrides,
        }
    }
}
