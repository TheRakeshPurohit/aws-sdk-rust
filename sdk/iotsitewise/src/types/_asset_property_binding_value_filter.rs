// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A filter used to match data bindings based on a specific asset property. This filter helps identify all computation models referencing a particular property of an asset in their data bindings.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AssetPropertyBindingValueFilter {
    /// <p>The ID of the asset containing the property to filter by. This identifies the specific asset instance containing the property of interest.</p>
    pub asset_id: ::std::string::String,
    /// <p>The ID of the property within the asset to filter by. Only data bindings referencing this specific property of the specified asset are matched.</p>
    pub property_id: ::std::string::String,
}
impl AssetPropertyBindingValueFilter {
    /// <p>The ID of the asset containing the property to filter by. This identifies the specific asset instance containing the property of interest.</p>
    pub fn asset_id(&self) -> &str {
        use std::ops::Deref;
        self.asset_id.deref()
    }
    /// <p>The ID of the property within the asset to filter by. Only data bindings referencing this specific property of the specified asset are matched.</p>
    pub fn property_id(&self) -> &str {
        use std::ops::Deref;
        self.property_id.deref()
    }
}
impl AssetPropertyBindingValueFilter {
    /// Creates a new builder-style object to manufacture [`AssetPropertyBindingValueFilter`](crate::types::AssetPropertyBindingValueFilter).
    pub fn builder() -> crate::types::builders::AssetPropertyBindingValueFilterBuilder {
        crate::types::builders::AssetPropertyBindingValueFilterBuilder::default()
    }
}

/// A builder for [`AssetPropertyBindingValueFilter`](crate::types::AssetPropertyBindingValueFilter).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AssetPropertyBindingValueFilterBuilder {
    pub(crate) asset_id: ::std::option::Option<::std::string::String>,
    pub(crate) property_id: ::std::option::Option<::std::string::String>,
}
impl AssetPropertyBindingValueFilterBuilder {
    /// <p>The ID of the asset containing the property to filter by. This identifies the specific asset instance containing the property of interest.</p>
    /// This field is required.
    pub fn asset_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.asset_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the asset containing the property to filter by. This identifies the specific asset instance containing the property of interest.</p>
    pub fn set_asset_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.asset_id = input;
        self
    }
    /// <p>The ID of the asset containing the property to filter by. This identifies the specific asset instance containing the property of interest.</p>
    pub fn get_asset_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.asset_id
    }
    /// <p>The ID of the property within the asset to filter by. Only data bindings referencing this specific property of the specified asset are matched.</p>
    /// This field is required.
    pub fn property_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.property_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the property within the asset to filter by. Only data bindings referencing this specific property of the specified asset are matched.</p>
    pub fn set_property_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.property_id = input;
        self
    }
    /// <p>The ID of the property within the asset to filter by. Only data bindings referencing this specific property of the specified asset are matched.</p>
    pub fn get_property_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.property_id
    }
    /// Consumes the builder and constructs a [`AssetPropertyBindingValueFilter`](crate::types::AssetPropertyBindingValueFilter).
    /// This method will fail if any of the following fields are not set:
    /// - [`asset_id`](crate::types::builders::AssetPropertyBindingValueFilterBuilder::asset_id)
    /// - [`property_id`](crate::types::builders::AssetPropertyBindingValueFilterBuilder::property_id)
    pub fn build(self) -> ::std::result::Result<crate::types::AssetPropertyBindingValueFilter, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AssetPropertyBindingValueFilter {
            asset_id: self.asset_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "asset_id",
                    "asset_id was not specified but it is required when building AssetPropertyBindingValueFilter",
                )
            })?,
            property_id: self.property_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "property_id",
                    "property_id was not specified but it is required when building AssetPropertyBindingValueFilter",
                )
            })?,
        })
    }
}
