// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration for the computation model.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ComputationModelConfiguration {
    /// <p>The configuration for the anomaly detection type of computation model.</p>
    pub anomaly_detection: ::std::option::Option<crate::types::ComputationModelAnomalyDetectionConfiguration>,
}
impl ComputationModelConfiguration {
    /// <p>The configuration for the anomaly detection type of computation model.</p>
    pub fn anomaly_detection(&self) -> ::std::option::Option<&crate::types::ComputationModelAnomalyDetectionConfiguration> {
        self.anomaly_detection.as_ref()
    }
}
impl ComputationModelConfiguration {
    /// Creates a new builder-style object to manufacture [`ComputationModelConfiguration`](crate::types::ComputationModelConfiguration).
    pub fn builder() -> crate::types::builders::ComputationModelConfigurationBuilder {
        crate::types::builders::ComputationModelConfigurationBuilder::default()
    }
}

/// A builder for [`ComputationModelConfiguration`](crate::types::ComputationModelConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ComputationModelConfigurationBuilder {
    pub(crate) anomaly_detection: ::std::option::Option<crate::types::ComputationModelAnomalyDetectionConfiguration>,
}
impl ComputationModelConfigurationBuilder {
    /// <p>The configuration for the anomaly detection type of computation model.</p>
    pub fn anomaly_detection(mut self, input: crate::types::ComputationModelAnomalyDetectionConfiguration) -> Self {
        self.anomaly_detection = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration for the anomaly detection type of computation model.</p>
    pub fn set_anomaly_detection(mut self, input: ::std::option::Option<crate::types::ComputationModelAnomalyDetectionConfiguration>) -> Self {
        self.anomaly_detection = input;
        self
    }
    /// <p>The configuration for the anomaly detection type of computation model.</p>
    pub fn get_anomaly_detection(&self) -> &::std::option::Option<crate::types::ComputationModelAnomalyDetectionConfiguration> {
        &self.anomaly_detection
    }
    /// Consumes the builder and constructs a [`ComputationModelConfiguration`](crate::types::ComputationModelConfiguration).
    pub fn build(self) -> crate::types::ComputationModelConfiguration {
        crate::types::ComputationModelConfiguration {
            anomaly_detection: self.anomaly_detection,
        }
    }
}
