// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a data binding that matches the specified filter criteria.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MatchedDataBinding {
    /// <p>The value of the matched data binding.</p>
    pub value: ::std::option::Option<crate::types::DataBindingValue>,
}
impl MatchedDataBinding {
    /// <p>The value of the matched data binding.</p>
    pub fn value(&self) -> ::std::option::Option<&crate::types::DataBindingValue> {
        self.value.as_ref()
    }
}
impl MatchedDataBinding {
    /// Creates a new builder-style object to manufacture [`MatchedDataBinding`](crate::types::MatchedDataBinding).
    pub fn builder() -> crate::types::builders::MatchedDataBindingBuilder {
        crate::types::builders::MatchedDataBindingBuilder::default()
    }
}

/// A builder for [`MatchedDataBinding`](crate::types::MatchedDataBinding).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct MatchedDataBindingBuilder {
    pub(crate) value: ::std::option::Option<crate::types::DataBindingValue>,
}
impl MatchedDataBindingBuilder {
    /// <p>The value of the matched data binding.</p>
    /// This field is required.
    pub fn value(mut self, input: crate::types::DataBindingValue) -> Self {
        self.value = ::std::option::Option::Some(input);
        self
    }
    /// <p>The value of the matched data binding.</p>
    pub fn set_value(mut self, input: ::std::option::Option<crate::types::DataBindingValue>) -> Self {
        self.value = input;
        self
    }
    /// <p>The value of the matched data binding.</p>
    pub fn get_value(&self) -> &::std::option::Option<crate::types::DataBindingValue> {
        &self.value
    }
    /// Consumes the builder and constructs a [`MatchedDataBinding`](crate::types::MatchedDataBinding).
    pub fn build(self) -> crate::types::MatchedDataBinding {
        crate::types::MatchedDataBinding { value: self.value }
    }
}
