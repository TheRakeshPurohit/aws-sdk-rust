// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a value used in a data binding. It can be an asset property or an asset model property.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DataBindingValue {
    /// <p>Contains information about an <code>assetModelProperty</code> binding value.</p>
    pub asset_model_property: ::std::option::Option<crate::types::AssetModelPropertyBindingValue>,
    /// <p>The asset property value used in the data binding.</p>
    pub asset_property: ::std::option::Option<crate::types::AssetPropertyBindingValue>,
}
impl DataBindingValue {
    /// <p>Contains information about an <code>assetModelProperty</code> binding value.</p>
    pub fn asset_model_property(&self) -> ::std::option::Option<&crate::types::AssetModelPropertyBindingValue> {
        self.asset_model_property.as_ref()
    }
    /// <p>The asset property value used in the data binding.</p>
    pub fn asset_property(&self) -> ::std::option::Option<&crate::types::AssetPropertyBindingValue> {
        self.asset_property.as_ref()
    }
}
impl DataBindingValue {
    /// Creates a new builder-style object to manufacture [`DataBindingValue`](crate::types::DataBindingValue).
    pub fn builder() -> crate::types::builders::DataBindingValueBuilder {
        crate::types::builders::DataBindingValueBuilder::default()
    }
}

/// A builder for [`DataBindingValue`](crate::types::DataBindingValue).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DataBindingValueBuilder {
    pub(crate) asset_model_property: ::std::option::Option<crate::types::AssetModelPropertyBindingValue>,
    pub(crate) asset_property: ::std::option::Option<crate::types::AssetPropertyBindingValue>,
}
impl DataBindingValueBuilder {
    /// <p>Contains information about an <code>assetModelProperty</code> binding value.</p>
    pub fn asset_model_property(mut self, input: crate::types::AssetModelPropertyBindingValue) -> Self {
        self.asset_model_property = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains information about an <code>assetModelProperty</code> binding value.</p>
    pub fn set_asset_model_property(mut self, input: ::std::option::Option<crate::types::AssetModelPropertyBindingValue>) -> Self {
        self.asset_model_property = input;
        self
    }
    /// <p>Contains information about an <code>assetModelProperty</code> binding value.</p>
    pub fn get_asset_model_property(&self) -> &::std::option::Option<crate::types::AssetModelPropertyBindingValue> {
        &self.asset_model_property
    }
    /// <p>The asset property value used in the data binding.</p>
    pub fn asset_property(mut self, input: crate::types::AssetPropertyBindingValue) -> Self {
        self.asset_property = ::std::option::Option::Some(input);
        self
    }
    /// <p>The asset property value used in the data binding.</p>
    pub fn set_asset_property(mut self, input: ::std::option::Option<crate::types::AssetPropertyBindingValue>) -> Self {
        self.asset_property = input;
        self
    }
    /// <p>The asset property value used in the data binding.</p>
    pub fn get_asset_property(&self) -> &::std::option::Option<crate::types::AssetPropertyBindingValue> {
        &self.asset_property
    }
    /// Consumes the builder and constructs a [`DataBindingValue`](crate::types::DataBindingValue).
    pub fn build(self) -> crate::types::DataBindingValue {
        crate::types::DataBindingValue {
            asset_model_property: self.asset_model_property,
            asset_property: self.asset_property,
        }
    }
}
