// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_list_account_pools_output_output_next_token(
    input: &crate::operation::list_account_pools::ListAccountPoolsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_accounts_in_account_pool_output_output_next_token(
    input: &crate::operation::list_accounts_in_account_pool::ListAccountsInAccountPoolOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_asset_filters_output_output_next_token(
    input: &crate::operation::list_asset_filters::ListAssetFiltersOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_asset_revisions_output_output_next_token(
    input: &crate::operation::list_asset_revisions::ListAssetRevisionsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_connections_output_output_next_token(
    input: &crate::operation::list_connections::ListConnectionsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_data_product_revisions_output_output_next_token(
    input: &crate::operation::list_data_product_revisions::ListDataProductRevisionsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_data_source_run_activities_output_output_next_token(
    input: &crate::operation::list_data_source_run_activities::ListDataSourceRunActivitiesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_data_source_runs_output_output_next_token(
    input: &crate::operation::list_data_source_runs::ListDataSourceRunsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_data_sources_output_output_next_token(
    input: &crate::operation::list_data_sources::ListDataSourcesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_domain_units_for_parent_output_output_next_token(
    input: &crate::operation::list_domain_units_for_parent::ListDomainUnitsForParentOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_domains_output_output_next_token(
    input: &crate::operation::list_domains::ListDomainsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_entity_owners_output_output_next_token(
    input: &crate::operation::list_entity_owners::ListEntityOwnersOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_environment_actions_output_output_next_token(
    input: &crate::operation::list_environment_actions::ListEnvironmentActionsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_environment_blueprint_configurations_output_output_next_token(
    input: &crate::operation::list_environment_blueprint_configurations::ListEnvironmentBlueprintConfigurationsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_environment_blueprints_output_output_next_token(
    input: &crate::operation::list_environment_blueprints::ListEnvironmentBlueprintsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_environment_profiles_output_output_next_token(
    input: &crate::operation::list_environment_profiles::ListEnvironmentProfilesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_environments_output_output_next_token(
    input: &crate::operation::list_environments::ListEnvironmentsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_job_runs_output_output_next_token(
    input: &crate::operation::list_job_runs::ListJobRunsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_lineage_events_output_output_next_token(
    input: &crate::operation::list_lineage_events::ListLineageEventsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_lineage_node_history_output_output_next_token(
    input: &crate::operation::list_lineage_node_history::ListLineageNodeHistoryOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_metadata_generation_runs_output_output_next_token(
    input: &crate::operation::list_metadata_generation_runs::ListMetadataGenerationRunsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_notifications_output_output_next_token(
    input: &crate::operation::list_notifications::ListNotificationsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_policy_grants_output_output_next_token(
    input: &crate::operation::list_policy_grants::ListPolicyGrantsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_project_memberships_output_output_next_token(
    input: &crate::operation::list_project_memberships::ListProjectMembershipsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_project_profiles_output_output_next_token(
    input: &crate::operation::list_project_profiles::ListProjectProfilesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_projects_output_output_next_token(
    input: &crate::operation::list_projects::ListProjectsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_rules_output_output_next_token(
    input: &crate::operation::list_rules::ListRulesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_subscription_grants_output_output_next_token(
    input: &crate::operation::list_subscription_grants::ListSubscriptionGrantsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_subscription_requests_output_output_next_token(
    input: &crate::operation::list_subscription_requests::ListSubscriptionRequestsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_subscription_targets_output_output_next_token(
    input: &crate::operation::list_subscription_targets::ListSubscriptionTargetsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_subscriptions_output_output_next_token(
    input: &crate::operation::list_subscriptions::ListSubscriptionsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_time_series_data_points_output_output_next_token(
    input: &crate::operation::list_time_series_data_points::ListTimeSeriesDataPointsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_search_output_output_next_token(
    input: &crate::operation::search::SearchOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_search_group_profiles_output_output_next_token(
    input: &crate::operation::search_group_profiles::SearchGroupProfilesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_search_listings_output_output_next_token(
    input: &crate::operation::search_listings::SearchListingsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_search_types_output_output_next_token(
    input: &crate::operation::search_types::SearchTypesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_search_user_profiles_output_output_next_token(
    input: &crate::operation::search_user_profiles::SearchUserProfilesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_account_pools_output_output_items(
    input: crate::operation::list_account_pools::ListAccountPoolsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::AccountPoolSummary>> {
    let input = input.items?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_accounts_in_account_pool_output_output_items(
    input: crate::operation::list_accounts_in_account_pool::ListAccountsInAccountPoolOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::AccountInfo>> {
    let input = input.items?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_asset_filters_output_output_items(
    input: crate::operation::list_asset_filters::ListAssetFiltersOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::AssetFilterSummary>> {
    let input = input.items;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_asset_revisions_output_output_items(
    input: crate::operation::list_asset_revisions::ListAssetRevisionsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::AssetRevision>> {
    let input = input.items?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_connections_output_output_items(
    input: crate::operation::list_connections::ListConnectionsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ConnectionSummary>> {
    let input = input.items;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_data_product_revisions_output_output_items(
    input: crate::operation::list_data_product_revisions::ListDataProductRevisionsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::DataProductRevision>> {
    let input = input.items;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_data_source_run_activities_output_output_items(
    input: crate::operation::list_data_source_run_activities::ListDataSourceRunActivitiesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::DataSourceRunActivity>> {
    let input = input.items;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_data_source_runs_output_output_items(
    input: crate::operation::list_data_source_runs::ListDataSourceRunsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::DataSourceRunSummary>> {
    let input = input.items;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_data_sources_output_output_items(
    input: crate::operation::list_data_sources::ListDataSourcesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::DataSourceSummary>> {
    let input = input.items;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_domain_units_for_parent_output_output_items(
    input: crate::operation::list_domain_units_for_parent::ListDomainUnitsForParentOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::DomainUnitSummary>> {
    let input = input.items;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_domains_output_output_items(
    input: crate::operation::list_domains::ListDomainsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::DomainSummary>> {
    let input = input.items;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_entity_owners_output_output_owners(
    input: crate::operation::list_entity_owners::ListEntityOwnersOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::OwnerPropertiesOutput>> {
    let input = input.owners;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_environment_actions_output_output_items(
    input: crate::operation::list_environment_actions::ListEnvironmentActionsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::EnvironmentActionSummary>> {
    let input = input.items?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_environment_blueprint_configurations_output_output_items(
    input: crate::operation::list_environment_blueprint_configurations::ListEnvironmentBlueprintConfigurationsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::EnvironmentBlueprintConfigurationItem>> {
    let input = input.items?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_environment_blueprints_output_output_items(
    input: crate::operation::list_environment_blueprints::ListEnvironmentBlueprintsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::EnvironmentBlueprintSummary>> {
    let input = input.items;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_environment_profiles_output_output_items(
    input: crate::operation::list_environment_profiles::ListEnvironmentProfilesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::EnvironmentProfileSummary>> {
    let input = input.items;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_environments_output_output_items(
    input: crate::operation::list_environments::ListEnvironmentsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::EnvironmentSummary>> {
    let input = input.items;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_job_runs_output_output_items(
    input: crate::operation::list_job_runs::ListJobRunsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::JobRunSummary>> {
    let input = input.items?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_lineage_events_output_output_items(
    input: crate::operation::list_lineage_events::ListLineageEventsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::LineageEventSummary>> {
    let input = input.items?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_lineage_node_history_output_output_nodes(
    input: crate::operation::list_lineage_node_history::ListLineageNodeHistoryOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::LineageNodeSummary>> {
    let input = input.nodes?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_metadata_generation_runs_output_output_items(
    input: crate::operation::list_metadata_generation_runs::ListMetadataGenerationRunsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::MetadataGenerationRunItem>> {
    let input = input.items?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_notifications_output_output_notifications(
    input: crate::operation::list_notifications::ListNotificationsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::NotificationOutput>> {
    let input = input.notifications?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_policy_grants_output_output_grant_list(
    input: crate::operation::list_policy_grants::ListPolicyGrantsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::PolicyGrantMember>> {
    let input = input.grant_list;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_project_memberships_output_output_members(
    input: crate::operation::list_project_memberships::ListProjectMembershipsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ProjectMember>> {
    let input = input.members;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_project_profiles_output_output_items(
    input: crate::operation::list_project_profiles::ListProjectProfilesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ProjectProfileSummary>> {
    let input = input.items?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_projects_output_output_items(
    input: crate::operation::list_projects::ListProjectsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ProjectSummary>> {
    let input = input.items?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_rules_output_output_items(
    input: crate::operation::list_rules::ListRulesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::RuleSummary>> {
    let input = input.items;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_subscription_grants_output_output_items(
    input: crate::operation::list_subscription_grants::ListSubscriptionGrantsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::SubscriptionGrantSummary>> {
    let input = input.items;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_subscription_requests_output_output_items(
    input: crate::operation::list_subscription_requests::ListSubscriptionRequestsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::SubscriptionRequestSummary>> {
    let input = input.items;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_subscription_targets_output_output_items(
    input: crate::operation::list_subscription_targets::ListSubscriptionTargetsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::SubscriptionTargetSummary>> {
    let input = input.items;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_subscriptions_output_output_items(
    input: crate::operation::list_subscriptions::ListSubscriptionsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::SubscriptionSummary>> {
    let input = input.items;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_time_series_data_points_output_output_items(
    input: crate::operation::list_time_series_data_points::ListTimeSeriesDataPointsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::TimeSeriesDataPointSummaryFormOutput>> {
    let input = input.items?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_search_output_output_items(
    input: crate::operation::search::SearchOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::SearchInventoryResultItem>> {
    let input = input.items?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_search_group_profiles_output_output_items(
    input: crate::operation::search_group_profiles::SearchGroupProfilesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::GroupProfileSummary>> {
    let input = input.items?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_search_listings_output_output_items(
    input: crate::operation::search_listings::SearchListingsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::SearchResultItem>> {
    let input = input.items?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_search_types_output_output_items(
    input: crate::operation::search_types::SearchTypesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::SearchTypesResultItem>> {
    let input = input.items?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_search_user_profiles_output_output_items(
    input: crate::operation::search_user_profiles::SearchUserProfilesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::UserProfileSummary>> {
    let input = input.items?;
    ::std::option::Option::Some(input)
}
