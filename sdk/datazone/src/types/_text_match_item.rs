// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure indicating matched terms for an attribute.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TextMatchItem {
    /// <p>The name of the attribute.</p>
    pub attribute: ::std::option::Option<::std::string::String>,
    /// <p>Snippet of attribute text containing highlighted content.</p>
    pub text: ::std::option::Option<::std::string::String>,
    /// <p>List of offsets indicating matching terms in the TextMatchItem text.</p>
    pub match_offsets: ::std::option::Option<::std::vec::Vec<crate::types::MatchOffset>>,
}
impl TextMatchItem {
    /// <p>The name of the attribute.</p>
    pub fn attribute(&self) -> ::std::option::Option<&str> {
        self.attribute.as_deref()
    }
    /// <p>Snippet of attribute text containing highlighted content.</p>
    pub fn text(&self) -> ::std::option::Option<&str> {
        self.text.as_deref()
    }
    /// <p>List of offsets indicating matching terms in the TextMatchItem text.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.match_offsets.is_none()`.
    pub fn match_offsets(&self) -> &[crate::types::MatchOffset] {
        self.match_offsets.as_deref().unwrap_or_default()
    }
}
impl TextMatchItem {
    /// Creates a new builder-style object to manufacture [`TextMatchItem`](crate::types::TextMatchItem).
    pub fn builder() -> crate::types::builders::TextMatchItemBuilder {
        crate::types::builders::TextMatchItemBuilder::default()
    }
}

/// A builder for [`TextMatchItem`](crate::types::TextMatchItem).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct TextMatchItemBuilder {
    pub(crate) attribute: ::std::option::Option<::std::string::String>,
    pub(crate) text: ::std::option::Option<::std::string::String>,
    pub(crate) match_offsets: ::std::option::Option<::std::vec::Vec<crate::types::MatchOffset>>,
}
impl TextMatchItemBuilder {
    /// <p>The name of the attribute.</p>
    pub fn attribute(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.attribute = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the attribute.</p>
    pub fn set_attribute(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.attribute = input;
        self
    }
    /// <p>The name of the attribute.</p>
    pub fn get_attribute(&self) -> &::std::option::Option<::std::string::String> {
        &self.attribute
    }
    /// <p>Snippet of attribute text containing highlighted content.</p>
    pub fn text(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.text = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Snippet of attribute text containing highlighted content.</p>
    pub fn set_text(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.text = input;
        self
    }
    /// <p>Snippet of attribute text containing highlighted content.</p>
    pub fn get_text(&self) -> &::std::option::Option<::std::string::String> {
        &self.text
    }
    /// Appends an item to `match_offsets`.
    ///
    /// To override the contents of this collection use [`set_match_offsets`](Self::set_match_offsets).
    ///
    /// <p>List of offsets indicating matching terms in the TextMatchItem text.</p>
    pub fn match_offsets(mut self, input: crate::types::MatchOffset) -> Self {
        let mut v = self.match_offsets.unwrap_or_default();
        v.push(input);
        self.match_offsets = ::std::option::Option::Some(v);
        self
    }
    /// <p>List of offsets indicating matching terms in the TextMatchItem text.</p>
    pub fn set_match_offsets(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::MatchOffset>>) -> Self {
        self.match_offsets = input;
        self
    }
    /// <p>List of offsets indicating matching terms in the TextMatchItem text.</p>
    pub fn get_match_offsets(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MatchOffset>> {
        &self.match_offsets
    }
    /// Consumes the builder and constructs a [`TextMatchItem`](crate::types::TextMatchItem).
    pub fn build(self) -> crate::types::TextMatchItem {
        crate::types::TextMatchItem {
            attribute: self.attribute,
            text: self.text,
            match_offsets: self.match_offsets,
        }
    }
}
