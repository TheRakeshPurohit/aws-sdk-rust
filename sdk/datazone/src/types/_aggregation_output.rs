// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The aggregation for an attribute.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AggregationOutput {
    /// <p>The attribute for this aggregation.</p>
    pub attribute: ::std::option::Option<::std::string::String>,
    /// <p>The display value of the aggregation output item.</p>
    pub display_value: ::std::option::Option<::std::string::String>,
    /// <p>A list of aggregation output items.</p>
    pub items: ::std::option::Option<::std::vec::Vec<crate::types::AggregationOutputItem>>,
}
impl AggregationOutput {
    /// <p>The attribute for this aggregation.</p>
    pub fn attribute(&self) -> ::std::option::Option<&str> {
        self.attribute.as_deref()
    }
    /// <p>The display value of the aggregation output item.</p>
    pub fn display_value(&self) -> ::std::option::Option<&str> {
        self.display_value.as_deref()
    }
    /// <p>A list of aggregation output items.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.items.is_none()`.
    pub fn items(&self) -> &[crate::types::AggregationOutputItem] {
        self.items.as_deref().unwrap_or_default()
    }
}
impl AggregationOutput {
    /// Creates a new builder-style object to manufacture [`AggregationOutput`](crate::types::AggregationOutput).
    pub fn builder() -> crate::types::builders::AggregationOutputBuilder {
        crate::types::builders::AggregationOutputBuilder::default()
    }
}

/// A builder for [`AggregationOutput`](crate::types::AggregationOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AggregationOutputBuilder {
    pub(crate) attribute: ::std::option::Option<::std::string::String>,
    pub(crate) display_value: ::std::option::Option<::std::string::String>,
    pub(crate) items: ::std::option::Option<::std::vec::Vec<crate::types::AggregationOutputItem>>,
}
impl AggregationOutputBuilder {
    /// <p>The attribute for this aggregation.</p>
    pub fn attribute(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.attribute = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The attribute for this aggregation.</p>
    pub fn set_attribute(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.attribute = input;
        self
    }
    /// <p>The attribute for this aggregation.</p>
    pub fn get_attribute(&self) -> &::std::option::Option<::std::string::String> {
        &self.attribute
    }
    /// <p>The display value of the aggregation output item.</p>
    pub fn display_value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.display_value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The display value of the aggregation output item.</p>
    pub fn set_display_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.display_value = input;
        self
    }
    /// <p>The display value of the aggregation output item.</p>
    pub fn get_display_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.display_value
    }
    /// Appends an item to `items`.
    ///
    /// To override the contents of this collection use [`set_items`](Self::set_items).
    ///
    /// <p>A list of aggregation output items.</p>
    pub fn items(mut self, input: crate::types::AggregationOutputItem) -> Self {
        let mut v = self.items.unwrap_or_default();
        v.push(input);
        self.items = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of aggregation output items.</p>
    pub fn set_items(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AggregationOutputItem>>) -> Self {
        self.items = input;
        self
    }
    /// <p>A list of aggregation output items.</p>
    pub fn get_items(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AggregationOutputItem>> {
        &self.items
    }
    /// Consumes the builder and constructs a [`AggregationOutput`](crate::types::AggregationOutput).
    pub fn build(self) -> crate::types::AggregationOutput {
        crate::types::AggregationOutput {
            attribute: self.attribute,
            display_value: self.display_value,
            items: self.items,
        }
    }
}
