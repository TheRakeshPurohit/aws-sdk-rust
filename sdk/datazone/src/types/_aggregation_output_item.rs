// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An aggregation output item.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AggregationOutputItem {
    /// <p>The attribute value of the aggregation output item.</p>
    pub value: ::std::option::Option<::std::string::String>,
    /// <p>The count of the aggregation output item.</p>
    pub count: ::std::option::Option<i32>,
    /// <p>The display value of the aggregation. If the attribute being aggregated corresponds to the id of a public resource, the service automatically resolves the id to the provided display value.</p>
    pub display_value: ::std::option::Option<::std::string::String>,
}
impl AggregationOutputItem {
    /// <p>The attribute value of the aggregation output item.</p>
    pub fn value(&self) -> ::std::option::Option<&str> {
        self.value.as_deref()
    }
    /// <p>The count of the aggregation output item.</p>
    pub fn count(&self) -> ::std::option::Option<i32> {
        self.count
    }
    /// <p>The display value of the aggregation. If the attribute being aggregated corresponds to the id of a public resource, the service automatically resolves the id to the provided display value.</p>
    pub fn display_value(&self) -> ::std::option::Option<&str> {
        self.display_value.as_deref()
    }
}
impl AggregationOutputItem {
    /// Creates a new builder-style object to manufacture [`AggregationOutputItem`](crate::types::AggregationOutputItem).
    pub fn builder() -> crate::types::builders::AggregationOutputItemBuilder {
        crate::types::builders::AggregationOutputItemBuilder::default()
    }
}

/// A builder for [`AggregationOutputItem`](crate::types::AggregationOutputItem).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AggregationOutputItemBuilder {
    pub(crate) value: ::std::option::Option<::std::string::String>,
    pub(crate) count: ::std::option::Option<i32>,
    pub(crate) display_value: ::std::option::Option<::std::string::String>,
}
impl AggregationOutputItemBuilder {
    /// <p>The attribute value of the aggregation output item.</p>
    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The attribute value of the aggregation output item.</p>
    pub fn set_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// <p>The attribute value of the aggregation output item.</p>
    pub fn get_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.value
    }
    /// <p>The count of the aggregation output item.</p>
    pub fn count(mut self, input: i32) -> Self {
        self.count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The count of the aggregation output item.</p>
    pub fn set_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.count = input;
        self
    }
    /// <p>The count of the aggregation output item.</p>
    pub fn get_count(&self) -> &::std::option::Option<i32> {
        &self.count
    }
    /// <p>The display value of the aggregation. If the attribute being aggregated corresponds to the id of a public resource, the service automatically resolves the id to the provided display value.</p>
    pub fn display_value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.display_value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The display value of the aggregation. If the attribute being aggregated corresponds to the id of a public resource, the service automatically resolves the id to the provided display value.</p>
    pub fn set_display_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.display_value = input;
        self
    }
    /// <p>The display value of the aggregation. If the attribute being aggregated corresponds to the id of a public resource, the service automatically resolves the id to the provided display value.</p>
    pub fn get_display_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.display_value
    }
    /// Consumes the builder and constructs a [`AggregationOutputItem`](crate::types::AggregationOutputItem).
    pub fn build(self) -> crate::types::AggregationOutputItem {
        crate::types::AggregationOutputItem {
            value: self.value,
            count: self.count,
            display_value: self.display_value,
        }
    }
}
