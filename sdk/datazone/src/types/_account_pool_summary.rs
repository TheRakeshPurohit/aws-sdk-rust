// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The summary of the account pool.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct AccountPoolSummary {
    /// <p>The ID of the domain.</p>
    pub domain_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the account pool.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the account pool.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The mechanism used to resolve the account selection from the account pool.</p>
    pub resolution_strategy: ::std::option::Option<crate::types::ResolutionStrategy>,
    /// <p>The ID of the domain unit.</p>
    pub domain_unit_id: ::std::option::Option<::std::string::String>,
    /// <p>The user who created the account pool.</p>
    pub created_by: ::std::option::Option<::std::string::String>,
    /// <p>The user who updated the account pool.</p>
    pub updated_by: ::std::option::Option<::std::string::String>,
}
impl AccountPoolSummary {
    /// <p>The ID of the domain.</p>
    pub fn domain_id(&self) -> ::std::option::Option<&str> {
        self.domain_id.as_deref()
    }
    /// <p>The ID of the account pool.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The name of the account pool.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The mechanism used to resolve the account selection from the account pool.</p>
    pub fn resolution_strategy(&self) -> ::std::option::Option<&crate::types::ResolutionStrategy> {
        self.resolution_strategy.as_ref()
    }
    /// <p>The ID of the domain unit.</p>
    pub fn domain_unit_id(&self) -> ::std::option::Option<&str> {
        self.domain_unit_id.as_deref()
    }
    /// <p>The user who created the account pool.</p>
    pub fn created_by(&self) -> ::std::option::Option<&str> {
        self.created_by.as_deref()
    }
    /// <p>The user who updated the account pool.</p>
    pub fn updated_by(&self) -> ::std::option::Option<&str> {
        self.updated_by.as_deref()
    }
}
impl ::std::fmt::Debug for AccountPoolSummary {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AccountPoolSummary");
        formatter.field("domain_id", &self.domain_id);
        formatter.field("id", &self.id);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("resolution_strategy", &self.resolution_strategy);
        formatter.field("domain_unit_id", &self.domain_unit_id);
        formatter.field("created_by", &self.created_by);
        formatter.field("updated_by", &self.updated_by);
        formatter.finish()
    }
}
impl AccountPoolSummary {
    /// Creates a new builder-style object to manufacture [`AccountPoolSummary`](crate::types::AccountPoolSummary).
    pub fn builder() -> crate::types::builders::AccountPoolSummaryBuilder {
        crate::types::builders::AccountPoolSummaryBuilder::default()
    }
}

/// A builder for [`AccountPoolSummary`](crate::types::AccountPoolSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct AccountPoolSummaryBuilder {
    pub(crate) domain_id: ::std::option::Option<::std::string::String>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) resolution_strategy: ::std::option::Option<crate::types::ResolutionStrategy>,
    pub(crate) domain_unit_id: ::std::option::Option<::std::string::String>,
    pub(crate) created_by: ::std::option::Option<::std::string::String>,
    pub(crate) updated_by: ::std::option::Option<::std::string::String>,
}
impl AccountPoolSummaryBuilder {
    /// <p>The ID of the domain.</p>
    pub fn domain_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the domain.</p>
    pub fn set_domain_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_id = input;
        self
    }
    /// <p>The ID of the domain.</p>
    pub fn get_domain_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_id
    }
    /// <p>The ID of the account pool.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the account pool.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The ID of the account pool.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The name of the account pool.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the account pool.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the account pool.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The mechanism used to resolve the account selection from the account pool.</p>
    pub fn resolution_strategy(mut self, input: crate::types::ResolutionStrategy) -> Self {
        self.resolution_strategy = ::std::option::Option::Some(input);
        self
    }
    /// <p>The mechanism used to resolve the account selection from the account pool.</p>
    pub fn set_resolution_strategy(mut self, input: ::std::option::Option<crate::types::ResolutionStrategy>) -> Self {
        self.resolution_strategy = input;
        self
    }
    /// <p>The mechanism used to resolve the account selection from the account pool.</p>
    pub fn get_resolution_strategy(&self) -> &::std::option::Option<crate::types::ResolutionStrategy> {
        &self.resolution_strategy
    }
    /// <p>The ID of the domain unit.</p>
    pub fn domain_unit_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_unit_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the domain unit.</p>
    pub fn set_domain_unit_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_unit_id = input;
        self
    }
    /// <p>The ID of the domain unit.</p>
    pub fn get_domain_unit_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_unit_id
    }
    /// <p>The user who created the account pool.</p>
    pub fn created_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.created_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The user who created the account pool.</p>
    pub fn set_created_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.created_by = input;
        self
    }
    /// <p>The user who created the account pool.</p>
    pub fn get_created_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.created_by
    }
    /// <p>The user who updated the account pool.</p>
    pub fn updated_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.updated_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The user who updated the account pool.</p>
    pub fn set_updated_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.updated_by = input;
        self
    }
    /// <p>The user who updated the account pool.</p>
    pub fn get_updated_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.updated_by
    }
    /// Consumes the builder and constructs a [`AccountPoolSummary`](crate::types::AccountPoolSummary).
    pub fn build(self) -> crate::types::AccountPoolSummary {
        crate::types::AccountPoolSummary {
            domain_id: self.domain_id,
            id: self.id,
            name: self.name,
            resolution_strategy: self.resolution_strategy,
            domain_unit_id: self.domain_unit_id,
            created_by: self.created_by,
            updated_by: self.updated_by,
        }
    }
}
impl ::std::fmt::Debug for AccountPoolSummaryBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AccountPoolSummaryBuilder");
        formatter.field("domain_id", &self.domain_id);
        formatter.field("id", &self.id);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("resolution_strategy", &self.resolution_strategy);
        formatter.field("domain_unit_id", &self.domain_unit_id);
        formatter.field("created_by", &self.created_by);
        formatter.field("updated_by", &self.updated_by);
        formatter.finish()
    }
}
