// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The additional attributes of the asset of the data product.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DataProductListingItemAdditionalAttributes {
    /// <p>The metadata forms of the asset of the data product.</p>
    pub forms: ::std::option::Option<::std::string::String>,
    /// <p>List of rationales indicating why this item was matched by search.</p>
    pub match_rationale: ::std::option::Option<::std::vec::Vec<crate::types::MatchRationaleItem>>,
}
impl DataProductListingItemAdditionalAttributes {
    /// <p>The metadata forms of the asset of the data product.</p>
    pub fn forms(&self) -> ::std::option::Option<&str> {
        self.forms.as_deref()
    }
    /// <p>List of rationales indicating why this item was matched by search.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.match_rationale.is_none()`.
    pub fn match_rationale(&self) -> &[crate::types::MatchRationaleItem] {
        self.match_rationale.as_deref().unwrap_or_default()
    }
}
impl DataProductListingItemAdditionalAttributes {
    /// Creates a new builder-style object to manufacture [`DataProductListingItemAdditionalAttributes`](crate::types::DataProductListingItemAdditionalAttributes).
    pub fn builder() -> crate::types::builders::DataProductListingItemAdditionalAttributesBuilder {
        crate::types::builders::DataProductListingItemAdditionalAttributesBuilder::default()
    }
}

/// A builder for [`DataProductListingItemAdditionalAttributes`](crate::types::DataProductListingItemAdditionalAttributes).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DataProductListingItemAdditionalAttributesBuilder {
    pub(crate) forms: ::std::option::Option<::std::string::String>,
    pub(crate) match_rationale: ::std::option::Option<::std::vec::Vec<crate::types::MatchRationaleItem>>,
}
impl DataProductListingItemAdditionalAttributesBuilder {
    /// <p>The metadata forms of the asset of the data product.</p>
    pub fn forms(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.forms = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The metadata forms of the asset of the data product.</p>
    pub fn set_forms(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.forms = input;
        self
    }
    /// <p>The metadata forms of the asset of the data product.</p>
    pub fn get_forms(&self) -> &::std::option::Option<::std::string::String> {
        &self.forms
    }
    /// Appends an item to `match_rationale`.
    ///
    /// To override the contents of this collection use [`set_match_rationale`](Self::set_match_rationale).
    ///
    /// <p>List of rationales indicating why this item was matched by search.</p>
    pub fn match_rationale(mut self, input: crate::types::MatchRationaleItem) -> Self {
        let mut v = self.match_rationale.unwrap_or_default();
        v.push(input);
        self.match_rationale = ::std::option::Option::Some(v);
        self
    }
    /// <p>List of rationales indicating why this item was matched by search.</p>
    pub fn set_match_rationale(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::MatchRationaleItem>>) -> Self {
        self.match_rationale = input;
        self
    }
    /// <p>List of rationales indicating why this item was matched by search.</p>
    pub fn get_match_rationale(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MatchRationaleItem>> {
        &self.match_rationale
    }
    /// Consumes the builder and constructs a [`DataProductListingItemAdditionalAttributes`](crate::types::DataProductListingItemAdditionalAttributes).
    pub fn build(self) -> crate::types::DataProductListingItemAdditionalAttributes {
        crate::types::DataProductListingItemAdditionalAttributes {
            forms: self.forms,
            match_rationale: self.match_rationale,
        }
    }
}
