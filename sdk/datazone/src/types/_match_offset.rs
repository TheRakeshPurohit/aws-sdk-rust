// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The offset of a matched term.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MatchOffset {
    /// <p>The 0-indexed number indicating the start position (inclusive) of a matched term.</p>
    pub start_offset: ::std::option::Option<i32>,
    /// <p>The 0-indexed number indicating the end position (exclusive) of a matched term.</p>
    pub end_offset: ::std::option::Option<i32>,
}
impl MatchOffset {
    /// <p>The 0-indexed number indicating the start position (inclusive) of a matched term.</p>
    pub fn start_offset(&self) -> ::std::option::Option<i32> {
        self.start_offset
    }
    /// <p>The 0-indexed number indicating the end position (exclusive) of a matched term.</p>
    pub fn end_offset(&self) -> ::std::option::Option<i32> {
        self.end_offset
    }
}
impl MatchOffset {
    /// Creates a new builder-style object to manufacture [`MatchOffset`](crate::types::MatchOffset).
    pub fn builder() -> crate::types::builders::MatchOffsetBuilder {
        crate::types::builders::MatchOffsetBuilder::default()
    }
}

/// A builder for [`MatchOffset`](crate::types::MatchOffset).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct MatchOffsetBuilder {
    pub(crate) start_offset: ::std::option::Option<i32>,
    pub(crate) end_offset: ::std::option::Option<i32>,
}
impl MatchOffsetBuilder {
    /// <p>The 0-indexed number indicating the start position (inclusive) of a matched term.</p>
    pub fn start_offset(mut self, input: i32) -> Self {
        self.start_offset = ::std::option::Option::Some(input);
        self
    }
    /// <p>The 0-indexed number indicating the start position (inclusive) of a matched term.</p>
    pub fn set_start_offset(mut self, input: ::std::option::Option<i32>) -> Self {
        self.start_offset = input;
        self
    }
    /// <p>The 0-indexed number indicating the start position (inclusive) of a matched term.</p>
    pub fn get_start_offset(&self) -> &::std::option::Option<i32> {
        &self.start_offset
    }
    /// <p>The 0-indexed number indicating the end position (exclusive) of a matched term.</p>
    pub fn end_offset(mut self, input: i32) -> Self {
        self.end_offset = ::std::option::Option::Some(input);
        self
    }
    /// <p>The 0-indexed number indicating the end position (exclusive) of a matched term.</p>
    pub fn set_end_offset(mut self, input: ::std::option::Option<i32>) -> Self {
        self.end_offset = input;
        self
    }
    /// <p>The 0-indexed number indicating the end position (exclusive) of a matched term.</p>
    pub fn get_end_offset(&self) -> &::std::option::Option<i32> {
        &self.end_offset
    }
    /// Consumes the builder and constructs a [`MatchOffset`](crate::types::MatchOffset).
    pub fn build(self) -> crate::types::MatchOffset {
        crate::types::MatchOffset {
            start_offset: self.start_offset,
            end_offset: self.end_offset,
        }
    }
}
