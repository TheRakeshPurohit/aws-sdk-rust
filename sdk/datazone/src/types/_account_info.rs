// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The account information within an account pool.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct AccountInfo {
    /// <p>The account ID.</p>
    pub aws_account_id: ::std::string::String,
    /// <p>The regions supported for an account within an account pool.</p>
    pub supported_regions: ::std::vec::Vec<::std::string::String>,
    /// <p>The account name.</p>
    pub aws_account_name: ::std::option::Option<::std::string::String>,
}
impl AccountInfo {
    /// <p>The account ID.</p>
    pub fn aws_account_id(&self) -> &str {
        use std::ops::Deref;
        self.aws_account_id.deref()
    }
    /// <p>The regions supported for an account within an account pool.</p>
    pub fn supported_regions(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.supported_regions.deref()
    }
    /// <p>The account name.</p>
    pub fn aws_account_name(&self) -> ::std::option::Option<&str> {
        self.aws_account_name.as_deref()
    }
}
impl ::std::fmt::Debug for AccountInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AccountInfo");
        formatter.field("aws_account_id", &self.aws_account_id);
        formatter.field("supported_regions", &self.supported_regions);
        formatter.field("aws_account_name", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl AccountInfo {
    /// Creates a new builder-style object to manufacture [`AccountInfo`](crate::types::AccountInfo).
    pub fn builder() -> crate::types::builders::AccountInfoBuilder {
        crate::types::builders::AccountInfoBuilder::default()
    }
}

/// A builder for [`AccountInfo`](crate::types::AccountInfo).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct AccountInfoBuilder {
    pub(crate) aws_account_id: ::std::option::Option<::std::string::String>,
    pub(crate) supported_regions: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) aws_account_name: ::std::option::Option<::std::string::String>,
}
impl AccountInfoBuilder {
    /// <p>The account ID.</p>
    /// This field is required.
    pub fn aws_account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.aws_account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The account ID.</p>
    pub fn set_aws_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.aws_account_id = input;
        self
    }
    /// <p>The account ID.</p>
    pub fn get_aws_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.aws_account_id
    }
    /// Appends an item to `supported_regions`.
    ///
    /// To override the contents of this collection use [`set_supported_regions`](Self::set_supported_regions).
    ///
    /// <p>The regions supported for an account within an account pool.</p>
    pub fn supported_regions(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.supported_regions.unwrap_or_default();
        v.push(input.into());
        self.supported_regions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The regions supported for an account within an account pool.</p>
    pub fn set_supported_regions(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.supported_regions = input;
        self
    }
    /// <p>The regions supported for an account within an account pool.</p>
    pub fn get_supported_regions(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.supported_regions
    }
    /// <p>The account name.</p>
    pub fn aws_account_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.aws_account_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The account name.</p>
    pub fn set_aws_account_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.aws_account_name = input;
        self
    }
    /// <p>The account name.</p>
    pub fn get_aws_account_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.aws_account_name
    }
    /// Consumes the builder and constructs a [`AccountInfo`](crate::types::AccountInfo).
    /// This method will fail if any of the following fields are not set:
    /// - [`aws_account_id`](crate::types::builders::AccountInfoBuilder::aws_account_id)
    /// - [`supported_regions`](crate::types::builders::AccountInfoBuilder::supported_regions)
    pub fn build(self) -> ::std::result::Result<crate::types::AccountInfo, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AccountInfo {
            aws_account_id: self.aws_account_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "aws_account_id",
                    "aws_account_id was not specified but it is required when building AccountInfo",
                )
            })?,
            supported_regions: self.supported_regions.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "supported_regions",
                    "supported_regions was not specified but it is required when building AccountInfo",
                )
            })?,
            aws_account_name: self.aws_account_name,
        })
    }
}
impl ::std::fmt::Debug for AccountInfoBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AccountInfoBuilder");
        formatter.field("aws_account_id", &self.aws_account_id);
        formatter.field("supported_regions", &self.supported_regions);
        formatter.field("aws_account_name", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
