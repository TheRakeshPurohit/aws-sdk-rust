// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Additional attributes of an inventory asset.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AssetListingItemAdditionalAttributes {
    /// <p>The metadata forms that form additional attributes of the metadata asset.</p>
    pub forms: ::std::option::Option<::std::string::String>,
    /// <p>List of rationales indicating why this item was matched by search.</p>
    pub match_rationale: ::std::option::Option<::std::vec::Vec<crate::types::MatchRationaleItem>>,
    /// <p>The latest time series data points forms included in the additional attributes of an asset.</p>
    pub latest_time_series_data_point_forms: ::std::option::Option<::std::vec::Vec<crate::types::TimeSeriesDataPointSummaryFormOutput>>,
}
impl AssetListingItemAdditionalAttributes {
    /// <p>The metadata forms that form additional attributes of the metadata asset.</p>
    pub fn forms(&self) -> ::std::option::Option<&str> {
        self.forms.as_deref()
    }
    /// <p>List of rationales indicating why this item was matched by search.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.match_rationale.is_none()`.
    pub fn match_rationale(&self) -> &[crate::types::MatchRationaleItem] {
        self.match_rationale.as_deref().unwrap_or_default()
    }
    /// <p>The latest time series data points forms included in the additional attributes of an asset.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.latest_time_series_data_point_forms.is_none()`.
    pub fn latest_time_series_data_point_forms(&self) -> &[crate::types::TimeSeriesDataPointSummaryFormOutput] {
        self.latest_time_series_data_point_forms.as_deref().unwrap_or_default()
    }
}
impl AssetListingItemAdditionalAttributes {
    /// Creates a new builder-style object to manufacture [`AssetListingItemAdditionalAttributes`](crate::types::AssetListingItemAdditionalAttributes).
    pub fn builder() -> crate::types::builders::AssetListingItemAdditionalAttributesBuilder {
        crate::types::builders::AssetListingItemAdditionalAttributesBuilder::default()
    }
}

/// A builder for [`AssetListingItemAdditionalAttributes`](crate::types::AssetListingItemAdditionalAttributes).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AssetListingItemAdditionalAttributesBuilder {
    pub(crate) forms: ::std::option::Option<::std::string::String>,
    pub(crate) match_rationale: ::std::option::Option<::std::vec::Vec<crate::types::MatchRationaleItem>>,
    pub(crate) latest_time_series_data_point_forms: ::std::option::Option<::std::vec::Vec<crate::types::TimeSeriesDataPointSummaryFormOutput>>,
}
impl AssetListingItemAdditionalAttributesBuilder {
    /// <p>The metadata forms that form additional attributes of the metadata asset.</p>
    pub fn forms(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.forms = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The metadata forms that form additional attributes of the metadata asset.</p>
    pub fn set_forms(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.forms = input;
        self
    }
    /// <p>The metadata forms that form additional attributes of the metadata asset.</p>
    pub fn get_forms(&self) -> &::std::option::Option<::std::string::String> {
        &self.forms
    }
    /// Appends an item to `match_rationale`.
    ///
    /// To override the contents of this collection use [`set_match_rationale`](Self::set_match_rationale).
    ///
    /// <p>List of rationales indicating why this item was matched by search.</p>
    pub fn match_rationale(mut self, input: crate::types::MatchRationaleItem) -> Self {
        let mut v = self.match_rationale.unwrap_or_default();
        v.push(input);
        self.match_rationale = ::std::option::Option::Some(v);
        self
    }
    /// <p>List of rationales indicating why this item was matched by search.</p>
    pub fn set_match_rationale(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::MatchRationaleItem>>) -> Self {
        self.match_rationale = input;
        self
    }
    /// <p>List of rationales indicating why this item was matched by search.</p>
    pub fn get_match_rationale(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MatchRationaleItem>> {
        &self.match_rationale
    }
    /// Appends an item to `latest_time_series_data_point_forms`.
    ///
    /// To override the contents of this collection use [`set_latest_time_series_data_point_forms`](Self::set_latest_time_series_data_point_forms).
    ///
    /// <p>The latest time series data points forms included in the additional attributes of an asset.</p>
    pub fn latest_time_series_data_point_forms(mut self, input: crate::types::TimeSeriesDataPointSummaryFormOutput) -> Self {
        let mut v = self.latest_time_series_data_point_forms.unwrap_or_default();
        v.push(input);
        self.latest_time_series_data_point_forms = ::std::option::Option::Some(v);
        self
    }
    /// <p>The latest time series data points forms included in the additional attributes of an asset.</p>
    pub fn set_latest_time_series_data_point_forms(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::TimeSeriesDataPointSummaryFormOutput>>,
    ) -> Self {
        self.latest_time_series_data_point_forms = input;
        self
    }
    /// <p>The latest time series data points forms included in the additional attributes of an asset.</p>
    pub fn get_latest_time_series_data_point_forms(
        &self,
    ) -> &::std::option::Option<::std::vec::Vec<crate::types::TimeSeriesDataPointSummaryFormOutput>> {
        &self.latest_time_series_data_point_forms
    }
    /// Consumes the builder and constructs a [`AssetListingItemAdditionalAttributes`](crate::types::AssetListingItemAdditionalAttributes).
    pub fn build(self) -> crate::types::AssetListingItemAdditionalAttributes {
        crate::types::AssetListingItemAdditionalAttributes {
            forms: self.forms,
            match_rationale: self.match_rationale,
            latest_time_series_data_point_forms: self.latest_time_series_data_point_forms,
        }
    }
}
