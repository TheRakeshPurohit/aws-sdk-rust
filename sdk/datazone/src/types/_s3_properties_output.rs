// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The Amazon S3 properties of a connection.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct S3PropertiesOutput {
    /// <p>The Amazon S3 URI that's part of the Amazon S3 properties of a connection.</p>
    pub s3_uri: ::std::string::String,
    /// <p>The Amazon S3 Access Grant location ID that's part of the Amazon S3 properties of a connection.</p>
    pub s3_access_grant_location_id: ::std::option::Option<::std::string::String>,
    /// <p>The status of the Amazon S3 connection.</p>
    pub status: ::std::option::Option<crate::types::ConnectionStatus>,
    /// <p>The error message that gets displayed.</p>
    pub error_message: ::std::option::Option<::std::string::String>,
}
impl S3PropertiesOutput {
    /// <p>The Amazon S3 URI that's part of the Amazon S3 properties of a connection.</p>
    pub fn s3_uri(&self) -> &str {
        use std::ops::Deref;
        self.s3_uri.deref()
    }
    /// <p>The Amazon S3 Access Grant location ID that's part of the Amazon S3 properties of a connection.</p>
    pub fn s3_access_grant_location_id(&self) -> ::std::option::Option<&str> {
        self.s3_access_grant_location_id.as_deref()
    }
    /// <p>The status of the Amazon S3 connection.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::ConnectionStatus> {
        self.status.as_ref()
    }
    /// <p>The error message that gets displayed.</p>
    pub fn error_message(&self) -> ::std::option::Option<&str> {
        self.error_message.as_deref()
    }
}
impl S3PropertiesOutput {
    /// Creates a new builder-style object to manufacture [`S3PropertiesOutput`](crate::types::S3PropertiesOutput).
    pub fn builder() -> crate::types::builders::S3PropertiesOutputBuilder {
        crate::types::builders::S3PropertiesOutputBuilder::default()
    }
}

/// A builder for [`S3PropertiesOutput`](crate::types::S3PropertiesOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct S3PropertiesOutputBuilder {
    pub(crate) s3_uri: ::std::option::Option<::std::string::String>,
    pub(crate) s3_access_grant_location_id: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::ConnectionStatus>,
    pub(crate) error_message: ::std::option::Option<::std::string::String>,
}
impl S3PropertiesOutputBuilder {
    /// <p>The Amazon S3 URI that's part of the Amazon S3 properties of a connection.</p>
    /// This field is required.
    pub fn s3_uri(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.s3_uri = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon S3 URI that's part of the Amazon S3 properties of a connection.</p>
    pub fn set_s3_uri(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.s3_uri = input;
        self
    }
    /// <p>The Amazon S3 URI that's part of the Amazon S3 properties of a connection.</p>
    pub fn get_s3_uri(&self) -> &::std::option::Option<::std::string::String> {
        &self.s3_uri
    }
    /// <p>The Amazon S3 Access Grant location ID that's part of the Amazon S3 properties of a connection.</p>
    pub fn s3_access_grant_location_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.s3_access_grant_location_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon S3 Access Grant location ID that's part of the Amazon S3 properties of a connection.</p>
    pub fn set_s3_access_grant_location_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.s3_access_grant_location_id = input;
        self
    }
    /// <p>The Amazon S3 Access Grant location ID that's part of the Amazon S3 properties of a connection.</p>
    pub fn get_s3_access_grant_location_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.s3_access_grant_location_id
    }
    /// <p>The status of the Amazon S3 connection.</p>
    pub fn status(mut self, input: crate::types::ConnectionStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the Amazon S3 connection.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ConnectionStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the Amazon S3 connection.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ConnectionStatus> {
        &self.status
    }
    /// <p>The error message that gets displayed.</p>
    pub fn error_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.error_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The error message that gets displayed.</p>
    pub fn set_error_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.error_message = input;
        self
    }
    /// <p>The error message that gets displayed.</p>
    pub fn get_error_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.error_message
    }
    /// Consumes the builder and constructs a [`S3PropertiesOutput`](crate::types::S3PropertiesOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`s3_uri`](crate::types::builders::S3PropertiesOutputBuilder::s3_uri)
    pub fn build(self) -> ::std::result::Result<crate::types::S3PropertiesOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::S3PropertiesOutput {
            s3_uri: self.s3_uri.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "s3_uri",
                    "s3_uri was not specified but it is required when building S3PropertiesOutput",
                )
            })?,
            s3_access_grant_location_id: self.s3_access_grant_location_id,
            status: self.status,
            error_message: self.error_message,
        })
    }
}
