// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The source of accounts for the account pool. In the current release, it's either a static list of accounts provided by the customer or a custom Amazon Web Services Lambda handler.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum AccountSource {
    /// <p>The static list of accounts within an account pool.</p>
    Accounts(::std::vec::Vec<crate::types::AccountInfo>),
    /// <p>The custom Amazon Web Services Lambda handler within an account pool.</p>
    CustomAccountPoolHandler(crate::types::CustomAccountPoolHandler),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl AccountSource {
    /// Tries to convert the enum instance into [`Accounts`](crate::types::AccountSource::Accounts), extracting the inner [`Vec`](::std::vec::Vec).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_accounts(&self) -> ::std::result::Result<&::std::vec::Vec<crate::types::AccountInfo>, &Self> {
        if let AccountSource::Accounts(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Accounts`](crate::types::AccountSource::Accounts).
    pub fn is_accounts(&self) -> bool {
        self.as_accounts().is_ok()
    }
    /// Tries to convert the enum instance into [`CustomAccountPoolHandler`](crate::types::AccountSource::CustomAccountPoolHandler), extracting the inner [`CustomAccountPoolHandler`](crate::types::CustomAccountPoolHandler).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_custom_account_pool_handler(&self) -> ::std::result::Result<&crate::types::CustomAccountPoolHandler, &Self> {
        if let AccountSource::CustomAccountPoolHandler(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`CustomAccountPoolHandler`](crate::types::AccountSource::CustomAccountPoolHandler).
    pub fn is_custom_account_pool_handler(&self) -> bool {
        self.as_custom_account_pool_handler().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
