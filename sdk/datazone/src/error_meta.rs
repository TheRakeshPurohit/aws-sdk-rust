// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum Error {
    /// <p>You do not have sufficient access to perform this action.</p>
    AccessDeniedException(crate::types::error::AccessDeniedException),
    /// <p>There is a conflict while performing this action.</p>
    ConflictException(crate::types::error::ConflictException),
    /// <p>The request has failed because of an unknown error, exception or failure.</p>
    InternalServerException(crate::types::error::InternalServerException),
    /// <p>The specified resource cannot be found.</p>
    ResourceNotFoundException(crate::types::error::ResourceNotFoundException),
    /// <p>The request has exceeded the specified service quota.</p>
    ServiceQuotaExceededException(crate::types::error::ServiceQuotaExceededException),
    /// <p>The request was denied due to request throttling.</p>
    ThrottlingException(crate::types::error::ThrottlingException),
    /// <p>You do not have permission to perform this action.</p>
    UnauthorizedException(crate::types::error::UnauthorizedException),
    /// <p>The input fails to satisfy the constraints specified by the Amazon Web Services service.</p>
    ValidationException(crate::types::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    #[deprecated(note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
    variable wildcard pattern and check `.code()`:
     \
    &nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
     \
    See [`ProvideErrorMetadata`](#impl-ProvideErrorMetadata-for-Error) for what information is available for the error.")]
    Unhandled(crate::error::sealed_unhandled::Unhandled),
}
impl ::std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::UnauthorizedException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(_) => {
                if let ::std::option::Option::Some(code) = ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self) {
                    write!(f, "unhandled error ({code})")
                } else {
                    f.write_str("unhandled error")
                }
            }
        }
    }
}
impl From<::aws_smithy_types::error::operation::BuildError> for Error {
    fn from(value: ::aws_smithy_types::error::operation::BuildError) -> Self {
        Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
            source: value.into(),
            meta: ::std::default::Default::default(),
        })
    }
}
impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for Error {
    fn meta(&self) -> &::aws_smithy_types::error::metadata::ErrorMetadata {
        match self {
            Self::AccessDeniedException(inner) => inner.meta(),
            Self::ConflictException(inner) => inner.meta(),
            Self::InternalServerException(inner) => inner.meta(),
            Self::ResourceNotFoundException(inner) => inner.meta(),
            Self::ServiceQuotaExceededException(inner) => inner.meta(),
            Self::ThrottlingException(inner) => inner.meta(),
            Self::UnauthorizedException(inner) => inner.meta(),
            Self::ValidationException(inner) => inner.meta(),
            Self::Unhandled(inner) => &inner.meta,
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::accept_predictions::AcceptPredictionsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::accept_predictions::AcceptPredictionsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::accept_predictions::AcceptPredictionsError> for Error {
    fn from(err: crate::operation::accept_predictions::AcceptPredictionsError) -> Self {
        match err {
            crate::operation::accept_predictions::AcceptPredictionsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::accept_predictions::AcceptPredictionsError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::accept_predictions::AcceptPredictionsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::accept_predictions::AcceptPredictionsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::accept_predictions::AcceptPredictionsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::accept_predictions::AcceptPredictionsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::accept_predictions::AcceptPredictionsError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::accept_predictions::AcceptPredictionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::accept_subscription_request::AcceptSubscriptionRequestError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::accept_subscription_request::AcceptSubscriptionRequestError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::accept_subscription_request::AcceptSubscriptionRequestError> for Error {
    fn from(err: crate::operation::accept_subscription_request::AcceptSubscriptionRequestError) -> Self {
        match err {
            crate::operation::accept_subscription_request::AcceptSubscriptionRequestError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::accept_subscription_request::AcceptSubscriptionRequestError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::accept_subscription_request::AcceptSubscriptionRequestError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::accept_subscription_request::AcceptSubscriptionRequestError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::accept_subscription_request::AcceptSubscriptionRequestError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::accept_subscription_request::AcceptSubscriptionRequestError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::accept_subscription_request::AcceptSubscriptionRequestError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::accept_subscription_request::AcceptSubscriptionRequestError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::add_entity_owner::AddEntityOwnerError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::add_entity_owner::AddEntityOwnerError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::add_entity_owner::AddEntityOwnerError> for Error {
    fn from(err: crate::operation::add_entity_owner::AddEntityOwnerError) -> Self {
        match err {
            crate::operation::add_entity_owner::AddEntityOwnerError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::add_entity_owner::AddEntityOwnerError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::add_entity_owner::AddEntityOwnerError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::add_entity_owner::AddEntityOwnerError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::add_entity_owner::AddEntityOwnerError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::add_entity_owner::AddEntityOwnerError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::add_entity_owner::AddEntityOwnerError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::add_entity_owner::AddEntityOwnerError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::add_entity_owner::AddEntityOwnerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::add_policy_grant::AddPolicyGrantError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::add_policy_grant::AddPolicyGrantError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::add_policy_grant::AddPolicyGrantError> for Error {
    fn from(err: crate::operation::add_policy_grant::AddPolicyGrantError) -> Self {
        match err {
            crate::operation::add_policy_grant::AddPolicyGrantError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::add_policy_grant::AddPolicyGrantError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::add_policy_grant::AddPolicyGrantError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::add_policy_grant::AddPolicyGrantError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::add_policy_grant::AddPolicyGrantError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::add_policy_grant::AddPolicyGrantError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::add_policy_grant::AddPolicyGrantError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::add_policy_grant::AddPolicyGrantError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::associate_environment_role::AssociateEnvironmentRoleError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::associate_environment_role::AssociateEnvironmentRoleError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::associate_environment_role::AssociateEnvironmentRoleError> for Error {
    fn from(err: crate::operation::associate_environment_role::AssociateEnvironmentRoleError) -> Self {
        match err {
            crate::operation::associate_environment_role::AssociateEnvironmentRoleError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::associate_environment_role::AssociateEnvironmentRoleError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::associate_environment_role::AssociateEnvironmentRoleError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::associate_environment_role::AssociateEnvironmentRoleError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::associate_environment_role::AssociateEnvironmentRoleError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::associate_environment_role::AssociateEnvironmentRoleError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::associate_environment_role::AssociateEnvironmentRoleError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::associate_environment_role::AssociateEnvironmentRoleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::associate_governed_terms::AssociateGovernedTermsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::associate_governed_terms::AssociateGovernedTermsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::associate_governed_terms::AssociateGovernedTermsError> for Error {
    fn from(err: crate::operation::associate_governed_terms::AssociateGovernedTermsError) -> Self {
        match err {
            crate::operation::associate_governed_terms::AssociateGovernedTermsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::associate_governed_terms::AssociateGovernedTermsError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::associate_governed_terms::AssociateGovernedTermsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::associate_governed_terms::AssociateGovernedTermsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::associate_governed_terms::AssociateGovernedTermsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::associate_governed_terms::AssociateGovernedTermsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::associate_governed_terms::AssociateGovernedTermsError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::associate_governed_terms::AssociateGovernedTermsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::cancel_metadata_generation_run::CancelMetadataGenerationRunError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::cancel_metadata_generation_run::CancelMetadataGenerationRunError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::cancel_metadata_generation_run::CancelMetadataGenerationRunError> for Error {
    fn from(err: crate::operation::cancel_metadata_generation_run::CancelMetadataGenerationRunError) -> Self {
        match err {
            crate::operation::cancel_metadata_generation_run::CancelMetadataGenerationRunError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::cancel_metadata_generation_run::CancelMetadataGenerationRunError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::cancel_metadata_generation_run::CancelMetadataGenerationRunError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::cancel_metadata_generation_run::CancelMetadataGenerationRunError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::cancel_metadata_generation_run::CancelMetadataGenerationRunError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::cancel_metadata_generation_run::CancelMetadataGenerationRunError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::cancel_metadata_generation_run::CancelMetadataGenerationRunError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::cancel_metadata_generation_run::CancelMetadataGenerationRunError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::cancel_subscription::CancelSubscriptionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::cancel_subscription::CancelSubscriptionError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::cancel_subscription::CancelSubscriptionError> for Error {
    fn from(err: crate::operation::cancel_subscription::CancelSubscriptionError) -> Self {
        match err {
            crate::operation::cancel_subscription::CancelSubscriptionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::cancel_subscription::CancelSubscriptionError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::cancel_subscription::CancelSubscriptionError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::cancel_subscription::CancelSubscriptionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::cancel_subscription::CancelSubscriptionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::cancel_subscription::CancelSubscriptionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::cancel_subscription::CancelSubscriptionError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::cancel_subscription::CancelSubscriptionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_account_pool::CreateAccountPoolError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_account_pool::CreateAccountPoolError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_account_pool::CreateAccountPoolError> for Error {
    fn from(err: crate::operation::create_account_pool::CreateAccountPoolError) -> Self {
        match err {
            crate::operation::create_account_pool::CreateAccountPoolError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_account_pool::CreateAccountPoolError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_account_pool::CreateAccountPoolError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_account_pool::CreateAccountPoolError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_account_pool::CreateAccountPoolError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_account_pool::CreateAccountPoolError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_account_pool::CreateAccountPoolError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_account_pool::CreateAccountPoolError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::create_account_pool::CreateAccountPoolError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_asset::CreateAssetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_asset::CreateAssetError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_asset::CreateAssetError> for Error {
    fn from(err: crate::operation::create_asset::CreateAssetError) -> Self {
        match err {
            crate::operation::create_asset::CreateAssetError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_asset::CreateAssetError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_asset::CreateAssetError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_asset::CreateAssetError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_asset::CreateAssetError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_asset::CreateAssetError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_asset::CreateAssetError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_asset::CreateAssetError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::create_asset::CreateAssetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_asset_filter::CreateAssetFilterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_asset_filter::CreateAssetFilterError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_asset_filter::CreateAssetFilterError> for Error {
    fn from(err: crate::operation::create_asset_filter::CreateAssetFilterError) -> Self {
        match err {
            crate::operation::create_asset_filter::CreateAssetFilterError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_asset_filter::CreateAssetFilterError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_asset_filter::CreateAssetFilterError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_asset_filter::CreateAssetFilterError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_asset_filter::CreateAssetFilterError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_asset_filter::CreateAssetFilterError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_asset_filter::CreateAssetFilterError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_asset_filter::CreateAssetFilterError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::create_asset_filter::CreateAssetFilterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_asset_revision::CreateAssetRevisionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_asset_revision::CreateAssetRevisionError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_asset_revision::CreateAssetRevisionError> for Error {
    fn from(err: crate::operation::create_asset_revision::CreateAssetRevisionError) -> Self {
        match err {
            crate::operation::create_asset_revision::CreateAssetRevisionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_asset_revision::CreateAssetRevisionError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_asset_revision::CreateAssetRevisionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_asset_revision::CreateAssetRevisionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_asset_revision::CreateAssetRevisionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_asset_revision::CreateAssetRevisionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_asset_revision::CreateAssetRevisionError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::create_asset_revision::CreateAssetRevisionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_asset_type::CreateAssetTypeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_asset_type::CreateAssetTypeError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_asset_type::CreateAssetTypeError> for Error {
    fn from(err: crate::operation::create_asset_type::CreateAssetTypeError) -> Self {
        match err {
            crate::operation::create_asset_type::CreateAssetTypeError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_asset_type::CreateAssetTypeError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_asset_type::CreateAssetTypeError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_asset_type::CreateAssetTypeError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_asset_type::CreateAssetTypeError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_asset_type::CreateAssetTypeError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_asset_type::CreateAssetTypeError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::create_asset_type::CreateAssetTypeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_connection::CreateConnectionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_connection::CreateConnectionError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_connection::CreateConnectionError> for Error {
    fn from(err: crate::operation::create_connection::CreateConnectionError) -> Self {
        match err {
            crate::operation::create_connection::CreateConnectionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_connection::CreateConnectionError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_connection::CreateConnectionError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_connection::CreateConnectionError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_connection::CreateConnectionError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_connection::CreateConnectionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_connection::CreateConnectionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_connection::CreateConnectionError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::create_connection::CreateConnectionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_data_product::CreateDataProductError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_data_product::CreateDataProductError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_data_product::CreateDataProductError> for Error {
    fn from(err: crate::operation::create_data_product::CreateDataProductError) -> Self {
        match err {
            crate::operation::create_data_product::CreateDataProductError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_data_product::CreateDataProductError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_data_product::CreateDataProductError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_data_product::CreateDataProductError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_data_product::CreateDataProductError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_data_product::CreateDataProductError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_data_product::CreateDataProductError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_data_product::CreateDataProductError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::create_data_product::CreateDataProductError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_data_product_revision::CreateDataProductRevisionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_data_product_revision::CreateDataProductRevisionError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_data_product_revision::CreateDataProductRevisionError> for Error {
    fn from(err: crate::operation::create_data_product_revision::CreateDataProductRevisionError) -> Self {
        match err {
            crate::operation::create_data_product_revision::CreateDataProductRevisionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_data_product_revision::CreateDataProductRevisionError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::create_data_product_revision::CreateDataProductRevisionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_data_product_revision::CreateDataProductRevisionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_data_product_revision::CreateDataProductRevisionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::create_data_product_revision::CreateDataProductRevisionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_data_product_revision::CreateDataProductRevisionError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::create_data_product_revision::CreateDataProductRevisionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_data_source::CreateDataSourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_data_source::CreateDataSourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_data_source::CreateDataSourceError> for Error {
    fn from(err: crate::operation::create_data_source::CreateDataSourceError) -> Self {
        match err {
            crate::operation::create_data_source::CreateDataSourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_data_source::CreateDataSourceError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_data_source::CreateDataSourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_data_source::CreateDataSourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_data_source::CreateDataSourceError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_data_source::CreateDataSourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_data_source::CreateDataSourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_data_source::CreateDataSourceError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::create_data_source::CreateDataSourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_domain::CreateDomainError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_domain::CreateDomainError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_domain::CreateDomainError> for Error {
    fn from(err: crate::operation::create_domain::CreateDomainError) -> Self {
        match err {
            crate::operation::create_domain::CreateDomainError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_domain::CreateDomainError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_domain::CreateDomainError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_domain::CreateDomainError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_domain::CreateDomainError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_domain::CreateDomainError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_domain::CreateDomainError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_domain::CreateDomainError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::create_domain::CreateDomainError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_domain_unit::CreateDomainUnitError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_domain_unit::CreateDomainUnitError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_domain_unit::CreateDomainUnitError> for Error {
    fn from(err: crate::operation::create_domain_unit::CreateDomainUnitError) -> Self {
        match err {
            crate::operation::create_domain_unit::CreateDomainUnitError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_domain_unit::CreateDomainUnitError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_domain_unit::CreateDomainUnitError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_domain_unit::CreateDomainUnitError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_domain_unit::CreateDomainUnitError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_domain_unit::CreateDomainUnitError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_domain_unit::CreateDomainUnitError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::create_domain_unit::CreateDomainUnitError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_environment::CreateEnvironmentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_environment::CreateEnvironmentError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_environment::CreateEnvironmentError> for Error {
    fn from(err: crate::operation::create_environment::CreateEnvironmentError) -> Self {
        match err {
            crate::operation::create_environment::CreateEnvironmentError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_environment::CreateEnvironmentError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_environment::CreateEnvironmentError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_environment::CreateEnvironmentError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_environment::CreateEnvironmentError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_environment::CreateEnvironmentError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_environment::CreateEnvironmentError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::create_environment::CreateEnvironmentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_environment_action::CreateEnvironmentActionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_environment_action::CreateEnvironmentActionError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_environment_action::CreateEnvironmentActionError> for Error {
    fn from(err: crate::operation::create_environment_action::CreateEnvironmentActionError) -> Self {
        match err {
            crate::operation::create_environment_action::CreateEnvironmentActionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_environment_action::CreateEnvironmentActionError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_environment_action::CreateEnvironmentActionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_environment_action::CreateEnvironmentActionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_environment_action::CreateEnvironmentActionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::create_environment_action::CreateEnvironmentActionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_environment_action::CreateEnvironmentActionError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::create_environment_action::CreateEnvironmentActionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_environment_profile::CreateEnvironmentProfileError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_environment_profile::CreateEnvironmentProfileError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_environment_profile::CreateEnvironmentProfileError> for Error {
    fn from(err: crate::operation::create_environment_profile::CreateEnvironmentProfileError) -> Self {
        match err {
            crate::operation::create_environment_profile::CreateEnvironmentProfileError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_environment_profile::CreateEnvironmentProfileError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_environment_profile::CreateEnvironmentProfileError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_environment_profile::CreateEnvironmentProfileError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_environment_profile::CreateEnvironmentProfileError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_environment_profile::CreateEnvironmentProfileError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::create_environment_profile::CreateEnvironmentProfileError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_environment_profile::CreateEnvironmentProfileError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::create_environment_profile::CreateEnvironmentProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_form_type::CreateFormTypeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_form_type::CreateFormTypeError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_form_type::CreateFormTypeError> for Error {
    fn from(err: crate::operation::create_form_type::CreateFormTypeError) -> Self {
        match err {
            crate::operation::create_form_type::CreateFormTypeError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_form_type::CreateFormTypeError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_form_type::CreateFormTypeError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_form_type::CreateFormTypeError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_form_type::CreateFormTypeError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_form_type::CreateFormTypeError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_form_type::CreateFormTypeError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::create_form_type::CreateFormTypeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_glossary::CreateGlossaryError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_glossary::CreateGlossaryError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_glossary::CreateGlossaryError> for Error {
    fn from(err: crate::operation::create_glossary::CreateGlossaryError) -> Self {
        match err {
            crate::operation::create_glossary::CreateGlossaryError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_glossary::CreateGlossaryError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_glossary::CreateGlossaryError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_glossary::CreateGlossaryError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_glossary::CreateGlossaryError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_glossary::CreateGlossaryError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_glossary::CreateGlossaryError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::create_glossary::CreateGlossaryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_glossary_term::CreateGlossaryTermError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_glossary_term::CreateGlossaryTermError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_glossary_term::CreateGlossaryTermError> for Error {
    fn from(err: crate::operation::create_glossary_term::CreateGlossaryTermError) -> Self {
        match err {
            crate::operation::create_glossary_term::CreateGlossaryTermError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_glossary_term::CreateGlossaryTermError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_glossary_term::CreateGlossaryTermError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_glossary_term::CreateGlossaryTermError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_glossary_term::CreateGlossaryTermError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_glossary_term::CreateGlossaryTermError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_glossary_term::CreateGlossaryTermError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_glossary_term::CreateGlossaryTermError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::create_glossary_term::CreateGlossaryTermError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_group_profile::CreateGroupProfileError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_group_profile::CreateGroupProfileError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_group_profile::CreateGroupProfileError> for Error {
    fn from(err: crate::operation::create_group_profile::CreateGroupProfileError) -> Self {
        match err {
            crate::operation::create_group_profile::CreateGroupProfileError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_group_profile::CreateGroupProfileError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_group_profile::CreateGroupProfileError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_group_profile::CreateGroupProfileError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_group_profile::CreateGroupProfileError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_group_profile::CreateGroupProfileError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::create_group_profile::CreateGroupProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_listing_change_set::CreateListingChangeSetError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_listing_change_set::CreateListingChangeSetError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_listing_change_set::CreateListingChangeSetError> for Error {
    fn from(err: crate::operation::create_listing_change_set::CreateListingChangeSetError) -> Self {
        match err {
            crate::operation::create_listing_change_set::CreateListingChangeSetError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_listing_change_set::CreateListingChangeSetError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_listing_change_set::CreateListingChangeSetError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_listing_change_set::CreateListingChangeSetError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_listing_change_set::CreateListingChangeSetError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_listing_change_set::CreateListingChangeSetError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_listing_change_set::CreateListingChangeSetError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_listing_change_set::CreateListingChangeSetError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::create_listing_change_set::CreateListingChangeSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_project::CreateProjectError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_project::CreateProjectError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_project::CreateProjectError> for Error {
    fn from(err: crate::operation::create_project::CreateProjectError) -> Self {
        match err {
            crate::operation::create_project::CreateProjectError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_project::CreateProjectError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_project::CreateProjectError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_project::CreateProjectError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_project::CreateProjectError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_project::CreateProjectError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_project::CreateProjectError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_project::CreateProjectError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::create_project::CreateProjectError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_project_membership::CreateProjectMembershipError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_project_membership::CreateProjectMembershipError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_project_membership::CreateProjectMembershipError> for Error {
    fn from(err: crate::operation::create_project_membership::CreateProjectMembershipError) -> Self {
        match err {
            crate::operation::create_project_membership::CreateProjectMembershipError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_project_membership::CreateProjectMembershipError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_project_membership::CreateProjectMembershipError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_project_membership::CreateProjectMembershipError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_project_membership::CreateProjectMembershipError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::create_project_membership::CreateProjectMembershipError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::create_project_membership::CreateProjectMembershipError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_project_profile::CreateProjectProfileError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_project_profile::CreateProjectProfileError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_project_profile::CreateProjectProfileError> for Error {
    fn from(err: crate::operation::create_project_profile::CreateProjectProfileError) -> Self {
        match err {
            crate::operation::create_project_profile::CreateProjectProfileError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_project_profile::CreateProjectProfileError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_project_profile::CreateProjectProfileError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_project_profile::CreateProjectProfileError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_project_profile::CreateProjectProfileError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_project_profile::CreateProjectProfileError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_project_profile::CreateProjectProfileError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_project_profile::CreateProjectProfileError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::create_project_profile::CreateProjectProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_rule::CreateRuleError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_rule::CreateRuleError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_rule::CreateRuleError> for Error {
    fn from(err: crate::operation::create_rule::CreateRuleError) -> Self {
        match err {
            crate::operation::create_rule::CreateRuleError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_rule::CreateRuleError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_rule::CreateRuleError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_rule::CreateRuleError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_rule::CreateRuleError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_rule::CreateRuleError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_rule::CreateRuleError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_rule::CreateRuleError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::create_rule::CreateRuleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_subscription_grant::CreateSubscriptionGrantError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_subscription_grant::CreateSubscriptionGrantError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_subscription_grant::CreateSubscriptionGrantError> for Error {
    fn from(err: crate::operation::create_subscription_grant::CreateSubscriptionGrantError) -> Self {
        match err {
            crate::operation::create_subscription_grant::CreateSubscriptionGrantError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_subscription_grant::CreateSubscriptionGrantError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_subscription_grant::CreateSubscriptionGrantError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_subscription_grant::CreateSubscriptionGrantError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_subscription_grant::CreateSubscriptionGrantError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::create_subscription_grant::CreateSubscriptionGrantError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_subscription_grant::CreateSubscriptionGrantError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::create_subscription_grant::CreateSubscriptionGrantError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_subscription_request::CreateSubscriptionRequestError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_subscription_request::CreateSubscriptionRequestError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_subscription_request::CreateSubscriptionRequestError> for Error {
    fn from(err: crate::operation::create_subscription_request::CreateSubscriptionRequestError) -> Self {
        match err {
            crate::operation::create_subscription_request::CreateSubscriptionRequestError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_subscription_request::CreateSubscriptionRequestError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::create_subscription_request::CreateSubscriptionRequestError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_subscription_request::CreateSubscriptionRequestError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_subscription_request::CreateSubscriptionRequestError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::create_subscription_request::CreateSubscriptionRequestError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_subscription_request::CreateSubscriptionRequestError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::create_subscription_request::CreateSubscriptionRequestError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_subscription_target::CreateSubscriptionTargetError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_subscription_target::CreateSubscriptionTargetError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_subscription_target::CreateSubscriptionTargetError> for Error {
    fn from(err: crate::operation::create_subscription_target::CreateSubscriptionTargetError) -> Self {
        match err {
            crate::operation::create_subscription_target::CreateSubscriptionTargetError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_subscription_target::CreateSubscriptionTargetError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_subscription_target::CreateSubscriptionTargetError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_subscription_target::CreateSubscriptionTargetError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_subscription_target::CreateSubscriptionTargetError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::create_subscription_target::CreateSubscriptionTargetError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_subscription_target::CreateSubscriptionTargetError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::create_subscription_target::CreateSubscriptionTargetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_user_profile::CreateUserProfileError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_user_profile::CreateUserProfileError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_user_profile::CreateUserProfileError> for Error {
    fn from(err: crate::operation::create_user_profile::CreateUserProfileError) -> Self {
        match err {
            crate::operation::create_user_profile::CreateUserProfileError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_user_profile::CreateUserProfileError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_user_profile::CreateUserProfileError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_user_profile::CreateUserProfileError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_user_profile::CreateUserProfileError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_user_profile::CreateUserProfileError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::create_user_profile::CreateUserProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_account_pool::DeleteAccountPoolError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_account_pool::DeleteAccountPoolError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_account_pool::DeleteAccountPoolError> for Error {
    fn from(err: crate::operation::delete_account_pool::DeleteAccountPoolError) -> Self {
        match err {
            crate::operation::delete_account_pool::DeleteAccountPoolError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_account_pool::DeleteAccountPoolError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_account_pool::DeleteAccountPoolError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_account_pool::DeleteAccountPoolError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_account_pool::DeleteAccountPoolError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_account_pool::DeleteAccountPoolError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::delete_account_pool::DeleteAccountPoolError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_asset::DeleteAssetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_asset::DeleteAssetError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_asset::DeleteAssetError> for Error {
    fn from(err: crate::operation::delete_asset::DeleteAssetError) -> Self {
        match err {
            crate::operation::delete_asset::DeleteAssetError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_asset::DeleteAssetError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_asset::DeleteAssetError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_asset::DeleteAssetError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_asset::DeleteAssetError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_asset::DeleteAssetError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_asset::DeleteAssetError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::delete_asset::DeleteAssetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_asset_filter::DeleteAssetFilterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_asset_filter::DeleteAssetFilterError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_asset_filter::DeleteAssetFilterError> for Error {
    fn from(err: crate::operation::delete_asset_filter::DeleteAssetFilterError) -> Self {
        match err {
            crate::operation::delete_asset_filter::DeleteAssetFilterError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_asset_filter::DeleteAssetFilterError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_asset_filter::DeleteAssetFilterError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_asset_filter::DeleteAssetFilterError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_asset_filter::DeleteAssetFilterError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_asset_filter::DeleteAssetFilterError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_asset_filter::DeleteAssetFilterError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::delete_asset_filter::DeleteAssetFilterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_asset_type::DeleteAssetTypeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_asset_type::DeleteAssetTypeError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_asset_type::DeleteAssetTypeError> for Error {
    fn from(err: crate::operation::delete_asset_type::DeleteAssetTypeError) -> Self {
        match err {
            crate::operation::delete_asset_type::DeleteAssetTypeError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_asset_type::DeleteAssetTypeError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_asset_type::DeleteAssetTypeError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_asset_type::DeleteAssetTypeError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_asset_type::DeleteAssetTypeError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_asset_type::DeleteAssetTypeError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_asset_type::DeleteAssetTypeError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::delete_asset_type::DeleteAssetTypeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_connection::DeleteConnectionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_connection::DeleteConnectionError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_connection::DeleteConnectionError> for Error {
    fn from(err: crate::operation::delete_connection::DeleteConnectionError) -> Self {
        match err {
            crate::operation::delete_connection::DeleteConnectionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_connection::DeleteConnectionError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_connection::DeleteConnectionError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_connection::DeleteConnectionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_connection::DeleteConnectionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_connection::DeleteConnectionError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::delete_connection::DeleteConnectionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_data_product::DeleteDataProductError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_data_product::DeleteDataProductError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_data_product::DeleteDataProductError> for Error {
    fn from(err: crate::operation::delete_data_product::DeleteDataProductError) -> Self {
        match err {
            crate::operation::delete_data_product::DeleteDataProductError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_data_product::DeleteDataProductError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_data_product::DeleteDataProductError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_data_product::DeleteDataProductError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_data_product::DeleteDataProductError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_data_product::DeleteDataProductError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_data_product::DeleteDataProductError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::delete_data_product::DeleteDataProductError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_data_source::DeleteDataSourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_data_source::DeleteDataSourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_data_source::DeleteDataSourceError> for Error {
    fn from(err: crate::operation::delete_data_source::DeleteDataSourceError) -> Self {
        match err {
            crate::operation::delete_data_source::DeleteDataSourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_data_source::DeleteDataSourceError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_data_source::DeleteDataSourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_data_source::DeleteDataSourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_data_source::DeleteDataSourceError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::delete_data_source::DeleteDataSourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_data_source::DeleteDataSourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_data_source::DeleteDataSourceError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::delete_data_source::DeleteDataSourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_domain::DeleteDomainError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_domain::DeleteDomainError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_domain::DeleteDomainError> for Error {
    fn from(err: crate::operation::delete_domain::DeleteDomainError) -> Self {
        match err {
            crate::operation::delete_domain::DeleteDomainError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_domain::DeleteDomainError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_domain::DeleteDomainError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_domain::DeleteDomainError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_domain::DeleteDomainError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_domain::DeleteDomainError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_domain::DeleteDomainError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::delete_domain::DeleteDomainError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_domain_unit::DeleteDomainUnitError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_domain_unit::DeleteDomainUnitError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_domain_unit::DeleteDomainUnitError> for Error {
    fn from(err: crate::operation::delete_domain_unit::DeleteDomainUnitError) -> Self {
        match err {
            crate::operation::delete_domain_unit::DeleteDomainUnitError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_domain_unit::DeleteDomainUnitError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_domain_unit::DeleteDomainUnitError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_domain_unit::DeleteDomainUnitError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_domain_unit::DeleteDomainUnitError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_domain_unit::DeleteDomainUnitError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_domain_unit::DeleteDomainUnitError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::delete_domain_unit::DeleteDomainUnitError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_environment::DeleteEnvironmentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_environment::DeleteEnvironmentError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_environment::DeleteEnvironmentError> for Error {
    fn from(err: crate::operation::delete_environment::DeleteEnvironmentError) -> Self {
        match err {
            crate::operation::delete_environment::DeleteEnvironmentError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_environment::DeleteEnvironmentError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_environment::DeleteEnvironmentError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_environment::DeleteEnvironmentError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_environment::DeleteEnvironmentError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_environment::DeleteEnvironmentError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::delete_environment::DeleteEnvironmentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_environment_action::DeleteEnvironmentActionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_environment_action::DeleteEnvironmentActionError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_environment_action::DeleteEnvironmentActionError> for Error {
    fn from(err: crate::operation::delete_environment_action::DeleteEnvironmentActionError) -> Self {
        match err {
            crate::operation::delete_environment_action::DeleteEnvironmentActionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_environment_action::DeleteEnvironmentActionError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_environment_action::DeleteEnvironmentActionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_environment_action::DeleteEnvironmentActionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_environment_action::DeleteEnvironmentActionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_environment_action::DeleteEnvironmentActionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_environment_action::DeleteEnvironmentActionError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::delete_environment_action::DeleteEnvironmentActionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_environment_blueprint_configuration::DeleteEnvironmentBlueprintConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_environment_blueprint_configuration::DeleteEnvironmentBlueprintConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_environment_blueprint_configuration::DeleteEnvironmentBlueprintConfigurationError> for Error {
    fn from(err: crate::operation::delete_environment_blueprint_configuration::DeleteEnvironmentBlueprintConfigurationError) -> Self {
        match err {
            crate::operation::delete_environment_blueprint_configuration::DeleteEnvironmentBlueprintConfigurationError::AccessDeniedException(
                inner,
            ) => Error::AccessDeniedException(inner),
            crate::operation::delete_environment_blueprint_configuration::DeleteEnvironmentBlueprintConfigurationError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::delete_environment_blueprint_configuration::DeleteEnvironmentBlueprintConfigurationError::ValidationException(
                inner,
            ) => Error::ValidationException(inner),
            crate::operation::delete_environment_blueprint_configuration::DeleteEnvironmentBlueprintConfigurationError::ThrottlingException(
                inner,
            ) => Error::ThrottlingException(inner),
            crate::operation::delete_environment_blueprint_configuration::DeleteEnvironmentBlueprintConfigurationError::UnauthorizedException(
                inner,
            ) => Error::UnauthorizedException(inner),
            crate::operation::delete_environment_blueprint_configuration::DeleteEnvironmentBlueprintConfigurationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_environment_profile::DeleteEnvironmentProfileError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_environment_profile::DeleteEnvironmentProfileError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_environment_profile::DeleteEnvironmentProfileError> for Error {
    fn from(err: crate::operation::delete_environment_profile::DeleteEnvironmentProfileError) -> Self {
        match err {
            crate::operation::delete_environment_profile::DeleteEnvironmentProfileError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_environment_profile::DeleteEnvironmentProfileError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_environment_profile::DeleteEnvironmentProfileError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_environment_profile::DeleteEnvironmentProfileError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_environment_profile::DeleteEnvironmentProfileError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_environment_profile::DeleteEnvironmentProfileError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::delete_environment_profile::DeleteEnvironmentProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_form_type::DeleteFormTypeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_form_type::DeleteFormTypeError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_form_type::DeleteFormTypeError> for Error {
    fn from(err: crate::operation::delete_form_type::DeleteFormTypeError) -> Self {
        match err {
            crate::operation::delete_form_type::DeleteFormTypeError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_form_type::DeleteFormTypeError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_form_type::DeleteFormTypeError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_form_type::DeleteFormTypeError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_form_type::DeleteFormTypeError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_form_type::DeleteFormTypeError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_form_type::DeleteFormTypeError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::delete_form_type::DeleteFormTypeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_glossary::DeleteGlossaryError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_glossary::DeleteGlossaryError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_glossary::DeleteGlossaryError> for Error {
    fn from(err: crate::operation::delete_glossary::DeleteGlossaryError) -> Self {
        match err {
            crate::operation::delete_glossary::DeleteGlossaryError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_glossary::DeleteGlossaryError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_glossary::DeleteGlossaryError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_glossary::DeleteGlossaryError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_glossary::DeleteGlossaryError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_glossary::DeleteGlossaryError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_glossary::DeleteGlossaryError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::delete_glossary::DeleteGlossaryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_glossary_term::DeleteGlossaryTermError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_glossary_term::DeleteGlossaryTermError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_glossary_term::DeleteGlossaryTermError> for Error {
    fn from(err: crate::operation::delete_glossary_term::DeleteGlossaryTermError) -> Self {
        match err {
            crate::operation::delete_glossary_term::DeleteGlossaryTermError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_glossary_term::DeleteGlossaryTermError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_glossary_term::DeleteGlossaryTermError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_glossary_term::DeleteGlossaryTermError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_glossary_term::DeleteGlossaryTermError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_glossary_term::DeleteGlossaryTermError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_glossary_term::DeleteGlossaryTermError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::delete_glossary_term::DeleteGlossaryTermError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_listing::DeleteListingError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_listing::DeleteListingError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_listing::DeleteListingError> for Error {
    fn from(err: crate::operation::delete_listing::DeleteListingError) -> Self {
        match err {
            crate::operation::delete_listing::DeleteListingError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_listing::DeleteListingError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_listing::DeleteListingError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_listing::DeleteListingError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_listing::DeleteListingError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_listing::DeleteListingError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_listing::DeleteListingError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::delete_listing::DeleteListingError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_project::DeleteProjectError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_project::DeleteProjectError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_project::DeleteProjectError> for Error {
    fn from(err: crate::operation::delete_project::DeleteProjectError) -> Self {
        match err {
            crate::operation::delete_project::DeleteProjectError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_project::DeleteProjectError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_project::DeleteProjectError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_project::DeleteProjectError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_project::DeleteProjectError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_project::DeleteProjectError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::delete_project::DeleteProjectError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_project_membership::DeleteProjectMembershipError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_project_membership::DeleteProjectMembershipError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_project_membership::DeleteProjectMembershipError> for Error {
    fn from(err: crate::operation::delete_project_membership::DeleteProjectMembershipError) -> Self {
        match err {
            crate::operation::delete_project_membership::DeleteProjectMembershipError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_project_membership::DeleteProjectMembershipError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_project_membership::DeleteProjectMembershipError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_project_membership::DeleteProjectMembershipError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::delete_project_membership::DeleteProjectMembershipError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_project_membership::DeleteProjectMembershipError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_project_membership::DeleteProjectMembershipError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::delete_project_membership::DeleteProjectMembershipError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_project_profile::DeleteProjectProfileError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_project_profile::DeleteProjectProfileError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_project_profile::DeleteProjectProfileError> for Error {
    fn from(err: crate::operation::delete_project_profile::DeleteProjectProfileError) -> Self {
        match err {
            crate::operation::delete_project_profile::DeleteProjectProfileError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_project_profile::DeleteProjectProfileError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_project_profile::DeleteProjectProfileError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_project_profile::DeleteProjectProfileError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_project_profile::DeleteProjectProfileError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_project_profile::DeleteProjectProfileError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::delete_project_profile::DeleteProjectProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_rule::DeleteRuleError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_rule::DeleteRuleError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_rule::DeleteRuleError> for Error {
    fn from(err: crate::operation::delete_rule::DeleteRuleError) -> Self {
        match err {
            crate::operation::delete_rule::DeleteRuleError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_rule::DeleteRuleError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_rule::DeleteRuleError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_rule::DeleteRuleError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_rule::DeleteRuleError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_rule::DeleteRuleError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_rule::DeleteRuleError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::delete_rule::DeleteRuleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_subscription_grant::DeleteSubscriptionGrantError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_subscription_grant::DeleteSubscriptionGrantError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_subscription_grant::DeleteSubscriptionGrantError> for Error {
    fn from(err: crate::operation::delete_subscription_grant::DeleteSubscriptionGrantError) -> Self {
        match err {
            crate::operation::delete_subscription_grant::DeleteSubscriptionGrantError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_subscription_grant::DeleteSubscriptionGrantError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_subscription_grant::DeleteSubscriptionGrantError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_subscription_grant::DeleteSubscriptionGrantError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_subscription_grant::DeleteSubscriptionGrantError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_subscription_grant::DeleteSubscriptionGrantError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_subscription_grant::DeleteSubscriptionGrantError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::delete_subscription_grant::DeleteSubscriptionGrantError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_subscription_request::DeleteSubscriptionRequestError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_subscription_request::DeleteSubscriptionRequestError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_subscription_request::DeleteSubscriptionRequestError> for Error {
    fn from(err: crate::operation::delete_subscription_request::DeleteSubscriptionRequestError) -> Self {
        match err {
            crate::operation::delete_subscription_request::DeleteSubscriptionRequestError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_subscription_request::DeleteSubscriptionRequestError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::delete_subscription_request::DeleteSubscriptionRequestError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_subscription_request::DeleteSubscriptionRequestError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_subscription_request::DeleteSubscriptionRequestError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_subscription_request::DeleteSubscriptionRequestError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_subscription_request::DeleteSubscriptionRequestError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::delete_subscription_request::DeleteSubscriptionRequestError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_subscription_target::DeleteSubscriptionTargetError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_subscription_target::DeleteSubscriptionTargetError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_subscription_target::DeleteSubscriptionTargetError> for Error {
    fn from(err: crate::operation::delete_subscription_target::DeleteSubscriptionTargetError) -> Self {
        match err {
            crate::operation::delete_subscription_target::DeleteSubscriptionTargetError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_subscription_target::DeleteSubscriptionTargetError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_subscription_target::DeleteSubscriptionTargetError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_subscription_target::DeleteSubscriptionTargetError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_subscription_target::DeleteSubscriptionTargetError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_subscription_target::DeleteSubscriptionTargetError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_subscription_target::DeleteSubscriptionTargetError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::delete_subscription_target::DeleteSubscriptionTargetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_time_series_data_points::DeleteTimeSeriesDataPointsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_time_series_data_points::DeleteTimeSeriesDataPointsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_time_series_data_points::DeleteTimeSeriesDataPointsError> for Error {
    fn from(err: crate::operation::delete_time_series_data_points::DeleteTimeSeriesDataPointsError) -> Self {
        match err {
            crate::operation::delete_time_series_data_points::DeleteTimeSeriesDataPointsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_time_series_data_points::DeleteTimeSeriesDataPointsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_time_series_data_points::DeleteTimeSeriesDataPointsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_time_series_data_points::DeleteTimeSeriesDataPointsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_time_series_data_points::DeleteTimeSeriesDataPointsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_time_series_data_points::DeleteTimeSeriesDataPointsError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::delete_time_series_data_points::DeleteTimeSeriesDataPointsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::disassociate_environment_role::DisassociateEnvironmentRoleError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::disassociate_environment_role::DisassociateEnvironmentRoleError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::disassociate_environment_role::DisassociateEnvironmentRoleError> for Error {
    fn from(err: crate::operation::disassociate_environment_role::DisassociateEnvironmentRoleError) -> Self {
        match err {
            crate::operation::disassociate_environment_role::DisassociateEnvironmentRoleError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::disassociate_environment_role::DisassociateEnvironmentRoleError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::disassociate_environment_role::DisassociateEnvironmentRoleError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::disassociate_environment_role::DisassociateEnvironmentRoleError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::disassociate_environment_role::DisassociateEnvironmentRoleError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::disassociate_environment_role::DisassociateEnvironmentRoleError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::disassociate_environment_role::DisassociateEnvironmentRoleError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::disassociate_environment_role::DisassociateEnvironmentRoleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::disassociate_governed_terms::DisassociateGovernedTermsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::disassociate_governed_terms::DisassociateGovernedTermsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::disassociate_governed_terms::DisassociateGovernedTermsError> for Error {
    fn from(err: crate::operation::disassociate_governed_terms::DisassociateGovernedTermsError) -> Self {
        match err {
            crate::operation::disassociate_governed_terms::DisassociateGovernedTermsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::disassociate_governed_terms::DisassociateGovernedTermsError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::disassociate_governed_terms::DisassociateGovernedTermsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::disassociate_governed_terms::DisassociateGovernedTermsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::disassociate_governed_terms::DisassociateGovernedTermsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::disassociate_governed_terms::DisassociateGovernedTermsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::disassociate_governed_terms::DisassociateGovernedTermsError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::disassociate_governed_terms::DisassociateGovernedTermsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_account_pool::GetAccountPoolError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_account_pool::GetAccountPoolError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_account_pool::GetAccountPoolError> for Error {
    fn from(err: crate::operation::get_account_pool::GetAccountPoolError) -> Self {
        match err {
            crate::operation::get_account_pool::GetAccountPoolError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_account_pool::GetAccountPoolError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_account_pool::GetAccountPoolError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_account_pool::GetAccountPoolError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_account_pool::GetAccountPoolError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_account_pool::GetAccountPoolError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_account_pool::GetAccountPoolError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_asset::GetAssetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_asset::GetAssetError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_asset::GetAssetError> for Error {
    fn from(err: crate::operation::get_asset::GetAssetError) -> Self {
        match err {
            crate::operation::get_asset::GetAssetError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_asset::GetAssetError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_asset::GetAssetError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_asset::GetAssetError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_asset::GetAssetError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_asset::GetAssetError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_asset::GetAssetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_asset_filter::GetAssetFilterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_asset_filter::GetAssetFilterError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_asset_filter::GetAssetFilterError> for Error {
    fn from(err: crate::operation::get_asset_filter::GetAssetFilterError) -> Self {
        match err {
            crate::operation::get_asset_filter::GetAssetFilterError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_asset_filter::GetAssetFilterError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_asset_filter::GetAssetFilterError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_asset_filter::GetAssetFilterError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_asset_filter::GetAssetFilterError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_asset_filter::GetAssetFilterError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_asset_filter::GetAssetFilterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_asset_type::GetAssetTypeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_asset_type::GetAssetTypeError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_asset_type::GetAssetTypeError> for Error {
    fn from(err: crate::operation::get_asset_type::GetAssetTypeError) -> Self {
        match err {
            crate::operation::get_asset_type::GetAssetTypeError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_asset_type::GetAssetTypeError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_asset_type::GetAssetTypeError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_asset_type::GetAssetTypeError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_asset_type::GetAssetTypeError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_asset_type::GetAssetTypeError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_asset_type::GetAssetTypeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_connection::GetConnectionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_connection::GetConnectionError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_connection::GetConnectionError> for Error {
    fn from(err: crate::operation::get_connection::GetConnectionError) -> Self {
        match err {
            crate::operation::get_connection::GetConnectionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_connection::GetConnectionError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_connection::GetConnectionError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_connection::GetConnectionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_connection::GetConnectionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_connection::GetConnectionError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_connection::GetConnectionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_data_product::GetDataProductError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_data_product::GetDataProductError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_data_product::GetDataProductError> for Error {
    fn from(err: crate::operation::get_data_product::GetDataProductError) -> Self {
        match err {
            crate::operation::get_data_product::GetDataProductError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_data_product::GetDataProductError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_data_product::GetDataProductError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_data_product::GetDataProductError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_data_product::GetDataProductError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_data_product::GetDataProductError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_data_product::GetDataProductError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_data_source::GetDataSourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_data_source::GetDataSourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_data_source::GetDataSourceError> for Error {
    fn from(err: crate::operation::get_data_source::GetDataSourceError) -> Self {
        match err {
            crate::operation::get_data_source::GetDataSourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_data_source::GetDataSourceError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::get_data_source::GetDataSourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_data_source::GetDataSourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_data_source::GetDataSourceError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::get_data_source::GetDataSourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_data_source::GetDataSourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_data_source::GetDataSourceError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_data_source::GetDataSourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_data_source_run::GetDataSourceRunError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_data_source_run::GetDataSourceRunError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_data_source_run::GetDataSourceRunError> for Error {
    fn from(err: crate::operation::get_data_source_run::GetDataSourceRunError) -> Self {
        match err {
            crate::operation::get_data_source_run::GetDataSourceRunError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_data_source_run::GetDataSourceRunError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::get_data_source_run::GetDataSourceRunError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_data_source_run::GetDataSourceRunError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_data_source_run::GetDataSourceRunError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::get_data_source_run::GetDataSourceRunError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_data_source_run::GetDataSourceRunError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_data_source_run::GetDataSourceRunError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_data_source_run::GetDataSourceRunError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_domain::GetDomainError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_domain::GetDomainError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_domain::GetDomainError> for Error {
    fn from(err: crate::operation::get_domain::GetDomainError) -> Self {
        match err {
            crate::operation::get_domain::GetDomainError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_domain::GetDomainError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_domain::GetDomainError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_domain::GetDomainError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::get_domain::GetDomainError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_domain::GetDomainError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_domain::GetDomainError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_domain::GetDomainError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_domain_unit::GetDomainUnitError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_domain_unit::GetDomainUnitError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_domain_unit::GetDomainUnitError> for Error {
    fn from(err: crate::operation::get_domain_unit::GetDomainUnitError) -> Self {
        match err {
            crate::operation::get_domain_unit::GetDomainUnitError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_domain_unit::GetDomainUnitError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_domain_unit::GetDomainUnitError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_domain_unit::GetDomainUnitError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_domain_unit::GetDomainUnitError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_domain_unit::GetDomainUnitError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_domain_unit::GetDomainUnitError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_environment::GetEnvironmentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_environment::GetEnvironmentError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_environment::GetEnvironmentError> for Error {
    fn from(err: crate::operation::get_environment::GetEnvironmentError) -> Self {
        match err {
            crate::operation::get_environment::GetEnvironmentError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_environment::GetEnvironmentError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_environment::GetEnvironmentError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_environment::GetEnvironmentError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_environment::GetEnvironmentError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_environment::GetEnvironmentError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_environment::GetEnvironmentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_environment_action::GetEnvironmentActionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_environment_action::GetEnvironmentActionError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_environment_action::GetEnvironmentActionError> for Error {
    fn from(err: crate::operation::get_environment_action::GetEnvironmentActionError) -> Self {
        match err {
            crate::operation::get_environment_action::GetEnvironmentActionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_environment_action::GetEnvironmentActionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_environment_action::GetEnvironmentActionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_environment_action::GetEnvironmentActionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_environment_action::GetEnvironmentActionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_environment_action::GetEnvironmentActionError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_environment_action::GetEnvironmentActionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_environment_blueprint::GetEnvironmentBlueprintError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_environment_blueprint::GetEnvironmentBlueprintError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_environment_blueprint::GetEnvironmentBlueprintError> for Error {
    fn from(err: crate::operation::get_environment_blueprint::GetEnvironmentBlueprintError) -> Self {
        match err {
            crate::operation::get_environment_blueprint::GetEnvironmentBlueprintError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_environment_blueprint::GetEnvironmentBlueprintError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_environment_blueprint::GetEnvironmentBlueprintError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_environment_blueprint::GetEnvironmentBlueprintError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_environment_blueprint::GetEnvironmentBlueprintError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_environment_blueprint::GetEnvironmentBlueprintError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::get_environment_blueprint::GetEnvironmentBlueprintError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_environment_blueprint_configuration::GetEnvironmentBlueprintConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_environment_blueprint_configuration::GetEnvironmentBlueprintConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_environment_blueprint_configuration::GetEnvironmentBlueprintConfigurationError> for Error {
    fn from(err: crate::operation::get_environment_blueprint_configuration::GetEnvironmentBlueprintConfigurationError) -> Self {
        match err {
            crate::operation::get_environment_blueprint_configuration::GetEnvironmentBlueprintConfigurationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_environment_blueprint_configuration::GetEnvironmentBlueprintConfigurationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_environment_blueprint_configuration::GetEnvironmentBlueprintConfigurationError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::get_environment_blueprint_configuration::GetEnvironmentBlueprintConfigurationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_environment_blueprint_configuration::GetEnvironmentBlueprintConfigurationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_environment_blueprint_configuration::GetEnvironmentBlueprintConfigurationError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::get_environment_blueprint_configuration::GetEnvironmentBlueprintConfigurationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_environment_credentials::GetEnvironmentCredentialsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_environment_credentials::GetEnvironmentCredentialsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_environment_credentials::GetEnvironmentCredentialsError> for Error {
    fn from(err: crate::operation::get_environment_credentials::GetEnvironmentCredentialsError) -> Self {
        match err {
            crate::operation::get_environment_credentials::GetEnvironmentCredentialsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_environment_credentials::GetEnvironmentCredentialsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_environment_credentials::GetEnvironmentCredentialsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_environment_credentials::GetEnvironmentCredentialsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_environment_credentials::GetEnvironmentCredentialsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_environment_credentials::GetEnvironmentCredentialsError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::get_environment_credentials::GetEnvironmentCredentialsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_environment_profile::GetEnvironmentProfileError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_environment_profile::GetEnvironmentProfileError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_environment_profile::GetEnvironmentProfileError> for Error {
    fn from(err: crate::operation::get_environment_profile::GetEnvironmentProfileError) -> Self {
        match err {
            crate::operation::get_environment_profile::GetEnvironmentProfileError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_environment_profile::GetEnvironmentProfileError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_environment_profile::GetEnvironmentProfileError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_environment_profile::GetEnvironmentProfileError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_environment_profile::GetEnvironmentProfileError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_environment_profile::GetEnvironmentProfileError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::get_environment_profile::GetEnvironmentProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_form_type::GetFormTypeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_form_type::GetFormTypeError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_form_type::GetFormTypeError> for Error {
    fn from(err: crate::operation::get_form_type::GetFormTypeError) -> Self {
        match err {
            crate::operation::get_form_type::GetFormTypeError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_form_type::GetFormTypeError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_form_type::GetFormTypeError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_form_type::GetFormTypeError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_form_type::GetFormTypeError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_form_type::GetFormTypeError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_form_type::GetFormTypeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_glossary::GetGlossaryError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_glossary::GetGlossaryError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_glossary::GetGlossaryError> for Error {
    fn from(err: crate::operation::get_glossary::GetGlossaryError) -> Self {
        match err {
            crate::operation::get_glossary::GetGlossaryError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_glossary::GetGlossaryError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_glossary::GetGlossaryError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_glossary::GetGlossaryError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_glossary::GetGlossaryError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_glossary::GetGlossaryError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_glossary::GetGlossaryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_glossary_term::GetGlossaryTermError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_glossary_term::GetGlossaryTermError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_glossary_term::GetGlossaryTermError> for Error {
    fn from(err: crate::operation::get_glossary_term::GetGlossaryTermError) -> Self {
        match err {
            crate::operation::get_glossary_term::GetGlossaryTermError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_glossary_term::GetGlossaryTermError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_glossary_term::GetGlossaryTermError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_glossary_term::GetGlossaryTermError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_glossary_term::GetGlossaryTermError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_glossary_term::GetGlossaryTermError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_glossary_term::GetGlossaryTermError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_group_profile::GetGroupProfileError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_group_profile::GetGroupProfileError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_group_profile::GetGroupProfileError> for Error {
    fn from(err: crate::operation::get_group_profile::GetGroupProfileError) -> Self {
        match err {
            crate::operation::get_group_profile::GetGroupProfileError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_group_profile::GetGroupProfileError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_group_profile::GetGroupProfileError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_group_profile::GetGroupProfileError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_group_profile::GetGroupProfileError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_group_profile::GetGroupProfileError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_group_profile::GetGroupProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_iam_portal_login_url::GetIamPortalLoginUrlError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_iam_portal_login_url::GetIamPortalLoginUrlError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_iam_portal_login_url::GetIamPortalLoginUrlError> for Error {
    fn from(err: crate::operation::get_iam_portal_login_url::GetIamPortalLoginUrlError) -> Self {
        match err {
            crate::operation::get_iam_portal_login_url::GetIamPortalLoginUrlError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_iam_portal_login_url::GetIamPortalLoginUrlError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::get_iam_portal_login_url::GetIamPortalLoginUrlError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_iam_portal_login_url::GetIamPortalLoginUrlError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_iam_portal_login_url::GetIamPortalLoginUrlError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_iam_portal_login_url::GetIamPortalLoginUrlError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_iam_portal_login_url::GetIamPortalLoginUrlError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::get_iam_portal_login_url::GetIamPortalLoginUrlError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_job_run::GetJobRunError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_job_run::GetJobRunError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_job_run::GetJobRunError> for Error {
    fn from(err: crate::operation::get_job_run::GetJobRunError) -> Self {
        match err {
            crate::operation::get_job_run::GetJobRunError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_job_run::GetJobRunError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_job_run::GetJobRunError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_job_run::GetJobRunError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_job_run::GetJobRunError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_job_run::GetJobRunError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_job_run::GetJobRunError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_lineage_event::GetLineageEventError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_lineage_event::GetLineageEventError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_lineage_event::GetLineageEventError> for Error {
    fn from(err: crate::operation::get_lineage_event::GetLineageEventError) -> Self {
        match err {
            crate::operation::get_lineage_event::GetLineageEventError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_lineage_event::GetLineageEventError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_lineage_event::GetLineageEventError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_lineage_event::GetLineageEventError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_lineage_event::GetLineageEventError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_lineage_event::GetLineageEventError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_lineage_event::GetLineageEventError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_lineage_node::GetLineageNodeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_lineage_node::GetLineageNodeError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_lineage_node::GetLineageNodeError> for Error {
    fn from(err: crate::operation::get_lineage_node::GetLineageNodeError) -> Self {
        match err {
            crate::operation::get_lineage_node::GetLineageNodeError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_lineage_node::GetLineageNodeError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_lineage_node::GetLineageNodeError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_lineage_node::GetLineageNodeError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_lineage_node::GetLineageNodeError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_lineage_node::GetLineageNodeError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_lineage_node::GetLineageNodeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_listing::GetListingError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_listing::GetListingError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_listing::GetListingError> for Error {
    fn from(err: crate::operation::get_listing::GetListingError) -> Self {
        match err {
            crate::operation::get_listing::GetListingError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_listing::GetListingError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_listing::GetListingError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_listing::GetListingError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_listing::GetListingError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_listing::GetListingError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_listing::GetListingError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_metadata_generation_run::GetMetadataGenerationRunError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_metadata_generation_run::GetMetadataGenerationRunError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_metadata_generation_run::GetMetadataGenerationRunError> for Error {
    fn from(err: crate::operation::get_metadata_generation_run::GetMetadataGenerationRunError) -> Self {
        match err {
            crate::operation::get_metadata_generation_run::GetMetadataGenerationRunError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_metadata_generation_run::GetMetadataGenerationRunError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_metadata_generation_run::GetMetadataGenerationRunError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_metadata_generation_run::GetMetadataGenerationRunError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_metadata_generation_run::GetMetadataGenerationRunError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_metadata_generation_run::GetMetadataGenerationRunError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::get_metadata_generation_run::GetMetadataGenerationRunError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_project::GetProjectError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_project::GetProjectError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_project::GetProjectError> for Error {
    fn from(err: crate::operation::get_project::GetProjectError) -> Self {
        match err {
            crate::operation::get_project::GetProjectError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_project::GetProjectError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_project::GetProjectError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_project::GetProjectError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_project::GetProjectError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_project::GetProjectError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_project::GetProjectError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_project_profile::GetProjectProfileError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_project_profile::GetProjectProfileError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_project_profile::GetProjectProfileError> for Error {
    fn from(err: crate::operation::get_project_profile::GetProjectProfileError) -> Self {
        match err {
            crate::operation::get_project_profile::GetProjectProfileError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_project_profile::GetProjectProfileError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_project_profile::GetProjectProfileError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_project_profile::GetProjectProfileError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_project_profile::GetProjectProfileError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_project_profile::GetProjectProfileError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_project_profile::GetProjectProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_rule::GetRuleError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_rule::GetRuleError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_rule::GetRuleError> for Error {
    fn from(err: crate::operation::get_rule::GetRuleError) -> Self {
        match err {
            crate::operation::get_rule::GetRuleError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_rule::GetRuleError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_rule::GetRuleError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_rule::GetRuleError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_rule::GetRuleError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_rule::GetRuleError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_rule::GetRuleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_subscription::GetSubscriptionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_subscription::GetSubscriptionError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_subscription::GetSubscriptionError> for Error {
    fn from(err: crate::operation::get_subscription::GetSubscriptionError) -> Self {
        match err {
            crate::operation::get_subscription::GetSubscriptionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_subscription::GetSubscriptionError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_subscription::GetSubscriptionError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_subscription::GetSubscriptionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_subscription::GetSubscriptionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_subscription::GetSubscriptionError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_subscription::GetSubscriptionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_subscription_grant::GetSubscriptionGrantError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_subscription_grant::GetSubscriptionGrantError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_subscription_grant::GetSubscriptionGrantError> for Error {
    fn from(err: crate::operation::get_subscription_grant::GetSubscriptionGrantError) -> Self {
        match err {
            crate::operation::get_subscription_grant::GetSubscriptionGrantError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_subscription_grant::GetSubscriptionGrantError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_subscription_grant::GetSubscriptionGrantError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_subscription_grant::GetSubscriptionGrantError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_subscription_grant::GetSubscriptionGrantError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_subscription_grant::GetSubscriptionGrantError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_subscription_grant::GetSubscriptionGrantError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_subscription_request_details::GetSubscriptionRequestDetailsError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_subscription_request_details::GetSubscriptionRequestDetailsError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_subscription_request_details::GetSubscriptionRequestDetailsError> for Error {
    fn from(err: crate::operation::get_subscription_request_details::GetSubscriptionRequestDetailsError) -> Self {
        match err {
            crate::operation::get_subscription_request_details::GetSubscriptionRequestDetailsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_subscription_request_details::GetSubscriptionRequestDetailsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_subscription_request_details::GetSubscriptionRequestDetailsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_subscription_request_details::GetSubscriptionRequestDetailsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_subscription_request_details::GetSubscriptionRequestDetailsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_subscription_request_details::GetSubscriptionRequestDetailsError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::get_subscription_request_details::GetSubscriptionRequestDetailsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_subscription_target::GetSubscriptionTargetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_subscription_target::GetSubscriptionTargetError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_subscription_target::GetSubscriptionTargetError> for Error {
    fn from(err: crate::operation::get_subscription_target::GetSubscriptionTargetError) -> Self {
        match err {
            crate::operation::get_subscription_target::GetSubscriptionTargetError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_subscription_target::GetSubscriptionTargetError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_subscription_target::GetSubscriptionTargetError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_subscription_target::GetSubscriptionTargetError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_subscription_target::GetSubscriptionTargetError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_subscription_target::GetSubscriptionTargetError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::get_subscription_target::GetSubscriptionTargetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_time_series_data_point::GetTimeSeriesDataPointError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_time_series_data_point::GetTimeSeriesDataPointError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_time_series_data_point::GetTimeSeriesDataPointError> for Error {
    fn from(err: crate::operation::get_time_series_data_point::GetTimeSeriesDataPointError) -> Self {
        match err {
            crate::operation::get_time_series_data_point::GetTimeSeriesDataPointError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_time_series_data_point::GetTimeSeriesDataPointError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_time_series_data_point::GetTimeSeriesDataPointError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_time_series_data_point::GetTimeSeriesDataPointError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_time_series_data_point::GetTimeSeriesDataPointError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_time_series_data_point::GetTimeSeriesDataPointError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::get_time_series_data_point::GetTimeSeriesDataPointError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_user_profile::GetUserProfileError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_user_profile::GetUserProfileError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_user_profile::GetUserProfileError> for Error {
    fn from(err: crate::operation::get_user_profile::GetUserProfileError) -> Self {
        match err {
            crate::operation::get_user_profile::GetUserProfileError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_user_profile::GetUserProfileError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_user_profile::GetUserProfileError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_user_profile::GetUserProfileError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_user_profile::GetUserProfileError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_user_profile::GetUserProfileError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_user_profile::GetUserProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_account_pools::ListAccountPoolsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_account_pools::ListAccountPoolsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_account_pools::ListAccountPoolsError> for Error {
    fn from(err: crate::operation::list_account_pools::ListAccountPoolsError) -> Self {
        match err {
            crate::operation::list_account_pools::ListAccountPoolsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_account_pools::ListAccountPoolsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_account_pools::ListAccountPoolsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_account_pools::ListAccountPoolsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_account_pools::ListAccountPoolsError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::list_account_pools::ListAccountPoolsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_accounts_in_account_pool::ListAccountsInAccountPoolError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_accounts_in_account_pool::ListAccountsInAccountPoolError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_accounts_in_account_pool::ListAccountsInAccountPoolError> for Error {
    fn from(err: crate::operation::list_accounts_in_account_pool::ListAccountsInAccountPoolError) -> Self {
        match err {
            crate::operation::list_accounts_in_account_pool::ListAccountsInAccountPoolError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_accounts_in_account_pool::ListAccountsInAccountPoolError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_accounts_in_account_pool::ListAccountsInAccountPoolError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_accounts_in_account_pool::ListAccountsInAccountPoolError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_accounts_in_account_pool::ListAccountsInAccountPoolError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_accounts_in_account_pool::ListAccountsInAccountPoolError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::list_accounts_in_account_pool::ListAccountsInAccountPoolError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_asset_filters::ListAssetFiltersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_asset_filters::ListAssetFiltersError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_asset_filters::ListAssetFiltersError> for Error {
    fn from(err: crate::operation::list_asset_filters::ListAssetFiltersError) -> Self {
        match err {
            crate::operation::list_asset_filters::ListAssetFiltersError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_asset_filters::ListAssetFiltersError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_asset_filters::ListAssetFiltersError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_asset_filters::ListAssetFiltersError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_asset_filters::ListAssetFiltersError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_asset_filters::ListAssetFiltersError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::list_asset_filters::ListAssetFiltersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_asset_revisions::ListAssetRevisionsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_asset_revisions::ListAssetRevisionsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_asset_revisions::ListAssetRevisionsError> for Error {
    fn from(err: crate::operation::list_asset_revisions::ListAssetRevisionsError) -> Self {
        match err {
            crate::operation::list_asset_revisions::ListAssetRevisionsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_asset_revisions::ListAssetRevisionsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_asset_revisions::ListAssetRevisionsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_asset_revisions::ListAssetRevisionsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_asset_revisions::ListAssetRevisionsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_asset_revisions::ListAssetRevisionsError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::list_asset_revisions::ListAssetRevisionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_connections::ListConnectionsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_connections::ListConnectionsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_connections::ListConnectionsError> for Error {
    fn from(err: crate::operation::list_connections::ListConnectionsError) -> Self {
        match err {
            crate::operation::list_connections::ListConnectionsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_connections::ListConnectionsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_connections::ListConnectionsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_connections::ListConnectionsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_connections::ListConnectionsError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::list_connections::ListConnectionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_data_product_revisions::ListDataProductRevisionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_data_product_revisions::ListDataProductRevisionsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_data_product_revisions::ListDataProductRevisionsError> for Error {
    fn from(err: crate::operation::list_data_product_revisions::ListDataProductRevisionsError) -> Self {
        match err {
            crate::operation::list_data_product_revisions::ListDataProductRevisionsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_data_product_revisions::ListDataProductRevisionsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_data_product_revisions::ListDataProductRevisionsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_data_product_revisions::ListDataProductRevisionsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_data_product_revisions::ListDataProductRevisionsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_data_product_revisions::ListDataProductRevisionsError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::list_data_product_revisions::ListDataProductRevisionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_data_source_run_activities::ListDataSourceRunActivitiesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_data_source_run_activities::ListDataSourceRunActivitiesError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_data_source_run_activities::ListDataSourceRunActivitiesError> for Error {
    fn from(err: crate::operation::list_data_source_run_activities::ListDataSourceRunActivitiesError) -> Self {
        match err {
            crate::operation::list_data_source_run_activities::ListDataSourceRunActivitiesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_data_source_run_activities::ListDataSourceRunActivitiesError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::list_data_source_run_activities::ListDataSourceRunActivitiesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_data_source_run_activities::ListDataSourceRunActivitiesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_data_source_run_activities::ListDataSourceRunActivitiesError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::list_data_source_run_activities::ListDataSourceRunActivitiesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_data_source_run_activities::ListDataSourceRunActivitiesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_data_source_run_activities::ListDataSourceRunActivitiesError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::list_data_source_run_activities::ListDataSourceRunActivitiesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_data_source_runs::ListDataSourceRunsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_data_source_runs::ListDataSourceRunsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_data_source_runs::ListDataSourceRunsError> for Error {
    fn from(err: crate::operation::list_data_source_runs::ListDataSourceRunsError) -> Self {
        match err {
            crate::operation::list_data_source_runs::ListDataSourceRunsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_data_source_runs::ListDataSourceRunsError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::list_data_source_runs::ListDataSourceRunsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_data_source_runs::ListDataSourceRunsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_data_source_runs::ListDataSourceRunsError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::list_data_source_runs::ListDataSourceRunsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_data_source_runs::ListDataSourceRunsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_data_source_runs::ListDataSourceRunsError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::list_data_source_runs::ListDataSourceRunsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_data_sources::ListDataSourcesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_data_sources::ListDataSourcesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_data_sources::ListDataSourcesError> for Error {
    fn from(err: crate::operation::list_data_sources::ListDataSourcesError) -> Self {
        match err {
            crate::operation::list_data_sources::ListDataSourcesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_data_sources::ListDataSourcesError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::list_data_sources::ListDataSourcesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_data_sources::ListDataSourcesError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_data_sources::ListDataSourcesError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::list_data_sources::ListDataSourcesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_data_sources::ListDataSourcesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_data_sources::ListDataSourcesError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::list_data_sources::ListDataSourcesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_domains::ListDomainsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_domains::ListDomainsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_domains::ListDomainsError> for Error {
    fn from(err: crate::operation::list_domains::ListDomainsError) -> Self {
        match err {
            crate::operation::list_domains::ListDomainsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_domains::ListDomainsError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::list_domains::ListDomainsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_domains::ListDomainsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_domains::ListDomainsError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::list_domains::ListDomainsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_domains::ListDomainsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_domains::ListDomainsError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::list_domains::ListDomainsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_domain_units_for_parent::ListDomainUnitsForParentError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_domain_units_for_parent::ListDomainUnitsForParentError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_domain_units_for_parent::ListDomainUnitsForParentError> for Error {
    fn from(err: crate::operation::list_domain_units_for_parent::ListDomainUnitsForParentError) -> Self {
        match err {
            crate::operation::list_domain_units_for_parent::ListDomainUnitsForParentError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_domain_units_for_parent::ListDomainUnitsForParentError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_domain_units_for_parent::ListDomainUnitsForParentError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_domain_units_for_parent::ListDomainUnitsForParentError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_domain_units_for_parent::ListDomainUnitsForParentError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::list_domain_units_for_parent::ListDomainUnitsForParentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_entity_owners::ListEntityOwnersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_entity_owners::ListEntityOwnersError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_entity_owners::ListEntityOwnersError> for Error {
    fn from(err: crate::operation::list_entity_owners::ListEntityOwnersError) -> Self {
        match err {
            crate::operation::list_entity_owners::ListEntityOwnersError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_entity_owners::ListEntityOwnersError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_entity_owners::ListEntityOwnersError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_entity_owners::ListEntityOwnersError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_entity_owners::ListEntityOwnersError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::list_entity_owners::ListEntityOwnersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_environment_actions::ListEnvironmentActionsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_environment_actions::ListEnvironmentActionsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_environment_actions::ListEnvironmentActionsError> for Error {
    fn from(err: crate::operation::list_environment_actions::ListEnvironmentActionsError) -> Self {
        match err {
            crate::operation::list_environment_actions::ListEnvironmentActionsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_environment_actions::ListEnvironmentActionsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_environment_actions::ListEnvironmentActionsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_environment_actions::ListEnvironmentActionsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_environment_actions::ListEnvironmentActionsError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::list_environment_actions::ListEnvironmentActionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_environment_blueprint_configurations::ListEnvironmentBlueprintConfigurationsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_environment_blueprint_configurations::ListEnvironmentBlueprintConfigurationsError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_environment_blueprint_configurations::ListEnvironmentBlueprintConfigurationsError> for Error {
    fn from(err: crate::operation::list_environment_blueprint_configurations::ListEnvironmentBlueprintConfigurationsError) -> Self {
        match err {
            crate::operation::list_environment_blueprint_configurations::ListEnvironmentBlueprintConfigurationsError::AccessDeniedException(
                inner,
            ) => Error::AccessDeniedException(inner),
            crate::operation::list_environment_blueprint_configurations::ListEnvironmentBlueprintConfigurationsError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::list_environment_blueprint_configurations::ListEnvironmentBlueprintConfigurationsError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::list_environment_blueprint_configurations::ListEnvironmentBlueprintConfigurationsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_environment_blueprint_configurations::ListEnvironmentBlueprintConfigurationsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_environment_blueprint_configurations::ListEnvironmentBlueprintConfigurationsError::UnauthorizedException(
                inner,
            ) => Error::UnauthorizedException(inner),
            crate::operation::list_environment_blueprint_configurations::ListEnvironmentBlueprintConfigurationsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_environment_blueprints::ListEnvironmentBlueprintsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_environment_blueprints::ListEnvironmentBlueprintsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_environment_blueprints::ListEnvironmentBlueprintsError> for Error {
    fn from(err: crate::operation::list_environment_blueprints::ListEnvironmentBlueprintsError) -> Self {
        match err {
            crate::operation::list_environment_blueprints::ListEnvironmentBlueprintsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_environment_blueprints::ListEnvironmentBlueprintsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_environment_blueprints::ListEnvironmentBlueprintsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_environment_blueprints::ListEnvironmentBlueprintsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_environment_blueprints::ListEnvironmentBlueprintsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_environment_blueprints::ListEnvironmentBlueprintsError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::list_environment_blueprints::ListEnvironmentBlueprintsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_environment_profiles::ListEnvironmentProfilesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_environment_profiles::ListEnvironmentProfilesError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_environment_profiles::ListEnvironmentProfilesError> for Error {
    fn from(err: crate::operation::list_environment_profiles::ListEnvironmentProfilesError) -> Self {
        match err {
            crate::operation::list_environment_profiles::ListEnvironmentProfilesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_environment_profiles::ListEnvironmentProfilesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_environment_profiles::ListEnvironmentProfilesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_environment_profiles::ListEnvironmentProfilesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_environment_profiles::ListEnvironmentProfilesError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::list_environment_profiles::ListEnvironmentProfilesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_environments::ListEnvironmentsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_environments::ListEnvironmentsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_environments::ListEnvironmentsError> for Error {
    fn from(err: crate::operation::list_environments::ListEnvironmentsError) -> Self {
        match err {
            crate::operation::list_environments::ListEnvironmentsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_environments::ListEnvironmentsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_environments::ListEnvironmentsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_environments::ListEnvironmentsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_environments::ListEnvironmentsError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::list_environments::ListEnvironmentsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_job_runs::ListJobRunsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_job_runs::ListJobRunsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_job_runs::ListJobRunsError> for Error {
    fn from(err: crate::operation::list_job_runs::ListJobRunsError) -> Self {
        match err {
            crate::operation::list_job_runs::ListJobRunsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_job_runs::ListJobRunsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_job_runs::ListJobRunsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_job_runs::ListJobRunsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_job_runs::ListJobRunsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_job_runs::ListJobRunsError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::list_job_runs::ListJobRunsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_lineage_events::ListLineageEventsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_lineage_events::ListLineageEventsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_lineage_events::ListLineageEventsError> for Error {
    fn from(err: crate::operation::list_lineage_events::ListLineageEventsError) -> Self {
        match err {
            crate::operation::list_lineage_events::ListLineageEventsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_lineage_events::ListLineageEventsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_lineage_events::ListLineageEventsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_lineage_events::ListLineageEventsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_lineage_events::ListLineageEventsError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::list_lineage_events::ListLineageEventsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_lineage_node_history::ListLineageNodeHistoryError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_lineage_node_history::ListLineageNodeHistoryError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_lineage_node_history::ListLineageNodeHistoryError> for Error {
    fn from(err: crate::operation::list_lineage_node_history::ListLineageNodeHistoryError) -> Self {
        match err {
            crate::operation::list_lineage_node_history::ListLineageNodeHistoryError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_lineage_node_history::ListLineageNodeHistoryError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_lineage_node_history::ListLineageNodeHistoryError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_lineage_node_history::ListLineageNodeHistoryError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_lineage_node_history::ListLineageNodeHistoryError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_lineage_node_history::ListLineageNodeHistoryError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::list_lineage_node_history::ListLineageNodeHistoryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_metadata_generation_runs::ListMetadataGenerationRunsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_metadata_generation_runs::ListMetadataGenerationRunsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_metadata_generation_runs::ListMetadataGenerationRunsError> for Error {
    fn from(err: crate::operation::list_metadata_generation_runs::ListMetadataGenerationRunsError) -> Self {
        match err {
            crate::operation::list_metadata_generation_runs::ListMetadataGenerationRunsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_metadata_generation_runs::ListMetadataGenerationRunsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_metadata_generation_runs::ListMetadataGenerationRunsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_metadata_generation_runs::ListMetadataGenerationRunsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_metadata_generation_runs::ListMetadataGenerationRunsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_metadata_generation_runs::ListMetadataGenerationRunsError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::list_metadata_generation_runs::ListMetadataGenerationRunsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_notifications::ListNotificationsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_notifications::ListNotificationsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_notifications::ListNotificationsError> for Error {
    fn from(err: crate::operation::list_notifications::ListNotificationsError) -> Self {
        match err {
            crate::operation::list_notifications::ListNotificationsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_notifications::ListNotificationsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_notifications::ListNotificationsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_notifications::ListNotificationsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_notifications::ListNotificationsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_notifications::ListNotificationsError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::list_notifications::ListNotificationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_policy_grants::ListPolicyGrantsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_policy_grants::ListPolicyGrantsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_policy_grants::ListPolicyGrantsError> for Error {
    fn from(err: crate::operation::list_policy_grants::ListPolicyGrantsError) -> Self {
        match err {
            crate::operation::list_policy_grants::ListPolicyGrantsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_policy_grants::ListPolicyGrantsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_policy_grants::ListPolicyGrantsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_policy_grants::ListPolicyGrantsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_policy_grants::ListPolicyGrantsError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::list_policy_grants::ListPolicyGrantsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_project_memberships::ListProjectMembershipsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_project_memberships::ListProjectMembershipsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_project_memberships::ListProjectMembershipsError> for Error {
    fn from(err: crate::operation::list_project_memberships::ListProjectMembershipsError) -> Self {
        match err {
            crate::operation::list_project_memberships::ListProjectMembershipsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_project_memberships::ListProjectMembershipsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_project_memberships::ListProjectMembershipsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_project_memberships::ListProjectMembershipsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_project_memberships::ListProjectMembershipsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_project_memberships::ListProjectMembershipsError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::list_project_memberships::ListProjectMembershipsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_project_profiles::ListProjectProfilesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_project_profiles::ListProjectProfilesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_project_profiles::ListProjectProfilesError> for Error {
    fn from(err: crate::operation::list_project_profiles::ListProjectProfilesError) -> Self {
        match err {
            crate::operation::list_project_profiles::ListProjectProfilesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_project_profiles::ListProjectProfilesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_project_profiles::ListProjectProfilesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_project_profiles::ListProjectProfilesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_project_profiles::ListProjectProfilesError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::list_project_profiles::ListProjectProfilesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_projects::ListProjectsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_projects::ListProjectsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_projects::ListProjectsError> for Error {
    fn from(err: crate::operation::list_projects::ListProjectsError) -> Self {
        match err {
            crate::operation::list_projects::ListProjectsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_projects::ListProjectsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_projects::ListProjectsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_projects::ListProjectsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_projects::ListProjectsError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::list_projects::ListProjectsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_rules::ListRulesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_rules::ListRulesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_rules::ListRulesError> for Error {
    fn from(err: crate::operation::list_rules::ListRulesError) -> Self {
        match err {
            crate::operation::list_rules::ListRulesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_rules::ListRulesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_rules::ListRulesError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_rules::ListRulesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_rules::ListRulesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_rules::ListRulesError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::list_rules::ListRulesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_subscription_grants::ListSubscriptionGrantsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_subscription_grants::ListSubscriptionGrantsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_subscription_grants::ListSubscriptionGrantsError> for Error {
    fn from(err: crate::operation::list_subscription_grants::ListSubscriptionGrantsError) -> Self {
        match err {
            crate::operation::list_subscription_grants::ListSubscriptionGrantsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_subscription_grants::ListSubscriptionGrantsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_subscription_grants::ListSubscriptionGrantsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_subscription_grants::ListSubscriptionGrantsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_subscription_grants::ListSubscriptionGrantsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_subscription_grants::ListSubscriptionGrantsError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::list_subscription_grants::ListSubscriptionGrantsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_subscription_requests::ListSubscriptionRequestsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_subscription_requests::ListSubscriptionRequestsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_subscription_requests::ListSubscriptionRequestsError> for Error {
    fn from(err: crate::operation::list_subscription_requests::ListSubscriptionRequestsError) -> Self {
        match err {
            crate::operation::list_subscription_requests::ListSubscriptionRequestsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_subscription_requests::ListSubscriptionRequestsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_subscription_requests::ListSubscriptionRequestsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_subscription_requests::ListSubscriptionRequestsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_subscription_requests::ListSubscriptionRequestsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_subscription_requests::ListSubscriptionRequestsError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::list_subscription_requests::ListSubscriptionRequestsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_subscriptions::ListSubscriptionsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_subscriptions::ListSubscriptionsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_subscriptions::ListSubscriptionsError> for Error {
    fn from(err: crate::operation::list_subscriptions::ListSubscriptionsError) -> Self {
        match err {
            crate::operation::list_subscriptions::ListSubscriptionsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_subscriptions::ListSubscriptionsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_subscriptions::ListSubscriptionsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_subscriptions::ListSubscriptionsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_subscriptions::ListSubscriptionsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_subscriptions::ListSubscriptionsError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::list_subscriptions::ListSubscriptionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_subscription_targets::ListSubscriptionTargetsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_subscription_targets::ListSubscriptionTargetsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_subscription_targets::ListSubscriptionTargetsError> for Error {
    fn from(err: crate::operation::list_subscription_targets::ListSubscriptionTargetsError) -> Self {
        match err {
            crate::operation::list_subscription_targets::ListSubscriptionTargetsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_subscription_targets::ListSubscriptionTargetsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_subscription_targets::ListSubscriptionTargetsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_subscription_targets::ListSubscriptionTargetsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_subscription_targets::ListSubscriptionTargetsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_subscription_targets::ListSubscriptionTargetsError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::list_subscription_targets::ListSubscriptionTargetsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_tags_for_resource::ListTagsForResourceError> for Error {
    fn from(err: crate::operation::list_tags_for_resource::ListTagsForResourceError) -> Self {
        match err {
            crate::operation::list_tags_for_resource::ListTagsForResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_time_series_data_points::ListTimeSeriesDataPointsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_time_series_data_points::ListTimeSeriesDataPointsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_time_series_data_points::ListTimeSeriesDataPointsError> for Error {
    fn from(err: crate::operation::list_time_series_data_points::ListTimeSeriesDataPointsError) -> Self {
        match err {
            crate::operation::list_time_series_data_points::ListTimeSeriesDataPointsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_time_series_data_points::ListTimeSeriesDataPointsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_time_series_data_points::ListTimeSeriesDataPointsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_time_series_data_points::ListTimeSeriesDataPointsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_time_series_data_points::ListTimeSeriesDataPointsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_time_series_data_points::ListTimeSeriesDataPointsError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::list_time_series_data_points::ListTimeSeriesDataPointsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::post_lineage_event::PostLineageEventError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::post_lineage_event::PostLineageEventError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::post_lineage_event::PostLineageEventError> for Error {
    fn from(err: crate::operation::post_lineage_event::PostLineageEventError) -> Self {
        match err {
            crate::operation::post_lineage_event::PostLineageEventError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::post_lineage_event::PostLineageEventError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::post_lineage_event::PostLineageEventError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::post_lineage_event::PostLineageEventError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::post_lineage_event::PostLineageEventError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::post_lineage_event::PostLineageEventError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::post_lineage_event::PostLineageEventError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::post_lineage_event::PostLineageEventError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::post_lineage_event::PostLineageEventError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::post_time_series_data_points::PostTimeSeriesDataPointsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::post_time_series_data_points::PostTimeSeriesDataPointsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::post_time_series_data_points::PostTimeSeriesDataPointsError> for Error {
    fn from(err: crate::operation::post_time_series_data_points::PostTimeSeriesDataPointsError) -> Self {
        match err {
            crate::operation::post_time_series_data_points::PostTimeSeriesDataPointsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::post_time_series_data_points::PostTimeSeriesDataPointsError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::post_time_series_data_points::PostTimeSeriesDataPointsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::post_time_series_data_points::PostTimeSeriesDataPointsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::post_time_series_data_points::PostTimeSeriesDataPointsError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::post_time_series_data_points::PostTimeSeriesDataPointsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::post_time_series_data_points::PostTimeSeriesDataPointsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::post_time_series_data_points::PostTimeSeriesDataPointsError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::post_time_series_data_points::PostTimeSeriesDataPointsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::put_environment_blueprint_configuration::PutEnvironmentBlueprintConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::put_environment_blueprint_configuration::PutEnvironmentBlueprintConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::put_environment_blueprint_configuration::PutEnvironmentBlueprintConfigurationError> for Error {
    fn from(err: crate::operation::put_environment_blueprint_configuration::PutEnvironmentBlueprintConfigurationError) -> Self {
        match err {
            crate::operation::put_environment_blueprint_configuration::PutEnvironmentBlueprintConfigurationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::put_environment_blueprint_configuration::PutEnvironmentBlueprintConfigurationError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::put_environment_blueprint_configuration::PutEnvironmentBlueprintConfigurationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::put_environment_blueprint_configuration::PutEnvironmentBlueprintConfigurationError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::put_environment_blueprint_configuration::PutEnvironmentBlueprintConfigurationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::put_environment_blueprint_configuration::PutEnvironmentBlueprintConfigurationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::put_environment_blueprint_configuration::PutEnvironmentBlueprintConfigurationError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::put_environment_blueprint_configuration::PutEnvironmentBlueprintConfigurationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::reject_predictions::RejectPredictionsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::reject_predictions::RejectPredictionsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::reject_predictions::RejectPredictionsError> for Error {
    fn from(err: crate::operation::reject_predictions::RejectPredictionsError) -> Self {
        match err {
            crate::operation::reject_predictions::RejectPredictionsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::reject_predictions::RejectPredictionsError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::reject_predictions::RejectPredictionsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::reject_predictions::RejectPredictionsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::reject_predictions::RejectPredictionsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::reject_predictions::RejectPredictionsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::reject_predictions::RejectPredictionsError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::reject_predictions::RejectPredictionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::reject_subscription_request::RejectSubscriptionRequestError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::reject_subscription_request::RejectSubscriptionRequestError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::reject_subscription_request::RejectSubscriptionRequestError> for Error {
    fn from(err: crate::operation::reject_subscription_request::RejectSubscriptionRequestError) -> Self {
        match err {
            crate::operation::reject_subscription_request::RejectSubscriptionRequestError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::reject_subscription_request::RejectSubscriptionRequestError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::reject_subscription_request::RejectSubscriptionRequestError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::reject_subscription_request::RejectSubscriptionRequestError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::reject_subscription_request::RejectSubscriptionRequestError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::reject_subscription_request::RejectSubscriptionRequestError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::reject_subscription_request::RejectSubscriptionRequestError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::reject_subscription_request::RejectSubscriptionRequestError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::remove_entity_owner::RemoveEntityOwnerError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::remove_entity_owner::RemoveEntityOwnerError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::remove_entity_owner::RemoveEntityOwnerError> for Error {
    fn from(err: crate::operation::remove_entity_owner::RemoveEntityOwnerError) -> Self {
        match err {
            crate::operation::remove_entity_owner::RemoveEntityOwnerError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::remove_entity_owner::RemoveEntityOwnerError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::remove_entity_owner::RemoveEntityOwnerError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::remove_entity_owner::RemoveEntityOwnerError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::remove_entity_owner::RemoveEntityOwnerError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::remove_entity_owner::RemoveEntityOwnerError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::remove_entity_owner::RemoveEntityOwnerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::remove_policy_grant::RemovePolicyGrantError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::remove_policy_grant::RemovePolicyGrantError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::remove_policy_grant::RemovePolicyGrantError> for Error {
    fn from(err: crate::operation::remove_policy_grant::RemovePolicyGrantError) -> Self {
        match err {
            crate::operation::remove_policy_grant::RemovePolicyGrantError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::remove_policy_grant::RemovePolicyGrantError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::remove_policy_grant::RemovePolicyGrantError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::remove_policy_grant::RemovePolicyGrantError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::remove_policy_grant::RemovePolicyGrantError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::remove_policy_grant::RemovePolicyGrantError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::revoke_subscription::RevokeSubscriptionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::revoke_subscription::RevokeSubscriptionError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::revoke_subscription::RevokeSubscriptionError> for Error {
    fn from(err: crate::operation::revoke_subscription::RevokeSubscriptionError) -> Self {
        match err {
            crate::operation::revoke_subscription::RevokeSubscriptionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::revoke_subscription::RevokeSubscriptionError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::revoke_subscription::RevokeSubscriptionError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::revoke_subscription::RevokeSubscriptionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::revoke_subscription::RevokeSubscriptionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::revoke_subscription::RevokeSubscriptionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::revoke_subscription::RevokeSubscriptionError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::revoke_subscription::RevokeSubscriptionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::search::SearchError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::search::SearchError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::search::SearchError> for Error {
    fn from(err: crate::operation::search::SearchError) -> Self {
        match err {
            crate::operation::search::SearchError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::search::SearchError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::search::SearchError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::search::SearchError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::search::SearchError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::search::SearchError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::search_group_profiles::SearchGroupProfilesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::search_group_profiles::SearchGroupProfilesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::search_group_profiles::SearchGroupProfilesError> for Error {
    fn from(err: crate::operation::search_group_profiles::SearchGroupProfilesError) -> Self {
        match err {
            crate::operation::search_group_profiles::SearchGroupProfilesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::search_group_profiles::SearchGroupProfilesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::search_group_profiles::SearchGroupProfilesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::search_group_profiles::SearchGroupProfilesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::search_group_profiles::SearchGroupProfilesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::search_group_profiles::SearchGroupProfilesError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::search_group_profiles::SearchGroupProfilesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::search_listings::SearchListingsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::search_listings::SearchListingsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::search_listings::SearchListingsError> for Error {
    fn from(err: crate::operation::search_listings::SearchListingsError) -> Self {
        match err {
            crate::operation::search_listings::SearchListingsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::search_listings::SearchListingsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::search_listings::SearchListingsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::search_listings::SearchListingsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::search_listings::SearchListingsError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::search_listings::SearchListingsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::search_types::SearchTypesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::search_types::SearchTypesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::search_types::SearchTypesError> for Error {
    fn from(err: crate::operation::search_types::SearchTypesError) -> Self {
        match err {
            crate::operation::search_types::SearchTypesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::search_types::SearchTypesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::search_types::SearchTypesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::search_types::SearchTypesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::search_types::SearchTypesError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::search_types::SearchTypesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::search_user_profiles::SearchUserProfilesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::search_user_profiles::SearchUserProfilesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::search_user_profiles::SearchUserProfilesError> for Error {
    fn from(err: crate::operation::search_user_profiles::SearchUserProfilesError) -> Self {
        match err {
            crate::operation::search_user_profiles::SearchUserProfilesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::search_user_profiles::SearchUserProfilesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::search_user_profiles::SearchUserProfilesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::search_user_profiles::SearchUserProfilesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::search_user_profiles::SearchUserProfilesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::search_user_profiles::SearchUserProfilesError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::search_user_profiles::SearchUserProfilesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_data_source_run::StartDataSourceRunError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_data_source_run::StartDataSourceRunError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::start_data_source_run::StartDataSourceRunError> for Error {
    fn from(err: crate::operation::start_data_source_run::StartDataSourceRunError) -> Self {
        match err {
            crate::operation::start_data_source_run::StartDataSourceRunError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::start_data_source_run::StartDataSourceRunError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::start_data_source_run::StartDataSourceRunError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::start_data_source_run::StartDataSourceRunError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::start_data_source_run::StartDataSourceRunError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::start_data_source_run::StartDataSourceRunError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::start_data_source_run::StartDataSourceRunError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::start_data_source_run::StartDataSourceRunError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::start_data_source_run::StartDataSourceRunError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_metadata_generation_run::StartMetadataGenerationRunError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_metadata_generation_run::StartMetadataGenerationRunError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::start_metadata_generation_run::StartMetadataGenerationRunError> for Error {
    fn from(err: crate::operation::start_metadata_generation_run::StartMetadataGenerationRunError) -> Self {
        match err {
            crate::operation::start_metadata_generation_run::StartMetadataGenerationRunError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::start_metadata_generation_run::StartMetadataGenerationRunError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::start_metadata_generation_run::StartMetadataGenerationRunError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::start_metadata_generation_run::StartMetadataGenerationRunError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::start_metadata_generation_run::StartMetadataGenerationRunError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::start_metadata_generation_run::StartMetadataGenerationRunError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::start_metadata_generation_run::StartMetadataGenerationRunError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::start_metadata_generation_run::StartMetadataGenerationRunError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::start_metadata_generation_run::StartMetadataGenerationRunError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::tag_resource::TagResourceError> for Error {
    fn from(err: crate::operation::tag_resource::TagResourceError) -> Self {
        match err {
            crate::operation::tag_resource::TagResourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::tag_resource::TagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::tag_resource::TagResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::tag_resource::TagResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::tag_resource::TagResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::tag_resource::TagResourceError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::tag_resource::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::untag_resource::UntagResourceError> for Error {
    fn from(err: crate::operation::untag_resource::UntagResourceError) -> Self {
        match err {
            crate::operation::untag_resource::UntagResourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::untag_resource::UntagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::untag_resource::UntagResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::untag_resource::UntagResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::untag_resource::UntagResourceError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::untag_resource::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_account_pool::UpdateAccountPoolError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_account_pool::UpdateAccountPoolError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_account_pool::UpdateAccountPoolError> for Error {
    fn from(err: crate::operation::update_account_pool::UpdateAccountPoolError) -> Self {
        match err {
            crate::operation::update_account_pool::UpdateAccountPoolError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_account_pool::UpdateAccountPoolError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_account_pool::UpdateAccountPoolError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_account_pool::UpdateAccountPoolError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_account_pool::UpdateAccountPoolError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::update_account_pool::UpdateAccountPoolError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_account_pool::UpdateAccountPoolError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_account_pool::UpdateAccountPoolError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::update_account_pool::UpdateAccountPoolError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_asset_filter::UpdateAssetFilterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_asset_filter::UpdateAssetFilterError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_asset_filter::UpdateAssetFilterError> for Error {
    fn from(err: crate::operation::update_asset_filter::UpdateAssetFilterError) -> Self {
        match err {
            crate::operation::update_asset_filter::UpdateAssetFilterError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_asset_filter::UpdateAssetFilterError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_asset_filter::UpdateAssetFilterError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_asset_filter::UpdateAssetFilterError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_asset_filter::UpdateAssetFilterError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_asset_filter::UpdateAssetFilterError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_asset_filter::UpdateAssetFilterError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::update_asset_filter::UpdateAssetFilterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_connection::UpdateConnectionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_connection::UpdateConnectionError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_connection::UpdateConnectionError> for Error {
    fn from(err: crate::operation::update_connection::UpdateConnectionError) -> Self {
        match err {
            crate::operation::update_connection::UpdateConnectionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_connection::UpdateConnectionError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_connection::UpdateConnectionError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_connection::UpdateConnectionError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_connection::UpdateConnectionError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::update_connection::UpdateConnectionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_connection::UpdateConnectionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_connection::UpdateConnectionError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::update_connection::UpdateConnectionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_data_source::UpdateDataSourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_data_source::UpdateDataSourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_data_source::UpdateDataSourceError> for Error {
    fn from(err: crate::operation::update_data_source::UpdateDataSourceError) -> Self {
        match err {
            crate::operation::update_data_source::UpdateDataSourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_data_source::UpdateDataSourceError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_data_source::UpdateDataSourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_data_source::UpdateDataSourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_data_source::UpdateDataSourceError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::update_data_source::UpdateDataSourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_data_source::UpdateDataSourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_data_source::UpdateDataSourceError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::update_data_source::UpdateDataSourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_domain::UpdateDomainError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_domain::UpdateDomainError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_domain::UpdateDomainError> for Error {
    fn from(err: crate::operation::update_domain::UpdateDomainError) -> Self {
        match err {
            crate::operation::update_domain::UpdateDomainError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_domain::UpdateDomainError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_domain::UpdateDomainError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_domain::UpdateDomainError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_domain::UpdateDomainError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::update_domain::UpdateDomainError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_domain::UpdateDomainError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_domain::UpdateDomainError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::update_domain::UpdateDomainError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_domain_unit::UpdateDomainUnitError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_domain_unit::UpdateDomainUnitError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_domain_unit::UpdateDomainUnitError> for Error {
    fn from(err: crate::operation::update_domain_unit::UpdateDomainUnitError) -> Self {
        match err {
            crate::operation::update_domain_unit::UpdateDomainUnitError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_domain_unit::UpdateDomainUnitError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_domain_unit::UpdateDomainUnitError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_domain_unit::UpdateDomainUnitError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_domain_unit::UpdateDomainUnitError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_domain_unit::UpdateDomainUnitError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_domain_unit::UpdateDomainUnitError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::update_domain_unit::UpdateDomainUnitError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_environment::UpdateEnvironmentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_environment::UpdateEnvironmentError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_environment::UpdateEnvironmentError> for Error {
    fn from(err: crate::operation::update_environment::UpdateEnvironmentError) -> Self {
        match err {
            crate::operation::update_environment::UpdateEnvironmentError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_environment::UpdateEnvironmentError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_environment::UpdateEnvironmentError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_environment::UpdateEnvironmentError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::update_environment::UpdateEnvironmentError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_environment::UpdateEnvironmentError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_environment::UpdateEnvironmentError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::update_environment::UpdateEnvironmentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_environment_action::UpdateEnvironmentActionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_environment_action::UpdateEnvironmentActionError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_environment_action::UpdateEnvironmentActionError> for Error {
    fn from(err: crate::operation::update_environment_action::UpdateEnvironmentActionError) -> Self {
        match err {
            crate::operation::update_environment_action::UpdateEnvironmentActionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_environment_action::UpdateEnvironmentActionError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_environment_action::UpdateEnvironmentActionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_environment_action::UpdateEnvironmentActionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_environment_action::UpdateEnvironmentActionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::update_environment_action::UpdateEnvironmentActionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::update_environment_action::UpdateEnvironmentActionError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::update_environment_action::UpdateEnvironmentActionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_environment_profile::UpdateEnvironmentProfileError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_environment_profile::UpdateEnvironmentProfileError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_environment_profile::UpdateEnvironmentProfileError> for Error {
    fn from(err: crate::operation::update_environment_profile::UpdateEnvironmentProfileError) -> Self {
        match err {
            crate::operation::update_environment_profile::UpdateEnvironmentProfileError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_environment_profile::UpdateEnvironmentProfileError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_environment_profile::UpdateEnvironmentProfileError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_environment_profile::UpdateEnvironmentProfileError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_environment_profile::UpdateEnvironmentProfileError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::update_environment_profile::UpdateEnvironmentProfileError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::update_environment_profile::UpdateEnvironmentProfileError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::update_environment_profile::UpdateEnvironmentProfileError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::update_environment_profile::UpdateEnvironmentProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_glossary::UpdateGlossaryError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_glossary::UpdateGlossaryError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_glossary::UpdateGlossaryError> for Error {
    fn from(err: crate::operation::update_glossary::UpdateGlossaryError) -> Self {
        match err {
            crate::operation::update_glossary::UpdateGlossaryError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_glossary::UpdateGlossaryError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_glossary::UpdateGlossaryError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_glossary::UpdateGlossaryError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_glossary::UpdateGlossaryError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_glossary::UpdateGlossaryError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_glossary::UpdateGlossaryError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::update_glossary::UpdateGlossaryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_glossary_term::UpdateGlossaryTermError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_glossary_term::UpdateGlossaryTermError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_glossary_term::UpdateGlossaryTermError> for Error {
    fn from(err: crate::operation::update_glossary_term::UpdateGlossaryTermError) -> Self {
        match err {
            crate::operation::update_glossary_term::UpdateGlossaryTermError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_glossary_term::UpdateGlossaryTermError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_glossary_term::UpdateGlossaryTermError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_glossary_term::UpdateGlossaryTermError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_glossary_term::UpdateGlossaryTermError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_glossary_term::UpdateGlossaryTermError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_glossary_term::UpdateGlossaryTermError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::update_glossary_term::UpdateGlossaryTermError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_group_profile::UpdateGroupProfileError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_group_profile::UpdateGroupProfileError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_group_profile::UpdateGroupProfileError> for Error {
    fn from(err: crate::operation::update_group_profile::UpdateGroupProfileError) -> Self {
        match err {
            crate::operation::update_group_profile::UpdateGroupProfileError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_group_profile::UpdateGroupProfileError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_group_profile::UpdateGroupProfileError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_group_profile::UpdateGroupProfileError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_group_profile::UpdateGroupProfileError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_group_profile::UpdateGroupProfileError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::update_group_profile::UpdateGroupProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_project::UpdateProjectError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_project::UpdateProjectError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_project::UpdateProjectError> for Error {
    fn from(err: crate::operation::update_project::UpdateProjectError) -> Self {
        match err {
            crate::operation::update_project::UpdateProjectError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_project::UpdateProjectError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_project::UpdateProjectError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_project::UpdateProjectError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_project::UpdateProjectError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::update_project::UpdateProjectError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_project::UpdateProjectError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_project::UpdateProjectError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::update_project::UpdateProjectError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_project_profile::UpdateProjectProfileError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_project_profile::UpdateProjectProfileError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_project_profile::UpdateProjectProfileError> for Error {
    fn from(err: crate::operation::update_project_profile::UpdateProjectProfileError) -> Self {
        match err {
            crate::operation::update_project_profile::UpdateProjectProfileError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_project_profile::UpdateProjectProfileError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_project_profile::UpdateProjectProfileError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_project_profile::UpdateProjectProfileError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_project_profile::UpdateProjectProfileError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::update_project_profile::UpdateProjectProfileError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_project_profile::UpdateProjectProfileError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_project_profile::UpdateProjectProfileError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::update_project_profile::UpdateProjectProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_rule::UpdateRuleError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_rule::UpdateRuleError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_rule::UpdateRuleError> for Error {
    fn from(err: crate::operation::update_rule::UpdateRuleError) -> Self {
        match err {
            crate::operation::update_rule::UpdateRuleError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_rule::UpdateRuleError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_rule::UpdateRuleError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_rule::UpdateRuleError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_rule::UpdateRuleError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::update_rule::UpdateRuleError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_rule::UpdateRuleError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_rule::UpdateRuleError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::update_rule::UpdateRuleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_subscription_grant_status::UpdateSubscriptionGrantStatusError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_subscription_grant_status::UpdateSubscriptionGrantStatusError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_subscription_grant_status::UpdateSubscriptionGrantStatusError> for Error {
    fn from(err: crate::operation::update_subscription_grant_status::UpdateSubscriptionGrantStatusError) -> Self {
        match err {
            crate::operation::update_subscription_grant_status::UpdateSubscriptionGrantStatusError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_subscription_grant_status::UpdateSubscriptionGrantStatusError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::update_subscription_grant_status::UpdateSubscriptionGrantStatusError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_subscription_grant_status::UpdateSubscriptionGrantStatusError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_subscription_grant_status::UpdateSubscriptionGrantStatusError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::update_subscription_grant_status::UpdateSubscriptionGrantStatusError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::update_subscription_grant_status::UpdateSubscriptionGrantStatusError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::update_subscription_grant_status::UpdateSubscriptionGrantStatusError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_subscription_request::UpdateSubscriptionRequestError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_subscription_request::UpdateSubscriptionRequestError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_subscription_request::UpdateSubscriptionRequestError> for Error {
    fn from(err: crate::operation::update_subscription_request::UpdateSubscriptionRequestError) -> Self {
        match err {
            crate::operation::update_subscription_request::UpdateSubscriptionRequestError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_subscription_request::UpdateSubscriptionRequestError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::update_subscription_request::UpdateSubscriptionRequestError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_subscription_request::UpdateSubscriptionRequestError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_subscription_request::UpdateSubscriptionRequestError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::update_subscription_request::UpdateSubscriptionRequestError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::update_subscription_request::UpdateSubscriptionRequestError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::update_subscription_request::UpdateSubscriptionRequestError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_subscription_target::UpdateSubscriptionTargetError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_subscription_target::UpdateSubscriptionTargetError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_subscription_target::UpdateSubscriptionTargetError> for Error {
    fn from(err: crate::operation::update_subscription_target::UpdateSubscriptionTargetError) -> Self {
        match err {
            crate::operation::update_subscription_target::UpdateSubscriptionTargetError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_subscription_target::UpdateSubscriptionTargetError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_subscription_target::UpdateSubscriptionTargetError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_subscription_target::UpdateSubscriptionTargetError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_subscription_target::UpdateSubscriptionTargetError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::update_subscription_target::UpdateSubscriptionTargetError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::update_subscription_target::UpdateSubscriptionTargetError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::update_subscription_target::UpdateSubscriptionTargetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_user_profile::UpdateUserProfileError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_user_profile::UpdateUserProfileError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_user_profile::UpdateUserProfileError> for Error {
    fn from(err: crate::operation::update_user_profile::UpdateUserProfileError) -> Self {
        match err {
            crate::operation::update_user_profile::UpdateUserProfileError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_user_profile::UpdateUserProfileError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_user_profile::UpdateUserProfileError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_user_profile::UpdateUserProfileError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_user_profile::UpdateUserProfileError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_user_profile::UpdateUserProfileError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::update_user_profile::UpdateUserProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl ::std::error::Error for Error {
    fn source(&self) -> std::option::Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            Error::AccessDeniedException(inner) => inner.source(),
            Error::ConflictException(inner) => inner.source(),
            Error::InternalServerException(inner) => inner.source(),
            Error::ResourceNotFoundException(inner) => inner.source(),
            Error::ServiceQuotaExceededException(inner) => inner.source(),
            Error::ThrottlingException(inner) => inner.source(),
            Error::UnauthorizedException(inner) => inner.source(),
            Error::ValidationException(inner) => inner.source(),
            Error::Unhandled(inner) => ::std::option::Option::Some(&*inner.source),
        }
    }
}
impl ::aws_types::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ServiceQuotaExceededException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::UnauthorizedException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.meta.request_id(),
        }
    }
}
