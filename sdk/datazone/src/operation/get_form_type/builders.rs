// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::get_form_type::_get_form_type_output::GetFormTypeOutputBuilder;

pub use crate::operation::get_form_type::_get_form_type_input::GetFormTypeInputBuilder;

impl crate::operation::get_form_type::builders::GetFormTypeInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::get_form_type::GetFormTypeOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_form_type::GetFormTypeError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.get_form_type();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `GetFormType`.
///
/// <p>Gets a metadata form type in Amazon DataZone.</p>
/// <p>Form types define the structure and validation rules for collecting metadata about assets in Amazon DataZone. They act as templates that ensure consistent metadata capture across similar types of assets, while allowing for customization to meet specific organizational needs. Form types can include required fields, validation rules, and dependencies, helping maintain high-quality metadata that makes data assets more discoverable and usable.</p>
/// <ul>
/// <li>
/// <p>The form type with the specified identifier must exist in the given domain.</p></li>
/// <li>
/// <p>The domain must be valid and active.</p></li>
/// <li>
/// <p>User must have permission on the form type.</p></li>
/// <li>
/// <p>The form type should not be deleted or in an invalid state.</p></li>
/// </ul>
/// <p>One use case for this API is to determine whether a form field is indexed for search.</p>
/// <p>A searchable field will be annotated with <code>@amazon.datazone#searchable</code>. By default, searchable fields are indexed for semantic search, where related query terms will match the attribute value even if they are not stemmed or keyword matches. If a field is indexed technical identifier search, it will be annotated with <code>@amazon.datazone#searchable(modes:\["TECHNICAL"\])</code>. If a field is indexed for lexical search (supports stemmed and prefix matches but not semantic matches), it will be annotated with <code>@amazon.datazone#searchable(modes:\["LEXICAL"\])</code>.</p>
/// <p>A field storing glossary term IDs (which is filterable) will be annotated with <code>@amazon.datazone#glossaryterm("${glossaryId}")</code>.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct GetFormTypeFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::get_form_type::builders::GetFormTypeInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::get_form_type::GetFormTypeOutput,
        crate::operation::get_form_type::GetFormTypeError,
    > for GetFormTypeFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::get_form_type::GetFormTypeOutput,
            crate::operation::get_form_type::GetFormTypeError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl GetFormTypeFluentBuilder {
    /// Creates a new `GetFormTypeFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the GetFormType as a reference.
    pub fn as_input(&self) -> &crate::operation::get_form_type::builders::GetFormTypeInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_form_type::GetFormTypeOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_form_type::GetFormTypeError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::get_form_type::GetFormType::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::get_form_type::GetFormType::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::get_form_type::GetFormTypeOutput,
        crate::operation::get_form_type::GetFormTypeError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The ID of the Amazon DataZone domain in which this metadata form type exists.</p>
    pub fn domain_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.domain_identifier(input.into());
        self
    }
    /// <p>The ID of the Amazon DataZone domain in which this metadata form type exists.</p>
    pub fn set_domain_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_domain_identifier(input);
        self
    }
    /// <p>The ID of the Amazon DataZone domain in which this metadata form type exists.</p>
    pub fn get_domain_identifier(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_domain_identifier()
    }
    /// <p>The ID of the metadata form type.</p>
    pub fn form_type_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.form_type_identifier(input.into());
        self
    }
    /// <p>The ID of the metadata form type.</p>
    pub fn set_form_type_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_form_type_identifier(input);
        self
    }
    /// <p>The ID of the metadata form type.</p>
    pub fn get_form_type_identifier(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_form_type_identifier()
    }
    /// <p>The revision of this metadata form type.</p>
    pub fn revision(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.revision(input.into());
        self
    }
    /// <p>The revision of this metadata form type.</p>
    pub fn set_revision(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_revision(input);
        self
    }
    /// <p>The revision of this metadata form type.</p>
    pub fn get_revision(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_revision()
    }
}
