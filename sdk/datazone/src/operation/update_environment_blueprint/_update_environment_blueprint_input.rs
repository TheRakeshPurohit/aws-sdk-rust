// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateEnvironmentBlueprintInput {
    /// <p>The identifier of the Amazon DataZone domain in which an environment blueprint is to be updated.</p>
    pub domain_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the environment blueprint to be updated.</p>
    pub identifier: ::std::option::Option<::std::string::String>,
    /// <p>The description to be updated as part of the <code>UpdateEnvironmentBlueprint</code> action.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The provisioning properties to be updated as part of the <code>UpdateEnvironmentBlueprint</code> action.</p>
    pub provisioning_properties: ::std::option::Option<crate::types::ProvisioningProperties>,
    /// <p>The user parameters to be updated as part of the <code>UpdateEnvironmentBlueprint</code> action.</p>
    pub user_parameters: ::std::option::Option<::std::vec::Vec<crate::types::CustomParameter>>,
}
impl UpdateEnvironmentBlueprintInput {
    /// <p>The identifier of the Amazon DataZone domain in which an environment blueprint is to be updated.</p>
    pub fn domain_identifier(&self) -> ::std::option::Option<&str> {
        self.domain_identifier.as_deref()
    }
    /// <p>The identifier of the environment blueprint to be updated.</p>
    pub fn identifier(&self) -> ::std::option::Option<&str> {
        self.identifier.as_deref()
    }
    /// <p>The description to be updated as part of the <code>UpdateEnvironmentBlueprint</code> action.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The provisioning properties to be updated as part of the <code>UpdateEnvironmentBlueprint</code> action.</p>
    pub fn provisioning_properties(&self) -> ::std::option::Option<&crate::types::ProvisioningProperties> {
        self.provisioning_properties.as_ref()
    }
    /// <p>The user parameters to be updated as part of the <code>UpdateEnvironmentBlueprint</code> action.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.user_parameters.is_none()`.
    pub fn user_parameters(&self) -> &[crate::types::CustomParameter] {
        self.user_parameters.as_deref().unwrap_or_default()
    }
}
impl UpdateEnvironmentBlueprintInput {
    /// Creates a new builder-style object to manufacture [`UpdateEnvironmentBlueprintInput`](crate::operation::update_environment_blueprint::UpdateEnvironmentBlueprintInput).
    pub fn builder() -> crate::operation::update_environment_blueprint::builders::UpdateEnvironmentBlueprintInputBuilder {
        crate::operation::update_environment_blueprint::builders::UpdateEnvironmentBlueprintInputBuilder::default()
    }
}

/// A builder for [`UpdateEnvironmentBlueprintInput`](crate::operation::update_environment_blueprint::UpdateEnvironmentBlueprintInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateEnvironmentBlueprintInputBuilder {
    pub(crate) domain_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) identifier: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) provisioning_properties: ::std::option::Option<crate::types::ProvisioningProperties>,
    pub(crate) user_parameters: ::std::option::Option<::std::vec::Vec<crate::types::CustomParameter>>,
}
impl UpdateEnvironmentBlueprintInputBuilder {
    /// <p>The identifier of the Amazon DataZone domain in which an environment blueprint is to be updated.</p>
    /// This field is required.
    pub fn domain_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the Amazon DataZone domain in which an environment blueprint is to be updated.</p>
    pub fn set_domain_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_identifier = input;
        self
    }
    /// <p>The identifier of the Amazon DataZone domain in which an environment blueprint is to be updated.</p>
    pub fn get_domain_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_identifier
    }
    /// <p>The identifier of the environment blueprint to be updated.</p>
    /// This field is required.
    pub fn identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the environment blueprint to be updated.</p>
    pub fn set_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.identifier = input;
        self
    }
    /// <p>The identifier of the environment blueprint to be updated.</p>
    pub fn get_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.identifier
    }
    /// <p>The description to be updated as part of the <code>UpdateEnvironmentBlueprint</code> action.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description to be updated as part of the <code>UpdateEnvironmentBlueprint</code> action.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description to be updated as part of the <code>UpdateEnvironmentBlueprint</code> action.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The provisioning properties to be updated as part of the <code>UpdateEnvironmentBlueprint</code> action.</p>
    pub fn provisioning_properties(mut self, input: crate::types::ProvisioningProperties) -> Self {
        self.provisioning_properties = ::std::option::Option::Some(input);
        self
    }
    /// <p>The provisioning properties to be updated as part of the <code>UpdateEnvironmentBlueprint</code> action.</p>
    pub fn set_provisioning_properties(mut self, input: ::std::option::Option<crate::types::ProvisioningProperties>) -> Self {
        self.provisioning_properties = input;
        self
    }
    /// <p>The provisioning properties to be updated as part of the <code>UpdateEnvironmentBlueprint</code> action.</p>
    pub fn get_provisioning_properties(&self) -> &::std::option::Option<crate::types::ProvisioningProperties> {
        &self.provisioning_properties
    }
    /// Appends an item to `user_parameters`.
    ///
    /// To override the contents of this collection use [`set_user_parameters`](Self::set_user_parameters).
    ///
    /// <p>The user parameters to be updated as part of the <code>UpdateEnvironmentBlueprint</code> action.</p>
    pub fn user_parameters(mut self, input: crate::types::CustomParameter) -> Self {
        let mut v = self.user_parameters.unwrap_or_default();
        v.push(input);
        self.user_parameters = ::std::option::Option::Some(v);
        self
    }
    /// <p>The user parameters to be updated as part of the <code>UpdateEnvironmentBlueprint</code> action.</p>
    pub fn set_user_parameters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::CustomParameter>>) -> Self {
        self.user_parameters = input;
        self
    }
    /// <p>The user parameters to be updated as part of the <code>UpdateEnvironmentBlueprint</code> action.</p>
    pub fn get_user_parameters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CustomParameter>> {
        &self.user_parameters
    }
    /// Consumes the builder and constructs a [`UpdateEnvironmentBlueprintInput`](crate::operation::update_environment_blueprint::UpdateEnvironmentBlueprintInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_environment_blueprint::UpdateEnvironmentBlueprintInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::update_environment_blueprint::UpdateEnvironmentBlueprintInput {
            domain_identifier: self.domain_identifier,
            identifier: self.identifier,
            description: self.description,
            provisioning_properties: self.provisioning_properties,
            user_parameters: self.user_parameters,
        })
    }
}
