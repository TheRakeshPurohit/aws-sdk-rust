// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines the rules by which an image pipeline is automatically disabled when it fails.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AutoDisablePolicy {
    /// <p>The number of consecutive scheduled image pipeline executions that must fail before Image Builder automatically disables the pipeline.</p>
    pub failure_count: i32,
}
impl AutoDisablePolicy {
    /// <p>The number of consecutive scheduled image pipeline executions that must fail before Image Builder automatically disables the pipeline.</p>
    pub fn failure_count(&self) -> i32 {
        self.failure_count
    }
}
impl AutoDisablePolicy {
    /// Creates a new builder-style object to manufacture [`AutoDisablePolicy`](crate::types::AutoDisablePolicy).
    pub fn builder() -> crate::types::builders::AutoDisablePolicyBuilder {
        crate::types::builders::AutoDisablePolicyBuilder::default()
    }
}

/// A builder for [`AutoDisablePolicy`](crate::types::AutoDisablePolicy).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AutoDisablePolicyBuilder {
    pub(crate) failure_count: ::std::option::Option<i32>,
}
impl AutoDisablePolicyBuilder {
    /// <p>The number of consecutive scheduled image pipeline executions that must fail before Image Builder automatically disables the pipeline.</p>
    /// This field is required.
    pub fn failure_count(mut self, input: i32) -> Self {
        self.failure_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of consecutive scheduled image pipeline executions that must fail before Image Builder automatically disables the pipeline.</p>
    pub fn set_failure_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.failure_count = input;
        self
    }
    /// <p>The number of consecutive scheduled image pipeline executions that must fail before Image Builder automatically disables the pipeline.</p>
    pub fn get_failure_count(&self) -> &::std::option::Option<i32> {
        &self.failure_count
    }
    /// Consumes the builder and constructs a [`AutoDisablePolicy`](crate::types::AutoDisablePolicy).
    /// This method will fail if any of the following fields are not set:
    /// - [`failure_count`](crate::types::builders::AutoDisablePolicyBuilder::failure_count)
    pub fn build(self) -> ::std::result::Result<crate::types::AutoDisablePolicy, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AutoDisablePolicy {
            failure_count: self.failure_count.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "failure_count",
                    "failure_count was not specified but it is required when building AutoDisablePolicy",
                )
            })?,
        })
    }
}
