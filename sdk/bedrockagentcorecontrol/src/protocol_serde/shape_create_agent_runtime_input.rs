// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_agent_runtime_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_agent_runtime::CreateAgentRuntimeInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.agent_runtime_artifact {
        #[allow(unused_mut)]
        let mut object_2 = object.key("agentRuntimeArtifact").start_object();
        crate::protocol_serde::shape_agent_runtime_artifact::ser_agent_runtime_artifact(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.agent_runtime_name {
        object.key("agentRuntimeName").string(var_3.as_str());
    }
    if let Some(var_4) = &input.authorizer_configuration {
        #[allow(unused_mut)]
        let mut object_5 = object.key("authorizerConfiguration").start_object();
        crate::protocol_serde::shape_authorizer_configuration::ser_authorizer_configuration(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.client_token {
        object.key("clientToken").string(var_6.as_str());
    }
    if let Some(var_7) = &input.description {
        object.key("description").string(var_7.as_str());
    }
    if let Some(var_8) = &input.environment_variables {
        #[allow(unused_mut)]
        let mut object_9 = object.key("environmentVariables").start_object();
        for (key_10, value_11) in var_8 {
            {
                object_9.key(key_10.as_str()).string(value_11.as_str());
            }
        }
        object_9.finish();
    }
    if let Some(var_12) = &input.lifecycle_configuration {
        #[allow(unused_mut)]
        let mut object_13 = object.key("lifecycleConfiguration").start_object();
        crate::protocol_serde::shape_lifecycle_configuration::ser_lifecycle_configuration(&mut object_13, var_12)?;
        object_13.finish();
    }
    if let Some(var_14) = &input.network_configuration {
        #[allow(unused_mut)]
        let mut object_15 = object.key("networkConfiguration").start_object();
        crate::protocol_serde::shape_network_configuration::ser_network_configuration(&mut object_15, var_14)?;
        object_15.finish();
    }
    if let Some(var_16) = &input.protocol_configuration {
        #[allow(unused_mut)]
        let mut object_17 = object.key("protocolConfiguration").start_object();
        crate::protocol_serde::shape_protocol_configuration::ser_protocol_configuration(&mut object_17, var_16)?;
        object_17.finish();
    }
    if let Some(var_18) = &input.request_header_configuration {
        #[allow(unused_mut)]
        let mut object_19 = object.key("requestHeaderConfiguration").start_object();
        crate::protocol_serde::shape_request_header_configuration::ser_request_header_configuration(&mut object_19, var_18)?;
        object_19.finish();
    }
    if let Some(var_20) = &input.role_arn {
        object.key("roleArn").string(var_20.as_str());
    }
    if let Some(var_21) = &input.tags {
        #[allow(unused_mut)]
        let mut object_22 = object.key("tags").start_object();
        for (key_23, value_24) in var_21 {
            {
                object_22.key(key_23.as_str()).string(value_24.as_str());
            }
        }
        object_22.finish();
    }
    Ok(())
}
