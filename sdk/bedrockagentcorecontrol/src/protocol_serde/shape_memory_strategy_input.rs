// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_memory_strategy_input(
    object_9: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::MemoryStrategyInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    match input {
        crate::types::MemoryStrategyInput::SemanticMemoryStrategy(inner) => {
            #[allow(unused_mut)]
            let mut object_1 = object_9.key("semanticMemoryStrategy").start_object();
            crate::protocol_serde::shape_semantic_memory_strategy_input::ser_semantic_memory_strategy_input(&mut object_1, inner)?;
            object_1.finish();
        }
        crate::types::MemoryStrategyInput::SummaryMemoryStrategy(inner) => {
            #[allow(unused_mut)]
            let mut object_2 = object_9.key("summaryMemoryStrategy").start_object();
            crate::protocol_serde::shape_summary_memory_strategy_input::ser_summary_memory_strategy_input(&mut object_2, inner)?;
            object_2.finish();
        }
        crate::types::MemoryStrategyInput::UserPreferenceMemoryStrategy(inner) => {
            #[allow(unused_mut)]
            let mut object_3 = object_9.key("userPreferenceMemoryStrategy").start_object();
            crate::protocol_serde::shape_user_preference_memory_strategy_input::ser_user_preference_memory_strategy_input(&mut object_3, inner)?;
            object_3.finish();
        }
        crate::types::MemoryStrategyInput::CustomMemoryStrategy(inner) => {
            #[allow(unused_mut)]
            let mut object_4 = object_9.key("customMemoryStrategy").start_object();
            crate::protocol_serde::shape_custom_memory_strategy_input::ser_custom_memory_strategy_input(&mut object_4, inner)?;
            object_4.finish();
        }
        crate::types::MemoryStrategyInput::Unknown => {
            return Err(::aws_smithy_types::error::operation::SerializationError::unknown_variant(
                "MemoryStrategyInput",
            ))
        }
    }
    Ok(())
}
