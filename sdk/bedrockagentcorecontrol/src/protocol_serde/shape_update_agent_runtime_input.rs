// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_agent_runtime_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_agent_runtime::UpdateAgentRuntimeInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.agent_runtime_artifact {
        #[allow(unused_mut)]
        let mut object_2 = object.key("agentRuntimeArtifact").start_object();
        crate::protocol_serde::shape_agent_runtime_artifact::ser_agent_runtime_artifact(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.authorizer_configuration {
        #[allow(unused_mut)]
        let mut object_4 = object.key("authorizerConfiguration").start_object();
        crate::protocol_serde::shape_authorizer_configuration::ser_authorizer_configuration(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.client_token {
        object.key("clientToken").string(var_5.as_str());
    }
    if let Some(var_6) = &input.description {
        object.key("description").string(var_6.as_str());
    }
    if let Some(var_7) = &input.environment_variables {
        #[allow(unused_mut)]
        let mut object_8 = object.key("environmentVariables").start_object();
        for (key_9, value_10) in var_7 {
            {
                object_8.key(key_9.as_str()).string(value_10.as_str());
            }
        }
        object_8.finish();
    }
    if let Some(var_11) = &input.lifecycle_configuration {
        #[allow(unused_mut)]
        let mut object_12 = object.key("lifecycleConfiguration").start_object();
        crate::protocol_serde::shape_lifecycle_configuration::ser_lifecycle_configuration(&mut object_12, var_11)?;
        object_12.finish();
    }
    if let Some(var_13) = &input.network_configuration {
        #[allow(unused_mut)]
        let mut object_14 = object.key("networkConfiguration").start_object();
        crate::protocol_serde::shape_network_configuration::ser_network_configuration(&mut object_14, var_13)?;
        object_14.finish();
    }
    if let Some(var_15) = &input.protocol_configuration {
        #[allow(unused_mut)]
        let mut object_16 = object.key("protocolConfiguration").start_object();
        crate::protocol_serde::shape_protocol_configuration::ser_protocol_configuration(&mut object_16, var_15)?;
        object_16.finish();
    }
    if let Some(var_17) = &input.request_header_configuration {
        #[allow(unused_mut)]
        let mut object_18 = object.key("requestHeaderConfiguration").start_object();
        crate::protocol_serde::shape_request_header_configuration::ser_request_header_configuration(&mut object_18, var_17)?;
        object_18.finish();
    }
    if let Some(var_19) = &input.role_arn {
        object.key("roleArn").string(var_19.as_str());
    }
    Ok(())
}
