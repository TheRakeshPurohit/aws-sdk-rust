// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_gateway_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_gateway::CreateGatewayInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.authorizer_configuration {
        #[allow(unused_mut)]
        let mut object_2 = object.key("authorizerConfiguration").start_object();
        crate::protocol_serde::shape_authorizer_configuration::ser_authorizer_configuration(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.authorizer_type {
        object.key("authorizerType").string(var_3.as_str());
    }
    if let Some(var_4) = &input.client_token {
        object.key("clientToken").string(var_4.as_str());
    }
    if let Some(var_5) = &input.description {
        object.key("description").string(var_5.as_str());
    }
    if let Some(var_6) = &input.exception_level {
        object.key("exceptionLevel").string(var_6.as_str());
    }
    if let Some(var_7) = &input.kms_key_arn {
        object.key("kmsKeyArn").string(var_7.as_str());
    }
    if let Some(var_8) = &input.name {
        object.key("name").string(var_8.as_str());
    }
    if let Some(var_9) = &input.protocol_configuration {
        #[allow(unused_mut)]
        let mut object_10 = object.key("protocolConfiguration").start_object();
        crate::protocol_serde::shape_gateway_protocol_configuration::ser_gateway_protocol_configuration(&mut object_10, var_9)?;
        object_10.finish();
    }
    if let Some(var_11) = &input.protocol_type {
        object.key("protocolType").string(var_11.as_str());
    }
    if let Some(var_12) = &input.role_arn {
        object.key("roleArn").string(var_12.as_str());
    }
    Ok(())
}
