// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ListGateways`](crate::operation::list_gateways::builders::ListGatewaysFluentBuilder) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::operation::list_gateways::builders::ListGatewaysFluentBuilder::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`max_results(i32)`](crate::operation::list_gateways::builders::ListGatewaysFluentBuilder::max_results) / [`set_max_results(Option<i32>)`](crate::operation::list_gateways::builders::ListGatewaysFluentBuilder::set_max_results):<br>required: **false**<br><p>The maximum number of results to return in a single call. The default value is 10. The maximum value is 50.</p><br>
    ///   - [`next_token(impl Into<String>)`](crate::operation::list_gateways::builders::ListGatewaysFluentBuilder::next_token) / [`set_next_token(Option<String>)`](crate::operation::list_gateways::builders::ListGatewaysFluentBuilder::set_next_token):<br>required: **false**<br><p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p><br>
    /// - On success, responds with [`ListGatewaysOutput`](crate::operation::list_gateways::ListGatewaysOutput) with field(s):
    ///   - [`items(Vec::<GatewaySummary>)`](crate::operation::list_gateways::ListGatewaysOutput::items): <p>The list of Gateway summaries.</p>
    ///   - [`next_token(Option<String>)`](crate::operation::list_gateways::ListGatewaysOutput::next_token): <p>Opaque continuation token for the next paginated response.</p>
    /// - On failure, responds with [`SdkError<ListGatewaysError>`](crate::operation::list_gateways::ListGatewaysError)
    pub fn list_gateways(&self) -> crate::operation::list_gateways::builders::ListGatewaysFluentBuilder {
        crate::operation::list_gateways::builders::ListGatewaysFluentBuilder::new(self.handle.clone())
    }
}
