// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DeleteGatewayTargetOutput {
    /// <p>The Amazon Resource Name (ARN) of the gateway.</p>
    pub gateway_arn: ::std::string::String,
    /// <p>The unique identifier of the deleted gateway target.</p>
    pub target_id: ::std::string::String,
    /// <p>The current status of the gateway target deletion.</p>
    pub status: crate::types::TargetStatus,
    /// <p>The reasons for the current status of the gateway target deletion.</p>
    pub status_reasons: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    _request_id: Option<String>,
}
impl DeleteGatewayTargetOutput {
    /// <p>The Amazon Resource Name (ARN) of the gateway.</p>
    pub fn gateway_arn(&self) -> &str {
        use std::ops::Deref;
        self.gateway_arn.deref()
    }
    /// <p>The unique identifier of the deleted gateway target.</p>
    pub fn target_id(&self) -> &str {
        use std::ops::Deref;
        self.target_id.deref()
    }
    /// <p>The current status of the gateway target deletion.</p>
    pub fn status(&self) -> &crate::types::TargetStatus {
        &self.status
    }
    /// <p>The reasons for the current status of the gateway target deletion.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.status_reasons.is_none()`.
    pub fn status_reasons(&self) -> &[::std::string::String] {
        self.status_reasons.as_deref().unwrap_or_default()
    }
}
impl ::aws_types::request_id::RequestId for DeleteGatewayTargetOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteGatewayTargetOutput {
    /// Creates a new builder-style object to manufacture [`DeleteGatewayTargetOutput`](crate::operation::delete_gateway_target::DeleteGatewayTargetOutput).
    pub fn builder() -> crate::operation::delete_gateway_target::builders::DeleteGatewayTargetOutputBuilder {
        crate::operation::delete_gateway_target::builders::DeleteGatewayTargetOutputBuilder::default()
    }
}

/// A builder for [`DeleteGatewayTargetOutput`](crate::operation::delete_gateway_target::DeleteGatewayTargetOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DeleteGatewayTargetOutputBuilder {
    pub(crate) gateway_arn: ::std::option::Option<::std::string::String>,
    pub(crate) target_id: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::TargetStatus>,
    pub(crate) status_reasons: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    _request_id: Option<String>,
}
impl DeleteGatewayTargetOutputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the gateway.</p>
    /// This field is required.
    pub fn gateway_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.gateway_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the gateway.</p>
    pub fn set_gateway_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.gateway_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the gateway.</p>
    pub fn get_gateway_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.gateway_arn
    }
    /// <p>The unique identifier of the deleted gateway target.</p>
    /// This field is required.
    pub fn target_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.target_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the deleted gateway target.</p>
    pub fn set_target_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.target_id = input;
        self
    }
    /// <p>The unique identifier of the deleted gateway target.</p>
    pub fn get_target_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.target_id
    }
    /// <p>The current status of the gateway target deletion.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::TargetStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the gateway target deletion.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::TargetStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status of the gateway target deletion.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::TargetStatus> {
        &self.status
    }
    /// Appends an item to `status_reasons`.
    ///
    /// To override the contents of this collection use [`set_status_reasons`](Self::set_status_reasons).
    ///
    /// <p>The reasons for the current status of the gateway target deletion.</p>
    pub fn status_reasons(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.status_reasons.unwrap_or_default();
        v.push(input.into());
        self.status_reasons = ::std::option::Option::Some(v);
        self
    }
    /// <p>The reasons for the current status of the gateway target deletion.</p>
    pub fn set_status_reasons(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.status_reasons = input;
        self
    }
    /// <p>The reasons for the current status of the gateway target deletion.</p>
    pub fn get_status_reasons(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.status_reasons
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DeleteGatewayTargetOutput`](crate::operation::delete_gateway_target::DeleteGatewayTargetOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`gateway_arn`](crate::operation::delete_gateway_target::builders::DeleteGatewayTargetOutputBuilder::gateway_arn)
    /// - [`target_id`](crate::operation::delete_gateway_target::builders::DeleteGatewayTargetOutputBuilder::target_id)
    /// - [`status`](crate::operation::delete_gateway_target::builders::DeleteGatewayTargetOutputBuilder::status)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::delete_gateway_target::DeleteGatewayTargetOutput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::delete_gateway_target::DeleteGatewayTargetOutput {
            gateway_arn: self.gateway_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "gateway_arn",
                    "gateway_arn was not specified but it is required when building DeleteGatewayTargetOutput",
                )
            })?,
            target_id: self.target_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "target_id",
                    "target_id was not specified but it is required when building DeleteGatewayTargetOutput",
                )
            })?,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building DeleteGatewayTargetOutput",
                )
            })?,
            status_reasons: self.status_reasons,
            _request_id: self._request_id,
        })
    }
}
