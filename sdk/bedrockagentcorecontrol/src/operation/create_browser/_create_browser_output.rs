// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateBrowserOutput {
    /// <p>The unique identifier of the created browser.</p>
    pub browser_id: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) of the created browser.</p>
    pub browser_arn: ::std::string::String,
    /// <p>The timestamp when the browser was created.</p>
    pub created_at: ::aws_smithy_types::DateTime,
    /// <p>The current status of the browser.</p>
    pub status: crate::types::BrowserStatus,
    _request_id: Option<String>,
}
impl CreateBrowserOutput {
    /// <p>The unique identifier of the created browser.</p>
    pub fn browser_id(&self) -> &str {
        use std::ops::Deref;
        self.browser_id.deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the created browser.</p>
    pub fn browser_arn(&self) -> &str {
        use std::ops::Deref;
        self.browser_arn.deref()
    }
    /// <p>The timestamp when the browser was created.</p>
    pub fn created_at(&self) -> &::aws_smithy_types::DateTime {
        &self.created_at
    }
    /// <p>The current status of the browser.</p>
    pub fn status(&self) -> &crate::types::BrowserStatus {
        &self.status
    }
}
impl ::aws_types::request_id::RequestId for CreateBrowserOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateBrowserOutput {
    /// Creates a new builder-style object to manufacture [`CreateBrowserOutput`](crate::operation::create_browser::CreateBrowserOutput).
    pub fn builder() -> crate::operation::create_browser::builders::CreateBrowserOutputBuilder {
        crate::operation::create_browser::builders::CreateBrowserOutputBuilder::default()
    }
}

/// A builder for [`CreateBrowserOutput`](crate::operation::create_browser::CreateBrowserOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateBrowserOutputBuilder {
    pub(crate) browser_id: ::std::option::Option<::std::string::String>,
    pub(crate) browser_arn: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) status: ::std::option::Option<crate::types::BrowserStatus>,
    _request_id: Option<String>,
}
impl CreateBrowserOutputBuilder {
    /// <p>The unique identifier of the created browser.</p>
    /// This field is required.
    pub fn browser_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.browser_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the created browser.</p>
    pub fn set_browser_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.browser_id = input;
        self
    }
    /// <p>The unique identifier of the created browser.</p>
    pub fn get_browser_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.browser_id
    }
    /// <p>The Amazon Resource Name (ARN) of the created browser.</p>
    /// This field is required.
    pub fn browser_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.browser_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the created browser.</p>
    pub fn set_browser_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.browser_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the created browser.</p>
    pub fn get_browser_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.browser_arn
    }
    /// <p>The timestamp when the browser was created.</p>
    /// This field is required.
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the browser was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The timestamp when the browser was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The current status of the browser.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::BrowserStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the browser.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::BrowserStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status of the browser.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::BrowserStatus> {
        &self.status
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CreateBrowserOutput`](crate::operation::create_browser::CreateBrowserOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`browser_id`](crate::operation::create_browser::builders::CreateBrowserOutputBuilder::browser_id)
    /// - [`browser_arn`](crate::operation::create_browser::builders::CreateBrowserOutputBuilder::browser_arn)
    /// - [`created_at`](crate::operation::create_browser::builders::CreateBrowserOutputBuilder::created_at)
    /// - [`status`](crate::operation::create_browser::builders::CreateBrowserOutputBuilder::status)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_browser::CreateBrowserOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_browser::CreateBrowserOutput {
            browser_id: self.browser_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "browser_id",
                    "browser_id was not specified but it is required when building CreateBrowserOutput",
                )
            })?,
            browser_arn: self.browser_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "browser_arn",
                    "browser_arn was not specified but it is required when building CreateBrowserOutput",
                )
            })?,
            created_at: self.created_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_at",
                    "created_at was not specified but it is required when building CreateBrowserOutput",
                )
            })?,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building CreateBrowserOutput",
                )
            })?,
            _request_id: self._request_id,
        })
    }
}
