// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CreateBrowserInput {
    /// <p>The name of the browser. The name must be unique within your account.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The description of the browser.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the IAM role that provides permissions for the browser to access Amazon Web Services services.</p>
    pub execution_role_arn: ::std::option::Option<::std::string::String>,
    /// <p>The network configuration for the browser. This configuration specifies the network mode for the browser.</p>
    pub network_configuration: ::std::option::Option<crate::types::BrowserNetworkConfiguration>,
    /// <p>The recording configuration for the browser. When enabled, browser sessions are recorded and stored in the specified Amazon S3 location.</p>
    pub recording: ::std::option::Option<crate::types::RecordingConfig>,
    /// <p>A unique, case-sensitive identifier to ensure that the operation completes no more than one time. If this token matches a previous request, Amazon Bedrock ignores the request but does not return an error.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
}
impl CreateBrowserInput {
    /// <p>The name of the browser. The name must be unique within your account.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The description of the browser.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role that provides permissions for the browser to access Amazon Web Services services.</p>
    pub fn execution_role_arn(&self) -> ::std::option::Option<&str> {
        self.execution_role_arn.as_deref()
    }
    /// <p>The network configuration for the browser. This configuration specifies the network mode for the browser.</p>
    pub fn network_configuration(&self) -> ::std::option::Option<&crate::types::BrowserNetworkConfiguration> {
        self.network_configuration.as_ref()
    }
    /// <p>The recording configuration for the browser. When enabled, browser sessions are recorded and stored in the specified Amazon S3 location.</p>
    pub fn recording(&self) -> ::std::option::Option<&crate::types::RecordingConfig> {
        self.recording.as_ref()
    }
    /// <p>A unique, case-sensitive identifier to ensure that the operation completes no more than one time. If this token matches a previous request, Amazon Bedrock ignores the request but does not return an error.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl ::std::fmt::Debug for CreateBrowserInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateBrowserInput");
        formatter.field("name", &self.name);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("execution_role_arn", &self.execution_role_arn);
        formatter.field("network_configuration", &self.network_configuration);
        formatter.field("recording", &self.recording);
        formatter.field("client_token", &self.client_token);
        formatter.finish()
    }
}
impl CreateBrowserInput {
    /// Creates a new builder-style object to manufacture [`CreateBrowserInput`](crate::operation::create_browser::CreateBrowserInput).
    pub fn builder() -> crate::operation::create_browser::builders::CreateBrowserInputBuilder {
        crate::operation::create_browser::builders::CreateBrowserInputBuilder::default()
    }
}

/// A builder for [`CreateBrowserInput`](crate::operation::create_browser::CreateBrowserInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct CreateBrowserInputBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) execution_role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) network_configuration: ::std::option::Option<crate::types::BrowserNetworkConfiguration>,
    pub(crate) recording: ::std::option::Option<crate::types::RecordingConfig>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
}
impl CreateBrowserInputBuilder {
    /// <p>The name of the browser. The name must be unique within your account.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the browser. The name must be unique within your account.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the browser. The name must be unique within your account.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The description of the browser.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the browser.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the browser.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role that provides permissions for the browser to access Amazon Web Services services.</p>
    pub fn execution_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.execution_role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role that provides permissions for the browser to access Amazon Web Services services.</p>
    pub fn set_execution_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.execution_role_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role that provides permissions for the browser to access Amazon Web Services services.</p>
    pub fn get_execution_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.execution_role_arn
    }
    /// <p>The network configuration for the browser. This configuration specifies the network mode for the browser.</p>
    /// This field is required.
    pub fn network_configuration(mut self, input: crate::types::BrowserNetworkConfiguration) -> Self {
        self.network_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The network configuration for the browser. This configuration specifies the network mode for the browser.</p>
    pub fn set_network_configuration(mut self, input: ::std::option::Option<crate::types::BrowserNetworkConfiguration>) -> Self {
        self.network_configuration = input;
        self
    }
    /// <p>The network configuration for the browser. This configuration specifies the network mode for the browser.</p>
    pub fn get_network_configuration(&self) -> &::std::option::Option<crate::types::BrowserNetworkConfiguration> {
        &self.network_configuration
    }
    /// <p>The recording configuration for the browser. When enabled, browser sessions are recorded and stored in the specified Amazon S3 location.</p>
    pub fn recording(mut self, input: crate::types::RecordingConfig) -> Self {
        self.recording = ::std::option::Option::Some(input);
        self
    }
    /// <p>The recording configuration for the browser. When enabled, browser sessions are recorded and stored in the specified Amazon S3 location.</p>
    pub fn set_recording(mut self, input: ::std::option::Option<crate::types::RecordingConfig>) -> Self {
        self.recording = input;
        self
    }
    /// <p>The recording configuration for the browser. When enabled, browser sessions are recorded and stored in the specified Amazon S3 location.</p>
    pub fn get_recording(&self) -> &::std::option::Option<crate::types::RecordingConfig> {
        &self.recording
    }
    /// <p>A unique, case-sensitive identifier to ensure that the operation completes no more than one time. If this token matches a previous request, Amazon Bedrock ignores the request but does not return an error.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier to ensure that the operation completes no more than one time. If this token matches a previous request, Amazon Bedrock ignores the request but does not return an error.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A unique, case-sensitive identifier to ensure that the operation completes no more than one time. If this token matches a previous request, Amazon Bedrock ignores the request but does not return an error.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Consumes the builder and constructs a [`CreateBrowserInput`](crate::operation::create_browser::CreateBrowserInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_browser::CreateBrowserInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_browser::CreateBrowserInput {
            name: self.name,
            description: self.description,
            execution_role_arn: self.execution_role_arn,
            network_configuration: self.network_configuration,
            recording: self.recording,
            client_token: self.client_token,
        })
    }
}
impl ::std::fmt::Debug for CreateBrowserInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateBrowserInputBuilder");
        formatter.field("name", &self.name);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("execution_role_arn", &self.execution_role_arn);
        formatter.field("network_configuration", &self.network_configuration);
        formatter.field("recording", &self.recording);
        formatter.field("client_token", &self.client_token);
        formatter.finish()
    }
}
