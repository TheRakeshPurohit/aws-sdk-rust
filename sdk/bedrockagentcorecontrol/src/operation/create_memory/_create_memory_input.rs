// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CreateMemoryInput {
    /// <p>A unique, case-sensitive identifier to ensure that the operation completes no more than one time. If this token matches a previous request, Amazon Bedrock ignores the request but does not return an error.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>The name of the memory. The name must be unique within your account.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The description of the memory.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the KMS key used to encrypt the memory data.</p>
    pub encryption_key_arn: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the IAM role that provides permissions for the memory to access Amazon Web Services services.</p>
    pub memory_execution_role_arn: ::std::option::Option<::std::string::String>,
    /// <p>The duration after which memory events expire. Specified as an ISO 8601 duration.</p>
    pub event_expiry_duration: ::std::option::Option<i32>,
    /// <p>The memory strategies to use for this memory. Strategies define how information is extracted, processed, and consolidated.</p>
    pub memory_strategies: ::std::option::Option<::std::vec::Vec<crate::types::MemoryStrategyInput>>,
    /// <p>A map of tag keys and values to assign to an AgentCore Memory. Tags enable you to categorize your resources in different ways, for example, by purpose, owner, or environment.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateMemoryInput {
    /// <p>A unique, case-sensitive identifier to ensure that the operation completes no more than one time. If this token matches a previous request, Amazon Bedrock ignores the request but does not return an error.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>The name of the memory. The name must be unique within your account.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The description of the memory.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the KMS key used to encrypt the memory data.</p>
    pub fn encryption_key_arn(&self) -> ::std::option::Option<&str> {
        self.encryption_key_arn.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role that provides permissions for the memory to access Amazon Web Services services.</p>
    pub fn memory_execution_role_arn(&self) -> ::std::option::Option<&str> {
        self.memory_execution_role_arn.as_deref()
    }
    /// <p>The duration after which memory events expire. Specified as an ISO 8601 duration.</p>
    pub fn event_expiry_duration(&self) -> ::std::option::Option<i32> {
        self.event_expiry_duration
    }
    /// <p>The memory strategies to use for this memory. Strategies define how information is extracted, processed, and consolidated.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.memory_strategies.is_none()`.
    pub fn memory_strategies(&self) -> &[crate::types::MemoryStrategyInput] {
        self.memory_strategies.as_deref().unwrap_or_default()
    }
    /// <p>A map of tag keys and values to assign to an AgentCore Memory. Tags enable you to categorize your resources in different ways, for example, by purpose, owner, or environment.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl ::std::fmt::Debug for CreateMemoryInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateMemoryInput");
        formatter.field("client_token", &self.client_token);
        formatter.field("name", &self.name);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("encryption_key_arn", &self.encryption_key_arn);
        formatter.field("memory_execution_role_arn", &self.memory_execution_role_arn);
        formatter.field("event_expiry_duration", &self.event_expiry_duration);
        formatter.field("memory_strategies", &self.memory_strategies);
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
impl CreateMemoryInput {
    /// Creates a new builder-style object to manufacture [`CreateMemoryInput`](crate::operation::create_memory::CreateMemoryInput).
    pub fn builder() -> crate::operation::create_memory::builders::CreateMemoryInputBuilder {
        crate::operation::create_memory::builders::CreateMemoryInputBuilder::default()
    }
}

/// A builder for [`CreateMemoryInput`](crate::operation::create_memory::CreateMemoryInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct CreateMemoryInputBuilder {
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) encryption_key_arn: ::std::option::Option<::std::string::String>,
    pub(crate) memory_execution_role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) event_expiry_duration: ::std::option::Option<i32>,
    pub(crate) memory_strategies: ::std::option::Option<::std::vec::Vec<crate::types::MemoryStrategyInput>>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateMemoryInputBuilder {
    /// <p>A unique, case-sensitive identifier to ensure that the operation completes no more than one time. If this token matches a previous request, Amazon Bedrock ignores the request but does not return an error.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier to ensure that the operation completes no more than one time. If this token matches a previous request, Amazon Bedrock ignores the request but does not return an error.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A unique, case-sensitive identifier to ensure that the operation completes no more than one time. If this token matches a previous request, Amazon Bedrock ignores the request but does not return an error.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// <p>The name of the memory. The name must be unique within your account.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the memory. The name must be unique within your account.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the memory. The name must be unique within your account.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The description of the memory.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the memory.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the memory.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The Amazon Resource Name (ARN) of the KMS key used to encrypt the memory data.</p>
    pub fn encryption_key_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.encryption_key_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the KMS key used to encrypt the memory data.</p>
    pub fn set_encryption_key_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.encryption_key_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the KMS key used to encrypt the memory data.</p>
    pub fn get_encryption_key_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.encryption_key_arn
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role that provides permissions for the memory to access Amazon Web Services services.</p>
    pub fn memory_execution_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.memory_execution_role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role that provides permissions for the memory to access Amazon Web Services services.</p>
    pub fn set_memory_execution_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.memory_execution_role_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role that provides permissions for the memory to access Amazon Web Services services.</p>
    pub fn get_memory_execution_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.memory_execution_role_arn
    }
    /// <p>The duration after which memory events expire. Specified as an ISO 8601 duration.</p>
    /// This field is required.
    pub fn event_expiry_duration(mut self, input: i32) -> Self {
        self.event_expiry_duration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The duration after which memory events expire. Specified as an ISO 8601 duration.</p>
    pub fn set_event_expiry_duration(mut self, input: ::std::option::Option<i32>) -> Self {
        self.event_expiry_duration = input;
        self
    }
    /// <p>The duration after which memory events expire. Specified as an ISO 8601 duration.</p>
    pub fn get_event_expiry_duration(&self) -> &::std::option::Option<i32> {
        &self.event_expiry_duration
    }
    /// Appends an item to `memory_strategies`.
    ///
    /// To override the contents of this collection use [`set_memory_strategies`](Self::set_memory_strategies).
    ///
    /// <p>The memory strategies to use for this memory. Strategies define how information is extracted, processed, and consolidated.</p>
    pub fn memory_strategies(mut self, input: crate::types::MemoryStrategyInput) -> Self {
        let mut v = self.memory_strategies.unwrap_or_default();
        v.push(input);
        self.memory_strategies = ::std::option::Option::Some(v);
        self
    }
    /// <p>The memory strategies to use for this memory. Strategies define how information is extracted, processed, and consolidated.</p>
    pub fn set_memory_strategies(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::MemoryStrategyInput>>) -> Self {
        self.memory_strategies = input;
        self
    }
    /// <p>The memory strategies to use for this memory. Strategies define how information is extracted, processed, and consolidated.</p>
    pub fn get_memory_strategies(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MemoryStrategyInput>> {
        &self.memory_strategies
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A map of tag keys and values to assign to an AgentCore Memory. Tags enable you to categorize your resources in different ways, for example, by purpose, owner, or environment.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>A map of tag keys and values to assign to an AgentCore Memory. Tags enable you to categorize your resources in different ways, for example, by purpose, owner, or environment.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>A map of tag keys and values to assign to an AgentCore Memory. Tags enable you to categorize your resources in different ways, for example, by purpose, owner, or environment.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateMemoryInput`](crate::operation::create_memory::CreateMemoryInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_memory::CreateMemoryInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_memory::CreateMemoryInput {
            client_token: self.client_token,
            name: self.name,
            description: self.description,
            encryption_key_arn: self.encryption_key_arn,
            memory_execution_role_arn: self.memory_execution_role_arn,
            event_expiry_duration: self.event_expiry_duration,
            memory_strategies: self.memory_strategies,
            tags: self.tags,
        })
    }
}
impl ::std::fmt::Debug for CreateMemoryInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateMemoryInputBuilder");
        formatter.field("client_token", &self.client_token);
        formatter.field("name", &self.name);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("encryption_key_arn", &self.encryption_key_arn);
        formatter.field("memory_execution_role_arn", &self.memory_execution_role_arn);
        formatter.field("event_expiry_duration", &self.event_expiry_duration);
        formatter.field("memory_strategies", &self.memory_strategies);
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
