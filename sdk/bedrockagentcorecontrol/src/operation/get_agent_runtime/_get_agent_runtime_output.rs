// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GetAgentRuntimeOutput {
    /// <p>The Amazon Resource Name (ARN) of the agent runtime.</p>
    pub agent_runtime_arn: ::std::string::String,
    /// <p>The workload identity details for the agent runtime.</p>
    pub workload_identity_details: ::std::option::Option<crate::types::WorkloadIdentityDetails>,
    /// <p>The name of the agent runtime.</p>
    pub agent_runtime_name: ::std::string::String,
    /// <p>The description of the agent runtime.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of the agent runtime.</p>
    pub agent_runtime_id: ::std::string::String,
    /// <p>The version of the agent runtime.</p>
    pub agent_runtime_version: ::std::string::String,
    /// <p>The timestamp when the agent runtime was created.</p>
    pub created_at: ::aws_smithy_types::DateTime,
    /// <p>The timestamp when the agent runtime was last updated.</p>
    pub last_updated_at: ::aws_smithy_types::DateTime,
    /// <p>The IAM role ARN that provides permissions for the agent runtime.</p>
    pub role_arn: ::std::string::String,
    /// <p>The artifact of the agent runtime.</p>
    pub agent_runtime_artifact: ::std::option::Option<crate::types::AgentArtifact>,
    /// <p>The network configuration for the agent runtime.</p>
    pub network_configuration: ::std::option::Option<crate::types::NetworkConfiguration>,
    /// <p>The protocol configuration for an agent runtime. This structure defines how the agent runtime communicates with clients.</p>
    pub protocol_configuration: ::std::option::Option<crate::types::ProtocolConfiguration>,
    /// <p>Environment variables set in the agent runtime environment.</p>
    pub environment_variables: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The authorizer configuration for the agent runtime.</p>
    pub authorizer_configuration: ::std::option::Option<crate::types::AuthorizerConfiguration>,
    /// <p>The current status of the agent runtime.</p>
    pub status: crate::types::AgentStatus,
    _request_id: Option<String>,
}
impl GetAgentRuntimeOutput {
    /// <p>The Amazon Resource Name (ARN) of the agent runtime.</p>
    pub fn agent_runtime_arn(&self) -> &str {
        use std::ops::Deref;
        self.agent_runtime_arn.deref()
    }
    /// <p>The workload identity details for the agent runtime.</p>
    pub fn workload_identity_details(&self) -> ::std::option::Option<&crate::types::WorkloadIdentityDetails> {
        self.workload_identity_details.as_ref()
    }
    /// <p>The name of the agent runtime.</p>
    pub fn agent_runtime_name(&self) -> &str {
        use std::ops::Deref;
        self.agent_runtime_name.deref()
    }
    /// <p>The description of the agent runtime.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The unique identifier of the agent runtime.</p>
    pub fn agent_runtime_id(&self) -> &str {
        use std::ops::Deref;
        self.agent_runtime_id.deref()
    }
    /// <p>The version of the agent runtime.</p>
    pub fn agent_runtime_version(&self) -> &str {
        use std::ops::Deref;
        self.agent_runtime_version.deref()
    }
    /// <p>The timestamp when the agent runtime was created.</p>
    pub fn created_at(&self) -> &::aws_smithy_types::DateTime {
        &self.created_at
    }
    /// <p>The timestamp when the agent runtime was last updated.</p>
    pub fn last_updated_at(&self) -> &::aws_smithy_types::DateTime {
        &self.last_updated_at
    }
    /// <p>The IAM role ARN that provides permissions for the agent runtime.</p>
    pub fn role_arn(&self) -> &str {
        use std::ops::Deref;
        self.role_arn.deref()
    }
    /// <p>The artifact of the agent runtime.</p>
    pub fn agent_runtime_artifact(&self) -> ::std::option::Option<&crate::types::AgentArtifact> {
        self.agent_runtime_artifact.as_ref()
    }
    /// <p>The network configuration for the agent runtime.</p>
    pub fn network_configuration(&self) -> ::std::option::Option<&crate::types::NetworkConfiguration> {
        self.network_configuration.as_ref()
    }
    /// <p>The protocol configuration for an agent runtime. This structure defines how the agent runtime communicates with clients.</p>
    pub fn protocol_configuration(&self) -> ::std::option::Option<&crate::types::ProtocolConfiguration> {
        self.protocol_configuration.as_ref()
    }
    /// <p>Environment variables set in the agent runtime environment.</p>
    pub fn environment_variables(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.environment_variables.as_ref()
    }
    /// <p>The authorizer configuration for the agent runtime.</p>
    pub fn authorizer_configuration(&self) -> ::std::option::Option<&crate::types::AuthorizerConfiguration> {
        self.authorizer_configuration.as_ref()
    }
    /// <p>The current status of the agent runtime.</p>
    pub fn status(&self) -> &crate::types::AgentStatus {
        &self.status
    }
}
impl ::std::fmt::Debug for GetAgentRuntimeOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetAgentRuntimeOutput");
        formatter.field("agent_runtime_arn", &self.agent_runtime_arn);
        formatter.field("workload_identity_details", &self.workload_identity_details);
        formatter.field("agent_runtime_name", &self.agent_runtime_name);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("agent_runtime_id", &self.agent_runtime_id);
        formatter.field("agent_runtime_version", &self.agent_runtime_version);
        formatter.field("created_at", &self.created_at);
        formatter.field("last_updated_at", &self.last_updated_at);
        formatter.field("role_arn", &self.role_arn);
        formatter.field("agent_runtime_artifact", &self.agent_runtime_artifact);
        formatter.field("network_configuration", &self.network_configuration);
        formatter.field("protocol_configuration", &self.protocol_configuration);
        formatter.field("environment_variables", &"*** Sensitive Data Redacted ***");
        formatter.field("authorizer_configuration", &self.authorizer_configuration);
        formatter.field("status", &self.status);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_types::request_id::RequestId for GetAgentRuntimeOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetAgentRuntimeOutput {
    /// Creates a new builder-style object to manufacture [`GetAgentRuntimeOutput`](crate::operation::get_agent_runtime::GetAgentRuntimeOutput).
    pub fn builder() -> crate::operation::get_agent_runtime::builders::GetAgentRuntimeOutputBuilder {
        crate::operation::get_agent_runtime::builders::GetAgentRuntimeOutputBuilder::default()
    }
}

/// A builder for [`GetAgentRuntimeOutput`](crate::operation::get_agent_runtime::GetAgentRuntimeOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct GetAgentRuntimeOutputBuilder {
    pub(crate) agent_runtime_arn: ::std::option::Option<::std::string::String>,
    pub(crate) workload_identity_details: ::std::option::Option<crate::types::WorkloadIdentityDetails>,
    pub(crate) agent_runtime_name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) agent_runtime_id: ::std::option::Option<::std::string::String>,
    pub(crate) agent_runtime_version: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) agent_runtime_artifact: ::std::option::Option<crate::types::AgentArtifact>,
    pub(crate) network_configuration: ::std::option::Option<crate::types::NetworkConfiguration>,
    pub(crate) protocol_configuration: ::std::option::Option<crate::types::ProtocolConfiguration>,
    pub(crate) environment_variables: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) authorizer_configuration: ::std::option::Option<crate::types::AuthorizerConfiguration>,
    pub(crate) status: ::std::option::Option<crate::types::AgentStatus>,
    _request_id: Option<String>,
}
impl GetAgentRuntimeOutputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the agent runtime.</p>
    /// This field is required.
    pub fn agent_runtime_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.agent_runtime_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the agent runtime.</p>
    pub fn set_agent_runtime_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.agent_runtime_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the agent runtime.</p>
    pub fn get_agent_runtime_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.agent_runtime_arn
    }
    /// <p>The workload identity details for the agent runtime.</p>
    pub fn workload_identity_details(mut self, input: crate::types::WorkloadIdentityDetails) -> Self {
        self.workload_identity_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>The workload identity details for the agent runtime.</p>
    pub fn set_workload_identity_details(mut self, input: ::std::option::Option<crate::types::WorkloadIdentityDetails>) -> Self {
        self.workload_identity_details = input;
        self
    }
    /// <p>The workload identity details for the agent runtime.</p>
    pub fn get_workload_identity_details(&self) -> &::std::option::Option<crate::types::WorkloadIdentityDetails> {
        &self.workload_identity_details
    }
    /// <p>The name of the agent runtime.</p>
    /// This field is required.
    pub fn agent_runtime_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.agent_runtime_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the agent runtime.</p>
    pub fn set_agent_runtime_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.agent_runtime_name = input;
        self
    }
    /// <p>The name of the agent runtime.</p>
    pub fn get_agent_runtime_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.agent_runtime_name
    }
    /// <p>The description of the agent runtime.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the agent runtime.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the agent runtime.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The unique identifier of the agent runtime.</p>
    /// This field is required.
    pub fn agent_runtime_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.agent_runtime_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the agent runtime.</p>
    pub fn set_agent_runtime_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.agent_runtime_id = input;
        self
    }
    /// <p>The unique identifier of the agent runtime.</p>
    pub fn get_agent_runtime_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.agent_runtime_id
    }
    /// <p>The version of the agent runtime.</p>
    /// This field is required.
    pub fn agent_runtime_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.agent_runtime_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version of the agent runtime.</p>
    pub fn set_agent_runtime_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.agent_runtime_version = input;
        self
    }
    /// <p>The version of the agent runtime.</p>
    pub fn get_agent_runtime_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.agent_runtime_version
    }
    /// <p>The timestamp when the agent runtime was created.</p>
    /// This field is required.
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the agent runtime was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The timestamp when the agent runtime was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The timestamp when the agent runtime was last updated.</p>
    /// This field is required.
    pub fn last_updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the agent runtime was last updated.</p>
    pub fn set_last_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated_at = input;
        self
    }
    /// <p>The timestamp when the agent runtime was last updated.</p>
    pub fn get_last_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated_at
    }
    /// <p>The IAM role ARN that provides permissions for the agent runtime.</p>
    /// This field is required.
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IAM role ARN that provides permissions for the agent runtime.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The IAM role ARN that provides permissions for the agent runtime.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// <p>The artifact of the agent runtime.</p>
    pub fn agent_runtime_artifact(mut self, input: crate::types::AgentArtifact) -> Self {
        self.agent_runtime_artifact = ::std::option::Option::Some(input);
        self
    }
    /// <p>The artifact of the agent runtime.</p>
    pub fn set_agent_runtime_artifact(mut self, input: ::std::option::Option<crate::types::AgentArtifact>) -> Self {
        self.agent_runtime_artifact = input;
        self
    }
    /// <p>The artifact of the agent runtime.</p>
    pub fn get_agent_runtime_artifact(&self) -> &::std::option::Option<crate::types::AgentArtifact> {
        &self.agent_runtime_artifact
    }
    /// <p>The network configuration for the agent runtime.</p>
    /// This field is required.
    pub fn network_configuration(mut self, input: crate::types::NetworkConfiguration) -> Self {
        self.network_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The network configuration for the agent runtime.</p>
    pub fn set_network_configuration(mut self, input: ::std::option::Option<crate::types::NetworkConfiguration>) -> Self {
        self.network_configuration = input;
        self
    }
    /// <p>The network configuration for the agent runtime.</p>
    pub fn get_network_configuration(&self) -> &::std::option::Option<crate::types::NetworkConfiguration> {
        &self.network_configuration
    }
    /// <p>The protocol configuration for an agent runtime. This structure defines how the agent runtime communicates with clients.</p>
    pub fn protocol_configuration(mut self, input: crate::types::ProtocolConfiguration) -> Self {
        self.protocol_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The protocol configuration for an agent runtime. This structure defines how the agent runtime communicates with clients.</p>
    pub fn set_protocol_configuration(mut self, input: ::std::option::Option<crate::types::ProtocolConfiguration>) -> Self {
        self.protocol_configuration = input;
        self
    }
    /// <p>The protocol configuration for an agent runtime. This structure defines how the agent runtime communicates with clients.</p>
    pub fn get_protocol_configuration(&self) -> &::std::option::Option<crate::types::ProtocolConfiguration> {
        &self.protocol_configuration
    }
    /// Adds a key-value pair to `environment_variables`.
    ///
    /// To override the contents of this collection use [`set_environment_variables`](Self::set_environment_variables).
    ///
    /// <p>Environment variables set in the agent runtime environment.</p>
    pub fn environment_variables(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.environment_variables.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.environment_variables = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Environment variables set in the agent runtime environment.</p>
    pub fn set_environment_variables(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.environment_variables = input;
        self
    }
    /// <p>Environment variables set in the agent runtime environment.</p>
    pub fn get_environment_variables(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.environment_variables
    }
    /// <p>The authorizer configuration for the agent runtime.</p>
    pub fn authorizer_configuration(mut self, input: crate::types::AuthorizerConfiguration) -> Self {
        self.authorizer_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The authorizer configuration for the agent runtime.</p>
    pub fn set_authorizer_configuration(mut self, input: ::std::option::Option<crate::types::AuthorizerConfiguration>) -> Self {
        self.authorizer_configuration = input;
        self
    }
    /// <p>The authorizer configuration for the agent runtime.</p>
    pub fn get_authorizer_configuration(&self) -> &::std::option::Option<crate::types::AuthorizerConfiguration> {
        &self.authorizer_configuration
    }
    /// <p>The current status of the agent runtime.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::AgentStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the agent runtime.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::AgentStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status of the agent runtime.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::AgentStatus> {
        &self.status
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetAgentRuntimeOutput`](crate::operation::get_agent_runtime::GetAgentRuntimeOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`agent_runtime_arn`](crate::operation::get_agent_runtime::builders::GetAgentRuntimeOutputBuilder::agent_runtime_arn)
    /// - [`agent_runtime_name`](crate::operation::get_agent_runtime::builders::GetAgentRuntimeOutputBuilder::agent_runtime_name)
    /// - [`agent_runtime_id`](crate::operation::get_agent_runtime::builders::GetAgentRuntimeOutputBuilder::agent_runtime_id)
    /// - [`agent_runtime_version`](crate::operation::get_agent_runtime::builders::GetAgentRuntimeOutputBuilder::agent_runtime_version)
    /// - [`created_at`](crate::operation::get_agent_runtime::builders::GetAgentRuntimeOutputBuilder::created_at)
    /// - [`last_updated_at`](crate::operation::get_agent_runtime::builders::GetAgentRuntimeOutputBuilder::last_updated_at)
    /// - [`role_arn`](crate::operation::get_agent_runtime::builders::GetAgentRuntimeOutputBuilder::role_arn)
    /// - [`status`](crate::operation::get_agent_runtime::builders::GetAgentRuntimeOutputBuilder::status)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::get_agent_runtime::GetAgentRuntimeOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::get_agent_runtime::GetAgentRuntimeOutput {
            agent_runtime_arn: self.agent_runtime_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "agent_runtime_arn",
                    "agent_runtime_arn was not specified but it is required when building GetAgentRuntimeOutput",
                )
            })?,
            workload_identity_details: self.workload_identity_details,
            agent_runtime_name: self.agent_runtime_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "agent_runtime_name",
                    "agent_runtime_name was not specified but it is required when building GetAgentRuntimeOutput",
                )
            })?,
            description: self.description,
            agent_runtime_id: self.agent_runtime_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "agent_runtime_id",
                    "agent_runtime_id was not specified but it is required when building GetAgentRuntimeOutput",
                )
            })?,
            agent_runtime_version: self.agent_runtime_version.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "agent_runtime_version",
                    "agent_runtime_version was not specified but it is required when building GetAgentRuntimeOutput",
                )
            })?,
            created_at: self.created_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_at",
                    "created_at was not specified but it is required when building GetAgentRuntimeOutput",
                )
            })?,
            last_updated_at: self.last_updated_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "last_updated_at",
                    "last_updated_at was not specified but it is required when building GetAgentRuntimeOutput",
                )
            })?,
            role_arn: self.role_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "role_arn",
                    "role_arn was not specified but it is required when building GetAgentRuntimeOutput",
                )
            })?,
            agent_runtime_artifact: self.agent_runtime_artifact,
            network_configuration: self.network_configuration,
            protocol_configuration: self.protocol_configuration,
            environment_variables: self.environment_variables,
            authorizer_configuration: self.authorizer_configuration,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building GetAgentRuntimeOutput",
                )
            })?,
            _request_id: self._request_id,
        })
    }
}
impl ::std::fmt::Debug for GetAgentRuntimeOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetAgentRuntimeOutputBuilder");
        formatter.field("agent_runtime_arn", &self.agent_runtime_arn);
        formatter.field("workload_identity_details", &self.workload_identity_details);
        formatter.field("agent_runtime_name", &self.agent_runtime_name);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("agent_runtime_id", &self.agent_runtime_id);
        formatter.field("agent_runtime_version", &self.agent_runtime_version);
        formatter.field("created_at", &self.created_at);
        formatter.field("last_updated_at", &self.last_updated_at);
        formatter.field("role_arn", &self.role_arn);
        formatter.field("agent_runtime_artifact", &self.agent_runtime_artifact);
        formatter.field("network_configuration", &self.network_configuration);
        formatter.field("protocol_configuration", &self.protocol_configuration);
        formatter.field("environment_variables", &"*** Sensitive Data Redacted ***");
        formatter.field("authorizer_configuration", &self.authorizer_configuration);
        formatter.field("status", &self.status);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
