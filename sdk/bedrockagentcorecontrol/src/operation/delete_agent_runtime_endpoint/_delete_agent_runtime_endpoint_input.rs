// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct DeleteAgentRuntimeEndpointInput {
    /// <p>The unique identifier of the AgentCore Runtime associated with the endpoint.</p>
    pub agent_runtime_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the AgentCore Runtime endpoint to delete.</p>
    pub endpoint_name: ::std::option::Option<::std::string::String>,
    /// <p>A unique, case-sensitive identifier to ensure idempotency of the request.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
}
impl DeleteAgentRuntimeEndpointInput {
    /// <p>The unique identifier of the AgentCore Runtime associated with the endpoint.</p>
    pub fn agent_runtime_id(&self) -> ::std::option::Option<&str> {
        self.agent_runtime_id.as_deref()
    }
    /// <p>The name of the AgentCore Runtime endpoint to delete.</p>
    pub fn endpoint_name(&self) -> ::std::option::Option<&str> {
        self.endpoint_name.as_deref()
    }
    /// <p>A unique, case-sensitive identifier to ensure idempotency of the request.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl ::std::fmt::Debug for DeleteAgentRuntimeEndpointInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteAgentRuntimeEndpointInput");
        formatter.field("agent_runtime_id", &self.agent_runtime_id);
        formatter.field("endpoint_name", &"*** Sensitive Data Redacted ***");
        formatter.field("client_token", &self.client_token);
        formatter.finish()
    }
}
impl DeleteAgentRuntimeEndpointInput {
    /// Creates a new builder-style object to manufacture [`DeleteAgentRuntimeEndpointInput`](crate::operation::delete_agent_runtime_endpoint::DeleteAgentRuntimeEndpointInput).
    pub fn builder() -> crate::operation::delete_agent_runtime_endpoint::builders::DeleteAgentRuntimeEndpointInputBuilder {
        crate::operation::delete_agent_runtime_endpoint::builders::DeleteAgentRuntimeEndpointInputBuilder::default()
    }
}

/// A builder for [`DeleteAgentRuntimeEndpointInput`](crate::operation::delete_agent_runtime_endpoint::DeleteAgentRuntimeEndpointInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct DeleteAgentRuntimeEndpointInputBuilder {
    pub(crate) agent_runtime_id: ::std::option::Option<::std::string::String>,
    pub(crate) endpoint_name: ::std::option::Option<::std::string::String>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
}
impl DeleteAgentRuntimeEndpointInputBuilder {
    /// <p>The unique identifier of the AgentCore Runtime associated with the endpoint.</p>
    /// This field is required.
    pub fn agent_runtime_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.agent_runtime_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the AgentCore Runtime associated with the endpoint.</p>
    pub fn set_agent_runtime_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.agent_runtime_id = input;
        self
    }
    /// <p>The unique identifier of the AgentCore Runtime associated with the endpoint.</p>
    pub fn get_agent_runtime_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.agent_runtime_id
    }
    /// <p>The name of the AgentCore Runtime endpoint to delete.</p>
    /// This field is required.
    pub fn endpoint_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.endpoint_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the AgentCore Runtime endpoint to delete.</p>
    pub fn set_endpoint_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.endpoint_name = input;
        self
    }
    /// <p>The name of the AgentCore Runtime endpoint to delete.</p>
    pub fn get_endpoint_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.endpoint_name
    }
    /// <p>A unique, case-sensitive identifier to ensure idempotency of the request.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier to ensure idempotency of the request.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A unique, case-sensitive identifier to ensure idempotency of the request.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Consumes the builder and constructs a [`DeleteAgentRuntimeEndpointInput`](crate::operation::delete_agent_runtime_endpoint::DeleteAgentRuntimeEndpointInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::delete_agent_runtime_endpoint::DeleteAgentRuntimeEndpointInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::delete_agent_runtime_endpoint::DeleteAgentRuntimeEndpointInput {
            agent_runtime_id: self.agent_runtime_id,
            endpoint_name: self.endpoint_name,
            client_token: self.client_token,
        })
    }
}
impl ::std::fmt::Debug for DeleteAgentRuntimeEndpointInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteAgentRuntimeEndpointInputBuilder");
        formatter.field("agent_runtime_id", &self.agent_runtime_id);
        formatter.field("endpoint_name", &"*** Sensitive Data Redacted ***");
        formatter.field("client_token", &self.client_token);
        formatter.finish()
    }
}
