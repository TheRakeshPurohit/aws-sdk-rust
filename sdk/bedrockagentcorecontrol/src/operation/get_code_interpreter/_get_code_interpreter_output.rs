// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GetCodeInterpreterOutput {
    /// <p>The unique identifier of the code interpreter.</p>
    pub code_interpreter_id: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) of the code interpreter.</p>
    pub code_interpreter_arn: ::std::string::String,
    /// <p>The name of the code interpreter.</p>
    pub name: ::std::string::String,
    /// <p>The description of the code interpreter.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The IAM role ARN that provides permissions for the code interpreter.</p>
    pub execution_role_arn: ::std::option::Option<::std::string::String>,
    /// <p>The network configuration for a code interpreter. This structure defines how the code interpreter connects to the network.</p>
    pub network_configuration: ::std::option::Option<crate::types::CodeInterpreterNetworkConfiguration>,
    /// <p>The current status of the code interpreter.</p>
    pub status: crate::types::CodeInterpreterStatus,
    /// <p>The timestamp when the code interpreter was created.</p>
    pub created_at: ::aws_smithy_types::DateTime,
    /// <p>The timestamp when the code interpreter was last updated.</p>
    pub last_updated_at: ::aws_smithy_types::DateTime,
    _request_id: Option<String>,
}
impl GetCodeInterpreterOutput {
    /// <p>The unique identifier of the code interpreter.</p>
    pub fn code_interpreter_id(&self) -> &str {
        use std::ops::Deref;
        self.code_interpreter_id.deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the code interpreter.</p>
    pub fn code_interpreter_arn(&self) -> &str {
        use std::ops::Deref;
        self.code_interpreter_arn.deref()
    }
    /// <p>The name of the code interpreter.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The description of the code interpreter.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The IAM role ARN that provides permissions for the code interpreter.</p>
    pub fn execution_role_arn(&self) -> ::std::option::Option<&str> {
        self.execution_role_arn.as_deref()
    }
    /// <p>The network configuration for a code interpreter. This structure defines how the code interpreter connects to the network.</p>
    pub fn network_configuration(&self) -> ::std::option::Option<&crate::types::CodeInterpreterNetworkConfiguration> {
        self.network_configuration.as_ref()
    }
    /// <p>The current status of the code interpreter.</p>
    pub fn status(&self) -> &crate::types::CodeInterpreterStatus {
        &self.status
    }
    /// <p>The timestamp when the code interpreter was created.</p>
    pub fn created_at(&self) -> &::aws_smithy_types::DateTime {
        &self.created_at
    }
    /// <p>The timestamp when the code interpreter was last updated.</p>
    pub fn last_updated_at(&self) -> &::aws_smithy_types::DateTime {
        &self.last_updated_at
    }
}
impl ::std::fmt::Debug for GetCodeInterpreterOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetCodeInterpreterOutput");
        formatter.field("code_interpreter_id", &self.code_interpreter_id);
        formatter.field("code_interpreter_arn", &self.code_interpreter_arn);
        formatter.field("name", &self.name);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("execution_role_arn", &self.execution_role_arn);
        formatter.field("network_configuration", &self.network_configuration);
        formatter.field("status", &self.status);
        formatter.field("created_at", &self.created_at);
        formatter.field("last_updated_at", &self.last_updated_at);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_types::request_id::RequestId for GetCodeInterpreterOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetCodeInterpreterOutput {
    /// Creates a new builder-style object to manufacture [`GetCodeInterpreterOutput`](crate::operation::get_code_interpreter::GetCodeInterpreterOutput).
    pub fn builder() -> crate::operation::get_code_interpreter::builders::GetCodeInterpreterOutputBuilder {
        crate::operation::get_code_interpreter::builders::GetCodeInterpreterOutputBuilder::default()
    }
}

/// A builder for [`GetCodeInterpreterOutput`](crate::operation::get_code_interpreter::GetCodeInterpreterOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct GetCodeInterpreterOutputBuilder {
    pub(crate) code_interpreter_id: ::std::option::Option<::std::string::String>,
    pub(crate) code_interpreter_arn: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) execution_role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) network_configuration: ::std::option::Option<crate::types::CodeInterpreterNetworkConfiguration>,
    pub(crate) status: ::std::option::Option<crate::types::CodeInterpreterStatus>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl GetCodeInterpreterOutputBuilder {
    /// <p>The unique identifier of the code interpreter.</p>
    /// This field is required.
    pub fn code_interpreter_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.code_interpreter_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the code interpreter.</p>
    pub fn set_code_interpreter_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.code_interpreter_id = input;
        self
    }
    /// <p>The unique identifier of the code interpreter.</p>
    pub fn get_code_interpreter_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.code_interpreter_id
    }
    /// <p>The Amazon Resource Name (ARN) of the code interpreter.</p>
    /// This field is required.
    pub fn code_interpreter_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.code_interpreter_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the code interpreter.</p>
    pub fn set_code_interpreter_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.code_interpreter_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the code interpreter.</p>
    pub fn get_code_interpreter_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.code_interpreter_arn
    }
    /// <p>The name of the code interpreter.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the code interpreter.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the code interpreter.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The description of the code interpreter.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the code interpreter.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the code interpreter.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The IAM role ARN that provides permissions for the code interpreter.</p>
    pub fn execution_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.execution_role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IAM role ARN that provides permissions for the code interpreter.</p>
    pub fn set_execution_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.execution_role_arn = input;
        self
    }
    /// <p>The IAM role ARN that provides permissions for the code interpreter.</p>
    pub fn get_execution_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.execution_role_arn
    }
    /// <p>The network configuration for a code interpreter. This structure defines how the code interpreter connects to the network.</p>
    /// This field is required.
    pub fn network_configuration(mut self, input: crate::types::CodeInterpreterNetworkConfiguration) -> Self {
        self.network_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The network configuration for a code interpreter. This structure defines how the code interpreter connects to the network.</p>
    pub fn set_network_configuration(mut self, input: ::std::option::Option<crate::types::CodeInterpreterNetworkConfiguration>) -> Self {
        self.network_configuration = input;
        self
    }
    /// <p>The network configuration for a code interpreter. This structure defines how the code interpreter connects to the network.</p>
    pub fn get_network_configuration(&self) -> &::std::option::Option<crate::types::CodeInterpreterNetworkConfiguration> {
        &self.network_configuration
    }
    /// <p>The current status of the code interpreter.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::CodeInterpreterStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the code interpreter.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::CodeInterpreterStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status of the code interpreter.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::CodeInterpreterStatus> {
        &self.status
    }
    /// <p>The timestamp when the code interpreter was created.</p>
    /// This field is required.
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the code interpreter was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The timestamp when the code interpreter was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The timestamp when the code interpreter was last updated.</p>
    /// This field is required.
    pub fn last_updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the code interpreter was last updated.</p>
    pub fn set_last_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated_at = input;
        self
    }
    /// <p>The timestamp when the code interpreter was last updated.</p>
    pub fn get_last_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated_at
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetCodeInterpreterOutput`](crate::operation::get_code_interpreter::GetCodeInterpreterOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`code_interpreter_id`](crate::operation::get_code_interpreter::builders::GetCodeInterpreterOutputBuilder::code_interpreter_id)
    /// - [`code_interpreter_arn`](crate::operation::get_code_interpreter::builders::GetCodeInterpreterOutputBuilder::code_interpreter_arn)
    /// - [`name`](crate::operation::get_code_interpreter::builders::GetCodeInterpreterOutputBuilder::name)
    /// - [`status`](crate::operation::get_code_interpreter::builders::GetCodeInterpreterOutputBuilder::status)
    /// - [`created_at`](crate::operation::get_code_interpreter::builders::GetCodeInterpreterOutputBuilder::created_at)
    /// - [`last_updated_at`](crate::operation::get_code_interpreter::builders::GetCodeInterpreterOutputBuilder::last_updated_at)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::get_code_interpreter::GetCodeInterpreterOutput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::get_code_interpreter::GetCodeInterpreterOutput {
            code_interpreter_id: self.code_interpreter_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "code_interpreter_id",
                    "code_interpreter_id was not specified but it is required when building GetCodeInterpreterOutput",
                )
            })?,
            code_interpreter_arn: self.code_interpreter_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "code_interpreter_arn",
                    "code_interpreter_arn was not specified but it is required when building GetCodeInterpreterOutput",
                )
            })?,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building GetCodeInterpreterOutput",
                )
            })?,
            description: self.description,
            execution_role_arn: self.execution_role_arn,
            network_configuration: self.network_configuration,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building GetCodeInterpreterOutput",
                )
            })?,
            created_at: self.created_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_at",
                    "created_at was not specified but it is required when building GetCodeInterpreterOutput",
                )
            })?,
            last_updated_at: self.last_updated_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "last_updated_at",
                    "last_updated_at was not specified but it is required when building GetCodeInterpreterOutput",
                )
            })?,
            _request_id: self._request_id,
        })
    }
}
impl ::std::fmt::Debug for GetCodeInterpreterOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetCodeInterpreterOutputBuilder");
        formatter.field("code_interpreter_id", &self.code_interpreter_id);
        formatter.field("code_interpreter_arn", &self.code_interpreter_arn);
        formatter.field("name", &self.name);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("execution_role_arn", &self.execution_role_arn);
        formatter.field("network_configuration", &self.network_configuration);
        formatter.field("status", &self.status);
        formatter.field("created_at", &self.created_at);
        formatter.field("last_updated_at", &self.last_updated_at);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
