// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GetGatewayOutput {
    /// <p>The Amazon Resource Name (ARN) of the gateway.</p>
    pub gateway_arn: ::std::string::String,
    /// <p>The unique identifier of the gateway.</p>
    pub gateway_id: ::std::string::String,
    /// <p>An endpoint for invoking gateway.</p>
    pub gateway_url: ::std::option::Option<::std::string::String>,
    /// <p>The timestamp when the gateway was created.</p>
    pub created_at: ::aws_smithy_types::DateTime,
    /// <p>The timestamp when the gateway was last updated.</p>
    pub updated_at: ::aws_smithy_types::DateTime,
    /// <p>The current status of the gateway.</p>
    pub status: crate::types::GatewayStatus,
    /// <p>The reasons for the current status of the gateway.</p>
    pub status_reasons: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The name of the gateway.</p>
    pub name: ::std::string::String,
    /// <p>The description of the gateway.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The IAM role ARN that provides permissions for the gateway.</p>
    pub role_arn: ::std::option::Option<::std::string::String>,
    /// <p>Protocol applied to a gateway.</p>
    pub protocol_type: crate::types::GatewayProtocolType,
    /// <p>The configuration for a gateway protocol. This structure defines how the gateway communicates with external services.</p>
    pub protocol_configuration: ::std::option::Option<crate::types::GatewayProtocolConfiguration>,
    /// <p>Authorizer type for the gateway.</p>
    pub authorizer_type: crate::types::AuthorizerType,
    /// <p>The authorizer configuration for the gateway.</p>
    pub authorizer_configuration: ::std::option::Option<crate::types::AuthorizerConfiguration>,
    /// <p>The Amazon Resource Name (ARN) of the KMS key used to encrypt the gateway.</p>
    pub kms_key_arn: ::std::option::Option<::std::string::String>,
    /// <p>The workload identity details for the gateway.</p>
    pub workload_identity_details: ::std::option::Option<crate::types::WorkloadIdentityDetails>,
    /// <p>The level of detail in error messages returned when invoking the gateway.</p>
    /// <ul>
    /// <li>
    /// <p>If the value is <code>DEBUG</code>, granular exception messages are returned to help a user debug the gateway.</p></li>
    /// <li>
    /// <p>If the value is omitted, a generic error message is returned to the end user.</p></li>
    /// </ul>
    pub exception_level: ::std::option::Option<crate::types::ExceptionLevel>,
    _request_id: Option<String>,
}
impl GetGatewayOutput {
    /// <p>The Amazon Resource Name (ARN) of the gateway.</p>
    pub fn gateway_arn(&self) -> &str {
        use std::ops::Deref;
        self.gateway_arn.deref()
    }
    /// <p>The unique identifier of the gateway.</p>
    pub fn gateway_id(&self) -> &str {
        use std::ops::Deref;
        self.gateway_id.deref()
    }
    /// <p>An endpoint for invoking gateway.</p>
    pub fn gateway_url(&self) -> ::std::option::Option<&str> {
        self.gateway_url.as_deref()
    }
    /// <p>The timestamp when the gateway was created.</p>
    pub fn created_at(&self) -> &::aws_smithy_types::DateTime {
        &self.created_at
    }
    /// <p>The timestamp when the gateway was last updated.</p>
    pub fn updated_at(&self) -> &::aws_smithy_types::DateTime {
        &self.updated_at
    }
    /// <p>The current status of the gateway.</p>
    pub fn status(&self) -> &crate::types::GatewayStatus {
        &self.status
    }
    /// <p>The reasons for the current status of the gateway.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.status_reasons.is_none()`.
    pub fn status_reasons(&self) -> &[::std::string::String] {
        self.status_reasons.as_deref().unwrap_or_default()
    }
    /// <p>The name of the gateway.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The description of the gateway.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The IAM role ARN that provides permissions for the gateway.</p>
    pub fn role_arn(&self) -> ::std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>Protocol applied to a gateway.</p>
    pub fn protocol_type(&self) -> &crate::types::GatewayProtocolType {
        &self.protocol_type
    }
    /// <p>The configuration for a gateway protocol. This structure defines how the gateway communicates with external services.</p>
    pub fn protocol_configuration(&self) -> ::std::option::Option<&crate::types::GatewayProtocolConfiguration> {
        self.protocol_configuration.as_ref()
    }
    /// <p>Authorizer type for the gateway.</p>
    pub fn authorizer_type(&self) -> &crate::types::AuthorizerType {
        &self.authorizer_type
    }
    /// <p>The authorizer configuration for the gateway.</p>
    pub fn authorizer_configuration(&self) -> ::std::option::Option<&crate::types::AuthorizerConfiguration> {
        self.authorizer_configuration.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the KMS key used to encrypt the gateway.</p>
    pub fn kms_key_arn(&self) -> ::std::option::Option<&str> {
        self.kms_key_arn.as_deref()
    }
    /// <p>The workload identity details for the gateway.</p>
    pub fn workload_identity_details(&self) -> ::std::option::Option<&crate::types::WorkloadIdentityDetails> {
        self.workload_identity_details.as_ref()
    }
    /// <p>The level of detail in error messages returned when invoking the gateway.</p>
    /// <ul>
    /// <li>
    /// <p>If the value is <code>DEBUG</code>, granular exception messages are returned to help a user debug the gateway.</p></li>
    /// <li>
    /// <p>If the value is omitted, a generic error message is returned to the end user.</p></li>
    /// </ul>
    pub fn exception_level(&self) -> ::std::option::Option<&crate::types::ExceptionLevel> {
        self.exception_level.as_ref()
    }
}
impl ::std::fmt::Debug for GetGatewayOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetGatewayOutput");
        formatter.field("gateway_arn", &self.gateway_arn);
        formatter.field("gateway_id", &self.gateway_id);
        formatter.field("gateway_url", &self.gateway_url);
        formatter.field("created_at", &self.created_at);
        formatter.field("updated_at", &self.updated_at);
        formatter.field("status", &self.status);
        formatter.field("status_reasons", &self.status_reasons);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("role_arn", &self.role_arn);
        formatter.field("protocol_type", &self.protocol_type);
        formatter.field("protocol_configuration", &self.protocol_configuration);
        formatter.field("authorizer_type", &self.authorizer_type);
        formatter.field("authorizer_configuration", &self.authorizer_configuration);
        formatter.field("kms_key_arn", &self.kms_key_arn);
        formatter.field("workload_identity_details", &self.workload_identity_details);
        formatter.field("exception_level", &self.exception_level);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_types::request_id::RequestId for GetGatewayOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetGatewayOutput {
    /// Creates a new builder-style object to manufacture [`GetGatewayOutput`](crate::operation::get_gateway::GetGatewayOutput).
    pub fn builder() -> crate::operation::get_gateway::builders::GetGatewayOutputBuilder {
        crate::operation::get_gateway::builders::GetGatewayOutputBuilder::default()
    }
}

/// A builder for [`GetGatewayOutput`](crate::operation::get_gateway::GetGatewayOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct GetGatewayOutputBuilder {
    pub(crate) gateway_arn: ::std::option::Option<::std::string::String>,
    pub(crate) gateway_id: ::std::option::Option<::std::string::String>,
    pub(crate) gateway_url: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) status: ::std::option::Option<crate::types::GatewayStatus>,
    pub(crate) status_reasons: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) protocol_type: ::std::option::Option<crate::types::GatewayProtocolType>,
    pub(crate) protocol_configuration: ::std::option::Option<crate::types::GatewayProtocolConfiguration>,
    pub(crate) authorizer_type: ::std::option::Option<crate::types::AuthorizerType>,
    pub(crate) authorizer_configuration: ::std::option::Option<crate::types::AuthorizerConfiguration>,
    pub(crate) kms_key_arn: ::std::option::Option<::std::string::String>,
    pub(crate) workload_identity_details: ::std::option::Option<crate::types::WorkloadIdentityDetails>,
    pub(crate) exception_level: ::std::option::Option<crate::types::ExceptionLevel>,
    _request_id: Option<String>,
}
impl GetGatewayOutputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the gateway.</p>
    /// This field is required.
    pub fn gateway_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.gateway_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the gateway.</p>
    pub fn set_gateway_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.gateway_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the gateway.</p>
    pub fn get_gateway_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.gateway_arn
    }
    /// <p>The unique identifier of the gateway.</p>
    /// This field is required.
    pub fn gateway_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.gateway_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the gateway.</p>
    pub fn set_gateway_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.gateway_id = input;
        self
    }
    /// <p>The unique identifier of the gateway.</p>
    pub fn get_gateway_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.gateway_id
    }
    /// <p>An endpoint for invoking gateway.</p>
    pub fn gateway_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.gateway_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An endpoint for invoking gateway.</p>
    pub fn set_gateway_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.gateway_url = input;
        self
    }
    /// <p>An endpoint for invoking gateway.</p>
    pub fn get_gateway_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.gateway_url
    }
    /// <p>The timestamp when the gateway was created.</p>
    /// This field is required.
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the gateway was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The timestamp when the gateway was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The timestamp when the gateway was last updated.</p>
    /// This field is required.
    pub fn updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the gateway was last updated.</p>
    pub fn set_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>The timestamp when the gateway was last updated.</p>
    pub fn get_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_at
    }
    /// <p>The current status of the gateway.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::GatewayStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the gateway.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::GatewayStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status of the gateway.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::GatewayStatus> {
        &self.status
    }
    /// Appends an item to `status_reasons`.
    ///
    /// To override the contents of this collection use [`set_status_reasons`](Self::set_status_reasons).
    ///
    /// <p>The reasons for the current status of the gateway.</p>
    pub fn status_reasons(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.status_reasons.unwrap_or_default();
        v.push(input.into());
        self.status_reasons = ::std::option::Option::Some(v);
        self
    }
    /// <p>The reasons for the current status of the gateway.</p>
    pub fn set_status_reasons(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.status_reasons = input;
        self
    }
    /// <p>The reasons for the current status of the gateway.</p>
    pub fn get_status_reasons(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.status_reasons
    }
    /// <p>The name of the gateway.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the gateway.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the gateway.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The description of the gateway.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the gateway.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the gateway.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The IAM role ARN that provides permissions for the gateway.</p>
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IAM role ARN that provides permissions for the gateway.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The IAM role ARN that provides permissions for the gateway.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// <p>Protocol applied to a gateway.</p>
    /// This field is required.
    pub fn protocol_type(mut self, input: crate::types::GatewayProtocolType) -> Self {
        self.protocol_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Protocol applied to a gateway.</p>
    pub fn set_protocol_type(mut self, input: ::std::option::Option<crate::types::GatewayProtocolType>) -> Self {
        self.protocol_type = input;
        self
    }
    /// <p>Protocol applied to a gateway.</p>
    pub fn get_protocol_type(&self) -> &::std::option::Option<crate::types::GatewayProtocolType> {
        &self.protocol_type
    }
    /// <p>The configuration for a gateway protocol. This structure defines how the gateway communicates with external services.</p>
    pub fn protocol_configuration(mut self, input: crate::types::GatewayProtocolConfiguration) -> Self {
        self.protocol_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration for a gateway protocol. This structure defines how the gateway communicates with external services.</p>
    pub fn set_protocol_configuration(mut self, input: ::std::option::Option<crate::types::GatewayProtocolConfiguration>) -> Self {
        self.protocol_configuration = input;
        self
    }
    /// <p>The configuration for a gateway protocol. This structure defines how the gateway communicates with external services.</p>
    pub fn get_protocol_configuration(&self) -> &::std::option::Option<crate::types::GatewayProtocolConfiguration> {
        &self.protocol_configuration
    }
    /// <p>Authorizer type for the gateway.</p>
    /// This field is required.
    pub fn authorizer_type(mut self, input: crate::types::AuthorizerType) -> Self {
        self.authorizer_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Authorizer type for the gateway.</p>
    pub fn set_authorizer_type(mut self, input: ::std::option::Option<crate::types::AuthorizerType>) -> Self {
        self.authorizer_type = input;
        self
    }
    /// <p>Authorizer type for the gateway.</p>
    pub fn get_authorizer_type(&self) -> &::std::option::Option<crate::types::AuthorizerType> {
        &self.authorizer_type
    }
    /// <p>The authorizer configuration for the gateway.</p>
    pub fn authorizer_configuration(mut self, input: crate::types::AuthorizerConfiguration) -> Self {
        self.authorizer_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The authorizer configuration for the gateway.</p>
    pub fn set_authorizer_configuration(mut self, input: ::std::option::Option<crate::types::AuthorizerConfiguration>) -> Self {
        self.authorizer_configuration = input;
        self
    }
    /// <p>The authorizer configuration for the gateway.</p>
    pub fn get_authorizer_configuration(&self) -> &::std::option::Option<crate::types::AuthorizerConfiguration> {
        &self.authorizer_configuration
    }
    /// <p>The Amazon Resource Name (ARN) of the KMS key used to encrypt the gateway.</p>
    pub fn kms_key_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.kms_key_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the KMS key used to encrypt the gateway.</p>
    pub fn set_kms_key_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.kms_key_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the KMS key used to encrypt the gateway.</p>
    pub fn get_kms_key_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.kms_key_arn
    }
    /// <p>The workload identity details for the gateway.</p>
    pub fn workload_identity_details(mut self, input: crate::types::WorkloadIdentityDetails) -> Self {
        self.workload_identity_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>The workload identity details for the gateway.</p>
    pub fn set_workload_identity_details(mut self, input: ::std::option::Option<crate::types::WorkloadIdentityDetails>) -> Self {
        self.workload_identity_details = input;
        self
    }
    /// <p>The workload identity details for the gateway.</p>
    pub fn get_workload_identity_details(&self) -> &::std::option::Option<crate::types::WorkloadIdentityDetails> {
        &self.workload_identity_details
    }
    /// <p>The level of detail in error messages returned when invoking the gateway.</p>
    /// <ul>
    /// <li>
    /// <p>If the value is <code>DEBUG</code>, granular exception messages are returned to help a user debug the gateway.</p></li>
    /// <li>
    /// <p>If the value is omitted, a generic error message is returned to the end user.</p></li>
    /// </ul>
    pub fn exception_level(mut self, input: crate::types::ExceptionLevel) -> Self {
        self.exception_level = ::std::option::Option::Some(input);
        self
    }
    /// <p>The level of detail in error messages returned when invoking the gateway.</p>
    /// <ul>
    /// <li>
    /// <p>If the value is <code>DEBUG</code>, granular exception messages are returned to help a user debug the gateway.</p></li>
    /// <li>
    /// <p>If the value is omitted, a generic error message is returned to the end user.</p></li>
    /// </ul>
    pub fn set_exception_level(mut self, input: ::std::option::Option<crate::types::ExceptionLevel>) -> Self {
        self.exception_level = input;
        self
    }
    /// <p>The level of detail in error messages returned when invoking the gateway.</p>
    /// <ul>
    /// <li>
    /// <p>If the value is <code>DEBUG</code>, granular exception messages are returned to help a user debug the gateway.</p></li>
    /// <li>
    /// <p>If the value is omitted, a generic error message is returned to the end user.</p></li>
    /// </ul>
    pub fn get_exception_level(&self) -> &::std::option::Option<crate::types::ExceptionLevel> {
        &self.exception_level
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetGatewayOutput`](crate::operation::get_gateway::GetGatewayOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`gateway_arn`](crate::operation::get_gateway::builders::GetGatewayOutputBuilder::gateway_arn)
    /// - [`gateway_id`](crate::operation::get_gateway::builders::GetGatewayOutputBuilder::gateway_id)
    /// - [`created_at`](crate::operation::get_gateway::builders::GetGatewayOutputBuilder::created_at)
    /// - [`updated_at`](crate::operation::get_gateway::builders::GetGatewayOutputBuilder::updated_at)
    /// - [`status`](crate::operation::get_gateway::builders::GetGatewayOutputBuilder::status)
    /// - [`name`](crate::operation::get_gateway::builders::GetGatewayOutputBuilder::name)
    /// - [`protocol_type`](crate::operation::get_gateway::builders::GetGatewayOutputBuilder::protocol_type)
    /// - [`authorizer_type`](crate::operation::get_gateway::builders::GetGatewayOutputBuilder::authorizer_type)
    pub fn build(self) -> ::std::result::Result<crate::operation::get_gateway::GetGatewayOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::get_gateway::GetGatewayOutput {
            gateway_arn: self.gateway_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "gateway_arn",
                    "gateway_arn was not specified but it is required when building GetGatewayOutput",
                )
            })?,
            gateway_id: self.gateway_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "gateway_id",
                    "gateway_id was not specified but it is required when building GetGatewayOutput",
                )
            })?,
            gateway_url: self.gateway_url,
            created_at: self.created_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_at",
                    "created_at was not specified but it is required when building GetGatewayOutput",
                )
            })?,
            updated_at: self.updated_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "updated_at",
                    "updated_at was not specified but it is required when building GetGatewayOutput",
                )
            })?,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building GetGatewayOutput",
                )
            })?,
            status_reasons: self.status_reasons,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building GetGatewayOutput",
                )
            })?,
            description: self.description,
            role_arn: self.role_arn,
            protocol_type: self.protocol_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "protocol_type",
                    "protocol_type was not specified but it is required when building GetGatewayOutput",
                )
            })?,
            protocol_configuration: self.protocol_configuration,
            authorizer_type: self.authorizer_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "authorizer_type",
                    "authorizer_type was not specified but it is required when building GetGatewayOutput",
                )
            })?,
            authorizer_configuration: self.authorizer_configuration,
            kms_key_arn: self.kms_key_arn,
            workload_identity_details: self.workload_identity_details,
            exception_level: self.exception_level,
            _request_id: self._request_id,
        })
    }
}
impl ::std::fmt::Debug for GetGatewayOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetGatewayOutputBuilder");
        formatter.field("gateway_arn", &self.gateway_arn);
        formatter.field("gateway_id", &self.gateway_id);
        formatter.field("gateway_url", &self.gateway_url);
        formatter.field("created_at", &self.created_at);
        formatter.field("updated_at", &self.updated_at);
        formatter.field("status", &self.status);
        formatter.field("status_reasons", &self.status_reasons);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("role_arn", &self.role_arn);
        formatter.field("protocol_type", &self.protocol_type);
        formatter.field("protocol_configuration", &self.protocol_configuration);
        formatter.field("authorizer_type", &self.authorizer_type);
        formatter.field("authorizer_configuration", &self.authorizer_configuration);
        formatter.field("kms_key_arn", &self.kms_key_arn);
        formatter.field("workload_identity_details", &self.workload_identity_details);
        formatter.field("exception_level", &self.exception_level);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
