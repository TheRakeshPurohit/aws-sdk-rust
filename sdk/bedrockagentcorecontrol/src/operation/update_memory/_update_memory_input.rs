// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct UpdateMemoryInput {
    /// <p>A client token is used for keeping track of idempotent requests. It can contain a session id which can be around 250 chars, combined with a unique AWS identifier.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of the memory to update.</p>
    pub memory_id: ::std::option::Option<::std::string::String>,
    /// <p>The updated description of the memory.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The number of days after which memory events will expire, between 7 and 365 days.</p>
    pub event_expiry_duration: ::std::option::Option<i32>,
    /// <p>The ARN of the IAM role that provides permissions for the memory.</p>
    pub memory_execution_role_arn: ::std::option::Option<::std::string::String>,
    /// <p>The memory strategies to add, modify, or delete.</p>
    pub memory_strategies: ::std::option::Option<crate::types::ModifyMemoryStrategies>,
}
impl UpdateMemoryInput {
    /// <p>A client token is used for keeping track of idempotent requests. It can contain a session id which can be around 250 chars, combined with a unique AWS identifier.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>The unique identifier of the memory to update.</p>
    pub fn memory_id(&self) -> ::std::option::Option<&str> {
        self.memory_id.as_deref()
    }
    /// <p>The updated description of the memory.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The number of days after which memory events will expire, between 7 and 365 days.</p>
    pub fn event_expiry_duration(&self) -> ::std::option::Option<i32> {
        self.event_expiry_duration
    }
    /// <p>The ARN of the IAM role that provides permissions for the memory.</p>
    pub fn memory_execution_role_arn(&self) -> ::std::option::Option<&str> {
        self.memory_execution_role_arn.as_deref()
    }
    /// <p>The memory strategies to add, modify, or delete.</p>
    pub fn memory_strategies(&self) -> ::std::option::Option<&crate::types::ModifyMemoryStrategies> {
        self.memory_strategies.as_ref()
    }
}
impl ::std::fmt::Debug for UpdateMemoryInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateMemoryInput");
        formatter.field("client_token", &self.client_token);
        formatter.field("memory_id", &self.memory_id);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("event_expiry_duration", &self.event_expiry_duration);
        formatter.field("memory_execution_role_arn", &self.memory_execution_role_arn);
        formatter.field("memory_strategies", &self.memory_strategies);
        formatter.finish()
    }
}
impl UpdateMemoryInput {
    /// Creates a new builder-style object to manufacture [`UpdateMemoryInput`](crate::operation::update_memory::UpdateMemoryInput).
    pub fn builder() -> crate::operation::update_memory::builders::UpdateMemoryInputBuilder {
        crate::operation::update_memory::builders::UpdateMemoryInputBuilder::default()
    }
}

/// A builder for [`UpdateMemoryInput`](crate::operation::update_memory::UpdateMemoryInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct UpdateMemoryInputBuilder {
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) memory_id: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) event_expiry_duration: ::std::option::Option<i32>,
    pub(crate) memory_execution_role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) memory_strategies: ::std::option::Option<crate::types::ModifyMemoryStrategies>,
}
impl UpdateMemoryInputBuilder {
    /// <p>A client token is used for keeping track of idempotent requests. It can contain a session id which can be around 250 chars, combined with a unique AWS identifier.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A client token is used for keeping track of idempotent requests. It can contain a session id which can be around 250 chars, combined with a unique AWS identifier.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A client token is used for keeping track of idempotent requests. It can contain a session id which can be around 250 chars, combined with a unique AWS identifier.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// <p>The unique identifier of the memory to update.</p>
    /// This field is required.
    pub fn memory_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.memory_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the memory to update.</p>
    pub fn set_memory_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.memory_id = input;
        self
    }
    /// <p>The unique identifier of the memory to update.</p>
    pub fn get_memory_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.memory_id
    }
    /// <p>The updated description of the memory.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The updated description of the memory.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The updated description of the memory.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The number of days after which memory events will expire, between 7 and 365 days.</p>
    pub fn event_expiry_duration(mut self, input: i32) -> Self {
        self.event_expiry_duration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of days after which memory events will expire, between 7 and 365 days.</p>
    pub fn set_event_expiry_duration(mut self, input: ::std::option::Option<i32>) -> Self {
        self.event_expiry_duration = input;
        self
    }
    /// <p>The number of days after which memory events will expire, between 7 and 365 days.</p>
    pub fn get_event_expiry_duration(&self) -> &::std::option::Option<i32> {
        &self.event_expiry_duration
    }
    /// <p>The ARN of the IAM role that provides permissions for the memory.</p>
    pub fn memory_execution_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.memory_execution_role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the IAM role that provides permissions for the memory.</p>
    pub fn set_memory_execution_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.memory_execution_role_arn = input;
        self
    }
    /// <p>The ARN of the IAM role that provides permissions for the memory.</p>
    pub fn get_memory_execution_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.memory_execution_role_arn
    }
    /// <p>The memory strategies to add, modify, or delete.</p>
    pub fn memory_strategies(mut self, input: crate::types::ModifyMemoryStrategies) -> Self {
        self.memory_strategies = ::std::option::Option::Some(input);
        self
    }
    /// <p>The memory strategies to add, modify, or delete.</p>
    pub fn set_memory_strategies(mut self, input: ::std::option::Option<crate::types::ModifyMemoryStrategies>) -> Self {
        self.memory_strategies = input;
        self
    }
    /// <p>The memory strategies to add, modify, or delete.</p>
    pub fn get_memory_strategies(&self) -> &::std::option::Option<crate::types::ModifyMemoryStrategies> {
        &self.memory_strategies
    }
    /// Consumes the builder and constructs a [`UpdateMemoryInput`](crate::operation::update_memory::UpdateMemoryInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_memory::UpdateMemoryInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_memory::UpdateMemoryInput {
            client_token: self.client_token,
            memory_id: self.memory_id,
            description: self.description,
            event_expiry_duration: self.event_expiry_duration,
            memory_execution_role_arn: self.memory_execution_role_arn,
            memory_strategies: self.memory_strategies,
        })
    }
}
impl ::std::fmt::Debug for UpdateMemoryInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateMemoryInputBuilder");
        formatter.field("client_token", &self.client_token);
        formatter.field("memory_id", &self.memory_id);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("event_expiry_duration", &self.event_expiry_duration);
        formatter.field("memory_execution_role_arn", &self.memory_execution_role_arn);
        formatter.field("memory_strategies", &self.memory_strategies);
        formatter.finish()
    }
}
