// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct UpdateApiKeyCredentialProviderInput {
    /// <p>The name of the API key credential provider to update.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The new API key to use for authentication. This value replaces the existing API key and is encrypted and stored securely.</p>
    pub api_key: ::std::option::Option<::std::string::String>,
}
impl UpdateApiKeyCredentialProviderInput {
    /// <p>The name of the API key credential provider to update.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The new API key to use for authentication. This value replaces the existing API key and is encrypted and stored securely.</p>
    pub fn api_key(&self) -> ::std::option::Option<&str> {
        self.api_key.as_deref()
    }
}
impl ::std::fmt::Debug for UpdateApiKeyCredentialProviderInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateApiKeyCredentialProviderInput");
        formatter.field("name", &self.name);
        formatter.field("api_key", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl UpdateApiKeyCredentialProviderInput {
    /// Creates a new builder-style object to manufacture [`UpdateApiKeyCredentialProviderInput`](crate::operation::update_api_key_credential_provider::UpdateApiKeyCredentialProviderInput).
    pub fn builder() -> crate::operation::update_api_key_credential_provider::builders::UpdateApiKeyCredentialProviderInputBuilder {
        crate::operation::update_api_key_credential_provider::builders::UpdateApiKeyCredentialProviderInputBuilder::default()
    }
}

/// A builder for [`UpdateApiKeyCredentialProviderInput`](crate::operation::update_api_key_credential_provider::UpdateApiKeyCredentialProviderInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct UpdateApiKeyCredentialProviderInputBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) api_key: ::std::option::Option<::std::string::String>,
}
impl UpdateApiKeyCredentialProviderInputBuilder {
    /// <p>The name of the API key credential provider to update.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the API key credential provider to update.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the API key credential provider to update.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The new API key to use for authentication. This value replaces the existing API key and is encrypted and stored securely.</p>
    /// This field is required.
    pub fn api_key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.api_key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The new API key to use for authentication. This value replaces the existing API key and is encrypted and stored securely.</p>
    pub fn set_api_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.api_key = input;
        self
    }
    /// <p>The new API key to use for authentication. This value replaces the existing API key and is encrypted and stored securely.</p>
    pub fn get_api_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.api_key
    }
    /// Consumes the builder and constructs a [`UpdateApiKeyCredentialProviderInput`](crate::operation::update_api_key_credential_provider::UpdateApiKeyCredentialProviderInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_api_key_credential_provider::UpdateApiKeyCredentialProviderInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::update_api_key_credential_provider::UpdateApiKeyCredentialProviderInput {
                name: self.name,
                api_key: self.api_key,
            },
        )
    }
}
impl ::std::fmt::Debug for UpdateApiKeyCredentialProviderInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateApiKeyCredentialProviderInputBuilder");
        formatter.field("name", &self.name);
        formatter.field("api_key", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
