// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about a memory resource.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct Memory {
    /// <p>The Amazon Resource Name (ARN) of the memory.</p>
    pub arn: ::std::string::String,
    /// <p>The unique identifier of the memory.</p>
    pub id: ::std::string::String,
    /// <p>The name of the memory.</p>
    pub name: ::std::string::String,
    /// <p>The description of the memory.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the KMS key used to encrypt the memory.</p>
    pub encryption_key_arn: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the IAM role that provides permissions for the memory.</p>
    pub memory_execution_role_arn: ::std::option::Option<::std::string::String>,
    /// <p>The number of days after which memory events will expire.</p>
    pub event_expiry_duration: i32,
    /// <p>The current status of the memory.</p>
    pub status: crate::types::MemoryStatus,
    /// <p>The reason for failure if the memory is in a failed state.</p>
    pub failure_reason: ::std::option::Option<::std::string::String>,
    /// <p>The timestamp when the memory was created.</p>
    pub created_at: ::aws_smithy_types::DateTime,
    /// <p>The timestamp when the memory was last updated.</p>
    pub updated_at: ::aws_smithy_types::DateTime,
    /// <p>The list of memory strategies associated with this memory.</p>
    pub strategies: ::std::option::Option<::std::vec::Vec<crate::types::MemoryStrategy>>,
}
impl Memory {
    /// <p>The Amazon Resource Name (ARN) of the memory.</p>
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// <p>The unique identifier of the memory.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>The name of the memory.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The description of the memory.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The ARN of the KMS key used to encrypt the memory.</p>
    pub fn encryption_key_arn(&self) -> ::std::option::Option<&str> {
        self.encryption_key_arn.as_deref()
    }
    /// <p>The ARN of the IAM role that provides permissions for the memory.</p>
    pub fn memory_execution_role_arn(&self) -> ::std::option::Option<&str> {
        self.memory_execution_role_arn.as_deref()
    }
    /// <p>The number of days after which memory events will expire.</p>
    pub fn event_expiry_duration(&self) -> i32 {
        self.event_expiry_duration
    }
    /// <p>The current status of the memory.</p>
    pub fn status(&self) -> &crate::types::MemoryStatus {
        &self.status
    }
    /// <p>The reason for failure if the memory is in a failed state.</p>
    pub fn failure_reason(&self) -> ::std::option::Option<&str> {
        self.failure_reason.as_deref()
    }
    /// <p>The timestamp when the memory was created.</p>
    pub fn created_at(&self) -> &::aws_smithy_types::DateTime {
        &self.created_at
    }
    /// <p>The timestamp when the memory was last updated.</p>
    pub fn updated_at(&self) -> &::aws_smithy_types::DateTime {
        &self.updated_at
    }
    /// <p>The list of memory strategies associated with this memory.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.strategies.is_none()`.
    pub fn strategies(&self) -> &[crate::types::MemoryStrategy] {
        self.strategies.as_deref().unwrap_or_default()
    }
}
impl ::std::fmt::Debug for Memory {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("Memory");
        formatter.field("arn", &self.arn);
        formatter.field("id", &self.id);
        formatter.field("name", &self.name);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("encryption_key_arn", &self.encryption_key_arn);
        formatter.field("memory_execution_role_arn", &self.memory_execution_role_arn);
        formatter.field("event_expiry_duration", &self.event_expiry_duration);
        formatter.field("status", &self.status);
        formatter.field("failure_reason", &self.failure_reason);
        formatter.field("created_at", &self.created_at);
        formatter.field("updated_at", &self.updated_at);
        formatter.field("strategies", &self.strategies);
        formatter.finish()
    }
}
impl Memory {
    /// Creates a new builder-style object to manufacture [`Memory`](crate::types::Memory).
    pub fn builder() -> crate::types::builders::MemoryBuilder {
        crate::types::builders::MemoryBuilder::default()
    }
}

/// A builder for [`Memory`](crate::types::Memory).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct MemoryBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) encryption_key_arn: ::std::option::Option<::std::string::String>,
    pub(crate) memory_execution_role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) event_expiry_duration: ::std::option::Option<i32>,
    pub(crate) status: ::std::option::Option<crate::types::MemoryStatus>,
    pub(crate) failure_reason: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) strategies: ::std::option::Option<::std::vec::Vec<crate::types::MemoryStrategy>>,
}
impl MemoryBuilder {
    /// <p>The Amazon Resource Name (ARN) of the memory.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the memory.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the memory.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The unique identifier of the memory.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the memory.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The unique identifier of the memory.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The name of the memory.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the memory.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the memory.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The description of the memory.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the memory.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the memory.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The ARN of the KMS key used to encrypt the memory.</p>
    pub fn encryption_key_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.encryption_key_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the KMS key used to encrypt the memory.</p>
    pub fn set_encryption_key_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.encryption_key_arn = input;
        self
    }
    /// <p>The ARN of the KMS key used to encrypt the memory.</p>
    pub fn get_encryption_key_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.encryption_key_arn
    }
    /// <p>The ARN of the IAM role that provides permissions for the memory.</p>
    pub fn memory_execution_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.memory_execution_role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the IAM role that provides permissions for the memory.</p>
    pub fn set_memory_execution_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.memory_execution_role_arn = input;
        self
    }
    /// <p>The ARN of the IAM role that provides permissions for the memory.</p>
    pub fn get_memory_execution_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.memory_execution_role_arn
    }
    /// <p>The number of days after which memory events will expire.</p>
    /// This field is required.
    pub fn event_expiry_duration(mut self, input: i32) -> Self {
        self.event_expiry_duration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of days after which memory events will expire.</p>
    pub fn set_event_expiry_duration(mut self, input: ::std::option::Option<i32>) -> Self {
        self.event_expiry_duration = input;
        self
    }
    /// <p>The number of days after which memory events will expire.</p>
    pub fn get_event_expiry_duration(&self) -> &::std::option::Option<i32> {
        &self.event_expiry_duration
    }
    /// <p>The current status of the memory.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::MemoryStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the memory.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::MemoryStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status of the memory.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::MemoryStatus> {
        &self.status
    }
    /// <p>The reason for failure if the memory is in a failed state.</p>
    pub fn failure_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.failure_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The reason for failure if the memory is in a failed state.</p>
    pub fn set_failure_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.failure_reason = input;
        self
    }
    /// <p>The reason for failure if the memory is in a failed state.</p>
    pub fn get_failure_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.failure_reason
    }
    /// <p>The timestamp when the memory was created.</p>
    /// This field is required.
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the memory was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The timestamp when the memory was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The timestamp when the memory was last updated.</p>
    /// This field is required.
    pub fn updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the memory was last updated.</p>
    pub fn set_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>The timestamp when the memory was last updated.</p>
    pub fn get_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_at
    }
    /// Appends an item to `strategies`.
    ///
    /// To override the contents of this collection use [`set_strategies`](Self::set_strategies).
    ///
    /// <p>The list of memory strategies associated with this memory.</p>
    pub fn strategies(mut self, input: crate::types::MemoryStrategy) -> Self {
        let mut v = self.strategies.unwrap_or_default();
        v.push(input);
        self.strategies = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of memory strategies associated with this memory.</p>
    pub fn set_strategies(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::MemoryStrategy>>) -> Self {
        self.strategies = input;
        self
    }
    /// <p>The list of memory strategies associated with this memory.</p>
    pub fn get_strategies(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MemoryStrategy>> {
        &self.strategies
    }
    /// Consumes the builder and constructs a [`Memory`](crate::types::Memory).
    /// This method will fail if any of the following fields are not set:
    /// - [`arn`](crate::types::builders::MemoryBuilder::arn)
    /// - [`id`](crate::types::builders::MemoryBuilder::id)
    /// - [`name`](crate::types::builders::MemoryBuilder::name)
    /// - [`event_expiry_duration`](crate::types::builders::MemoryBuilder::event_expiry_duration)
    /// - [`status`](crate::types::builders::MemoryBuilder::status)
    /// - [`created_at`](crate::types::builders::MemoryBuilder::created_at)
    /// - [`updated_at`](crate::types::builders::MemoryBuilder::updated_at)
    pub fn build(self) -> ::std::result::Result<crate::types::Memory, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::Memory {
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building Memory",
                )
            })?,
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field("id", "id was not specified but it is required when building Memory")
            })?,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building Memory",
                )
            })?,
            description: self.description,
            encryption_key_arn: self.encryption_key_arn,
            memory_execution_role_arn: self.memory_execution_role_arn,
            event_expiry_duration: self.event_expiry_duration.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "event_expiry_duration",
                    "event_expiry_duration was not specified but it is required when building Memory",
                )
            })?,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building Memory",
                )
            })?,
            failure_reason: self.failure_reason,
            created_at: self.created_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_at",
                    "created_at was not specified but it is required when building Memory",
                )
            })?,
            updated_at: self.updated_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "updated_at",
                    "updated_at was not specified but it is required when building Memory",
                )
            })?,
            strategies: self.strategies,
        })
    }
}
impl ::std::fmt::Debug for MemoryBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("MemoryBuilder");
        formatter.field("arn", &self.arn);
        formatter.field("id", &self.id);
        formatter.field("name", &self.name);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("encryption_key_arn", &self.encryption_key_arn);
        formatter.field("memory_execution_role_arn", &self.memory_execution_role_arn);
        formatter.field("event_expiry_duration", &self.event_expiry_duration);
        formatter.field("status", &self.status);
        formatter.field("failure_reason", &self.failure_reason);
        formatter.field("created_at", &self.created_at);
        formatter.field("updated_at", &self.updated_at);
        formatter.field("strategies", &self.strategies);
        formatter.finish()
    }
}
