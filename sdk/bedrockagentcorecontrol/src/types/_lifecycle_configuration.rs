// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>LifecycleConfiguration lets you manage the lifecycle of runtime sessions and resources in AgentCore Runtime. This configuration helps optimize resource utilization by automatically cleaning up idle sessions and preventing long-running instances from consuming resources indefinitely.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LifecycleConfiguration {
    /// <p>Timeout in seconds for idle runtime sessions. When a session remains idle for this duration, it will be automatically terminated. Default: 900 seconds (15 minutes).</p>
    pub idle_runtime_session_timeout: ::std::option::Option<i32>,
    /// <p>Maximum lifetime for the instance in seconds. Once reached, instances will be automatically terminated and replaced. Default: 28800 seconds (8 hours).</p>
    pub max_lifetime: ::std::option::Option<i32>,
}
impl LifecycleConfiguration {
    /// <p>Timeout in seconds for idle runtime sessions. When a session remains idle for this duration, it will be automatically terminated. Default: 900 seconds (15 minutes).</p>
    pub fn idle_runtime_session_timeout(&self) -> ::std::option::Option<i32> {
        self.idle_runtime_session_timeout
    }
    /// <p>Maximum lifetime for the instance in seconds. Once reached, instances will be automatically terminated and replaced. Default: 28800 seconds (8 hours).</p>
    pub fn max_lifetime(&self) -> ::std::option::Option<i32> {
        self.max_lifetime
    }
}
impl LifecycleConfiguration {
    /// Creates a new builder-style object to manufacture [`LifecycleConfiguration`](crate::types::LifecycleConfiguration).
    pub fn builder() -> crate::types::builders::LifecycleConfigurationBuilder {
        crate::types::builders::LifecycleConfigurationBuilder::default()
    }
}

/// A builder for [`LifecycleConfiguration`](crate::types::LifecycleConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct LifecycleConfigurationBuilder {
    pub(crate) idle_runtime_session_timeout: ::std::option::Option<i32>,
    pub(crate) max_lifetime: ::std::option::Option<i32>,
}
impl LifecycleConfigurationBuilder {
    /// <p>Timeout in seconds for idle runtime sessions. When a session remains idle for this duration, it will be automatically terminated. Default: 900 seconds (15 minutes).</p>
    pub fn idle_runtime_session_timeout(mut self, input: i32) -> Self {
        self.idle_runtime_session_timeout = ::std::option::Option::Some(input);
        self
    }
    /// <p>Timeout in seconds for idle runtime sessions. When a session remains idle for this duration, it will be automatically terminated. Default: 900 seconds (15 minutes).</p>
    pub fn set_idle_runtime_session_timeout(mut self, input: ::std::option::Option<i32>) -> Self {
        self.idle_runtime_session_timeout = input;
        self
    }
    /// <p>Timeout in seconds for idle runtime sessions. When a session remains idle for this duration, it will be automatically terminated. Default: 900 seconds (15 minutes).</p>
    pub fn get_idle_runtime_session_timeout(&self) -> &::std::option::Option<i32> {
        &self.idle_runtime_session_timeout
    }
    /// <p>Maximum lifetime for the instance in seconds. Once reached, instances will be automatically terminated and replaced. Default: 28800 seconds (8 hours).</p>
    pub fn max_lifetime(mut self, input: i32) -> Self {
        self.max_lifetime = ::std::option::Option::Some(input);
        self
    }
    /// <p>Maximum lifetime for the instance in seconds. Once reached, instances will be automatically terminated and replaced. Default: 28800 seconds (8 hours).</p>
    pub fn set_max_lifetime(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_lifetime = input;
        self
    }
    /// <p>Maximum lifetime for the instance in seconds. Once reached, instances will be automatically terminated and replaced. Default: 28800 seconds (8 hours).</p>
    pub fn get_max_lifetime(&self) -> &::std::option::Option<i32> {
        &self.max_lifetime
    }
    /// Consumes the builder and constructs a [`LifecycleConfiguration`](crate::types::LifecycleConfiguration).
    pub fn build(self) -> crate::types::LifecycleConfiguration {
        crate::types::LifecycleConfiguration {
            idle_runtime_session_timeout: self.idle_runtime_session_timeout,
            max_lifetime: self.max_lifetime,
        }
    }
}
