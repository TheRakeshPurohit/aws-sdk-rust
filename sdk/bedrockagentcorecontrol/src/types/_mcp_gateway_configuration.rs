// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration for a Model Context Protocol (MCP) gateway. This structure defines how the gateway implements the MCP protocol.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct McpGatewayConfiguration {
    /// <p>The supported versions of the Model Context Protocol. This field specifies which versions of the protocol the gateway can use.</p>
    pub supported_versions: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The instructions for using the Model Context Protocol gateway. These instructions provide guidance on how to interact with the gateway.</p>
    pub instructions: ::std::option::Option<::std::string::String>,
    /// <p>The search type for the Model Context Protocol gateway. This field specifies how the gateway handles search operations.</p>
    pub search_type: ::std::option::Option<crate::types::SearchType>,
}
impl McpGatewayConfiguration {
    /// <p>The supported versions of the Model Context Protocol. This field specifies which versions of the protocol the gateway can use.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.supported_versions.is_none()`.
    pub fn supported_versions(&self) -> &[::std::string::String] {
        self.supported_versions.as_deref().unwrap_or_default()
    }
    /// <p>The instructions for using the Model Context Protocol gateway. These instructions provide guidance on how to interact with the gateway.</p>
    pub fn instructions(&self) -> ::std::option::Option<&str> {
        self.instructions.as_deref()
    }
    /// <p>The search type for the Model Context Protocol gateway. This field specifies how the gateway handles search operations.</p>
    pub fn search_type(&self) -> ::std::option::Option<&crate::types::SearchType> {
        self.search_type.as_ref()
    }
}
impl McpGatewayConfiguration {
    /// Creates a new builder-style object to manufacture [`McpGatewayConfiguration`](crate::types::McpGatewayConfiguration).
    pub fn builder() -> crate::types::builders::McpGatewayConfigurationBuilder {
        crate::types::builders::McpGatewayConfigurationBuilder::default()
    }
}

/// A builder for [`McpGatewayConfiguration`](crate::types::McpGatewayConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct McpGatewayConfigurationBuilder {
    pub(crate) supported_versions: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) instructions: ::std::option::Option<::std::string::String>,
    pub(crate) search_type: ::std::option::Option<crate::types::SearchType>,
}
impl McpGatewayConfigurationBuilder {
    /// Appends an item to `supported_versions`.
    ///
    /// To override the contents of this collection use [`set_supported_versions`](Self::set_supported_versions).
    ///
    /// <p>The supported versions of the Model Context Protocol. This field specifies which versions of the protocol the gateway can use.</p>
    pub fn supported_versions(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.supported_versions.unwrap_or_default();
        v.push(input.into());
        self.supported_versions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The supported versions of the Model Context Protocol. This field specifies which versions of the protocol the gateway can use.</p>
    pub fn set_supported_versions(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.supported_versions = input;
        self
    }
    /// <p>The supported versions of the Model Context Protocol. This field specifies which versions of the protocol the gateway can use.</p>
    pub fn get_supported_versions(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.supported_versions
    }
    /// <p>The instructions for using the Model Context Protocol gateway. These instructions provide guidance on how to interact with the gateway.</p>
    pub fn instructions(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instructions = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The instructions for using the Model Context Protocol gateway. These instructions provide guidance on how to interact with the gateway.</p>
    pub fn set_instructions(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instructions = input;
        self
    }
    /// <p>The instructions for using the Model Context Protocol gateway. These instructions provide guidance on how to interact with the gateway.</p>
    pub fn get_instructions(&self) -> &::std::option::Option<::std::string::String> {
        &self.instructions
    }
    /// <p>The search type for the Model Context Protocol gateway. This field specifies how the gateway handles search operations.</p>
    pub fn search_type(mut self, input: crate::types::SearchType) -> Self {
        self.search_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The search type for the Model Context Protocol gateway. This field specifies how the gateway handles search operations.</p>
    pub fn set_search_type(mut self, input: ::std::option::Option<crate::types::SearchType>) -> Self {
        self.search_type = input;
        self
    }
    /// <p>The search type for the Model Context Protocol gateway. This field specifies how the gateway handles search operations.</p>
    pub fn get_search_type(&self) -> &::std::option::Option<crate::types::SearchType> {
        &self.search_type
    }
    /// Consumes the builder and constructs a [`McpGatewayConfiguration`](crate::types::McpGatewayConfiguration).
    pub fn build(self) -> crate::types::McpGatewayConfiguration {
        crate::types::McpGatewayConfiguration {
            supported_versions: self.supported_versions,
            instructions: self.instructions,
            search_type: self.search_type,
        }
    }
}
