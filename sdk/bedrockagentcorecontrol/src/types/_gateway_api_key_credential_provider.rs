// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An API key credential provider for gateway authentication. This structure contains the configuration for authenticating with the target endpoint using an API key.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GatewayApiKeyCredentialProvider {
    /// <p>The Amazon Resource Name (ARN) of the API key credential provider. This ARN identifies the provider in Amazon Web Services.</p>
    pub provider_arn: ::std::string::String,
    /// <p>The name of the credential parameter for the API key. This parameter name is used when sending the API key to the target endpoint.</p>
    pub credential_parameter_name: ::std::option::Option<::std::string::String>,
    /// <p>The prefix for the API key credential. This prefix is added to the API key when sending it to the target endpoint.</p>
    pub credential_prefix: ::std::option::Option<::std::string::String>,
    /// <p>The location of the API key credential. This field specifies where in the request the API key should be placed.</p>
    pub credential_location: ::std::option::Option<crate::types::ApiKeyCredentialLocation>,
}
impl GatewayApiKeyCredentialProvider {
    /// <p>The Amazon Resource Name (ARN) of the API key credential provider. This ARN identifies the provider in Amazon Web Services.</p>
    pub fn provider_arn(&self) -> &str {
        use std::ops::Deref;
        self.provider_arn.deref()
    }
    /// <p>The name of the credential parameter for the API key. This parameter name is used when sending the API key to the target endpoint.</p>
    pub fn credential_parameter_name(&self) -> ::std::option::Option<&str> {
        self.credential_parameter_name.as_deref()
    }
    /// <p>The prefix for the API key credential. This prefix is added to the API key when sending it to the target endpoint.</p>
    pub fn credential_prefix(&self) -> ::std::option::Option<&str> {
        self.credential_prefix.as_deref()
    }
    /// <p>The location of the API key credential. This field specifies where in the request the API key should be placed.</p>
    pub fn credential_location(&self) -> ::std::option::Option<&crate::types::ApiKeyCredentialLocation> {
        self.credential_location.as_ref()
    }
}
impl GatewayApiKeyCredentialProvider {
    /// Creates a new builder-style object to manufacture [`GatewayApiKeyCredentialProvider`](crate::types::GatewayApiKeyCredentialProvider).
    pub fn builder() -> crate::types::builders::GatewayApiKeyCredentialProviderBuilder {
        crate::types::builders::GatewayApiKeyCredentialProviderBuilder::default()
    }
}

/// A builder for [`GatewayApiKeyCredentialProvider`](crate::types::GatewayApiKeyCredentialProvider).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GatewayApiKeyCredentialProviderBuilder {
    pub(crate) provider_arn: ::std::option::Option<::std::string::String>,
    pub(crate) credential_parameter_name: ::std::option::Option<::std::string::String>,
    pub(crate) credential_prefix: ::std::option::Option<::std::string::String>,
    pub(crate) credential_location: ::std::option::Option<crate::types::ApiKeyCredentialLocation>,
}
impl GatewayApiKeyCredentialProviderBuilder {
    /// <p>The Amazon Resource Name (ARN) of the API key credential provider. This ARN identifies the provider in Amazon Web Services.</p>
    /// This field is required.
    pub fn provider_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.provider_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the API key credential provider. This ARN identifies the provider in Amazon Web Services.</p>
    pub fn set_provider_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.provider_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the API key credential provider. This ARN identifies the provider in Amazon Web Services.</p>
    pub fn get_provider_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.provider_arn
    }
    /// <p>The name of the credential parameter for the API key. This parameter name is used when sending the API key to the target endpoint.</p>
    pub fn credential_parameter_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.credential_parameter_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the credential parameter for the API key. This parameter name is used when sending the API key to the target endpoint.</p>
    pub fn set_credential_parameter_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.credential_parameter_name = input;
        self
    }
    /// <p>The name of the credential parameter for the API key. This parameter name is used when sending the API key to the target endpoint.</p>
    pub fn get_credential_parameter_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.credential_parameter_name
    }
    /// <p>The prefix for the API key credential. This prefix is added to the API key when sending it to the target endpoint.</p>
    pub fn credential_prefix(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.credential_prefix = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The prefix for the API key credential. This prefix is added to the API key when sending it to the target endpoint.</p>
    pub fn set_credential_prefix(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.credential_prefix = input;
        self
    }
    /// <p>The prefix for the API key credential. This prefix is added to the API key when sending it to the target endpoint.</p>
    pub fn get_credential_prefix(&self) -> &::std::option::Option<::std::string::String> {
        &self.credential_prefix
    }
    /// <p>The location of the API key credential. This field specifies where in the request the API key should be placed.</p>
    pub fn credential_location(mut self, input: crate::types::ApiKeyCredentialLocation) -> Self {
        self.credential_location = ::std::option::Option::Some(input);
        self
    }
    /// <p>The location of the API key credential. This field specifies where in the request the API key should be placed.</p>
    pub fn set_credential_location(mut self, input: ::std::option::Option<crate::types::ApiKeyCredentialLocation>) -> Self {
        self.credential_location = input;
        self
    }
    /// <p>The location of the API key credential. This field specifies where in the request the API key should be placed.</p>
    pub fn get_credential_location(&self) -> &::std::option::Option<crate::types::ApiKeyCredentialLocation> {
        &self.credential_location
    }
    /// Consumes the builder and constructs a [`GatewayApiKeyCredentialProvider`](crate::types::GatewayApiKeyCredentialProvider).
    /// This method will fail if any of the following fields are not set:
    /// - [`provider_arn`](crate::types::builders::GatewayApiKeyCredentialProviderBuilder::provider_arn)
    pub fn build(self) -> ::std::result::Result<crate::types::GatewayApiKeyCredentialProvider, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::GatewayApiKeyCredentialProvider {
            provider_arn: self.provider_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "provider_arn",
                    "provider_arn was not specified but it is required when building GatewayApiKeyCredentialProvider",
                )
            })?,
            credential_parameter_name: self.credential_parameter_name,
            credential_prefix: self.credential_prefix,
            credential_location: self.credential_location,
        })
    }
}
