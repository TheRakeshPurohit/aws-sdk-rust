// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration for a gateway target. This structure defines how the gateway connects to and interacts with the target endpoint.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum TargetConfiguration {
    /// <p>The Model Context Protocol (MCP) configuration for the target. This configuration defines how the gateway uses MCP to communicate with the target.</p>
    Mcp(crate::types::McpTargetConfiguration),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl TargetConfiguration {
    #[allow(irrefutable_let_patterns)]
    /// Tries to convert the enum instance into [`Mcp`](crate::types::TargetConfiguration::Mcp), extracting the inner [`McpTargetConfiguration`](crate::types::McpTargetConfiguration).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_mcp(&self) -> ::std::result::Result<&crate::types::McpTargetConfiguration, &Self> {
        if let TargetConfiguration::Mcp(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Mcp`](crate::types::TargetConfiguration::Mcp).
    pub fn is_mcp(&self) -> bool {
        self.as_mcp().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
