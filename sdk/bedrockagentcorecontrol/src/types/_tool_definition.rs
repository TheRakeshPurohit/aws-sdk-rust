// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A tool definition for a gateway target. This structure defines a tool that the target exposes through the Model Context Protocol.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ToolDefinition {
    /// <p>The name of the tool. This name identifies the tool in the Model Context Protocol.</p>
    pub name: ::std::string::String,
    /// <p>The description of the tool. This description provides information about the purpose and usage of the tool.</p>
    pub description: ::std::string::String,
    /// <p>The input schema for the tool. This schema defines the structure of the input that the tool accepts.</p>
    pub input_schema: ::std::option::Option<crate::types::SchemaDefinition>,
    /// <p>The output schema for the tool. This schema defines the structure of the output that the tool produces.</p>
    pub output_schema: ::std::option::Option<crate::types::SchemaDefinition>,
}
impl ToolDefinition {
    /// <p>The name of the tool. This name identifies the tool in the Model Context Protocol.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The description of the tool. This description provides information about the purpose and usage of the tool.</p>
    pub fn description(&self) -> &str {
        use std::ops::Deref;
        self.description.deref()
    }
    /// <p>The input schema for the tool. This schema defines the structure of the input that the tool accepts.</p>
    pub fn input_schema(&self) -> ::std::option::Option<&crate::types::SchemaDefinition> {
        self.input_schema.as_ref()
    }
    /// <p>The output schema for the tool. This schema defines the structure of the output that the tool produces.</p>
    pub fn output_schema(&self) -> ::std::option::Option<&crate::types::SchemaDefinition> {
        self.output_schema.as_ref()
    }
}
impl ToolDefinition {
    /// Creates a new builder-style object to manufacture [`ToolDefinition`](crate::types::ToolDefinition).
    pub fn builder() -> crate::types::builders::ToolDefinitionBuilder {
        crate::types::builders::ToolDefinitionBuilder::default()
    }
}

/// A builder for [`ToolDefinition`](crate::types::ToolDefinition).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ToolDefinitionBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) input_schema: ::std::option::Option<crate::types::SchemaDefinition>,
    pub(crate) output_schema: ::std::option::Option<crate::types::SchemaDefinition>,
}
impl ToolDefinitionBuilder {
    /// <p>The name of the tool. This name identifies the tool in the Model Context Protocol.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the tool. This name identifies the tool in the Model Context Protocol.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the tool. This name identifies the tool in the Model Context Protocol.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The description of the tool. This description provides information about the purpose and usage of the tool.</p>
    /// This field is required.
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the tool. This description provides information about the purpose and usage of the tool.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the tool. This description provides information about the purpose and usage of the tool.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The input schema for the tool. This schema defines the structure of the input that the tool accepts.</p>
    /// This field is required.
    pub fn input_schema(mut self, input: crate::types::SchemaDefinition) -> Self {
        self.input_schema = ::std::option::Option::Some(input);
        self
    }
    /// <p>The input schema for the tool. This schema defines the structure of the input that the tool accepts.</p>
    pub fn set_input_schema(mut self, input: ::std::option::Option<crate::types::SchemaDefinition>) -> Self {
        self.input_schema = input;
        self
    }
    /// <p>The input schema for the tool. This schema defines the structure of the input that the tool accepts.</p>
    pub fn get_input_schema(&self) -> &::std::option::Option<crate::types::SchemaDefinition> {
        &self.input_schema
    }
    /// <p>The output schema for the tool. This schema defines the structure of the output that the tool produces.</p>
    pub fn output_schema(mut self, input: crate::types::SchemaDefinition) -> Self {
        self.output_schema = ::std::option::Option::Some(input);
        self
    }
    /// <p>The output schema for the tool. This schema defines the structure of the output that the tool produces.</p>
    pub fn set_output_schema(mut self, input: ::std::option::Option<crate::types::SchemaDefinition>) -> Self {
        self.output_schema = input;
        self
    }
    /// <p>The output schema for the tool. This schema defines the structure of the output that the tool produces.</p>
    pub fn get_output_schema(&self) -> &::std::option::Option<crate::types::SchemaDefinition> {
        &self.output_schema
    }
    /// Consumes the builder and constructs a [`ToolDefinition`](crate::types::ToolDefinition).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::ToolDefinitionBuilder::name)
    /// - [`description`](crate::types::builders::ToolDefinitionBuilder::description)
    pub fn build(self) -> ::std::result::Result<crate::types::ToolDefinition, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ToolDefinition {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building ToolDefinition",
                )
            })?,
            description: self.description.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "description",
                    "description was not specified but it is required when building ToolDefinition",
                )
            })?,
            input_schema: self.input_schema,
            output_schema: self.output_schema,
        })
    }
}
