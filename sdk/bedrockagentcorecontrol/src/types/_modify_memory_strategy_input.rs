// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Input for modifying a memory strategy.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct ModifyMemoryStrategyInput {
    /// <p>The unique identifier of the memory strategy to modify.</p>
    pub memory_strategy_id: ::std::string::String,
    /// <p>The updated description of the memory strategy.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The updated namespaces for the memory strategy.</p>
    pub namespaces: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The updated configuration for the memory strategy.</p>
    pub configuration: ::std::option::Option<crate::types::ModifyStrategyConfiguration>,
}
impl ModifyMemoryStrategyInput {
    /// <p>The unique identifier of the memory strategy to modify.</p>
    pub fn memory_strategy_id(&self) -> &str {
        use std::ops::Deref;
        self.memory_strategy_id.deref()
    }
    /// <p>The updated description of the memory strategy.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The updated namespaces for the memory strategy.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.namespaces.is_none()`.
    pub fn namespaces(&self) -> &[::std::string::String] {
        self.namespaces.as_deref().unwrap_or_default()
    }
    /// <p>The updated configuration for the memory strategy.</p>
    pub fn configuration(&self) -> ::std::option::Option<&crate::types::ModifyStrategyConfiguration> {
        self.configuration.as_ref()
    }
}
impl ::std::fmt::Debug for ModifyMemoryStrategyInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ModifyMemoryStrategyInput");
        formatter.field("memory_strategy_id", &self.memory_strategy_id);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("namespaces", &self.namespaces);
        formatter.field("configuration", &self.configuration);
        formatter.finish()
    }
}
impl ModifyMemoryStrategyInput {
    /// Creates a new builder-style object to manufacture [`ModifyMemoryStrategyInput`](crate::types::ModifyMemoryStrategyInput).
    pub fn builder() -> crate::types::builders::ModifyMemoryStrategyInputBuilder {
        crate::types::builders::ModifyMemoryStrategyInputBuilder::default()
    }
}

/// A builder for [`ModifyMemoryStrategyInput`](crate::types::ModifyMemoryStrategyInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct ModifyMemoryStrategyInputBuilder {
    pub(crate) memory_strategy_id: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) namespaces: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) configuration: ::std::option::Option<crate::types::ModifyStrategyConfiguration>,
}
impl ModifyMemoryStrategyInputBuilder {
    /// <p>The unique identifier of the memory strategy to modify.</p>
    /// This field is required.
    pub fn memory_strategy_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.memory_strategy_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the memory strategy to modify.</p>
    pub fn set_memory_strategy_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.memory_strategy_id = input;
        self
    }
    /// <p>The unique identifier of the memory strategy to modify.</p>
    pub fn get_memory_strategy_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.memory_strategy_id
    }
    /// <p>The updated description of the memory strategy.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The updated description of the memory strategy.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The updated description of the memory strategy.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Appends an item to `namespaces`.
    ///
    /// To override the contents of this collection use [`set_namespaces`](Self::set_namespaces).
    ///
    /// <p>The updated namespaces for the memory strategy.</p>
    pub fn namespaces(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.namespaces.unwrap_or_default();
        v.push(input.into());
        self.namespaces = ::std::option::Option::Some(v);
        self
    }
    /// <p>The updated namespaces for the memory strategy.</p>
    pub fn set_namespaces(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.namespaces = input;
        self
    }
    /// <p>The updated namespaces for the memory strategy.</p>
    pub fn get_namespaces(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.namespaces
    }
    /// <p>The updated configuration for the memory strategy.</p>
    pub fn configuration(mut self, input: crate::types::ModifyStrategyConfiguration) -> Self {
        self.configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The updated configuration for the memory strategy.</p>
    pub fn set_configuration(mut self, input: ::std::option::Option<crate::types::ModifyStrategyConfiguration>) -> Self {
        self.configuration = input;
        self
    }
    /// <p>The updated configuration for the memory strategy.</p>
    pub fn get_configuration(&self) -> &::std::option::Option<crate::types::ModifyStrategyConfiguration> {
        &self.configuration
    }
    /// Consumes the builder and constructs a [`ModifyMemoryStrategyInput`](crate::types::ModifyMemoryStrategyInput).
    /// This method will fail if any of the following fields are not set:
    /// - [`memory_strategy_id`](crate::types::builders::ModifyMemoryStrategyInputBuilder::memory_strategy_id)
    pub fn build(self) -> ::std::result::Result<crate::types::ModifyMemoryStrategyInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ModifyMemoryStrategyInput {
            memory_strategy_id: self.memory_strategy_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "memory_strategy_id",
                    "memory_strategy_id was not specified but it is required when building ModifyMemoryStrategyInput",
                )
            })?,
            description: self.description,
            namespaces: self.namespaces,
            configuration: self.configuration,
        })
    }
}
impl ::std::fmt::Debug for ModifyMemoryStrategyInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ModifyMemoryStrategyInputBuilder");
        formatter.field("memory_strategy_id", &self.memory_strategy_id);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("namespaces", &self.namespaces);
        formatter.field("configuration", &self.configuration);
        formatter.finish()
    }
}
