// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The Amazon S3 configuration for a gateway. This structure defines how the gateway accesses files in Amazon S3.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct S3Configuration {
    /// <p>The URI of the Amazon S3 object. This URI specifies the location of the object in Amazon S3.</p>
    pub uri: ::std::option::Option<::std::string::String>,
    /// <p>The account ID of the Amazon S3 bucket owner. This ID is used for cross-account access to the bucket.</p>
    pub bucket_owner_account_id: ::std::option::Option<::std::string::String>,
}
impl S3Configuration {
    /// <p>The URI of the Amazon S3 object. This URI specifies the location of the object in Amazon S3.</p>
    pub fn uri(&self) -> ::std::option::Option<&str> {
        self.uri.as_deref()
    }
    /// <p>The account ID of the Amazon S3 bucket owner. This ID is used for cross-account access to the bucket.</p>
    pub fn bucket_owner_account_id(&self) -> ::std::option::Option<&str> {
        self.bucket_owner_account_id.as_deref()
    }
}
impl S3Configuration {
    /// Creates a new builder-style object to manufacture [`S3Configuration`](crate::types::S3Configuration).
    pub fn builder() -> crate::types::builders::S3ConfigurationBuilder {
        crate::types::builders::S3ConfigurationBuilder::default()
    }
}

/// A builder for [`S3Configuration`](crate::types::S3Configuration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct S3ConfigurationBuilder {
    pub(crate) uri: ::std::option::Option<::std::string::String>,
    pub(crate) bucket_owner_account_id: ::std::option::Option<::std::string::String>,
}
impl S3ConfigurationBuilder {
    /// <p>The URI of the Amazon S3 object. This URI specifies the location of the object in Amazon S3.</p>
    pub fn uri(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.uri = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The URI of the Amazon S3 object. This URI specifies the location of the object in Amazon S3.</p>
    pub fn set_uri(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.uri = input;
        self
    }
    /// <p>The URI of the Amazon S3 object. This URI specifies the location of the object in Amazon S3.</p>
    pub fn get_uri(&self) -> &::std::option::Option<::std::string::String> {
        &self.uri
    }
    /// <p>The account ID of the Amazon S3 bucket owner. This ID is used for cross-account access to the bucket.</p>
    pub fn bucket_owner_account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bucket_owner_account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The account ID of the Amazon S3 bucket owner. This ID is used for cross-account access to the bucket.</p>
    pub fn set_bucket_owner_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bucket_owner_account_id = input;
        self
    }
    /// <p>The account ID of the Amazon S3 bucket owner. This ID is used for cross-account access to the bucket.</p>
    pub fn get_bucket_owner_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.bucket_owner_account_id
    }
    /// Consumes the builder and constructs a [`S3Configuration`](crate::types::S3Configuration).
    pub fn build(self) -> crate::types::S3Configuration {
        crate::types::S3Configuration {
            uri: self.uri,
            bucket_owner_account_id: self.bucket_owner_account_id,
        }
    }
}
