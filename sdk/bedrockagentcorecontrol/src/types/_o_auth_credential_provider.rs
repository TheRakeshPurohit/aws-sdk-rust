// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An OAuth credential provider for gateway authentication. This structure contains the configuration for authenticating with the target endpoint using OAuth.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct OAuthCredentialProvider {
    /// <p>The Amazon Resource Name (ARN) of the OAuth credential provider. This ARN identifies the provider in Amazon Web Services.</p>
    pub provider_arn: ::std::string::String,
    /// <p>The OAuth scopes for the credential provider. These scopes define the level of access requested from the OAuth provider.</p>
    pub scopes: ::std::vec::Vec<::std::string::String>,
    /// <p>The custom parameters for the OAuth credential provider. These parameters provide additional configuration for the OAuth authentication process.</p>
    pub custom_parameters: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl OAuthCredentialProvider {
    /// <p>The Amazon Resource Name (ARN) of the OAuth credential provider. This ARN identifies the provider in Amazon Web Services.</p>
    pub fn provider_arn(&self) -> &str {
        use std::ops::Deref;
        self.provider_arn.deref()
    }
    /// <p>The OAuth scopes for the credential provider. These scopes define the level of access requested from the OAuth provider.</p>
    pub fn scopes(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.scopes.deref()
    }
    /// <p>The custom parameters for the OAuth credential provider. These parameters provide additional configuration for the OAuth authentication process.</p>
    pub fn custom_parameters(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.custom_parameters.as_ref()
    }
}
impl OAuthCredentialProvider {
    /// Creates a new builder-style object to manufacture [`OAuthCredentialProvider`](crate::types::OAuthCredentialProvider).
    pub fn builder() -> crate::types::builders::OAuthCredentialProviderBuilder {
        crate::types::builders::OAuthCredentialProviderBuilder::default()
    }
}

/// A builder for [`OAuthCredentialProvider`](crate::types::OAuthCredentialProvider).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct OAuthCredentialProviderBuilder {
    pub(crate) provider_arn: ::std::option::Option<::std::string::String>,
    pub(crate) scopes: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) custom_parameters: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl OAuthCredentialProviderBuilder {
    /// <p>The Amazon Resource Name (ARN) of the OAuth credential provider. This ARN identifies the provider in Amazon Web Services.</p>
    /// This field is required.
    pub fn provider_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.provider_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the OAuth credential provider. This ARN identifies the provider in Amazon Web Services.</p>
    pub fn set_provider_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.provider_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the OAuth credential provider. This ARN identifies the provider in Amazon Web Services.</p>
    pub fn get_provider_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.provider_arn
    }
    /// Appends an item to `scopes`.
    ///
    /// To override the contents of this collection use [`set_scopes`](Self::set_scopes).
    ///
    /// <p>The OAuth scopes for the credential provider. These scopes define the level of access requested from the OAuth provider.</p>
    pub fn scopes(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.scopes.unwrap_or_default();
        v.push(input.into());
        self.scopes = ::std::option::Option::Some(v);
        self
    }
    /// <p>The OAuth scopes for the credential provider. These scopes define the level of access requested from the OAuth provider.</p>
    pub fn set_scopes(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.scopes = input;
        self
    }
    /// <p>The OAuth scopes for the credential provider. These scopes define the level of access requested from the OAuth provider.</p>
    pub fn get_scopes(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.scopes
    }
    /// Adds a key-value pair to `custom_parameters`.
    ///
    /// To override the contents of this collection use [`set_custom_parameters`](Self::set_custom_parameters).
    ///
    /// <p>The custom parameters for the OAuth credential provider. These parameters provide additional configuration for the OAuth authentication process.</p>
    pub fn custom_parameters(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.custom_parameters.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.custom_parameters = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The custom parameters for the OAuth credential provider. These parameters provide additional configuration for the OAuth authentication process.</p>
    pub fn set_custom_parameters(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.custom_parameters = input;
        self
    }
    /// <p>The custom parameters for the OAuth credential provider. These parameters provide additional configuration for the OAuth authentication process.</p>
    pub fn get_custom_parameters(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.custom_parameters
    }
    /// Consumes the builder and constructs a [`OAuthCredentialProvider`](crate::types::OAuthCredentialProvider).
    /// This method will fail if any of the following fields are not set:
    /// - [`provider_arn`](crate::types::builders::OAuthCredentialProviderBuilder::provider_arn)
    /// - [`scopes`](crate::types::builders::OAuthCredentialProviderBuilder::scopes)
    pub fn build(self) -> ::std::result::Result<crate::types::OAuthCredentialProvider, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::OAuthCredentialProvider {
            provider_arn: self.provider_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "provider_arn",
                    "provider_arn was not specified but it is required when building OAuthCredentialProvider",
                )
            })?,
            scopes: self.scopes.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "scopes",
                    "scopes was not specified but it is required when building OAuthCredentialProvider",
                )
            })?,
            custom_parameters: self.custom_parameters,
        })
    }
}
