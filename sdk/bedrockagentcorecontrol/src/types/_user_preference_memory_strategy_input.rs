// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Input for creating a user preference memory strategy.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct UserPreferenceMemoryStrategyInput {
    /// <p>The name of the user preference memory strategy.</p>
    pub name: ::std::string::String,
    /// <p>The description of the user preference memory strategy.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The namespaces associated with the user preference memory strategy.</p>
    pub namespaces: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl UserPreferenceMemoryStrategyInput {
    /// <p>The name of the user preference memory strategy.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The description of the user preference memory strategy.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The namespaces associated with the user preference memory strategy.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.namespaces.is_none()`.
    pub fn namespaces(&self) -> &[::std::string::String] {
        self.namespaces.as_deref().unwrap_or_default()
    }
}
impl ::std::fmt::Debug for UserPreferenceMemoryStrategyInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UserPreferenceMemoryStrategyInput");
        formatter.field("name", &self.name);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("namespaces", &self.namespaces);
        formatter.finish()
    }
}
impl UserPreferenceMemoryStrategyInput {
    /// Creates a new builder-style object to manufacture [`UserPreferenceMemoryStrategyInput`](crate::types::UserPreferenceMemoryStrategyInput).
    pub fn builder() -> crate::types::builders::UserPreferenceMemoryStrategyInputBuilder {
        crate::types::builders::UserPreferenceMemoryStrategyInputBuilder::default()
    }
}

/// A builder for [`UserPreferenceMemoryStrategyInput`](crate::types::UserPreferenceMemoryStrategyInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct UserPreferenceMemoryStrategyInputBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) namespaces: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl UserPreferenceMemoryStrategyInputBuilder {
    /// <p>The name of the user preference memory strategy.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the user preference memory strategy.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the user preference memory strategy.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The description of the user preference memory strategy.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the user preference memory strategy.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the user preference memory strategy.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Appends an item to `namespaces`.
    ///
    /// To override the contents of this collection use [`set_namespaces`](Self::set_namespaces).
    ///
    /// <p>The namespaces associated with the user preference memory strategy.</p>
    pub fn namespaces(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.namespaces.unwrap_or_default();
        v.push(input.into());
        self.namespaces = ::std::option::Option::Some(v);
        self
    }
    /// <p>The namespaces associated with the user preference memory strategy.</p>
    pub fn set_namespaces(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.namespaces = input;
        self
    }
    /// <p>The namespaces associated with the user preference memory strategy.</p>
    pub fn get_namespaces(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.namespaces
    }
    /// Consumes the builder and constructs a [`UserPreferenceMemoryStrategyInput`](crate::types::UserPreferenceMemoryStrategyInput).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::UserPreferenceMemoryStrategyInputBuilder::name)
    pub fn build(self) -> ::std::result::Result<crate::types::UserPreferenceMemoryStrategyInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::UserPreferenceMemoryStrategyInput {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building UserPreferenceMemoryStrategyInput",
                )
            })?,
            description: self.description,
            namespaces: self.namespaces,
        })
    }
}
impl ::std::fmt::Debug for UserPreferenceMemoryStrategyInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UserPreferenceMemoryStrategyInputBuilder");
        formatter.field("name", &self.name);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("namespaces", &self.namespaces);
        formatter.finish()
    }
}
