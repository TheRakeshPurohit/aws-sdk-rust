// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A schema definition for a gateway target. This structure defines the structure of the API that the target exposes.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SchemaDefinition {
    /// <p>The type of the schema definition. This field specifies the data type of the schema.</p>
    pub r#type: crate::types::SchemaType,
    /// <p>The properties of the schema definition. These properties define the fields in the schema.</p>
    pub properties: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::SchemaDefinition>>,
    /// <p>The required fields in the schema definition. These fields must be provided when using the schema.</p>
    pub required: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The items in the schema definition. This field is used for array types to define the structure of the array elements.</p>
    pub items: ::std::option::Option<::std::boxed::Box<crate::types::SchemaDefinition>>,
    /// <p>The description of the schema definition. This description provides information about the purpose and usage of the schema.</p>
    pub description: ::std::option::Option<::std::string::String>,
}
impl SchemaDefinition {
    /// <p>The type of the schema definition. This field specifies the data type of the schema.</p>
    pub fn r#type(&self) -> &crate::types::SchemaType {
        &self.r#type
    }
    /// <p>The properties of the schema definition. These properties define the fields in the schema.</p>
    pub fn properties(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, crate::types::SchemaDefinition>> {
        self.properties.as_ref()
    }
    /// <p>The required fields in the schema definition. These fields must be provided when using the schema.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.required.is_none()`.
    pub fn required(&self) -> &[::std::string::String] {
        self.required.as_deref().unwrap_or_default()
    }
    /// <p>The items in the schema definition. This field is used for array types to define the structure of the array elements.</p>
    pub fn items(&self) -> ::std::option::Option<&crate::types::SchemaDefinition> {
        self.items.as_deref()
    }
    /// <p>The description of the schema definition. This description provides information about the purpose and usage of the schema.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
}
impl SchemaDefinition {
    /// Creates a new builder-style object to manufacture [`SchemaDefinition`](crate::types::SchemaDefinition).
    pub fn builder() -> crate::types::builders::SchemaDefinitionBuilder {
        crate::types::builders::SchemaDefinitionBuilder::default()
    }
}

/// A builder for [`SchemaDefinition`](crate::types::SchemaDefinition).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SchemaDefinitionBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::SchemaType>,
    pub(crate) properties: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::SchemaDefinition>>,
    pub(crate) required: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) items: ::std::option::Option<::std::boxed::Box<crate::types::SchemaDefinition>>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
}
impl SchemaDefinitionBuilder {
    /// <p>The type of the schema definition. This field specifies the data type of the schema.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::SchemaType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the schema definition. This field specifies the data type of the schema.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::SchemaType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of the schema definition. This field specifies the data type of the schema.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::SchemaType> {
        &self.r#type
    }
    /// Adds a key-value pair to `properties`.
    ///
    /// To override the contents of this collection use [`set_properties`](Self::set_properties).
    ///
    /// <p>The properties of the schema definition. These properties define the fields in the schema.</p>
    pub fn properties(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::SchemaDefinition) -> Self {
        let mut hash_map = self.properties.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.properties = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The properties of the schema definition. These properties define the fields in the schema.</p>
    pub fn set_properties(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::SchemaDefinition>>,
    ) -> Self {
        self.properties = input;
        self
    }
    /// <p>The properties of the schema definition. These properties define the fields in the schema.</p>
    pub fn get_properties(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::SchemaDefinition>> {
        &self.properties
    }
    /// Appends an item to `required`.
    ///
    /// To override the contents of this collection use [`set_required`](Self::set_required).
    ///
    /// <p>The required fields in the schema definition. These fields must be provided when using the schema.</p>
    pub fn required(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.required.unwrap_or_default();
        v.push(input.into());
        self.required = ::std::option::Option::Some(v);
        self
    }
    /// <p>The required fields in the schema definition. These fields must be provided when using the schema.</p>
    pub fn set_required(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.required = input;
        self
    }
    /// <p>The required fields in the schema definition. These fields must be provided when using the schema.</p>
    pub fn get_required(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.required
    }
    /// <p>The items in the schema definition. This field is used for array types to define the structure of the array elements.</p>
    pub fn items(mut self, input: impl ::std::convert::Into<::std::boxed::Box<crate::types::SchemaDefinition>>) -> Self {
        self.items = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The items in the schema definition. This field is used for array types to define the structure of the array elements.</p>
    pub fn set_items(mut self, input: ::std::option::Option<::std::boxed::Box<crate::types::SchemaDefinition>>) -> Self {
        self.items = input;
        self
    }
    /// <p>The items in the schema definition. This field is used for array types to define the structure of the array elements.</p>
    pub fn get_items(&self) -> &::std::option::Option<::std::boxed::Box<crate::types::SchemaDefinition>> {
        &self.items
    }
    /// <p>The description of the schema definition. This description provides information about the purpose and usage of the schema.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the schema definition. This description provides information about the purpose and usage of the schema.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the schema definition. This description provides information about the purpose and usage of the schema.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Consumes the builder and constructs a [`SchemaDefinition`](crate::types::SchemaDefinition).
    /// This method will fail if any of the following fields are not set:
    /// - [`r#type`](crate::types::builders::SchemaDefinitionBuilder::type)
    pub fn build(self) -> ::std::result::Result<crate::types::SchemaDefinition, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SchemaDefinition {
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building SchemaDefinition",
                )
            })?,
            properties: self.properties,
            required: self.required,
            items: self.items,
            description: self.description,
        })
    }
}
