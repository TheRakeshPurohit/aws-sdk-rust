// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about a memory strategy.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct MemoryStrategy {
    /// <p>The unique identifier of the memory strategy.</p>
    pub strategy_id: ::std::string::String,
    /// <p>The name of the memory strategy.</p>
    pub name: ::std::string::String,
    /// <p>The description of the memory strategy.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The configuration of the memory strategy.</p>
    pub configuration: ::std::option::Option<crate::types::StrategyConfiguration>,
    /// <p>The type of the memory strategy.</p>
    pub r#type: crate::types::MemoryStrategyType,
    /// <p>The namespaces associated with the memory strategy.</p>
    pub namespaces: ::std::vec::Vec<::std::string::String>,
    /// <p>The timestamp when the memory strategy was created.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The timestamp when the memory strategy was last updated.</p>
    pub updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The current status of the memory strategy.</p>
    pub status: ::std::option::Option<crate::types::MemoryStrategyStatus>,
}
impl MemoryStrategy {
    /// <p>The unique identifier of the memory strategy.</p>
    pub fn strategy_id(&self) -> &str {
        use std::ops::Deref;
        self.strategy_id.deref()
    }
    /// <p>The name of the memory strategy.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The description of the memory strategy.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The configuration of the memory strategy.</p>
    pub fn configuration(&self) -> ::std::option::Option<&crate::types::StrategyConfiguration> {
        self.configuration.as_ref()
    }
    /// <p>The type of the memory strategy.</p>
    pub fn r#type(&self) -> &crate::types::MemoryStrategyType {
        &self.r#type
    }
    /// <p>The namespaces associated with the memory strategy.</p>
    pub fn namespaces(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.namespaces.deref()
    }
    /// <p>The timestamp when the memory strategy was created.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The timestamp when the memory strategy was last updated.</p>
    pub fn updated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
    /// <p>The current status of the memory strategy.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::MemoryStrategyStatus> {
        self.status.as_ref()
    }
}
impl ::std::fmt::Debug for MemoryStrategy {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("MemoryStrategy");
        formatter.field("strategy_id", &self.strategy_id);
        formatter.field("name", &self.name);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("configuration", &self.configuration);
        formatter.field("r#type", &self.r#type);
        formatter.field("namespaces", &self.namespaces);
        formatter.field("created_at", &self.created_at);
        formatter.field("updated_at", &self.updated_at);
        formatter.field("status", &self.status);
        formatter.finish()
    }
}
impl MemoryStrategy {
    /// Creates a new builder-style object to manufacture [`MemoryStrategy`](crate::types::MemoryStrategy).
    pub fn builder() -> crate::types::builders::MemoryStrategyBuilder {
        crate::types::builders::MemoryStrategyBuilder::default()
    }
}

/// A builder for [`MemoryStrategy`](crate::types::MemoryStrategy).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct MemoryStrategyBuilder {
    pub(crate) strategy_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) configuration: ::std::option::Option<crate::types::StrategyConfiguration>,
    pub(crate) r#type: ::std::option::Option<crate::types::MemoryStrategyType>,
    pub(crate) namespaces: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) status: ::std::option::Option<crate::types::MemoryStrategyStatus>,
}
impl MemoryStrategyBuilder {
    /// <p>The unique identifier of the memory strategy.</p>
    /// This field is required.
    pub fn strategy_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.strategy_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the memory strategy.</p>
    pub fn set_strategy_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.strategy_id = input;
        self
    }
    /// <p>The unique identifier of the memory strategy.</p>
    pub fn get_strategy_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.strategy_id
    }
    /// <p>The name of the memory strategy.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the memory strategy.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the memory strategy.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The description of the memory strategy.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the memory strategy.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the memory strategy.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The configuration of the memory strategy.</p>
    pub fn configuration(mut self, input: crate::types::StrategyConfiguration) -> Self {
        self.configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration of the memory strategy.</p>
    pub fn set_configuration(mut self, input: ::std::option::Option<crate::types::StrategyConfiguration>) -> Self {
        self.configuration = input;
        self
    }
    /// <p>The configuration of the memory strategy.</p>
    pub fn get_configuration(&self) -> &::std::option::Option<crate::types::StrategyConfiguration> {
        &self.configuration
    }
    /// <p>The type of the memory strategy.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::MemoryStrategyType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the memory strategy.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::MemoryStrategyType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of the memory strategy.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::MemoryStrategyType> {
        &self.r#type
    }
    /// Appends an item to `namespaces`.
    ///
    /// To override the contents of this collection use [`set_namespaces`](Self::set_namespaces).
    ///
    /// <p>The namespaces associated with the memory strategy.</p>
    pub fn namespaces(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.namespaces.unwrap_or_default();
        v.push(input.into());
        self.namespaces = ::std::option::Option::Some(v);
        self
    }
    /// <p>The namespaces associated with the memory strategy.</p>
    pub fn set_namespaces(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.namespaces = input;
        self
    }
    /// <p>The namespaces associated with the memory strategy.</p>
    pub fn get_namespaces(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.namespaces
    }
    /// <p>The timestamp when the memory strategy was created.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the memory strategy was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The timestamp when the memory strategy was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The timestamp when the memory strategy was last updated.</p>
    pub fn updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the memory strategy was last updated.</p>
    pub fn set_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>The timestamp when the memory strategy was last updated.</p>
    pub fn get_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_at
    }
    /// <p>The current status of the memory strategy.</p>
    pub fn status(mut self, input: crate::types::MemoryStrategyStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the memory strategy.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::MemoryStrategyStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status of the memory strategy.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::MemoryStrategyStatus> {
        &self.status
    }
    /// Consumes the builder and constructs a [`MemoryStrategy`](crate::types::MemoryStrategy).
    /// This method will fail if any of the following fields are not set:
    /// - [`strategy_id`](crate::types::builders::MemoryStrategyBuilder::strategy_id)
    /// - [`name`](crate::types::builders::MemoryStrategyBuilder::name)
    /// - [`r#type`](crate::types::builders::MemoryStrategyBuilder::type)
    /// - [`namespaces`](crate::types::builders::MemoryStrategyBuilder::namespaces)
    pub fn build(self) -> ::std::result::Result<crate::types::MemoryStrategy, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::MemoryStrategy {
            strategy_id: self.strategy_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "strategy_id",
                    "strategy_id was not specified but it is required when building MemoryStrategy",
                )
            })?,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building MemoryStrategy",
                )
            })?,
            description: self.description,
            configuration: self.configuration,
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building MemoryStrategy",
                )
            })?,
            namespaces: self.namespaces.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "namespaces",
                    "namespaces was not specified but it is required when building MemoryStrategy",
                )
            })?,
            created_at: self.created_at,
            updated_at: self.updated_at,
            status: self.status,
        })
    }
}
impl ::std::fmt::Debug for MemoryStrategyBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("MemoryStrategyBuilder");
        formatter.field("strategy_id", &self.strategy_id);
        formatter.field("name", &self.name);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("configuration", &self.configuration);
        formatter.field("r#type", &self.r#type);
        formatter.field("namespaces", &self.namespaces);
        formatter.field("created_at", &self.created_at);
        formatter.field("updated_at", &self.updated_at);
        formatter.field("status", &self.status);
        formatter.finish()
    }
}
