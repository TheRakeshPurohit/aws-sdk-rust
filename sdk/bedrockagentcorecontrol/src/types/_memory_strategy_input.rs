// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains input information for creating a memory strategy.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum MemoryStrategyInput {
    /// <p>Input for creating a custom memory strategy.</p>
    CustomMemoryStrategy(crate::types::CustomMemoryStrategyInput),
    /// <p>Input for creating a semantic memory strategy.</p>
    SemanticMemoryStrategy(crate::types::SemanticMemoryStrategyInput),
    /// <p>Input for creating a summary memory strategy.</p>
    SummaryMemoryStrategy(crate::types::SummaryMemoryStrategyInput),
    /// <p>Input for creating a user preference memory strategy.</p>
    UserPreferenceMemoryStrategy(crate::types::UserPreferenceMemoryStrategyInput),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl MemoryStrategyInput {
    /// Tries to convert the enum instance into [`CustomMemoryStrategy`](crate::types::MemoryStrategyInput::CustomMemoryStrategy), extracting the inner [`CustomMemoryStrategyInput`](crate::types::CustomMemoryStrategyInput).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_custom_memory_strategy(&self) -> ::std::result::Result<&crate::types::CustomMemoryStrategyInput, &Self> {
        if let MemoryStrategyInput::CustomMemoryStrategy(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`CustomMemoryStrategy`](crate::types::MemoryStrategyInput::CustomMemoryStrategy).
    pub fn is_custom_memory_strategy(&self) -> bool {
        self.as_custom_memory_strategy().is_ok()
    }
    /// Tries to convert the enum instance into [`SemanticMemoryStrategy`](crate::types::MemoryStrategyInput::SemanticMemoryStrategy), extracting the inner [`SemanticMemoryStrategyInput`](crate::types::SemanticMemoryStrategyInput).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_semantic_memory_strategy(&self) -> ::std::result::Result<&crate::types::SemanticMemoryStrategyInput, &Self> {
        if let MemoryStrategyInput::SemanticMemoryStrategy(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`SemanticMemoryStrategy`](crate::types::MemoryStrategyInput::SemanticMemoryStrategy).
    pub fn is_semantic_memory_strategy(&self) -> bool {
        self.as_semantic_memory_strategy().is_ok()
    }
    /// Tries to convert the enum instance into [`SummaryMemoryStrategy`](crate::types::MemoryStrategyInput::SummaryMemoryStrategy), extracting the inner [`SummaryMemoryStrategyInput`](crate::types::SummaryMemoryStrategyInput).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_summary_memory_strategy(&self) -> ::std::result::Result<&crate::types::SummaryMemoryStrategyInput, &Self> {
        if let MemoryStrategyInput::SummaryMemoryStrategy(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`SummaryMemoryStrategy`](crate::types::MemoryStrategyInput::SummaryMemoryStrategy).
    pub fn is_summary_memory_strategy(&self) -> bool {
        self.as_summary_memory_strategy().is_ok()
    }
    /// Tries to convert the enum instance into [`UserPreferenceMemoryStrategy`](crate::types::MemoryStrategyInput::UserPreferenceMemoryStrategy), extracting the inner [`UserPreferenceMemoryStrategyInput`](crate::types::UserPreferenceMemoryStrategyInput).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_user_preference_memory_strategy(&self) -> ::std::result::Result<&crate::types::UserPreferenceMemoryStrategyInput, &Self> {
        if let MemoryStrategyInput::UserPreferenceMemoryStrategy(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`UserPreferenceMemoryStrategy`](crate::types::MemoryStrategyInput::UserPreferenceMemoryStrategy).
    pub fn is_user_preference_memory_strategy(&self) -> bool {
        self.as_user_preference_memory_strategy().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
