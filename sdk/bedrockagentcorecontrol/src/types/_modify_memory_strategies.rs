// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information for modifying memory strategies.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ModifyMemoryStrategies {
    /// <p>The list of memory strategies to add.</p>
    pub add_memory_strategies: ::std::option::Option<::std::vec::Vec<crate::types::MemoryStrategyInput>>,
    /// <p>The list of memory strategies to modify.</p>
    pub modify_memory_strategies: ::std::option::Option<::std::vec::Vec<crate::types::ModifyMemoryStrategyInput>>,
    /// <p>The list of memory strategies to delete.</p>
    pub delete_memory_strategies: ::std::option::Option<::std::vec::Vec<crate::types::DeleteMemoryStrategyInput>>,
}
impl ModifyMemoryStrategies {
    /// <p>The list of memory strategies to add.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.add_memory_strategies.is_none()`.
    pub fn add_memory_strategies(&self) -> &[crate::types::MemoryStrategyInput] {
        self.add_memory_strategies.as_deref().unwrap_or_default()
    }
    /// <p>The list of memory strategies to modify.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.modify_memory_strategies.is_none()`.
    pub fn modify_memory_strategies(&self) -> &[crate::types::ModifyMemoryStrategyInput] {
        self.modify_memory_strategies.as_deref().unwrap_or_default()
    }
    /// <p>The list of memory strategies to delete.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.delete_memory_strategies.is_none()`.
    pub fn delete_memory_strategies(&self) -> &[crate::types::DeleteMemoryStrategyInput] {
        self.delete_memory_strategies.as_deref().unwrap_or_default()
    }
}
impl ModifyMemoryStrategies {
    /// Creates a new builder-style object to manufacture [`ModifyMemoryStrategies`](crate::types::ModifyMemoryStrategies).
    pub fn builder() -> crate::types::builders::ModifyMemoryStrategiesBuilder {
        crate::types::builders::ModifyMemoryStrategiesBuilder::default()
    }
}

/// A builder for [`ModifyMemoryStrategies`](crate::types::ModifyMemoryStrategies).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ModifyMemoryStrategiesBuilder {
    pub(crate) add_memory_strategies: ::std::option::Option<::std::vec::Vec<crate::types::MemoryStrategyInput>>,
    pub(crate) modify_memory_strategies: ::std::option::Option<::std::vec::Vec<crate::types::ModifyMemoryStrategyInput>>,
    pub(crate) delete_memory_strategies: ::std::option::Option<::std::vec::Vec<crate::types::DeleteMemoryStrategyInput>>,
}
impl ModifyMemoryStrategiesBuilder {
    /// Appends an item to `add_memory_strategies`.
    ///
    /// To override the contents of this collection use [`set_add_memory_strategies`](Self::set_add_memory_strategies).
    ///
    /// <p>The list of memory strategies to add.</p>
    pub fn add_memory_strategies(mut self, input: crate::types::MemoryStrategyInput) -> Self {
        let mut v = self.add_memory_strategies.unwrap_or_default();
        v.push(input);
        self.add_memory_strategies = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of memory strategies to add.</p>
    pub fn set_add_memory_strategies(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::MemoryStrategyInput>>) -> Self {
        self.add_memory_strategies = input;
        self
    }
    /// <p>The list of memory strategies to add.</p>
    pub fn get_add_memory_strategies(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MemoryStrategyInput>> {
        &self.add_memory_strategies
    }
    /// Appends an item to `modify_memory_strategies`.
    ///
    /// To override the contents of this collection use [`set_modify_memory_strategies`](Self::set_modify_memory_strategies).
    ///
    /// <p>The list of memory strategies to modify.</p>
    pub fn modify_memory_strategies(mut self, input: crate::types::ModifyMemoryStrategyInput) -> Self {
        let mut v = self.modify_memory_strategies.unwrap_or_default();
        v.push(input);
        self.modify_memory_strategies = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of memory strategies to modify.</p>
    pub fn set_modify_memory_strategies(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ModifyMemoryStrategyInput>>) -> Self {
        self.modify_memory_strategies = input;
        self
    }
    /// <p>The list of memory strategies to modify.</p>
    pub fn get_modify_memory_strategies(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ModifyMemoryStrategyInput>> {
        &self.modify_memory_strategies
    }
    /// Appends an item to `delete_memory_strategies`.
    ///
    /// To override the contents of this collection use [`set_delete_memory_strategies`](Self::set_delete_memory_strategies).
    ///
    /// <p>The list of memory strategies to delete.</p>
    pub fn delete_memory_strategies(mut self, input: crate::types::DeleteMemoryStrategyInput) -> Self {
        let mut v = self.delete_memory_strategies.unwrap_or_default();
        v.push(input);
        self.delete_memory_strategies = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of memory strategies to delete.</p>
    pub fn set_delete_memory_strategies(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DeleteMemoryStrategyInput>>) -> Self {
        self.delete_memory_strategies = input;
        self
    }
    /// <p>The list of memory strategies to delete.</p>
    pub fn get_delete_memory_strategies(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DeleteMemoryStrategyInput>> {
        &self.delete_memory_strategies
    }
    /// Consumes the builder and constructs a [`ModifyMemoryStrategies`](crate::types::ModifyMemoryStrategies).
    pub fn build(self) -> crate::types::ModifyMemoryStrategies {
        crate::types::ModifyMemoryStrategies {
            add_memory_strategies: self.add_memory_strategies,
            modify_memory_strategies: self.modify_memory_strategies,
            delete_memory_strategies: self.delete_memory_strategies,
        }
    }
}
