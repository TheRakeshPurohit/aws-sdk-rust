// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration for API schema.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub enum ApiSchemaConfiguration {
    /// <p>The inline payload containing the API schema definition.</p>
    InlinePayload(::std::string::String),
    /// <p>The Amazon S3 configuration for a gateway. This structure defines how the gateway accesses files in Amazon S3.</p>
    S3(crate::types::S3Configuration),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl ApiSchemaConfiguration {
    /// Tries to convert the enum instance into [`InlinePayload`](crate::types::ApiSchemaConfiguration::InlinePayload), extracting the inner [`String`](::std::string::String).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_inline_payload(&self) -> ::std::result::Result<&::std::string::String, &Self> {
        if let ApiSchemaConfiguration::InlinePayload(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`InlinePayload`](crate::types::ApiSchemaConfiguration::InlinePayload).
    pub fn is_inline_payload(&self) -> bool {
        self.as_inline_payload().is_ok()
    }
    /// Tries to convert the enum instance into [`S3`](crate::types::ApiSchemaConfiguration::S3), extracting the inner [`S3Configuration`](crate::types::S3Configuration).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_s3(&self) -> ::std::result::Result<&crate::types::S3Configuration, &Self> {
        if let ApiSchemaConfiguration::S3(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`S3`](crate::types::ApiSchemaConfiguration::S3).
    pub fn is_s3(&self) -> bool {
        self.as_s3().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
impl ::std::fmt::Debug for ApiSchemaConfiguration {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        match self {
            ApiSchemaConfiguration::InlinePayload(_) => f.debug_tuple("*** Sensitive Data Redacted ***").finish(),
            ApiSchemaConfiguration::S3(val) => f.debug_tuple("S3").field(&val).finish(),
            ApiSchemaConfiguration::Unknown => f.debug_tuple("Unknown").finish(),
        }
    }
}
