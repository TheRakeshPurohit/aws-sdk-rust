// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration for inbound JWT-based authorization, specifying how incoming requests should be authenticated.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CustomJwtAuthorizerConfiguration {
    /// <p>This URL is used to fetch OpenID Connect configuration or authorization server metadata for validating incoming tokens.</p>
    pub discovery_url: ::std::string::String,
    /// <p>Represents individual audience values that are validated in the incoming JWT token validation process.</p>
    pub allowed_audience: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Represents individual client IDs that are validated in the incoming JWT token validation process.</p>
    pub allowed_clients: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl CustomJwtAuthorizerConfiguration {
    /// <p>This URL is used to fetch OpenID Connect configuration or authorization server metadata for validating incoming tokens.</p>
    pub fn discovery_url(&self) -> &str {
        use std::ops::Deref;
        self.discovery_url.deref()
    }
    /// <p>Represents individual audience values that are validated in the incoming JWT token validation process.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.allowed_audience.is_none()`.
    pub fn allowed_audience(&self) -> &[::std::string::String] {
        self.allowed_audience.as_deref().unwrap_or_default()
    }
    /// <p>Represents individual client IDs that are validated in the incoming JWT token validation process.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.allowed_clients.is_none()`.
    pub fn allowed_clients(&self) -> &[::std::string::String] {
        self.allowed_clients.as_deref().unwrap_or_default()
    }
}
impl CustomJwtAuthorizerConfiguration {
    /// Creates a new builder-style object to manufacture [`CustomJwtAuthorizerConfiguration`](crate::types::CustomJwtAuthorizerConfiguration).
    pub fn builder() -> crate::types::builders::CustomJwtAuthorizerConfigurationBuilder {
        crate::types::builders::CustomJwtAuthorizerConfigurationBuilder::default()
    }
}

/// A builder for [`CustomJwtAuthorizerConfiguration`](crate::types::CustomJwtAuthorizerConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CustomJwtAuthorizerConfigurationBuilder {
    pub(crate) discovery_url: ::std::option::Option<::std::string::String>,
    pub(crate) allowed_audience: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) allowed_clients: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl CustomJwtAuthorizerConfigurationBuilder {
    /// <p>This URL is used to fetch OpenID Connect configuration or authorization server metadata for validating incoming tokens.</p>
    /// This field is required.
    pub fn discovery_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.discovery_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>This URL is used to fetch OpenID Connect configuration or authorization server metadata for validating incoming tokens.</p>
    pub fn set_discovery_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.discovery_url = input;
        self
    }
    /// <p>This URL is used to fetch OpenID Connect configuration or authorization server metadata for validating incoming tokens.</p>
    pub fn get_discovery_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.discovery_url
    }
    /// Appends an item to `allowed_audience`.
    ///
    /// To override the contents of this collection use [`set_allowed_audience`](Self::set_allowed_audience).
    ///
    /// <p>Represents individual audience values that are validated in the incoming JWT token validation process.</p>
    pub fn allowed_audience(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.allowed_audience.unwrap_or_default();
        v.push(input.into());
        self.allowed_audience = ::std::option::Option::Some(v);
        self
    }
    /// <p>Represents individual audience values that are validated in the incoming JWT token validation process.</p>
    pub fn set_allowed_audience(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.allowed_audience = input;
        self
    }
    /// <p>Represents individual audience values that are validated in the incoming JWT token validation process.</p>
    pub fn get_allowed_audience(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.allowed_audience
    }
    /// Appends an item to `allowed_clients`.
    ///
    /// To override the contents of this collection use [`set_allowed_clients`](Self::set_allowed_clients).
    ///
    /// <p>Represents individual client IDs that are validated in the incoming JWT token validation process.</p>
    pub fn allowed_clients(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.allowed_clients.unwrap_or_default();
        v.push(input.into());
        self.allowed_clients = ::std::option::Option::Some(v);
        self
    }
    /// <p>Represents individual client IDs that are validated in the incoming JWT token validation process.</p>
    pub fn set_allowed_clients(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.allowed_clients = input;
        self
    }
    /// <p>Represents individual client IDs that are validated in the incoming JWT token validation process.</p>
    pub fn get_allowed_clients(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.allowed_clients
    }
    /// Consumes the builder and constructs a [`CustomJwtAuthorizerConfiguration`](crate::types::CustomJwtAuthorizerConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`discovery_url`](crate::types::builders::CustomJwtAuthorizerConfigurationBuilder::discovery_url)
    pub fn build(self) -> ::std::result::Result<crate::types::CustomJwtAuthorizerConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CustomJwtAuthorizerConfiguration {
            discovery_url: self.discovery_url.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "discovery_url",
                    "discovery_url was not specified but it is required when building CustomJwtAuthorizerConfiguration",
                )
            })?,
            allowed_audience: self.allowed_audience,
            allowed_clients: self.allowed_clients,
        })
    }
}
