// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The recording configuration for a browser. This structure defines how browser sessions are recorded.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RecordingConfig {
    /// <p>Indicates whether recording is enabled for the browser. When set to true, browser sessions are recorded.</p>
    pub enabled: bool,
    /// <p>The Amazon S3 location where browser recordings are stored. This location contains the recorded browser sessions.</p>
    pub s3_location: ::std::option::Option<crate::types::S3Location>,
}
impl RecordingConfig {
    /// <p>Indicates whether recording is enabled for the browser. When set to true, browser sessions are recorded.</p>
    pub fn enabled(&self) -> bool {
        self.enabled
    }
    /// <p>The Amazon S3 location where browser recordings are stored. This location contains the recorded browser sessions.</p>
    pub fn s3_location(&self) -> ::std::option::Option<&crate::types::S3Location> {
        self.s3_location.as_ref()
    }
}
impl RecordingConfig {
    /// Creates a new builder-style object to manufacture [`RecordingConfig`](crate::types::RecordingConfig).
    pub fn builder() -> crate::types::builders::RecordingConfigBuilder {
        crate::types::builders::RecordingConfigBuilder::default()
    }
}

/// A builder for [`RecordingConfig`](crate::types::RecordingConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RecordingConfigBuilder {
    pub(crate) enabled: ::std::option::Option<bool>,
    pub(crate) s3_location: ::std::option::Option<crate::types::S3Location>,
}
impl RecordingConfigBuilder {
    /// <p>Indicates whether recording is enabled for the browser. When set to true, browser sessions are recorded.</p>
    pub fn enabled(mut self, input: bool) -> Self {
        self.enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether recording is enabled for the browser. When set to true, browser sessions are recorded.</p>
    pub fn set_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enabled = input;
        self
    }
    /// <p>Indicates whether recording is enabled for the browser. When set to true, browser sessions are recorded.</p>
    pub fn get_enabled(&self) -> &::std::option::Option<bool> {
        &self.enabled
    }
    /// <p>The Amazon S3 location where browser recordings are stored. This location contains the recorded browser sessions.</p>
    pub fn s3_location(mut self, input: crate::types::S3Location) -> Self {
        self.s3_location = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Amazon S3 location where browser recordings are stored. This location contains the recorded browser sessions.</p>
    pub fn set_s3_location(mut self, input: ::std::option::Option<crate::types::S3Location>) -> Self {
        self.s3_location = input;
        self
    }
    /// <p>The Amazon S3 location where browser recordings are stored. This location contains the recorded browser sessions.</p>
    pub fn get_s3_location(&self) -> &::std::option::Option<crate::types::S3Location> {
        &self.s3_location
    }
    /// Consumes the builder and constructs a [`RecordingConfig`](crate::types::RecordingConfig).
    pub fn build(self) -> crate::types::RecordingConfig {
        crate::types::RecordingConfig {
            enabled: self.enabled.unwrap_or_default(),
            s3_location: self.s3_location,
        }
    }
}
