// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_list_agent_runtime_endpoints_output_output_next_token(
    input: &crate::operation::list_agent_runtime_endpoints::ListAgentRuntimeEndpointsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_agent_runtime_versions_output_output_next_token(
    input: &crate::operation::list_agent_runtime_versions::ListAgentRuntimeVersionsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_agent_runtimes_output_output_next_token(
    input: &crate::operation::list_agent_runtimes::ListAgentRuntimesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_api_key_credential_providers_output_output_next_token(
    input: &crate::operation::list_api_key_credential_providers::ListApiKeyCredentialProvidersOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_browsers_output_output_next_token(
    input: &crate::operation::list_browsers::ListBrowsersOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_code_interpreters_output_output_next_token(
    input: &crate::operation::list_code_interpreters::ListCodeInterpretersOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_gateway_targets_output_output_next_token(
    input: &crate::operation::list_gateway_targets::ListGatewayTargetsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_gateways_output_output_next_token(
    input: &crate::operation::list_gateways::ListGatewaysOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_memories_output_output_next_token(
    input: &crate::operation::list_memories::ListMemoriesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_oauth2_credential_providers_output_output_next_token(
    input: &crate::operation::list_oauth2_credential_providers::ListOauth2CredentialProvidersOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_workload_identities_output_output_next_token(
    input: &crate::operation::list_workload_identities::ListWorkloadIdentitiesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_agent_runtime_endpoints_output_output_runtime_endpoints(
    input: crate::operation::list_agent_runtime_endpoints::ListAgentRuntimeEndpointsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::AgentEndpoint>> {
    let input = input.runtime_endpoints;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_agent_runtime_versions_output_output_agent_runtimes(
    input: crate::operation::list_agent_runtime_versions::ListAgentRuntimeVersionsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Agent>> {
    let input = input.agent_runtimes;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_agent_runtimes_output_output_agent_runtimes(
    input: crate::operation::list_agent_runtimes::ListAgentRuntimesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Agent>> {
    let input = input.agent_runtimes;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_api_key_credential_providers_output_output_credential_providers(
    input: crate::operation::list_api_key_credential_providers::ListApiKeyCredentialProvidersOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ApiKeyCredentialProviderItem>> {
    let input = input.credential_providers;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_browsers_output_output_browser_summaries(
    input: crate::operation::list_browsers::ListBrowsersOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::BrowserSummary>> {
    let input = input.browser_summaries;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_code_interpreters_output_output_code_interpreter_summaries(
    input: crate::operation::list_code_interpreters::ListCodeInterpretersOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::CodeInterpreterSummary>> {
    let input = input.code_interpreter_summaries;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_gateway_targets_output_output_items(
    input: crate::operation::list_gateway_targets::ListGatewayTargetsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::TargetSummary>> {
    let input = input.items;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_gateways_output_output_items(
    input: crate::operation::list_gateways::ListGatewaysOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::GatewaySummary>> {
    let input = input.items;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_memories_output_output_memories(
    input: crate::operation::list_memories::ListMemoriesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::MemorySummary>> {
    let input = input.memories;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_oauth2_credential_providers_output_output_credential_providers(
    input: crate::operation::list_oauth2_credential_providers::ListOauth2CredentialProvidersOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Oauth2CredentialProviderItem>> {
    let input = input.credential_providers;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_workload_identities_output_output_workload_identities(
    input: crate::operation::list_workload_identities::ListWorkloadIdentitiesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::WorkloadIdentityType>> {
    let input = input.workload_identities;
    ::std::option::Option::Some(input)
}
