// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_key_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_key::CreateKeyInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.key_attributes {
        #[allow(unused_mut)]
        let mut object_2 = object.key("KeyAttributes").start_object();
        crate::protocol_serde::shape_key_attributes::ser_key_attributes(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.key_check_value_algorithm {
        object.key("KeyCheckValueAlgorithm").string(var_3.as_str());
    }
    if let Some(var_4) = &input.exportable {
        object.key("Exportable").boolean(*var_4);
    }
    if let Some(var_5) = &input.enabled {
        object.key("Enabled").boolean(*var_5);
    }
    if let Some(var_6) = &input.tags {
        let mut array_7 = object.key("Tags").start_array();
        for item_8 in var_6 {
            {
                #[allow(unused_mut)]
                let mut object_9 = array_7.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_9, item_8)?;
                object_9.finish();
            }
        }
        array_7.finish();
    }
    if let Some(var_10) = &input.derive_key_usage {
        object.key("DeriveKeyUsage").string(var_10.as_str());
    }
    if let Some(var_11) = &input.replication_regions {
        let mut array_12 = object.key("ReplicationRegions").start_array();
        for item_13 in var_11 {
            {
                array_12.value().string(item_13.as_str());
            }
        }
        array_12.finish();
    }
    Ok(())
}
