// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Input parameters for adding replication regions to a specific key.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AddKeyReplicationRegionsInput {
    /// <p>The key identifier (ARN or alias) of the key for which to add replication regions.</p>
    /// <p>This key must exist and be in a valid state for replication operations.</p>
    pub key_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The list of Amazon Web Services Regions to add to the key's replication configuration.</p>
    /// <p>Each region must be a valid Amazon Web Services Region where Amazon Web Services Payment Cryptography is available. The key will be replicated to these regions, allowing cryptographic operations to be performed closer to your applications.</p>
    pub replication_regions: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl AddKeyReplicationRegionsInput {
    /// <p>The key identifier (ARN or alias) of the key for which to add replication regions.</p>
    /// <p>This key must exist and be in a valid state for replication operations.</p>
    pub fn key_identifier(&self) -> ::std::option::Option<&str> {
        self.key_identifier.as_deref()
    }
    /// <p>The list of Amazon Web Services Regions to add to the key's replication configuration.</p>
    /// <p>Each region must be a valid Amazon Web Services Region where Amazon Web Services Payment Cryptography is available. The key will be replicated to these regions, allowing cryptographic operations to be performed closer to your applications.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.replication_regions.is_none()`.
    pub fn replication_regions(&self) -> &[::std::string::String] {
        self.replication_regions.as_deref().unwrap_or_default()
    }
}
impl AddKeyReplicationRegionsInput {
    /// Creates a new builder-style object to manufacture [`AddKeyReplicationRegionsInput`](crate::operation::add_key_replication_regions::AddKeyReplicationRegionsInput).
    pub fn builder() -> crate::operation::add_key_replication_regions::builders::AddKeyReplicationRegionsInputBuilder {
        crate::operation::add_key_replication_regions::builders::AddKeyReplicationRegionsInputBuilder::default()
    }
}

/// A builder for [`AddKeyReplicationRegionsInput`](crate::operation::add_key_replication_regions::AddKeyReplicationRegionsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AddKeyReplicationRegionsInputBuilder {
    pub(crate) key_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) replication_regions: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl AddKeyReplicationRegionsInputBuilder {
    /// <p>The key identifier (ARN or alias) of the key for which to add replication regions.</p>
    /// <p>This key must exist and be in a valid state for replication operations.</p>
    /// This field is required.
    pub fn key_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.key_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The key identifier (ARN or alias) of the key for which to add replication regions.</p>
    /// <p>This key must exist and be in a valid state for replication operations.</p>
    pub fn set_key_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.key_identifier = input;
        self
    }
    /// <p>The key identifier (ARN or alias) of the key for which to add replication regions.</p>
    /// <p>This key must exist and be in a valid state for replication operations.</p>
    pub fn get_key_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.key_identifier
    }
    /// Appends an item to `replication_regions`.
    ///
    /// To override the contents of this collection use [`set_replication_regions`](Self::set_replication_regions).
    ///
    /// <p>The list of Amazon Web Services Regions to add to the key's replication configuration.</p>
    /// <p>Each region must be a valid Amazon Web Services Region where Amazon Web Services Payment Cryptography is available. The key will be replicated to these regions, allowing cryptographic operations to be performed closer to your applications.</p>
    pub fn replication_regions(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.replication_regions.unwrap_or_default();
        v.push(input.into());
        self.replication_regions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of Amazon Web Services Regions to add to the key's replication configuration.</p>
    /// <p>Each region must be a valid Amazon Web Services Region where Amazon Web Services Payment Cryptography is available. The key will be replicated to these regions, allowing cryptographic operations to be performed closer to your applications.</p>
    pub fn set_replication_regions(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.replication_regions = input;
        self
    }
    /// <p>The list of Amazon Web Services Regions to add to the key's replication configuration.</p>
    /// <p>Each region must be a valid Amazon Web Services Region where Amazon Web Services Payment Cryptography is available. The key will be replicated to these regions, allowing cryptographic operations to be performed closer to your applications.</p>
    pub fn get_replication_regions(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.replication_regions
    }
    /// Consumes the builder and constructs a [`AddKeyReplicationRegionsInput`](crate::operation::add_key_replication_regions::AddKeyReplicationRegionsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::add_key_replication_regions::AddKeyReplicationRegionsInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::add_key_replication_regions::AddKeyReplicationRegionsInput {
            key_identifier: self.key_identifier,
            replication_regions: self.replication_regions,
        })
    }
}
