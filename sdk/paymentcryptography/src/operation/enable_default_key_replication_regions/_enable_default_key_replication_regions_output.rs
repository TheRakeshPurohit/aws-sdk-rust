// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Output from enabling default key replication regions for the account.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EnableDefaultKeyReplicationRegionsOutput {
    /// <p>The complete list of regions where default key replication is now enabled for the account.</p>
    /// <p>This includes both previously enabled regions and the newly added regions from this operation.</p>
    pub enabled_replication_regions: ::std::vec::Vec<::std::string::String>,
    _request_id: Option<String>,
}
impl EnableDefaultKeyReplicationRegionsOutput {
    /// <p>The complete list of regions where default key replication is now enabled for the account.</p>
    /// <p>This includes both previously enabled regions and the newly added regions from this operation.</p>
    pub fn enabled_replication_regions(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.enabled_replication_regions.deref()
    }
}
impl ::aws_types::request_id::RequestId for EnableDefaultKeyReplicationRegionsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl EnableDefaultKeyReplicationRegionsOutput {
    /// Creates a new builder-style object to manufacture [`EnableDefaultKeyReplicationRegionsOutput`](crate::operation::enable_default_key_replication_regions::EnableDefaultKeyReplicationRegionsOutput).
    pub fn builder() -> crate::operation::enable_default_key_replication_regions::builders::EnableDefaultKeyReplicationRegionsOutputBuilder {
        crate::operation::enable_default_key_replication_regions::builders::EnableDefaultKeyReplicationRegionsOutputBuilder::default()
    }
}

/// A builder for [`EnableDefaultKeyReplicationRegionsOutput`](crate::operation::enable_default_key_replication_regions::EnableDefaultKeyReplicationRegionsOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct EnableDefaultKeyReplicationRegionsOutputBuilder {
    pub(crate) enabled_replication_regions: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    _request_id: Option<String>,
}
impl EnableDefaultKeyReplicationRegionsOutputBuilder {
    /// Appends an item to `enabled_replication_regions`.
    ///
    /// To override the contents of this collection use [`set_enabled_replication_regions`](Self::set_enabled_replication_regions).
    ///
    /// <p>The complete list of regions where default key replication is now enabled for the account.</p>
    /// <p>This includes both previously enabled regions and the newly added regions from this operation.</p>
    pub fn enabled_replication_regions(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.enabled_replication_regions.unwrap_or_default();
        v.push(input.into());
        self.enabled_replication_regions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The complete list of regions where default key replication is now enabled for the account.</p>
    /// <p>This includes both previously enabled regions and the newly added regions from this operation.</p>
    pub fn set_enabled_replication_regions(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.enabled_replication_regions = input;
        self
    }
    /// <p>The complete list of regions where default key replication is now enabled for the account.</p>
    /// <p>This includes both previously enabled regions and the newly added regions from this operation.</p>
    pub fn get_enabled_replication_regions(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.enabled_replication_regions
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`EnableDefaultKeyReplicationRegionsOutput`](crate::operation::enable_default_key_replication_regions::EnableDefaultKeyReplicationRegionsOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`enabled_replication_regions`](crate::operation::enable_default_key_replication_regions::builders::EnableDefaultKeyReplicationRegionsOutputBuilder::enabled_replication_regions)
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::enable_default_key_replication_regions::EnableDefaultKeyReplicationRegionsOutput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::enable_default_key_replication_regions::EnableDefaultKeyReplicationRegionsOutput {
                enabled_replication_regions: self.enabled_replication_regions.ok_or_else(|| {
                    ::aws_smithy_types::error::operation::BuildError::missing_field(
                        "enabled_replication_regions",
                        "enabled_replication_regions was not specified but it is required when building EnableDefaultKeyReplicationRegionsOutput",
                    )
                })?,
                _request_id: self._request_id,
            },
        )
    }
}
