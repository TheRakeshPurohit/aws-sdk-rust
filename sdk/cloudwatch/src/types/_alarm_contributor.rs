// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents an individual contributor to a multi-timeseries alarm, containing information about a specific time series and its contribution to the alarm's state.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AlarmContributor {
    /// <p>The unique identifier for this alarm contributor.</p>
    pub contributor_id: ::std::option::Option<::std::string::String>,
    /// <p>A map of attributes that describe the contributor, such as metric dimensions and other identifying characteristics.</p>
    pub contributor_attributes: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>An explanation for the contributor's current state, providing context about why it is in its current condition.</p>
    pub state_reason: ::std::option::Option<::std::string::String>,
    /// <p>The timestamp when the contributor last transitioned to its current state.</p>
    pub state_transitioned_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl AlarmContributor {
    /// <p>The unique identifier for this alarm contributor.</p>
    pub fn contributor_id(&self) -> ::std::option::Option<&str> {
        self.contributor_id.as_deref()
    }
    /// <p>A map of attributes that describe the contributor, such as metric dimensions and other identifying characteristics.</p>
    pub fn contributor_attributes(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.contributor_attributes.as_ref()
    }
    /// <p>An explanation for the contributor's current state, providing context about why it is in its current condition.</p>
    pub fn state_reason(&self) -> ::std::option::Option<&str> {
        self.state_reason.as_deref()
    }
    /// <p>The timestamp when the contributor last transitioned to its current state.</p>
    pub fn state_transitioned_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.state_transitioned_timestamp.as_ref()
    }
}
impl AlarmContributor {
    /// Creates a new builder-style object to manufacture [`AlarmContributor`](crate::types::AlarmContributor).
    pub fn builder() -> crate::types::builders::AlarmContributorBuilder {
        crate::types::builders::AlarmContributorBuilder::default()
    }
}

/// A builder for [`AlarmContributor`](crate::types::AlarmContributor).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AlarmContributorBuilder {
    pub(crate) contributor_id: ::std::option::Option<::std::string::String>,
    pub(crate) contributor_attributes: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) state_reason: ::std::option::Option<::std::string::String>,
    pub(crate) state_transitioned_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl AlarmContributorBuilder {
    /// <p>The unique identifier for this alarm contributor.</p>
    /// This field is required.
    pub fn contributor_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.contributor_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for this alarm contributor.</p>
    pub fn set_contributor_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.contributor_id = input;
        self
    }
    /// <p>The unique identifier for this alarm contributor.</p>
    pub fn get_contributor_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.contributor_id
    }
    /// Adds a key-value pair to `contributor_attributes`.
    ///
    /// To override the contents of this collection use [`set_contributor_attributes`](Self::set_contributor_attributes).
    ///
    /// <p>A map of attributes that describe the contributor, such as metric dimensions and other identifying characteristics.</p>
    pub fn contributor_attributes(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.contributor_attributes.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.contributor_attributes = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>A map of attributes that describe the contributor, such as metric dimensions and other identifying characteristics.</p>
    pub fn set_contributor_attributes(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.contributor_attributes = input;
        self
    }
    /// <p>A map of attributes that describe the contributor, such as metric dimensions and other identifying characteristics.</p>
    pub fn get_contributor_attributes(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.contributor_attributes
    }
    /// <p>An explanation for the contributor's current state, providing context about why it is in its current condition.</p>
    /// This field is required.
    pub fn state_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.state_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An explanation for the contributor's current state, providing context about why it is in its current condition.</p>
    pub fn set_state_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.state_reason = input;
        self
    }
    /// <p>An explanation for the contributor's current state, providing context about why it is in its current condition.</p>
    pub fn get_state_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.state_reason
    }
    /// <p>The timestamp when the contributor last transitioned to its current state.</p>
    pub fn state_transitioned_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.state_transitioned_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the contributor last transitioned to its current state.</p>
    pub fn set_state_transitioned_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.state_transitioned_timestamp = input;
        self
    }
    /// <p>The timestamp when the contributor last transitioned to its current state.</p>
    pub fn get_state_transitioned_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.state_transitioned_timestamp
    }
    /// Consumes the builder and constructs a [`AlarmContributor`](crate::types::AlarmContributor).
    pub fn build(self) -> crate::types::AlarmContributor {
        crate::types::AlarmContributor {
            contributor_id: self.contributor_id,
            contributor_attributes: self.contributor_attributes,
            state_reason: self.state_reason,
            state_transitioned_timestamp: self.state_transitioned_timestamp,
        }
    }
}
