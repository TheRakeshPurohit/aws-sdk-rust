// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::needless_question_mark)]
pub fn de_alarm_contributor(
    decoder: &mut ::aws_smithy_xml::decode::ScopedDecoder,
) -> ::std::result::Result<crate::types::AlarmContributor, ::aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::AlarmContributor::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ContributorId") /* ContributorId com.amazonaws.cloudwatch#AlarmContributor$ContributorId */ =>  {
                let var_1 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_contributor_id(var_1);
            }
            ,
            s if s.matches("ContributorAttributes") /* ContributorAttributes com.amazonaws.cloudwatch#AlarmContributor$ContributorAttributes */ =>  {
                let var_2 =
                    Some(
                        crate::protocol_serde::shape_contributor_attributes::de_contributor_attributes(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_contributor_attributes(var_2);
            }
            ,
            s if s.matches("StateReason") /* StateReason com.amazonaws.cloudwatch#AlarmContributor$StateReason */ =>  {
                let var_3 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_state_reason(var_3);
            }
            ,
            s if s.matches("StateTransitionedTimestamp") /* StateTransitionedTimestamp com.amazonaws.cloudwatch#AlarmContributor$StateTransitionedTimestamp */ =>  {
                let var_4 =
                    Some(
                        ::aws_smithy_types::DateTime::from_str(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , ::aws_smithy_types::date_time::Format::DateTimeWithOffset
                        )
                        .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (timestamp: `com.amazonaws.cloudwatch#Timestamp`)"))
                        ?
                    )
                ;
                builder = builder.set_state_transitioned_timestamp(var_4);
            }
            ,
            _ => {}
        }
    }
    Ok(crate::serde_util::alarm_contributor_correct_errors(builder).build())
}
