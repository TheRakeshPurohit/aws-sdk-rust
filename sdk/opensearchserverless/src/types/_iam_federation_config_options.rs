// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes IAM federation options for an OpenSearch Serverless security configuration in the form of a key-value map. These options define how OpenSearch Serverless integrates with external identity providers using federation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct IamFederationConfigOptions {
    /// <p>The group attribute for this IAM federation integration. This attribute is used to map identity provider groups to OpenSearch Serverless permissions.</p>
    pub group_attribute: ::std::option::Option<::std::string::String>,
    /// <p>The user attribute for this IAM federation integration. This attribute is used to identify users in the federated authentication process.</p>
    pub user_attribute: ::std::option::Option<::std::string::String>,
}
impl IamFederationConfigOptions {
    /// <p>The group attribute for this IAM federation integration. This attribute is used to map identity provider groups to OpenSearch Serverless permissions.</p>
    pub fn group_attribute(&self) -> ::std::option::Option<&str> {
        self.group_attribute.as_deref()
    }
    /// <p>The user attribute for this IAM federation integration. This attribute is used to identify users in the federated authentication process.</p>
    pub fn user_attribute(&self) -> ::std::option::Option<&str> {
        self.user_attribute.as_deref()
    }
}
impl IamFederationConfigOptions {
    /// Creates a new builder-style object to manufacture [`IamFederationConfigOptions`](crate::types::IamFederationConfigOptions).
    pub fn builder() -> crate::types::builders::IamFederationConfigOptionsBuilder {
        crate::types::builders::IamFederationConfigOptionsBuilder::default()
    }
}

/// A builder for [`IamFederationConfigOptions`](crate::types::IamFederationConfigOptions).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct IamFederationConfigOptionsBuilder {
    pub(crate) group_attribute: ::std::option::Option<::std::string::String>,
    pub(crate) user_attribute: ::std::option::Option<::std::string::String>,
}
impl IamFederationConfigOptionsBuilder {
    /// <p>The group attribute for this IAM federation integration. This attribute is used to map identity provider groups to OpenSearch Serverless permissions.</p>
    pub fn group_attribute(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.group_attribute = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The group attribute for this IAM federation integration. This attribute is used to map identity provider groups to OpenSearch Serverless permissions.</p>
    pub fn set_group_attribute(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.group_attribute = input;
        self
    }
    /// <p>The group attribute for this IAM federation integration. This attribute is used to map identity provider groups to OpenSearch Serverless permissions.</p>
    pub fn get_group_attribute(&self) -> &::std::option::Option<::std::string::String> {
        &self.group_attribute
    }
    /// <p>The user attribute for this IAM federation integration. This attribute is used to identify users in the federated authentication process.</p>
    pub fn user_attribute(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_attribute = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The user attribute for this IAM federation integration. This attribute is used to identify users in the federated authentication process.</p>
    pub fn set_user_attribute(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_attribute = input;
        self
    }
    /// <p>The user attribute for this IAM federation integration. This attribute is used to identify users in the federated authentication process.</p>
    pub fn get_user_attribute(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_attribute
    }
    /// Consumes the builder and constructs a [`IamFederationConfigOptions`](crate::types::IamFederationConfigOptions).
    pub fn build(self) -> crate::types::IamFederationConfigOptions {
        crate::types::IamFederationConfigOptions {
            group_attribute: self.group_attribute,
            user_attribute: self.user_attribute,
        }
    }
}
