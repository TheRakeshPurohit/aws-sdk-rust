// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>FIPS-compliant endpoint URLs for an OpenSearch Serverless collection. These endpoints ensure all data transmission uses FIPS 140-3 validated cryptographic implementations, meeting federal security requirements for government workloads.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FipsEndpoints {
    /// <p>FIPS-compliant collection endpoint used to submit index, search, and data upload requests to an OpenSearch Serverless collection. This endpoint uses FIPS 140-3 validated cryptography and is required for federal government workloads.</p>
    pub collection_endpoint: ::std::option::Option<::std::string::String>,
    /// <p>FIPS-compliant endpoint used to access OpenSearch Dashboards. This endpoint uses FIPS 140-3 validated cryptography and is required for federal government workloads that need dashboard visualization capabilities.</p>
    pub dashboard_endpoint: ::std::option::Option<::std::string::String>,
}
impl FipsEndpoints {
    /// <p>FIPS-compliant collection endpoint used to submit index, search, and data upload requests to an OpenSearch Serverless collection. This endpoint uses FIPS 140-3 validated cryptography and is required for federal government workloads.</p>
    pub fn collection_endpoint(&self) -> ::std::option::Option<&str> {
        self.collection_endpoint.as_deref()
    }
    /// <p>FIPS-compliant endpoint used to access OpenSearch Dashboards. This endpoint uses FIPS 140-3 validated cryptography and is required for federal government workloads that need dashboard visualization capabilities.</p>
    pub fn dashboard_endpoint(&self) -> ::std::option::Option<&str> {
        self.dashboard_endpoint.as_deref()
    }
}
impl FipsEndpoints {
    /// Creates a new builder-style object to manufacture [`FipsEndpoints`](crate::types::FipsEndpoints).
    pub fn builder() -> crate::types::builders::FipsEndpointsBuilder {
        crate::types::builders::FipsEndpointsBuilder::default()
    }
}

/// A builder for [`FipsEndpoints`](crate::types::FipsEndpoints).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct FipsEndpointsBuilder {
    pub(crate) collection_endpoint: ::std::option::Option<::std::string::String>,
    pub(crate) dashboard_endpoint: ::std::option::Option<::std::string::String>,
}
impl FipsEndpointsBuilder {
    /// <p>FIPS-compliant collection endpoint used to submit index, search, and data upload requests to an OpenSearch Serverless collection. This endpoint uses FIPS 140-3 validated cryptography and is required for federal government workloads.</p>
    pub fn collection_endpoint(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.collection_endpoint = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>FIPS-compliant collection endpoint used to submit index, search, and data upload requests to an OpenSearch Serverless collection. This endpoint uses FIPS 140-3 validated cryptography and is required for federal government workloads.</p>
    pub fn set_collection_endpoint(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.collection_endpoint = input;
        self
    }
    /// <p>FIPS-compliant collection endpoint used to submit index, search, and data upload requests to an OpenSearch Serverless collection. This endpoint uses FIPS 140-3 validated cryptography and is required for federal government workloads.</p>
    pub fn get_collection_endpoint(&self) -> &::std::option::Option<::std::string::String> {
        &self.collection_endpoint
    }
    /// <p>FIPS-compliant endpoint used to access OpenSearch Dashboards. This endpoint uses FIPS 140-3 validated cryptography and is required for federal government workloads that need dashboard visualization capabilities.</p>
    pub fn dashboard_endpoint(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.dashboard_endpoint = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>FIPS-compliant endpoint used to access OpenSearch Dashboards. This endpoint uses FIPS 140-3 validated cryptography and is required for federal government workloads that need dashboard visualization capabilities.</p>
    pub fn set_dashboard_endpoint(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.dashboard_endpoint = input;
        self
    }
    /// <p>FIPS-compliant endpoint used to access OpenSearch Dashboards. This endpoint uses FIPS 140-3 validated cryptography and is required for federal government workloads that need dashboard visualization capabilities.</p>
    pub fn get_dashboard_endpoint(&self) -> &::std::option::Option<::std::string::String> {
        &self.dashboard_endpoint
    }
    /// Consumes the builder and constructs a [`FipsEndpoints`](crate::types::FipsEndpoints).
    pub fn build(self) -> crate::types::FipsEndpoints {
        crate::types::FipsEndpoints {
            collection_endpoint: self.collection_endpoint,
            dashboard_endpoint: self.dashboard_endpoint,
        }
    }
}
