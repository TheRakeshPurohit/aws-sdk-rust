// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetTrustedEntitySetOutput {
    /// <p>The name of the threat entity set associated with the specified <code>trustedEntitySetId</code>.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The format of the file that contains the trusted entity set.</p>
    pub format: ::std::option::Option<crate::types::TrustedEntitySetFormat>,
    /// <p>The URI of the file that contains the trusted entity set.</p>
    pub location: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Web Services account ID that owns the Amazon S3 bucket specified in the <b>location</b> parameter.</p>
    pub expected_bucket_owner: ::std::option::Option<::std::string::String>,
    /// <p>The status of the associated trusted entity set.</p>
    pub status: ::std::option::Option<crate::types::TrustedEntitySetStatus>,
    /// <p>The tags associated with trusted entity set resource.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The timestamp when the associated trusted entity set was created.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The timestamp when the associated trusted entity set was updated.</p>
    pub updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The error details when the status is shown as <code>ERROR</code>.</p>
    pub error_details: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetTrustedEntitySetOutput {
    /// <p>The name of the threat entity set associated with the specified <code>trustedEntitySetId</code>.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The format of the file that contains the trusted entity set.</p>
    pub fn format(&self) -> ::std::option::Option<&crate::types::TrustedEntitySetFormat> {
        self.format.as_ref()
    }
    /// <p>The URI of the file that contains the trusted entity set.</p>
    pub fn location(&self) -> ::std::option::Option<&str> {
        self.location.as_deref()
    }
    /// <p>The Amazon Web Services account ID that owns the Amazon S3 bucket specified in the <b>location</b> parameter.</p>
    pub fn expected_bucket_owner(&self) -> ::std::option::Option<&str> {
        self.expected_bucket_owner.as_deref()
    }
    /// <p>The status of the associated trusted entity set.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::TrustedEntitySetStatus> {
        self.status.as_ref()
    }
    /// <p>The tags associated with trusted entity set resource.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
    /// <p>The timestamp when the associated trusted entity set was created.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The timestamp when the associated trusted entity set was updated.</p>
    pub fn updated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
    /// <p>The error details when the status is shown as <code>ERROR</code>.</p>
    pub fn error_details(&self) -> ::std::option::Option<&str> {
        self.error_details.as_deref()
    }
}
impl ::aws_types::request_id::RequestId for GetTrustedEntitySetOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetTrustedEntitySetOutput {
    /// Creates a new builder-style object to manufacture [`GetTrustedEntitySetOutput`](crate::operation::get_trusted_entity_set::GetTrustedEntitySetOutput).
    pub fn builder() -> crate::operation::get_trusted_entity_set::builders::GetTrustedEntitySetOutputBuilder {
        crate::operation::get_trusted_entity_set::builders::GetTrustedEntitySetOutputBuilder::default()
    }
}

/// A builder for [`GetTrustedEntitySetOutput`](crate::operation::get_trusted_entity_set::GetTrustedEntitySetOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetTrustedEntitySetOutputBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) format: ::std::option::Option<crate::types::TrustedEntitySetFormat>,
    pub(crate) location: ::std::option::Option<::std::string::String>,
    pub(crate) expected_bucket_owner: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::TrustedEntitySetStatus>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) error_details: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetTrustedEntitySetOutputBuilder {
    /// <p>The name of the threat entity set associated with the specified <code>trustedEntitySetId</code>.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the threat entity set associated with the specified <code>trustedEntitySetId</code>.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the threat entity set associated with the specified <code>trustedEntitySetId</code>.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The format of the file that contains the trusted entity set.</p>
    /// This field is required.
    pub fn format(mut self, input: crate::types::TrustedEntitySetFormat) -> Self {
        self.format = ::std::option::Option::Some(input);
        self
    }
    /// <p>The format of the file that contains the trusted entity set.</p>
    pub fn set_format(mut self, input: ::std::option::Option<crate::types::TrustedEntitySetFormat>) -> Self {
        self.format = input;
        self
    }
    /// <p>The format of the file that contains the trusted entity set.</p>
    pub fn get_format(&self) -> &::std::option::Option<crate::types::TrustedEntitySetFormat> {
        &self.format
    }
    /// <p>The URI of the file that contains the trusted entity set.</p>
    /// This field is required.
    pub fn location(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.location = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The URI of the file that contains the trusted entity set.</p>
    pub fn set_location(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.location = input;
        self
    }
    /// <p>The URI of the file that contains the trusted entity set.</p>
    pub fn get_location(&self) -> &::std::option::Option<::std::string::String> {
        &self.location
    }
    /// <p>The Amazon Web Services account ID that owns the Amazon S3 bucket specified in the <b>location</b> parameter.</p>
    pub fn expected_bucket_owner(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.expected_bucket_owner = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID that owns the Amazon S3 bucket specified in the <b>location</b> parameter.</p>
    pub fn set_expected_bucket_owner(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.expected_bucket_owner = input;
        self
    }
    /// <p>The Amazon Web Services account ID that owns the Amazon S3 bucket specified in the <b>location</b> parameter.</p>
    pub fn get_expected_bucket_owner(&self) -> &::std::option::Option<::std::string::String> {
        &self.expected_bucket_owner
    }
    /// <p>The status of the associated trusted entity set.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::TrustedEntitySetStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the associated trusted entity set.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::TrustedEntitySetStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the associated trusted entity set.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::TrustedEntitySetStatus> {
        &self.status
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags associated with trusted entity set resource.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The tags associated with trusted entity set resource.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags associated with trusted entity set resource.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// <p>The timestamp when the associated trusted entity set was created.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the associated trusted entity set was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The timestamp when the associated trusted entity set was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The timestamp when the associated trusted entity set was updated.</p>
    pub fn updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the associated trusted entity set was updated.</p>
    pub fn set_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>The timestamp when the associated trusted entity set was updated.</p>
    pub fn get_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_at
    }
    /// <p>The error details when the status is shown as <code>ERROR</code>.</p>
    pub fn error_details(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.error_details = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The error details when the status is shown as <code>ERROR</code>.</p>
    pub fn set_error_details(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.error_details = input;
        self
    }
    /// <p>The error details when the status is shown as <code>ERROR</code>.</p>
    pub fn get_error_details(&self) -> &::std::option::Option<::std::string::String> {
        &self.error_details
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetTrustedEntitySetOutput`](crate::operation::get_trusted_entity_set::GetTrustedEntitySetOutput).
    pub fn build(self) -> crate::operation::get_trusted_entity_set::GetTrustedEntitySetOutput {
        crate::operation::get_trusted_entity_set::GetTrustedEntitySetOutput {
            name: self.name,
            format: self.format,
            location: self.location,
            expected_bucket_owner: self.expected_bucket_owner,
            status: self.status,
            tags: self.tags,
            created_at: self.created_at,
            updated_at: self.updated_at,
            error_details: self.error_details,
            _request_id: self._request_id,
        }
    }
}
