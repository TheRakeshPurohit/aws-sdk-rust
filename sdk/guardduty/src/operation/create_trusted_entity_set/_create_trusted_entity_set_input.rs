// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateTrustedEntitySetInput {
    /// <p>The unique ID of the detector of the GuardDuty account for which you want to create a trusted entity set.</p>
    /// <p>To find the <code>detectorId</code> in the current Region, see the Settings page in the GuardDuty console, or run the <a href="https://docs.aws.amazon.com/guardduty/latest/APIReference/API_ListDetectors.html">ListDetectors</a> API.</p>
    pub detector_id: ::std::option::Option<::std::string::String>,
    /// <p>A user-friendly name to identify the trusted entity set.</p>
    /// <p>The name of your list can include lowercase letters, uppercase letters, numbers, dash (-), and underscore (_).</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The format of the file that contains the trusted entity set.</p>
    pub format: ::std::option::Option<crate::types::TrustedEntitySetFormat>,
    /// <p>The URI of the file that contains the trusted entity set.</p>
    pub location: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Web Services account ID that owns the Amazon S3 bucket specified in the <b>location</b> parameter.</p>
    pub expected_bucket_owner: ::std::option::Option<::std::string::String>,
    /// <p>A boolean value that indicates whether GuardDuty is to start using the uploaded trusted entity set.</p>
    pub activate: ::std::option::Option<bool>,
    /// <p>The idempotency token for the create request.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>The tags to be added to a new trusted entity set resource.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateTrustedEntitySetInput {
    /// <p>The unique ID of the detector of the GuardDuty account for which you want to create a trusted entity set.</p>
    /// <p>To find the <code>detectorId</code> in the current Region, see the Settings page in the GuardDuty console, or run the <a href="https://docs.aws.amazon.com/guardduty/latest/APIReference/API_ListDetectors.html">ListDetectors</a> API.</p>
    pub fn detector_id(&self) -> ::std::option::Option<&str> {
        self.detector_id.as_deref()
    }
    /// <p>A user-friendly name to identify the trusted entity set.</p>
    /// <p>The name of your list can include lowercase letters, uppercase letters, numbers, dash (-), and underscore (_).</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The format of the file that contains the trusted entity set.</p>
    pub fn format(&self) -> ::std::option::Option<&crate::types::TrustedEntitySetFormat> {
        self.format.as_ref()
    }
    /// <p>The URI of the file that contains the trusted entity set.</p>
    pub fn location(&self) -> ::std::option::Option<&str> {
        self.location.as_deref()
    }
    /// <p>The Amazon Web Services account ID that owns the Amazon S3 bucket specified in the <b>location</b> parameter.</p>
    pub fn expected_bucket_owner(&self) -> ::std::option::Option<&str> {
        self.expected_bucket_owner.as_deref()
    }
    /// <p>A boolean value that indicates whether GuardDuty is to start using the uploaded trusted entity set.</p>
    pub fn activate(&self) -> ::std::option::Option<bool> {
        self.activate
    }
    /// <p>The idempotency token for the create request.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>The tags to be added to a new trusted entity set resource.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl CreateTrustedEntitySetInput {
    /// Creates a new builder-style object to manufacture [`CreateTrustedEntitySetInput`](crate::operation::create_trusted_entity_set::CreateTrustedEntitySetInput).
    pub fn builder() -> crate::operation::create_trusted_entity_set::builders::CreateTrustedEntitySetInputBuilder {
        crate::operation::create_trusted_entity_set::builders::CreateTrustedEntitySetInputBuilder::default()
    }
}

/// A builder for [`CreateTrustedEntitySetInput`](crate::operation::create_trusted_entity_set::CreateTrustedEntitySetInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateTrustedEntitySetInputBuilder {
    pub(crate) detector_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) format: ::std::option::Option<crate::types::TrustedEntitySetFormat>,
    pub(crate) location: ::std::option::Option<::std::string::String>,
    pub(crate) expected_bucket_owner: ::std::option::Option<::std::string::String>,
    pub(crate) activate: ::std::option::Option<bool>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateTrustedEntitySetInputBuilder {
    /// <p>The unique ID of the detector of the GuardDuty account for which you want to create a trusted entity set.</p>
    /// <p>To find the <code>detectorId</code> in the current Region, see the Settings page in the GuardDuty console, or run the <a href="https://docs.aws.amazon.com/guardduty/latest/APIReference/API_ListDetectors.html">ListDetectors</a> API.</p>
    /// This field is required.
    pub fn detector_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.detector_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique ID of the detector of the GuardDuty account for which you want to create a trusted entity set.</p>
    /// <p>To find the <code>detectorId</code> in the current Region, see the Settings page in the GuardDuty console, or run the <a href="https://docs.aws.amazon.com/guardduty/latest/APIReference/API_ListDetectors.html">ListDetectors</a> API.</p>
    pub fn set_detector_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.detector_id = input;
        self
    }
    /// <p>The unique ID of the detector of the GuardDuty account for which you want to create a trusted entity set.</p>
    /// <p>To find the <code>detectorId</code> in the current Region, see the Settings page in the GuardDuty console, or run the <a href="https://docs.aws.amazon.com/guardduty/latest/APIReference/API_ListDetectors.html">ListDetectors</a> API.</p>
    pub fn get_detector_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.detector_id
    }
    /// <p>A user-friendly name to identify the trusted entity set.</p>
    /// <p>The name of your list can include lowercase letters, uppercase letters, numbers, dash (-), and underscore (_).</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A user-friendly name to identify the trusted entity set.</p>
    /// <p>The name of your list can include lowercase letters, uppercase letters, numbers, dash (-), and underscore (_).</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A user-friendly name to identify the trusted entity set.</p>
    /// <p>The name of your list can include lowercase letters, uppercase letters, numbers, dash (-), and underscore (_).</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The format of the file that contains the trusted entity set.</p>
    /// This field is required.
    pub fn format(mut self, input: crate::types::TrustedEntitySetFormat) -> Self {
        self.format = ::std::option::Option::Some(input);
        self
    }
    /// <p>The format of the file that contains the trusted entity set.</p>
    pub fn set_format(mut self, input: ::std::option::Option<crate::types::TrustedEntitySetFormat>) -> Self {
        self.format = input;
        self
    }
    /// <p>The format of the file that contains the trusted entity set.</p>
    pub fn get_format(&self) -> &::std::option::Option<crate::types::TrustedEntitySetFormat> {
        &self.format
    }
    /// <p>The URI of the file that contains the trusted entity set.</p>
    /// This field is required.
    pub fn location(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.location = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The URI of the file that contains the trusted entity set.</p>
    pub fn set_location(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.location = input;
        self
    }
    /// <p>The URI of the file that contains the trusted entity set.</p>
    pub fn get_location(&self) -> &::std::option::Option<::std::string::String> {
        &self.location
    }
    /// <p>The Amazon Web Services account ID that owns the Amazon S3 bucket specified in the <b>location</b> parameter.</p>
    pub fn expected_bucket_owner(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.expected_bucket_owner = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID that owns the Amazon S3 bucket specified in the <b>location</b> parameter.</p>
    pub fn set_expected_bucket_owner(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.expected_bucket_owner = input;
        self
    }
    /// <p>The Amazon Web Services account ID that owns the Amazon S3 bucket specified in the <b>location</b> parameter.</p>
    pub fn get_expected_bucket_owner(&self) -> &::std::option::Option<::std::string::String> {
        &self.expected_bucket_owner
    }
    /// <p>A boolean value that indicates whether GuardDuty is to start using the uploaded trusted entity set.</p>
    /// This field is required.
    pub fn activate(mut self, input: bool) -> Self {
        self.activate = ::std::option::Option::Some(input);
        self
    }
    /// <p>A boolean value that indicates whether GuardDuty is to start using the uploaded trusted entity set.</p>
    pub fn set_activate(mut self, input: ::std::option::Option<bool>) -> Self {
        self.activate = input;
        self
    }
    /// <p>A boolean value that indicates whether GuardDuty is to start using the uploaded trusted entity set.</p>
    pub fn get_activate(&self) -> &::std::option::Option<bool> {
        &self.activate
    }
    /// <p>The idempotency token for the create request.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The idempotency token for the create request.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>The idempotency token for the create request.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags to be added to a new trusted entity set resource.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The tags to be added to a new trusted entity set resource.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags to be added to a new trusted entity set resource.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateTrustedEntitySetInput`](crate::operation::create_trusted_entity_set::CreateTrustedEntitySetInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_trusted_entity_set::CreateTrustedEntitySetInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::create_trusted_entity_set::CreateTrustedEntitySetInput {
            detector_id: self.detector_id,
            name: self.name,
            format: self.format,
            location: self.location,
            expected_bucket_owner: self.expected_bucket_owner,
            activate: self.activate,
            client_token: self.client_token,
            tags: self.tags,
        })
    }
}
