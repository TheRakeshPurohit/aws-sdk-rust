// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the storage configuration of the knowledge base for S3 vectors.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct S3VectorsConfiguration {
    /// <p>The Amazon Resource Name (ARN) of the S3 bucket where vector embeddings are stored. This bucket contains the vector data used by the knowledge base.</p>
    pub vector_bucket_arn: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the vector index used for the knowledge base. This ARN identifies the specific vector index resource within Amazon Bedrock.</p>
    pub index_arn: ::std::option::Option<::std::string::String>,
    /// <p>The name of the vector index used for the knowledge base. This name identifies the vector index within the Amazon Bedrock service.</p>
    pub index_name: ::std::option::Option<::std::string::String>,
}
impl S3VectorsConfiguration {
    /// <p>The Amazon Resource Name (ARN) of the S3 bucket where vector embeddings are stored. This bucket contains the vector data used by the knowledge base.</p>
    pub fn vector_bucket_arn(&self) -> ::std::option::Option<&str> {
        self.vector_bucket_arn.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the vector index used for the knowledge base. This ARN identifies the specific vector index resource within Amazon Bedrock.</p>
    pub fn index_arn(&self) -> ::std::option::Option<&str> {
        self.index_arn.as_deref()
    }
    /// <p>The name of the vector index used for the knowledge base. This name identifies the vector index within the Amazon Bedrock service.</p>
    pub fn index_name(&self) -> ::std::option::Option<&str> {
        self.index_name.as_deref()
    }
}
impl ::std::fmt::Debug for S3VectorsConfiguration {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("S3VectorsConfiguration");
        formatter.field("vector_bucket_arn", &"*** Sensitive Data Redacted ***");
        formatter.field("index_arn", &"*** Sensitive Data Redacted ***");
        formatter.field("index_name", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl S3VectorsConfiguration {
    /// Creates a new builder-style object to manufacture [`S3VectorsConfiguration`](crate::types::S3VectorsConfiguration).
    pub fn builder() -> crate::types::builders::S3VectorsConfigurationBuilder {
        crate::types::builders::S3VectorsConfigurationBuilder::default()
    }
}

/// A builder for [`S3VectorsConfiguration`](crate::types::S3VectorsConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct S3VectorsConfigurationBuilder {
    pub(crate) vector_bucket_arn: ::std::option::Option<::std::string::String>,
    pub(crate) index_arn: ::std::option::Option<::std::string::String>,
    pub(crate) index_name: ::std::option::Option<::std::string::String>,
}
impl S3VectorsConfigurationBuilder {
    /// <p>The Amazon Resource Name (ARN) of the S3 bucket where vector embeddings are stored. This bucket contains the vector data used by the knowledge base.</p>
    pub fn vector_bucket_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vector_bucket_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the S3 bucket where vector embeddings are stored. This bucket contains the vector data used by the knowledge base.</p>
    pub fn set_vector_bucket_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vector_bucket_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the S3 bucket where vector embeddings are stored. This bucket contains the vector data used by the knowledge base.</p>
    pub fn get_vector_bucket_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.vector_bucket_arn
    }
    /// <p>The Amazon Resource Name (ARN) of the vector index used for the knowledge base. This ARN identifies the specific vector index resource within Amazon Bedrock.</p>
    pub fn index_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.index_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the vector index used for the knowledge base. This ARN identifies the specific vector index resource within Amazon Bedrock.</p>
    pub fn set_index_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.index_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the vector index used for the knowledge base. This ARN identifies the specific vector index resource within Amazon Bedrock.</p>
    pub fn get_index_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.index_arn
    }
    /// <p>The name of the vector index used for the knowledge base. This name identifies the vector index within the Amazon Bedrock service.</p>
    pub fn index_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.index_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the vector index used for the knowledge base. This name identifies the vector index within the Amazon Bedrock service.</p>
    pub fn set_index_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.index_name = input;
        self
    }
    /// <p>The name of the vector index used for the knowledge base. This name identifies the vector index within the Amazon Bedrock service.</p>
    pub fn get_index_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.index_name
    }
    /// Consumes the builder and constructs a [`S3VectorsConfiguration`](crate::types::S3VectorsConfiguration).
    pub fn build(self) -> crate::types::S3VectorsConfiguration {
        crate::types::S3VectorsConfiguration {
            vector_bucket_arn: self.vector_bucket_arn,
            index_arn: self.index_arn,
            index_name: self.index_name,
        }
    }
}
impl ::std::fmt::Debug for S3VectorsConfigurationBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("S3VectorsConfigurationBuilder");
        formatter.field("vector_bucket_arn", &"*** Sensitive Data Redacted ***");
        formatter.field("index_arn", &"*** Sensitive Data Redacted ***");
        formatter.field("index_name", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
