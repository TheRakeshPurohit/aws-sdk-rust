// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_workflow_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_workflow::CreateWorkflowInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.accelerators {
        object.key("accelerators").string(var_1.as_str());
    }
    if let Some(var_2) = &input.container_registry_map {
        #[allow(unused_mut)]
        let mut object_3 = object.key("containerRegistryMap").start_object();
        crate::protocol_serde::shape_container_registry_map::ser_container_registry_map(&mut object_3, var_2)?;
        object_3.finish();
    }
    if let Some(var_4) = &input.container_registry_map_uri {
        object.key("containerRegistryMapUri").string(var_4.as_str());
    }
    if let Some(var_5) = &input.definition_repository {
        #[allow(unused_mut)]
        let mut object_6 = object.key("definitionRepository").start_object();
        crate::protocol_serde::shape_definition_repository::ser_definition_repository(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.definition_uri {
        object.key("definitionUri").string(var_7.as_str());
    }
    if let Some(var_8) = &input.definition_zip {
        object.key("definitionZip").string_unchecked(&::aws_smithy_types::base64::encode(var_8));
    }
    if let Some(var_9) = &input.description {
        object.key("description").string(var_9.as_str());
    }
    if let Some(var_10) = &input.engine {
        object.key("engine").string(var_10.as_str());
    }
    if let Some(var_11) = &input.main {
        object.key("main").string(var_11.as_str());
    }
    if let Some(var_12) = &input.name {
        object.key("name").string(var_12.as_str());
    }
    if let Some(var_13) = &input.parameter_template {
        #[allow(unused_mut)]
        let mut object_14 = object.key("parameterTemplate").start_object();
        for (key_15, value_16) in var_13 {
            {
                #[allow(unused_mut)]
                let mut object_17 = object_14.key(key_15.as_str()).start_object();
                crate::protocol_serde::shape_workflow_parameter::ser_workflow_parameter(&mut object_17, value_16)?;
                object_17.finish();
            }
        }
        object_14.finish();
    }
    if let Some(var_18) = &input.parameter_template_path {
        object.key("parameterTemplatePath").string(var_18.as_str());
    }
    if let Some(var_19) = &input.readme_markdown {
        object.key("readmeMarkdown").string(var_19.as_str());
    }
    if let Some(var_20) = &input.readme_path {
        object.key("readmePath").string(var_20.as_str());
    }
    if let Some(var_21) = &input.readme_uri {
        object.key("readmeUri").string(var_21.as_str());
    }
    if let Some(var_22) = &input.request_id {
        object.key("requestId").string(var_22.as_str());
    }
    if let Some(var_23) = &input.storage_capacity {
        object.key("storageCapacity").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_23).into()),
        );
    }
    if let Some(var_24) = &input.storage_type {
        object.key("storageType").string(var_24.as_str());
    }
    if let Some(var_25) = &input.tags {
        #[allow(unused_mut)]
        let mut object_26 = object.key("tags").start_object();
        for (key_27, value_28) in var_25 {
            {
                object_26.key(key_27.as_str()).string(value_28.as_str());
            }
        }
        object_26.finish();
    }
    if let Some(var_29) = &input.workflow_bucket_owner_id {
        object.key("workflowBucketOwnerId").string(var_29.as_str());
    }
    Ok(())
}
