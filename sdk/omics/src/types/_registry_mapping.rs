// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>If you are using the ECR pull through cache feature, the registry mapping maps between the ECR repository and the upstream registry where container images are pulled and synchronized.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RegistryMapping {
    /// <p>The URI of the upstream registry.</p>
    pub upstream_registry_url: ::std::option::Option<::std::string::String>,
    /// <p>The repository prefix to use in the ECR private repository.</p>
    pub ecr_repository_prefix: ::std::option::Option<::std::string::String>,
    /// <p>The repository prefix of the corresponding repository in the upstream registry.</p>
    pub upstream_repository_prefix: ::std::option::Option<::std::string::String>,
    /// <p>Account ID of the account that owns the upstream container image.</p>
    pub ecr_account_id: ::std::option::Option<::std::string::String>,
}
impl RegistryMapping {
    /// <p>The URI of the upstream registry.</p>
    pub fn upstream_registry_url(&self) -> ::std::option::Option<&str> {
        self.upstream_registry_url.as_deref()
    }
    /// <p>The repository prefix to use in the ECR private repository.</p>
    pub fn ecr_repository_prefix(&self) -> ::std::option::Option<&str> {
        self.ecr_repository_prefix.as_deref()
    }
    /// <p>The repository prefix of the corresponding repository in the upstream registry.</p>
    pub fn upstream_repository_prefix(&self) -> ::std::option::Option<&str> {
        self.upstream_repository_prefix.as_deref()
    }
    /// <p>Account ID of the account that owns the upstream container image.</p>
    pub fn ecr_account_id(&self) -> ::std::option::Option<&str> {
        self.ecr_account_id.as_deref()
    }
}
impl RegistryMapping {
    /// Creates a new builder-style object to manufacture [`RegistryMapping`](crate::types::RegistryMapping).
    pub fn builder() -> crate::types::builders::RegistryMappingBuilder {
        crate::types::builders::RegistryMappingBuilder::default()
    }
}

/// A builder for [`RegistryMapping`](crate::types::RegistryMapping).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RegistryMappingBuilder {
    pub(crate) upstream_registry_url: ::std::option::Option<::std::string::String>,
    pub(crate) ecr_repository_prefix: ::std::option::Option<::std::string::String>,
    pub(crate) upstream_repository_prefix: ::std::option::Option<::std::string::String>,
    pub(crate) ecr_account_id: ::std::option::Option<::std::string::String>,
}
impl RegistryMappingBuilder {
    /// <p>The URI of the upstream registry.</p>
    pub fn upstream_registry_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.upstream_registry_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The URI of the upstream registry.</p>
    pub fn set_upstream_registry_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.upstream_registry_url = input;
        self
    }
    /// <p>The URI of the upstream registry.</p>
    pub fn get_upstream_registry_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.upstream_registry_url
    }
    /// <p>The repository prefix to use in the ECR private repository.</p>
    pub fn ecr_repository_prefix(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ecr_repository_prefix = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The repository prefix to use in the ECR private repository.</p>
    pub fn set_ecr_repository_prefix(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ecr_repository_prefix = input;
        self
    }
    /// <p>The repository prefix to use in the ECR private repository.</p>
    pub fn get_ecr_repository_prefix(&self) -> &::std::option::Option<::std::string::String> {
        &self.ecr_repository_prefix
    }
    /// <p>The repository prefix of the corresponding repository in the upstream registry.</p>
    pub fn upstream_repository_prefix(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.upstream_repository_prefix = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The repository prefix of the corresponding repository in the upstream registry.</p>
    pub fn set_upstream_repository_prefix(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.upstream_repository_prefix = input;
        self
    }
    /// <p>The repository prefix of the corresponding repository in the upstream registry.</p>
    pub fn get_upstream_repository_prefix(&self) -> &::std::option::Option<::std::string::String> {
        &self.upstream_repository_prefix
    }
    /// <p>Account ID of the account that owns the upstream container image.</p>
    pub fn ecr_account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ecr_account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Account ID of the account that owns the upstream container image.</p>
    pub fn set_ecr_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ecr_account_id = input;
        self
    }
    /// <p>Account ID of the account that owns the upstream container image.</p>
    pub fn get_ecr_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.ecr_account_id
    }
    /// Consumes the builder and constructs a [`RegistryMapping`](crate::types::RegistryMapping).
    pub fn build(self) -> crate::types::RegistryMapping {
        crate::types::RegistryMapping {
            upstream_registry_url: self.upstream_registry_url,
            ecr_repository_prefix: self.ecr_repository_prefix,
            upstream_repository_prefix: self.upstream_repository_prefix,
            ecr_account_id: self.ecr_account_id,
        }
    }
}
