// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies image mappings that workflow tasks can use. For example, you can replace all the task references of a public image to use an equivalent image in your private ECR repository. You can use image mappings with upstream registries that don't support pull through cache. You need to manually synchronize the upstream registry with your private repository.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ImageMapping {
    /// <p>Specifies the URI of the source image in the upstream registry.</p>
    pub source_image: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the URI of the corresponding image in the private ECR registry.</p>
    pub destination_image: ::std::option::Option<::std::string::String>,
}
impl ImageMapping {
    /// <p>Specifies the URI of the source image in the upstream registry.</p>
    pub fn source_image(&self) -> ::std::option::Option<&str> {
        self.source_image.as_deref()
    }
    /// <p>Specifies the URI of the corresponding image in the private ECR registry.</p>
    pub fn destination_image(&self) -> ::std::option::Option<&str> {
        self.destination_image.as_deref()
    }
}
impl ImageMapping {
    /// Creates a new builder-style object to manufacture [`ImageMapping`](crate::types::ImageMapping).
    pub fn builder() -> crate::types::builders::ImageMappingBuilder {
        crate::types::builders::ImageMappingBuilder::default()
    }
}

/// A builder for [`ImageMapping`](crate::types::ImageMapping).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ImageMappingBuilder {
    pub(crate) source_image: ::std::option::Option<::std::string::String>,
    pub(crate) destination_image: ::std::option::Option<::std::string::String>,
}
impl ImageMappingBuilder {
    /// <p>Specifies the URI of the source image in the upstream registry.</p>
    pub fn source_image(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_image = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the URI of the source image in the upstream registry.</p>
    pub fn set_source_image(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_image = input;
        self
    }
    /// <p>Specifies the URI of the source image in the upstream registry.</p>
    pub fn get_source_image(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_image
    }
    /// <p>Specifies the URI of the corresponding image in the private ECR registry.</p>
    pub fn destination_image(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.destination_image = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the URI of the corresponding image in the private ECR registry.</p>
    pub fn set_destination_image(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.destination_image = input;
        self
    }
    /// <p>Specifies the URI of the corresponding image in the private ECR registry.</p>
    pub fn get_destination_image(&self) -> &::std::option::Option<::std::string::String> {
        &self.destination_image
    }
    /// Consumes the builder and constructs a [`ImageMapping`](crate::types::ImageMapping).
    pub fn build(self) -> crate::types::ImageMapping {
        crate::types::ImageMapping {
            source_image: self.source_image,
            destination_image: self.destination_image,
        }
    }
}
