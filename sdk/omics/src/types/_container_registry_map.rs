// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Use a container registry map to specify mappings between the ECR private repository and one or more upstream registries. For more information, see <a href="https://docs.aws.amazon.com/omics/latest/dev/workflows-ecr.html">Container images</a> in the <i>Amazon Web Services HealthOmics User Guide</i>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ContainerRegistryMap {
    /// <p>Mapping that provides the ECR repository path where upstream container images are pulled and synchronized.</p>
    pub registry_mappings: ::std::option::Option<::std::vec::Vec<crate::types::RegistryMapping>>,
    /// <p>Image mappings specify path mappings between the ECR private repository and their corresponding external repositories.</p>
    pub image_mappings: ::std::option::Option<::std::vec::Vec<crate::types::ImageMapping>>,
}
impl ContainerRegistryMap {
    /// <p>Mapping that provides the ECR repository path where upstream container images are pulled and synchronized.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.registry_mappings.is_none()`.
    pub fn registry_mappings(&self) -> &[crate::types::RegistryMapping] {
        self.registry_mappings.as_deref().unwrap_or_default()
    }
    /// <p>Image mappings specify path mappings between the ECR private repository and their corresponding external repositories.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.image_mappings.is_none()`.
    pub fn image_mappings(&self) -> &[crate::types::ImageMapping] {
        self.image_mappings.as_deref().unwrap_or_default()
    }
}
impl ContainerRegistryMap {
    /// Creates a new builder-style object to manufacture [`ContainerRegistryMap`](crate::types::ContainerRegistryMap).
    pub fn builder() -> crate::types::builders::ContainerRegistryMapBuilder {
        crate::types::builders::ContainerRegistryMapBuilder::default()
    }
}

/// A builder for [`ContainerRegistryMap`](crate::types::ContainerRegistryMap).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ContainerRegistryMapBuilder {
    pub(crate) registry_mappings: ::std::option::Option<::std::vec::Vec<crate::types::RegistryMapping>>,
    pub(crate) image_mappings: ::std::option::Option<::std::vec::Vec<crate::types::ImageMapping>>,
}
impl ContainerRegistryMapBuilder {
    /// Appends an item to `registry_mappings`.
    ///
    /// To override the contents of this collection use [`set_registry_mappings`](Self::set_registry_mappings).
    ///
    /// <p>Mapping that provides the ECR repository path where upstream container images are pulled and synchronized.</p>
    pub fn registry_mappings(mut self, input: crate::types::RegistryMapping) -> Self {
        let mut v = self.registry_mappings.unwrap_or_default();
        v.push(input);
        self.registry_mappings = ::std::option::Option::Some(v);
        self
    }
    /// <p>Mapping that provides the ECR repository path where upstream container images are pulled and synchronized.</p>
    pub fn set_registry_mappings(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RegistryMapping>>) -> Self {
        self.registry_mappings = input;
        self
    }
    /// <p>Mapping that provides the ECR repository path where upstream container images are pulled and synchronized.</p>
    pub fn get_registry_mappings(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RegistryMapping>> {
        &self.registry_mappings
    }
    /// Appends an item to `image_mappings`.
    ///
    /// To override the contents of this collection use [`set_image_mappings`](Self::set_image_mappings).
    ///
    /// <p>Image mappings specify path mappings between the ECR private repository and their corresponding external repositories.</p>
    pub fn image_mappings(mut self, input: crate::types::ImageMapping) -> Self {
        let mut v = self.image_mappings.unwrap_or_default();
        v.push(input);
        self.image_mappings = ::std::option::Option::Some(v);
        self
    }
    /// <p>Image mappings specify path mappings between the ECR private repository and their corresponding external repositories.</p>
    pub fn set_image_mappings(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ImageMapping>>) -> Self {
        self.image_mappings = input;
        self
    }
    /// <p>Image mappings specify path mappings between the ECR private repository and their corresponding external repositories.</p>
    pub fn get_image_mappings(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ImageMapping>> {
        &self.image_mappings
    }
    /// Consumes the builder and constructs a [`ContainerRegistryMap`](crate::types::ContainerRegistryMap).
    pub fn build(self) -> crate::types::ContainerRegistryMap {
        crate::types::ContainerRegistryMap {
            registry_mappings: self.registry_mappings,
            image_mappings: self.image_mappings,
        }
    }
}
