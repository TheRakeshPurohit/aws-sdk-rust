// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the container image used for a task.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ImageDetails {
    /// <p>The URI of the container image.</p>
    pub image: ::std::option::Option<::std::string::String>,
    /// <p>The container image digest. If the image URI was transformed, this will be the digest of the container image referenced by the transformed URI.</p>
    pub image_digest: ::std::option::Option<::std::string::String>,
    /// <p>URI of the source registry. If the URI is from a third-party registry, Amazon Web Services HealthOmics transforms the URI to the corresponding ECR path, using the pull-through cache mapping rules.</p>
    pub source_image: ::std::option::Option<::std::string::String>,
}
impl ImageDetails {
    /// <p>The URI of the container image.</p>
    pub fn image(&self) -> ::std::option::Option<&str> {
        self.image.as_deref()
    }
    /// <p>The container image digest. If the image URI was transformed, this will be the digest of the container image referenced by the transformed URI.</p>
    pub fn image_digest(&self) -> ::std::option::Option<&str> {
        self.image_digest.as_deref()
    }
    /// <p>URI of the source registry. If the URI is from a third-party registry, Amazon Web Services HealthOmics transforms the URI to the corresponding ECR path, using the pull-through cache mapping rules.</p>
    pub fn source_image(&self) -> ::std::option::Option<&str> {
        self.source_image.as_deref()
    }
}
impl ImageDetails {
    /// Creates a new builder-style object to manufacture [`ImageDetails`](crate::types::ImageDetails).
    pub fn builder() -> crate::types::builders::ImageDetailsBuilder {
        crate::types::builders::ImageDetailsBuilder::default()
    }
}

/// A builder for [`ImageDetails`](crate::types::ImageDetails).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ImageDetailsBuilder {
    pub(crate) image: ::std::option::Option<::std::string::String>,
    pub(crate) image_digest: ::std::option::Option<::std::string::String>,
    pub(crate) source_image: ::std::option::Option<::std::string::String>,
}
impl ImageDetailsBuilder {
    /// <p>The URI of the container image.</p>
    pub fn image(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.image = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The URI of the container image.</p>
    pub fn set_image(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.image = input;
        self
    }
    /// <p>The URI of the container image.</p>
    pub fn get_image(&self) -> &::std::option::Option<::std::string::String> {
        &self.image
    }
    /// <p>The container image digest. If the image URI was transformed, this will be the digest of the container image referenced by the transformed URI.</p>
    pub fn image_digest(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.image_digest = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The container image digest. If the image URI was transformed, this will be the digest of the container image referenced by the transformed URI.</p>
    pub fn set_image_digest(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.image_digest = input;
        self
    }
    /// <p>The container image digest. If the image URI was transformed, this will be the digest of the container image referenced by the transformed URI.</p>
    pub fn get_image_digest(&self) -> &::std::option::Option<::std::string::String> {
        &self.image_digest
    }
    /// <p>URI of the source registry. If the URI is from a third-party registry, Amazon Web Services HealthOmics transforms the URI to the corresponding ECR path, using the pull-through cache mapping rules.</p>
    pub fn source_image(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_image = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>URI of the source registry. If the URI is from a third-party registry, Amazon Web Services HealthOmics transforms the URI to the corresponding ECR path, using the pull-through cache mapping rules.</p>
    pub fn set_source_image(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_image = input;
        self
    }
    /// <p>URI of the source registry. If the URI is from a third-party registry, Amazon Web Services HealthOmics transforms the URI to the corresponding ECR path, using the pull-through cache mapping rules.</p>
    pub fn get_source_image(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_image
    }
    /// Consumes the builder and constructs a [`ImageDetails`](crate::types::ImageDetails).
    pub fn build(self) -> crate::types::ImageDetails {
        crate::types::ImageDetails {
            image: self.image,
            image_digest: self.image_digest,
            source_image: self.source_image,
        }
    }
}
