// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about a source code repository that hosts the workflow definition files.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DefinitionRepository {
    /// <p>The Amazon Resource Name (ARN) of the connection to the source code repository.</p>
    pub connection_arn: ::std::string::String,
    /// <p>The full repository identifier, including the repository owner and name. For example, 'repository-owner/repository-name'.</p>
    pub full_repository_id: ::std::string::String,
    /// <p>The source reference for the repository, such as a branch name, tag, or commit ID.</p>
    pub source_reference: ::std::option::Option<crate::types::SourceReference>,
    /// <p>A list of file patterns to exclude when retrieving the workflow definition from the repository.</p>
    pub exclude_file_patterns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl DefinitionRepository {
    /// <p>The Amazon Resource Name (ARN) of the connection to the source code repository.</p>
    pub fn connection_arn(&self) -> &str {
        use std::ops::Deref;
        self.connection_arn.deref()
    }
    /// <p>The full repository identifier, including the repository owner and name. For example, 'repository-owner/repository-name'.</p>
    pub fn full_repository_id(&self) -> &str {
        use std::ops::Deref;
        self.full_repository_id.deref()
    }
    /// <p>The source reference for the repository, such as a branch name, tag, or commit ID.</p>
    pub fn source_reference(&self) -> ::std::option::Option<&crate::types::SourceReference> {
        self.source_reference.as_ref()
    }
    /// <p>A list of file patterns to exclude when retrieving the workflow definition from the repository.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.exclude_file_patterns.is_none()`.
    pub fn exclude_file_patterns(&self) -> &[::std::string::String] {
        self.exclude_file_patterns.as_deref().unwrap_or_default()
    }
}
impl DefinitionRepository {
    /// Creates a new builder-style object to manufacture [`DefinitionRepository`](crate::types::DefinitionRepository).
    pub fn builder() -> crate::types::builders::DefinitionRepositoryBuilder {
        crate::types::builders::DefinitionRepositoryBuilder::default()
    }
}

/// A builder for [`DefinitionRepository`](crate::types::DefinitionRepository).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DefinitionRepositoryBuilder {
    pub(crate) connection_arn: ::std::option::Option<::std::string::String>,
    pub(crate) full_repository_id: ::std::option::Option<::std::string::String>,
    pub(crate) source_reference: ::std::option::Option<crate::types::SourceReference>,
    pub(crate) exclude_file_patterns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl DefinitionRepositoryBuilder {
    /// <p>The Amazon Resource Name (ARN) of the connection to the source code repository.</p>
    /// This field is required.
    pub fn connection_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.connection_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the connection to the source code repository.</p>
    pub fn set_connection_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.connection_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the connection to the source code repository.</p>
    pub fn get_connection_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.connection_arn
    }
    /// <p>The full repository identifier, including the repository owner and name. For example, 'repository-owner/repository-name'.</p>
    /// This field is required.
    pub fn full_repository_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.full_repository_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The full repository identifier, including the repository owner and name. For example, 'repository-owner/repository-name'.</p>
    pub fn set_full_repository_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.full_repository_id = input;
        self
    }
    /// <p>The full repository identifier, including the repository owner and name. For example, 'repository-owner/repository-name'.</p>
    pub fn get_full_repository_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.full_repository_id
    }
    /// <p>The source reference for the repository, such as a branch name, tag, or commit ID.</p>
    pub fn source_reference(mut self, input: crate::types::SourceReference) -> Self {
        self.source_reference = ::std::option::Option::Some(input);
        self
    }
    /// <p>The source reference for the repository, such as a branch name, tag, or commit ID.</p>
    pub fn set_source_reference(mut self, input: ::std::option::Option<crate::types::SourceReference>) -> Self {
        self.source_reference = input;
        self
    }
    /// <p>The source reference for the repository, such as a branch name, tag, or commit ID.</p>
    pub fn get_source_reference(&self) -> &::std::option::Option<crate::types::SourceReference> {
        &self.source_reference
    }
    /// Appends an item to `exclude_file_patterns`.
    ///
    /// To override the contents of this collection use [`set_exclude_file_patterns`](Self::set_exclude_file_patterns).
    ///
    /// <p>A list of file patterns to exclude when retrieving the workflow definition from the repository.</p>
    pub fn exclude_file_patterns(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.exclude_file_patterns.unwrap_or_default();
        v.push(input.into());
        self.exclude_file_patterns = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of file patterns to exclude when retrieving the workflow definition from the repository.</p>
    pub fn set_exclude_file_patterns(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.exclude_file_patterns = input;
        self
    }
    /// <p>A list of file patterns to exclude when retrieving the workflow definition from the repository.</p>
    pub fn get_exclude_file_patterns(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.exclude_file_patterns
    }
    /// Consumes the builder and constructs a [`DefinitionRepository`](crate::types::DefinitionRepository).
    /// This method will fail if any of the following fields are not set:
    /// - [`connection_arn`](crate::types::builders::DefinitionRepositoryBuilder::connection_arn)
    /// - [`full_repository_id`](crate::types::builders::DefinitionRepositoryBuilder::full_repository_id)
    pub fn build(self) -> ::std::result::Result<crate::types::DefinitionRepository, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DefinitionRepository {
            connection_arn: self.connection_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "connection_arn",
                    "connection_arn was not specified but it is required when building DefinitionRepository",
                )
            })?,
            full_repository_id: self.full_repository_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "full_repository_id",
                    "full_repository_id was not specified but it is required when building DefinitionRepository",
                )
            })?,
            source_reference: self.source_reference,
            exclude_file_patterns: self.exclude_file_patterns,
        })
    }
}
