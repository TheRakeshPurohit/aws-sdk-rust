// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains detailed information about the source code repository that hosts the workflow definition files.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DefinitionRepositoryDetails {
    /// <p>The Amazon Resource Name (ARN) of the connection to the source code repository.</p>
    pub connection_arn: ::std::option::Option<::std::string::String>,
    /// <p>The full repository identifier, including the repository owner and name. For example, 'repository-owner/repository-name'.</p>
    pub full_repository_id: ::std::option::Option<::std::string::String>,
    /// <p>The source reference for the repository, such as a branch name, tag, or commit ID.</p>
    pub source_reference: ::std::option::Option<crate::types::SourceReference>,
    /// <p>The provider type of the source code repository, such as Bitbucket, GitHub, GitHubEnterpriseServer, GitLab, and GitLabSelfManaged.</p>
    pub provider_type: ::std::option::Option<::std::string::String>,
    /// <p>The endpoint URL of the source code repository provider.</p>
    pub provider_endpoint: ::std::option::Option<::std::string::String>,
}
impl DefinitionRepositoryDetails {
    /// <p>The Amazon Resource Name (ARN) of the connection to the source code repository.</p>
    pub fn connection_arn(&self) -> ::std::option::Option<&str> {
        self.connection_arn.as_deref()
    }
    /// <p>The full repository identifier, including the repository owner and name. For example, 'repository-owner/repository-name'.</p>
    pub fn full_repository_id(&self) -> ::std::option::Option<&str> {
        self.full_repository_id.as_deref()
    }
    /// <p>The source reference for the repository, such as a branch name, tag, or commit ID.</p>
    pub fn source_reference(&self) -> ::std::option::Option<&crate::types::SourceReference> {
        self.source_reference.as_ref()
    }
    /// <p>The provider type of the source code repository, such as Bitbucket, GitHub, GitHubEnterpriseServer, GitLab, and GitLabSelfManaged.</p>
    pub fn provider_type(&self) -> ::std::option::Option<&str> {
        self.provider_type.as_deref()
    }
    /// <p>The endpoint URL of the source code repository provider.</p>
    pub fn provider_endpoint(&self) -> ::std::option::Option<&str> {
        self.provider_endpoint.as_deref()
    }
}
impl DefinitionRepositoryDetails {
    /// Creates a new builder-style object to manufacture [`DefinitionRepositoryDetails`](crate::types::DefinitionRepositoryDetails).
    pub fn builder() -> crate::types::builders::DefinitionRepositoryDetailsBuilder {
        crate::types::builders::DefinitionRepositoryDetailsBuilder::default()
    }
}

/// A builder for [`DefinitionRepositoryDetails`](crate::types::DefinitionRepositoryDetails).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DefinitionRepositoryDetailsBuilder {
    pub(crate) connection_arn: ::std::option::Option<::std::string::String>,
    pub(crate) full_repository_id: ::std::option::Option<::std::string::String>,
    pub(crate) source_reference: ::std::option::Option<crate::types::SourceReference>,
    pub(crate) provider_type: ::std::option::Option<::std::string::String>,
    pub(crate) provider_endpoint: ::std::option::Option<::std::string::String>,
}
impl DefinitionRepositoryDetailsBuilder {
    /// <p>The Amazon Resource Name (ARN) of the connection to the source code repository.</p>
    pub fn connection_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.connection_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the connection to the source code repository.</p>
    pub fn set_connection_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.connection_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the connection to the source code repository.</p>
    pub fn get_connection_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.connection_arn
    }
    /// <p>The full repository identifier, including the repository owner and name. For example, 'repository-owner/repository-name'.</p>
    pub fn full_repository_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.full_repository_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The full repository identifier, including the repository owner and name. For example, 'repository-owner/repository-name'.</p>
    pub fn set_full_repository_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.full_repository_id = input;
        self
    }
    /// <p>The full repository identifier, including the repository owner and name. For example, 'repository-owner/repository-name'.</p>
    pub fn get_full_repository_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.full_repository_id
    }
    /// <p>The source reference for the repository, such as a branch name, tag, or commit ID.</p>
    pub fn source_reference(mut self, input: crate::types::SourceReference) -> Self {
        self.source_reference = ::std::option::Option::Some(input);
        self
    }
    /// <p>The source reference for the repository, such as a branch name, tag, or commit ID.</p>
    pub fn set_source_reference(mut self, input: ::std::option::Option<crate::types::SourceReference>) -> Self {
        self.source_reference = input;
        self
    }
    /// <p>The source reference for the repository, such as a branch name, tag, or commit ID.</p>
    pub fn get_source_reference(&self) -> &::std::option::Option<crate::types::SourceReference> {
        &self.source_reference
    }
    /// <p>The provider type of the source code repository, such as Bitbucket, GitHub, GitHubEnterpriseServer, GitLab, and GitLabSelfManaged.</p>
    pub fn provider_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.provider_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The provider type of the source code repository, such as Bitbucket, GitHub, GitHubEnterpriseServer, GitLab, and GitLabSelfManaged.</p>
    pub fn set_provider_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.provider_type = input;
        self
    }
    /// <p>The provider type of the source code repository, such as Bitbucket, GitHub, GitHubEnterpriseServer, GitLab, and GitLabSelfManaged.</p>
    pub fn get_provider_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.provider_type
    }
    /// <p>The endpoint URL of the source code repository provider.</p>
    pub fn provider_endpoint(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.provider_endpoint = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The endpoint URL of the source code repository provider.</p>
    pub fn set_provider_endpoint(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.provider_endpoint = input;
        self
    }
    /// <p>The endpoint URL of the source code repository provider.</p>
    pub fn get_provider_endpoint(&self) -> &::std::option::Option<::std::string::String> {
        &self.provider_endpoint
    }
    /// Consumes the builder and constructs a [`DefinitionRepositoryDetails`](crate::types::DefinitionRepositoryDetails).
    pub fn build(self) -> crate::types::DefinitionRepositoryDetails {
        crate::types::DefinitionRepositoryDetails {
            connection_arn: self.connection_arn,
            full_repository_id: self.full_repository_id,
            source_reference: self.source_reference,
            provider_type: self.provider_type,
            provider_endpoint: self.provider_endpoint,
        }
    }
}
