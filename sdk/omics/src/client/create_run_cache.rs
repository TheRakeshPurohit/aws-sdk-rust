// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateRunCache`](crate::operation::create_run_cache::builders::CreateRunCacheFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`cache_behavior(CacheBehavior)`](crate::operation::create_run_cache::builders::CreateRunCacheFluentBuilder::cache_behavior) / [`set_cache_behavior(Option<CacheBehavior>)`](crate::operation::create_run_cache::builders::CreateRunCacheFluentBuilder::set_cache_behavior):<br>required: **false**<br><p>Default cache behavior for runs that use this cache. Supported values are:</p> <p><code>CACHE_ON_FAILURE</code>: Caches task outputs from completed tasks for runs that fail. This setting is useful if you're debugging a workflow that fails after several tasks completed successfully. The subsequent run uses the cache outputs for previously-completed tasks if the task definition, inputs, and container in ECR are identical to the prior run.</p> <p><code>CACHE_ALWAYS</code>: Caches task outputs from completed tasks for all runs. This setting is useful in development mode, but do not use it in a production setting.</p> <p>If you don't specify a value, the default behavior is CACHE_ON_FAILURE. When you start a run that uses this cache, you can override the default cache behavior.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/omics/latest/dev/how-run-cache.html#run-cache-behavior">Run cache behavior</a> in the <i>Amazon Web Services HealthOmics User Guide</i>.</p><br>
    ///   - [`cache_s3_location(impl Into<String>)`](crate::operation::create_run_cache::builders::CreateRunCacheFluentBuilder::cache_s3_location) / [`set_cache_s3_location(Option<String>)`](crate::operation::create_run_cache::builders::CreateRunCacheFluentBuilder::set_cache_s3_location):<br>required: **true**<br><p>Specify the S3 location for storing the cached task outputs. This data must be immediately accessible (not in an archived state).</p><br>
    ///   - [`description(impl Into<String>)`](crate::operation::create_run_cache::builders::CreateRunCacheFluentBuilder::description) / [`set_description(Option<String>)`](crate::operation::create_run_cache::builders::CreateRunCacheFluentBuilder::set_description):<br>required: **false**<br><p>Enter a description of the run cache.</p><br>
    ///   - [`name(impl Into<String>)`](crate::operation::create_run_cache::builders::CreateRunCacheFluentBuilder::name) / [`set_name(Option<String>)`](crate::operation::create_run_cache::builders::CreateRunCacheFluentBuilder::set_name):<br>required: **false**<br><p>Enter a user-friendly name for the run cache.</p><br>
    ///   - [`request_id(impl Into<String>)`](crate::operation::create_run_cache::builders::CreateRunCacheFluentBuilder::request_id) / [`set_request_id(Option<String>)`](crate::operation::create_run_cache::builders::CreateRunCacheFluentBuilder::set_request_id):<br>required: **true**<br><p>A unique request token, to ensure idempotency. If you don't specify a token, Amazon Web Services HealthOmics automatically generates a universally unique identifier (UUID) for the request.</p><br>
    ///   - [`tags(impl Into<String>, impl Into<String>)`](crate::operation::create_run_cache::builders::CreateRunCacheFluentBuilder::tags) / [`set_tags(Option<HashMap::<String, String>>)`](crate::operation::create_run_cache::builders::CreateRunCacheFluentBuilder::set_tags):<br>required: **false**<br><p>Specify one or more tags to associate with this run cache.</p><br>
    ///   - [`cache_bucket_owner_id(impl Into<String>)`](crate::operation::create_run_cache::builders::CreateRunCacheFluentBuilder::cache_bucket_owner_id) / [`set_cache_bucket_owner_id(Option<String>)`](crate::operation::create_run_cache::builders::CreateRunCacheFluentBuilder::set_cache_bucket_owner_id):<br>required: **false**<br><p>The Amazon Web Services account ID of the expected owner of the S3 bucket for the run cache. If not provided, your account ID is set as the owner of the bucket.</p><br>
    /// - On success, responds with [`CreateRunCacheOutput`](crate::operation::create_run_cache::CreateRunCacheOutput) with field(s):
    ///   - [`arn(Option<String>)`](crate::operation::create_run_cache::CreateRunCacheOutput::arn): <p>Unique resource identifier for the run cache.</p>
    ///   - [`id(Option<String>)`](crate::operation::create_run_cache::CreateRunCacheOutput::id): <p>Identifier for the run cache.</p>
    ///   - [`status(Option<RunCacheStatus>)`](crate::operation::create_run_cache::CreateRunCacheOutput::status): <p>Run cache status.</p>
    ///   - [`tags(Option<HashMap::<String, String>>)`](crate::operation::create_run_cache::CreateRunCacheOutput::tags): <p>The tags associated with this run cache.</p>
    /// - On failure, responds with [`SdkError<CreateRunCacheError>`](crate::operation::create_run_cache::CreateRunCacheError)
    pub fn create_run_cache(&self) -> crate::operation::create_run_cache::builders::CreateRunCacheFluentBuilder {
        crate::operation::create_run_cache::builders::CreateRunCacheFluentBuilder::new(self.handle.clone())
    }
}
