// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateSequenceStore`](crate::operation::create_sequence_store::builders::CreateSequenceStoreFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::operation::create_sequence_store::builders::CreateSequenceStoreFluentBuilder::name) / [`set_name(Option<String>)`](crate::operation::create_sequence_store::builders::CreateSequenceStoreFluentBuilder::set_name):<br>required: **true**<br><p>A name for the store.</p><br>
    ///   - [`description(impl Into<String>)`](crate::operation::create_sequence_store::builders::CreateSequenceStoreFluentBuilder::description) / [`set_description(Option<String>)`](crate::operation::create_sequence_store::builders::CreateSequenceStoreFluentBuilder::set_description):<br>required: **false**<br><p>A description for the store.</p><br>
    ///   - [`sse_config(SseConfig)`](crate::operation::create_sequence_store::builders::CreateSequenceStoreFluentBuilder::sse_config) / [`set_sse_config(Option<SseConfig>)`](crate::operation::create_sequence_store::builders::CreateSequenceStoreFluentBuilder::set_sse_config):<br>required: **false**<br><p>Server-side encryption (SSE) settings for the store.</p><br>
    ///   - [`tags(impl Into<String>, impl Into<String>)`](crate::operation::create_sequence_store::builders::CreateSequenceStoreFluentBuilder::tags) / [`set_tags(Option<HashMap::<String, String>>)`](crate::operation::create_sequence_store::builders::CreateSequenceStoreFluentBuilder::set_tags):<br>required: **false**<br><p>Tags for the store. You can configure up to 50 tags.</p><br>
    ///   - [`client_token(impl Into<String>)`](crate::operation::create_sequence_store::builders::CreateSequenceStoreFluentBuilder::client_token) / [`set_client_token(Option<String>)`](crate::operation::create_sequence_store::builders::CreateSequenceStoreFluentBuilder::set_client_token):<br>required: **false**<br><p>An idempotency token used to dedupe retry requests so that duplicate runs are not created.</p><br>
    ///   - [`fallback_location(impl Into<String>)`](crate::operation::create_sequence_store::builders::CreateSequenceStoreFluentBuilder::fallback_location) / [`set_fallback_location(Option<String>)`](crate::operation::create_sequence_store::builders::CreateSequenceStoreFluentBuilder::set_fallback_location):<br>required: **false**<br><p>An S3 location that is used to store files that have failed a direct upload. You can add or change the <code>fallbackLocation</code> after creating a sequence store. This is not required if you are uploading files from a different S3 bucket.</p><br>
    ///   - [`e_tag_algorithm_family(ETagAlgorithmFamily)`](crate::operation::create_sequence_store::builders::CreateSequenceStoreFluentBuilder::e_tag_algorithm_family) / [`set_e_tag_algorithm_family(Option<ETagAlgorithmFamily>)`](crate::operation::create_sequence_store::builders::CreateSequenceStoreFluentBuilder::set_e_tag_algorithm_family):<br>required: **false**<br><p>The ETag algorithm family to use for ingested read sets. The default value is MD5up. For more information on ETags, see <a href="https://docs.aws.amazon.com/omics/latest/dev/etags-and-provenance.html">ETags and data provenance</a> in the <i>Amazon Web Services HealthOmics User Guide</i>.</p><br>
    ///   - [`propagated_set_level_tags(impl Into<String>)`](crate::operation::create_sequence_store::builders::CreateSequenceStoreFluentBuilder::propagated_set_level_tags) / [`set_propagated_set_level_tags(Option<Vec::<String>>)`](crate::operation::create_sequence_store::builders::CreateSequenceStoreFluentBuilder::set_propagated_set_level_tags):<br>required: **false**<br><p>The tags keys to propagate to the S3 objects associated with read sets in the sequence store. These tags can be used as input to add metadata to your read sets.</p><br>
    ///   - [`s3_access_config(S3AccessConfig)`](crate::operation::create_sequence_store::builders::CreateSequenceStoreFluentBuilder::s3_access_config) / [`set_s3_access_config(Option<S3AccessConfig>)`](crate::operation::create_sequence_store::builders::CreateSequenceStoreFluentBuilder::set_s3_access_config):<br>required: **false**<br><p>S3 access configuration parameters. This specifies the parameters needed to access logs stored in S3 buckets. The S3 bucket must be in the same region and account as the sequence store.</p><br>
    /// - On success, responds with [`CreateSequenceStoreOutput`](crate::operation::create_sequence_store::CreateSequenceStoreOutput) with field(s):
    ///   - [`id(String)`](crate::operation::create_sequence_store::CreateSequenceStoreOutput::id): <p>The store's ID.</p>
    ///   - [`arn(String)`](crate::operation::create_sequence_store::CreateSequenceStoreOutput::arn): <p>The store's ARN.</p>
    ///   - [`name(Option<String>)`](crate::operation::create_sequence_store::CreateSequenceStoreOutput::name): <p>The store's name.</p>
    ///   - [`description(Option<String>)`](crate::operation::create_sequence_store::CreateSequenceStoreOutput::description): <p>The store's description.</p>
    ///   - [`sse_config(Option<SseConfig>)`](crate::operation::create_sequence_store::CreateSequenceStoreOutput::sse_config): <p>Server-side encryption (SSE) settings for the store. This contains the KMS key ARN that is used to encrypt read set objects.</p>
    ///   - [`creation_time(DateTime)`](crate::operation::create_sequence_store::CreateSequenceStoreOutput::creation_time): <p>When the store was created.</p>
    ///   - [`fallback_location(Option<String>)`](crate::operation::create_sequence_store::CreateSequenceStoreOutput::fallback_location): <p>An S3 location that is used to store files that have failed a direct upload.</p>
    ///   - [`e_tag_algorithm_family(Option<ETagAlgorithmFamily>)`](crate::operation::create_sequence_store::CreateSequenceStoreOutput::e_tag_algorithm_family): <p>The algorithm family of the ETag.</p>
    ///   - [`status(Option<SequenceStoreStatus>)`](crate::operation::create_sequence_store::CreateSequenceStoreOutput::status): <p>The status of the sequence store.</p>
    ///   - [`status_message(Option<String>)`](crate::operation::create_sequence_store::CreateSequenceStoreOutput::status_message): <p>The status message of the sequence store.</p>
    ///   - [`propagated_set_level_tags(Option<Vec::<String>>)`](crate::operation::create_sequence_store::CreateSequenceStoreOutput::propagated_set_level_tags): <p>The tags keys to propagate to the S3 objects associated with read sets in the sequence store.</p>
    ///   - [`s3_access(Option<SequenceStoreS3Access>)`](crate::operation::create_sequence_store::CreateSequenceStoreOutput::s3_access): <p>The S3 access metadata of the sequence store.</p>
    /// - On failure, responds with [`SdkError<CreateSequenceStoreError>`](crate::operation::create_sequence_store::CreateSequenceStoreError)
    pub fn create_sequence_store(&self) -> crate::operation::create_sequence_store::builders::CreateSequenceStoreFluentBuilder {
        crate::operation::create_sequence_store::builders::CreateSequenceStoreFluentBuilder::new(self.handle.clone())
    }
}
