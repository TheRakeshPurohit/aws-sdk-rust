// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateWorkflow`](crate::operation::create_workflow::builders::CreateWorkflowFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::operation::create_workflow::builders::CreateWorkflowFluentBuilder::name) / [`set_name(Option<String>)`](crate::operation::create_workflow::builders::CreateWorkflowFluentBuilder::set_name):<br>required: **false**<br><p>Name (optional but highly recommended) for the workflow to locate relevant information in the CloudWatch logs and Amazon Web Services HealthOmics console.</p><br>
    ///   - [`description(impl Into<String>)`](crate::operation::create_workflow::builders::CreateWorkflowFluentBuilder::description) / [`set_description(Option<String>)`](crate::operation::create_workflow::builders::CreateWorkflowFluentBuilder::set_description):<br>required: **false**<br><p>A description for the workflow.</p><br>
    ///   - [`engine(WorkflowEngine)`](crate::operation::create_workflow::builders::CreateWorkflowFluentBuilder::engine) / [`set_engine(Option<WorkflowEngine>)`](crate::operation::create_workflow::builders::CreateWorkflowFluentBuilder::set_engine):<br>required: **false**<br><p>The workflow engine for the workflow. This is only required if you have workflow definition files from more than one engine in your zip file. Otherwise, the service can detect the engine automatically from your workflow definition.</p><br>
    ///   - [`definition_zip(Blob)`](crate::operation::create_workflow::builders::CreateWorkflowFluentBuilder::definition_zip) / [`set_definition_zip(Option<Blob>)`](crate::operation::create_workflow::builders::CreateWorkflowFluentBuilder::set_definition_zip):<br>required: **false**<br><p>A ZIP archive containing the main workflow definition file and dependencies that it imports for the workflow. You can use a file with a ://fileb prefix instead of the Base64 string. For more information, see <a href="https://docs.aws.amazon.com/omics/latest/dev/workflow-defn-requirements.html">Workflow definition requirements</a> in the <i>Amazon Web Services HealthOmics User Guide</i>.</p><br>
    ///   - [`definition_uri(impl Into<String>)`](crate::operation::create_workflow::builders::CreateWorkflowFluentBuilder::definition_uri) / [`set_definition_uri(Option<String>)`](crate::operation::create_workflow::builders::CreateWorkflowFluentBuilder::set_definition_uri):<br>required: **false**<br><p>The S3 URI of a definition for the workflow. The S3 bucket must be in the same region as the workflow.</p><br>
    ///   - [`main(impl Into<String>)`](crate::operation::create_workflow::builders::CreateWorkflowFluentBuilder::main) / [`set_main(Option<String>)`](crate::operation::create_workflow::builders::CreateWorkflowFluentBuilder::set_main):<br>required: **false**<br><p>The path of the main definition file for the workflow. This parameter is not required if the ZIP archive contains only one workflow definition file, or if the main definition file is named “main”. An example path is: <code>workflow-definition/main-file.wdl</code>.</p><br>
    ///   - [`parameter_template(impl Into<String>, WorkflowParameter)`](crate::operation::create_workflow::builders::CreateWorkflowFluentBuilder::parameter_template) / [`set_parameter_template(Option<HashMap::<String, WorkflowParameter>>)`](crate::operation::create_workflow::builders::CreateWorkflowFluentBuilder::set_parameter_template):<br>required: **false**<br><p>A parameter template for the workflow. If this field is blank, Amazon Web Services HealthOmics will automatically parse the parameter template values from your workflow definition file. To override these service generated default values, provide a parameter template. To view an example of a parameter template, see <a href="https://docs.aws.amazon.com/omics/latest/dev/parameter-templates.html">Parameter template files</a> in the <i>Amazon Web Services HealthOmics User Guide</i>.</p><br>
    ///   - [`storage_capacity(i32)`](crate::operation::create_workflow::builders::CreateWorkflowFluentBuilder::storage_capacity) / [`set_storage_capacity(Option<i32>)`](crate::operation::create_workflow::builders::CreateWorkflowFluentBuilder::set_storage_capacity):<br>required: **false**<br><p>The default static storage capacity (in gibibytes) for runs that use this workflow or workflow version. The <code>storageCapacity</code> can be overwritten at run time. The storage capacity is not required for runs with a <code>DYNAMIC</code> storage type.</p><br>
    ///   - [`tags(impl Into<String>, impl Into<String>)`](crate::operation::create_workflow::builders::CreateWorkflowFluentBuilder::tags) / [`set_tags(Option<HashMap::<String, String>>)`](crate::operation::create_workflow::builders::CreateWorkflowFluentBuilder::set_tags):<br>required: **false**<br><p>Tags for the workflow. You can define up to 50 tags for the workflow. For more information, see <a href="https://docs.aws.amazon.com/omics/latest/dev/add-a-tag.html">Adding a tag</a> in the <i>Amazon Web Services HealthOmics User Guide</i>.</p><br>
    ///   - [`request_id(impl Into<String>)`](crate::operation::create_workflow::builders::CreateWorkflowFluentBuilder::request_id) / [`set_request_id(Option<String>)`](crate::operation::create_workflow::builders::CreateWorkflowFluentBuilder::set_request_id):<br>required: **true**<br><p>An idempotency token to ensure that duplicate workflows are not created when Amazon Web Services HealthOmics submits retry requests.</p><br>
    ///   - [`accelerators(Accelerators)`](crate::operation::create_workflow::builders::CreateWorkflowFluentBuilder::accelerators) / [`set_accelerators(Option<Accelerators>)`](crate::operation::create_workflow::builders::CreateWorkflowFluentBuilder::set_accelerators):<br>required: **false**<br><p>The computational accelerator specified to run the workflow.</p><br>
    ///   - [`storage_type(StorageType)`](crate::operation::create_workflow::builders::CreateWorkflowFluentBuilder::storage_type) / [`set_storage_type(Option<StorageType>)`](crate::operation::create_workflow::builders::CreateWorkflowFluentBuilder::set_storage_type):<br>required: **false**<br><p>The default storage type for runs that use this workflow. The <code>storageType</code> can be overridden at run time. <code>DYNAMIC</code> storage dynamically scales the storage up or down, based on file system utilization. <code>STATIC</code> storage allocates a fixed amount of storage. For more information about dynamic and static storage types, see <a href="https://docs.aws.amazon.com/omics/latest/dev/workflows-run-types.html">Run storage types</a> in the <i>Amazon Web Services HealthOmics User Guide</i>.</p><br>
    ///   - [`container_registry_map(ContainerRegistryMap)`](crate::operation::create_workflow::builders::CreateWorkflowFluentBuilder::container_registry_map) / [`set_container_registry_map(Option<ContainerRegistryMap>)`](crate::operation::create_workflow::builders::CreateWorkflowFluentBuilder::set_container_registry_map):<br>required: **false**<br><p>(Optional) Use a container registry map to specify mappings between the ECR private repository and one or more upstream registries. For more information, see <a href="https://docs.aws.amazon.com/omics/latest/dev/workflows-ecr.html">Container images</a> in the <i>Amazon Web Services HealthOmics User Guide</i>.</p><br>
    ///   - [`container_registry_map_uri(impl Into<String>)`](crate::operation::create_workflow::builders::CreateWorkflowFluentBuilder::container_registry_map_uri) / [`set_container_registry_map_uri(Option<String>)`](crate::operation::create_workflow::builders::CreateWorkflowFluentBuilder::set_container_registry_map_uri):<br>required: **false**<br><p>(Optional) URI of the S3 location for the registry mapping file.</p><br>
    ///   - [`readme_markdown(impl Into<String>)`](crate::operation::create_workflow::builders::CreateWorkflowFluentBuilder::readme_markdown) / [`set_readme_markdown(Option<String>)`](crate::operation::create_workflow::builders::CreateWorkflowFluentBuilder::set_readme_markdown):<br>required: **false**<br><p>The markdown content for the workflow's README file. This provides documentation and usage information for users of the workflow.</p><br>
    ///   - [`parameter_template_path(impl Into<String>)`](crate::operation::create_workflow::builders::CreateWorkflowFluentBuilder::parameter_template_path) / [`set_parameter_template_path(Option<String>)`](crate::operation::create_workflow::builders::CreateWorkflowFluentBuilder::set_parameter_template_path):<br>required: **false**<br><p>The path to the workflow parameter template JSON file within the repository. This file defines the input parameters for runs that use this workflow. If not specified, the workflow will be created without a parameter template.</p><br>
    ///   - [`readme_path(impl Into<String>)`](crate::operation::create_workflow::builders::CreateWorkflowFluentBuilder::readme_path) / [`set_readme_path(Option<String>)`](crate::operation::create_workflow::builders::CreateWorkflowFluentBuilder::set_readme_path):<br>required: **false**<br><p>The path to the workflow README markdown file within the repository. This file provides documentation and usage information for the workflow. If not specified, the <code>README.md</code> file from the root directory of the repository will be used.</p><br>
    ///   - [`definition_repository(DefinitionRepository)`](crate::operation::create_workflow::builders::CreateWorkflowFluentBuilder::definition_repository) / [`set_definition_repository(Option<DefinitionRepository>)`](crate::operation::create_workflow::builders::CreateWorkflowFluentBuilder::set_definition_repository):<br>required: **false**<br><p>The repository information for the workflow definition. This allows you to source your workflow definition directly from a code repository.</p><br>
    ///   - [`workflow_bucket_owner_id(impl Into<String>)`](crate::operation::create_workflow::builders::CreateWorkflowFluentBuilder::workflow_bucket_owner_id) / [`set_workflow_bucket_owner_id(Option<String>)`](crate::operation::create_workflow::builders::CreateWorkflowFluentBuilder::set_workflow_bucket_owner_id):<br>required: **false**<br><p>The Amazon Web Services account ID of the expected owner of the S3 bucket that contains the workflow definition. If not specified, the service skips the validation.</p><br>
    ///   - [`readme_uri(impl Into<String>)`](crate::operation::create_workflow::builders::CreateWorkflowFluentBuilder::readme_uri) / [`set_readme_uri(Option<String>)`](crate::operation::create_workflow::builders::CreateWorkflowFluentBuilder::set_readme_uri):<br>required: **false**<br><p>The S3 URI of the README file for the workflow. This file provides documentation and usage information for the workflow. Requirements include:</p> <ul>  <li>   <p>The S3 URI must begin with <code>s3://USER-OWNED-BUCKET/</code></p></li>  <li>   <p>The requester must have access to the S3 bucket and object.</p></li>  <li>   <p>The max README content length is 500 KiB.</p></li> </ul><br>
    /// - On success, responds with [`CreateWorkflowOutput`](crate::operation::create_workflow::CreateWorkflowOutput) with field(s):
    ///   - [`arn(Option<String>)`](crate::operation::create_workflow::CreateWorkflowOutput::arn): <p>The workflow's ARN.</p>
    ///   - [`id(Option<String>)`](crate::operation::create_workflow::CreateWorkflowOutput::id): <p>The workflow's ID.</p>
    ///   - [`status(Option<WorkflowStatus>)`](crate::operation::create_workflow::CreateWorkflowOutput::status): <p>The workflow's status.</p>
    ///   - [`tags(Option<HashMap::<String, String>>)`](crate::operation::create_workflow::CreateWorkflowOutput::tags): <p>The workflow's tags.</p>
    ///   - [`uuid(Option<String>)`](crate::operation::create_workflow::CreateWorkflowOutput::uuid): <p>The universally unique identifier (UUID) value for this workflow.</p>
    /// - On failure, responds with [`SdkError<CreateWorkflowError>`](crate::operation::create_workflow::CreateWorkflowError)
    pub fn create_workflow(&self) -> crate::operation::create_workflow::builders::CreateWorkflowFluentBuilder {
        crate::operation::create_workflow::builders::CreateWorkflowFluentBuilder::new(self.handle.clone())
    }
}
