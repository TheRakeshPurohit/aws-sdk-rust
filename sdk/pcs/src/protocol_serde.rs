// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn type_erase_result<O, E>(
    result: ::std::result::Result<O, E>,
) -> ::std::result::Result<
    ::aws_smithy_runtime_api::client::interceptors::context::Output,
    ::aws_smithy_runtime_api::client::orchestrator::OrchestratorError<::aws_smithy_runtime_api::client::interceptors::context::Error>,
>
where
    O: ::std::fmt::Debug + ::std::marker::Send + ::std::marker::Sync + 'static,
    E: ::std::error::Error + std::fmt::Debug + ::std::marker::Send + ::std::marker::Sync + 'static,
{
    result
        .map(|output| ::aws_smithy_runtime_api::client::interceptors::context::Output::erase(output))
        .map_err(|error| ::aws_smithy_runtime_api::client::interceptors::context::Error::erase(error))
        .map_err(::std::convert::Into::into)
}

pub fn parse_http_error_metadata(
    _response_status: u16,
    response_headers: &::aws_smithy_runtime_api::http::Headers,
    response_body: &[u8],
) -> ::std::result::Result<::aws_smithy_types::error::metadata::Builder, ::aws_smithy_json::deserialize::error::DeserializeError> {
    crate::json_errors::parse_error_metadata(response_body, response_headers)
}

pub(crate) mod shape_create_cluster;

pub(crate) mod shape_create_compute_node_group;

pub(crate) mod shape_create_queue;

pub(crate) mod shape_delete_cluster;

pub(crate) mod shape_delete_compute_node_group;

pub(crate) mod shape_delete_queue;

pub(crate) mod shape_get_cluster;

pub(crate) mod shape_get_compute_node_group;

pub(crate) mod shape_get_queue;

pub(crate) mod shape_list_clusters;

pub(crate) mod shape_list_compute_node_groups;

pub(crate) mod shape_list_queues;

pub(crate) mod shape_list_tags_for_resource;

pub(crate) mod shape_register_compute_node_group_instance;

pub(crate) mod shape_tag_resource;

pub(crate) mod shape_untag_resource;

pub(crate) mod shape_update_cluster;

pub(crate) mod shape_update_compute_node_group;

pub(crate) mod shape_update_queue;

pub(crate) fn or_empty_doc(data: &[u8]) -> &[u8] {
    if data.is_empty() {
        b"{}"
    } else {
        data
    }
}

pub(crate) mod shape_access_denied_exception;

pub(crate) mod shape_conflict_exception;

pub(crate) mod shape_create_cluster_input;

pub(crate) mod shape_create_compute_node_group_input;

pub(crate) mod shape_create_queue_input;

pub(crate) mod shape_delete_cluster_input;

pub(crate) mod shape_delete_compute_node_group_input;

pub(crate) mod shape_delete_queue_input;

pub(crate) mod shape_get_cluster_input;

pub(crate) mod shape_get_compute_node_group_input;

pub(crate) mod shape_get_queue_input;

pub(crate) mod shape_internal_server_exception;

pub(crate) mod shape_list_clusters_input;

pub(crate) mod shape_list_compute_node_groups_input;

pub(crate) mod shape_list_queues_input;

pub(crate) mod shape_list_tags_for_resource_input;

pub(crate) mod shape_register_compute_node_group_instance_input;

pub(crate) mod shape_resource_not_found_exception;

pub(crate) mod shape_service_quota_exceeded_exception;

pub(crate) mod shape_tag_resource_input;

pub(crate) mod shape_throttling_exception;

pub(crate) mod shape_untag_resource_input;

pub(crate) mod shape_update_cluster_input;

pub(crate) mod shape_update_compute_node_group_input;

pub(crate) mod shape_update_queue_input;

pub(crate) mod shape_validation_exception;

pub(crate) mod shape_cluster;

pub(crate) mod shape_cluster_list;

pub(crate) mod shape_cluster_slurm_configuration_request;

pub(crate) mod shape_compute_node_group;

pub(crate) mod shape_compute_node_group_configuration;

pub(crate) mod shape_compute_node_group_list;

pub(crate) mod shape_compute_node_group_slurm_configuration_request;

pub(crate) mod shape_custom_launch_template;

pub(crate) mod shape_endpoints;

pub(crate) mod shape_instance_config;

pub(crate) mod shape_networking_request;

pub(crate) mod shape_queue;

pub(crate) mod shape_queue_list;

pub(crate) mod shape_queue_slurm_configuration_request;

pub(crate) mod shape_response_tag_map;

pub(crate) mod shape_scaling_configuration_request;

pub(crate) mod shape_scheduler_request;

pub(crate) mod shape_spot_options;

pub(crate) mod shape_update_cluster_slurm_configuration_request;

pub(crate) mod shape_update_compute_node_group_slurm_configuration_request;

pub(crate) mod shape_update_queue_slurm_configuration_request;

pub(crate) mod shape_validation_exception_field_list;

pub(crate) mod shape_accounting_request;

pub(crate) mod shape_cluster_slurm_configuration;

pub(crate) mod shape_cluster_summary;

pub(crate) mod shape_compute_node_group_configuration_list;

pub(crate) mod shape_compute_node_group_slurm_configuration;

pub(crate) mod shape_compute_node_group_summary;

pub(crate) mod shape_endpoint;

pub(crate) mod shape_error_info_list;

pub(crate) mod shape_instance_list;

pub(crate) mod shape_networking;

pub(crate) mod shape_queue_slurm_configuration;

pub(crate) mod shape_queue_summary;

pub(crate) mod shape_scaling_configuration;

pub(crate) mod shape_scheduler;

pub(crate) mod shape_slurm_custom_setting;

pub(crate) mod shape_subnet_id_list;

pub(crate) mod shape_update_accounting_request;

pub(crate) mod shape_validation_exception_field;

pub(crate) mod shape_accounting;

pub(crate) mod shape_error_info;

pub(crate) mod shape_security_group_id_list;

pub(crate) mod shape_slurm_auth_key;

pub(crate) mod shape_slurm_custom_settings;
