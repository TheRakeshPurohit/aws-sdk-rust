// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies any Amazon DocumentDB Serverless properties or limits that differ between Amazon DocumentDB engine versions. You can test the values of this attribute when deciding which Amazon DocumentDB version to use in a new or upgraded cluster. You can also retrieve the version of an existing cluster and check whether that version supports certain Amazon DocumentDB Serverless features before you attempt to use those features.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ServerlessV2FeaturesSupport {
    /// <p>The minimum number of Amazon DocumentDB capacity units (DCUs) for an instance in an Amazon DocumentDB Serverless cluster. You can specify DCU values in half-step increments, such as 8, 8.5, 9, and so on.</p>
    pub min_capacity: ::std::option::Option<f64>,
    /// <p>The maximum number of Amazon DocumentDB capacity units (DCUs) for an instance in an Amazon DocumentDB Serverless cluster. You can specify DCU values in half-step increments, such as 32, 32.5, 33, and so on.</p>
    pub max_capacity: ::std::option::Option<f64>,
}
impl ServerlessV2FeaturesSupport {
    /// <p>The minimum number of Amazon DocumentDB capacity units (DCUs) for an instance in an Amazon DocumentDB Serverless cluster. You can specify DCU values in half-step increments, such as 8, 8.5, 9, and so on.</p>
    pub fn min_capacity(&self) -> ::std::option::Option<f64> {
        self.min_capacity
    }
    /// <p>The maximum number of Amazon DocumentDB capacity units (DCUs) for an instance in an Amazon DocumentDB Serverless cluster. You can specify DCU values in half-step increments, such as 32, 32.5, 33, and so on.</p>
    pub fn max_capacity(&self) -> ::std::option::Option<f64> {
        self.max_capacity
    }
}
impl ServerlessV2FeaturesSupport {
    /// Creates a new builder-style object to manufacture [`ServerlessV2FeaturesSupport`](crate::types::ServerlessV2FeaturesSupport).
    pub fn builder() -> crate::types::builders::ServerlessV2FeaturesSupportBuilder {
        crate::types::builders::ServerlessV2FeaturesSupportBuilder::default()
    }
}

/// A builder for [`ServerlessV2FeaturesSupport`](crate::types::ServerlessV2FeaturesSupport).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ServerlessV2FeaturesSupportBuilder {
    pub(crate) min_capacity: ::std::option::Option<f64>,
    pub(crate) max_capacity: ::std::option::Option<f64>,
}
impl ServerlessV2FeaturesSupportBuilder {
    /// <p>The minimum number of Amazon DocumentDB capacity units (DCUs) for an instance in an Amazon DocumentDB Serverless cluster. You can specify DCU values in half-step increments, such as 8, 8.5, 9, and so on.</p>
    pub fn min_capacity(mut self, input: f64) -> Self {
        self.min_capacity = ::std::option::Option::Some(input);
        self
    }
    /// <p>The minimum number of Amazon DocumentDB capacity units (DCUs) for an instance in an Amazon DocumentDB Serverless cluster. You can specify DCU values in half-step increments, such as 8, 8.5, 9, and so on.</p>
    pub fn set_min_capacity(mut self, input: ::std::option::Option<f64>) -> Self {
        self.min_capacity = input;
        self
    }
    /// <p>The minimum number of Amazon DocumentDB capacity units (DCUs) for an instance in an Amazon DocumentDB Serverless cluster. You can specify DCU values in half-step increments, such as 8, 8.5, 9, and so on.</p>
    pub fn get_min_capacity(&self) -> &::std::option::Option<f64> {
        &self.min_capacity
    }
    /// <p>The maximum number of Amazon DocumentDB capacity units (DCUs) for an instance in an Amazon DocumentDB Serverless cluster. You can specify DCU values in half-step increments, such as 32, 32.5, 33, and so on.</p>
    pub fn max_capacity(mut self, input: f64) -> Self {
        self.max_capacity = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of Amazon DocumentDB capacity units (DCUs) for an instance in an Amazon DocumentDB Serverless cluster. You can specify DCU values in half-step increments, such as 32, 32.5, 33, and so on.</p>
    pub fn set_max_capacity(mut self, input: ::std::option::Option<f64>) -> Self {
        self.max_capacity = input;
        self
    }
    /// <p>The maximum number of Amazon DocumentDB capacity units (DCUs) for an instance in an Amazon DocumentDB Serverless cluster. You can specify DCU values in half-step increments, such as 32, 32.5, 33, and so on.</p>
    pub fn get_max_capacity(&self) -> &::std::option::Option<f64> {
        &self.max_capacity
    }
    /// Consumes the builder and constructs a [`ServerlessV2FeaturesSupport`](crate::types::ServerlessV2FeaturesSupport).
    pub fn build(self) -> crate::types::ServerlessV2FeaturesSupport {
        crate::types::ServerlessV2FeaturesSupport {
            min_capacity: self.min_capacity,
            max_capacity: self.max_capacity,
        }
    }
}
