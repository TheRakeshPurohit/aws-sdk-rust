// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CancelZonalShift`](crate::operation::cancel_zonal_shift::builders::CancelZonalShiftFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`zonal_shift_id(impl Into<String>)`](crate::operation::cancel_zonal_shift::builders::CancelZonalShiftFluentBuilder::zonal_shift_id) / [`set_zonal_shift_id(Option<String>)`](crate::operation::cancel_zonal_shift::builders::CancelZonalShiftFluentBuilder::set_zonal_shift_id):<br>required: **true**<br><p>The internally-generated identifier of a zonal shift.</p><br>
    /// - On success, responds with [`CancelZonalShiftOutput`](crate::operation::cancel_zonal_shift::CancelZonalShiftOutput) with field(s):
    ///   - [`zonal_shift_id(String)`](crate::operation::cancel_zonal_shift::CancelZonalShiftOutput::zonal_shift_id): <p>The identifier of a zonal shift.</p>
    ///   - [`resource_identifier(String)`](crate::operation::cancel_zonal_shift::CancelZonalShiftOutput::resource_identifier): <p>The identifier for the resource that Amazon Web Services shifts traffic for. The identifier is the Amazon Resource Name (ARN) for the resource.</p> <p>Amazon Application Recovery Controller currently supports enabling the following resources for zonal shift and zonal autoshift:</p> <ul>  <li>   <p><a href="https://docs.aws.amazon.com/r53recovery/latest/dg/arc-zonal-shift.resource-types.ec2-auto-scaling-groups.html">Amazon EC2 Auto Scaling groups</a></p></li>  <li>   <p><a href="https://docs.aws.amazon.com/r53recovery/latest/dg/arc-zonal-shift.resource-types.eks.html">Amazon Elastic Kubernetes Service</a></p></li>  <li>   <p><a href="https://docs.aws.amazon.com/r53recovery/latest/dg/arc-zonal-shift.resource-types.app-load-balancers.html">Application Load Balancer</a></p></li>  <li>   <p><a href="https://docs.aws.amazon.com/r53recovery/latest/dg/arc-zonal-shift.resource-types.network-load-balancers.html">Network Load Balancer</a></p></li> </ul>
    ///   - [`away_from(String)`](crate::operation::cancel_zonal_shift::CancelZonalShiftOutput::away_from): <p>The Availability Zone (for example, <code>use1-az1</code>) that traffic is moved away from for a resource when you start a zonal shift. Until the zonal shift expires or you cancel it, traffic for the resource is instead moved to other Availability Zones in the Amazon Web Services Region.</p>
    ///   - [`expiry_time(DateTime)`](crate::operation::cancel_zonal_shift::CancelZonalShiftOutput::expiry_time): <p>The expiry time (expiration time) for a customer-initiated zonal shift. A zonal shift is temporary and must be set to expire when you start the zonal shift. You can initially set a zonal shift to expire in a maximum of three days (72 hours). However, you can update a zonal shift to set a new expiration at any time.</p> <p>When you start a zonal shift, you specify how long you want it to be active, which ARC converts to an expiry time (expiration time). You can cancel a zonal shift when you're ready to restore traffic to the Availability Zone, or just wait for it to expire. Or you can update the zonal shift to specify another length of time to expire in.</p>
    ///   - [`start_time(DateTime)`](crate::operation::cancel_zonal_shift::CancelZonalShiftOutput::start_time): <p>The time (UTC) when the zonal shift starts.</p>
    ///   - [`status(ZonalShiftStatus)`](crate::operation::cancel_zonal_shift::CancelZonalShiftOutput::status): <p>A status for a zonal shift.</p> <p>The <code>Status</code> for a zonal shift can have one of the following values:</p> <ul>  <li>   <p><b>ACTIVE:</b> The zonal shift has been started and is active.</p></li>  <li>   <p><b>EXPIRED:</b> The zonal shift has expired (the expiry time was exceeded).</p></li>  <li>   <p><b>CANCELED:</b> The zonal shift was canceled.</p></li> </ul>
    ///   - [`comment(String)`](crate::operation::cancel_zonal_shift::CancelZonalShiftOutput::comment): <p>A comment that you enter about the zonal shift. Only the latest comment is retained; no comment history is maintained. A new comment overwrites any existing comment string.</p>
    /// - On failure, responds with [`SdkError<CancelZonalShiftError>`](crate::operation::cancel_zonal_shift::CancelZonalShiftError)
    pub fn cancel_zonal_shift(&self) -> crate::operation::cancel_zonal_shift::builders::CancelZonalShiftFluentBuilder {
        crate::operation::cancel_zonal_shift::builders::CancelZonalShiftFluentBuilder::new(self.handle.clone())
    }
}
