// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about a scheduled backup plan execution, including the execution time, rule type, and associated rule identifier.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ScheduledPlanExecutionMember {
    /// <p>The timestamp when the backup is scheduled to run, in Unix format and Coordinated Universal Time (UTC). The value is accurate to milliseconds.</p>
    pub execution_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The unique identifier of the backup rule that will execute at the scheduled time.</p>
    pub rule_id: ::std::option::Option<::std::string::String>,
    /// <p>The type of backup rule execution. Valid values are <code>CONTINUOUS</code> (point-in-time recovery), <code>SNAPSHOTS</code> (snapshot backups), or <code>CONTINUOUS_AND_SNAPSHOTS</code> (both types combined).</p>
    pub rule_execution_type: ::std::option::Option<crate::types::RuleExecutionType>,
}
impl ScheduledPlanExecutionMember {
    /// <p>The timestamp when the backup is scheduled to run, in Unix format and Coordinated Universal Time (UTC). The value is accurate to milliseconds.</p>
    pub fn execution_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.execution_time.as_ref()
    }
    /// <p>The unique identifier of the backup rule that will execute at the scheduled time.</p>
    pub fn rule_id(&self) -> ::std::option::Option<&str> {
        self.rule_id.as_deref()
    }
    /// <p>The type of backup rule execution. Valid values are <code>CONTINUOUS</code> (point-in-time recovery), <code>SNAPSHOTS</code> (snapshot backups), or <code>CONTINUOUS_AND_SNAPSHOTS</code> (both types combined).</p>
    pub fn rule_execution_type(&self) -> ::std::option::Option<&crate::types::RuleExecutionType> {
        self.rule_execution_type.as_ref()
    }
}
impl ScheduledPlanExecutionMember {
    /// Creates a new builder-style object to manufacture [`ScheduledPlanExecutionMember`](crate::types::ScheduledPlanExecutionMember).
    pub fn builder() -> crate::types::builders::ScheduledPlanExecutionMemberBuilder {
        crate::types::builders::ScheduledPlanExecutionMemberBuilder::default()
    }
}

/// A builder for [`ScheduledPlanExecutionMember`](crate::types::ScheduledPlanExecutionMember).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ScheduledPlanExecutionMemberBuilder {
    pub(crate) execution_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) rule_id: ::std::option::Option<::std::string::String>,
    pub(crate) rule_execution_type: ::std::option::Option<crate::types::RuleExecutionType>,
}
impl ScheduledPlanExecutionMemberBuilder {
    /// <p>The timestamp when the backup is scheduled to run, in Unix format and Coordinated Universal Time (UTC). The value is accurate to milliseconds.</p>
    pub fn execution_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.execution_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the backup is scheduled to run, in Unix format and Coordinated Universal Time (UTC). The value is accurate to milliseconds.</p>
    pub fn set_execution_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.execution_time = input;
        self
    }
    /// <p>The timestamp when the backup is scheduled to run, in Unix format and Coordinated Universal Time (UTC). The value is accurate to milliseconds.</p>
    pub fn get_execution_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.execution_time
    }
    /// <p>The unique identifier of the backup rule that will execute at the scheduled time.</p>
    pub fn rule_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.rule_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the backup rule that will execute at the scheduled time.</p>
    pub fn set_rule_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.rule_id = input;
        self
    }
    /// <p>The unique identifier of the backup rule that will execute at the scheduled time.</p>
    pub fn get_rule_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.rule_id
    }
    /// <p>The type of backup rule execution. Valid values are <code>CONTINUOUS</code> (point-in-time recovery), <code>SNAPSHOTS</code> (snapshot backups), or <code>CONTINUOUS_AND_SNAPSHOTS</code> (both types combined).</p>
    pub fn rule_execution_type(mut self, input: crate::types::RuleExecutionType) -> Self {
        self.rule_execution_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of backup rule execution. Valid values are <code>CONTINUOUS</code> (point-in-time recovery), <code>SNAPSHOTS</code> (snapshot backups), or <code>CONTINUOUS_AND_SNAPSHOTS</code> (both types combined).</p>
    pub fn set_rule_execution_type(mut self, input: ::std::option::Option<crate::types::RuleExecutionType>) -> Self {
        self.rule_execution_type = input;
        self
    }
    /// <p>The type of backup rule execution. Valid values are <code>CONTINUOUS</code> (point-in-time recovery), <code>SNAPSHOTS</code> (snapshot backups), or <code>CONTINUOUS_AND_SNAPSHOTS</code> (both types combined).</p>
    pub fn get_rule_execution_type(&self) -> &::std::option::Option<crate::types::RuleExecutionType> {
        &self.rule_execution_type
    }
    /// Consumes the builder and constructs a [`ScheduledPlanExecutionMember`](crate::types::ScheduledPlanExecutionMember).
    pub fn build(self) -> crate::types::ScheduledPlanExecutionMember {
        crate::types::ScheduledPlanExecutionMember {
            execution_time: self.execution_time,
            rule_id: self.rule_id,
            rule_execution_type: self.rule_execution_type,
        }
    }
}
