// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ListDashboards`](crate::operation::list_dashboards::builders::ListDashboardsFluentBuilder) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::operation::list_dashboards::builders::ListDashboardsFluentBuilder::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`max_results(i32)`](crate::operation::list_dashboards::builders::ListDashboardsFluentBuilder::max_results) / [`set_max_results(Option<i32>)`](crate::operation::list_dashboards::builders::ListDashboardsFluentBuilder::set_max_results):<br>required: **false**<br><p>The maximum number of results to return in a single call. The default value is 20.</p><br>
    ///   - [`next_token(impl Into<String>)`](crate::operation::list_dashboards::builders::ListDashboardsFluentBuilder::next_token) / [`set_next_token(Option<String>)`](crate::operation::list_dashboards::builders::ListDashboardsFluentBuilder::set_next_token):<br>required: **false**<br><p>The token for the next page of results. Use the value returned in the previous response.</p><br>
    /// - On success, responds with [`ListDashboardsOutput`](crate::operation::list_dashboards::ListDashboardsOutput) with field(s):
    ///   - [`dashboards(Vec::<DashboardReference>)`](crate::operation::list_dashboards::ListDashboardsOutput::dashboards): <p>An array of dashboard references, containing basic information about each dashboard.</p>
    ///   - [`next_token(Option<String>)`](crate::operation::list_dashboards::ListDashboardsOutput::next_token): <p>The token to use to retrieve the next page of results. Not returned if there are no more results to retrieve.</p>
    /// - On failure, responds with [`SdkError<ListDashboardsError>`](crate::operation::list_dashboards::ListDashboardsError)
    pub fn list_dashboards(&self) -> crate::operation::list_dashboards::builders::ListDashboardsFluentBuilder {
        crate::operation::list_dashboards::builders::ListDashboardsFluentBuilder::new(self.handle.clone())
    }
}
