// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines the visual representation settings for widget data, including the visualization type, styling options, and display preferences for different metric types.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GraphDisplayConfig {
    /// <p>The type of visualization to use for the data.</p>
    pub visual_type: crate::types::VisualType,
}
impl GraphDisplayConfig {
    /// <p>The type of visualization to use for the data.</p>
    pub fn visual_type(&self) -> &crate::types::VisualType {
        &self.visual_type
    }
}
impl GraphDisplayConfig {
    /// Creates a new builder-style object to manufacture [`GraphDisplayConfig`](crate::types::GraphDisplayConfig).
    pub fn builder() -> crate::types::builders::GraphDisplayConfigBuilder {
        crate::types::builders::GraphDisplayConfigBuilder::default()
    }
}

/// A builder for [`GraphDisplayConfig`](crate::types::GraphDisplayConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GraphDisplayConfigBuilder {
    pub(crate) visual_type: ::std::option::Option<crate::types::VisualType>,
}
impl GraphDisplayConfigBuilder {
    /// <p>The type of visualization to use for the data.</p>
    /// This field is required.
    pub fn visual_type(mut self, input: crate::types::VisualType) -> Self {
        self.visual_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of visualization to use for the data.</p>
    pub fn set_visual_type(mut self, input: ::std::option::Option<crate::types::VisualType>) -> Self {
        self.visual_type = input;
        self
    }
    /// <p>The type of visualization to use for the data.</p>
    pub fn get_visual_type(&self) -> &::std::option::Option<crate::types::VisualType> {
        &self.visual_type
    }
    /// Consumes the builder and constructs a [`GraphDisplayConfig`](crate::types::GraphDisplayConfig).
    /// This method will fail if any of the following fields are not set:
    /// - [`visual_type`](crate::types::builders::GraphDisplayConfigBuilder::visual_type)
    pub fn build(self) -> ::std::result::Result<crate::types::GraphDisplayConfig, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::GraphDisplayConfig {
            visual_type: self.visual_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "visual_type",
                    "visual_type was not specified but it is required when building GraphDisplayConfig",
                )
            })?,
        })
    }
}
