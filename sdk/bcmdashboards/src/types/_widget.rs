// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A configurable visualization component within a dashboard that displays specific cost and usage metrics. Each widget can show data as charts or tables and includes settings for data querying, filtering, and visual presentation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Widget {
    /// <p>The title of the widget.</p>
    pub title: ::std::string::String,
    /// <p>A description of the widget's purpose or the data it displays.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The width of the widget in column spans. The dashboard layout consists of a grid system.</p>
    pub width: i32,
    /// <p>The height of the widget in row spans. The dashboard layout consists of a grid system.</p>
    pub height: i32,
    /// <p>Specifies the starting column position of the widget in the dashboard's grid layout. Used to control widget placement.</p>
    pub horizontal_offset: i32,
    /// <p>An array of configurations that define the data queries and display settings for the widget.</p>
    pub configs: ::std::vec::Vec<crate::types::WidgetConfig>,
}
impl Widget {
    /// <p>The title of the widget.</p>
    pub fn title(&self) -> &str {
        use std::ops::Deref;
        self.title.deref()
    }
    /// <p>A description of the widget's purpose or the data it displays.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The width of the widget in column spans. The dashboard layout consists of a grid system.</p>
    pub fn width(&self) -> i32 {
        self.width
    }
    /// <p>The height of the widget in row spans. The dashboard layout consists of a grid system.</p>
    pub fn height(&self) -> i32 {
        self.height
    }
    /// <p>Specifies the starting column position of the widget in the dashboard's grid layout. Used to control widget placement.</p>
    pub fn horizontal_offset(&self) -> i32 {
        self.horizontal_offset
    }
    /// <p>An array of configurations that define the data queries and display settings for the widget.</p>
    pub fn configs(&self) -> &[crate::types::WidgetConfig] {
        use std::ops::Deref;
        self.configs.deref()
    }
}
impl Widget {
    /// Creates a new builder-style object to manufacture [`Widget`](crate::types::Widget).
    pub fn builder() -> crate::types::builders::WidgetBuilder {
        crate::types::builders::WidgetBuilder::default()
    }
}

/// A builder for [`Widget`](crate::types::Widget).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct WidgetBuilder {
    pub(crate) title: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) width: ::std::option::Option<i32>,
    pub(crate) height: ::std::option::Option<i32>,
    pub(crate) horizontal_offset: ::std::option::Option<i32>,
    pub(crate) configs: ::std::option::Option<::std::vec::Vec<crate::types::WidgetConfig>>,
}
impl WidgetBuilder {
    /// <p>The title of the widget.</p>
    /// This field is required.
    pub fn title(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.title = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The title of the widget.</p>
    pub fn set_title(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.title = input;
        self
    }
    /// <p>The title of the widget.</p>
    pub fn get_title(&self) -> &::std::option::Option<::std::string::String> {
        &self.title
    }
    /// <p>A description of the widget's purpose or the data it displays.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of the widget's purpose or the data it displays.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description of the widget's purpose or the data it displays.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The width of the widget in column spans. The dashboard layout consists of a grid system.</p>
    pub fn width(mut self, input: i32) -> Self {
        self.width = ::std::option::Option::Some(input);
        self
    }
    /// <p>The width of the widget in column spans. The dashboard layout consists of a grid system.</p>
    pub fn set_width(mut self, input: ::std::option::Option<i32>) -> Self {
        self.width = input;
        self
    }
    /// <p>The width of the widget in column spans. The dashboard layout consists of a grid system.</p>
    pub fn get_width(&self) -> &::std::option::Option<i32> {
        &self.width
    }
    /// <p>The height of the widget in row spans. The dashboard layout consists of a grid system.</p>
    pub fn height(mut self, input: i32) -> Self {
        self.height = ::std::option::Option::Some(input);
        self
    }
    /// <p>The height of the widget in row spans. The dashboard layout consists of a grid system.</p>
    pub fn set_height(mut self, input: ::std::option::Option<i32>) -> Self {
        self.height = input;
        self
    }
    /// <p>The height of the widget in row spans. The dashboard layout consists of a grid system.</p>
    pub fn get_height(&self) -> &::std::option::Option<i32> {
        &self.height
    }
    /// <p>Specifies the starting column position of the widget in the dashboard's grid layout. Used to control widget placement.</p>
    pub fn horizontal_offset(mut self, input: i32) -> Self {
        self.horizontal_offset = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the starting column position of the widget in the dashboard's grid layout. Used to control widget placement.</p>
    pub fn set_horizontal_offset(mut self, input: ::std::option::Option<i32>) -> Self {
        self.horizontal_offset = input;
        self
    }
    /// <p>Specifies the starting column position of the widget in the dashboard's grid layout. Used to control widget placement.</p>
    pub fn get_horizontal_offset(&self) -> &::std::option::Option<i32> {
        &self.horizontal_offset
    }
    /// Appends an item to `configs`.
    ///
    /// To override the contents of this collection use [`set_configs`](Self::set_configs).
    ///
    /// <p>An array of configurations that define the data queries and display settings for the widget.</p>
    pub fn configs(mut self, input: crate::types::WidgetConfig) -> Self {
        let mut v = self.configs.unwrap_or_default();
        v.push(input);
        self.configs = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of configurations that define the data queries and display settings for the widget.</p>
    pub fn set_configs(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::WidgetConfig>>) -> Self {
        self.configs = input;
        self
    }
    /// <p>An array of configurations that define the data queries and display settings for the widget.</p>
    pub fn get_configs(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::WidgetConfig>> {
        &self.configs
    }
    /// Consumes the builder and constructs a [`Widget`](crate::types::Widget).
    /// This method will fail if any of the following fields are not set:
    /// - [`title`](crate::types::builders::WidgetBuilder::title)
    /// - [`configs`](crate::types::builders::WidgetBuilder::configs)
    pub fn build(self) -> ::std::result::Result<crate::types::Widget, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::Widget {
            title: self.title.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "title",
                    "title was not specified but it is required when building Widget",
                )
            })?,
            description: self.description,
            width: self.width.unwrap_or(4),
            height: self.height.unwrap_or(7),
            horizontal_offset: self.horizontal_offset.unwrap_or_default(),
            configs: self.configs.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "configs",
                    "configs was not specified but it is required when building Widget",
                )
            })?,
        })
    }
}
