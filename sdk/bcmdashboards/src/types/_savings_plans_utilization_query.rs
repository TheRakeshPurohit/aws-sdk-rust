// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines the parameters for querying Savings Plans utilization data, including time granularity and sorting preferences.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SavingsPlansUtilizationQuery {
    /// <p>Defines a time period with explicit start and end times for data queries.</p>
    pub time_range: ::std::option::Option<crate::types::DateTimeRange>,
    /// <p>The time granularity of the retrieved data: HOURLY, DAILY, or MONTHLY.</p>
    pub granularity: ::std::option::Option<crate::types::Granularity>,
    /// <p>Defines complex filtering conditions using logical operators (<code>AND</code>, <code>OR</code>, <code>NOT</code>) and various filter types.</p>
    pub filter: ::std::option::Option<crate::types::Expression>,
}
impl SavingsPlansUtilizationQuery {
    /// <p>Defines a time period with explicit start and end times for data queries.</p>
    pub fn time_range(&self) -> ::std::option::Option<&crate::types::DateTimeRange> {
        self.time_range.as_ref()
    }
    /// <p>The time granularity of the retrieved data: HOURLY, DAILY, or MONTHLY.</p>
    pub fn granularity(&self) -> ::std::option::Option<&crate::types::Granularity> {
        self.granularity.as_ref()
    }
    /// <p>Defines complex filtering conditions using logical operators (<code>AND</code>, <code>OR</code>, <code>NOT</code>) and various filter types.</p>
    pub fn filter(&self) -> ::std::option::Option<&crate::types::Expression> {
        self.filter.as_ref()
    }
}
impl SavingsPlansUtilizationQuery {
    /// Creates a new builder-style object to manufacture [`SavingsPlansUtilizationQuery`](crate::types::SavingsPlansUtilizationQuery).
    pub fn builder() -> crate::types::builders::SavingsPlansUtilizationQueryBuilder {
        crate::types::builders::SavingsPlansUtilizationQueryBuilder::default()
    }
}

/// A builder for [`SavingsPlansUtilizationQuery`](crate::types::SavingsPlansUtilizationQuery).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SavingsPlansUtilizationQueryBuilder {
    pub(crate) time_range: ::std::option::Option<crate::types::DateTimeRange>,
    pub(crate) granularity: ::std::option::Option<crate::types::Granularity>,
    pub(crate) filter: ::std::option::Option<crate::types::Expression>,
}
impl SavingsPlansUtilizationQueryBuilder {
    /// <p>Defines a time period with explicit start and end times for data queries.</p>
    /// This field is required.
    pub fn time_range(mut self, input: crate::types::DateTimeRange) -> Self {
        self.time_range = ::std::option::Option::Some(input);
        self
    }
    /// <p>Defines a time period with explicit start and end times for data queries.</p>
    pub fn set_time_range(mut self, input: ::std::option::Option<crate::types::DateTimeRange>) -> Self {
        self.time_range = input;
        self
    }
    /// <p>Defines a time period with explicit start and end times for data queries.</p>
    pub fn get_time_range(&self) -> &::std::option::Option<crate::types::DateTimeRange> {
        &self.time_range
    }
    /// <p>The time granularity of the retrieved data: HOURLY, DAILY, or MONTHLY.</p>
    pub fn granularity(mut self, input: crate::types::Granularity) -> Self {
        self.granularity = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time granularity of the retrieved data: HOURLY, DAILY, or MONTHLY.</p>
    pub fn set_granularity(mut self, input: ::std::option::Option<crate::types::Granularity>) -> Self {
        self.granularity = input;
        self
    }
    /// <p>The time granularity of the retrieved data: HOURLY, DAILY, or MONTHLY.</p>
    pub fn get_granularity(&self) -> &::std::option::Option<crate::types::Granularity> {
        &self.granularity
    }
    /// <p>Defines complex filtering conditions using logical operators (<code>AND</code>, <code>OR</code>, <code>NOT</code>) and various filter types.</p>
    pub fn filter(mut self, input: crate::types::Expression) -> Self {
        self.filter = ::std::option::Option::Some(input);
        self
    }
    /// <p>Defines complex filtering conditions using logical operators (<code>AND</code>, <code>OR</code>, <code>NOT</code>) and various filter types.</p>
    pub fn set_filter(mut self, input: ::std::option::Option<crate::types::Expression>) -> Self {
        self.filter = input;
        self
    }
    /// <p>Defines complex filtering conditions using logical operators (<code>AND</code>, <code>OR</code>, <code>NOT</code>) and various filter types.</p>
    pub fn get_filter(&self) -> &::std::option::Option<crate::types::Expression> {
        &self.filter
    }
    /// Consumes the builder and constructs a [`SavingsPlansUtilizationQuery`](crate::types::SavingsPlansUtilizationQuery).
    pub fn build(self) -> crate::types::SavingsPlansUtilizationQuery {
        crate::types::SavingsPlansUtilizationQuery {
            time_range: self.time_range,
            granularity: self.granularity,
            filter: self.filter,
        }
    }
}
