// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies how to group cost and usage data.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GroupDefinition {
    /// <p>The key to use for grouping cost and usage data.</p>
    pub key: ::std::string::String,
    /// <p>The type of grouping to apply.</p>
    pub r#type: crate::types::GroupDefinitionType,
}
impl GroupDefinition {
    /// <p>The key to use for grouping cost and usage data.</p>
    pub fn key(&self) -> &str {
        use std::ops::Deref;
        self.key.deref()
    }
    /// <p>The type of grouping to apply.</p>
    pub fn r#type(&self) -> &crate::types::GroupDefinitionType {
        &self.r#type
    }
}
impl GroupDefinition {
    /// Creates a new builder-style object to manufacture [`GroupDefinition`](crate::types::GroupDefinition).
    pub fn builder() -> crate::types::builders::GroupDefinitionBuilder {
        crate::types::builders::GroupDefinitionBuilder::default()
    }
}

/// A builder for [`GroupDefinition`](crate::types::GroupDefinition).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GroupDefinitionBuilder {
    pub(crate) key: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::GroupDefinitionType>,
}
impl GroupDefinitionBuilder {
    /// <p>The key to use for grouping cost and usage data.</p>
    /// This field is required.
    pub fn key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The key to use for grouping cost and usage data.</p>
    pub fn set_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.key = input;
        self
    }
    /// <p>The key to use for grouping cost and usage data.</p>
    pub fn get_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.key
    }
    /// <p>The type of grouping to apply.</p>
    pub fn r#type(mut self, input: crate::types::GroupDefinitionType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of grouping to apply.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::GroupDefinitionType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of grouping to apply.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::GroupDefinitionType> {
        &self.r#type
    }
    /// Consumes the builder and constructs a [`GroupDefinition`](crate::types::GroupDefinition).
    /// This method will fail if any of the following fields are not set:
    /// - [`key`](crate::types::builders::GroupDefinitionBuilder::key)
    pub fn build(self) -> ::std::result::Result<crate::types::GroupDefinition, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::GroupDefinition {
            key: self.key.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "key",
                    "key was not specified but it is required when building GroupDefinition",
                )
            })?,
            r#type: self.r#type.unwrap_or(
                "DIMENSION"
                    .parse::<crate::types::GroupDefinitionType>()
                    .expect("static value validated to member"),
            ),
        })
    }
}
