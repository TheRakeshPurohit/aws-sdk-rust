// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines a time period with explicit start and end times for data queries.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DateTimeRange {
    /// <p>The start time of the date range for querying data.</p>
    pub start_time: ::std::option::Option<crate::types::DateTimeValue>,
    /// <p>The end time of the date range for querying data.</p>
    pub end_time: ::std::option::Option<crate::types::DateTimeValue>,
}
impl DateTimeRange {
    /// <p>The start time of the date range for querying data.</p>
    pub fn start_time(&self) -> ::std::option::Option<&crate::types::DateTimeValue> {
        self.start_time.as_ref()
    }
    /// <p>The end time of the date range for querying data.</p>
    pub fn end_time(&self) -> ::std::option::Option<&crate::types::DateTimeValue> {
        self.end_time.as_ref()
    }
}
impl DateTimeRange {
    /// Creates a new builder-style object to manufacture [`DateTimeRange`](crate::types::DateTimeRange).
    pub fn builder() -> crate::types::builders::DateTimeRangeBuilder {
        crate::types::builders::DateTimeRangeBuilder::default()
    }
}

/// A builder for [`DateTimeRange`](crate::types::DateTimeRange).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DateTimeRangeBuilder {
    pub(crate) start_time: ::std::option::Option<crate::types::DateTimeValue>,
    pub(crate) end_time: ::std::option::Option<crate::types::DateTimeValue>,
}
impl DateTimeRangeBuilder {
    /// <p>The start time of the date range for querying data.</p>
    /// This field is required.
    pub fn start_time(mut self, input: crate::types::DateTimeValue) -> Self {
        self.start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The start time of the date range for querying data.</p>
    pub fn set_start_time(mut self, input: ::std::option::Option<crate::types::DateTimeValue>) -> Self {
        self.start_time = input;
        self
    }
    /// <p>The start time of the date range for querying data.</p>
    pub fn get_start_time(&self) -> &::std::option::Option<crate::types::DateTimeValue> {
        &self.start_time
    }
    /// <p>The end time of the date range for querying data.</p>
    /// This field is required.
    pub fn end_time(mut self, input: crate::types::DateTimeValue) -> Self {
        self.end_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The end time of the date range for querying data.</p>
    pub fn set_end_time(mut self, input: ::std::option::Option<crate::types::DateTimeValue>) -> Self {
        self.end_time = input;
        self
    }
    /// <p>The end time of the date range for querying data.</p>
    pub fn get_end_time(&self) -> &::std::option::Option<crate::types::DateTimeValue> {
        &self.end_time
    }
    /// Consumes the builder and constructs a [`DateTimeRange`](crate::types::DateTimeRange).
    pub fn build(self) -> crate::types::DateTimeRange {
        crate::types::DateTimeRange {
            start_time: self.start_time,
            end_time: self.end_time,
        }
    }
}
