// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines the data retrieval parameters for a widget.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum QueryParameters {
    /// <p>The parameters for querying cost and usage data, including metrics, time range, granularity, grouping dimensions, and filters.</p>
    CostAndUsage(crate::types::CostAndUsageQuery),
    /// <p>The parameters for querying Reserved Instance coverage data, showing how much of your eligible instance usage is covered by Reserved Instances.</p>
    ReservationCoverage(crate::types::ReservationCoverageQuery),
    /// <p>The parameters for querying Reserved Instance utilization data, showing how effectively your Reserved Instances are being used.</p>
    ReservationUtilization(crate::types::ReservationUtilizationQuery),
    /// <p>The parameters for querying Savings Plans coverage data, showing how much of your eligible compute usage is covered by Savings Plans.</p>
    SavingsPlansCoverage(crate::types::SavingsPlansCoverageQuery),
    /// <p>The parameters for querying Savings Plans utilization data, showing how effectively your Savings Plans are being used.</p>
    SavingsPlansUtilization(crate::types::SavingsPlansUtilizationQuery),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl QueryParameters {
    /// Tries to convert the enum instance into [`CostAndUsage`](crate::types::QueryParameters::CostAndUsage), extracting the inner [`CostAndUsageQuery`](crate::types::CostAndUsageQuery).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_cost_and_usage(&self) -> ::std::result::Result<&crate::types::CostAndUsageQuery, &Self> {
        if let QueryParameters::CostAndUsage(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`CostAndUsage`](crate::types::QueryParameters::CostAndUsage).
    pub fn is_cost_and_usage(&self) -> bool {
        self.as_cost_and_usage().is_ok()
    }
    /// Tries to convert the enum instance into [`ReservationCoverage`](crate::types::QueryParameters::ReservationCoverage), extracting the inner [`ReservationCoverageQuery`](crate::types::ReservationCoverageQuery).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_reservation_coverage(&self) -> ::std::result::Result<&crate::types::ReservationCoverageQuery, &Self> {
        if let QueryParameters::ReservationCoverage(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`ReservationCoverage`](crate::types::QueryParameters::ReservationCoverage).
    pub fn is_reservation_coverage(&self) -> bool {
        self.as_reservation_coverage().is_ok()
    }
    /// Tries to convert the enum instance into [`ReservationUtilization`](crate::types::QueryParameters::ReservationUtilization), extracting the inner [`ReservationUtilizationQuery`](crate::types::ReservationUtilizationQuery).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_reservation_utilization(&self) -> ::std::result::Result<&crate::types::ReservationUtilizationQuery, &Self> {
        if let QueryParameters::ReservationUtilization(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`ReservationUtilization`](crate::types::QueryParameters::ReservationUtilization).
    pub fn is_reservation_utilization(&self) -> bool {
        self.as_reservation_utilization().is_ok()
    }
    /// Tries to convert the enum instance into [`SavingsPlansCoverage`](crate::types::QueryParameters::SavingsPlansCoverage), extracting the inner [`SavingsPlansCoverageQuery`](crate::types::SavingsPlansCoverageQuery).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_savings_plans_coverage(&self) -> ::std::result::Result<&crate::types::SavingsPlansCoverageQuery, &Self> {
        if let QueryParameters::SavingsPlansCoverage(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`SavingsPlansCoverage`](crate::types::QueryParameters::SavingsPlansCoverage).
    pub fn is_savings_plans_coverage(&self) -> bool {
        self.as_savings_plans_coverage().is_ok()
    }
    /// Tries to convert the enum instance into [`SavingsPlansUtilization`](crate::types::QueryParameters::SavingsPlansUtilization), extracting the inner [`SavingsPlansUtilizationQuery`](crate::types::SavingsPlansUtilizationQuery).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_savings_plans_utilization(&self) -> ::std::result::Result<&crate::types::SavingsPlansUtilizationQuery, &Self> {
        if let QueryParameters::SavingsPlansUtilization(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`SavingsPlansUtilization`](crate::types::QueryParameters::SavingsPlansUtilization).
    pub fn is_savings_plans_utilization(&self) -> bool {
        self.as_savings_plans_utilization().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
