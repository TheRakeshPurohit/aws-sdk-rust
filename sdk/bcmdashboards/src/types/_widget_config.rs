// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines the complete configuration for a widget, including data retrieval settings and visualization preferences.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct WidgetConfig {
    /// <p>The parameters that define what data the widget should retrieve and how it should be filtered or grouped.</p>
    pub query_parameters: ::std::option::Option<crate::types::QueryParameters>,
    /// <p>The configuration that determines how the retrieved data should be visualized in the widget.</p>
    pub display_config: ::std::option::Option<crate::types::DisplayConfig>,
}
impl WidgetConfig {
    /// <p>The parameters that define what data the widget should retrieve and how it should be filtered or grouped.</p>
    pub fn query_parameters(&self) -> ::std::option::Option<&crate::types::QueryParameters> {
        self.query_parameters.as_ref()
    }
    /// <p>The configuration that determines how the retrieved data should be visualized in the widget.</p>
    pub fn display_config(&self) -> ::std::option::Option<&crate::types::DisplayConfig> {
        self.display_config.as_ref()
    }
}
impl WidgetConfig {
    /// Creates a new builder-style object to manufacture [`WidgetConfig`](crate::types::WidgetConfig).
    pub fn builder() -> crate::types::builders::WidgetConfigBuilder {
        crate::types::builders::WidgetConfigBuilder::default()
    }
}

/// A builder for [`WidgetConfig`](crate::types::WidgetConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct WidgetConfigBuilder {
    pub(crate) query_parameters: ::std::option::Option<crate::types::QueryParameters>,
    pub(crate) display_config: ::std::option::Option<crate::types::DisplayConfig>,
}
impl WidgetConfigBuilder {
    /// <p>The parameters that define what data the widget should retrieve and how it should be filtered or grouped.</p>
    /// This field is required.
    pub fn query_parameters(mut self, input: crate::types::QueryParameters) -> Self {
        self.query_parameters = ::std::option::Option::Some(input);
        self
    }
    /// <p>The parameters that define what data the widget should retrieve and how it should be filtered or grouped.</p>
    pub fn set_query_parameters(mut self, input: ::std::option::Option<crate::types::QueryParameters>) -> Self {
        self.query_parameters = input;
        self
    }
    /// <p>The parameters that define what data the widget should retrieve and how it should be filtered or grouped.</p>
    pub fn get_query_parameters(&self) -> &::std::option::Option<crate::types::QueryParameters> {
        &self.query_parameters
    }
    /// <p>The configuration that determines how the retrieved data should be visualized in the widget.</p>
    /// This field is required.
    pub fn display_config(mut self, input: crate::types::DisplayConfig) -> Self {
        self.display_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration that determines how the retrieved data should be visualized in the widget.</p>
    pub fn set_display_config(mut self, input: ::std::option::Option<crate::types::DisplayConfig>) -> Self {
        self.display_config = input;
        self
    }
    /// <p>The configuration that determines how the retrieved data should be visualized in the widget.</p>
    pub fn get_display_config(&self) -> &::std::option::Option<crate::types::DisplayConfig> {
        &self.display_config
    }
    /// Consumes the builder and constructs a [`WidgetConfig`](crate::types::WidgetConfig).
    pub fn build(self) -> crate::types::WidgetConfig {
        crate::types::WidgetConfig {
            query_parameters: self.query_parameters,
            display_config: self.display_config,
        }
    }
}
