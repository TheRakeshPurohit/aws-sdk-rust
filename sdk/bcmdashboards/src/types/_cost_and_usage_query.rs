// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines the parameters for retrieving Amazon Web Services cost and usage data. Includes specifications for metrics, time periods, granularity, grouping dimensions, and filtering conditions.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CostAndUsageQuery {
    /// <p>The specific cost and usage metrics to retrieve.</p><note>
    /// <p>Valid values for CostAndUsageQuery metrics are <code>AmortizedCost</code>, <code>BlendedCost</code>, <code>NetAmortizedCost</code>, <code>NetUnblendedCost</code>, <code>NormalizedUsageAmount</code>, <code>UnblendedCost</code>, and <code>UsageQuantity</code>.</p>
    /// </note>
    pub metrics: ::std::vec::Vec<crate::types::MetricName>,
    /// <p>The time period for which to retrieve data. Can be specified as absolute dates or relative time periods.</p>
    pub time_range: ::std::option::Option<crate::types::DateTimeRange>,
    /// <p>The granularity of the retrieved data: <code>HOURLY</code>, <code>DAILY</code>, or <code>MONTHLY</code>.</p>
    pub granularity: crate::types::Granularity,
    /// <p>Specifies how to group the retrieved data, such as by <code>SERVICE</code>, <code>ACCOUNT</code>, or <code>TAG</code>.</p>
    pub group_by: ::std::option::Option<::std::vec::Vec<crate::types::GroupDefinition>>,
    /// <p>The filter expression to be applied to the cost and usage data.</p>
    pub filter: ::std::option::Option<crate::types::Expression>,
}
impl CostAndUsageQuery {
    /// <p>The specific cost and usage metrics to retrieve.</p><note>
    /// <p>Valid values for CostAndUsageQuery metrics are <code>AmortizedCost</code>, <code>BlendedCost</code>, <code>NetAmortizedCost</code>, <code>NetUnblendedCost</code>, <code>NormalizedUsageAmount</code>, <code>UnblendedCost</code>, and <code>UsageQuantity</code>.</p>
    /// </note>
    pub fn metrics(&self) -> &[crate::types::MetricName] {
        use std::ops::Deref;
        self.metrics.deref()
    }
    /// <p>The time period for which to retrieve data. Can be specified as absolute dates or relative time periods.</p>
    pub fn time_range(&self) -> ::std::option::Option<&crate::types::DateTimeRange> {
        self.time_range.as_ref()
    }
    /// <p>The granularity of the retrieved data: <code>HOURLY</code>, <code>DAILY</code>, or <code>MONTHLY</code>.</p>
    pub fn granularity(&self) -> &crate::types::Granularity {
        &self.granularity
    }
    /// <p>Specifies how to group the retrieved data, such as by <code>SERVICE</code>, <code>ACCOUNT</code>, or <code>TAG</code>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.group_by.is_none()`.
    pub fn group_by(&self) -> &[crate::types::GroupDefinition] {
        self.group_by.as_deref().unwrap_or_default()
    }
    /// <p>The filter expression to be applied to the cost and usage data.</p>
    pub fn filter(&self) -> ::std::option::Option<&crate::types::Expression> {
        self.filter.as_ref()
    }
}
impl CostAndUsageQuery {
    /// Creates a new builder-style object to manufacture [`CostAndUsageQuery`](crate::types::CostAndUsageQuery).
    pub fn builder() -> crate::types::builders::CostAndUsageQueryBuilder {
        crate::types::builders::CostAndUsageQueryBuilder::default()
    }
}

/// A builder for [`CostAndUsageQuery`](crate::types::CostAndUsageQuery).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CostAndUsageQueryBuilder {
    pub(crate) metrics: ::std::option::Option<::std::vec::Vec<crate::types::MetricName>>,
    pub(crate) time_range: ::std::option::Option<crate::types::DateTimeRange>,
    pub(crate) granularity: ::std::option::Option<crate::types::Granularity>,
    pub(crate) group_by: ::std::option::Option<::std::vec::Vec<crate::types::GroupDefinition>>,
    pub(crate) filter: ::std::option::Option<crate::types::Expression>,
}
impl CostAndUsageQueryBuilder {
    /// Appends an item to `metrics`.
    ///
    /// To override the contents of this collection use [`set_metrics`](Self::set_metrics).
    ///
    /// <p>The specific cost and usage metrics to retrieve.</p><note>
    /// <p>Valid values for CostAndUsageQuery metrics are <code>AmortizedCost</code>, <code>BlendedCost</code>, <code>NetAmortizedCost</code>, <code>NetUnblendedCost</code>, <code>NormalizedUsageAmount</code>, <code>UnblendedCost</code>, and <code>UsageQuantity</code>.</p>
    /// </note>
    pub fn metrics(mut self, input: crate::types::MetricName) -> Self {
        let mut v = self.metrics.unwrap_or_default();
        v.push(input);
        self.metrics = ::std::option::Option::Some(v);
        self
    }
    /// <p>The specific cost and usage metrics to retrieve.</p><note>
    /// <p>Valid values for CostAndUsageQuery metrics are <code>AmortizedCost</code>, <code>BlendedCost</code>, <code>NetAmortizedCost</code>, <code>NetUnblendedCost</code>, <code>NormalizedUsageAmount</code>, <code>UnblendedCost</code>, and <code>UsageQuantity</code>.</p>
    /// </note>
    pub fn set_metrics(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::MetricName>>) -> Self {
        self.metrics = input;
        self
    }
    /// <p>The specific cost and usage metrics to retrieve.</p><note>
    /// <p>Valid values for CostAndUsageQuery metrics are <code>AmortizedCost</code>, <code>BlendedCost</code>, <code>NetAmortizedCost</code>, <code>NetUnblendedCost</code>, <code>NormalizedUsageAmount</code>, <code>UnblendedCost</code>, and <code>UsageQuantity</code>.</p>
    /// </note>
    pub fn get_metrics(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MetricName>> {
        &self.metrics
    }
    /// <p>The time period for which to retrieve data. Can be specified as absolute dates or relative time periods.</p>
    /// This field is required.
    pub fn time_range(mut self, input: crate::types::DateTimeRange) -> Self {
        self.time_range = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time period for which to retrieve data. Can be specified as absolute dates or relative time periods.</p>
    pub fn set_time_range(mut self, input: ::std::option::Option<crate::types::DateTimeRange>) -> Self {
        self.time_range = input;
        self
    }
    /// <p>The time period for which to retrieve data. Can be specified as absolute dates or relative time periods.</p>
    pub fn get_time_range(&self) -> &::std::option::Option<crate::types::DateTimeRange> {
        &self.time_range
    }
    /// <p>The granularity of the retrieved data: <code>HOURLY</code>, <code>DAILY</code>, or <code>MONTHLY</code>.</p>
    /// This field is required.
    pub fn granularity(mut self, input: crate::types::Granularity) -> Self {
        self.granularity = ::std::option::Option::Some(input);
        self
    }
    /// <p>The granularity of the retrieved data: <code>HOURLY</code>, <code>DAILY</code>, or <code>MONTHLY</code>.</p>
    pub fn set_granularity(mut self, input: ::std::option::Option<crate::types::Granularity>) -> Self {
        self.granularity = input;
        self
    }
    /// <p>The granularity of the retrieved data: <code>HOURLY</code>, <code>DAILY</code>, or <code>MONTHLY</code>.</p>
    pub fn get_granularity(&self) -> &::std::option::Option<crate::types::Granularity> {
        &self.granularity
    }
    /// Appends an item to `group_by`.
    ///
    /// To override the contents of this collection use [`set_group_by`](Self::set_group_by).
    ///
    /// <p>Specifies how to group the retrieved data, such as by <code>SERVICE</code>, <code>ACCOUNT</code>, or <code>TAG</code>.</p>
    pub fn group_by(mut self, input: crate::types::GroupDefinition) -> Self {
        let mut v = self.group_by.unwrap_or_default();
        v.push(input);
        self.group_by = ::std::option::Option::Some(v);
        self
    }
    /// <p>Specifies how to group the retrieved data, such as by <code>SERVICE</code>, <code>ACCOUNT</code>, or <code>TAG</code>.</p>
    pub fn set_group_by(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::GroupDefinition>>) -> Self {
        self.group_by = input;
        self
    }
    /// <p>Specifies how to group the retrieved data, such as by <code>SERVICE</code>, <code>ACCOUNT</code>, or <code>TAG</code>.</p>
    pub fn get_group_by(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::GroupDefinition>> {
        &self.group_by
    }
    /// <p>The filter expression to be applied to the cost and usage data.</p>
    pub fn filter(mut self, input: crate::types::Expression) -> Self {
        self.filter = ::std::option::Option::Some(input);
        self
    }
    /// <p>The filter expression to be applied to the cost and usage data.</p>
    pub fn set_filter(mut self, input: ::std::option::Option<crate::types::Expression>) -> Self {
        self.filter = input;
        self
    }
    /// <p>The filter expression to be applied to the cost and usage data.</p>
    pub fn get_filter(&self) -> &::std::option::Option<crate::types::Expression> {
        &self.filter
    }
    /// Consumes the builder and constructs a [`CostAndUsageQuery`](crate::types::CostAndUsageQuery).
    /// This method will fail if any of the following fields are not set:
    /// - [`metrics`](crate::types::builders::CostAndUsageQueryBuilder::metrics)
    /// - [`granularity`](crate::types::builders::CostAndUsageQueryBuilder::granularity)
    pub fn build(self) -> ::std::result::Result<crate::types::CostAndUsageQuery, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CostAndUsageQuery {
            metrics: self.metrics.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "metrics",
                    "metrics was not specified but it is required when building CostAndUsageQuery",
                )
            })?,
            time_range: self.time_range,
            granularity: self.granularity.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "granularity",
                    "granularity was not specified but it is required when building CostAndUsageQuery",
                )
            })?,
            group_by: self.group_by,
            filter: self.filter,
        })
    }
}
