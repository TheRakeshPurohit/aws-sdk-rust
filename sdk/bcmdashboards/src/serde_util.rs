// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn access_denied_exception_correct_errors(
    mut builder: crate::types::error::builders::AccessDeniedExceptionBuilder,
) -> crate::types::error::builders::AccessDeniedExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn internal_server_exception_correct_errors(
    mut builder: crate::types::error::builders::InternalServerExceptionBuilder,
) -> crate::types::error::builders::InternalServerExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn service_quota_exceeded_exception_correct_errors(
    mut builder: crate::types::error::builders::ServiceQuotaExceededExceptionBuilder,
) -> crate::types::error::builders::ServiceQuotaExceededExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn throttling_exception_correct_errors(
    mut builder: crate::types::error::builders::ThrottlingExceptionBuilder,
) -> crate::types::error::builders::ThrottlingExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_correct_errors(
    mut builder: crate::types::error::builders::ValidationExceptionBuilder,
) -> crate::types::error::builders::ValidationExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn create_dashboard_output_output_correct_errors(
    mut builder: crate::operation::create_dashboard::builders::CreateDashboardOutputBuilder,
) -> crate::operation::create_dashboard::builders::CreateDashboardOutputBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn delete_dashboard_output_output_correct_errors(
    mut builder: crate::operation::delete_dashboard::builders::DeleteDashboardOutputBuilder,
) -> crate::operation::delete_dashboard::builders::DeleteDashboardOutputBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_not_found_exception_correct_errors(
    mut builder: crate::types::error::builders::ResourceNotFoundExceptionBuilder,
) -> crate::types::error::builders::ResourceNotFoundExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn get_dashboard_output_output_correct_errors(
    mut builder: crate::operation::get_dashboard::builders::GetDashboardOutputBuilder,
) -> crate::operation::get_dashboard::builders::GetDashboardOutputBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::DashboardType>().ok()
    }
    if builder.widgets.is_none() {
        builder.widgets = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn get_resource_policy_output_output_correct_errors(
    mut builder: crate::operation::get_resource_policy::builders::GetResourcePolicyOutputBuilder,
) -> crate::operation::get_resource_policy::builders::GetResourcePolicyOutputBuilder {
    if builder.resource_arn.is_none() {
        builder.resource_arn = Some(Default::default())
    }
    if builder.policy_document.is_none() {
        builder.policy_document = Some(Default::default())
    }
    builder
}

pub(crate) fn list_dashboards_output_output_correct_errors(
    mut builder: crate::operation::list_dashboards::builders::ListDashboardsOutputBuilder,
) -> crate::operation::list_dashboards::builders::ListDashboardsOutputBuilder {
    if builder.dashboards.is_none() {
        builder.dashboards = Some(Default::default())
    }
    builder
}

pub(crate) fn update_dashboard_output_output_correct_errors(
    mut builder: crate::operation::update_dashboard::builders::UpdateDashboardOutputBuilder,
) -> crate::operation::update_dashboard::builders::UpdateDashboardOutputBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn dashboard_reference_correct_errors(
    mut builder: crate::types::builders::DashboardReferenceBuilder,
) -> crate::types::builders::DashboardReferenceBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::DashboardType>().ok()
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn resource_tag_correct_errors(mut builder: crate::types::builders::ResourceTagBuilder) -> crate::types::builders::ResourceTagBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn widget_correct_errors(mut builder: crate::types::builders::WidgetBuilder) -> crate::types::builders::WidgetBuilder {
    if builder.title.is_none() {
        builder.title = Some(Default::default())
    }
    if builder.configs.is_none() {
        builder.configs = Some(Default::default())
    }
    builder
}

pub(crate) fn widget_config_correct_errors(mut builder: crate::types::builders::WidgetConfigBuilder) -> crate::types::builders::WidgetConfigBuilder {
    if builder.query_parameters.is_none() {
        builder.query_parameters = Some(crate::types::QueryParameters::Unknown)
    }
    if builder.display_config.is_none() {
        builder.display_config = Some(crate::types::DisplayConfig::Unknown)
    }
    builder
}

pub(crate) fn cost_and_usage_query_correct_errors(
    mut builder: crate::types::builders::CostAndUsageQueryBuilder,
) -> crate::types::builders::CostAndUsageQueryBuilder {
    if builder.metrics.is_none() {
        builder.metrics = Some(Default::default())
    }
    if builder.time_range.is_none() {
        builder.time_range = {
            let builder = crate::types::builders::DateTimeRangeBuilder::default();
            Some(crate::serde_util::date_time_range_correct_errors(builder).build())
        }
    }
    if builder.granularity.is_none() {
        builder.granularity = "no value was set".parse::<crate::types::Granularity>().ok()
    }
    builder
}

pub(crate) fn reservation_coverage_query_correct_errors(
    mut builder: crate::types::builders::ReservationCoverageQueryBuilder,
) -> crate::types::builders::ReservationCoverageQueryBuilder {
    if builder.time_range.is_none() {
        builder.time_range = {
            let builder = crate::types::builders::DateTimeRangeBuilder::default();
            Some(crate::serde_util::date_time_range_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn reservation_utilization_query_correct_errors(
    mut builder: crate::types::builders::ReservationUtilizationQueryBuilder,
) -> crate::types::builders::ReservationUtilizationQueryBuilder {
    if builder.time_range.is_none() {
        builder.time_range = {
            let builder = crate::types::builders::DateTimeRangeBuilder::default();
            Some(crate::serde_util::date_time_range_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn savings_plans_coverage_query_correct_errors(
    mut builder: crate::types::builders::SavingsPlansCoverageQueryBuilder,
) -> crate::types::builders::SavingsPlansCoverageQueryBuilder {
    if builder.time_range.is_none() {
        builder.time_range = {
            let builder = crate::types::builders::DateTimeRangeBuilder::default();
            Some(crate::serde_util::date_time_range_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn savings_plans_utilization_query_correct_errors(
    mut builder: crate::types::builders::SavingsPlansUtilizationQueryBuilder,
) -> crate::types::builders::SavingsPlansUtilizationQueryBuilder {
    if builder.time_range.is_none() {
        builder.time_range = {
            let builder = crate::types::builders::DateTimeRangeBuilder::default();
            Some(crate::serde_util::date_time_range_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn date_time_range_correct_errors(
    mut builder: crate::types::builders::DateTimeRangeBuilder,
) -> crate::types::builders::DateTimeRangeBuilder {
    if builder.start_time.is_none() {
        builder.start_time = {
            let builder = crate::types::builders::DateTimeValueBuilder::default();
            crate::serde_util::date_time_value_correct_errors(builder).build().ok()
        }
    }
    if builder.end_time.is_none() {
        builder.end_time = {
            let builder = crate::types::builders::DateTimeValueBuilder::default();
            crate::serde_util::date_time_value_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn graph_display_config_correct_errors(
    mut builder: crate::types::builders::GraphDisplayConfigBuilder,
) -> crate::types::builders::GraphDisplayConfigBuilder {
    if builder.visual_type.is_none() {
        builder.visual_type = "no value was set".parse::<crate::types::VisualType>().ok()
    }
    builder
}

pub(crate) fn date_time_value_correct_errors(
    mut builder: crate::types::builders::DateTimeValueBuilder,
) -> crate::types::builders::DateTimeValueBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::DateTimeType>().ok()
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn dimension_values_correct_errors(
    mut builder: crate::types::builders::DimensionValuesBuilder,
) -> crate::types::builders::DimensionValuesBuilder {
    if builder.key.is_none() {
        builder.key = "no value was set".parse::<crate::types::Dimension>().ok()
    }
    if builder.values.is_none() {
        builder.values = Some(Default::default())
    }
    builder
}

pub(crate) fn group_definition_correct_errors(
    mut builder: crate::types::builders::GroupDefinitionBuilder,
) -> crate::types::builders::GroupDefinitionBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    builder
}
