// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetDashboardOutput {
    /// <p>The ARN of the retrieved dashboard.</p>
    pub arn: ::std::string::String,
    /// <p>The name of the retrieved dashboard.</p>
    pub name: ::std::string::String,
    /// <p>The description of the retrieved dashboard.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>Indicates the dashboard type.</p>
    pub r#type: crate::types::DashboardType,
    /// <p>An array of widget configurations that make up the dashboard.</p>
    pub widgets: ::std::vec::Vec<crate::types::Widget>,
    /// <p>The timestamp when the dashboard was created.</p>
    pub created_at: ::aws_smithy_types::DateTime,
    /// <p>The timestamp when the dashboard was last modified.</p>
    pub updated_at: ::aws_smithy_types::DateTime,
    _request_id: Option<String>,
}
impl GetDashboardOutput {
    /// <p>The ARN of the retrieved dashboard.</p>
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// <p>The name of the retrieved dashboard.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The description of the retrieved dashboard.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Indicates the dashboard type.</p>
    pub fn r#type(&self) -> &crate::types::DashboardType {
        &self.r#type
    }
    /// <p>An array of widget configurations that make up the dashboard.</p>
    pub fn widgets(&self) -> &[crate::types::Widget] {
        use std::ops::Deref;
        self.widgets.deref()
    }
    /// <p>The timestamp when the dashboard was created.</p>
    pub fn created_at(&self) -> &::aws_smithy_types::DateTime {
        &self.created_at
    }
    /// <p>The timestamp when the dashboard was last modified.</p>
    pub fn updated_at(&self) -> &::aws_smithy_types::DateTime {
        &self.updated_at
    }
}
impl ::aws_types::request_id::RequestId for GetDashboardOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetDashboardOutput {
    /// Creates a new builder-style object to manufacture [`GetDashboardOutput`](crate::operation::get_dashboard::GetDashboardOutput).
    pub fn builder() -> crate::operation::get_dashboard::builders::GetDashboardOutputBuilder {
        crate::operation::get_dashboard::builders::GetDashboardOutputBuilder::default()
    }
}

/// A builder for [`GetDashboardOutput`](crate::operation::get_dashboard::GetDashboardOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetDashboardOutputBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::DashboardType>,
    pub(crate) widgets: ::std::option::Option<::std::vec::Vec<crate::types::Widget>>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl GetDashboardOutputBuilder {
    /// <p>The ARN of the retrieved dashboard.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the retrieved dashboard.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The ARN of the retrieved dashboard.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The name of the retrieved dashboard.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the retrieved dashboard.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the retrieved dashboard.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The description of the retrieved dashboard.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the retrieved dashboard.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the retrieved dashboard.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>Indicates the dashboard type.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::DashboardType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates the dashboard type.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::DashboardType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>Indicates the dashboard type.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::DashboardType> {
        &self.r#type
    }
    /// Appends an item to `widgets`.
    ///
    /// To override the contents of this collection use [`set_widgets`](Self::set_widgets).
    ///
    /// <p>An array of widget configurations that make up the dashboard.</p>
    pub fn widgets(mut self, input: crate::types::Widget) -> Self {
        let mut v = self.widgets.unwrap_or_default();
        v.push(input);
        self.widgets = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of widget configurations that make up the dashboard.</p>
    pub fn set_widgets(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Widget>>) -> Self {
        self.widgets = input;
        self
    }
    /// <p>An array of widget configurations that make up the dashboard.</p>
    pub fn get_widgets(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Widget>> {
        &self.widgets
    }
    /// <p>The timestamp when the dashboard was created.</p>
    /// This field is required.
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the dashboard was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The timestamp when the dashboard was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The timestamp when the dashboard was last modified.</p>
    /// This field is required.
    pub fn updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the dashboard was last modified.</p>
    pub fn set_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>The timestamp when the dashboard was last modified.</p>
    pub fn get_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_at
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetDashboardOutput`](crate::operation::get_dashboard::GetDashboardOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`arn`](crate::operation::get_dashboard::builders::GetDashboardOutputBuilder::arn)
    /// - [`name`](crate::operation::get_dashboard::builders::GetDashboardOutputBuilder::name)
    /// - [`r#type`](crate::operation::get_dashboard::builders::GetDashboardOutputBuilder::type)
    /// - [`widgets`](crate::operation::get_dashboard::builders::GetDashboardOutputBuilder::widgets)
    /// - [`created_at`](crate::operation::get_dashboard::builders::GetDashboardOutputBuilder::created_at)
    /// - [`updated_at`](crate::operation::get_dashboard::builders::GetDashboardOutputBuilder::updated_at)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::get_dashboard::GetDashboardOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::get_dashboard::GetDashboardOutput {
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building GetDashboardOutput",
                )
            })?,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building GetDashboardOutput",
                )
            })?,
            description: self.description,
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building GetDashboardOutput",
                )
            })?,
            widgets: self.widgets.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "widgets",
                    "widgets was not specified but it is required when building GetDashboardOutput",
                )
            })?,
            created_at: self.created_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_at",
                    "created_at was not specified but it is required when building GetDashboardOutput",
                )
            })?,
            updated_at: self.updated_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "updated_at",
                    "updated_at was not specified but it is required when building GetDashboardOutput",
                )
            })?,
            _request_id: self._request_id,
        })
    }
}
