// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateDashboardInput {
    /// <p>The ARN of the dashboard to update.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The new name for the dashboard. If not specified, the existing name is retained.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The new description for the dashboard. If not specified, the existing description is retained.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The updated array of widget configurations for the dashboard. Replaces all existing widgets.</p>
    pub widgets: ::std::option::Option<::std::vec::Vec<crate::types::Widget>>,
}
impl UpdateDashboardInput {
    /// <p>The ARN of the dashboard to update.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The new name for the dashboard. If not specified, the existing name is retained.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The new description for the dashboard. If not specified, the existing description is retained.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The updated array of widget configurations for the dashboard. Replaces all existing widgets.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.widgets.is_none()`.
    pub fn widgets(&self) -> &[crate::types::Widget] {
        self.widgets.as_deref().unwrap_or_default()
    }
}
impl UpdateDashboardInput {
    /// Creates a new builder-style object to manufacture [`UpdateDashboardInput`](crate::operation::update_dashboard::UpdateDashboardInput).
    pub fn builder() -> crate::operation::update_dashboard::builders::UpdateDashboardInputBuilder {
        crate::operation::update_dashboard::builders::UpdateDashboardInputBuilder::default()
    }
}

/// A builder for [`UpdateDashboardInput`](crate::operation::update_dashboard::UpdateDashboardInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateDashboardInputBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) widgets: ::std::option::Option<::std::vec::Vec<crate::types::Widget>>,
}
impl UpdateDashboardInputBuilder {
    /// <p>The ARN of the dashboard to update.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the dashboard to update.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The ARN of the dashboard to update.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The new name for the dashboard. If not specified, the existing name is retained.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The new name for the dashboard. If not specified, the existing name is retained.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The new name for the dashboard. If not specified, the existing name is retained.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The new description for the dashboard. If not specified, the existing description is retained.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The new description for the dashboard. If not specified, the existing description is retained.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The new description for the dashboard. If not specified, the existing description is retained.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Appends an item to `widgets`.
    ///
    /// To override the contents of this collection use [`set_widgets`](Self::set_widgets).
    ///
    /// <p>The updated array of widget configurations for the dashboard. Replaces all existing widgets.</p>
    pub fn widgets(mut self, input: crate::types::Widget) -> Self {
        let mut v = self.widgets.unwrap_or_default();
        v.push(input);
        self.widgets = ::std::option::Option::Some(v);
        self
    }
    /// <p>The updated array of widget configurations for the dashboard. Replaces all existing widgets.</p>
    pub fn set_widgets(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Widget>>) -> Self {
        self.widgets = input;
        self
    }
    /// <p>The updated array of widget configurations for the dashboard. Replaces all existing widgets.</p>
    pub fn get_widgets(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Widget>> {
        &self.widgets
    }
    /// Consumes the builder and constructs a [`UpdateDashboardInput`](crate::operation::update_dashboard::UpdateDashboardInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_dashboard::UpdateDashboardInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_dashboard::UpdateDashboardInput {
            arn: self.arn,
            name: self.name,
            description: self.description,
            widgets: self.widgets,
        })
    }
}
