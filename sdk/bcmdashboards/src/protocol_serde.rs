// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn type_erase_result<O, E>(
    result: ::std::result::Result<O, E>,
) -> ::std::result::Result<
    ::aws_smithy_runtime_api::client::interceptors::context::Output,
    ::aws_smithy_runtime_api::client::orchestrator::OrchestratorError<::aws_smithy_runtime_api::client::interceptors::context::Error>,
>
where
    O: ::std::fmt::Debug + ::std::marker::Send + ::std::marker::Sync + 'static,
    E: ::std::error::Error + std::fmt::Debug + ::std::marker::Send + ::std::marker::Sync + 'static,
{
    result
        .map(|output| ::aws_smithy_runtime_api::client::interceptors::context::Output::erase(output))
        .map_err(|error| ::aws_smithy_runtime_api::client::interceptors::context::Error::erase(error))
        .map_err(::std::convert::Into::into)
}

pub fn parse_http_error_metadata(
    _response_status: u16,
    response_headers: &::aws_smithy_runtime_api::http::Headers,
    response_body: &[u8],
) -> ::std::result::Result<::aws_smithy_types::error::metadata::Builder, ::aws_smithy_json::deserialize::error::DeserializeError> {
    crate::json_errors::parse_error_metadata(response_body, response_headers)
}

pub(crate) mod shape_create_dashboard;

pub(crate) mod shape_delete_dashboard;

pub(crate) mod shape_get_dashboard;

pub(crate) mod shape_get_resource_policy;

pub(crate) mod shape_list_dashboards;

pub(crate) mod shape_list_tags_for_resource;

pub(crate) mod shape_tag_resource;

pub(crate) mod shape_untag_resource;

pub(crate) mod shape_update_dashboard;

pub(crate) fn or_empty_doc(data: &[u8]) -> &[u8] {
    if data.is_empty() {
        b"{}"
    } else {
        data
    }
}

pub(crate) mod shape_access_denied_exception;

pub(crate) mod shape_create_dashboard_input;

pub(crate) mod shape_delete_dashboard_input;

pub(crate) mod shape_get_dashboard_input;

pub(crate) mod shape_get_resource_policy_input;

pub(crate) mod shape_internal_server_exception;

pub(crate) mod shape_list_dashboards_input;

pub(crate) mod shape_list_tags_for_resource_input;

pub(crate) mod shape_resource_not_found_exception;

pub(crate) mod shape_service_quota_exceeded_exception;

pub(crate) mod shape_tag_resource_input;

pub(crate) mod shape_throttling_exception;

pub(crate) mod shape_untag_resource_input;

pub(crate) mod shape_update_dashboard_input;

pub(crate) mod shape_validation_exception;

pub(crate) mod shape_dashboard_reference_list;

pub(crate) mod shape_resource_tag;

pub(crate) mod shape_resource_tag_list;

pub(crate) mod shape_widget;

pub(crate) mod shape_widget_list;

pub(crate) mod shape_dashboard_reference;

pub(crate) mod shape_widget_config;

pub(crate) mod shape_display_config;

pub(crate) mod shape_query_parameters;

pub(crate) mod shape_widget_config_list;

pub(crate) mod shape_cost_and_usage_query;

pub(crate) mod shape_graph_display_config;

pub(crate) mod shape_reservation_coverage_query;

pub(crate) mod shape_reservation_utilization_query;

pub(crate) mod shape_savings_plans_coverage_query;

pub(crate) mod shape_savings_plans_utilization_query;

pub(crate) mod shape_table_display_config_struct;

pub(crate) mod shape_date_time_range;

pub(crate) mod shape_expression;

pub(crate) mod shape_group_definition;

pub(crate) mod shape_cost_category_values;

pub(crate) mod shape_date_time_value;

pub(crate) mod shape_dimension_values;

pub(crate) mod shape_graph_display_config_map;

pub(crate) mod shape_tag_values;

pub(crate) mod shape_group_definitions;

pub(crate) mod shape_metric_names;

pub(crate) mod shape_expressions;

pub(crate) mod shape_match_options;

pub(crate) mod shape_string_list;
