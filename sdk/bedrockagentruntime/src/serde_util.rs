// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn create_invocation_output_output_correct_errors(
    mut builder: crate::operation::create_invocation::builders::CreateInvocationOutputBuilder,
) -> crate::operation::create_invocation::builders::CreateInvocationOutputBuilder {
    if builder.session_id.is_none() {
        builder.session_id = Some(Default::default())
    }
    if builder.invocation_id.is_none() {
        builder.invocation_id = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn create_session_output_output_correct_errors(
    mut builder: crate::operation::create_session::builders::CreateSessionOutputBuilder,
) -> crate::operation::create_session::builders::CreateSessionOutputBuilder {
    if builder.session_id.is_none() {
        builder.session_id = Some(Default::default())
    }
    if builder.session_arn.is_none() {
        builder.session_arn = Some(Default::default())
    }
    if builder.session_status.is_none() {
        builder.session_status = "no value was set".parse::<crate::types::SessionStatus>().ok()
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn end_session_output_output_correct_errors(
    mut builder: crate::operation::end_session::builders::EndSessionOutputBuilder,
) -> crate::operation::end_session::builders::EndSessionOutputBuilder {
    if builder.session_id.is_none() {
        builder.session_id = Some(Default::default())
    }
    if builder.session_arn.is_none() {
        builder.session_arn = Some(Default::default())
    }
    if builder.session_status.is_none() {
        builder.session_status = "no value was set".parse::<crate::types::SessionStatus>().ok()
    }
    builder
}

pub(crate) fn get_execution_flow_snapshot_output_output_correct_errors(
    mut builder: crate::operation::get_execution_flow_snapshot::builders::GetExecutionFlowSnapshotOutputBuilder,
) -> crate::operation::get_execution_flow_snapshot::builders::GetExecutionFlowSnapshotOutputBuilder {
    if builder.flow_identifier.is_none() {
        builder.flow_identifier = Some(Default::default())
    }
    if builder.flow_alias_identifier.is_none() {
        builder.flow_alias_identifier = Some(Default::default())
    }
    if builder.flow_version.is_none() {
        builder.flow_version = Some(Default::default())
    }
    if builder.execution_role_arn.is_none() {
        builder.execution_role_arn = Some(Default::default())
    }
    if builder.definition.is_none() {
        builder.definition = Some(Default::default())
    }
    builder
}

pub(crate) fn get_flow_execution_output_output_correct_errors(
    mut builder: crate::operation::get_flow_execution::builders::GetFlowExecutionOutputBuilder,
) -> crate::operation::get_flow_execution::builders::GetFlowExecutionOutputBuilder {
    if builder.execution_arn.is_none() {
        builder.execution_arn = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::FlowExecutionStatus>().ok()
    }
    if builder.started_at.is_none() {
        builder.started_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.flow_alias_identifier.is_none() {
        builder.flow_alias_identifier = Some(Default::default())
    }
    if builder.flow_identifier.is_none() {
        builder.flow_identifier = Some(Default::default())
    }
    if builder.flow_version.is_none() {
        builder.flow_version = Some(Default::default())
    }
    builder
}

pub(crate) fn get_invocation_step_output_output_correct_errors(
    mut builder: crate::operation::get_invocation_step::builders::GetInvocationStepOutputBuilder,
) -> crate::operation::get_invocation_step::builders::GetInvocationStepOutputBuilder {
    if builder.invocation_step.is_none() {
        builder.invocation_step = {
            let builder = crate::types::builders::InvocationStepBuilder::default();
            crate::serde_util::invocation_step_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_session_output_output_correct_errors(
    mut builder: crate::operation::get_session::builders::GetSessionOutputBuilder,
) -> crate::operation::get_session::builders::GetSessionOutputBuilder {
    if builder.session_id.is_none() {
        builder.session_id = Some(Default::default())
    }
    if builder.session_arn.is_none() {
        builder.session_arn = Some(Default::default())
    }
    if builder.session_status.is_none() {
        builder.session_status = "no value was set".parse::<crate::types::SessionStatus>().ok()
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_updated_at.is_none() {
        builder.last_updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn invoke_agent_output_output_correct_errors(
    mut builder: crate::operation::invoke_agent::builders::InvokeAgentOutputBuilder,
) -> crate::operation::invoke_agent::builders::InvokeAgentOutputBuilder {
    if builder.content_type.is_none() {
        builder.content_type = Some(Default::default())
    }
    if builder.session_id.is_none() {
        builder.session_id = Some(Default::default())
    }
    builder
}

pub(crate) fn invoke_inline_agent_output_output_correct_errors(
    mut builder: crate::operation::invoke_inline_agent::builders::InvokeInlineAgentOutputBuilder,
) -> crate::operation::invoke_inline_agent::builders::InvokeInlineAgentOutputBuilder {
    if builder.content_type.is_none() {
        builder.content_type = Some(Default::default())
    }
    if builder.session_id.is_none() {
        builder.session_id = Some(Default::default())
    }
    builder
}

pub(crate) fn list_flow_execution_events_output_output_correct_errors(
    mut builder: crate::operation::list_flow_execution_events::builders::ListFlowExecutionEventsOutputBuilder,
) -> crate::operation::list_flow_execution_events::builders::ListFlowExecutionEventsOutputBuilder {
    if builder.flow_execution_events.is_none() {
        builder.flow_execution_events = Some(Default::default())
    }
    builder
}

pub(crate) fn list_flow_executions_output_output_correct_errors(
    mut builder: crate::operation::list_flow_executions::builders::ListFlowExecutionsOutputBuilder,
) -> crate::operation::list_flow_executions::builders::ListFlowExecutionsOutputBuilder {
    if builder.flow_execution_summaries.is_none() {
        builder.flow_execution_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_invocation_steps_output_output_correct_errors(
    mut builder: crate::operation::list_invocation_steps::builders::ListInvocationStepsOutputBuilder,
) -> crate::operation::list_invocation_steps::builders::ListInvocationStepsOutputBuilder {
    if builder.invocation_step_summaries.is_none() {
        builder.invocation_step_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_invocations_output_output_correct_errors(
    mut builder: crate::operation::list_invocations::builders::ListInvocationsOutputBuilder,
) -> crate::operation::list_invocations::builders::ListInvocationsOutputBuilder {
    if builder.invocation_summaries.is_none() {
        builder.invocation_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_sessions_output_output_correct_errors(
    mut builder: crate::operation::list_sessions::builders::ListSessionsOutputBuilder,
) -> crate::operation::list_sessions::builders::ListSessionsOutputBuilder {
    if builder.session_summaries.is_none() {
        builder.session_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn put_invocation_step_output_output_correct_errors(
    mut builder: crate::operation::put_invocation_step::builders::PutInvocationStepOutputBuilder,
) -> crate::operation::put_invocation_step::builders::PutInvocationStepOutputBuilder {
    if builder.invocation_step_id.is_none() {
        builder.invocation_step_id = Some(Default::default())
    }
    builder
}

pub(crate) fn rerank_output_output_correct_errors(
    mut builder: crate::operation::rerank::builders::RerankOutputBuilder,
) -> crate::operation::rerank::builders::RerankOutputBuilder {
    if builder.results.is_none() {
        builder.results = Some(Default::default())
    }
    builder
}

pub(crate) fn retrieve_output_output_correct_errors(
    mut builder: crate::operation::retrieve::builders::RetrieveOutputBuilder,
) -> crate::operation::retrieve::builders::RetrieveOutputBuilder {
    if builder.retrieval_results.is_none() {
        builder.retrieval_results = Some(Default::default())
    }
    builder
}

pub(crate) fn retrieve_and_generate_output_output_correct_errors(
    mut builder: crate::operation::retrieve_and_generate::builders::RetrieveAndGenerateOutputBuilder,
) -> crate::operation::retrieve_and_generate::builders::RetrieveAndGenerateOutputBuilder {
    if builder.session_id.is_none() {
        builder.session_id = Some(Default::default())
    }
    if builder.output.is_none() {
        builder.output = {
            let builder = crate::types::builders::RetrieveAndGenerateOutputBuilder::default();
            crate::serde_util::retrieve_and_generate_output_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn retrieve_and_generate_stream_output_output_correct_errors(
    mut builder: crate::operation::retrieve_and_generate_stream::builders::RetrieveAndGenerateStreamOutputBuilder,
) -> crate::operation::retrieve_and_generate_stream::builders::RetrieveAndGenerateStreamOutputBuilder {
    if builder.session_id.is_none() {
        builder.session_id = Some(Default::default())
    }
    builder
}

pub(crate) fn stop_flow_execution_output_output_correct_errors(
    mut builder: crate::operation::stop_flow_execution::builders::StopFlowExecutionOutputBuilder,
) -> crate::operation::stop_flow_execution::builders::StopFlowExecutionOutputBuilder {
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::FlowExecutionStatus>().ok()
    }
    builder
}

pub(crate) fn update_session_output_output_correct_errors(
    mut builder: crate::operation::update_session::builders::UpdateSessionOutputBuilder,
) -> crate::operation::update_session::builders::UpdateSessionOutputBuilder {
    if builder.session_id.is_none() {
        builder.session_id = Some(Default::default())
    }
    if builder.session_arn.is_none() {
        builder.session_arn = Some(Default::default())
    }
    if builder.session_status.is_none() {
        builder.session_status = "no value was set".parse::<crate::types::SessionStatus>().ok()
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_updated_at.is_none() {
        builder.last_updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn invocation_step_correct_errors(
    mut builder: crate::types::builders::InvocationStepBuilder,
) -> crate::types::builders::InvocationStepBuilder {
    if builder.session_id.is_none() {
        builder.session_id = Some(Default::default())
    }
    if builder.invocation_id.is_none() {
        builder.invocation_id = Some(Default::default())
    }
    if builder.invocation_step_id.is_none() {
        builder.invocation_step_id = Some(Default::default())
    }
    if builder.invocation_step_time.is_none() {
        builder.invocation_step_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.payload.is_none() {
        builder.payload = Some(crate::types::InvocationStepPayload::Unknown)
    }
    builder
}

pub(crate) fn retrieve_and_generate_output_correct_errors(
    mut builder: crate::types::builders::RetrieveAndGenerateOutputBuilder,
) -> crate::types::builders::RetrieveAndGenerateOutputBuilder {
    if builder.text.is_none() {
        builder.text = Some(Default::default())
    }
    builder
}

pub(crate) fn flow_execution_summary_correct_errors(
    mut builder: crate::types::builders::FlowExecutionSummaryBuilder,
) -> crate::types::builders::FlowExecutionSummaryBuilder {
    if builder.execution_arn.is_none() {
        builder.execution_arn = Some(Default::default())
    }
    if builder.flow_alias_identifier.is_none() {
        builder.flow_alias_identifier = Some(Default::default())
    }
    if builder.flow_identifier.is_none() {
        builder.flow_identifier = Some(Default::default())
    }
    if builder.flow_version.is_none() {
        builder.flow_version = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::FlowExecutionStatus>().ok()
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn invocation_step_summary_correct_errors(
    mut builder: crate::types::builders::InvocationStepSummaryBuilder,
) -> crate::types::builders::InvocationStepSummaryBuilder {
    if builder.session_id.is_none() {
        builder.session_id = Some(Default::default())
    }
    if builder.invocation_id.is_none() {
        builder.invocation_id = Some(Default::default())
    }
    if builder.invocation_step_id.is_none() {
        builder.invocation_step_id = Some(Default::default())
    }
    if builder.invocation_step_time.is_none() {
        builder.invocation_step_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn invocation_summary_correct_errors(
    mut builder: crate::types::builders::InvocationSummaryBuilder,
) -> crate::types::builders::InvocationSummaryBuilder {
    if builder.session_id.is_none() {
        builder.session_id = Some(Default::default())
    }
    if builder.invocation_id.is_none() {
        builder.invocation_id = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn knowledge_base_retrieval_result_correct_errors(
    mut builder: crate::types::builders::KnowledgeBaseRetrievalResultBuilder,
) -> crate::types::builders::KnowledgeBaseRetrievalResultBuilder {
    if builder.content.is_none() {
        builder.content = {
            let builder = crate::types::builders::RetrievalResultContentBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn rerank_result_correct_errors(mut builder: crate::types::builders::RerankResultBuilder) -> crate::types::builders::RerankResultBuilder {
    if builder.index.is_none() {
        builder.index = Some(Default::default())
    }
    if builder.relevance_score.is_none() {
        builder.relevance_score = Some(Default::default())
    }
    builder
}

pub(crate) fn session_summary_correct_errors(
    mut builder: crate::types::builders::SessionSummaryBuilder,
) -> crate::types::builders::SessionSummaryBuilder {
    if builder.session_id.is_none() {
        builder.session_id = Some(Default::default())
    }
    if builder.session_arn.is_none() {
        builder.session_arn = Some(Default::default())
    }
    if builder.session_status.is_none() {
        builder.session_status = "no value was set".parse::<crate::types::SessionStatus>().ok()
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_updated_at.is_none() {
        builder.last_updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn condition_result_event_correct_errors(
    mut builder: crate::types::builders::ConditionResultEventBuilder,
) -> crate::types::builders::ConditionResultEventBuilder {
    if builder.node_name.is_none() {
        builder.node_name = Some(Default::default())
    }
    if builder.timestamp.is_none() {
        builder.timestamp = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.satisfied_conditions.is_none() {
        builder.satisfied_conditions = Some(Default::default())
    }
    builder
}

pub(crate) fn flow_completion_event_correct_errors(
    mut builder: crate::types::builders::FlowCompletionEventBuilder,
) -> crate::types::builders::FlowCompletionEventBuilder {
    if builder.completion_reason.is_none() {
        builder.completion_reason = "no value was set".parse::<crate::types::FlowCompletionReason>().ok()
    }
    builder
}

pub(crate) fn flow_execution_input_event_correct_errors(
    mut builder: crate::types::builders::FlowExecutionInputEventBuilder,
) -> crate::types::builders::FlowExecutionInputEventBuilder {
    if builder.node_name.is_none() {
        builder.node_name = Some(Default::default())
    }
    if builder.timestamp.is_none() {
        builder.timestamp = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.fields.is_none() {
        builder.fields = Some(Default::default())
    }
    builder
}

pub(crate) fn flow_execution_output_event_correct_errors(
    mut builder: crate::types::builders::FlowExecutionOutputEventBuilder,
) -> crate::types::builders::FlowExecutionOutputEventBuilder {
    if builder.node_name.is_none() {
        builder.node_name = Some(Default::default())
    }
    if builder.timestamp.is_none() {
        builder.timestamp = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.fields.is_none() {
        builder.fields = Some(Default::default())
    }
    builder
}

pub(crate) fn flow_failure_event_correct_errors(
    mut builder: crate::types::builders::FlowFailureEventBuilder,
) -> crate::types::builders::FlowFailureEventBuilder {
    if builder.timestamp.is_none() {
        builder.timestamp = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.error_code.is_none() {
        builder.error_code = "no value was set".parse::<crate::types::FlowErrorCode>().ok()
    }
    if builder.error_message.is_none() {
        builder.error_message = Some(Default::default())
    }
    builder
}

pub(crate) fn flow_multi_turn_input_request_event_correct_errors(
    mut builder: crate::types::builders::FlowMultiTurnInputRequestEventBuilder,
) -> crate::types::builders::FlowMultiTurnInputRequestEventBuilder {
    if builder.node_name.is_none() {
        builder.node_name = Some(Default::default())
    }
    if builder.node_type.is_none() {
        builder.node_type = "no value was set".parse::<crate::types::NodeType>().ok()
    }
    if builder.content.is_none() {
        builder.content = Some(crate::types::FlowMultiTurnInputContent::Unknown)
    }
    builder
}

pub(crate) fn flow_output_event_correct_errors(
    mut builder: crate::types::builders::FlowOutputEventBuilder,
) -> crate::types::builders::FlowOutputEventBuilder {
    if builder.node_name.is_none() {
        builder.node_name = Some(Default::default())
    }
    if builder.node_type.is_none() {
        builder.node_type = "no value was set".parse::<crate::types::NodeType>().ok()
    }
    if builder.content.is_none() {
        builder.content = Some(crate::types::FlowOutputContent::Unknown)
    }
    builder
}

pub(crate) fn flow_trace_event_correct_errors(
    mut builder: crate::types::builders::FlowTraceEventBuilder,
) -> crate::types::builders::FlowTraceEventBuilder {
    if builder.trace.is_none() {
        builder.trace = Some(crate::types::FlowTrace::Unknown)
    }
    builder
}

pub(crate) fn node_action_event_correct_errors(
    mut builder: crate::types::builders::NodeActionEventBuilder,
) -> crate::types::builders::NodeActionEventBuilder {
    if builder.node_name.is_none() {
        builder.node_name = Some(Default::default())
    }
    if builder.timestamp.is_none() {
        builder.timestamp = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.request_id.is_none() {
        builder.request_id = Some(Default::default())
    }
    if builder.service_name.is_none() {
        builder.service_name = Some(Default::default())
    }
    if builder.operation_name.is_none() {
        builder.operation_name = Some(Default::default())
    }
    builder
}

pub(crate) fn node_dependency_event_correct_errors(
    mut builder: crate::types::builders::NodeDependencyEventBuilder,
) -> crate::types::builders::NodeDependencyEventBuilder {
    if builder.node_name.is_none() {
        builder.node_name = Some(Default::default())
    }
    if builder.timestamp.is_none() {
        builder.timestamp = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.trace_elements.is_none() {
        builder.trace_elements = Some(crate::types::NodeTraceElements::Unknown)
    }
    builder
}

pub(crate) fn node_failure_event_correct_errors(
    mut builder: crate::types::builders::NodeFailureEventBuilder,
) -> crate::types::builders::NodeFailureEventBuilder {
    if builder.node_name.is_none() {
        builder.node_name = Some(Default::default())
    }
    if builder.timestamp.is_none() {
        builder.timestamp = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.error_code.is_none() {
        builder.error_code = "no value was set".parse::<crate::types::NodeErrorCode>().ok()
    }
    if builder.error_message.is_none() {
        builder.error_message = Some(Default::default())
    }
    builder
}

pub(crate) fn node_input_event_correct_errors(
    mut builder: crate::types::builders::NodeInputEventBuilder,
) -> crate::types::builders::NodeInputEventBuilder {
    if builder.node_name.is_none() {
        builder.node_name = Some(Default::default())
    }
    if builder.timestamp.is_none() {
        builder.timestamp = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.fields.is_none() {
        builder.fields = Some(Default::default())
    }
    builder
}

pub(crate) fn node_output_event_correct_errors(
    mut builder: crate::types::builders::NodeOutputEventBuilder,
) -> crate::types::builders::NodeOutputEventBuilder {
    if builder.node_name.is_none() {
        builder.node_name = Some(Default::default())
    }
    if builder.timestamp.is_none() {
        builder.timestamp = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.fields.is_none() {
        builder.fields = Some(Default::default())
    }
    builder
}

pub(crate) fn rerank_document_correct_errors(
    mut builder: crate::types::builders::RerankDocumentBuilder,
) -> crate::types::builders::RerankDocumentBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::RerankDocumentType>().ok()
    }
    builder
}

pub(crate) fn retrieval_result_location_correct_errors(
    mut builder: crate::types::builders::RetrievalResultLocationBuilder,
) -> crate::types::builders::RetrievalResultLocationBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::RetrievalResultLocationType>().ok()
    }
    builder
}

pub(crate) fn retrieve_and_generate_output_event_correct_errors(
    mut builder: crate::types::builders::RetrieveAndGenerateOutputEventBuilder,
) -> crate::types::builders::RetrieveAndGenerateOutputEventBuilder {
    if builder.text.is_none() {
        builder.text = Some(Default::default())
    }
    builder
}

pub(crate) fn flow_input_field_correct_errors(
    mut builder: crate::types::builders::FlowInputFieldBuilder,
) -> crate::types::builders::FlowInputFieldBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.content.is_none() {
        builder.content = Some(crate::types::FlowExecutionContent::Unknown)
    }
    builder
}

pub(crate) fn flow_output_field_correct_errors(
    mut builder: crate::types::builders::FlowOutputFieldBuilder,
) -> crate::types::builders::FlowOutputFieldBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.content.is_none() {
        builder.content = Some(crate::types::FlowExecutionContent::Unknown)
    }
    builder
}

pub(crate) fn flow_trace_condition_node_result_event_correct_errors(
    mut builder: crate::types::builders::FlowTraceConditionNodeResultEventBuilder,
) -> crate::types::builders::FlowTraceConditionNodeResultEventBuilder {
    if builder.node_name.is_none() {
        builder.node_name = Some(Default::default())
    }
    if builder.timestamp.is_none() {
        builder.timestamp = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.satisfied_conditions.is_none() {
        builder.satisfied_conditions = Some(Default::default())
    }
    builder
}

pub(crate) fn flow_trace_dependency_event_correct_errors(
    mut builder: crate::types::builders::FlowTraceDependencyEventBuilder,
) -> crate::types::builders::FlowTraceDependencyEventBuilder {
    if builder.node_name.is_none() {
        builder.node_name = Some(Default::default())
    }
    if builder.timestamp.is_none() {
        builder.timestamp = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.trace_elements.is_none() {
        builder.trace_elements = Some(crate::types::TraceElements::Unknown)
    }
    builder
}

pub(crate) fn flow_trace_node_action_event_correct_errors(
    mut builder: crate::types::builders::FlowTraceNodeActionEventBuilder,
) -> crate::types::builders::FlowTraceNodeActionEventBuilder {
    if builder.node_name.is_none() {
        builder.node_name = Some(Default::default())
    }
    if builder.timestamp.is_none() {
        builder.timestamp = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.request_id.is_none() {
        builder.request_id = Some(Default::default())
    }
    if builder.service_name.is_none() {
        builder.service_name = Some(Default::default())
    }
    if builder.operation_name.is_none() {
        builder.operation_name = Some(Default::default())
    }
    builder
}

pub(crate) fn flow_trace_node_input_event_correct_errors(
    mut builder: crate::types::builders::FlowTraceNodeInputEventBuilder,
) -> crate::types::builders::FlowTraceNodeInputEventBuilder {
    if builder.node_name.is_none() {
        builder.node_name = Some(Default::default())
    }
    if builder.timestamp.is_none() {
        builder.timestamp = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.fields.is_none() {
        builder.fields = Some(Default::default())
    }
    builder
}

pub(crate) fn flow_trace_node_output_event_correct_errors(
    mut builder: crate::types::builders::FlowTraceNodeOutputEventBuilder,
) -> crate::types::builders::FlowTraceNodeOutputEventBuilder {
    if builder.node_name.is_none() {
        builder.node_name = Some(Default::default())
    }
    if builder.timestamp.is_none() {
        builder.timestamp = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.fields.is_none() {
        builder.fields = Some(Default::default())
    }
    builder
}

pub(crate) fn image_block_correct_errors(mut builder: crate::types::builders::ImageBlockBuilder) -> crate::types::builders::ImageBlockBuilder {
    if builder.format.is_none() {
        builder.format = "no value was set".parse::<crate::types::ImageFormat>().ok()
    }
    if builder.source.is_none() {
        builder.source = Some(crate::types::ImageSource::Unknown)
    }
    builder
}

pub(crate) fn node_input_field_correct_errors(
    mut builder: crate::types::builders::NodeInputFieldBuilder,
) -> crate::types::builders::NodeInputFieldBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.content.is_none() {
        builder.content = Some(crate::types::NodeExecutionContent::Unknown)
    }
    builder
}

pub(crate) fn node_output_field_correct_errors(
    mut builder: crate::types::builders::NodeOutputFieldBuilder,
) -> crate::types::builders::NodeOutputFieldBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.content.is_none() {
        builder.content = Some(crate::types::NodeExecutionContent::Unknown)
    }
    builder
}

pub(crate) fn satisfied_condition_correct_errors(
    mut builder: crate::types::builders::SatisfiedConditionBuilder,
) -> crate::types::builders::SatisfiedConditionBuilder {
    if builder.condition_name.is_none() {
        builder.condition_name = Some(Default::default())
    }
    builder
}

pub(crate) fn text_prompt_correct_errors(mut builder: crate::types::builders::TextPromptBuilder) -> crate::types::builders::TextPromptBuilder {
    if builder.text.is_none() {
        builder.text = Some(Default::default())
    }
    builder
}

pub(crate) fn api_invocation_input_correct_errors(
    mut builder: crate::types::builders::ApiInvocationInputBuilder,
) -> crate::types::builders::ApiInvocationInputBuilder {
    if builder.action_group.is_none() {
        builder.action_group = Some(Default::default())
    }
    builder
}

pub(crate) fn function_invocation_input_correct_errors(
    mut builder: crate::types::builders::FunctionInvocationInputBuilder,
) -> crate::types::builders::FunctionInvocationInputBuilder {
    if builder.action_group.is_none() {
        builder.action_group = Some(Default::default())
    }
    builder
}

pub(crate) fn node_input_source_correct_errors(
    mut builder: crate::types::builders::NodeInputSourceBuilder,
) -> crate::types::builders::NodeInputSourceBuilder {
    if builder.node_name.is_none() {
        builder.node_name = Some(Default::default())
    }
    if builder.output_field_name.is_none() {
        builder.output_field_name = Some(Default::default())
    }
    if builder.expression.is_none() {
        builder.expression = Some(Default::default())
    }
    builder
}

pub(crate) fn flow_trace_condition_correct_errors(
    mut builder: crate::types::builders::FlowTraceConditionBuilder,
) -> crate::types::builders::FlowTraceConditionBuilder {
    if builder.condition_name.is_none() {
        builder.condition_name = Some(Default::default())
    }
    builder
}

pub(crate) fn flow_trace_node_input_field_correct_errors(
    mut builder: crate::types::builders::FlowTraceNodeInputFieldBuilder,
) -> crate::types::builders::FlowTraceNodeInputFieldBuilder {
    if builder.node_input_name.is_none() {
        builder.node_input_name = Some(Default::default())
    }
    if builder.content.is_none() {
        builder.content = Some(crate::types::FlowTraceNodeInputContent::Unknown)
    }
    builder
}

pub(crate) fn flow_trace_node_output_field_correct_errors(
    mut builder: crate::types::builders::FlowTraceNodeOutputFieldBuilder,
) -> crate::types::builders::FlowTraceNodeOutputFieldBuilder {
    if builder.node_output_name.is_none() {
        builder.node_output_name = Some(Default::default())
    }
    if builder.content.is_none() {
        builder.content = Some(crate::types::FlowTraceNodeOutputContent::Unknown)
    }
    builder
}

pub(crate) fn node_input_execution_chain_item_correct_errors(
    mut builder: crate::types::builders::NodeInputExecutionChainItemBuilder,
) -> crate::types::builders::NodeInputExecutionChainItemBuilder {
    if builder.node_name.is_none() {
        builder.node_name = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::FlowControlNodeType>().ok()
    }
    builder
}

pub(crate) fn node_output_next_correct_errors(
    mut builder: crate::types::builders::NodeOutputNextBuilder,
) -> crate::types::builders::NodeOutputNextBuilder {
    if builder.node_name.is_none() {
        builder.node_name = Some(Default::default())
    }
    if builder.input_field_name.is_none() {
        builder.input_field_name = Some(Default::default())
    }
    builder
}

pub(crate) fn s3_location_correct_errors(mut builder: crate::types::builders::S3LocationBuilder) -> crate::types::builders::S3LocationBuilder {
    if builder.uri.is_none() {
        builder.uri = Some(Default::default())
    }
    builder
}

pub(crate) fn flow_trace_node_input_source_correct_errors(
    mut builder: crate::types::builders::FlowTraceNodeInputSourceBuilder,
) -> crate::types::builders::FlowTraceNodeInputSourceBuilder {
    if builder.node_name.is_none() {
        builder.node_name = Some(Default::default())
    }
    if builder.output_field_name.is_none() {
        builder.output_field_name = Some(Default::default())
    }
    if builder.expression.is_none() {
        builder.expression = Some(Default::default())
    }
    builder
}

pub(crate) fn reasoning_text_block_correct_errors(
    mut builder: crate::types::builders::ReasoningTextBlockBuilder,
) -> crate::types::builders::ReasoningTextBlockBuilder {
    if builder.text.is_none() {
        builder.text = Some(Default::default())
    }
    builder
}

pub(crate) fn flow_trace_node_input_execution_chain_item_correct_errors(
    mut builder: crate::types::builders::FlowTraceNodeInputExecutionChainItemBuilder,
) -> crate::types::builders::FlowTraceNodeInputExecutionChainItemBuilder {
    if builder.node_name.is_none() {
        builder.node_name = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::FlowControlNodeType>().ok()
    }
    builder
}

pub(crate) fn flow_trace_node_output_next_correct_errors(
    mut builder: crate::types::builders::FlowTraceNodeOutputNextBuilder,
) -> crate::types::builders::FlowTraceNodeOutputNextBuilder {
    if builder.node_name.is_none() {
        builder.node_name = Some(Default::default())
    }
    if builder.input_field_name.is_none() {
        builder.input_field_name = Some(Default::default())
    }
    builder
}

pub(crate) fn api_result_correct_errors(mut builder: crate::types::builders::ApiResultBuilder) -> crate::types::builders::ApiResultBuilder {
    if builder.action_group.is_none() {
        builder.action_group = Some(Default::default())
    }
    builder
}

pub(crate) fn function_result_correct_errors(
    mut builder: crate::types::builders::FunctionResultBuilder,
) -> crate::types::builders::FunctionResultBuilder {
    if builder.action_group.is_none() {
        builder.action_group = Some(Default::default())
    }
    builder
}

pub(crate) fn image_input_correct_errors(mut builder: crate::types::builders::ImageInputBuilder) -> crate::types::builders::ImageInputBuilder {
    if builder.format.is_none() {
        builder.format = "no value was set".parse::<crate::types::ImageInputFormat>().ok()
    }
    if builder.source.is_none() {
        builder.source = Some(crate::types::ImageInputSource::Unknown)
    }
    builder
}
