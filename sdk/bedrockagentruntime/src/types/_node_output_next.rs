// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the next node that receives output data.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct NodeOutputNext {
    /// <p>The name of the next node that receives the output data.</p>
    pub node_name: ::std::string::String,
    /// <p>The name of the input field in the next node that receives the data.</p>
    pub input_field_name: ::std::string::String,
}
impl NodeOutputNext {
    /// <p>The name of the next node that receives the output data.</p>
    pub fn node_name(&self) -> &str {
        use std::ops::Deref;
        self.node_name.deref()
    }
    /// <p>The name of the input field in the next node that receives the data.</p>
    pub fn input_field_name(&self) -> &str {
        use std::ops::Deref;
        self.input_field_name.deref()
    }
}
impl ::std::fmt::Debug for NodeOutputNext {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("NodeOutputNext");
        formatter.field("node_name", &"*** Sensitive Data Redacted ***");
        formatter.field("input_field_name", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl NodeOutputNext {
    /// Creates a new builder-style object to manufacture [`NodeOutputNext`](crate::types::NodeOutputNext).
    pub fn builder() -> crate::types::builders::NodeOutputNextBuilder {
        crate::types::builders::NodeOutputNextBuilder::default()
    }
}

/// A builder for [`NodeOutputNext`](crate::types::NodeOutputNext).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct NodeOutputNextBuilder {
    pub(crate) node_name: ::std::option::Option<::std::string::String>,
    pub(crate) input_field_name: ::std::option::Option<::std::string::String>,
}
impl NodeOutputNextBuilder {
    /// <p>The name of the next node that receives the output data.</p>
    /// This field is required.
    pub fn node_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.node_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the next node that receives the output data.</p>
    pub fn set_node_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.node_name = input;
        self
    }
    /// <p>The name of the next node that receives the output data.</p>
    pub fn get_node_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.node_name
    }
    /// <p>The name of the input field in the next node that receives the data.</p>
    /// This field is required.
    pub fn input_field_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.input_field_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the input field in the next node that receives the data.</p>
    pub fn set_input_field_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.input_field_name = input;
        self
    }
    /// <p>The name of the input field in the next node that receives the data.</p>
    pub fn get_input_field_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.input_field_name
    }
    /// Consumes the builder and constructs a [`NodeOutputNext`](crate::types::NodeOutputNext).
    /// This method will fail if any of the following fields are not set:
    /// - [`node_name`](crate::types::builders::NodeOutputNextBuilder::node_name)
    /// - [`input_field_name`](crate::types::builders::NodeOutputNextBuilder::input_field_name)
    pub fn build(self) -> ::std::result::Result<crate::types::NodeOutputNext, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::NodeOutputNext {
            node_name: self.node_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "node_name",
                    "node_name was not specified but it is required when building NodeOutputNext",
                )
            })?,
            input_field_name: self.input_field_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "input_field_name",
                    "input_field_name was not specified but it is required when building NodeOutputNext",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for NodeOutputNextBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("NodeOutputNextBuilder");
        formatter.field("node_name", &"*** Sensitive Data Redacted ***");
        formatter.field("input_field_name", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
