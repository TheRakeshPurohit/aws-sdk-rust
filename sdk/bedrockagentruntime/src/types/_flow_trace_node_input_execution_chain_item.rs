// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents an item in the execution chain for flow trace node input tracking.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct FlowTraceNodeInputExecutionChainItem {
    /// <p>The name of the node in the execution chain.</p>
    pub node_name: ::std::string::String,
    /// <p>The index position of this item in the execution chain.</p>
    pub index: ::std::option::Option<i32>,
    /// <p>The type of execution chain item. Supported values are Iterator and Loop.</p>
    pub r#type: crate::types::FlowControlNodeType,
}
impl FlowTraceNodeInputExecutionChainItem {
    /// <p>The name of the node in the execution chain.</p>
    pub fn node_name(&self) -> &str {
        use std::ops::Deref;
        self.node_name.deref()
    }
    /// <p>The index position of this item in the execution chain.</p>
    pub fn index(&self) -> ::std::option::Option<i32> {
        self.index
    }
    /// <p>The type of execution chain item. Supported values are Iterator and Loop.</p>
    pub fn r#type(&self) -> &crate::types::FlowControlNodeType {
        &self.r#type
    }
}
impl ::std::fmt::Debug for FlowTraceNodeInputExecutionChainItem {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("FlowTraceNodeInputExecutionChainItem");
        formatter.field("node_name", &"*** Sensitive Data Redacted ***");
        formatter.field("index", &"*** Sensitive Data Redacted ***");
        formatter.field("r#type", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl FlowTraceNodeInputExecutionChainItem {
    /// Creates a new builder-style object to manufacture [`FlowTraceNodeInputExecutionChainItem`](crate::types::FlowTraceNodeInputExecutionChainItem).
    pub fn builder() -> crate::types::builders::FlowTraceNodeInputExecutionChainItemBuilder {
        crate::types::builders::FlowTraceNodeInputExecutionChainItemBuilder::default()
    }
}

/// A builder for [`FlowTraceNodeInputExecutionChainItem`](crate::types::FlowTraceNodeInputExecutionChainItem).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct FlowTraceNodeInputExecutionChainItemBuilder {
    pub(crate) node_name: ::std::option::Option<::std::string::String>,
    pub(crate) index: ::std::option::Option<i32>,
    pub(crate) r#type: ::std::option::Option<crate::types::FlowControlNodeType>,
}
impl FlowTraceNodeInputExecutionChainItemBuilder {
    /// <p>The name of the node in the execution chain.</p>
    /// This field is required.
    pub fn node_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.node_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the node in the execution chain.</p>
    pub fn set_node_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.node_name = input;
        self
    }
    /// <p>The name of the node in the execution chain.</p>
    pub fn get_node_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.node_name
    }
    /// <p>The index position of this item in the execution chain.</p>
    pub fn index(mut self, input: i32) -> Self {
        self.index = ::std::option::Option::Some(input);
        self
    }
    /// <p>The index position of this item in the execution chain.</p>
    pub fn set_index(mut self, input: ::std::option::Option<i32>) -> Self {
        self.index = input;
        self
    }
    /// <p>The index position of this item in the execution chain.</p>
    pub fn get_index(&self) -> &::std::option::Option<i32> {
        &self.index
    }
    /// <p>The type of execution chain item. Supported values are Iterator and Loop.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::FlowControlNodeType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of execution chain item. Supported values are Iterator and Loop.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::FlowControlNodeType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of execution chain item. Supported values are Iterator and Loop.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::FlowControlNodeType> {
        &self.r#type
    }
    /// Consumes the builder and constructs a [`FlowTraceNodeInputExecutionChainItem`](crate::types::FlowTraceNodeInputExecutionChainItem).
    /// This method will fail if any of the following fields are not set:
    /// - [`node_name`](crate::types::builders::FlowTraceNodeInputExecutionChainItemBuilder::node_name)
    /// - [`r#type`](crate::types::builders::FlowTraceNodeInputExecutionChainItemBuilder::type)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::FlowTraceNodeInputExecutionChainItem, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::FlowTraceNodeInputExecutionChainItem {
            node_name: self.node_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "node_name",
                    "node_name was not specified but it is required when building FlowTraceNodeInputExecutionChainItem",
                )
            })?,
            index: self.index,
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building FlowTraceNodeInputExecutionChainItem",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for FlowTraceNodeInputExecutionChainItemBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("FlowTraceNodeInputExecutionChainItemBuilder");
        formatter.field("node_name", &"*** Sensitive Data Redacted ***");
        formatter.field("index", &"*** Sensitive Data Redacted ***");
        formatter.field("r#type", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
