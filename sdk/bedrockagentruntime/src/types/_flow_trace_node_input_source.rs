// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the source of input data for a flow trace node field.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct FlowTraceNodeInputSource {
    /// <p>The name of the source node that provides the input data.</p>
    pub node_name: ::std::string::String,
    /// <p>The name of the output field from the source node.</p>
    pub output_field_name: ::std::string::String,
    /// <p>The expression used to extract data from the source.</p>
    pub expression: ::std::string::String,
}
impl FlowTraceNodeInputSource {
    /// <p>The name of the source node that provides the input data.</p>
    pub fn node_name(&self) -> &str {
        use std::ops::Deref;
        self.node_name.deref()
    }
    /// <p>The name of the output field from the source node.</p>
    pub fn output_field_name(&self) -> &str {
        use std::ops::Deref;
        self.output_field_name.deref()
    }
    /// <p>The expression used to extract data from the source.</p>
    pub fn expression(&self) -> &str {
        use std::ops::Deref;
        self.expression.deref()
    }
}
impl ::std::fmt::Debug for FlowTraceNodeInputSource {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("FlowTraceNodeInputSource");
        formatter.field("node_name", &"*** Sensitive Data Redacted ***");
        formatter.field("output_field_name", &"*** Sensitive Data Redacted ***");
        formatter.field("expression", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl FlowTraceNodeInputSource {
    /// Creates a new builder-style object to manufacture [`FlowTraceNodeInputSource`](crate::types::FlowTraceNodeInputSource).
    pub fn builder() -> crate::types::builders::FlowTraceNodeInputSourceBuilder {
        crate::types::builders::FlowTraceNodeInputSourceBuilder::default()
    }
}

/// A builder for [`FlowTraceNodeInputSource`](crate::types::FlowTraceNodeInputSource).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct FlowTraceNodeInputSourceBuilder {
    pub(crate) node_name: ::std::option::Option<::std::string::String>,
    pub(crate) output_field_name: ::std::option::Option<::std::string::String>,
    pub(crate) expression: ::std::option::Option<::std::string::String>,
}
impl FlowTraceNodeInputSourceBuilder {
    /// <p>The name of the source node that provides the input data.</p>
    /// This field is required.
    pub fn node_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.node_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the source node that provides the input data.</p>
    pub fn set_node_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.node_name = input;
        self
    }
    /// <p>The name of the source node that provides the input data.</p>
    pub fn get_node_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.node_name
    }
    /// <p>The name of the output field from the source node.</p>
    /// This field is required.
    pub fn output_field_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.output_field_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the output field from the source node.</p>
    pub fn set_output_field_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.output_field_name = input;
        self
    }
    /// <p>The name of the output field from the source node.</p>
    pub fn get_output_field_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.output_field_name
    }
    /// <p>The expression used to extract data from the source.</p>
    /// This field is required.
    pub fn expression(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.expression = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The expression used to extract data from the source.</p>
    pub fn set_expression(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.expression = input;
        self
    }
    /// <p>The expression used to extract data from the source.</p>
    pub fn get_expression(&self) -> &::std::option::Option<::std::string::String> {
        &self.expression
    }
    /// Consumes the builder and constructs a [`FlowTraceNodeInputSource`](crate::types::FlowTraceNodeInputSource).
    /// This method will fail if any of the following fields are not set:
    /// - [`node_name`](crate::types::builders::FlowTraceNodeInputSourceBuilder::node_name)
    /// - [`output_field_name`](crate::types::builders::FlowTraceNodeInputSourceBuilder::output_field_name)
    /// - [`expression`](crate::types::builders::FlowTraceNodeInputSourceBuilder::expression)
    pub fn build(self) -> ::std::result::Result<crate::types::FlowTraceNodeInputSource, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::FlowTraceNodeInputSource {
            node_name: self.node_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "node_name",
                    "node_name was not specified but it is required when building FlowTraceNodeInputSource",
                )
            })?,
            output_field_name: self.output_field_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "output_field_name",
                    "output_field_name was not specified but it is required when building FlowTraceNodeInputSource",
                )
            })?,
            expression: self.expression.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "expression",
                    "expression was not specified but it is required when building FlowTraceNodeInputSource",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for FlowTraceNodeInputSourceBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("FlowTraceNodeInputSourceBuilder");
        formatter.field("node_name", &"*** Sensitive Data Redacted ***");
        formatter.field("output_field_name", &"*** Sensitive Data Redacted ***");
        formatter.field("expression", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
