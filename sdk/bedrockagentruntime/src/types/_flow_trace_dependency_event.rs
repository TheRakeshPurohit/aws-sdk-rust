// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about a dependency trace event in the flow.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct FlowTraceDependencyEvent {
    /// <p>The name of the node that generated the dependency trace.</p>
    pub node_name: ::std::string::String,
    /// <p>The date and time that the dependency trace was generated.</p>
    pub timestamp: ::aws_smithy_types::DateTime,
    /// <p>The trace elements containing detailed information about the dependency.</p>
    pub trace_elements: ::std::option::Option<crate::types::TraceElements>,
}
impl FlowTraceDependencyEvent {
    /// <p>The name of the node that generated the dependency trace.</p>
    pub fn node_name(&self) -> &str {
        use std::ops::Deref;
        self.node_name.deref()
    }
    /// <p>The date and time that the dependency trace was generated.</p>
    pub fn timestamp(&self) -> &::aws_smithy_types::DateTime {
        &self.timestamp
    }
    /// <p>The trace elements containing detailed information about the dependency.</p>
    pub fn trace_elements(&self) -> ::std::option::Option<&crate::types::TraceElements> {
        self.trace_elements.as_ref()
    }
}
impl ::std::fmt::Debug for FlowTraceDependencyEvent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("FlowTraceDependencyEvent");
        formatter.field("node_name", &"*** Sensitive Data Redacted ***");
        formatter.field("timestamp", &"*** Sensitive Data Redacted ***");
        formatter.field("trace_elements", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl FlowTraceDependencyEvent {
    /// Creates a new builder-style object to manufacture [`FlowTraceDependencyEvent`](crate::types::FlowTraceDependencyEvent).
    pub fn builder() -> crate::types::builders::FlowTraceDependencyEventBuilder {
        crate::types::builders::FlowTraceDependencyEventBuilder::default()
    }
}

/// A builder for [`FlowTraceDependencyEvent`](crate::types::FlowTraceDependencyEvent).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct FlowTraceDependencyEventBuilder {
    pub(crate) node_name: ::std::option::Option<::std::string::String>,
    pub(crate) timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) trace_elements: ::std::option::Option<crate::types::TraceElements>,
}
impl FlowTraceDependencyEventBuilder {
    /// <p>The name of the node that generated the dependency trace.</p>
    /// This field is required.
    pub fn node_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.node_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the node that generated the dependency trace.</p>
    pub fn set_node_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.node_name = input;
        self
    }
    /// <p>The name of the node that generated the dependency trace.</p>
    pub fn get_node_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.node_name
    }
    /// <p>The date and time that the dependency trace was generated.</p>
    /// This field is required.
    pub fn timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time that the dependency trace was generated.</p>
    pub fn set_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.timestamp = input;
        self
    }
    /// <p>The date and time that the dependency trace was generated.</p>
    pub fn get_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.timestamp
    }
    /// <p>The trace elements containing detailed information about the dependency.</p>
    /// This field is required.
    pub fn trace_elements(mut self, input: crate::types::TraceElements) -> Self {
        self.trace_elements = ::std::option::Option::Some(input);
        self
    }
    /// <p>The trace elements containing detailed information about the dependency.</p>
    pub fn set_trace_elements(mut self, input: ::std::option::Option<crate::types::TraceElements>) -> Self {
        self.trace_elements = input;
        self
    }
    /// <p>The trace elements containing detailed information about the dependency.</p>
    pub fn get_trace_elements(&self) -> &::std::option::Option<crate::types::TraceElements> {
        &self.trace_elements
    }
    /// Consumes the builder and constructs a [`FlowTraceDependencyEvent`](crate::types::FlowTraceDependencyEvent).
    /// This method will fail if any of the following fields are not set:
    /// - [`node_name`](crate::types::builders::FlowTraceDependencyEventBuilder::node_name)
    /// - [`timestamp`](crate::types::builders::FlowTraceDependencyEventBuilder::timestamp)
    pub fn build(self) -> ::std::result::Result<crate::types::FlowTraceDependencyEvent, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::FlowTraceDependencyEvent {
            node_name: self.node_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "node_name",
                    "node_name was not specified but it is required when building FlowTraceDependencyEvent",
                )
            })?,
            timestamp: self.timestamp.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "timestamp",
                    "timestamp was not specified but it is required when building FlowTraceDependencyEvent",
                )
            })?,
            trace_elements: self.trace_elements,
        })
    }
}
impl ::std::fmt::Debug for FlowTraceDependencyEventBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("FlowTraceDependencyEventBuilder");
        formatter.field("node_name", &"*** Sensitive Data Redacted ***");
        formatter.field("timestamp", &"*** Sensitive Data Redacted ***");
        formatter.field("trace_elements", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
