// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about an action (operation) called by a node during execution.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct NodeActionEvent {
    /// <p>The name of the node that called the operation.</p>
    pub node_name: ::std::string::String,
    /// <p>The date and time that the operation was called.</p>
    pub timestamp: ::aws_smithy_types::DateTime,
    /// <p>The ID of the request that the node made to the operation.</p>
    pub request_id: ::std::string::String,
    /// <p>The name of the service that the node called.</p>
    pub service_name: ::std::string::String,
    /// <p>The name of the operation that the node called.</p>
    pub operation_name: ::std::string::String,
    /// <p>The request payload sent to the downstream service.</p>
    pub operation_request: ::std::option::Option<::aws_smithy_types::Document>,
    /// <p>The response payload received from the downstream service.</p>
    pub operation_response: ::std::option::Option<::aws_smithy_types::Document>,
}
impl NodeActionEvent {
    /// <p>The name of the node that called the operation.</p>
    pub fn node_name(&self) -> &str {
        use std::ops::Deref;
        self.node_name.deref()
    }
    /// <p>The date and time that the operation was called.</p>
    pub fn timestamp(&self) -> &::aws_smithy_types::DateTime {
        &self.timestamp
    }
    /// <p>The ID of the request that the node made to the operation.</p>
    pub fn request_id(&self) -> &str {
        use std::ops::Deref;
        self.request_id.deref()
    }
    /// <p>The name of the service that the node called.</p>
    pub fn service_name(&self) -> &str {
        use std::ops::Deref;
        self.service_name.deref()
    }
    /// <p>The name of the operation that the node called.</p>
    pub fn operation_name(&self) -> &str {
        use std::ops::Deref;
        self.operation_name.deref()
    }
    /// <p>The request payload sent to the downstream service.</p>
    pub fn operation_request(&self) -> ::std::option::Option<&::aws_smithy_types::Document> {
        self.operation_request.as_ref()
    }
    /// <p>The response payload received from the downstream service.</p>
    pub fn operation_response(&self) -> ::std::option::Option<&::aws_smithy_types::Document> {
        self.operation_response.as_ref()
    }
}
impl ::std::fmt::Debug for NodeActionEvent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("NodeActionEvent");
        formatter.field("node_name", &"*** Sensitive Data Redacted ***");
        formatter.field("timestamp", &"*** Sensitive Data Redacted ***");
        formatter.field("request_id", &"*** Sensitive Data Redacted ***");
        formatter.field("service_name", &"*** Sensitive Data Redacted ***");
        formatter.field("operation_name", &"*** Sensitive Data Redacted ***");
        formatter.field("operation_request", &"*** Sensitive Data Redacted ***");
        formatter.field("operation_response", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl NodeActionEvent {
    /// Creates a new builder-style object to manufacture [`NodeActionEvent`](crate::types::NodeActionEvent).
    pub fn builder() -> crate::types::builders::NodeActionEventBuilder {
        crate::types::builders::NodeActionEventBuilder::default()
    }
}

/// A builder for [`NodeActionEvent`](crate::types::NodeActionEvent).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct NodeActionEventBuilder {
    pub(crate) node_name: ::std::option::Option<::std::string::String>,
    pub(crate) timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) request_id: ::std::option::Option<::std::string::String>,
    pub(crate) service_name: ::std::option::Option<::std::string::String>,
    pub(crate) operation_name: ::std::option::Option<::std::string::String>,
    pub(crate) operation_request: ::std::option::Option<::aws_smithy_types::Document>,
    pub(crate) operation_response: ::std::option::Option<::aws_smithy_types::Document>,
}
impl NodeActionEventBuilder {
    /// <p>The name of the node that called the operation.</p>
    /// This field is required.
    pub fn node_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.node_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the node that called the operation.</p>
    pub fn set_node_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.node_name = input;
        self
    }
    /// <p>The name of the node that called the operation.</p>
    pub fn get_node_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.node_name
    }
    /// <p>The date and time that the operation was called.</p>
    /// This field is required.
    pub fn timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time that the operation was called.</p>
    pub fn set_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.timestamp = input;
        self
    }
    /// <p>The date and time that the operation was called.</p>
    pub fn get_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.timestamp
    }
    /// <p>The ID of the request that the node made to the operation.</p>
    /// This field is required.
    pub fn request_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.request_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the request that the node made to the operation.</p>
    pub fn set_request_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.request_id = input;
        self
    }
    /// <p>The ID of the request that the node made to the operation.</p>
    pub fn get_request_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.request_id
    }
    /// <p>The name of the service that the node called.</p>
    /// This field is required.
    pub fn service_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.service_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the service that the node called.</p>
    pub fn set_service_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.service_name = input;
        self
    }
    /// <p>The name of the service that the node called.</p>
    pub fn get_service_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.service_name
    }
    /// <p>The name of the operation that the node called.</p>
    /// This field is required.
    pub fn operation_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.operation_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the operation that the node called.</p>
    pub fn set_operation_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.operation_name = input;
        self
    }
    /// <p>The name of the operation that the node called.</p>
    pub fn get_operation_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.operation_name
    }
    /// <p>The request payload sent to the downstream service.</p>
    pub fn operation_request(mut self, input: ::aws_smithy_types::Document) -> Self {
        self.operation_request = ::std::option::Option::Some(input);
        self
    }
    /// <p>The request payload sent to the downstream service.</p>
    pub fn set_operation_request(mut self, input: ::std::option::Option<::aws_smithy_types::Document>) -> Self {
        self.operation_request = input;
        self
    }
    /// <p>The request payload sent to the downstream service.</p>
    pub fn get_operation_request(&self) -> &::std::option::Option<::aws_smithy_types::Document> {
        &self.operation_request
    }
    /// <p>The response payload received from the downstream service.</p>
    pub fn operation_response(mut self, input: ::aws_smithy_types::Document) -> Self {
        self.operation_response = ::std::option::Option::Some(input);
        self
    }
    /// <p>The response payload received from the downstream service.</p>
    pub fn set_operation_response(mut self, input: ::std::option::Option<::aws_smithy_types::Document>) -> Self {
        self.operation_response = input;
        self
    }
    /// <p>The response payload received from the downstream service.</p>
    pub fn get_operation_response(&self) -> &::std::option::Option<::aws_smithy_types::Document> {
        &self.operation_response
    }
    /// Consumes the builder and constructs a [`NodeActionEvent`](crate::types::NodeActionEvent).
    /// This method will fail if any of the following fields are not set:
    /// - [`node_name`](crate::types::builders::NodeActionEventBuilder::node_name)
    /// - [`timestamp`](crate::types::builders::NodeActionEventBuilder::timestamp)
    /// - [`request_id`](crate::types::builders::NodeActionEventBuilder::request_id)
    /// - [`service_name`](crate::types::builders::NodeActionEventBuilder::service_name)
    /// - [`operation_name`](crate::types::builders::NodeActionEventBuilder::operation_name)
    pub fn build(self) -> ::std::result::Result<crate::types::NodeActionEvent, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::NodeActionEvent {
            node_name: self.node_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "node_name",
                    "node_name was not specified but it is required when building NodeActionEvent",
                )
            })?,
            timestamp: self.timestamp.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "timestamp",
                    "timestamp was not specified but it is required when building NodeActionEvent",
                )
            })?,
            request_id: self.request_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "request_id",
                    "request_id was not specified but it is required when building NodeActionEvent",
                )
            })?,
            service_name: self.service_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "service_name",
                    "service_name was not specified but it is required when building NodeActionEvent",
                )
            })?,
            operation_name: self.operation_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "operation_name",
                    "operation_name was not specified but it is required when building NodeActionEvent",
                )
            })?,
            operation_request: self.operation_request,
            operation_response: self.operation_response,
        })
    }
}
impl ::std::fmt::Debug for NodeActionEventBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("NodeActionEventBuilder");
        formatter.field("node_name", &"*** Sensitive Data Redacted ***");
        formatter.field("timestamp", &"*** Sensitive Data Redacted ***");
        formatter.field("request_id", &"*** Sensitive Data Redacted ***");
        formatter.field("service_name", &"*** Sensitive Data Redacted ***");
        formatter.field("operation_name", &"*** Sensitive Data Redacted ***");
        formatter.field("operation_request", &"*** Sensitive Data Redacted ***");
        formatter.field("operation_response", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
