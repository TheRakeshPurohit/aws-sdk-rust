// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Action setting to use in the place of a rule action that is configured inside the rule group. You specify one override for each rule whose action you want to change.</p><note>
/// <p>Verify the rule names in your overrides carefully. With managed rule groups, WAF silently ignores any override that uses an invalid rule name. With customer-owned rule groups, invalid rule names in your overrides will cause web ACL updates to fail. An invalid rule name is any name that doesn't exactly match the case-sensitive name of an existing rule in the rule group.</p>
/// </note>
/// <p>You can use overrides for testing, for example you can override all of rule actions to <code>Count</code> and then monitor the resulting count metrics to understand how the rule group would handle your web traffic. You can also permanently override some or all actions, to modify how the rule group manages your web traffic.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RuleActionOverride {
    /// <p>The name of the rule to override.</p><note>
    /// <p>Verify the rule names in your overrides carefully. With managed rule groups, WAF silently ignores any override that uses an invalid rule name. With customer-owned rule groups, invalid rule names in your overrides will cause web ACL updates to fail. An invalid rule name is any name that doesn't exactly match the case-sensitive name of an existing rule in the rule group.</p>
    /// </note>
    pub name: ::std::string::String,
    /// <p>The override action to use, in place of the configured action of the rule in the rule group.</p>
    pub action_to_use: ::std::option::Option<crate::types::RuleAction>,
}
impl RuleActionOverride {
    /// <p>The name of the rule to override.</p><note>
    /// <p>Verify the rule names in your overrides carefully. With managed rule groups, WAF silently ignores any override that uses an invalid rule name. With customer-owned rule groups, invalid rule names in your overrides will cause web ACL updates to fail. An invalid rule name is any name that doesn't exactly match the case-sensitive name of an existing rule in the rule group.</p>
    /// </note>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The override action to use, in place of the configured action of the rule in the rule group.</p>
    pub fn action_to_use(&self) -> ::std::option::Option<&crate::types::RuleAction> {
        self.action_to_use.as_ref()
    }
}
impl RuleActionOverride {
    /// Creates a new builder-style object to manufacture [`RuleActionOverride`](crate::types::RuleActionOverride).
    pub fn builder() -> crate::types::builders::RuleActionOverrideBuilder {
        crate::types::builders::RuleActionOverrideBuilder::default()
    }
}

/// A builder for [`RuleActionOverride`](crate::types::RuleActionOverride).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RuleActionOverrideBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) action_to_use: ::std::option::Option<crate::types::RuleAction>,
}
impl RuleActionOverrideBuilder {
    /// <p>The name of the rule to override.</p><note>
    /// <p>Verify the rule names in your overrides carefully. With managed rule groups, WAF silently ignores any override that uses an invalid rule name. With customer-owned rule groups, invalid rule names in your overrides will cause web ACL updates to fail. An invalid rule name is any name that doesn't exactly match the case-sensitive name of an existing rule in the rule group.</p>
    /// </note>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the rule to override.</p><note>
    /// <p>Verify the rule names in your overrides carefully. With managed rule groups, WAF silently ignores any override that uses an invalid rule name. With customer-owned rule groups, invalid rule names in your overrides will cause web ACL updates to fail. An invalid rule name is any name that doesn't exactly match the case-sensitive name of an existing rule in the rule group.</p>
    /// </note>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the rule to override.</p><note>
    /// <p>Verify the rule names in your overrides carefully. With managed rule groups, WAF silently ignores any override that uses an invalid rule name. With customer-owned rule groups, invalid rule names in your overrides will cause web ACL updates to fail. An invalid rule name is any name that doesn't exactly match the case-sensitive name of an existing rule in the rule group.</p>
    /// </note>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The override action to use, in place of the configured action of the rule in the rule group.</p>
    /// This field is required.
    pub fn action_to_use(mut self, input: crate::types::RuleAction) -> Self {
        self.action_to_use = ::std::option::Option::Some(input);
        self
    }
    /// <p>The override action to use, in place of the configured action of the rule in the rule group.</p>
    pub fn set_action_to_use(mut self, input: ::std::option::Option<crate::types::RuleAction>) -> Self {
        self.action_to_use = input;
        self
    }
    /// <p>The override action to use, in place of the configured action of the rule in the rule group.</p>
    pub fn get_action_to_use(&self) -> &::std::option::Option<crate::types::RuleAction> {
        &self.action_to_use
    }
    /// Consumes the builder and constructs a [`RuleActionOverride`](crate::types::RuleActionOverride).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::RuleActionOverrideBuilder::name)
    pub fn build(self) -> ::std::result::Result<crate::types::RuleActionOverride, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RuleActionOverride {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building RuleActionOverride",
                )
            })?,
            action_to_use: self.action_to_use,
        })
    }
}
