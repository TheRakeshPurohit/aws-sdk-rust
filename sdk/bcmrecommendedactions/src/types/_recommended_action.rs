// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a specific recommended action.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RecommendedAction {
    /// <p>The ID for the recommended action.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The type of action you can take by adopting the recommended action.</p>
    pub r#type: ::std::option::Option<crate::types::ActionType>,
    /// <p>The account that the recommended action is for.</p>
    pub account_id: ::std::option::Option<::std::string::String>,
    /// <p>The severity associated with the recommended action.</p>
    pub severity: ::std::option::Option<crate::types::Severity>,
    /// <p>The feature associated with the recommended action.</p>
    pub feature: ::std::option::Option<crate::types::Feature>,
    /// <p>Context that applies to the recommended action.</p>
    pub context: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The possible next steps to execute the recommended action.</p>
    pub next_steps: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The time when the recommended action status was last updated.</p>
    pub last_updated_time_stamp: ::std::option::Option<::std::string::String>,
}
impl RecommendedAction {
    /// <p>The ID for the recommended action.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The type of action you can take by adopting the recommended action.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::ActionType> {
        self.r#type.as_ref()
    }
    /// <p>The account that the recommended action is for.</p>
    pub fn account_id(&self) -> ::std::option::Option<&str> {
        self.account_id.as_deref()
    }
    /// <p>The severity associated with the recommended action.</p>
    pub fn severity(&self) -> ::std::option::Option<&crate::types::Severity> {
        self.severity.as_ref()
    }
    /// <p>The feature associated with the recommended action.</p>
    pub fn feature(&self) -> ::std::option::Option<&crate::types::Feature> {
        self.feature.as_ref()
    }
    /// <p>Context that applies to the recommended action.</p>
    pub fn context(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.context.as_ref()
    }
    /// <p>The possible next steps to execute the recommended action.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.next_steps.is_none()`.
    pub fn next_steps(&self) -> &[::std::string::String] {
        self.next_steps.as_deref().unwrap_or_default()
    }
    /// <p>The time when the recommended action status was last updated.</p>
    pub fn last_updated_time_stamp(&self) -> ::std::option::Option<&str> {
        self.last_updated_time_stamp.as_deref()
    }
}
impl RecommendedAction {
    /// Creates a new builder-style object to manufacture [`RecommendedAction`](crate::types::RecommendedAction).
    pub fn builder() -> crate::types::builders::RecommendedActionBuilder {
        crate::types::builders::RecommendedActionBuilder::default()
    }
}

/// A builder for [`RecommendedAction`](crate::types::RecommendedAction).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RecommendedActionBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::ActionType>,
    pub(crate) account_id: ::std::option::Option<::std::string::String>,
    pub(crate) severity: ::std::option::Option<crate::types::Severity>,
    pub(crate) feature: ::std::option::Option<crate::types::Feature>,
    pub(crate) context: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) next_steps: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) last_updated_time_stamp: ::std::option::Option<::std::string::String>,
}
impl RecommendedActionBuilder {
    /// <p>The ID for the recommended action.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID for the recommended action.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The ID for the recommended action.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The type of action you can take by adopting the recommended action.</p>
    pub fn r#type(mut self, input: crate::types::ActionType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of action you can take by adopting the recommended action.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::ActionType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of action you can take by adopting the recommended action.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::ActionType> {
        &self.r#type
    }
    /// <p>The account that the recommended action is for.</p>
    pub fn account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The account that the recommended action is for.</p>
    pub fn set_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// <p>The account that the recommended action is for.</p>
    pub fn get_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.account_id
    }
    /// <p>The severity associated with the recommended action.</p>
    pub fn severity(mut self, input: crate::types::Severity) -> Self {
        self.severity = ::std::option::Option::Some(input);
        self
    }
    /// <p>The severity associated with the recommended action.</p>
    pub fn set_severity(mut self, input: ::std::option::Option<crate::types::Severity>) -> Self {
        self.severity = input;
        self
    }
    /// <p>The severity associated with the recommended action.</p>
    pub fn get_severity(&self) -> &::std::option::Option<crate::types::Severity> {
        &self.severity
    }
    /// <p>The feature associated with the recommended action.</p>
    pub fn feature(mut self, input: crate::types::Feature) -> Self {
        self.feature = ::std::option::Option::Some(input);
        self
    }
    /// <p>The feature associated with the recommended action.</p>
    pub fn set_feature(mut self, input: ::std::option::Option<crate::types::Feature>) -> Self {
        self.feature = input;
        self
    }
    /// <p>The feature associated with the recommended action.</p>
    pub fn get_feature(&self) -> &::std::option::Option<crate::types::Feature> {
        &self.feature
    }
    /// Adds a key-value pair to `context`.
    ///
    /// To override the contents of this collection use [`set_context`](Self::set_context).
    ///
    /// <p>Context that applies to the recommended action.</p>
    pub fn context(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.context.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.context = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Context that applies to the recommended action.</p>
    pub fn set_context(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.context = input;
        self
    }
    /// <p>Context that applies to the recommended action.</p>
    pub fn get_context(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.context
    }
    /// Appends an item to `next_steps`.
    ///
    /// To override the contents of this collection use [`set_next_steps`](Self::set_next_steps).
    ///
    /// <p>The possible next steps to execute the recommended action.</p>
    pub fn next_steps(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.next_steps.unwrap_or_default();
        v.push(input.into());
        self.next_steps = ::std::option::Option::Some(v);
        self
    }
    /// <p>The possible next steps to execute the recommended action.</p>
    pub fn set_next_steps(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.next_steps = input;
        self
    }
    /// <p>The possible next steps to execute the recommended action.</p>
    pub fn get_next_steps(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.next_steps
    }
    /// <p>The time when the recommended action status was last updated.</p>
    pub fn last_updated_time_stamp(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.last_updated_time_stamp = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The time when the recommended action status was last updated.</p>
    pub fn set_last_updated_time_stamp(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.last_updated_time_stamp = input;
        self
    }
    /// <p>The time when the recommended action status was last updated.</p>
    pub fn get_last_updated_time_stamp(&self) -> &::std::option::Option<::std::string::String> {
        &self.last_updated_time_stamp
    }
    /// Consumes the builder and constructs a [`RecommendedAction`](crate::types::RecommendedAction).
    pub fn build(self) -> crate::types::RecommendedAction {
        crate::types::RecommendedAction {
            id: self.id,
            r#type: self.r#type,
            account_id: self.account_id,
            severity: self.severity,
            feature: self.feature,
            context: self.context,
            next_steps: self.next_steps,
            last_updated_time_stamp: self.last_updated_time_stamp,
        }
    }
}
