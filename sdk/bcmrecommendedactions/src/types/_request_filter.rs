// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Enables filtering of results based on specified action criteria. You can define multiple action filters to refine results using combinations of feature type, severity level, and recommendation type.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RequestFilter {
    /// <p>A list of action filters that define criteria for filtering results. Each filter specifies a key, match option, and corresponding values to filter on.</p>
    pub actions: ::std::option::Option<::std::vec::Vec<crate::types::ActionFilter>>,
}
impl RequestFilter {
    /// <p>A list of action filters that define criteria for filtering results. Each filter specifies a key, match option, and corresponding values to filter on.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.actions.is_none()`.
    pub fn actions(&self) -> &[crate::types::ActionFilter] {
        self.actions.as_deref().unwrap_or_default()
    }
}
impl RequestFilter {
    /// Creates a new builder-style object to manufacture [`RequestFilter`](crate::types::RequestFilter).
    pub fn builder() -> crate::types::builders::RequestFilterBuilder {
        crate::types::builders::RequestFilterBuilder::default()
    }
}

/// A builder for [`RequestFilter`](crate::types::RequestFilter).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RequestFilterBuilder {
    pub(crate) actions: ::std::option::Option<::std::vec::Vec<crate::types::ActionFilter>>,
}
impl RequestFilterBuilder {
    /// Appends an item to `actions`.
    ///
    /// To override the contents of this collection use [`set_actions`](Self::set_actions).
    ///
    /// <p>A list of action filters that define criteria for filtering results. Each filter specifies a key, match option, and corresponding values to filter on.</p>
    pub fn actions(mut self, input: crate::types::ActionFilter) -> Self {
        let mut v = self.actions.unwrap_or_default();
        v.push(input);
        self.actions = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of action filters that define criteria for filtering results. Each filter specifies a key, match option, and corresponding values to filter on.</p>
    pub fn set_actions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ActionFilter>>) -> Self {
        self.actions = input;
        self
    }
    /// <p>A list of action filters that define criteria for filtering results. Each filter specifies a key, match option, and corresponding values to filter on.</p>
    pub fn get_actions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ActionFilter>> {
        &self.actions
    }
    /// Consumes the builder and constructs a [`RequestFilter`](crate::types::RequestFilter).
    pub fn build(self) -> crate::types::RequestFilter {
        crate::types::RequestFilter { actions: self.actions }
    }
}
