// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about a member account.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MemberAccount {
    /// <p>The Amazon Resource Name (ARN) of the notification configuration associated with the member account.</p>
    pub notification_configuration_arn: ::std::option::Option<::std::string::String>,
    /// <p>The AWS account ID of the member account.</p>
    pub account_id: ::std::string::String,
    /// <p>The current status of the member account.</p>
    pub status: crate::types::MemberAccountNotificationConfigurationStatus,
    /// <p>The reason for the current status of the member account.</p>
    pub status_reason: ::std::string::String,
    /// <p>The unique identifier of the organizational unit containing the member account.</p>
    pub organizational_unit_id: ::std::string::String,
}
impl MemberAccount {
    /// <p>The Amazon Resource Name (ARN) of the notification configuration associated with the member account.</p>
    pub fn notification_configuration_arn(&self) -> ::std::option::Option<&str> {
        self.notification_configuration_arn.as_deref()
    }
    /// <p>The AWS account ID of the member account.</p>
    pub fn account_id(&self) -> &str {
        use std::ops::Deref;
        self.account_id.deref()
    }
    /// <p>The current status of the member account.</p>
    pub fn status(&self) -> &crate::types::MemberAccountNotificationConfigurationStatus {
        &self.status
    }
    /// <p>The reason for the current status of the member account.</p>
    pub fn status_reason(&self) -> &str {
        use std::ops::Deref;
        self.status_reason.deref()
    }
    /// <p>The unique identifier of the organizational unit containing the member account.</p>
    pub fn organizational_unit_id(&self) -> &str {
        use std::ops::Deref;
        self.organizational_unit_id.deref()
    }
}
impl MemberAccount {
    /// Creates a new builder-style object to manufacture [`MemberAccount`](crate::types::MemberAccount).
    pub fn builder() -> crate::types::builders::MemberAccountBuilder {
        crate::types::builders::MemberAccountBuilder::default()
    }
}

/// A builder for [`MemberAccount`](crate::types::MemberAccount).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct MemberAccountBuilder {
    pub(crate) notification_configuration_arn: ::std::option::Option<::std::string::String>,
    pub(crate) account_id: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::MemberAccountNotificationConfigurationStatus>,
    pub(crate) status_reason: ::std::option::Option<::std::string::String>,
    pub(crate) organizational_unit_id: ::std::option::Option<::std::string::String>,
}
impl MemberAccountBuilder {
    /// <p>The Amazon Resource Name (ARN) of the notification configuration associated with the member account.</p>
    pub fn notification_configuration_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.notification_configuration_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the notification configuration associated with the member account.</p>
    pub fn set_notification_configuration_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.notification_configuration_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the notification configuration associated with the member account.</p>
    pub fn get_notification_configuration_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.notification_configuration_arn
    }
    /// <p>The AWS account ID of the member account.</p>
    /// This field is required.
    pub fn account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The AWS account ID of the member account.</p>
    pub fn set_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// <p>The AWS account ID of the member account.</p>
    pub fn get_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.account_id
    }
    /// <p>The current status of the member account.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::MemberAccountNotificationConfigurationStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the member account.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::MemberAccountNotificationConfigurationStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status of the member account.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::MemberAccountNotificationConfigurationStatus> {
        &self.status
    }
    /// <p>The reason for the current status of the member account.</p>
    /// This field is required.
    pub fn status_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The reason for the current status of the member account.</p>
    pub fn set_status_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_reason = input;
        self
    }
    /// <p>The reason for the current status of the member account.</p>
    pub fn get_status_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_reason
    }
    /// <p>The unique identifier of the organizational unit containing the member account.</p>
    /// This field is required.
    pub fn organizational_unit_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.organizational_unit_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the organizational unit containing the member account.</p>
    pub fn set_organizational_unit_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.organizational_unit_id = input;
        self
    }
    /// <p>The unique identifier of the organizational unit containing the member account.</p>
    pub fn get_organizational_unit_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.organizational_unit_id
    }
    /// Consumes the builder and constructs a [`MemberAccount`](crate::types::MemberAccount).
    /// This method will fail if any of the following fields are not set:
    /// - [`account_id`](crate::types::builders::MemberAccountBuilder::account_id)
    /// - [`status`](crate::types::builders::MemberAccountBuilder::status)
    /// - [`status_reason`](crate::types::builders::MemberAccountBuilder::status_reason)
    /// - [`organizational_unit_id`](crate::types::builders::MemberAccountBuilder::organizational_unit_id)
    pub fn build(self) -> ::std::result::Result<crate::types::MemberAccount, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::MemberAccount {
            notification_configuration_arn: self.notification_configuration_arn,
            account_id: self.account_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "account_id",
                    "account_id was not specified but it is required when building MemberAccount",
                )
            })?,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building MemberAccount",
                )
            })?,
            status_reason: self.status_reason.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status_reason",
                    "status_reason was not specified but it is required when building MemberAccount",
                )
            })?,
            organizational_unit_id: self.organizational_unit_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "organizational_unit_id",
                    "organizational_unit_id was not specified but it is required when building MemberAccount",
                )
            })?,
        })
    }
}
