// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum Error {
    /// <p>User does not have sufficient access to perform this action.</p>
    AccessDeniedException(crate::types::error::AccessDeniedException),
    /// <p>Updating or deleting a resource can cause an inconsistent state.</p>
    ConflictException(crate::types::error::ConflictException),
    /// <p>Unexpected error during processing of request.</p>
    InternalServerException(crate::types::error::InternalServerException),
    /// <p>Request references a resource which does not exist.</p>
    ResourceNotFoundException(crate::types::error::ResourceNotFoundException),
    /// <p>Request would cause a service quota to be exceeded.</p>
    ServiceQuotaExceededException(crate::types::error::ServiceQuotaExceededException),
    /// <p>Request was denied due to request throttling.</p>
    ThrottlingException(crate::types::error::ThrottlingException),
    /// <p>This exception is thrown when the notification event fails validation.</p>
    ValidationException(crate::types::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    #[deprecated(note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
    variable wildcard pattern and check `.code()`:
     \
    &nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
     \
    See [`ProvideErrorMetadata`](#impl-ProvideErrorMetadata-for-Error) for what information is available for the error.")]
    Unhandled(crate::error::sealed_unhandled::Unhandled),
}
impl ::std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(_) => {
                if let ::std::option::Option::Some(code) = ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self) {
                    write!(f, "unhandled error ({code})")
                } else {
                    f.write_str("unhandled error")
                }
            }
        }
    }
}
impl From<::aws_smithy_types::error::operation::BuildError> for Error {
    fn from(value: ::aws_smithy_types::error::operation::BuildError) -> Self {
        Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
            source: value.into(),
            meta: ::std::default::Default::default(),
        })
    }
}
impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for Error {
    fn meta(&self) -> &::aws_smithy_types::error::metadata::ErrorMetadata {
        match self {
            Self::AccessDeniedException(inner) => inner.meta(),
            Self::ConflictException(inner) => inner.meta(),
            Self::InternalServerException(inner) => inner.meta(),
            Self::ResourceNotFoundException(inner) => inner.meta(),
            Self::ServiceQuotaExceededException(inner) => inner.meta(),
            Self::ThrottlingException(inner) => inner.meta(),
            Self::ValidationException(inner) => inner.meta(),
            Self::Unhandled(inner) => &inner.meta,
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::associate_channel::AssociateChannelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::associate_channel::AssociateChannelError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::associate_channel::AssociateChannelError> for Error {
    fn from(err: crate::operation::associate_channel::AssociateChannelError) -> Self {
        match err {
            crate::operation::associate_channel::AssociateChannelError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::associate_channel::AssociateChannelError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::associate_channel::AssociateChannelError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::associate_channel::AssociateChannelError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::associate_channel::AssociateChannelError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::associate_channel::AssociateChannelError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::associate_channel::AssociateChannelError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::associate_channel::AssociateChannelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::associate_managed_notification_account_contact::AssociateManagedNotificationAccountContactError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::associate_managed_notification_account_contact::AssociateManagedNotificationAccountContactError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::associate_managed_notification_account_contact::AssociateManagedNotificationAccountContactError> for Error {
    fn from(err: crate::operation::associate_managed_notification_account_contact::AssociateManagedNotificationAccountContactError) -> Self {
        match err {
            crate::operation::associate_managed_notification_account_contact::AssociateManagedNotificationAccountContactError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::associate_managed_notification_account_contact::AssociateManagedNotificationAccountContactError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::associate_managed_notification_account_contact::AssociateManagedNotificationAccountContactError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::associate_managed_notification_account_contact::AssociateManagedNotificationAccountContactError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::associate_managed_notification_account_contact::AssociateManagedNotificationAccountContactError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::associate_managed_notification_account_contact::AssociateManagedNotificationAccountContactError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::associate_managed_notification_account_contact::AssociateManagedNotificationAccountContactError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::associate_managed_notification_account_contact::AssociateManagedNotificationAccountContactError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::associate_managed_notification_additional_channel::AssociateManagedNotificationAdditionalChannelError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::associate_managed_notification_additional_channel::AssociateManagedNotificationAdditionalChannelError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::associate_managed_notification_additional_channel::AssociateManagedNotificationAdditionalChannelError> for Error {
    fn from(err: crate::operation::associate_managed_notification_additional_channel::AssociateManagedNotificationAdditionalChannelError) -> Self {
        match err {
            crate::operation::associate_managed_notification_additional_channel::AssociateManagedNotificationAdditionalChannelError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::associate_managed_notification_additional_channel::AssociateManagedNotificationAdditionalChannelError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::associate_managed_notification_additional_channel::AssociateManagedNotificationAdditionalChannelError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::associate_managed_notification_additional_channel::AssociateManagedNotificationAdditionalChannelError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::associate_managed_notification_additional_channel::AssociateManagedNotificationAdditionalChannelError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::associate_managed_notification_additional_channel::AssociateManagedNotificationAdditionalChannelError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::associate_managed_notification_additional_channel::AssociateManagedNotificationAdditionalChannelError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::associate_managed_notification_additional_channel::AssociateManagedNotificationAdditionalChannelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::associate_organizational_unit::AssociateOrganizationalUnitError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::associate_organizational_unit::AssociateOrganizationalUnitError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::associate_organizational_unit::AssociateOrganizationalUnitError> for Error {
    fn from(err: crate::operation::associate_organizational_unit::AssociateOrganizationalUnitError) -> Self {
        match err {
            crate::operation::associate_organizational_unit::AssociateOrganizationalUnitError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::associate_organizational_unit::AssociateOrganizationalUnitError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::associate_organizational_unit::AssociateOrganizationalUnitError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::associate_organizational_unit::AssociateOrganizationalUnitError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::associate_organizational_unit::AssociateOrganizationalUnitError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::associate_organizational_unit::AssociateOrganizationalUnitError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::associate_organizational_unit::AssociateOrganizationalUnitError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::associate_organizational_unit::AssociateOrganizationalUnitError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_event_rule::CreateEventRuleError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_event_rule::CreateEventRuleError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_event_rule::CreateEventRuleError> for Error {
    fn from(err: crate::operation::create_event_rule::CreateEventRuleError) -> Self {
        match err {
            crate::operation::create_event_rule::CreateEventRuleError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_event_rule::CreateEventRuleError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_event_rule::CreateEventRuleError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_event_rule::CreateEventRuleError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_event_rule::CreateEventRuleError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_event_rule::CreateEventRuleError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_event_rule::CreateEventRuleError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_event_rule::CreateEventRuleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_notification_configuration::CreateNotificationConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_notification_configuration::CreateNotificationConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_notification_configuration::CreateNotificationConfigurationError> for Error {
    fn from(err: crate::operation::create_notification_configuration::CreateNotificationConfigurationError) -> Self {
        match err {
            crate::operation::create_notification_configuration::CreateNotificationConfigurationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_notification_configuration::CreateNotificationConfigurationError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::create_notification_configuration::CreateNotificationConfigurationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_notification_configuration::CreateNotificationConfigurationError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_notification_configuration::CreateNotificationConfigurationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::create_notification_configuration::CreateNotificationConfigurationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_notification_configuration::CreateNotificationConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_event_rule::DeleteEventRuleError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_event_rule::DeleteEventRuleError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_event_rule::DeleteEventRuleError> for Error {
    fn from(err: crate::operation::delete_event_rule::DeleteEventRuleError) -> Self {
        match err {
            crate::operation::delete_event_rule::DeleteEventRuleError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_event_rule::DeleteEventRuleError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_event_rule::DeleteEventRuleError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_event_rule::DeleteEventRuleError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_event_rule::DeleteEventRuleError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_event_rule::DeleteEventRuleError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_event_rule::DeleteEventRuleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_notification_configuration::DeleteNotificationConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_notification_configuration::DeleteNotificationConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_notification_configuration::DeleteNotificationConfigurationError> for Error {
    fn from(err: crate::operation::delete_notification_configuration::DeleteNotificationConfigurationError) -> Self {
        match err {
            crate::operation::delete_notification_configuration::DeleteNotificationConfigurationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_notification_configuration::DeleteNotificationConfigurationError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::delete_notification_configuration::DeleteNotificationConfigurationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_notification_configuration::DeleteNotificationConfigurationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_notification_configuration::DeleteNotificationConfigurationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_notification_configuration::DeleteNotificationConfigurationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_notification_configuration::DeleteNotificationConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::deregister_notification_hub::DeregisterNotificationHubError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::deregister_notification_hub::DeregisterNotificationHubError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::deregister_notification_hub::DeregisterNotificationHubError> for Error {
    fn from(err: crate::operation::deregister_notification_hub::DeregisterNotificationHubError) -> Self {
        match err {
            crate::operation::deregister_notification_hub::DeregisterNotificationHubError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::deregister_notification_hub::DeregisterNotificationHubError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::deregister_notification_hub::DeregisterNotificationHubError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::deregister_notification_hub::DeregisterNotificationHubError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::deregister_notification_hub::DeregisterNotificationHubError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::deregister_notification_hub::DeregisterNotificationHubError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::deregister_notification_hub::DeregisterNotificationHubError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::disable_notifications_access_for_organization::DisableNotificationsAccessForOrganizationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::disable_notifications_access_for_organization::DisableNotificationsAccessForOrganizationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::disable_notifications_access_for_organization::DisableNotificationsAccessForOrganizationError> for Error {
    fn from(err: crate::operation::disable_notifications_access_for_organization::DisableNotificationsAccessForOrganizationError) -> Self {
        match err {
            crate::operation::disable_notifications_access_for_organization::DisableNotificationsAccessForOrganizationError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::disable_notifications_access_for_organization::DisableNotificationsAccessForOrganizationError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::disable_notifications_access_for_organization::DisableNotificationsAccessForOrganizationError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::disable_notifications_access_for_organization::DisableNotificationsAccessForOrganizationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::disable_notifications_access_for_organization::DisableNotificationsAccessForOrganizationError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::disable_notifications_access_for_organization::DisableNotificationsAccessForOrganizationError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::disable_notifications_access_for_organization::DisableNotificationsAccessForOrganizationError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::disable_notifications_access_for_organization::DisableNotificationsAccessForOrganizationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::disassociate_channel::DisassociateChannelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::disassociate_channel::DisassociateChannelError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::disassociate_channel::DisassociateChannelError> for Error {
    fn from(err: crate::operation::disassociate_channel::DisassociateChannelError) -> Self {
        match err {
            crate::operation::disassociate_channel::DisassociateChannelError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::disassociate_channel::DisassociateChannelError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::disassociate_channel::DisassociateChannelError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::disassociate_channel::DisassociateChannelError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::disassociate_channel::DisassociateChannelError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::disassociate_channel::DisassociateChannelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::disassociate_managed_notification_account_contact::DisassociateManagedNotificationAccountContactError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::disassociate_managed_notification_account_contact::DisassociateManagedNotificationAccountContactError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::disassociate_managed_notification_account_contact::DisassociateManagedNotificationAccountContactError> for Error {
    fn from(err: crate::operation::disassociate_managed_notification_account_contact::DisassociateManagedNotificationAccountContactError) -> Self {
        match err {
            crate::operation::disassociate_managed_notification_account_contact::DisassociateManagedNotificationAccountContactError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::disassociate_managed_notification_account_contact::DisassociateManagedNotificationAccountContactError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::disassociate_managed_notification_account_contact::DisassociateManagedNotificationAccountContactError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::disassociate_managed_notification_account_contact::DisassociateManagedNotificationAccountContactError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::disassociate_managed_notification_account_contact::DisassociateManagedNotificationAccountContactError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::disassociate_managed_notification_account_contact::DisassociateManagedNotificationAccountContactError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::disassociate_managed_notification_account_contact::DisassociateManagedNotificationAccountContactError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::disassociate_managed_notification_additional_channel::DisassociateManagedNotificationAdditionalChannelError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::disassociate_managed_notification_additional_channel::DisassociateManagedNotificationAdditionalChannelError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::disassociate_managed_notification_additional_channel::DisassociateManagedNotificationAdditionalChannelError> for Error {
    fn from(
        err: crate::operation::disassociate_managed_notification_additional_channel::DisassociateManagedNotificationAdditionalChannelError,
    ) -> Self {
        match err {
            crate::operation::disassociate_managed_notification_additional_channel::DisassociateManagedNotificationAdditionalChannelError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::disassociate_managed_notification_additional_channel::DisassociateManagedNotificationAdditionalChannelError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::disassociate_managed_notification_additional_channel::DisassociateManagedNotificationAdditionalChannelError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::disassociate_managed_notification_additional_channel::DisassociateManagedNotificationAdditionalChannelError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::disassociate_managed_notification_additional_channel::DisassociateManagedNotificationAdditionalChannelError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::disassociate_managed_notification_additional_channel::DisassociateManagedNotificationAdditionalChannelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::disassociate_organizational_unit::DisassociateOrganizationalUnitError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::disassociate_organizational_unit::DisassociateOrganizationalUnitError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::disassociate_organizational_unit::DisassociateOrganizationalUnitError> for Error {
    fn from(err: crate::operation::disassociate_organizational_unit::DisassociateOrganizationalUnitError) -> Self {
        match err {
            crate::operation::disassociate_organizational_unit::DisassociateOrganizationalUnitError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::disassociate_organizational_unit::DisassociateOrganizationalUnitError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::disassociate_organizational_unit::DisassociateOrganizationalUnitError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::disassociate_organizational_unit::DisassociateOrganizationalUnitError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::disassociate_organizational_unit::DisassociateOrganizationalUnitError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::disassociate_organizational_unit::DisassociateOrganizationalUnitError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::enable_notifications_access_for_organization::EnableNotificationsAccessForOrganizationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::enable_notifications_access_for_organization::EnableNotificationsAccessForOrganizationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::enable_notifications_access_for_organization::EnableNotificationsAccessForOrganizationError> for Error {
    fn from(err: crate::operation::enable_notifications_access_for_organization::EnableNotificationsAccessForOrganizationError) -> Self {
        match err {
            crate::operation::enable_notifications_access_for_organization::EnableNotificationsAccessForOrganizationError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::enable_notifications_access_for_organization::EnableNotificationsAccessForOrganizationError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::enable_notifications_access_for_organization::EnableNotificationsAccessForOrganizationError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::enable_notifications_access_for_organization::EnableNotificationsAccessForOrganizationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::enable_notifications_access_for_organization::EnableNotificationsAccessForOrganizationError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::enable_notifications_access_for_organization::EnableNotificationsAccessForOrganizationError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::enable_notifications_access_for_organization::EnableNotificationsAccessForOrganizationError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::enable_notifications_access_for_organization::EnableNotificationsAccessForOrganizationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_event_rule::GetEventRuleError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_event_rule::GetEventRuleError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_event_rule::GetEventRuleError> for Error {
    fn from(err: crate::operation::get_event_rule::GetEventRuleError) -> Self {
        match err {
            crate::operation::get_event_rule::GetEventRuleError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_event_rule::GetEventRuleError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_event_rule::GetEventRuleError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_event_rule::GetEventRuleError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_event_rule::GetEventRuleError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_event_rule::GetEventRuleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_managed_notification_child_event::GetManagedNotificationChildEventError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_managed_notification_child_event::GetManagedNotificationChildEventError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_managed_notification_child_event::GetManagedNotificationChildEventError> for Error {
    fn from(err: crate::operation::get_managed_notification_child_event::GetManagedNotificationChildEventError) -> Self {
        match err {
            crate::operation::get_managed_notification_child_event::GetManagedNotificationChildEventError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_managed_notification_child_event::GetManagedNotificationChildEventError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_managed_notification_child_event::GetManagedNotificationChildEventError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_managed_notification_child_event::GetManagedNotificationChildEventError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_managed_notification_child_event::GetManagedNotificationChildEventError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_managed_notification_child_event::GetManagedNotificationChildEventError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_managed_notification_configuration::GetManagedNotificationConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_managed_notification_configuration::GetManagedNotificationConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_managed_notification_configuration::GetManagedNotificationConfigurationError> for Error {
    fn from(err: crate::operation::get_managed_notification_configuration::GetManagedNotificationConfigurationError) -> Self {
        match err {
            crate::operation::get_managed_notification_configuration::GetManagedNotificationConfigurationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_managed_notification_configuration::GetManagedNotificationConfigurationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_managed_notification_configuration::GetManagedNotificationConfigurationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_managed_notification_configuration::GetManagedNotificationConfigurationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_managed_notification_configuration::GetManagedNotificationConfigurationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_managed_notification_configuration::GetManagedNotificationConfigurationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_managed_notification_event::GetManagedNotificationEventError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_managed_notification_event::GetManagedNotificationEventError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_managed_notification_event::GetManagedNotificationEventError> for Error {
    fn from(err: crate::operation::get_managed_notification_event::GetManagedNotificationEventError) -> Self {
        match err {
            crate::operation::get_managed_notification_event::GetManagedNotificationEventError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_managed_notification_event::GetManagedNotificationEventError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_managed_notification_event::GetManagedNotificationEventError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_managed_notification_event::GetManagedNotificationEventError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_managed_notification_event::GetManagedNotificationEventError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_managed_notification_event::GetManagedNotificationEventError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_notification_configuration::GetNotificationConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_notification_configuration::GetNotificationConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_notification_configuration::GetNotificationConfigurationError> for Error {
    fn from(err: crate::operation::get_notification_configuration::GetNotificationConfigurationError) -> Self {
        match err {
            crate::operation::get_notification_configuration::GetNotificationConfigurationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_notification_configuration::GetNotificationConfigurationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_notification_configuration::GetNotificationConfigurationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_notification_configuration::GetNotificationConfigurationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_notification_configuration::GetNotificationConfigurationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_notification_configuration::GetNotificationConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_notification_event::GetNotificationEventError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_notification_event::GetNotificationEventError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_notification_event::GetNotificationEventError> for Error {
    fn from(err: crate::operation::get_notification_event::GetNotificationEventError) -> Self {
        match err {
            crate::operation::get_notification_event::GetNotificationEventError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_notification_event::GetNotificationEventError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_notification_event::GetNotificationEventError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_notification_event::GetNotificationEventError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_notification_event::GetNotificationEventError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_notification_event::GetNotificationEventError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_notifications_access_for_organization::GetNotificationsAccessForOrganizationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_notifications_access_for_organization::GetNotificationsAccessForOrganizationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_notifications_access_for_organization::GetNotificationsAccessForOrganizationError> for Error {
    fn from(err: crate::operation::get_notifications_access_for_organization::GetNotificationsAccessForOrganizationError) -> Self {
        match err {
            crate::operation::get_notifications_access_for_organization::GetNotificationsAccessForOrganizationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_notifications_access_for_organization::GetNotificationsAccessForOrganizationError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::get_notifications_access_for_organization::GetNotificationsAccessForOrganizationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_notifications_access_for_organization::GetNotificationsAccessForOrganizationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_notifications_access_for_organization::GetNotificationsAccessForOrganizationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_channels::ListChannelsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_channels::ListChannelsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_channels::ListChannelsError> for Error {
    fn from(err: crate::operation::list_channels::ListChannelsError) -> Self {
        match err {
            crate::operation::list_channels::ListChannelsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_channels::ListChannelsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_channels::ListChannelsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_channels::ListChannelsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_channels::ListChannelsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_channels::ListChannelsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_event_rules::ListEventRulesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_event_rules::ListEventRulesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_event_rules::ListEventRulesError> for Error {
    fn from(err: crate::operation::list_event_rules::ListEventRulesError) -> Self {
        match err {
            crate::operation::list_event_rules::ListEventRulesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_event_rules::ListEventRulesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_event_rules::ListEventRulesError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_event_rules::ListEventRulesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_event_rules::ListEventRulesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_event_rules::ListEventRulesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_managed_notification_channel_associations::ListManagedNotificationChannelAssociationsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_managed_notification_channel_associations::ListManagedNotificationChannelAssociationsError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_managed_notification_channel_associations::ListManagedNotificationChannelAssociationsError> for Error {
    fn from(err: crate::operation::list_managed_notification_channel_associations::ListManagedNotificationChannelAssociationsError) -> Self {
        match err {
            crate::operation::list_managed_notification_channel_associations::ListManagedNotificationChannelAssociationsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_managed_notification_channel_associations::ListManagedNotificationChannelAssociationsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_managed_notification_channel_associations::ListManagedNotificationChannelAssociationsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_managed_notification_channel_associations::ListManagedNotificationChannelAssociationsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_managed_notification_channel_associations::ListManagedNotificationChannelAssociationsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_managed_notification_channel_associations::ListManagedNotificationChannelAssociationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_managed_notification_child_events::ListManagedNotificationChildEventsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_managed_notification_child_events::ListManagedNotificationChildEventsError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_managed_notification_child_events::ListManagedNotificationChildEventsError> for Error {
    fn from(err: crate::operation::list_managed_notification_child_events::ListManagedNotificationChildEventsError) -> Self {
        match err {
            crate::operation::list_managed_notification_child_events::ListManagedNotificationChildEventsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_managed_notification_child_events::ListManagedNotificationChildEventsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_managed_notification_child_events::ListManagedNotificationChildEventsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_managed_notification_child_events::ListManagedNotificationChildEventsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_managed_notification_child_events::ListManagedNotificationChildEventsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_managed_notification_configurations::ListManagedNotificationConfigurationsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_managed_notification_configurations::ListManagedNotificationConfigurationsError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_managed_notification_configurations::ListManagedNotificationConfigurationsError> for Error {
    fn from(err: crate::operation::list_managed_notification_configurations::ListManagedNotificationConfigurationsError) -> Self {
        match err {
            crate::operation::list_managed_notification_configurations::ListManagedNotificationConfigurationsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_managed_notification_configurations::ListManagedNotificationConfigurationsError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::list_managed_notification_configurations::ListManagedNotificationConfigurationsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_managed_notification_configurations::ListManagedNotificationConfigurationsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_managed_notification_configurations::ListManagedNotificationConfigurationsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_managed_notification_events::ListManagedNotificationEventsError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_managed_notification_events::ListManagedNotificationEventsError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_managed_notification_events::ListManagedNotificationEventsError> for Error {
    fn from(err: crate::operation::list_managed_notification_events::ListManagedNotificationEventsError) -> Self {
        match err {
            crate::operation::list_managed_notification_events::ListManagedNotificationEventsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_managed_notification_events::ListManagedNotificationEventsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_managed_notification_events::ListManagedNotificationEventsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_managed_notification_events::ListManagedNotificationEventsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_managed_notification_events::ListManagedNotificationEventsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_member_accounts::ListMemberAccountsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_member_accounts::ListMemberAccountsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_member_accounts::ListMemberAccountsError> for Error {
    fn from(err: crate::operation::list_member_accounts::ListMemberAccountsError) -> Self {
        match err {
            crate::operation::list_member_accounts::ListMemberAccountsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_member_accounts::ListMemberAccountsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_member_accounts::ListMemberAccountsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_member_accounts::ListMemberAccountsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_member_accounts::ListMemberAccountsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_member_accounts::ListMemberAccountsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_notification_configurations::ListNotificationConfigurationsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_notification_configurations::ListNotificationConfigurationsError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_notification_configurations::ListNotificationConfigurationsError> for Error {
    fn from(err: crate::operation::list_notification_configurations::ListNotificationConfigurationsError) -> Self {
        match err {
            crate::operation::list_notification_configurations::ListNotificationConfigurationsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_notification_configurations::ListNotificationConfigurationsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_notification_configurations::ListNotificationConfigurationsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_notification_configurations::ListNotificationConfigurationsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_notification_configurations::ListNotificationConfigurationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_notification_events::ListNotificationEventsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_notification_events::ListNotificationEventsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_notification_events::ListNotificationEventsError> for Error {
    fn from(err: crate::operation::list_notification_events::ListNotificationEventsError) -> Self {
        match err {
            crate::operation::list_notification_events::ListNotificationEventsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_notification_events::ListNotificationEventsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_notification_events::ListNotificationEventsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_notification_events::ListNotificationEventsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_notification_events::ListNotificationEventsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_notification_hubs::ListNotificationHubsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_notification_hubs::ListNotificationHubsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_notification_hubs::ListNotificationHubsError> for Error {
    fn from(err: crate::operation::list_notification_hubs::ListNotificationHubsError) -> Self {
        match err {
            crate::operation::list_notification_hubs::ListNotificationHubsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_notification_hubs::ListNotificationHubsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_notification_hubs::ListNotificationHubsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_notification_hubs::ListNotificationHubsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_notification_hubs::ListNotificationHubsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_organizational_units::ListOrganizationalUnitsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_organizational_units::ListOrganizationalUnitsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_organizational_units::ListOrganizationalUnitsError> for Error {
    fn from(err: crate::operation::list_organizational_units::ListOrganizationalUnitsError) -> Self {
        match err {
            crate::operation::list_organizational_units::ListOrganizationalUnitsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_organizational_units::ListOrganizationalUnitsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_organizational_units::ListOrganizationalUnitsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_organizational_units::ListOrganizationalUnitsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_organizational_units::ListOrganizationalUnitsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_organizational_units::ListOrganizationalUnitsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_tags_for_resource::ListTagsForResourceError> for Error {
    fn from(err: crate::operation::list_tags_for_resource::ListTagsForResourceError) -> Self {
        match err {
            crate::operation::list_tags_for_resource::ListTagsForResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::register_notification_hub::RegisterNotificationHubError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::register_notification_hub::RegisterNotificationHubError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::register_notification_hub::RegisterNotificationHubError> for Error {
    fn from(err: crate::operation::register_notification_hub::RegisterNotificationHubError) -> Self {
        match err {
            crate::operation::register_notification_hub::RegisterNotificationHubError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::register_notification_hub::RegisterNotificationHubError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::register_notification_hub::RegisterNotificationHubError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::register_notification_hub::RegisterNotificationHubError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::register_notification_hub::RegisterNotificationHubError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::register_notification_hub::RegisterNotificationHubError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::register_notification_hub::RegisterNotificationHubError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::tag_resource::TagResourceError> for Error {
    fn from(err: crate::operation::tag_resource::TagResourceError) -> Self {
        match err {
            crate::operation::tag_resource::TagResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::tag_resource::TagResourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::tag_resource::TagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::tag_resource::TagResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::tag_resource::TagResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::tag_resource::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::untag_resource::UntagResourceError> for Error {
    fn from(err: crate::operation::untag_resource::UntagResourceError) -> Self {
        match err {
            crate::operation::untag_resource::UntagResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::untag_resource::UntagResourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::untag_resource::UntagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::untag_resource::UntagResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::untag_resource::UntagResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::untag_resource::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_event_rule::UpdateEventRuleError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_event_rule::UpdateEventRuleError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_event_rule::UpdateEventRuleError> for Error {
    fn from(err: crate::operation::update_event_rule::UpdateEventRuleError) -> Self {
        match err {
            crate::operation::update_event_rule::UpdateEventRuleError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_event_rule::UpdateEventRuleError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_event_rule::UpdateEventRuleError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_event_rule::UpdateEventRuleError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_event_rule::UpdateEventRuleError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_event_rule::UpdateEventRuleError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_event_rule::UpdateEventRuleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_notification_configuration::UpdateNotificationConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_notification_configuration::UpdateNotificationConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_notification_configuration::UpdateNotificationConfigurationError> for Error {
    fn from(err: crate::operation::update_notification_configuration::UpdateNotificationConfigurationError) -> Self {
        match err {
            crate::operation::update_notification_configuration::UpdateNotificationConfigurationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_notification_configuration::UpdateNotificationConfigurationError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::update_notification_configuration::UpdateNotificationConfigurationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_notification_configuration::UpdateNotificationConfigurationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_notification_configuration::UpdateNotificationConfigurationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::update_notification_configuration::UpdateNotificationConfigurationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::update_notification_configuration::UpdateNotificationConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl ::std::error::Error for Error {
    fn source(&self) -> std::option::Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            Error::AccessDeniedException(inner) => inner.source(),
            Error::ConflictException(inner) => inner.source(),
            Error::InternalServerException(inner) => inner.source(),
            Error::ResourceNotFoundException(inner) => inner.source(),
            Error::ServiceQuotaExceededException(inner) => inner.source(),
            Error::ThrottlingException(inner) => inner.source(),
            Error::ValidationException(inner) => inner.source(),
            Error::Unhandled(inner) => ::std::option::Option::Some(&*inner.source),
        }
    }
}
impl ::aws_types::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ServiceQuotaExceededException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.meta.request_id(),
        }
    }
}
