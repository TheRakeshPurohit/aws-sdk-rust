// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListMemberAccountsInput {
    /// <p>The Amazon Resource Name (ARN) of the notification configuration used to filter the member accounts.</p>
    pub notification_configuration_arn: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of results to return in a single call. Valid values are 1-100.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>The token for the next page of results. Use the value returned in the previous response.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The member account identifier used to filter the results.</p>
    pub member_account: ::std::option::Option<::std::string::String>,
    /// <p>The status used to filter the member accounts.</p>
    pub status: ::std::option::Option<crate::types::MemberAccountNotificationConfigurationStatus>,
    /// <p>The organizational unit ID used to filter the member accounts.</p>
    pub organizational_unit_id: ::std::option::Option<::std::string::String>,
}
impl ListMemberAccountsInput {
    /// <p>The Amazon Resource Name (ARN) of the notification configuration used to filter the member accounts.</p>
    pub fn notification_configuration_arn(&self) -> ::std::option::Option<&str> {
        self.notification_configuration_arn.as_deref()
    }
    /// <p>The maximum number of results to return in a single call. Valid values are 1-100.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>The token for the next page of results. Use the value returned in the previous response.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The member account identifier used to filter the results.</p>
    pub fn member_account(&self) -> ::std::option::Option<&str> {
        self.member_account.as_deref()
    }
    /// <p>The status used to filter the member accounts.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::MemberAccountNotificationConfigurationStatus> {
        self.status.as_ref()
    }
    /// <p>The organizational unit ID used to filter the member accounts.</p>
    pub fn organizational_unit_id(&self) -> ::std::option::Option<&str> {
        self.organizational_unit_id.as_deref()
    }
}
impl ListMemberAccountsInput {
    /// Creates a new builder-style object to manufacture [`ListMemberAccountsInput`](crate::operation::list_member_accounts::ListMemberAccountsInput).
    pub fn builder() -> crate::operation::list_member_accounts::builders::ListMemberAccountsInputBuilder {
        crate::operation::list_member_accounts::builders::ListMemberAccountsInputBuilder::default()
    }
}

/// A builder for [`ListMemberAccountsInput`](crate::operation::list_member_accounts::ListMemberAccountsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListMemberAccountsInputBuilder {
    pub(crate) notification_configuration_arn: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) member_account: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::MemberAccountNotificationConfigurationStatus>,
    pub(crate) organizational_unit_id: ::std::option::Option<::std::string::String>,
}
impl ListMemberAccountsInputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the notification configuration used to filter the member accounts.</p>
    /// This field is required.
    pub fn notification_configuration_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.notification_configuration_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the notification configuration used to filter the member accounts.</p>
    pub fn set_notification_configuration_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.notification_configuration_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the notification configuration used to filter the member accounts.</p>
    pub fn get_notification_configuration_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.notification_configuration_arn
    }
    /// <p>The maximum number of results to return in a single call. Valid values are 1-100.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results to return in a single call. Valid values are 1-100.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of results to return in a single call. Valid values are 1-100.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>The token for the next page of results. Use the value returned in the previous response.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The token for the next page of results. Use the value returned in the previous response.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The token for the next page of results. Use the value returned in the previous response.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The member account identifier used to filter the results.</p>
    pub fn member_account(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.member_account = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The member account identifier used to filter the results.</p>
    pub fn set_member_account(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.member_account = input;
        self
    }
    /// <p>The member account identifier used to filter the results.</p>
    pub fn get_member_account(&self) -> &::std::option::Option<::std::string::String> {
        &self.member_account
    }
    /// <p>The status used to filter the member accounts.</p>
    pub fn status(mut self, input: crate::types::MemberAccountNotificationConfigurationStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status used to filter the member accounts.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::MemberAccountNotificationConfigurationStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status used to filter the member accounts.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::MemberAccountNotificationConfigurationStatus> {
        &self.status
    }
    /// <p>The organizational unit ID used to filter the member accounts.</p>
    pub fn organizational_unit_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.organizational_unit_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The organizational unit ID used to filter the member accounts.</p>
    pub fn set_organizational_unit_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.organizational_unit_id = input;
        self
    }
    /// <p>The organizational unit ID used to filter the member accounts.</p>
    pub fn get_organizational_unit_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.organizational_unit_id
    }
    /// Consumes the builder and constructs a [`ListMemberAccountsInput`](crate::operation::list_member_accounts::ListMemberAccountsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_member_accounts::ListMemberAccountsInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::list_member_accounts::ListMemberAccountsInput {
            notification_configuration_arn: self.notification_configuration_arn,
            max_results: self.max_results,
            next_token: self.next_token,
            member_account: self.member_account,
            status: self.status,
            organizational_unit_id: self.organizational_unit_id,
        })
    }
}
