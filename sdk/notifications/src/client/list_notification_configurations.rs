// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ListNotificationConfigurations`](crate::operation::list_notification_configurations::builders::ListNotificationConfigurationsFluentBuilder) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::operation::list_notification_configurations::builders::ListNotificationConfigurationsFluentBuilder::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`event_rule_source(impl Into<String>)`](crate::operation::list_notification_configurations::builders::ListNotificationConfigurationsFluentBuilder::event_rule_source) / [`set_event_rule_source(Option<String>)`](crate::operation::list_notification_configurations::builders::ListNotificationConfigurationsFluentBuilder::set_event_rule_source):<br>required: **false**<br><p>The matched event source.</p> <p>Must match one of the valid EventBridge sources. Only Amazon Web Services service sourced events are supported. For example, <code>aws.ec2</code> and <code>aws.cloudwatch</code>. For more information, see <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-service-event.html#eb-service-event-delivery-level">Event delivery from Amazon Web Services services</a> in the <i>Amazon EventBridge User Guide</i>.</p><br>
    ///   - [`channel_arn(impl Into<String>)`](crate::operation::list_notification_configurations::builders::ListNotificationConfigurationsFluentBuilder::channel_arn) / [`set_channel_arn(Option<String>)`](crate::operation::list_notification_configurations::builders::ListNotificationConfigurationsFluentBuilder::set_channel_arn):<br>required: **false**<br><p>The Amazon Resource Name (ARN) of the Channel to match.</p><br>
    ///   - [`status(NotificationConfigurationStatus)`](crate::operation::list_notification_configurations::builders::ListNotificationConfigurationsFluentBuilder::status) / [`set_status(Option<NotificationConfigurationStatus>)`](crate::operation::list_notification_configurations::builders::ListNotificationConfigurationsFluentBuilder::set_status):<br>required: **false**<br><p>The <code>NotificationConfiguration</code> status to match.</p> <ul>  <li>   <p>Values:</p>   <ul>    <li>     <p><code>ACTIVE</code></p>     <ul>      <li>       <p>All <code>EventRules</code> are <code>ACTIVE</code> and any call can be run.</p></li>     </ul></li>    <li>     <p><code>PARTIALLY_ACTIVE</code></p>     <ul>      <li>       <p>Some <code>EventRules</code> are <code>ACTIVE</code> and some are <code>INACTIVE</code>. Any call can be run.</p></li>      <li>       <p>Any call can be run.</p></li>     </ul></li>    <li>     <p><code>INACTIVE</code></p>     <ul>      <li>       <p>All <code>EventRules</code> are <code>INACTIVE</code> and any call can be run.</p></li>     </ul></li>    <li>     <p><code>DELETING</code></p>     <ul>      <li>       <p>This <code>NotificationConfiguration</code> is being deleted.</p></li>      <li>       <p>Only <code>GET</code> and <code>LIST</code> calls can be run.</p></li>     </ul></li>   </ul></li> </ul><br>
    ///   - [`subtype(NotificationConfigurationSubtype)`](crate::operation::list_notification_configurations::builders::ListNotificationConfigurationsFluentBuilder::subtype) / [`set_subtype(Option<NotificationConfigurationSubtype>)`](crate::operation::list_notification_configurations::builders::ListNotificationConfigurationsFluentBuilder::set_subtype):<br>required: **false**<br><p>The subtype used to filter the notification configurations in the request.</p><br>
    ///   - [`max_results(i32)`](crate::operation::list_notification_configurations::builders::ListNotificationConfigurationsFluentBuilder::max_results) / [`set_max_results(Option<i32>)`](crate::operation::list_notification_configurations::builders::ListNotificationConfigurationsFluentBuilder::set_max_results):<br>required: **false**<br><p>The maximum number of results to be returned in this call. Defaults to 20.</p><br>
    ///   - [`next_token(impl Into<String>)`](crate::operation::list_notification_configurations::builders::ListNotificationConfigurationsFluentBuilder::next_token) / [`set_next_token(Option<String>)`](crate::operation::list_notification_configurations::builders::ListNotificationConfigurationsFluentBuilder::set_next_token):<br>required: **false**<br><p>The start token for paginated calls. Retrieved from the response of a previous <code>ListEventRules</code> call. Next token uses Base64 encoding.</p><br>
    /// - On success, responds with [`ListNotificationConfigurationsOutput`](crate::operation::list_notification_configurations::ListNotificationConfigurationsOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::operation::list_notification_configurations::ListNotificationConfigurationsOutput::next_token): <p>A pagination token. If a non-null pagination token is returned in a result, pass its value in another request to retrieve more entries.</p>
    ///   - [`notification_configurations(Vec::<NotificationConfigurationStructure>)`](crate::operation::list_notification_configurations::ListNotificationConfigurationsOutput::notification_configurations): <p>The <code>NotificationConfigurations</code> in the account.</p>
    /// - On failure, responds with [`SdkError<ListNotificationConfigurationsError>`](crate::operation::list_notification_configurations::ListNotificationConfigurationsError)
    pub fn list_notification_configurations(
        &self,
    ) -> crate::operation::list_notification_configurations::builders::ListNotificationConfigurationsFluentBuilder {
        crate::operation::list_notification_configurations::builders::ListNotificationConfigurationsFluentBuilder::new(self.handle.clone())
    }
}
