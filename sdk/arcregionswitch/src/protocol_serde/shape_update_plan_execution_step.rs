// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn de_update_plan_execution_step_http_error(
    _response_status: u16,
    _response_headers: &::aws_smithy_runtime_api::http::Headers,
    _response_body: &[u8],
) -> std::result::Result<
    crate::operation::update_plan_execution_step::UpdatePlanExecutionStepOutput,
    crate::operation::update_plan_execution_step::UpdatePlanExecutionStepError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::cbor_errors::parse_error_metadata(_response_status, _response_headers, _response_body)
        .map_err(crate::operation::update_plan_execution_step::UpdatePlanExecutionStepError::unhandled)?;
    generic_builder = ::aws_types::request_id::apply_request_id(generic_builder, _response_headers);
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::operation::update_plan_execution_step::UpdatePlanExecutionStepError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "AccessDeniedException" => crate::operation::update_plan_execution_step::UpdatePlanExecutionStepError::AccessDeniedException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::AccessDeniedExceptionBuilder::default();
                output = crate::protocol_serde::shape_access_denied_exception::de_access_denied_exception_cbor_err(_response_body, output)
                    .map_err(crate::operation::update_plan_execution_step::UpdatePlanExecutionStepError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::access_denied_exception_correct_errors(output)
                    .build()
                    .map_err(crate::operation::update_plan_execution_step::UpdatePlanExecutionStepError::unhandled)?
            };
            tmp
        }),
        "ResourceNotFoundException" => crate::operation::update_plan_execution_step::UpdatePlanExecutionStepError::ResourceNotFoundException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::ResourceNotFoundExceptionBuilder::default();
                output = crate::protocol_serde::shape_resource_not_found_exception::de_resource_not_found_exception_cbor_err(_response_body, output)
                    .map_err(crate::operation::update_plan_execution_step::UpdatePlanExecutionStepError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::resource_not_found_exception_correct_errors(output)
                    .build()
                    .map_err(crate::operation::update_plan_execution_step::UpdatePlanExecutionStepError::unhandled)?
            };
            tmp
        }),
        _ => crate::operation::update_plan_execution_step::UpdatePlanExecutionStepError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_update_plan_execution_step_http_response(
    _response_status: u16,
    _response_headers: &::aws_smithy_runtime_api::http::Headers,
    _response_body: &[u8],
) -> std::result::Result<
    crate::operation::update_plan_execution_step::UpdatePlanExecutionStepOutput,
    crate::operation::update_plan_execution_step::UpdatePlanExecutionStepError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::operation::update_plan_execution_step::builders::UpdatePlanExecutionStepOutputBuilder::default();
        output._set_request_id(::aws_types::request_id::RequestId::request_id(_response_headers).map(str::to_string));
        output.build()
    })
}

pub fn ser_update_plan_execution_step_input(
    input: &crate::operation::update_plan_execution_step::UpdatePlanExecutionStepInput,
) -> ::std::result::Result<::aws_smithy_types::body::SdkBody, ::aws_smithy_types::error::operation::SerializationError> {
    let mut encoder = ::aws_smithy_cbor::Encoder::new(Vec::new());
    {
        let encoder = &mut encoder;
        crate::protocol_serde::shape_update_plan_execution_step_input::ser_update_plan_execution_step_input_input(encoder, input)?;
    }
    Ok(::aws_smithy_types::body::SdkBody::from(encoder.into_writer()))
}
