// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn de_abbreviated_plan(
    decoder: &mut ::aws_smithy_cbor::Decoder,
) -> ::std::result::Result<crate::types::AbbreviatedPlan, ::aws_smithy_cbor::decode::DeserializeError> {
    #[allow(clippy::match_single_binding)]
    fn pair(
        mut builder: crate::types::builders::AbbreviatedPlanBuilder,
        decoder: &mut ::aws_smithy_cbor::Decoder,
    ) -> ::std::result::Result<crate::types::builders::AbbreviatedPlanBuilder, ::aws_smithy_cbor::decode::DeserializeError> {
        builder = match decoder.str()?.as_ref() {
            "arn" => builder.set_arn(Some(decoder.string()?)),
            "owner" => builder.set_owner(Some(decoder.string()?)),
            "name" => builder.set_name(Some(decoder.string()?)),
            "regions" => builder.set_regions(Some(crate::protocol_serde::shape_region_list::de_region_list(decoder)?)),
            "recoveryApproach" => builder.set_recovery_approach(Some(decoder.string().map(|s| crate::types::RecoveryApproach::from(s.as_ref()))?)),
            "primaryRegion" => ::aws_smithy_cbor::decode::set_optional(builder, decoder, |builder, decoder| {
                Ok(builder.set_primary_region(Some(decoder.string()?)))
            })?,
            "version" => {
                ::aws_smithy_cbor::decode::set_optional(builder, decoder, |builder, decoder| Ok(builder.set_version(Some(decoder.string()?))))?
            }
            "updatedAt" => {
                ::aws_smithy_cbor::decode::set_optional(
                    builder,
                    decoder,
                    |builder, decoder| Ok(builder.set_updated_at(Some(decoder.timestamp()?))),
                )?
            }
            "description" => {
                ::aws_smithy_cbor::decode::set_optional(builder, decoder, |builder, decoder| Ok(builder.set_description(Some(decoder.string()?))))?
            }
            "executionRole" => ::aws_smithy_cbor::decode::set_optional(builder, decoder, |builder, decoder| {
                Ok(builder.set_execution_role(Some(decoder.string()?)))
            })?,
            "activePlanExecution" => ::aws_smithy_cbor::decode::set_optional(builder, decoder, |builder, decoder| {
                Ok(builder.set_active_plan_execution(Some(decoder.string()?)))
            })?,
            "recoveryTimeObjectiveMinutes" => ::aws_smithy_cbor::decode::set_optional(builder, decoder, |builder, decoder| {
                Ok(builder.set_recovery_time_objective_minutes(Some(decoder.integer()?)))
            })?,
            _ => {
                decoder.skip()?;
                builder
            }
        };
        Ok(builder)
    }

    let mut builder = crate::types::builders::AbbreviatedPlanBuilder::default();

    match decoder.map()? {
        None => loop {
            match decoder.datatype()? {
                ::aws_smithy_cbor::data::Type::Break => {
                    decoder.skip()?;
                    break;
                }
                _ => {
                    builder = pair(builder, decoder)?;
                }
            };
        },
        Some(n) => {
            for _ in 0..n {
                builder = pair(builder, decoder)?;
            }
        }
    };
    #[allow(clippy::needless_question_mark)]
    {
        return Ok(crate::serde_util::abbreviated_plan_correct_errors(builder)
            .build()
            .map_err(|err| ::aws_smithy_cbor::decode::DeserializeError::custom(err.to_string(), decoder.position()))?);
    }
}
