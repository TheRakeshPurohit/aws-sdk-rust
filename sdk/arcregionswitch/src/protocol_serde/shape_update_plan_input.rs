// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_plan_input_input(
    encoder: &mut ::aws_smithy_cbor::Encoder,
    #[allow(unused)] input: &crate::operation::update_plan::UpdatePlanInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    encoder.begin_map();
    if let Some(var_1) = &input.arn {
        encoder.str("arn").str(var_1.as_str());
    }
    if let Some(var_2) = &input.description {
        encoder.str("description").str(var_2.as_str());
    }
    if let Some(var_3) = &input.workflows {
        encoder.str("workflows");
        encoder.array((*var_3).len());
        for item_4 in var_3 {
            {
                crate::protocol_serde::shape_workflow::ser_workflow(encoder, item_4)?;
            }
        }
    }
    if let Some(var_5) = &input.execution_role {
        encoder.str("executionRole").str(var_5.as_str());
    }
    if let Some(var_6) = &input.recovery_time_objective_minutes {
        encoder.str("recoveryTimeObjectiveMinutes").integer(*var_6);
    }
    if let Some(var_7) = &input.associated_alarms {
        encoder.str("associatedAlarms");
        encoder.map((*var_7).len());
        for (key_8, value_9) in var_7 {
            {
                encoder.str(key_8.as_str());
                crate::protocol_serde::shape_associated_alarm::ser_associated_alarm(encoder, value_9)?;
            }
        }
    }
    if let Some(var_10) = &input.triggers {
        encoder.str("triggers");
        encoder.array((*var_10).len());
        for item_11 in var_10 {
            {
                crate::protocol_serde::shape_trigger::ser_trigger(encoder, item_11)?;
            }
        }
    }
    encoder.end();
    Ok(())
}
