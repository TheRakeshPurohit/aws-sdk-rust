// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_arc_routing_control_configuration(
    encoder: &mut ::aws_smithy_cbor::Encoder,
    #[allow(unused)] input: &crate::types::ArcRoutingControlConfiguration,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    encoder.begin_map();
    if input.timeout_minutes != 60 {
        encoder.str("timeoutMinutes").integer(input.timeout_minutes);
    }
    if let Some(var_1) = &input.cross_account_role {
        encoder.str("crossAccountRole").str(var_1.as_str());
    }
    if let Some(var_2) = &input.external_id {
        encoder.str("externalId").str(var_2.as_str());
    }
    {
        encoder.str("regionAndRoutingControls");
        encoder.map((input.region_and_routing_controls).len());
        for (key_3, value_4) in &input.region_and_routing_controls {
            {
                encoder.str(key_3.as_str());
                encoder.array((*value_4).len());
                for item_5 in value_4 {
                    {
                        crate::protocol_serde::shape_arc_routing_control_state::ser_arc_routing_control_state(encoder, item_5)?;
                    }
                }
            }
        }
    }
    encoder.end();
    Ok(())
}

pub(crate) fn de_arc_routing_control_configuration(
    decoder: &mut ::aws_smithy_cbor::Decoder,
) -> ::std::result::Result<crate::types::ArcRoutingControlConfiguration, ::aws_smithy_cbor::decode::DeserializeError> {
    #[allow(clippy::match_single_binding)]
    fn pair(
        mut builder: crate::types::builders::ArcRoutingControlConfigurationBuilder,
        decoder: &mut ::aws_smithy_cbor::Decoder,
    ) -> ::std::result::Result<crate::types::builders::ArcRoutingControlConfigurationBuilder, ::aws_smithy_cbor::decode::DeserializeError> {
        builder = match decoder.str()?.as_ref() {
            "timeoutMinutes" => ::aws_smithy_cbor::decode::set_optional(builder, decoder, |builder, decoder| {
                Ok(builder.set_timeout_minutes(Some(decoder.integer()?)))
            })?,
            "crossAccountRole" => ::aws_smithy_cbor::decode::set_optional(builder, decoder, |builder, decoder| {
                Ok(builder.set_cross_account_role(Some(decoder.string()?)))
            })?,
            "externalId" => {
                ::aws_smithy_cbor::decode::set_optional(builder, decoder, |builder, decoder| Ok(builder.set_external_id(Some(decoder.string()?))))?
            }
            "regionAndRoutingControls" => builder.set_region_and_routing_controls(Some(
                crate::protocol_serde::shape_region_and_routing_controls::de_region_and_routing_controls(decoder)?,
            )),
            _ => {
                decoder.skip()?;
                builder
            }
        };
        Ok(builder)
    }

    let mut builder = crate::types::builders::ArcRoutingControlConfigurationBuilder::default();

    match decoder.map()? {
        None => loop {
            match decoder.datatype()? {
                ::aws_smithy_cbor::data::Type::Break => {
                    decoder.skip()?;
                    break;
                }
                _ => {
                    builder = pair(builder, decoder)?;
                }
            };
        },
        Some(n) => {
            for _ in 0..n {
                builder = pair(builder, decoder)?;
            }
        }
    };
    #[allow(clippy::needless_question_mark)]
    {
        return Ok(crate::serde_util::arc_routing_control_configuration_correct_errors(builder)
            .build()
            .map_err(|err| ::aws_smithy_cbor::decode::DeserializeError::custom(err.to_string(), decoder.position()))?);
    }
}
