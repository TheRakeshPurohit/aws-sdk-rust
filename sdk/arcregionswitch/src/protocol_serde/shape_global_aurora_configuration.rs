// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_global_aurora_configuration(
    encoder: &mut ::aws_smithy_cbor::Encoder,
    #[allow(unused)] input: &crate::types::GlobalAuroraConfiguration,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    encoder.begin_map();
    if input.timeout_minutes != 60 {
        encoder.str("timeoutMinutes").integer(input.timeout_minutes);
    }
    if let Some(var_1) = &input.cross_account_role {
        encoder.str("crossAccountRole").str(var_1.as_str());
    }
    if let Some(var_2) = &input.external_id {
        encoder.str("externalId").str(var_2.as_str());
    }
    {
        encoder.str("behavior").str(input.behavior.as_str());
    }
    if let Some(var_3) = &input.ungraceful {
        encoder.str("ungraceful");
        crate::protocol_serde::shape_global_aurora_ungraceful::ser_global_aurora_ungraceful(encoder, var_3)?;
    }
    {
        encoder.str("globalClusterIdentifier").str(input.global_cluster_identifier.as_str());
    }
    {
        encoder.str("databaseClusterArns");
        encoder.array((input.database_cluster_arns).len());
        for item_4 in &input.database_cluster_arns {
            {
                encoder.str(item_4.as_str());
            }
        }
    }
    encoder.end();
    Ok(())
}

pub(crate) fn de_global_aurora_configuration(
    decoder: &mut ::aws_smithy_cbor::Decoder,
) -> ::std::result::Result<crate::types::GlobalAuroraConfiguration, ::aws_smithy_cbor::decode::DeserializeError> {
    #[allow(clippy::match_single_binding)]
    fn pair(
        mut builder: crate::types::builders::GlobalAuroraConfigurationBuilder,
        decoder: &mut ::aws_smithy_cbor::Decoder,
    ) -> ::std::result::Result<crate::types::builders::GlobalAuroraConfigurationBuilder, ::aws_smithy_cbor::decode::DeserializeError> {
        builder = match decoder.str()?.as_ref() {
            "timeoutMinutes" => ::aws_smithy_cbor::decode::set_optional(builder, decoder, |builder, decoder| {
                Ok(builder.set_timeout_minutes(Some(decoder.integer()?)))
            })?,
            "crossAccountRole" => ::aws_smithy_cbor::decode::set_optional(builder, decoder, |builder, decoder| {
                Ok(builder.set_cross_account_role(Some(decoder.string()?)))
            })?,
            "externalId" => {
                ::aws_smithy_cbor::decode::set_optional(builder, decoder, |builder, decoder| Ok(builder.set_external_id(Some(decoder.string()?))))?
            }
            "behavior" => builder.set_behavior(Some(
                decoder.string().map(|s| crate::types::GlobalAuroraDefaultBehavior::from(s.as_ref()))?,
            )),
            "ungraceful" => ::aws_smithy_cbor::decode::set_optional(builder, decoder, |builder, decoder| {
                Ok(
                    builder.set_ungraceful(Some(crate::protocol_serde::shape_global_aurora_ungraceful::de_global_aurora_ungraceful(
                        decoder,
                    )?)),
                )
            })?,
            "globalClusterIdentifier" => builder.set_global_cluster_identifier(Some(decoder.string()?)),
            "databaseClusterArns" => {
                builder.set_database_cluster_arns(Some(crate::protocol_serde::shape_aurora_cluster_arns::de_aurora_cluster_arns(decoder)?))
            }
            _ => {
                decoder.skip()?;
                builder
            }
        };
        Ok(builder)
    }

    let mut builder = crate::types::builders::GlobalAuroraConfigurationBuilder::default();

    match decoder.map()? {
        None => loop {
            match decoder.datatype()? {
                ::aws_smithy_cbor::data::Type::Break => {
                    decoder.skip()?;
                    break;
                }
                _ => {
                    builder = pair(builder, decoder)?;
                }
            };
        },
        Some(n) => {
            for _ in 0..n {
                builder = pair(builder, decoder)?;
            }
        }
    };
    #[allow(clippy::needless_question_mark)]
    {
        return Ok(crate::serde_util::global_aurora_configuration_correct_errors(builder)
            .build()
            .map_err(|err| ::aws_smithy_cbor::decode::DeserializeError::custom(err.to_string(), decoder.position()))?);
    }
}
