// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn de_associated_alarm_map(
    decoder: &mut ::aws_smithy_cbor::Decoder,
) -> ::std::result::Result<
    ::std::collections::HashMap<::std::string::String, crate::types::AssociatedAlarm>,
    ::aws_smithy_cbor::decode::DeserializeError,
> {
    fn pair(
        mut map: ::std::collections::HashMap<::std::string::String, crate::types::AssociatedAlarm>,
        decoder: &mut ::aws_smithy_cbor::Decoder,
    ) -> ::std::result::Result<
        ::std::collections::HashMap<::std::string::String, crate::types::AssociatedAlarm>,
        ::aws_smithy_cbor::decode::DeserializeError,
    > {
        let key = decoder.string()?;
        let value = match decoder.datatype()? {
            ::aws_smithy_cbor::data::Type::Null => {
                decoder.null()?;
                return ::std::result::Result::Ok(map);
            }
            _ => crate::protocol_serde::shape_associated_alarm::de_associated_alarm(decoder)?,
        };
        map.insert(key, value);
        Ok(map)
    }

    let mut map = ::std::collections::HashMap::new();

    match decoder.map()? {
        None => loop {
            match decoder.datatype()? {
                ::aws_smithy_cbor::data::Type::Break => {
                    decoder.skip()?;
                    break;
                }
                _ => {
                    map = pair(map, decoder)?;
                }
            };
        },
        Some(n) => {
            for _ in 0..n {
                map = pair(map, decoder)?;
            }
        }
    };

    Ok(map)
}
