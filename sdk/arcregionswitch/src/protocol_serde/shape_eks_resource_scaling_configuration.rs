// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_eks_resource_scaling_configuration(
    encoder: &mut ::aws_smithy_cbor::Encoder,
    #[allow(unused)] input: &crate::types::EksResourceScalingConfiguration,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    encoder.begin_map();
    if input.timeout_minutes != 60 {
        encoder.str("timeoutMinutes").integer(input.timeout_minutes);
    }
    if let Some(var_1) = &input.kubernetes_resource_type {
        encoder.str("kubernetesResourceType");
        crate::protocol_serde::shape_kubernetes_resource_type::ser_kubernetes_resource_type(encoder, var_1)?;
    }
    if let Some(var_2) = &input.scaling_resources {
        encoder.str("scalingResources");
        encoder.array((*var_2).len());
        for item_3 in var_2 {
            {
                encoder.map((*item_3).len());
                for (key_4, value_5) in item_3 {
                    {
                        encoder.str(key_4.as_str());
                        encoder.map((*value_5).len());
                        for (key_6, value_7) in value_5 {
                            {
                                encoder.str(key_6.as_str());
                                crate::protocol_serde::shape_kubernetes_scaling_resource::ser_kubernetes_scaling_resource(encoder, value_7)?;
                            }
                        }
                    }
                }
            }
        }
    }
    if let Some(var_8) = &input.eks_clusters {
        encoder.str("eksClusters");
        encoder.array((*var_8).len());
        for item_9 in var_8 {
            {
                crate::protocol_serde::shape_eks_cluster::ser_eks_cluster(encoder, item_9)?;
            }
        }
    }
    if let Some(var_10) = &input.ungraceful {
        encoder.str("ungraceful");
        crate::protocol_serde::shape_eks_resource_scaling_ungraceful::ser_eks_resource_scaling_ungraceful(encoder, var_10)?;
    }
    if input.target_percent != 100 {
        encoder.str("targetPercent").integer(input.target_percent);
    }
    {
        encoder.str("capacityMonitoringApproach").str(input.capacity_monitoring_approach.as_str());
    }
    encoder.end();
    Ok(())
}

pub(crate) fn de_eks_resource_scaling_configuration(
    decoder: &mut ::aws_smithy_cbor::Decoder,
) -> ::std::result::Result<crate::types::EksResourceScalingConfiguration, ::aws_smithy_cbor::decode::DeserializeError> {
    #[allow(clippy::match_single_binding)]
    fn pair(
        mut builder: crate::types::builders::EksResourceScalingConfigurationBuilder,
        decoder: &mut ::aws_smithy_cbor::Decoder,
    ) -> ::std::result::Result<crate::types::builders::EksResourceScalingConfigurationBuilder, ::aws_smithy_cbor::decode::DeserializeError> {
        builder = match decoder.str()?.as_ref() {
            "timeoutMinutes" => ::aws_smithy_cbor::decode::set_optional(builder, decoder, |builder, decoder| {
                Ok(builder.set_timeout_minutes(Some(decoder.integer()?)))
            })?,
            "kubernetesResourceType" => builder.set_kubernetes_resource_type(Some(
                crate::protocol_serde::shape_kubernetes_resource_type::de_kubernetes_resource_type(decoder)?,
            )),
            "scalingResources" => ::aws_smithy_cbor::decode::set_optional(builder, decoder, |builder, decoder| {
                Ok(
                    builder.set_scaling_resources(Some(crate::protocol_serde::shape_kubernetes_scaling_apps::de_kubernetes_scaling_apps(
                        decoder,
                    )?)),
                )
            })?,
            "eksClusters" => ::aws_smithy_cbor::decode::set_optional(builder, decoder, |builder, decoder| {
                Ok(builder.set_eks_clusters(Some(crate::protocol_serde::shape_eks_clusters::de_eks_clusters(decoder)?)))
            })?,
            "ungraceful" => ::aws_smithy_cbor::decode::set_optional(builder, decoder, |builder, decoder| {
                Ok(builder.set_ungraceful(Some(
                    crate::protocol_serde::shape_eks_resource_scaling_ungraceful::de_eks_resource_scaling_ungraceful(decoder)?,
                )))
            })?,
            "targetPercent" => ::aws_smithy_cbor::decode::set_optional(builder, decoder, |builder, decoder| {
                Ok(builder.set_target_percent(Some(decoder.integer()?)))
            })?,
            "capacityMonitoringApproach" => ::aws_smithy_cbor::decode::set_optional(builder, decoder, |builder, decoder| {
                Ok(builder.set_capacity_monitoring_approach(Some(
                    decoder.string().map(|s| crate::types::EksCapacityMonitoringApproach::from(s.as_ref()))?,
                )))
            })?,
            _ => {
                decoder.skip()?;
                builder
            }
        };
        Ok(builder)
    }

    let mut builder = crate::types::builders::EksResourceScalingConfigurationBuilder::default();

    match decoder.map()? {
        None => loop {
            match decoder.datatype()? {
                ::aws_smithy_cbor::data::Type::Break => {
                    decoder.skip()?;
                    break;
                }
                _ => {
                    builder = pair(builder, decoder)?;
                }
            };
        },
        Some(n) => {
            for _ in 0..n {
                builder = pair(builder, decoder)?;
            }
        }
    };
    #[allow(clippy::needless_question_mark)]
    {
        return Ok(crate::serde_util::eks_resource_scaling_configuration_correct_errors(builder).build());
    }
}
