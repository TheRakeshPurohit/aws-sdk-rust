// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_execution_block_configuration(
    encoder: &mut ::aws_smithy_cbor::Encoder,
    input: &crate::types::ExecutionBlockConfiguration,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    encoder.map(1);
    match input {
        crate::types::ExecutionBlockConfiguration::CustomActionLambdaConfig(inner) => {
            encoder.str("customActionLambdaConfig");
            crate::protocol_serde::shape_custom_action_lambda_configuration::ser_custom_action_lambda_configuration(encoder, inner)?;
        }
        crate::types::ExecutionBlockConfiguration::Ec2AsgCapacityIncreaseConfig(inner) => {
            encoder.str("ec2AsgCapacityIncreaseConfig");
            crate::protocol_serde::shape_ec2_asg_capacity_increase_configuration::ser_ec2_asg_capacity_increase_configuration(encoder, inner)?;
        }
        crate::types::ExecutionBlockConfiguration::ExecutionApprovalConfig(inner) => {
            encoder.str("executionApprovalConfig");
            crate::protocol_serde::shape_execution_approval_configuration::ser_execution_approval_configuration(encoder, inner)?;
        }
        crate::types::ExecutionBlockConfiguration::ArcRoutingControlConfig(inner) => {
            encoder.str("arcRoutingControlConfig");
            crate::protocol_serde::shape_arc_routing_control_configuration::ser_arc_routing_control_configuration(encoder, inner)?;
        }
        crate::types::ExecutionBlockConfiguration::GlobalAuroraConfig(inner) => {
            encoder.str("globalAuroraConfig");
            crate::protocol_serde::shape_global_aurora_configuration::ser_global_aurora_configuration(encoder, inner)?;
        }
        crate::types::ExecutionBlockConfiguration::ParallelConfig(inner) => {
            encoder.str("parallelConfig");
            crate::protocol_serde::shape_parallel_execution_block_configuration::ser_parallel_execution_block_configuration(encoder, inner)?;
        }
        crate::types::ExecutionBlockConfiguration::RegionSwitchPlanConfig(inner) => {
            encoder.str("regionSwitchPlanConfig");
            crate::protocol_serde::shape_region_switch_plan_configuration::ser_region_switch_plan_configuration(encoder, inner)?;
        }
        crate::types::ExecutionBlockConfiguration::EcsCapacityIncreaseConfig(inner) => {
            encoder.str("ecsCapacityIncreaseConfig");
            crate::protocol_serde::shape_ecs_capacity_increase_configuration::ser_ecs_capacity_increase_configuration(encoder, inner)?;
        }
        crate::types::ExecutionBlockConfiguration::EksResourceScalingConfig(inner) => {
            encoder.str("eksResourceScalingConfig");
            crate::protocol_serde::shape_eks_resource_scaling_configuration::ser_eks_resource_scaling_configuration(encoder, inner)?;
        }
        crate::types::ExecutionBlockConfiguration::Route53HealthCheckConfig(inner) => {
            encoder.str("route53HealthCheckConfig");
            crate::protocol_serde::shape_route53_health_check_configuration::ser_route53_health_check_configuration(encoder, inner)?;
        }
        crate::types::ExecutionBlockConfiguration::Unknown => {
            return ::std::result::Result::Err(::aws_smithy_types::error::operation::SerializationError::unknown_variant(
                "ExecutionBlockConfiguration",
            ))
        }
    }
    ::std::result::Result::Ok(())
}

pub(crate) fn de_execution_block_configuration(
    decoder: &mut ::aws_smithy_cbor::Decoder,
) -> ::std::result::Result<crate::types::ExecutionBlockConfiguration, ::aws_smithy_cbor::decode::DeserializeError> {
    fn pair(
        decoder: &mut ::aws_smithy_cbor::Decoder,
    ) -> ::std::result::Result<crate::types::ExecutionBlockConfiguration, ::aws_smithy_cbor::decode::DeserializeError> {
        Ok(match decoder.str()?.as_ref() {
            "customActionLambdaConfig" => crate::types::ExecutionBlockConfiguration::CustomActionLambdaConfig(
                crate::protocol_serde::shape_custom_action_lambda_configuration::de_custom_action_lambda_configuration(decoder)?,
            ),
            "ec2AsgCapacityIncreaseConfig" => crate::types::ExecutionBlockConfiguration::Ec2AsgCapacityIncreaseConfig(
                crate::protocol_serde::shape_ec2_asg_capacity_increase_configuration::de_ec2_asg_capacity_increase_configuration(decoder)?,
            ),
            "executionApprovalConfig" => crate::types::ExecutionBlockConfiguration::ExecutionApprovalConfig(
                crate::protocol_serde::shape_execution_approval_configuration::de_execution_approval_configuration(decoder)?,
            ),
            "arcRoutingControlConfig" => crate::types::ExecutionBlockConfiguration::ArcRoutingControlConfig(
                crate::protocol_serde::shape_arc_routing_control_configuration::de_arc_routing_control_configuration(decoder)?,
            ),
            "globalAuroraConfig" => crate::types::ExecutionBlockConfiguration::GlobalAuroraConfig(
                crate::protocol_serde::shape_global_aurora_configuration::de_global_aurora_configuration(decoder)?,
            ),
            "parallelConfig" => crate::types::ExecutionBlockConfiguration::ParallelConfig(
                crate::protocol_serde::shape_parallel_execution_block_configuration::de_parallel_execution_block_configuration(decoder)?,
            ),
            "regionSwitchPlanConfig" => crate::types::ExecutionBlockConfiguration::RegionSwitchPlanConfig(
                crate::protocol_serde::shape_region_switch_plan_configuration::de_region_switch_plan_configuration(decoder)?,
            ),
            "ecsCapacityIncreaseConfig" => crate::types::ExecutionBlockConfiguration::EcsCapacityIncreaseConfig(
                crate::protocol_serde::shape_ecs_capacity_increase_configuration::de_ecs_capacity_increase_configuration(decoder)?,
            ),
            "eksResourceScalingConfig" => crate::types::ExecutionBlockConfiguration::EksResourceScalingConfig(
                crate::protocol_serde::shape_eks_resource_scaling_configuration::de_eks_resource_scaling_configuration(decoder)?,
            ),
            "route53HealthCheckConfig" => crate::types::ExecutionBlockConfiguration::Route53HealthCheckConfig(
                crate::protocol_serde::shape_route53_health_check_configuration::de_route53_health_check_configuration(decoder)?,
            ),
            _ => {
                decoder.skip()?;
                crate::types::ExecutionBlockConfiguration::Unknown
            }
        })
    }

    match decoder.map()? {
        None => {
            let variant = pair(decoder)?;
            match decoder.datatype()? {
                ::aws_smithy_cbor::data::Type::Break => {
                    decoder.skip()?;
                    Ok(variant)
                }
                ty => Err(::aws_smithy_cbor::decode::DeserializeError::unexpected_union_variant(
                    ty,
                    decoder.position(),
                )),
            }
        }
        Some(1) => pair(decoder),
        Some(_) => Err(::aws_smithy_cbor::decode::DeserializeError::mixed_union_variants(decoder.position())),
    }
}
