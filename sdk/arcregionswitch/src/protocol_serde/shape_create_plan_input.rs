// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_plan_input_input(
    encoder: &mut ::aws_smithy_cbor::Encoder,
    #[allow(unused)] input: &crate::operation::create_plan::CreatePlanInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    encoder.begin_map();
    if let Some(var_1) = &input.description {
        encoder.str("description").str(var_1.as_str());
    }
    if let Some(var_2) = &input.workflows {
        encoder.str("workflows");
        encoder.array((*var_2).len());
        for item_3 in var_2 {
            {
                crate::protocol_serde::shape_workflow::ser_workflow(encoder, item_3)?;
            }
        }
    }
    if let Some(var_4) = &input.execution_role {
        encoder.str("executionRole").str(var_4.as_str());
    }
    if let Some(var_5) = &input.recovery_time_objective_minutes {
        encoder.str("recoveryTimeObjectiveMinutes").integer(*var_5);
    }
    if let Some(var_6) = &input.associated_alarms {
        encoder.str("associatedAlarms");
        encoder.map((*var_6).len());
        for (key_7, value_8) in var_6 {
            {
                encoder.str(key_7.as_str());
                crate::protocol_serde::shape_associated_alarm::ser_associated_alarm(encoder, value_8)?;
            }
        }
    }
    if let Some(var_9) = &input.triggers {
        encoder.str("triggers");
        encoder.array((*var_9).len());
        for item_10 in var_9 {
            {
                crate::protocol_serde::shape_trigger::ser_trigger(encoder, item_10)?;
            }
        }
    }
    if let Some(var_11) = &input.name {
        encoder.str("name").str(var_11.as_str());
    }
    if let Some(var_12) = &input.regions {
        encoder.str("regions");
        encoder.array((*var_12).len());
        for item_13 in var_12 {
            {
                encoder.str(item_13.as_str());
            }
        }
    }
    if let Some(var_14) = &input.recovery_approach {
        encoder.str("recoveryApproach").str(var_14.as_str());
    }
    if let Some(var_15) = &input.primary_region {
        encoder.str("primaryRegion").str(var_15.as_str());
    }
    if let Some(var_16) = &input.tags {
        encoder.str("tags");
        encoder.map((*var_16).len());
        for (key_17, value_18) in var_16 {
            {
                encoder.str(key_17.as_str()).str(value_18.as_str());
            }
        }
    }
    encoder.end();
    Ok(())
}
