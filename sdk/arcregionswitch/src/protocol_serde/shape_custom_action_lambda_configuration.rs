// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_custom_action_lambda_configuration(
    encoder: &mut ::aws_smithy_cbor::Encoder,
    #[allow(unused)] input: &crate::types::CustomActionLambdaConfiguration,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    encoder.begin_map();
    if input.timeout_minutes != 60 {
        encoder.str("timeoutMinutes").integer(input.timeout_minutes);
    }
    {
        encoder.str("lambdas");
        encoder.array((input.lambdas).len());
        for item_1 in &input.lambdas {
            {
                crate::protocol_serde::shape_lambdas::ser_lambdas(encoder, item_1)?;
            }
        }
    }
    {
        encoder.str("retryIntervalMinutes").float(input.retry_interval_minutes);
    }
    {
        encoder.str("regionToRun").str(input.region_to_run.as_str());
    }
    if let Some(var_2) = &input.ungraceful {
        encoder.str("ungraceful");
        crate::protocol_serde::shape_lambda_ungraceful::ser_lambda_ungraceful(encoder, var_2)?;
    }
    encoder.end();
    Ok(())
}

pub(crate) fn de_custom_action_lambda_configuration(
    decoder: &mut ::aws_smithy_cbor::Decoder,
) -> ::std::result::Result<crate::types::CustomActionLambdaConfiguration, ::aws_smithy_cbor::decode::DeserializeError> {
    #[allow(clippy::match_single_binding)]
    fn pair(
        mut builder: crate::types::builders::CustomActionLambdaConfigurationBuilder,
        decoder: &mut ::aws_smithy_cbor::Decoder,
    ) -> ::std::result::Result<crate::types::builders::CustomActionLambdaConfigurationBuilder, ::aws_smithy_cbor::decode::DeserializeError> {
        builder = match decoder.str()?.as_ref() {
            "timeoutMinutes" => ::aws_smithy_cbor::decode::set_optional(builder, decoder, |builder, decoder| {
                Ok(builder.set_timeout_minutes(Some(decoder.integer()?)))
            })?,
            "lambdas" => builder.set_lambdas(Some(crate::protocol_serde::shape_lambda_list::de_lambda_list(decoder)?)),
            "retryIntervalMinutes" => builder.set_retry_interval_minutes(Some(decoder.float()?)),
            "regionToRun" => builder.set_region_to_run(Some(decoder.string().map(|s| crate::types::RegionToRunIn::from(s.as_ref()))?)),
            "ungraceful" => ::aws_smithy_cbor::decode::set_optional(builder, decoder, |builder, decoder| {
                Ok(builder.set_ungraceful(Some(crate::protocol_serde::shape_lambda_ungraceful::de_lambda_ungraceful(decoder)?)))
            })?,
            _ => {
                decoder.skip()?;
                builder
            }
        };
        Ok(builder)
    }

    let mut builder = crate::types::builders::CustomActionLambdaConfigurationBuilder::default();

    match decoder.map()? {
        None => loop {
            match decoder.datatype()? {
                ::aws_smithy_cbor::data::Type::Break => {
                    decoder.skip()?;
                    break;
                }
                _ => {
                    builder = pair(builder, decoder)?;
                }
            };
        },
        Some(n) => {
            for _ in 0..n {
                builder = pair(builder, decoder)?;
            }
        }
    };
    #[allow(clippy::needless_question_mark)]
    {
        return Ok(crate::serde_util::custom_action_lambda_configuration_correct_errors(builder)
            .build()
            .map_err(|err| ::aws_smithy_cbor::decode::DeserializeError::custom(err.to_string(), decoder.position()))?);
    }
}
