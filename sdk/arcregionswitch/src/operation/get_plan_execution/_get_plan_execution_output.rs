// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetPlanExecutionOutput {
    /// <p>The Amazon Resource Name (ARN) of the plan.</p>
    pub plan_arn: ::std::string::String,
    /// <p>The execution identifier of a plan execution.</p>
    pub execution_id: ::std::string::String,
    /// <p>The version for the plan.</p>
    pub version: ::std::option::Option<::std::string::String>,
    /// <p>The timestamp when the plan execution was last updated.</p>
    pub updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>A comment included on the plan execution.</p>
    pub comment: ::std::option::Option<::std::string::String>,
    /// <p>The time (UTC) when the plan execution started.</p>
    pub start_time: ::aws_smithy_types::DateTime,
    /// <p>The time (UTC) when the plan execution ended.</p>
    pub end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The plan execution mode. Valid values are <code>Practice</code>, for testing without making actual changes, or <code>Recovery</code>, for actual traffic shifting and application recovery.</p>
    pub mode: crate::types::ExecutionMode,
    /// <p>The plan execution state. Provides the state of a plan execution, for example, In Progress or Paused by Operator.</p>
    pub execution_state: crate::types::ExecutionState,
    /// <p>The plan execution action. Valid values are <code>Activate</code>, to activate an Amazon Web Services Region, or <code>Deactivate</code>, to deactivate a Region.</p>
    pub execution_action: crate::types::ExecutionAction,
    /// <p>The Amazon Web Services Region for a plan execution.</p>
    pub execution_region: ::std::string::String,
    /// <p>The states of the steps in the plan execution.</p>
    pub step_states: ::std::option::Option<::std::vec::Vec<crate::types::StepState>>,
    /// <p>The details of the Region switch plan.</p>
    pub plan: ::std::option::Option<crate::types::Plan>,
    /// <p>The actual recovery time that Region switch calculates for a plan execution. Actual recovery time includes the time for the plan to run added to the time elapsed until the application health alarms that you've specified are healthy again.</p>
    pub actual_recovery_time: ::std::option::Option<::std::string::String>,
    /// <p>Specifies that you want to receive the next page of results. Valid only if you received a <code>nextToken</code> response in the previous request. If you did, it indicates that more output is available. Set this parameter to the value provided by the previous call's <code>nextToken</code> response to request the next page of results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetPlanExecutionOutput {
    /// <p>The Amazon Resource Name (ARN) of the plan.</p>
    pub fn plan_arn(&self) -> &str {
        use std::ops::Deref;
        self.plan_arn.deref()
    }
    /// <p>The execution identifier of a plan execution.</p>
    pub fn execution_id(&self) -> &str {
        use std::ops::Deref;
        self.execution_id.deref()
    }
    /// <p>The version for the plan.</p>
    pub fn version(&self) -> ::std::option::Option<&str> {
        self.version.as_deref()
    }
    /// <p>The timestamp when the plan execution was last updated.</p>
    pub fn updated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
    /// <p>A comment included on the plan execution.</p>
    pub fn comment(&self) -> ::std::option::Option<&str> {
        self.comment.as_deref()
    }
    /// <p>The time (UTC) when the plan execution started.</p>
    pub fn start_time(&self) -> &::aws_smithy_types::DateTime {
        &self.start_time
    }
    /// <p>The time (UTC) when the plan execution ended.</p>
    pub fn end_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.end_time.as_ref()
    }
    /// <p>The plan execution mode. Valid values are <code>Practice</code>, for testing without making actual changes, or <code>Recovery</code>, for actual traffic shifting and application recovery.</p>
    pub fn mode(&self) -> &crate::types::ExecutionMode {
        &self.mode
    }
    /// <p>The plan execution state. Provides the state of a plan execution, for example, In Progress or Paused by Operator.</p>
    pub fn execution_state(&self) -> &crate::types::ExecutionState {
        &self.execution_state
    }
    /// <p>The plan execution action. Valid values are <code>Activate</code>, to activate an Amazon Web Services Region, or <code>Deactivate</code>, to deactivate a Region.</p>
    pub fn execution_action(&self) -> &crate::types::ExecutionAction {
        &self.execution_action
    }
    /// <p>The Amazon Web Services Region for a plan execution.</p>
    pub fn execution_region(&self) -> &str {
        use std::ops::Deref;
        self.execution_region.deref()
    }
    /// <p>The states of the steps in the plan execution.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.step_states.is_none()`.
    pub fn step_states(&self) -> &[crate::types::StepState] {
        self.step_states.as_deref().unwrap_or_default()
    }
    /// <p>The details of the Region switch plan.</p>
    pub fn plan(&self) -> ::std::option::Option<&crate::types::Plan> {
        self.plan.as_ref()
    }
    /// <p>The actual recovery time that Region switch calculates for a plan execution. Actual recovery time includes the time for the plan to run added to the time elapsed until the application health alarms that you've specified are healthy again.</p>
    pub fn actual_recovery_time(&self) -> ::std::option::Option<&str> {
        self.actual_recovery_time.as_deref()
    }
    /// <p>Specifies that you want to receive the next page of results. Valid only if you received a <code>nextToken</code> response in the previous request. If you did, it indicates that more output is available. Set this parameter to the value provided by the previous call's <code>nextToken</code> response to request the next page of results.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ::aws_types::request_id::RequestId for GetPlanExecutionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetPlanExecutionOutput {
    /// Creates a new builder-style object to manufacture [`GetPlanExecutionOutput`](crate::operation::get_plan_execution::GetPlanExecutionOutput).
    pub fn builder() -> crate::operation::get_plan_execution::builders::GetPlanExecutionOutputBuilder {
        crate::operation::get_plan_execution::builders::GetPlanExecutionOutputBuilder::default()
    }
}

/// A builder for [`GetPlanExecutionOutput`](crate::operation::get_plan_execution::GetPlanExecutionOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetPlanExecutionOutputBuilder {
    pub(crate) plan_arn: ::std::option::Option<::std::string::String>,
    pub(crate) execution_id: ::std::option::Option<::std::string::String>,
    pub(crate) version: ::std::option::Option<::std::string::String>,
    pub(crate) updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) comment: ::std::option::Option<::std::string::String>,
    pub(crate) start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) mode: ::std::option::Option<crate::types::ExecutionMode>,
    pub(crate) execution_state: ::std::option::Option<crate::types::ExecutionState>,
    pub(crate) execution_action: ::std::option::Option<crate::types::ExecutionAction>,
    pub(crate) execution_region: ::std::option::Option<::std::string::String>,
    pub(crate) step_states: ::std::option::Option<::std::vec::Vec<crate::types::StepState>>,
    pub(crate) plan: ::std::option::Option<crate::types::Plan>,
    pub(crate) actual_recovery_time: ::std::option::Option<::std::string::String>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetPlanExecutionOutputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the plan.</p>
    /// This field is required.
    pub fn plan_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.plan_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the plan.</p>
    pub fn set_plan_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.plan_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the plan.</p>
    pub fn get_plan_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.plan_arn
    }
    /// <p>The execution identifier of a plan execution.</p>
    /// This field is required.
    pub fn execution_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.execution_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The execution identifier of a plan execution.</p>
    pub fn set_execution_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.execution_id = input;
        self
    }
    /// <p>The execution identifier of a plan execution.</p>
    pub fn get_execution_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.execution_id
    }
    /// <p>The version for the plan.</p>
    pub fn version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version for the plan.</p>
    pub fn set_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.version = input;
        self
    }
    /// <p>The version for the plan.</p>
    pub fn get_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.version
    }
    /// <p>The timestamp when the plan execution was last updated.</p>
    pub fn updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the plan execution was last updated.</p>
    pub fn set_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>The timestamp when the plan execution was last updated.</p>
    pub fn get_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_at
    }
    /// <p>A comment included on the plan execution.</p>
    pub fn comment(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.comment = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A comment included on the plan execution.</p>
    pub fn set_comment(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.comment = input;
        self
    }
    /// <p>A comment included on the plan execution.</p>
    pub fn get_comment(&self) -> &::std::option::Option<::std::string::String> {
        &self.comment
    }
    /// <p>The time (UTC) when the plan execution started.</p>
    /// This field is required.
    pub fn start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time (UTC) when the plan execution started.</p>
    pub fn set_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_time = input;
        self
    }
    /// <p>The time (UTC) when the plan execution started.</p>
    pub fn get_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_time
    }
    /// <p>The time (UTC) when the plan execution ended.</p>
    pub fn end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.end_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time (UTC) when the plan execution ended.</p>
    pub fn set_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.end_time = input;
        self
    }
    /// <p>The time (UTC) when the plan execution ended.</p>
    pub fn get_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.end_time
    }
    /// <p>The plan execution mode. Valid values are <code>Practice</code>, for testing without making actual changes, or <code>Recovery</code>, for actual traffic shifting and application recovery.</p>
    /// This field is required.
    pub fn mode(mut self, input: crate::types::ExecutionMode) -> Self {
        self.mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>The plan execution mode. Valid values are <code>Practice</code>, for testing without making actual changes, or <code>Recovery</code>, for actual traffic shifting and application recovery.</p>
    pub fn set_mode(mut self, input: ::std::option::Option<crate::types::ExecutionMode>) -> Self {
        self.mode = input;
        self
    }
    /// <p>The plan execution mode. Valid values are <code>Practice</code>, for testing without making actual changes, or <code>Recovery</code>, for actual traffic shifting and application recovery.</p>
    pub fn get_mode(&self) -> &::std::option::Option<crate::types::ExecutionMode> {
        &self.mode
    }
    /// <p>The plan execution state. Provides the state of a plan execution, for example, In Progress or Paused by Operator.</p>
    /// This field is required.
    pub fn execution_state(mut self, input: crate::types::ExecutionState) -> Self {
        self.execution_state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The plan execution state. Provides the state of a plan execution, for example, In Progress or Paused by Operator.</p>
    pub fn set_execution_state(mut self, input: ::std::option::Option<crate::types::ExecutionState>) -> Self {
        self.execution_state = input;
        self
    }
    /// <p>The plan execution state. Provides the state of a plan execution, for example, In Progress or Paused by Operator.</p>
    pub fn get_execution_state(&self) -> &::std::option::Option<crate::types::ExecutionState> {
        &self.execution_state
    }
    /// <p>The plan execution action. Valid values are <code>Activate</code>, to activate an Amazon Web Services Region, or <code>Deactivate</code>, to deactivate a Region.</p>
    /// This field is required.
    pub fn execution_action(mut self, input: crate::types::ExecutionAction) -> Self {
        self.execution_action = ::std::option::Option::Some(input);
        self
    }
    /// <p>The plan execution action. Valid values are <code>Activate</code>, to activate an Amazon Web Services Region, or <code>Deactivate</code>, to deactivate a Region.</p>
    pub fn set_execution_action(mut self, input: ::std::option::Option<crate::types::ExecutionAction>) -> Self {
        self.execution_action = input;
        self
    }
    /// <p>The plan execution action. Valid values are <code>Activate</code>, to activate an Amazon Web Services Region, or <code>Deactivate</code>, to deactivate a Region.</p>
    pub fn get_execution_action(&self) -> &::std::option::Option<crate::types::ExecutionAction> {
        &self.execution_action
    }
    /// <p>The Amazon Web Services Region for a plan execution.</p>
    /// This field is required.
    pub fn execution_region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.execution_region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services Region for a plan execution.</p>
    pub fn set_execution_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.execution_region = input;
        self
    }
    /// <p>The Amazon Web Services Region for a plan execution.</p>
    pub fn get_execution_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.execution_region
    }
    /// Appends an item to `step_states`.
    ///
    /// To override the contents of this collection use [`set_step_states`](Self::set_step_states).
    ///
    /// <p>The states of the steps in the plan execution.</p>
    pub fn step_states(mut self, input: crate::types::StepState) -> Self {
        let mut v = self.step_states.unwrap_or_default();
        v.push(input);
        self.step_states = ::std::option::Option::Some(v);
        self
    }
    /// <p>The states of the steps in the plan execution.</p>
    pub fn set_step_states(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StepState>>) -> Self {
        self.step_states = input;
        self
    }
    /// <p>The states of the steps in the plan execution.</p>
    pub fn get_step_states(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StepState>> {
        &self.step_states
    }
    /// <p>The details of the Region switch plan.</p>
    pub fn plan(mut self, input: crate::types::Plan) -> Self {
        self.plan = ::std::option::Option::Some(input);
        self
    }
    /// <p>The details of the Region switch plan.</p>
    pub fn set_plan(mut self, input: ::std::option::Option<crate::types::Plan>) -> Self {
        self.plan = input;
        self
    }
    /// <p>The details of the Region switch plan.</p>
    pub fn get_plan(&self) -> &::std::option::Option<crate::types::Plan> {
        &self.plan
    }
    /// <p>The actual recovery time that Region switch calculates for a plan execution. Actual recovery time includes the time for the plan to run added to the time elapsed until the application health alarms that you've specified are healthy again.</p>
    pub fn actual_recovery_time(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.actual_recovery_time = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The actual recovery time that Region switch calculates for a plan execution. Actual recovery time includes the time for the plan to run added to the time elapsed until the application health alarms that you've specified are healthy again.</p>
    pub fn set_actual_recovery_time(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.actual_recovery_time = input;
        self
    }
    /// <p>The actual recovery time that Region switch calculates for a plan execution. Actual recovery time includes the time for the plan to run added to the time elapsed until the application health alarms that you've specified are healthy again.</p>
    pub fn get_actual_recovery_time(&self) -> &::std::option::Option<::std::string::String> {
        &self.actual_recovery_time
    }
    /// <p>Specifies that you want to receive the next page of results. Valid only if you received a <code>nextToken</code> response in the previous request. If you did, it indicates that more output is available. Set this parameter to the value provided by the previous call's <code>nextToken</code> response to request the next page of results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies that you want to receive the next page of results. Valid only if you received a <code>nextToken</code> response in the previous request. If you did, it indicates that more output is available. Set this parameter to the value provided by the previous call's <code>nextToken</code> response to request the next page of results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>Specifies that you want to receive the next page of results. Valid only if you received a <code>nextToken</code> response in the previous request. If you did, it indicates that more output is available. Set this parameter to the value provided by the previous call's <code>nextToken</code> response to request the next page of results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetPlanExecutionOutput`](crate::operation::get_plan_execution::GetPlanExecutionOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`plan_arn`](crate::operation::get_plan_execution::builders::GetPlanExecutionOutputBuilder::plan_arn)
    /// - [`execution_id`](crate::operation::get_plan_execution::builders::GetPlanExecutionOutputBuilder::execution_id)
    /// - [`start_time`](crate::operation::get_plan_execution::builders::GetPlanExecutionOutputBuilder::start_time)
    /// - [`mode`](crate::operation::get_plan_execution::builders::GetPlanExecutionOutputBuilder::mode)
    /// - [`execution_state`](crate::operation::get_plan_execution::builders::GetPlanExecutionOutputBuilder::execution_state)
    /// - [`execution_action`](crate::operation::get_plan_execution::builders::GetPlanExecutionOutputBuilder::execution_action)
    /// - [`execution_region`](crate::operation::get_plan_execution::builders::GetPlanExecutionOutputBuilder::execution_region)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::get_plan_execution::GetPlanExecutionOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::get_plan_execution::GetPlanExecutionOutput {
            plan_arn: self.plan_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "plan_arn",
                    "plan_arn was not specified but it is required when building GetPlanExecutionOutput",
                )
            })?,
            execution_id: self.execution_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "execution_id",
                    "execution_id was not specified but it is required when building GetPlanExecutionOutput",
                )
            })?,
            version: self.version,
            updated_at: self.updated_at,
            comment: self.comment,
            start_time: self.start_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "start_time",
                    "start_time was not specified but it is required when building GetPlanExecutionOutput",
                )
            })?,
            end_time: self.end_time,
            mode: self.mode.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "mode",
                    "mode was not specified but it is required when building GetPlanExecutionOutput",
                )
            })?,
            execution_state: self.execution_state.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "execution_state",
                    "execution_state was not specified but it is required when building GetPlanExecutionOutput",
                )
            })?,
            execution_action: self.execution_action.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "execution_action",
                    "execution_action was not specified but it is required when building GetPlanExecutionOutput",
                )
            })?,
            execution_region: self.execution_region.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "execution_region",
                    "execution_region was not specified but it is required when building GetPlanExecutionOutput",
                )
            })?,
            step_states: self.step_states,
            plan: self.plan,
            actual_recovery_time: self.actual_recovery_time,
            next_token: self.next_token,
            _request_id: self._request_id,
        })
    }
}
