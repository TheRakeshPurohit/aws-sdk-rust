// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetPlanExecutionInput {
    /// <p>The Amazon Resource Name (ARN) of the plan with the execution to retrieve.</p>
    pub plan_arn: ::std::option::Option<::std::string::String>,
    /// <p>The execution identifier of a plan execution.</p>
    pub execution_id: ::std::option::Option<::std::string::String>,
    /// <p>The number of objects that you want to return with this call.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>Specifies that you want to receive the next page of results. Valid only if you received a <code>nextToken</code> response in the previous request. If you did, it indicates that more output is available. Set this parameter to the value provided by the previous call's <code>nextToken</code> response to request the next page of results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
}
impl GetPlanExecutionInput {
    /// <p>The Amazon Resource Name (ARN) of the plan with the execution to retrieve.</p>
    pub fn plan_arn(&self) -> ::std::option::Option<&str> {
        self.plan_arn.as_deref()
    }
    /// <p>The execution identifier of a plan execution.</p>
    pub fn execution_id(&self) -> ::std::option::Option<&str> {
        self.execution_id.as_deref()
    }
    /// <p>The number of objects that you want to return with this call.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>Specifies that you want to receive the next page of results. Valid only if you received a <code>nextToken</code> response in the previous request. If you did, it indicates that more output is available. Set this parameter to the value provided by the previous call's <code>nextToken</code> response to request the next page of results.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl GetPlanExecutionInput {
    /// Creates a new builder-style object to manufacture [`GetPlanExecutionInput`](crate::operation::get_plan_execution::GetPlanExecutionInput).
    pub fn builder() -> crate::operation::get_plan_execution::builders::GetPlanExecutionInputBuilder {
        crate::operation::get_plan_execution::builders::GetPlanExecutionInputBuilder::default()
    }
}

/// A builder for [`GetPlanExecutionInput`](crate::operation::get_plan_execution::GetPlanExecutionInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetPlanExecutionInputBuilder {
    pub(crate) plan_arn: ::std::option::Option<::std::string::String>,
    pub(crate) execution_id: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
}
impl GetPlanExecutionInputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the plan with the execution to retrieve.</p>
    /// This field is required.
    pub fn plan_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.plan_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the plan with the execution to retrieve.</p>
    pub fn set_plan_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.plan_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the plan with the execution to retrieve.</p>
    pub fn get_plan_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.plan_arn
    }
    /// <p>The execution identifier of a plan execution.</p>
    /// This field is required.
    pub fn execution_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.execution_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The execution identifier of a plan execution.</p>
    pub fn set_execution_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.execution_id = input;
        self
    }
    /// <p>The execution identifier of a plan execution.</p>
    pub fn get_execution_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.execution_id
    }
    /// <p>The number of objects that you want to return with this call.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of objects that you want to return with this call.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The number of objects that you want to return with this call.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>Specifies that you want to receive the next page of results. Valid only if you received a <code>nextToken</code> response in the previous request. If you did, it indicates that more output is available. Set this parameter to the value provided by the previous call's <code>nextToken</code> response to request the next page of results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies that you want to receive the next page of results. Valid only if you received a <code>nextToken</code> response in the previous request. If you did, it indicates that more output is available. Set this parameter to the value provided by the previous call's <code>nextToken</code> response to request the next page of results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>Specifies that you want to receive the next page of results. Valid only if you received a <code>nextToken</code> response in the previous request. If you did, it indicates that more output is available. Set this parameter to the value provided by the previous call's <code>nextToken</code> response to request the next page of results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Consumes the builder and constructs a [`GetPlanExecutionInput`](crate::operation::get_plan_execution::GetPlanExecutionInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::get_plan_execution::GetPlanExecutionInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::get_plan_execution::GetPlanExecutionInput {
            plan_arn: self.plan_arn,
            execution_id: self.execution_id,
            max_results: self.max_results,
            next_token: self.next_token,
        })
    }
}
