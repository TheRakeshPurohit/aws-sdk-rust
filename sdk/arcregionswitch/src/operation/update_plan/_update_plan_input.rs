// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdatePlanInput {
    /// <p>The Amazon Resource Name (ARN) of the plan.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The updated description for the Region switch plan.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The updated workflows for the Region switch plan.</p>
    pub workflows: ::std::option::Option<::std::vec::Vec<crate::types::Workflow>>,
    /// <p>The updated IAM role ARN that grants Region switch the permissions needed to execute the plan steps.</p>
    pub execution_role: ::std::option::Option<::std::string::String>,
    /// <p>The updated target recovery time objective (RTO) in minutes for the plan.</p>
    pub recovery_time_objective_minutes: ::std::option::Option<i32>,
    /// <p>The updated CloudWatch alarms associated with the plan.</p>
    pub associated_alarms: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::AssociatedAlarm>>,
    /// <p>The updated conditions that can automatically trigger the execution of the plan.</p>
    pub triggers: ::std::option::Option<::std::vec::Vec<crate::types::Trigger>>,
}
impl UpdatePlanInput {
    /// <p>The Amazon Resource Name (ARN) of the plan.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The updated description for the Region switch plan.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The updated workflows for the Region switch plan.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.workflows.is_none()`.
    pub fn workflows(&self) -> &[crate::types::Workflow] {
        self.workflows.as_deref().unwrap_or_default()
    }
    /// <p>The updated IAM role ARN that grants Region switch the permissions needed to execute the plan steps.</p>
    pub fn execution_role(&self) -> ::std::option::Option<&str> {
        self.execution_role.as_deref()
    }
    /// <p>The updated target recovery time objective (RTO) in minutes for the plan.</p>
    pub fn recovery_time_objective_minutes(&self) -> ::std::option::Option<i32> {
        self.recovery_time_objective_minutes
    }
    /// <p>The updated CloudWatch alarms associated with the plan.</p>
    pub fn associated_alarms(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, crate::types::AssociatedAlarm>> {
        self.associated_alarms.as_ref()
    }
    /// <p>The updated conditions that can automatically trigger the execution of the plan.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.triggers.is_none()`.
    pub fn triggers(&self) -> &[crate::types::Trigger] {
        self.triggers.as_deref().unwrap_or_default()
    }
}
impl UpdatePlanInput {
    /// Creates a new builder-style object to manufacture [`UpdatePlanInput`](crate::operation::update_plan::UpdatePlanInput).
    pub fn builder() -> crate::operation::update_plan::builders::UpdatePlanInputBuilder {
        crate::operation::update_plan::builders::UpdatePlanInputBuilder::default()
    }
}

/// A builder for [`UpdatePlanInput`](crate::operation::update_plan::UpdatePlanInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdatePlanInputBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) workflows: ::std::option::Option<::std::vec::Vec<crate::types::Workflow>>,
    pub(crate) execution_role: ::std::option::Option<::std::string::String>,
    pub(crate) recovery_time_objective_minutes: ::std::option::Option<i32>,
    pub(crate) associated_alarms: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::AssociatedAlarm>>,
    pub(crate) triggers: ::std::option::Option<::std::vec::Vec<crate::types::Trigger>>,
}
impl UpdatePlanInputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the plan.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the plan.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the plan.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The updated description for the Region switch plan.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The updated description for the Region switch plan.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The updated description for the Region switch plan.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Appends an item to `workflows`.
    ///
    /// To override the contents of this collection use [`set_workflows`](Self::set_workflows).
    ///
    /// <p>The updated workflows for the Region switch plan.</p>
    pub fn workflows(mut self, input: crate::types::Workflow) -> Self {
        let mut v = self.workflows.unwrap_or_default();
        v.push(input);
        self.workflows = ::std::option::Option::Some(v);
        self
    }
    /// <p>The updated workflows for the Region switch plan.</p>
    pub fn set_workflows(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Workflow>>) -> Self {
        self.workflows = input;
        self
    }
    /// <p>The updated workflows for the Region switch plan.</p>
    pub fn get_workflows(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Workflow>> {
        &self.workflows
    }
    /// <p>The updated IAM role ARN that grants Region switch the permissions needed to execute the plan steps.</p>
    /// This field is required.
    pub fn execution_role(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.execution_role = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The updated IAM role ARN that grants Region switch the permissions needed to execute the plan steps.</p>
    pub fn set_execution_role(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.execution_role = input;
        self
    }
    /// <p>The updated IAM role ARN that grants Region switch the permissions needed to execute the plan steps.</p>
    pub fn get_execution_role(&self) -> &::std::option::Option<::std::string::String> {
        &self.execution_role
    }
    /// <p>The updated target recovery time objective (RTO) in minutes for the plan.</p>
    pub fn recovery_time_objective_minutes(mut self, input: i32) -> Self {
        self.recovery_time_objective_minutes = ::std::option::Option::Some(input);
        self
    }
    /// <p>The updated target recovery time objective (RTO) in minutes for the plan.</p>
    pub fn set_recovery_time_objective_minutes(mut self, input: ::std::option::Option<i32>) -> Self {
        self.recovery_time_objective_minutes = input;
        self
    }
    /// <p>The updated target recovery time objective (RTO) in minutes for the plan.</p>
    pub fn get_recovery_time_objective_minutes(&self) -> &::std::option::Option<i32> {
        &self.recovery_time_objective_minutes
    }
    /// Adds a key-value pair to `associated_alarms`.
    ///
    /// To override the contents of this collection use [`set_associated_alarms`](Self::set_associated_alarms).
    ///
    /// <p>The updated CloudWatch alarms associated with the plan.</p>
    pub fn associated_alarms(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::AssociatedAlarm) -> Self {
        let mut hash_map = self.associated_alarms.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.associated_alarms = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The updated CloudWatch alarms associated with the plan.</p>
    pub fn set_associated_alarms(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::AssociatedAlarm>>,
    ) -> Self {
        self.associated_alarms = input;
        self
    }
    /// <p>The updated CloudWatch alarms associated with the plan.</p>
    pub fn get_associated_alarms(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::AssociatedAlarm>> {
        &self.associated_alarms
    }
    /// Appends an item to `triggers`.
    ///
    /// To override the contents of this collection use [`set_triggers`](Self::set_triggers).
    ///
    /// <p>The updated conditions that can automatically trigger the execution of the plan.</p>
    pub fn triggers(mut self, input: crate::types::Trigger) -> Self {
        let mut v = self.triggers.unwrap_or_default();
        v.push(input);
        self.triggers = ::std::option::Option::Some(v);
        self
    }
    /// <p>The updated conditions that can automatically trigger the execution of the plan.</p>
    pub fn set_triggers(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Trigger>>) -> Self {
        self.triggers = input;
        self
    }
    /// <p>The updated conditions that can automatically trigger the execution of the plan.</p>
    pub fn get_triggers(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Trigger>> {
        &self.triggers
    }
    /// Consumes the builder and constructs a [`UpdatePlanInput`](crate::operation::update_plan::UpdatePlanInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::update_plan::UpdatePlanInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_plan::UpdatePlanInput {
            arn: self.arn,
            description: self.description,
            workflows: self.workflows,
            execution_role: self.execution_role,
            recovery_time_objective_minutes: self.recovery_time_objective_minutes,
            associated_alarms: self.associated_alarms,
            triggers: self.triggers,
        })
    }
}
