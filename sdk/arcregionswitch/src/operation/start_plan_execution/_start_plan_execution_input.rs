// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StartPlanExecutionInput {
    /// <p>The Amazon Resource Name (ARN) of the plan to execute.</p>
    pub plan_arn: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Web Services Region to target with this execution. This is the Region that traffic will be shifted to or from, depending on the action.</p>
    pub target_region: ::std::option::Option<::std::string::String>,
    /// <p>The action to perform. Valid values are ACTIVATE (to shift traffic to the target Region) or DEACTIVATE (to shift traffic away from the target Region).</p>
    pub action: ::std::option::Option<crate::types::ExecutionAction>,
    /// <p>The plan execution mode. Valid values are <code>Practice</code>, for testing without making actual changes, or <code>Recovery</code>, for actual traffic shifting and application recovery.</p>
    pub mode: ::std::option::Option<crate::types::ExecutionMode>,
    /// <p>An optional comment explaining why the plan execution is being started.</p>
    pub comment: ::std::option::Option<::std::string::String>,
    /// <p>A boolean value indicating whether to use the latest version of the plan. If set to false, you must specify a specific version.</p>
    pub latest_version: ::std::option::Option<::std::string::String>,
}
impl StartPlanExecutionInput {
    /// <p>The Amazon Resource Name (ARN) of the plan to execute.</p>
    pub fn plan_arn(&self) -> ::std::option::Option<&str> {
        self.plan_arn.as_deref()
    }
    /// <p>The Amazon Web Services Region to target with this execution. This is the Region that traffic will be shifted to or from, depending on the action.</p>
    pub fn target_region(&self) -> ::std::option::Option<&str> {
        self.target_region.as_deref()
    }
    /// <p>The action to perform. Valid values are ACTIVATE (to shift traffic to the target Region) or DEACTIVATE (to shift traffic away from the target Region).</p>
    pub fn action(&self) -> ::std::option::Option<&crate::types::ExecutionAction> {
        self.action.as_ref()
    }
    /// <p>The plan execution mode. Valid values are <code>Practice</code>, for testing without making actual changes, or <code>Recovery</code>, for actual traffic shifting and application recovery.</p>
    pub fn mode(&self) -> ::std::option::Option<&crate::types::ExecutionMode> {
        self.mode.as_ref()
    }
    /// <p>An optional comment explaining why the plan execution is being started.</p>
    pub fn comment(&self) -> ::std::option::Option<&str> {
        self.comment.as_deref()
    }
    /// <p>A boolean value indicating whether to use the latest version of the plan. If set to false, you must specify a specific version.</p>
    pub fn latest_version(&self) -> ::std::option::Option<&str> {
        self.latest_version.as_deref()
    }
}
impl StartPlanExecutionInput {
    /// Creates a new builder-style object to manufacture [`StartPlanExecutionInput`](crate::operation::start_plan_execution::StartPlanExecutionInput).
    pub fn builder() -> crate::operation::start_plan_execution::builders::StartPlanExecutionInputBuilder {
        crate::operation::start_plan_execution::builders::StartPlanExecutionInputBuilder::default()
    }
}

/// A builder for [`StartPlanExecutionInput`](crate::operation::start_plan_execution::StartPlanExecutionInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct StartPlanExecutionInputBuilder {
    pub(crate) plan_arn: ::std::option::Option<::std::string::String>,
    pub(crate) target_region: ::std::option::Option<::std::string::String>,
    pub(crate) action: ::std::option::Option<crate::types::ExecutionAction>,
    pub(crate) mode: ::std::option::Option<crate::types::ExecutionMode>,
    pub(crate) comment: ::std::option::Option<::std::string::String>,
    pub(crate) latest_version: ::std::option::Option<::std::string::String>,
}
impl StartPlanExecutionInputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the plan to execute.</p>
    /// This field is required.
    pub fn plan_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.plan_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the plan to execute.</p>
    pub fn set_plan_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.plan_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the plan to execute.</p>
    pub fn get_plan_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.plan_arn
    }
    /// <p>The Amazon Web Services Region to target with this execution. This is the Region that traffic will be shifted to or from, depending on the action.</p>
    /// This field is required.
    pub fn target_region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.target_region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services Region to target with this execution. This is the Region that traffic will be shifted to or from, depending on the action.</p>
    pub fn set_target_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.target_region = input;
        self
    }
    /// <p>The Amazon Web Services Region to target with this execution. This is the Region that traffic will be shifted to or from, depending on the action.</p>
    pub fn get_target_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.target_region
    }
    /// <p>The action to perform. Valid values are ACTIVATE (to shift traffic to the target Region) or DEACTIVATE (to shift traffic away from the target Region).</p>
    /// This field is required.
    pub fn action(mut self, input: crate::types::ExecutionAction) -> Self {
        self.action = ::std::option::Option::Some(input);
        self
    }
    /// <p>The action to perform. Valid values are ACTIVATE (to shift traffic to the target Region) or DEACTIVATE (to shift traffic away from the target Region).</p>
    pub fn set_action(mut self, input: ::std::option::Option<crate::types::ExecutionAction>) -> Self {
        self.action = input;
        self
    }
    /// <p>The action to perform. Valid values are ACTIVATE (to shift traffic to the target Region) or DEACTIVATE (to shift traffic away from the target Region).</p>
    pub fn get_action(&self) -> &::std::option::Option<crate::types::ExecutionAction> {
        &self.action
    }
    /// <p>The plan execution mode. Valid values are <code>Practice</code>, for testing without making actual changes, or <code>Recovery</code>, for actual traffic shifting and application recovery.</p>
    pub fn mode(mut self, input: crate::types::ExecutionMode) -> Self {
        self.mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>The plan execution mode. Valid values are <code>Practice</code>, for testing without making actual changes, or <code>Recovery</code>, for actual traffic shifting and application recovery.</p>
    pub fn set_mode(mut self, input: ::std::option::Option<crate::types::ExecutionMode>) -> Self {
        self.mode = input;
        self
    }
    /// <p>The plan execution mode. Valid values are <code>Practice</code>, for testing without making actual changes, or <code>Recovery</code>, for actual traffic shifting and application recovery.</p>
    pub fn get_mode(&self) -> &::std::option::Option<crate::types::ExecutionMode> {
        &self.mode
    }
    /// <p>An optional comment explaining why the plan execution is being started.</p>
    pub fn comment(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.comment = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An optional comment explaining why the plan execution is being started.</p>
    pub fn set_comment(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.comment = input;
        self
    }
    /// <p>An optional comment explaining why the plan execution is being started.</p>
    pub fn get_comment(&self) -> &::std::option::Option<::std::string::String> {
        &self.comment
    }
    /// <p>A boolean value indicating whether to use the latest version of the plan. If set to false, you must specify a specific version.</p>
    pub fn latest_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.latest_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A boolean value indicating whether to use the latest version of the plan. If set to false, you must specify a specific version.</p>
    pub fn set_latest_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.latest_version = input;
        self
    }
    /// <p>A boolean value indicating whether to use the latest version of the plan. If set to false, you must specify a specific version.</p>
    pub fn get_latest_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.latest_version
    }
    /// Consumes the builder and constructs a [`StartPlanExecutionInput`](crate::operation::start_plan_execution::StartPlanExecutionInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::start_plan_execution::StartPlanExecutionInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::start_plan_execution::StartPlanExecutionInput {
            plan_arn: self.plan_arn,
            target_region: self.target_region,
            action: self.action,
            mode: self.mode,
            comment: self.comment,
            latest_version: self.latest_version,
        })
    }
}
