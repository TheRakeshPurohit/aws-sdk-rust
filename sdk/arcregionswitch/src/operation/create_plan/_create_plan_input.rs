// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreatePlanInput {
    /// <p>The description of a Region switch plan.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>An array of workflows included in a Region switch plan.</p>
    pub workflows: ::std::option::Option<::std::vec::Vec<crate::types::Workflow>>,
    /// <p>An execution role is a way to categorize a Region switch plan.</p>
    pub execution_role: ::std::option::Option<::std::string::String>,
    /// <p>Optionally, you can specify an recovery time objective for a Region switch plan, in minutes.</p>
    pub recovery_time_objective_minutes: ::std::option::Option<i32>,
    /// <p>The alarms associated with a Region switch plan.</p>
    pub associated_alarms: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::AssociatedAlarm>>,
    /// <p>The triggers associated with a Region switch plan.</p>
    pub triggers: ::std::option::Option<::std::vec::Vec<crate::types::Trigger>>,
    /// <p>The name of a Region switch plan.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>An array that specifies the Amazon Web Services Regions for a Region switch plan. Specify two Regions.</p>
    pub regions: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The recovery approach for a Region switch plan, which can be active/active (activeActive) or active/passive (activePassive).</p>
    pub recovery_approach: ::std::option::Option<crate::types::RecoveryApproach>,
    /// <p>The primary Amazon Web Services Region for the application. This is the Region where the application normally runs before any Region switch occurs.</p>
    pub primary_region: ::std::option::Option<::std::string::String>,
    /// <p>The tags to apply to the Region switch plan.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreatePlanInput {
    /// <p>The description of a Region switch plan.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>An array of workflows included in a Region switch plan.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.workflows.is_none()`.
    pub fn workflows(&self) -> &[crate::types::Workflow] {
        self.workflows.as_deref().unwrap_or_default()
    }
    /// <p>An execution role is a way to categorize a Region switch plan.</p>
    pub fn execution_role(&self) -> ::std::option::Option<&str> {
        self.execution_role.as_deref()
    }
    /// <p>Optionally, you can specify an recovery time objective for a Region switch plan, in minutes.</p>
    pub fn recovery_time_objective_minutes(&self) -> ::std::option::Option<i32> {
        self.recovery_time_objective_minutes
    }
    /// <p>The alarms associated with a Region switch plan.</p>
    pub fn associated_alarms(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, crate::types::AssociatedAlarm>> {
        self.associated_alarms.as_ref()
    }
    /// <p>The triggers associated with a Region switch plan.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.triggers.is_none()`.
    pub fn triggers(&self) -> &[crate::types::Trigger] {
        self.triggers.as_deref().unwrap_or_default()
    }
    /// <p>The name of a Region switch plan.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>An array that specifies the Amazon Web Services Regions for a Region switch plan. Specify two Regions.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.regions.is_none()`.
    pub fn regions(&self) -> &[::std::string::String] {
        self.regions.as_deref().unwrap_or_default()
    }
    /// <p>The recovery approach for a Region switch plan, which can be active/active (activeActive) or active/passive (activePassive).</p>
    pub fn recovery_approach(&self) -> ::std::option::Option<&crate::types::RecoveryApproach> {
        self.recovery_approach.as_ref()
    }
    /// <p>The primary Amazon Web Services Region for the application. This is the Region where the application normally runs before any Region switch occurs.</p>
    pub fn primary_region(&self) -> ::std::option::Option<&str> {
        self.primary_region.as_deref()
    }
    /// <p>The tags to apply to the Region switch plan.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl CreatePlanInput {
    /// Creates a new builder-style object to manufacture [`CreatePlanInput`](crate::operation::create_plan::CreatePlanInput).
    pub fn builder() -> crate::operation::create_plan::builders::CreatePlanInputBuilder {
        crate::operation::create_plan::builders::CreatePlanInputBuilder::default()
    }
}

/// A builder for [`CreatePlanInput`](crate::operation::create_plan::CreatePlanInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreatePlanInputBuilder {
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) workflows: ::std::option::Option<::std::vec::Vec<crate::types::Workflow>>,
    pub(crate) execution_role: ::std::option::Option<::std::string::String>,
    pub(crate) recovery_time_objective_minutes: ::std::option::Option<i32>,
    pub(crate) associated_alarms: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::AssociatedAlarm>>,
    pub(crate) triggers: ::std::option::Option<::std::vec::Vec<crate::types::Trigger>>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) regions: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) recovery_approach: ::std::option::Option<crate::types::RecoveryApproach>,
    pub(crate) primary_region: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreatePlanInputBuilder {
    /// <p>The description of a Region switch plan.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of a Region switch plan.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of a Region switch plan.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Appends an item to `workflows`.
    ///
    /// To override the contents of this collection use [`set_workflows`](Self::set_workflows).
    ///
    /// <p>An array of workflows included in a Region switch plan.</p>
    pub fn workflows(mut self, input: crate::types::Workflow) -> Self {
        let mut v = self.workflows.unwrap_or_default();
        v.push(input);
        self.workflows = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of workflows included in a Region switch plan.</p>
    pub fn set_workflows(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Workflow>>) -> Self {
        self.workflows = input;
        self
    }
    /// <p>An array of workflows included in a Region switch plan.</p>
    pub fn get_workflows(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Workflow>> {
        &self.workflows
    }
    /// <p>An execution role is a way to categorize a Region switch plan.</p>
    /// This field is required.
    pub fn execution_role(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.execution_role = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An execution role is a way to categorize a Region switch plan.</p>
    pub fn set_execution_role(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.execution_role = input;
        self
    }
    /// <p>An execution role is a way to categorize a Region switch plan.</p>
    pub fn get_execution_role(&self) -> &::std::option::Option<::std::string::String> {
        &self.execution_role
    }
    /// <p>Optionally, you can specify an recovery time objective for a Region switch plan, in minutes.</p>
    pub fn recovery_time_objective_minutes(mut self, input: i32) -> Self {
        self.recovery_time_objective_minutes = ::std::option::Option::Some(input);
        self
    }
    /// <p>Optionally, you can specify an recovery time objective for a Region switch plan, in minutes.</p>
    pub fn set_recovery_time_objective_minutes(mut self, input: ::std::option::Option<i32>) -> Self {
        self.recovery_time_objective_minutes = input;
        self
    }
    /// <p>Optionally, you can specify an recovery time objective for a Region switch plan, in minutes.</p>
    pub fn get_recovery_time_objective_minutes(&self) -> &::std::option::Option<i32> {
        &self.recovery_time_objective_minutes
    }
    /// Adds a key-value pair to `associated_alarms`.
    ///
    /// To override the contents of this collection use [`set_associated_alarms`](Self::set_associated_alarms).
    ///
    /// <p>The alarms associated with a Region switch plan.</p>
    pub fn associated_alarms(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::AssociatedAlarm) -> Self {
        let mut hash_map = self.associated_alarms.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.associated_alarms = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The alarms associated with a Region switch plan.</p>
    pub fn set_associated_alarms(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::AssociatedAlarm>>,
    ) -> Self {
        self.associated_alarms = input;
        self
    }
    /// <p>The alarms associated with a Region switch plan.</p>
    pub fn get_associated_alarms(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::AssociatedAlarm>> {
        &self.associated_alarms
    }
    /// Appends an item to `triggers`.
    ///
    /// To override the contents of this collection use [`set_triggers`](Self::set_triggers).
    ///
    /// <p>The triggers associated with a Region switch plan.</p>
    pub fn triggers(mut self, input: crate::types::Trigger) -> Self {
        let mut v = self.triggers.unwrap_or_default();
        v.push(input);
        self.triggers = ::std::option::Option::Some(v);
        self
    }
    /// <p>The triggers associated with a Region switch plan.</p>
    pub fn set_triggers(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Trigger>>) -> Self {
        self.triggers = input;
        self
    }
    /// <p>The triggers associated with a Region switch plan.</p>
    pub fn get_triggers(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Trigger>> {
        &self.triggers
    }
    /// <p>The name of a Region switch plan.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of a Region switch plan.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of a Region switch plan.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// Appends an item to `regions`.
    ///
    /// To override the contents of this collection use [`set_regions`](Self::set_regions).
    ///
    /// <p>An array that specifies the Amazon Web Services Regions for a Region switch plan. Specify two Regions.</p>
    pub fn regions(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.regions.unwrap_or_default();
        v.push(input.into());
        self.regions = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array that specifies the Amazon Web Services Regions for a Region switch plan. Specify two Regions.</p>
    pub fn set_regions(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.regions = input;
        self
    }
    /// <p>An array that specifies the Amazon Web Services Regions for a Region switch plan. Specify two Regions.</p>
    pub fn get_regions(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.regions
    }
    /// <p>The recovery approach for a Region switch plan, which can be active/active (activeActive) or active/passive (activePassive).</p>
    /// This field is required.
    pub fn recovery_approach(mut self, input: crate::types::RecoveryApproach) -> Self {
        self.recovery_approach = ::std::option::Option::Some(input);
        self
    }
    /// <p>The recovery approach for a Region switch plan, which can be active/active (activeActive) or active/passive (activePassive).</p>
    pub fn set_recovery_approach(mut self, input: ::std::option::Option<crate::types::RecoveryApproach>) -> Self {
        self.recovery_approach = input;
        self
    }
    /// <p>The recovery approach for a Region switch plan, which can be active/active (activeActive) or active/passive (activePassive).</p>
    pub fn get_recovery_approach(&self) -> &::std::option::Option<crate::types::RecoveryApproach> {
        &self.recovery_approach
    }
    /// <p>The primary Amazon Web Services Region for the application. This is the Region where the application normally runs before any Region switch occurs.</p>
    pub fn primary_region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.primary_region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The primary Amazon Web Services Region for the application. This is the Region where the application normally runs before any Region switch occurs.</p>
    pub fn set_primary_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.primary_region = input;
        self
    }
    /// <p>The primary Amazon Web Services Region for the application. This is the Region where the application normally runs before any Region switch occurs.</p>
    pub fn get_primary_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.primary_region
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags to apply to the Region switch plan.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The tags to apply to the Region switch plan.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags to apply to the Region switch plan.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreatePlanInput`](crate::operation::create_plan::CreatePlanInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::create_plan::CreatePlanInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_plan::CreatePlanInput {
            description: self.description,
            workflows: self.workflows,
            execution_role: self.execution_role,
            recovery_time_objective_minutes: self.recovery_time_objective_minutes,
            associated_alarms: self.associated_alarms,
            triggers: self.triggers,
            name: self.name,
            regions: self.regions,
            recovery_approach: self.recovery_approach,
            primary_region: self.primary_region,
            tags: self.tags,
        })
    }
}
