// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_plan::_create_plan_output::CreatePlanOutputBuilder;

pub use crate::operation::create_plan::_create_plan_input::CreatePlanInputBuilder;

impl crate::operation::create_plan::builders::CreatePlanInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_plan::CreatePlanOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_plan::CreatePlanError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_plan();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreatePlan`.
///
/// <p>Creates a new Region switch plan. A plan defines the steps required to shift traffic from one Amazon Web Services Region to another.</p>
/// <p>You must specify a name for the plan, the primary Region, and at least one additional Region. You can also provide a description, execution role, recovery time objective, associated alarms, triggers, and workflows that define the steps to execute during a Region switch.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreatePlanFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_plan::builders::CreatePlanInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_plan::CreatePlanOutput,
        crate::operation::create_plan::CreatePlanError,
    > for CreatePlanFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_plan::CreatePlanOutput,
            crate::operation::create_plan::CreatePlanError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreatePlanFluentBuilder {
    /// Creates a new `CreatePlanFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreatePlan as a reference.
    pub fn as_input(&self) -> &crate::operation::create_plan::builders::CreatePlanInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_plan::CreatePlanOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_plan::CreatePlanError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_plan::CreatePlan::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_plan::CreatePlan::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_plan::CreatePlanOutput,
        crate::operation::create_plan::CreatePlanError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The description of a Region switch plan.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>The description of a Region switch plan.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>The description of a Region switch plan.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_description()
    }
    ///
    /// Appends an item to `workflows`.
    ///
    /// To override the contents of this collection use [`set_workflows`](Self::set_workflows).
    ///
    /// <p>An array of workflows included in a Region switch plan.</p>
    pub fn workflows(mut self, input: crate::types::Workflow) -> Self {
        self.inner = self.inner.workflows(input);
        self
    }
    /// <p>An array of workflows included in a Region switch plan.</p>
    pub fn set_workflows(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Workflow>>) -> Self {
        self.inner = self.inner.set_workflows(input);
        self
    }
    /// <p>An array of workflows included in a Region switch plan.</p>
    pub fn get_workflows(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Workflow>> {
        self.inner.get_workflows()
    }
    /// <p>An execution role is a way to categorize a Region switch plan.</p>
    pub fn execution_role(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.execution_role(input.into());
        self
    }
    /// <p>An execution role is a way to categorize a Region switch plan.</p>
    pub fn set_execution_role(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_execution_role(input);
        self
    }
    /// <p>An execution role is a way to categorize a Region switch plan.</p>
    pub fn get_execution_role(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_execution_role()
    }
    /// <p>Optionally, you can specify an recovery time objective for a Region switch plan, in minutes.</p>
    pub fn recovery_time_objective_minutes(mut self, input: i32) -> Self {
        self.inner = self.inner.recovery_time_objective_minutes(input);
        self
    }
    /// <p>Optionally, you can specify an recovery time objective for a Region switch plan, in minutes.</p>
    pub fn set_recovery_time_objective_minutes(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_recovery_time_objective_minutes(input);
        self
    }
    /// <p>Optionally, you can specify an recovery time objective for a Region switch plan, in minutes.</p>
    pub fn get_recovery_time_objective_minutes(&self) -> &::std::option::Option<i32> {
        self.inner.get_recovery_time_objective_minutes()
    }
    ///
    /// Adds a key-value pair to `associatedAlarms`.
    ///
    /// To override the contents of this collection use [`set_associated_alarms`](Self::set_associated_alarms).
    ///
    /// <p>The alarms associated with a Region switch plan.</p>
    pub fn associated_alarms(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::AssociatedAlarm) -> Self {
        self.inner = self.inner.associated_alarms(k.into(), v);
        self
    }
    /// <p>The alarms associated with a Region switch plan.</p>
    pub fn set_associated_alarms(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::AssociatedAlarm>>,
    ) -> Self {
        self.inner = self.inner.set_associated_alarms(input);
        self
    }
    /// <p>The alarms associated with a Region switch plan.</p>
    pub fn get_associated_alarms(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::AssociatedAlarm>> {
        self.inner.get_associated_alarms()
    }
    ///
    /// Appends an item to `triggers`.
    ///
    /// To override the contents of this collection use [`set_triggers`](Self::set_triggers).
    ///
    /// <p>The triggers associated with a Region switch plan.</p>
    pub fn triggers(mut self, input: crate::types::Trigger) -> Self {
        self.inner = self.inner.triggers(input);
        self
    }
    /// <p>The triggers associated with a Region switch plan.</p>
    pub fn set_triggers(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Trigger>>) -> Self {
        self.inner = self.inner.set_triggers(input);
        self
    }
    /// <p>The triggers associated with a Region switch plan.</p>
    pub fn get_triggers(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Trigger>> {
        self.inner.get_triggers()
    }
    /// <p>The name of a Region switch plan.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>The name of a Region switch plan.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>The name of a Region switch plan.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_name()
    }
    ///
    /// Appends an item to `regions`.
    ///
    /// To override the contents of this collection use [`set_regions`](Self::set_regions).
    ///
    /// <p>An array that specifies the Amazon Web Services Regions for a Region switch plan. Specify two Regions.</p>
    pub fn regions(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.regions(input.into());
        self
    }
    /// <p>An array that specifies the Amazon Web Services Regions for a Region switch plan. Specify two Regions.</p>
    pub fn set_regions(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_regions(input);
        self
    }
    /// <p>An array that specifies the Amazon Web Services Regions for a Region switch plan. Specify two Regions.</p>
    pub fn get_regions(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_regions()
    }
    /// <p>The recovery approach for a Region switch plan, which can be active/active (activeActive) or active/passive (activePassive).</p>
    pub fn recovery_approach(mut self, input: crate::types::RecoveryApproach) -> Self {
        self.inner = self.inner.recovery_approach(input);
        self
    }
    /// <p>The recovery approach for a Region switch plan, which can be active/active (activeActive) or active/passive (activePassive).</p>
    pub fn set_recovery_approach(mut self, input: ::std::option::Option<crate::types::RecoveryApproach>) -> Self {
        self.inner = self.inner.set_recovery_approach(input);
        self
    }
    /// <p>The recovery approach for a Region switch plan, which can be active/active (activeActive) or active/passive (activePassive).</p>
    pub fn get_recovery_approach(&self) -> &::std::option::Option<crate::types::RecoveryApproach> {
        self.inner.get_recovery_approach()
    }
    /// <p>The primary Amazon Web Services Region for the application. This is the Region where the application normally runs before any Region switch occurs.</p>
    pub fn primary_region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.primary_region(input.into());
        self
    }
    /// <p>The primary Amazon Web Services Region for the application. This is the Region where the application normally runs before any Region switch occurs.</p>
    pub fn set_primary_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_primary_region(input);
        self
    }
    /// <p>The primary Amazon Web Services Region for the application. This is the Region where the application normally runs before any Region switch occurs.</p>
    pub fn get_primary_region(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_primary_region()
    }
    ///
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags to apply to the Region switch plan.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.tags(k.into(), v.into());
        self
    }
    /// <p>The tags to apply to the Region switch plan.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>The tags to apply to the Region switch plan.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.inner.get_tags()
    }
}
