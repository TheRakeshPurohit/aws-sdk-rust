// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetPlanEvaluationStatusOutput {
    /// <p>The Amazon Resource Name (ARN) of the plan.</p>
    pub plan_arn: ::std::string::String,
    /// <p>The time of the last time that Region switch ran an evaluation of the plan.</p>
    pub last_evaluation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The version of the last evaluation of the plan.</p>
    pub last_evaluated_version: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Web Services Region for the plan.</p>
    pub region: ::std::option::Option<::std::string::String>,
    /// <p>The evaluation state for the plan.</p>
    pub evaluation_state: ::std::option::Option<crate::types::EvaluationStatus>,
    /// <p>The current evaluation warnings for the plan.</p>
    pub warnings: ::std::option::Option<::std::vec::Vec<crate::types::ResourceWarning>>,
    /// <p>Specifies that you want to receive the next page of results. Valid only if you received a <code>nextToken</code> response in the previous request. If you did, it indicates that more output is available. Set this parameter to the value provided by the previous call's <code>nextToken</code> response to request the next page of results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetPlanEvaluationStatusOutput {
    /// <p>The Amazon Resource Name (ARN) of the plan.</p>
    pub fn plan_arn(&self) -> &str {
        use std::ops::Deref;
        self.plan_arn.deref()
    }
    /// <p>The time of the last time that Region switch ran an evaluation of the plan.</p>
    pub fn last_evaluation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_evaluation_time.as_ref()
    }
    /// <p>The version of the last evaluation of the plan.</p>
    pub fn last_evaluated_version(&self) -> ::std::option::Option<&str> {
        self.last_evaluated_version.as_deref()
    }
    /// <p>The Amazon Web Services Region for the plan.</p>
    pub fn region(&self) -> ::std::option::Option<&str> {
        self.region.as_deref()
    }
    /// <p>The evaluation state for the plan.</p>
    pub fn evaluation_state(&self) -> ::std::option::Option<&crate::types::EvaluationStatus> {
        self.evaluation_state.as_ref()
    }
    /// <p>The current evaluation warnings for the plan.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.warnings.is_none()`.
    pub fn warnings(&self) -> &[crate::types::ResourceWarning] {
        self.warnings.as_deref().unwrap_or_default()
    }
    /// <p>Specifies that you want to receive the next page of results. Valid only if you received a <code>nextToken</code> response in the previous request. If you did, it indicates that more output is available. Set this parameter to the value provided by the previous call's <code>nextToken</code> response to request the next page of results.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ::aws_types::request_id::RequestId for GetPlanEvaluationStatusOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetPlanEvaluationStatusOutput {
    /// Creates a new builder-style object to manufacture [`GetPlanEvaluationStatusOutput`](crate::operation::get_plan_evaluation_status::GetPlanEvaluationStatusOutput).
    pub fn builder() -> crate::operation::get_plan_evaluation_status::builders::GetPlanEvaluationStatusOutputBuilder {
        crate::operation::get_plan_evaluation_status::builders::GetPlanEvaluationStatusOutputBuilder::default()
    }
}

/// A builder for [`GetPlanEvaluationStatusOutput`](crate::operation::get_plan_evaluation_status::GetPlanEvaluationStatusOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetPlanEvaluationStatusOutputBuilder {
    pub(crate) plan_arn: ::std::option::Option<::std::string::String>,
    pub(crate) last_evaluation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_evaluated_version: ::std::option::Option<::std::string::String>,
    pub(crate) region: ::std::option::Option<::std::string::String>,
    pub(crate) evaluation_state: ::std::option::Option<crate::types::EvaluationStatus>,
    pub(crate) warnings: ::std::option::Option<::std::vec::Vec<crate::types::ResourceWarning>>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetPlanEvaluationStatusOutputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the plan.</p>
    /// This field is required.
    pub fn plan_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.plan_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the plan.</p>
    pub fn set_plan_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.plan_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the plan.</p>
    pub fn get_plan_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.plan_arn
    }
    /// <p>The time of the last time that Region switch ran an evaluation of the plan.</p>
    pub fn last_evaluation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_evaluation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time of the last time that Region switch ran an evaluation of the plan.</p>
    pub fn set_last_evaluation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_evaluation_time = input;
        self
    }
    /// <p>The time of the last time that Region switch ran an evaluation of the plan.</p>
    pub fn get_last_evaluation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_evaluation_time
    }
    /// <p>The version of the last evaluation of the plan.</p>
    pub fn last_evaluated_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.last_evaluated_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version of the last evaluation of the plan.</p>
    pub fn set_last_evaluated_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.last_evaluated_version = input;
        self
    }
    /// <p>The version of the last evaluation of the plan.</p>
    pub fn get_last_evaluated_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.last_evaluated_version
    }
    /// <p>The Amazon Web Services Region for the plan.</p>
    pub fn region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services Region for the plan.</p>
    pub fn set_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.region = input;
        self
    }
    /// <p>The Amazon Web Services Region for the plan.</p>
    pub fn get_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.region
    }
    /// <p>The evaluation state for the plan.</p>
    pub fn evaluation_state(mut self, input: crate::types::EvaluationStatus) -> Self {
        self.evaluation_state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The evaluation state for the plan.</p>
    pub fn set_evaluation_state(mut self, input: ::std::option::Option<crate::types::EvaluationStatus>) -> Self {
        self.evaluation_state = input;
        self
    }
    /// <p>The evaluation state for the plan.</p>
    pub fn get_evaluation_state(&self) -> &::std::option::Option<crate::types::EvaluationStatus> {
        &self.evaluation_state
    }
    /// Appends an item to `warnings`.
    ///
    /// To override the contents of this collection use [`set_warnings`](Self::set_warnings).
    ///
    /// <p>The current evaluation warnings for the plan.</p>
    pub fn warnings(mut self, input: crate::types::ResourceWarning) -> Self {
        let mut v = self.warnings.unwrap_or_default();
        v.push(input);
        self.warnings = ::std::option::Option::Some(v);
        self
    }
    /// <p>The current evaluation warnings for the plan.</p>
    pub fn set_warnings(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ResourceWarning>>) -> Self {
        self.warnings = input;
        self
    }
    /// <p>The current evaluation warnings for the plan.</p>
    pub fn get_warnings(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ResourceWarning>> {
        &self.warnings
    }
    /// <p>Specifies that you want to receive the next page of results. Valid only if you received a <code>nextToken</code> response in the previous request. If you did, it indicates that more output is available. Set this parameter to the value provided by the previous call's <code>nextToken</code> response to request the next page of results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies that you want to receive the next page of results. Valid only if you received a <code>nextToken</code> response in the previous request. If you did, it indicates that more output is available. Set this parameter to the value provided by the previous call's <code>nextToken</code> response to request the next page of results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>Specifies that you want to receive the next page of results. Valid only if you received a <code>nextToken</code> response in the previous request. If you did, it indicates that more output is available. Set this parameter to the value provided by the previous call's <code>nextToken</code> response to request the next page of results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetPlanEvaluationStatusOutput`](crate::operation::get_plan_evaluation_status::GetPlanEvaluationStatusOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`plan_arn`](crate::operation::get_plan_evaluation_status::builders::GetPlanEvaluationStatusOutputBuilder::plan_arn)
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_plan_evaluation_status::GetPlanEvaluationStatusOutput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::get_plan_evaluation_status::GetPlanEvaluationStatusOutput {
            plan_arn: self.plan_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "plan_arn",
                    "plan_arn was not specified but it is required when building GetPlanEvaluationStatusOutput",
                )
            })?,
            last_evaluation_time: self.last_evaluation_time,
            last_evaluated_version: self.last_evaluated_version,
            region: self.region,
            evaluation_state: self.evaluation_state,
            warnings: self.warnings,
            next_token: self.next_token,
            _request_id: self._request_id,
        })
    }
}
