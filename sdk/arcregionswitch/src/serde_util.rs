// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn access_denied_exception_correct_errors(
    mut builder: crate::types::error::builders::AccessDeniedExceptionBuilder,
) -> crate::types::error::builders::AccessDeniedExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_not_found_exception_correct_errors(
    mut builder: crate::types::error::builders::ResourceNotFoundExceptionBuilder,
) -> crate::types::error::builders::ResourceNotFoundExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn illegal_state_exception_correct_errors(
    mut builder: crate::types::error::builders::IllegalStateExceptionBuilder,
) -> crate::types::error::builders::IllegalStateExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn get_plan_evaluation_status_output_output_correct_errors(
    mut builder: crate::operation::get_plan_evaluation_status::builders::GetPlanEvaluationStatusOutputBuilder,
) -> crate::operation::get_plan_evaluation_status::builders::GetPlanEvaluationStatusOutputBuilder {
    if builder.plan_arn.is_none() {
        builder.plan_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn get_plan_execution_output_output_correct_errors(
    mut builder: crate::operation::get_plan_execution::builders::GetPlanExecutionOutputBuilder,
) -> crate::operation::get_plan_execution::builders::GetPlanExecutionOutputBuilder {
    if builder.plan_arn.is_none() {
        builder.plan_arn = Some(Default::default())
    }
    if builder.execution_id.is_none() {
        builder.execution_id = Some(Default::default())
    }
    if builder.start_time.is_none() {
        builder.start_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.mode.is_none() {
        builder.mode = "no value was set".parse::<crate::types::ExecutionMode>().ok()
    }
    if builder.execution_state.is_none() {
        builder.execution_state = "no value was set".parse::<crate::types::ExecutionState>().ok()
    }
    if builder.execution_action.is_none() {
        builder.execution_action = "no value was set".parse::<crate::types::ExecutionAction>().ok()
    }
    if builder.execution_region.is_none() {
        builder.execution_region = Some(Default::default())
    }
    builder
}

pub(crate) fn internal_server_exception_correct_errors(
    mut builder: crate::types::error::builders::InternalServerExceptionBuilder,
) -> crate::types::error::builders::InternalServerExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn illegal_argument_exception_correct_errors(
    mut builder: crate::types::error::builders::IllegalArgumentExceptionBuilder,
) -> crate::types::error::builders::IllegalArgumentExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn plan_correct_errors(mut builder: crate::types::builders::PlanBuilder) -> crate::types::builders::PlanBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.workflows.is_none() {
        builder.workflows = Some(Default::default())
    }
    if builder.execution_role.is_none() {
        builder.execution_role = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.regions.is_none() {
        builder.regions = Some(Default::default())
    }
    if builder.recovery_approach.is_none() {
        builder.recovery_approach = "no value was set".parse::<crate::types::RecoveryApproach>().ok()
    }
    if builder.owner.is_none() {
        builder.owner = Some(Default::default())
    }
    builder
}

pub(crate) fn abbreviated_execution_correct_errors(
    mut builder: crate::types::builders::AbbreviatedExecutionBuilder,
) -> crate::types::builders::AbbreviatedExecutionBuilder {
    if builder.plan_arn.is_none() {
        builder.plan_arn = Some(Default::default())
    }
    if builder.execution_id.is_none() {
        builder.execution_id = Some(Default::default())
    }
    if builder.start_time.is_none() {
        builder.start_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.mode.is_none() {
        builder.mode = "no value was set".parse::<crate::types::ExecutionMode>().ok()
    }
    if builder.execution_state.is_none() {
        builder.execution_state = "no value was set".parse::<crate::types::ExecutionState>().ok()
    }
    if builder.execution_action.is_none() {
        builder.execution_action = "no value was set".parse::<crate::types::ExecutionAction>().ok()
    }
    if builder.execution_region.is_none() {
        builder.execution_region = Some(Default::default())
    }
    builder
}

pub(crate) fn abbreviated_plan_correct_errors(
    mut builder: crate::types::builders::AbbreviatedPlanBuilder,
) -> crate::types::builders::AbbreviatedPlanBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.owner.is_none() {
        builder.owner = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.regions.is_none() {
        builder.regions = Some(Default::default())
    }
    if builder.recovery_approach.is_none() {
        builder.recovery_approach = "no value was set".parse::<crate::types::RecoveryApproach>().ok()
    }
    builder
}

pub(crate) fn execution_event_correct_errors(
    mut builder: crate::types::builders::ExecutionEventBuilder,
) -> crate::types::builders::ExecutionEventBuilder {
    if builder.event_id.is_none() {
        builder.event_id = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_warning_correct_errors(
    mut builder: crate::types::builders::ResourceWarningBuilder,
) -> crate::types::builders::ResourceWarningBuilder {
    if builder.version.is_none() {
        builder.version = Some(Default::default())
    }
    if builder.warning_status.is_none() {
        builder.warning_status = "no value was set".parse::<crate::types::ResourceWarningStatus>().ok()
    }
    if builder.warning_updated_time.is_none() {
        builder.warning_updated_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.warning_message.is_none() {
        builder.warning_message = Some(Default::default())
    }
    builder
}

pub(crate) fn route53_health_check_correct_errors(
    mut builder: crate::types::builders::Route53HealthCheckBuilder,
) -> crate::types::builders::Route53HealthCheckBuilder {
    if builder.hosted_zone_id.is_none() {
        builder.hosted_zone_id = Some(Default::default())
    }
    if builder.record_name.is_none() {
        builder.record_name = Some(Default::default())
    }
    if builder.region.is_none() {
        builder.region = Some(Default::default())
    }
    builder
}

pub(crate) fn associated_alarm_correct_errors(
    mut builder: crate::types::builders::AssociatedAlarmBuilder,
) -> crate::types::builders::AssociatedAlarmBuilder {
    if builder.resource_identifier.is_none() {
        builder.resource_identifier = Some(Default::default())
    }
    if builder.alarm_type.is_none() {
        builder.alarm_type = "no value was set".parse::<crate::types::AlarmType>().ok()
    }
    builder
}

pub(crate) fn trigger_correct_errors(mut builder: crate::types::builders::TriggerBuilder) -> crate::types::builders::TriggerBuilder {
    if builder.target_region.is_none() {
        builder.target_region = Some(Default::default())
    }
    if builder.action.is_none() {
        builder.action = "no value was set".parse::<crate::types::WorkflowTargetAction>().ok()
    }
    if builder.conditions.is_none() {
        builder.conditions = Some(Default::default())
    }
    if builder.min_delay_minutes_between_executions.is_none() {
        builder.min_delay_minutes_between_executions = Some(Default::default())
    }
    builder
}

pub(crate) fn workflow_correct_errors(mut builder: crate::types::builders::WorkflowBuilder) -> crate::types::builders::WorkflowBuilder {
    if builder.workflow_target_action.is_none() {
        builder.workflow_target_action = "no value was set".parse::<crate::types::WorkflowTargetAction>().ok()
    }
    builder
}

pub(crate) fn step_correct_errors(mut builder: crate::types::builders::StepBuilder) -> crate::types::builders::StepBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.execution_block_configuration.is_none() {
        builder.execution_block_configuration = Some(crate::types::ExecutionBlockConfiguration::Unknown)
    }
    if builder.execution_block_type.is_none() {
        builder.execution_block_type = "no value was set".parse::<crate::types::ExecutionBlockType>().ok()
    }
    builder
}

pub(crate) fn trigger_condition_correct_errors(
    mut builder: crate::types::builders::TriggerConditionBuilder,
) -> crate::types::builders::TriggerConditionBuilder {
    if builder.associated_alarm_name.is_none() {
        builder.associated_alarm_name = Some(Default::default())
    }
    if builder.condition.is_none() {
        builder.condition = "no value was set".parse::<crate::types::AlarmCondition>().ok()
    }
    builder
}

pub(crate) fn arc_routing_control_configuration_correct_errors(
    mut builder: crate::types::builders::ArcRoutingControlConfigurationBuilder,
) -> crate::types::builders::ArcRoutingControlConfigurationBuilder {
    if builder.region_and_routing_controls.is_none() {
        builder.region_and_routing_controls = Some(Default::default())
    }
    builder
}

pub(crate) fn custom_action_lambda_configuration_correct_errors(
    mut builder: crate::types::builders::CustomActionLambdaConfigurationBuilder,
) -> crate::types::builders::CustomActionLambdaConfigurationBuilder {
    if builder.lambdas.is_none() {
        builder.lambdas = Some(Default::default())
    }
    if builder.retry_interval_minutes.is_none() {
        builder.retry_interval_minutes = Some(Default::default())
    }
    if builder.region_to_run.is_none() {
        builder.region_to_run = "no value was set".parse::<crate::types::RegionToRunIn>().ok()
    }
    builder
}

pub(crate) fn ec2_asg_capacity_increase_configuration_correct_errors(
    mut builder: crate::types::builders::Ec2AsgCapacityIncreaseConfigurationBuilder,
) -> crate::types::builders::Ec2AsgCapacityIncreaseConfigurationBuilder {
    if builder.asgs.is_none() {
        builder.asgs = Some(Default::default())
    }
    builder
}

pub(crate) fn ecs_capacity_increase_configuration_correct_errors(
    mut builder: crate::types::builders::EcsCapacityIncreaseConfigurationBuilder,
) -> crate::types::builders::EcsCapacityIncreaseConfigurationBuilder {
    if builder.services.is_none() {
        builder.services = Some(Default::default())
    }
    builder
}

pub(crate) fn eks_resource_scaling_configuration_correct_errors(
    mut builder: crate::types::builders::EksResourceScalingConfigurationBuilder,
) -> crate::types::builders::EksResourceScalingConfigurationBuilder {
    if builder.kubernetes_resource_type.is_none() {
        builder.kubernetes_resource_type = {
            let builder = crate::types::builders::KubernetesResourceTypeBuilder::default();
            crate::serde_util::kubernetes_resource_type_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn execution_approval_configuration_correct_errors(
    mut builder: crate::types::builders::ExecutionApprovalConfigurationBuilder,
) -> crate::types::builders::ExecutionApprovalConfigurationBuilder {
    if builder.approval_role.is_none() {
        builder.approval_role = Some(Default::default())
    }
    builder
}

pub(crate) fn global_aurora_configuration_correct_errors(
    mut builder: crate::types::builders::GlobalAuroraConfigurationBuilder,
) -> crate::types::builders::GlobalAuroraConfigurationBuilder {
    if builder.behavior.is_none() {
        builder.behavior = "no value was set".parse::<crate::types::GlobalAuroraDefaultBehavior>().ok()
    }
    if builder.global_cluster_identifier.is_none() {
        builder.global_cluster_identifier = Some(Default::default())
    }
    if builder.database_cluster_arns.is_none() {
        builder.database_cluster_arns = Some(Default::default())
    }
    builder
}

pub(crate) fn parallel_execution_block_configuration_correct_errors(
    mut builder: crate::types::builders::ParallelExecutionBlockConfigurationBuilder,
) -> crate::types::builders::ParallelExecutionBlockConfigurationBuilder {
    if builder.steps.is_none() {
        builder.steps = Some(Default::default())
    }
    builder
}

pub(crate) fn region_switch_plan_configuration_correct_errors(
    mut builder: crate::types::builders::RegionSwitchPlanConfigurationBuilder,
) -> crate::types::builders::RegionSwitchPlanConfigurationBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn route53_health_check_configuration_correct_errors(
    mut builder: crate::types::builders::Route53HealthCheckConfigurationBuilder,
) -> crate::types::builders::Route53HealthCheckConfigurationBuilder {
    if builder.hosted_zone_id.is_none() {
        builder.hosted_zone_id = Some(Default::default())
    }
    if builder.record_name.is_none() {
        builder.record_name = Some(Default::default())
    }
    builder
}

pub(crate) fn ec2_ungraceful_correct_errors(
    mut builder: crate::types::builders::Ec2UngracefulBuilder,
) -> crate::types::builders::Ec2UngracefulBuilder {
    if builder.minimum_success_percentage.is_none() {
        builder.minimum_success_percentage = Some(Default::default())
    }
    builder
}

pub(crate) fn ecs_ungraceful_correct_errors(
    mut builder: crate::types::builders::EcsUngracefulBuilder,
) -> crate::types::builders::EcsUngracefulBuilder {
    if builder.minimum_success_percentage.is_none() {
        builder.minimum_success_percentage = Some(Default::default())
    }
    builder
}

pub(crate) fn eks_resource_scaling_ungraceful_correct_errors(
    mut builder: crate::types::builders::EksResourceScalingUngracefulBuilder,
) -> crate::types::builders::EksResourceScalingUngracefulBuilder {
    if builder.minimum_success_percentage.is_none() {
        builder.minimum_success_percentage = Some(Default::default())
    }
    builder
}

pub(crate) fn kubernetes_resource_type_correct_errors(
    mut builder: crate::types::builders::KubernetesResourceTypeBuilder,
) -> crate::types::builders::KubernetesResourceTypeBuilder {
    if builder.api_version.is_none() {
        builder.api_version = Some(Default::default())
    }
    if builder.kind.is_none() {
        builder.kind = Some(Default::default())
    }
    builder
}

pub(crate) fn eks_cluster_correct_errors(mut builder: crate::types::builders::EksClusterBuilder) -> crate::types::builders::EksClusterBuilder {
    if builder.cluster_arn.is_none() {
        builder.cluster_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn arc_routing_control_state_correct_errors(
    mut builder: crate::types::builders::ArcRoutingControlStateBuilder,
) -> crate::types::builders::ArcRoutingControlStateBuilder {
    if builder.routing_control_arn.is_none() {
        builder.routing_control_arn = Some(Default::default())
    }
    if builder.state.is_none() {
        builder.state = "no value was set".parse::<crate::types::RoutingControlStateChange>().ok()
    }
    builder
}

pub(crate) fn kubernetes_scaling_resource_correct_errors(
    mut builder: crate::types::builders::KubernetesScalingResourceBuilder,
) -> crate::types::builders::KubernetesScalingResourceBuilder {
    if builder.namespace.is_none() {
        builder.namespace = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}
