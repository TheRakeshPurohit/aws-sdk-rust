// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents an event that occurred during a plan execution. These events provide a detailed timeline of the execution process.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ExecutionEvent {
    /// <p>The timestamp for an execution event.</p>
    pub timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The type of an execution event.</p>
    pub r#type: ::std::option::Option<crate::types::ExecutionEventType>,
    /// <p>The step name for an execution event.</p>
    pub step_name: ::std::option::Option<::std::string::String>,
    /// <p>The execution block type for an execution event.</p>
    pub execution_block_type: ::std::option::Option<crate::types::ExecutionBlockType>,
    /// <p>The resources for an execution event.</p>
    pub resources: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Errors for an execution event.</p>
    pub error: ::std::option::Option<::std::string::String>,
    /// <p>The description for an execution event.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The event ID for an execution event.</p>
    pub event_id: ::std::string::String,
    /// <p>The event ID of the previous execution event.</p>
    pub previous_event_id: ::std::option::Option<::std::string::String>,
}
impl ExecutionEvent {
    /// <p>The timestamp for an execution event.</p>
    pub fn timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.timestamp.as_ref()
    }
    /// <p>The type of an execution event.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::ExecutionEventType> {
        self.r#type.as_ref()
    }
    /// <p>The step name for an execution event.</p>
    pub fn step_name(&self) -> ::std::option::Option<&str> {
        self.step_name.as_deref()
    }
    /// <p>The execution block type for an execution event.</p>
    pub fn execution_block_type(&self) -> ::std::option::Option<&crate::types::ExecutionBlockType> {
        self.execution_block_type.as_ref()
    }
    /// <p>The resources for an execution event.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.resources.is_none()`.
    pub fn resources(&self) -> &[::std::string::String] {
        self.resources.as_deref().unwrap_or_default()
    }
    /// <p>Errors for an execution event.</p>
    pub fn error(&self) -> ::std::option::Option<&str> {
        self.error.as_deref()
    }
    /// <p>The description for an execution event.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The event ID for an execution event.</p>
    pub fn event_id(&self) -> &str {
        use std::ops::Deref;
        self.event_id.deref()
    }
    /// <p>The event ID of the previous execution event.</p>
    pub fn previous_event_id(&self) -> ::std::option::Option<&str> {
        self.previous_event_id.as_deref()
    }
}
impl ExecutionEvent {
    /// Creates a new builder-style object to manufacture [`ExecutionEvent`](crate::types::ExecutionEvent).
    pub fn builder() -> crate::types::builders::ExecutionEventBuilder {
        crate::types::builders::ExecutionEventBuilder::default()
    }
}

/// A builder for [`ExecutionEvent`](crate::types::ExecutionEvent).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ExecutionEventBuilder {
    pub(crate) timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) r#type: ::std::option::Option<crate::types::ExecutionEventType>,
    pub(crate) step_name: ::std::option::Option<::std::string::String>,
    pub(crate) execution_block_type: ::std::option::Option<crate::types::ExecutionBlockType>,
    pub(crate) resources: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) error: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) event_id: ::std::option::Option<::std::string::String>,
    pub(crate) previous_event_id: ::std::option::Option<::std::string::String>,
}
impl ExecutionEventBuilder {
    /// <p>The timestamp for an execution event.</p>
    pub fn timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp for an execution event.</p>
    pub fn set_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.timestamp = input;
        self
    }
    /// <p>The timestamp for an execution event.</p>
    pub fn get_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.timestamp
    }
    /// <p>The type of an execution event.</p>
    pub fn r#type(mut self, input: crate::types::ExecutionEventType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of an execution event.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::ExecutionEventType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of an execution event.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::ExecutionEventType> {
        &self.r#type
    }
    /// <p>The step name for an execution event.</p>
    pub fn step_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.step_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The step name for an execution event.</p>
    pub fn set_step_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.step_name = input;
        self
    }
    /// <p>The step name for an execution event.</p>
    pub fn get_step_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.step_name
    }
    /// <p>The execution block type for an execution event.</p>
    pub fn execution_block_type(mut self, input: crate::types::ExecutionBlockType) -> Self {
        self.execution_block_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The execution block type for an execution event.</p>
    pub fn set_execution_block_type(mut self, input: ::std::option::Option<crate::types::ExecutionBlockType>) -> Self {
        self.execution_block_type = input;
        self
    }
    /// <p>The execution block type for an execution event.</p>
    pub fn get_execution_block_type(&self) -> &::std::option::Option<crate::types::ExecutionBlockType> {
        &self.execution_block_type
    }
    /// Appends an item to `resources`.
    ///
    /// To override the contents of this collection use [`set_resources`](Self::set_resources).
    ///
    /// <p>The resources for an execution event.</p>
    pub fn resources(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.resources.unwrap_or_default();
        v.push(input.into());
        self.resources = ::std::option::Option::Some(v);
        self
    }
    /// <p>The resources for an execution event.</p>
    pub fn set_resources(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.resources = input;
        self
    }
    /// <p>The resources for an execution event.</p>
    pub fn get_resources(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.resources
    }
    /// <p>Errors for an execution event.</p>
    pub fn error(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.error = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Errors for an execution event.</p>
    pub fn set_error(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.error = input;
        self
    }
    /// <p>Errors for an execution event.</p>
    pub fn get_error(&self) -> &::std::option::Option<::std::string::String> {
        &self.error
    }
    /// <p>The description for an execution event.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description for an execution event.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description for an execution event.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The event ID for an execution event.</p>
    /// This field is required.
    pub fn event_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.event_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The event ID for an execution event.</p>
    pub fn set_event_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.event_id = input;
        self
    }
    /// <p>The event ID for an execution event.</p>
    pub fn get_event_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.event_id
    }
    /// <p>The event ID of the previous execution event.</p>
    pub fn previous_event_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.previous_event_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The event ID of the previous execution event.</p>
    pub fn set_previous_event_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.previous_event_id = input;
        self
    }
    /// <p>The event ID of the previous execution event.</p>
    pub fn get_previous_event_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.previous_event_id
    }
    /// Consumes the builder and constructs a [`ExecutionEvent`](crate::types::ExecutionEvent).
    /// This method will fail if any of the following fields are not set:
    /// - [`event_id`](crate::types::builders::ExecutionEventBuilder::event_id)
    pub fn build(self) -> ::std::result::Result<crate::types::ExecutionEvent, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ExecutionEvent {
            timestamp: self.timestamp,
            r#type: self.r#type,
            step_name: self.step_name,
            execution_block_type: self.execution_block_type,
            resources: self.resources,
            error: self.error,
            description: self.description,
            event_id: self.event_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "event_id",
                    "event_id was not specified but it is required when building ExecutionEvent",
                )
            })?,
            previous_event_id: self.previous_event_id,
        })
    }
}
