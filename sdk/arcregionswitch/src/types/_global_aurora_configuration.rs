// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration for Amazon Aurora global databases used in a Region switch plan.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GlobalAuroraConfiguration {
    /// <p>The timeout value specified for the configuration.</p>
    pub timeout_minutes: i32,
    /// <p>The cross account role for the configuration.</p>
    pub cross_account_role: ::std::option::Option<::std::string::String>,
    /// <p>The external ID (secret key) for the configuration.</p>
    pub external_id: ::std::option::Option<::std::string::String>,
    /// <p>The behavior for a global database, that is, only allow switchover or also allow failover.</p>
    pub behavior: crate::types::GlobalAuroraDefaultBehavior,
    /// <p>The settings for ungraceful execution.</p>
    pub ungraceful: ::std::option::Option<crate::types::GlobalAuroraUngraceful>,
    /// <p>The global cluster identifier for a global database.</p>
    pub global_cluster_identifier: ::std::string::String,
    /// <p>The database cluster Amazon Resource Names (ARNs) for a global database.</p>
    pub database_cluster_arns: ::std::vec::Vec<::std::string::String>,
}
impl GlobalAuroraConfiguration {
    /// <p>The timeout value specified for the configuration.</p>
    pub fn timeout_minutes(&self) -> i32 {
        self.timeout_minutes
    }
    /// <p>The cross account role for the configuration.</p>
    pub fn cross_account_role(&self) -> ::std::option::Option<&str> {
        self.cross_account_role.as_deref()
    }
    /// <p>The external ID (secret key) for the configuration.</p>
    pub fn external_id(&self) -> ::std::option::Option<&str> {
        self.external_id.as_deref()
    }
    /// <p>The behavior for a global database, that is, only allow switchover or also allow failover.</p>
    pub fn behavior(&self) -> &crate::types::GlobalAuroraDefaultBehavior {
        &self.behavior
    }
    /// <p>The settings for ungraceful execution.</p>
    pub fn ungraceful(&self) -> ::std::option::Option<&crate::types::GlobalAuroraUngraceful> {
        self.ungraceful.as_ref()
    }
    /// <p>The global cluster identifier for a global database.</p>
    pub fn global_cluster_identifier(&self) -> &str {
        use std::ops::Deref;
        self.global_cluster_identifier.deref()
    }
    /// <p>The database cluster Amazon Resource Names (ARNs) for a global database.</p>
    pub fn database_cluster_arns(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.database_cluster_arns.deref()
    }
}
impl GlobalAuroraConfiguration {
    /// Creates a new builder-style object to manufacture [`GlobalAuroraConfiguration`](crate::types::GlobalAuroraConfiguration).
    pub fn builder() -> crate::types::builders::GlobalAuroraConfigurationBuilder {
        crate::types::builders::GlobalAuroraConfigurationBuilder::default()
    }
}

/// A builder for [`GlobalAuroraConfiguration`](crate::types::GlobalAuroraConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GlobalAuroraConfigurationBuilder {
    pub(crate) timeout_minutes: ::std::option::Option<i32>,
    pub(crate) cross_account_role: ::std::option::Option<::std::string::String>,
    pub(crate) external_id: ::std::option::Option<::std::string::String>,
    pub(crate) behavior: ::std::option::Option<crate::types::GlobalAuroraDefaultBehavior>,
    pub(crate) ungraceful: ::std::option::Option<crate::types::GlobalAuroraUngraceful>,
    pub(crate) global_cluster_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) database_cluster_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl GlobalAuroraConfigurationBuilder {
    /// <p>The timeout value specified for the configuration.</p>
    pub fn timeout_minutes(mut self, input: i32) -> Self {
        self.timeout_minutes = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timeout value specified for the configuration.</p>
    pub fn set_timeout_minutes(mut self, input: ::std::option::Option<i32>) -> Self {
        self.timeout_minutes = input;
        self
    }
    /// <p>The timeout value specified for the configuration.</p>
    pub fn get_timeout_minutes(&self) -> &::std::option::Option<i32> {
        &self.timeout_minutes
    }
    /// <p>The cross account role for the configuration.</p>
    pub fn cross_account_role(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cross_account_role = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The cross account role for the configuration.</p>
    pub fn set_cross_account_role(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cross_account_role = input;
        self
    }
    /// <p>The cross account role for the configuration.</p>
    pub fn get_cross_account_role(&self) -> &::std::option::Option<::std::string::String> {
        &self.cross_account_role
    }
    /// <p>The external ID (secret key) for the configuration.</p>
    pub fn external_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.external_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The external ID (secret key) for the configuration.</p>
    pub fn set_external_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.external_id = input;
        self
    }
    /// <p>The external ID (secret key) for the configuration.</p>
    pub fn get_external_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.external_id
    }
    /// <p>The behavior for a global database, that is, only allow switchover or also allow failover.</p>
    /// This field is required.
    pub fn behavior(mut self, input: crate::types::GlobalAuroraDefaultBehavior) -> Self {
        self.behavior = ::std::option::Option::Some(input);
        self
    }
    /// <p>The behavior for a global database, that is, only allow switchover or also allow failover.</p>
    pub fn set_behavior(mut self, input: ::std::option::Option<crate::types::GlobalAuroraDefaultBehavior>) -> Self {
        self.behavior = input;
        self
    }
    /// <p>The behavior for a global database, that is, only allow switchover or also allow failover.</p>
    pub fn get_behavior(&self) -> &::std::option::Option<crate::types::GlobalAuroraDefaultBehavior> {
        &self.behavior
    }
    /// <p>The settings for ungraceful execution.</p>
    pub fn ungraceful(mut self, input: crate::types::GlobalAuroraUngraceful) -> Self {
        self.ungraceful = ::std::option::Option::Some(input);
        self
    }
    /// <p>The settings for ungraceful execution.</p>
    pub fn set_ungraceful(mut self, input: ::std::option::Option<crate::types::GlobalAuroraUngraceful>) -> Self {
        self.ungraceful = input;
        self
    }
    /// <p>The settings for ungraceful execution.</p>
    pub fn get_ungraceful(&self) -> &::std::option::Option<crate::types::GlobalAuroraUngraceful> {
        &self.ungraceful
    }
    /// <p>The global cluster identifier for a global database.</p>
    /// This field is required.
    pub fn global_cluster_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.global_cluster_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The global cluster identifier for a global database.</p>
    pub fn set_global_cluster_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.global_cluster_identifier = input;
        self
    }
    /// <p>The global cluster identifier for a global database.</p>
    pub fn get_global_cluster_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.global_cluster_identifier
    }
    /// Appends an item to `database_cluster_arns`.
    ///
    /// To override the contents of this collection use [`set_database_cluster_arns`](Self::set_database_cluster_arns).
    ///
    /// <p>The database cluster Amazon Resource Names (ARNs) for a global database.</p>
    pub fn database_cluster_arns(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.database_cluster_arns.unwrap_or_default();
        v.push(input.into());
        self.database_cluster_arns = ::std::option::Option::Some(v);
        self
    }
    /// <p>The database cluster Amazon Resource Names (ARNs) for a global database.</p>
    pub fn set_database_cluster_arns(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.database_cluster_arns = input;
        self
    }
    /// <p>The database cluster Amazon Resource Names (ARNs) for a global database.</p>
    pub fn get_database_cluster_arns(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.database_cluster_arns
    }
    /// Consumes the builder and constructs a [`GlobalAuroraConfiguration`](crate::types::GlobalAuroraConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`global_cluster_identifier`](crate::types::builders::GlobalAuroraConfigurationBuilder::global_cluster_identifier)
    /// - [`database_cluster_arns`](crate::types::builders::GlobalAuroraConfigurationBuilder::database_cluster_arns)
    pub fn build(self) -> ::std::result::Result<crate::types::GlobalAuroraConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::GlobalAuroraConfiguration {
            timeout_minutes: self.timeout_minutes.unwrap_or(60),
            cross_account_role: self.cross_account_role,
            external_id: self.external_id,
            behavior: self.behavior.unwrap_or(
                "switchoverOnly"
                    .parse::<crate::types::GlobalAuroraDefaultBehavior>()
                    .expect("static value validated to member"),
            ),
            ungraceful: self.ungraceful,
            global_cluster_identifier: self.global_cluster_identifier.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "global_cluster_identifier",
                    "global_cluster_identifier was not specified but it is required when building GlobalAuroraConfiguration",
                )
            })?,
            database_cluster_arns: self.database_cluster_arns.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "database_cluster_arns",
                    "database_cluster_arns was not specified but it is required when building GlobalAuroraConfiguration",
                )
            })?,
        })
    }
}
