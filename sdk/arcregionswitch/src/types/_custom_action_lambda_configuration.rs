// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration for Amazon Web Services Lambda functions that perform custom actions during a Region switch.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CustomActionLambdaConfiguration {
    /// <p>The timeout value specified for the configuration.</p>
    pub timeout_minutes: i32,
    /// <p>The Amazon Web Services Lambda functions for the execution block.</p>
    pub lambdas: ::std::vec::Vec<crate::types::Lambdas>,
    /// <p>The retry interval specified.</p>
    pub retry_interval_minutes: f32,
    /// <p>The Amazon Web Services Region for the function to run in.</p>
    pub region_to_run: crate::types::RegionToRunIn,
    /// <p>The settings for ungraceful execution.</p>
    pub ungraceful: ::std::option::Option<crate::types::LambdaUngraceful>,
}
impl CustomActionLambdaConfiguration {
    /// <p>The timeout value specified for the configuration.</p>
    pub fn timeout_minutes(&self) -> i32 {
        self.timeout_minutes
    }
    /// <p>The Amazon Web Services Lambda functions for the execution block.</p>
    pub fn lambdas(&self) -> &[crate::types::Lambdas] {
        use std::ops::Deref;
        self.lambdas.deref()
    }
    /// <p>The retry interval specified.</p>
    pub fn retry_interval_minutes(&self) -> f32 {
        self.retry_interval_minutes
    }
    /// <p>The Amazon Web Services Region for the function to run in.</p>
    pub fn region_to_run(&self) -> &crate::types::RegionToRunIn {
        &self.region_to_run
    }
    /// <p>The settings for ungraceful execution.</p>
    pub fn ungraceful(&self) -> ::std::option::Option<&crate::types::LambdaUngraceful> {
        self.ungraceful.as_ref()
    }
}
impl CustomActionLambdaConfiguration {
    /// Creates a new builder-style object to manufacture [`CustomActionLambdaConfiguration`](crate::types::CustomActionLambdaConfiguration).
    pub fn builder() -> crate::types::builders::CustomActionLambdaConfigurationBuilder {
        crate::types::builders::CustomActionLambdaConfigurationBuilder::default()
    }
}

/// A builder for [`CustomActionLambdaConfiguration`](crate::types::CustomActionLambdaConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CustomActionLambdaConfigurationBuilder {
    pub(crate) timeout_minutes: ::std::option::Option<i32>,
    pub(crate) lambdas: ::std::option::Option<::std::vec::Vec<crate::types::Lambdas>>,
    pub(crate) retry_interval_minutes: ::std::option::Option<f32>,
    pub(crate) region_to_run: ::std::option::Option<crate::types::RegionToRunIn>,
    pub(crate) ungraceful: ::std::option::Option<crate::types::LambdaUngraceful>,
}
impl CustomActionLambdaConfigurationBuilder {
    /// <p>The timeout value specified for the configuration.</p>
    pub fn timeout_minutes(mut self, input: i32) -> Self {
        self.timeout_minutes = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timeout value specified for the configuration.</p>
    pub fn set_timeout_minutes(mut self, input: ::std::option::Option<i32>) -> Self {
        self.timeout_minutes = input;
        self
    }
    /// <p>The timeout value specified for the configuration.</p>
    pub fn get_timeout_minutes(&self) -> &::std::option::Option<i32> {
        &self.timeout_minutes
    }
    /// Appends an item to `lambdas`.
    ///
    /// To override the contents of this collection use [`set_lambdas`](Self::set_lambdas).
    ///
    /// <p>The Amazon Web Services Lambda functions for the execution block.</p>
    pub fn lambdas(mut self, input: crate::types::Lambdas) -> Self {
        let mut v = self.lambdas.unwrap_or_default();
        v.push(input);
        self.lambdas = ::std::option::Option::Some(v);
        self
    }
    /// <p>The Amazon Web Services Lambda functions for the execution block.</p>
    pub fn set_lambdas(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Lambdas>>) -> Self {
        self.lambdas = input;
        self
    }
    /// <p>The Amazon Web Services Lambda functions for the execution block.</p>
    pub fn get_lambdas(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Lambdas>> {
        &self.lambdas
    }
    /// <p>The retry interval specified.</p>
    /// This field is required.
    pub fn retry_interval_minutes(mut self, input: f32) -> Self {
        self.retry_interval_minutes = ::std::option::Option::Some(input);
        self
    }
    /// <p>The retry interval specified.</p>
    pub fn set_retry_interval_minutes(mut self, input: ::std::option::Option<f32>) -> Self {
        self.retry_interval_minutes = input;
        self
    }
    /// <p>The retry interval specified.</p>
    pub fn get_retry_interval_minutes(&self) -> &::std::option::Option<f32> {
        &self.retry_interval_minutes
    }
    /// <p>The Amazon Web Services Region for the function to run in.</p>
    /// This field is required.
    pub fn region_to_run(mut self, input: crate::types::RegionToRunIn) -> Self {
        self.region_to_run = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Amazon Web Services Region for the function to run in.</p>
    pub fn set_region_to_run(mut self, input: ::std::option::Option<crate::types::RegionToRunIn>) -> Self {
        self.region_to_run = input;
        self
    }
    /// <p>The Amazon Web Services Region for the function to run in.</p>
    pub fn get_region_to_run(&self) -> &::std::option::Option<crate::types::RegionToRunIn> {
        &self.region_to_run
    }
    /// <p>The settings for ungraceful execution.</p>
    pub fn ungraceful(mut self, input: crate::types::LambdaUngraceful) -> Self {
        self.ungraceful = ::std::option::Option::Some(input);
        self
    }
    /// <p>The settings for ungraceful execution.</p>
    pub fn set_ungraceful(mut self, input: ::std::option::Option<crate::types::LambdaUngraceful>) -> Self {
        self.ungraceful = input;
        self
    }
    /// <p>The settings for ungraceful execution.</p>
    pub fn get_ungraceful(&self) -> &::std::option::Option<crate::types::LambdaUngraceful> {
        &self.ungraceful
    }
    /// Consumes the builder and constructs a [`CustomActionLambdaConfiguration`](crate::types::CustomActionLambdaConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`lambdas`](crate::types::builders::CustomActionLambdaConfigurationBuilder::lambdas)
    /// - [`retry_interval_minutes`](crate::types::builders::CustomActionLambdaConfigurationBuilder::retry_interval_minutes)
    /// - [`region_to_run`](crate::types::builders::CustomActionLambdaConfigurationBuilder::region_to_run)
    pub fn build(self) -> ::std::result::Result<crate::types::CustomActionLambdaConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CustomActionLambdaConfiguration {
            timeout_minutes: self.timeout_minutes.unwrap_or(60),
            lambdas: self.lambdas.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "lambdas",
                    "lambdas was not specified but it is required when building CustomActionLambdaConfiguration",
                )
            })?,
            retry_interval_minutes: self.retry_interval_minutes.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "retry_interval_minutes",
                    "retry_interval_minutes was not specified but it is required when building CustomActionLambdaConfiguration",
                )
            })?,
            region_to_run: self.region_to_run.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "region_to_run",
                    "region_to_run was not specified but it is required when building CustomActionLambdaConfiguration",
                )
            })?,
            ungraceful: self.ungraceful,
        })
    }
}
