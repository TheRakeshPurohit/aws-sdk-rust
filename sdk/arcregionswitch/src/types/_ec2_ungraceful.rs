// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration for handling failures when performing operations on EC2 resources.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Ec2Ungraceful {
    /// <p>The minimum success percentage that you specify for EC2 Auto Scaling groups.</p>
    pub minimum_success_percentage: i32,
}
impl Ec2Ungraceful {
    /// <p>The minimum success percentage that you specify for EC2 Auto Scaling groups.</p>
    pub fn minimum_success_percentage(&self) -> i32 {
        self.minimum_success_percentage
    }
}
impl Ec2Ungraceful {
    /// Creates a new builder-style object to manufacture [`Ec2Ungraceful`](crate::types::Ec2Ungraceful).
    pub fn builder() -> crate::types::builders::Ec2UngracefulBuilder {
        crate::types::builders::Ec2UngracefulBuilder::default()
    }
}

/// A builder for [`Ec2Ungraceful`](crate::types::Ec2Ungraceful).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct Ec2UngracefulBuilder {
    pub(crate) minimum_success_percentage: ::std::option::Option<i32>,
}
impl Ec2UngracefulBuilder {
    /// <p>The minimum success percentage that you specify for EC2 Auto Scaling groups.</p>
    /// This field is required.
    pub fn minimum_success_percentage(mut self, input: i32) -> Self {
        self.minimum_success_percentage = ::std::option::Option::Some(input);
        self
    }
    /// <p>The minimum success percentage that you specify for EC2 Auto Scaling groups.</p>
    pub fn set_minimum_success_percentage(mut self, input: ::std::option::Option<i32>) -> Self {
        self.minimum_success_percentage = input;
        self
    }
    /// <p>The minimum success percentage that you specify for EC2 Auto Scaling groups.</p>
    pub fn get_minimum_success_percentage(&self) -> &::std::option::Option<i32> {
        &self.minimum_success_percentage
    }
    /// Consumes the builder and constructs a [`Ec2Ungraceful`](crate::types::Ec2Ungraceful).
    /// This method will fail if any of the following fields are not set:
    /// - [`minimum_success_percentage`](crate::types::builders::Ec2UngracefulBuilder::minimum_success_percentage)
    pub fn build(self) -> ::std::result::Result<crate::types::Ec2Ungraceful, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::Ec2Ungraceful {
            minimum_success_percentage: self.minimum_success_percentage.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "minimum_success_percentage",
                    "minimum_success_percentage was not specified but it is required when building Ec2Ungraceful",
                )
            })?,
        })
    }
}
