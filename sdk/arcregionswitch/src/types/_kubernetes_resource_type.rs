// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines the type of Kubernetes resource to scale in an Amazon EKS cluster.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct KubernetesResourceType {
    /// <p>The API version type for the Kubernetes resource.</p>
    pub api_version: ::std::string::String,
    /// <p>The kind for the Kubernetes resource.</p>
    pub kind: ::std::string::String,
}
impl KubernetesResourceType {
    /// <p>The API version type for the Kubernetes resource.</p>
    pub fn api_version(&self) -> &str {
        use std::ops::Deref;
        self.api_version.deref()
    }
    /// <p>The kind for the Kubernetes resource.</p>
    pub fn kind(&self) -> &str {
        use std::ops::Deref;
        self.kind.deref()
    }
}
impl KubernetesResourceType {
    /// Creates a new builder-style object to manufacture [`KubernetesResourceType`](crate::types::KubernetesResourceType).
    pub fn builder() -> crate::types::builders::KubernetesResourceTypeBuilder {
        crate::types::builders::KubernetesResourceTypeBuilder::default()
    }
}

/// A builder for [`KubernetesResourceType`](crate::types::KubernetesResourceType).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct KubernetesResourceTypeBuilder {
    pub(crate) api_version: ::std::option::Option<::std::string::String>,
    pub(crate) kind: ::std::option::Option<::std::string::String>,
}
impl KubernetesResourceTypeBuilder {
    /// <p>The API version type for the Kubernetes resource.</p>
    /// This field is required.
    pub fn api_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.api_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The API version type for the Kubernetes resource.</p>
    pub fn set_api_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.api_version = input;
        self
    }
    /// <p>The API version type for the Kubernetes resource.</p>
    pub fn get_api_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.api_version
    }
    /// <p>The kind for the Kubernetes resource.</p>
    /// This field is required.
    pub fn kind(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.kind = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The kind for the Kubernetes resource.</p>
    pub fn set_kind(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.kind = input;
        self
    }
    /// <p>The kind for the Kubernetes resource.</p>
    pub fn get_kind(&self) -> &::std::option::Option<::std::string::String> {
        &self.kind
    }
    /// Consumes the builder and constructs a [`KubernetesResourceType`](crate::types::KubernetesResourceType).
    /// This method will fail if any of the following fields are not set:
    /// - [`api_version`](crate::types::builders::KubernetesResourceTypeBuilder::api_version)
    /// - [`kind`](crate::types::builders::KubernetesResourceTypeBuilder::kind)
    pub fn build(self) -> ::std::result::Result<crate::types::KubernetesResourceType, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::KubernetesResourceType {
            api_version: self.api_version.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "api_version",
                    "api_version was not specified but it is required when building KubernetesResourceType",
                )
            })?,
            kind: self.kind.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "kind",
                    "kind was not specified but it is required when building KubernetesResourceType",
                )
            })?,
        })
    }
}
