// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A summarized representation of a Region switch plan. This structure contains key information about a plan without all the detailed workflow and step data.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AbbreviatedPlan {
    /// <p>The Amazon Resource Name (ARN) of the Region switch plan.</p>
    pub arn: ::std::string::String,
    /// <p>The owner of a Region switch plan.</p>
    pub owner: ::std::string::String,
    /// <p>The name of a Region switch plan.</p>
    pub name: ::std::string::String,
    /// <p>The Amazon Web Services Region specified for a Region switch plan.</p>
    pub regions: ::std::vec::Vec<::std::string::String>,
    /// <p>The recovery approach for a Region switch plan, which can be active/active (activeActive) or active/passive (activePassive).</p>
    pub recovery_approach: crate::types::RecoveryApproach,
    /// <p>The primary Region for a plan.</p>
    pub primary_region: ::std::option::Option<::std::string::String>,
    /// <p>The version for the plan.</p>
    pub version: ::std::option::Option<::std::string::String>,
    /// <p>The timestamp when the plan execution was last updated.</p>
    pub updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The description of a Region switch plan.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The execution role is a way to categorize a Region switch plan.</p>
    pub execution_role: ::std::option::Option<::std::string::String>,
    /// <p>Specifies if this is the active plan execution at this time.</p>
    pub active_plan_execution: ::std::option::Option<::std::string::String>,
    /// <p>The recovery time objective that you've specified.</p>
    pub recovery_time_objective_minutes: ::std::option::Option<i32>,
}
impl AbbreviatedPlan {
    /// <p>The Amazon Resource Name (ARN) of the Region switch plan.</p>
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// <p>The owner of a Region switch plan.</p>
    pub fn owner(&self) -> &str {
        use std::ops::Deref;
        self.owner.deref()
    }
    /// <p>The name of a Region switch plan.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The Amazon Web Services Region specified for a Region switch plan.</p>
    pub fn regions(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.regions.deref()
    }
    /// <p>The recovery approach for a Region switch plan, which can be active/active (activeActive) or active/passive (activePassive).</p>
    pub fn recovery_approach(&self) -> &crate::types::RecoveryApproach {
        &self.recovery_approach
    }
    /// <p>The primary Region for a plan.</p>
    pub fn primary_region(&self) -> ::std::option::Option<&str> {
        self.primary_region.as_deref()
    }
    /// <p>The version for the plan.</p>
    pub fn version(&self) -> ::std::option::Option<&str> {
        self.version.as_deref()
    }
    /// <p>The timestamp when the plan execution was last updated.</p>
    pub fn updated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
    /// <p>The description of a Region switch plan.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The execution role is a way to categorize a Region switch plan.</p>
    pub fn execution_role(&self) -> ::std::option::Option<&str> {
        self.execution_role.as_deref()
    }
    /// <p>Specifies if this is the active plan execution at this time.</p>
    pub fn active_plan_execution(&self) -> ::std::option::Option<&str> {
        self.active_plan_execution.as_deref()
    }
    /// <p>The recovery time objective that you've specified.</p>
    pub fn recovery_time_objective_minutes(&self) -> ::std::option::Option<i32> {
        self.recovery_time_objective_minutes
    }
}
impl AbbreviatedPlan {
    /// Creates a new builder-style object to manufacture [`AbbreviatedPlan`](crate::types::AbbreviatedPlan).
    pub fn builder() -> crate::types::builders::AbbreviatedPlanBuilder {
        crate::types::builders::AbbreviatedPlanBuilder::default()
    }
}

/// A builder for [`AbbreviatedPlan`](crate::types::AbbreviatedPlan).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AbbreviatedPlanBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) owner: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) regions: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) recovery_approach: ::std::option::Option<crate::types::RecoveryApproach>,
    pub(crate) primary_region: ::std::option::Option<::std::string::String>,
    pub(crate) version: ::std::option::Option<::std::string::String>,
    pub(crate) updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) execution_role: ::std::option::Option<::std::string::String>,
    pub(crate) active_plan_execution: ::std::option::Option<::std::string::String>,
    pub(crate) recovery_time_objective_minutes: ::std::option::Option<i32>,
}
impl AbbreviatedPlanBuilder {
    /// <p>The Amazon Resource Name (ARN) of the Region switch plan.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Region switch plan.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Region switch plan.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The owner of a Region switch plan.</p>
    /// This field is required.
    pub fn owner(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.owner = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The owner of a Region switch plan.</p>
    pub fn set_owner(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.owner = input;
        self
    }
    /// <p>The owner of a Region switch plan.</p>
    pub fn get_owner(&self) -> &::std::option::Option<::std::string::String> {
        &self.owner
    }
    /// <p>The name of a Region switch plan.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of a Region switch plan.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of a Region switch plan.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// Appends an item to `regions`.
    ///
    /// To override the contents of this collection use [`set_regions`](Self::set_regions).
    ///
    /// <p>The Amazon Web Services Region specified for a Region switch plan.</p>
    pub fn regions(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.regions.unwrap_or_default();
        v.push(input.into());
        self.regions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The Amazon Web Services Region specified for a Region switch plan.</p>
    pub fn set_regions(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.regions = input;
        self
    }
    /// <p>The Amazon Web Services Region specified for a Region switch plan.</p>
    pub fn get_regions(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.regions
    }
    /// <p>The recovery approach for a Region switch plan, which can be active/active (activeActive) or active/passive (activePassive).</p>
    /// This field is required.
    pub fn recovery_approach(mut self, input: crate::types::RecoveryApproach) -> Self {
        self.recovery_approach = ::std::option::Option::Some(input);
        self
    }
    /// <p>The recovery approach for a Region switch plan, which can be active/active (activeActive) or active/passive (activePassive).</p>
    pub fn set_recovery_approach(mut self, input: ::std::option::Option<crate::types::RecoveryApproach>) -> Self {
        self.recovery_approach = input;
        self
    }
    /// <p>The recovery approach for a Region switch plan, which can be active/active (activeActive) or active/passive (activePassive).</p>
    pub fn get_recovery_approach(&self) -> &::std::option::Option<crate::types::RecoveryApproach> {
        &self.recovery_approach
    }
    /// <p>The primary Region for a plan.</p>
    pub fn primary_region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.primary_region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The primary Region for a plan.</p>
    pub fn set_primary_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.primary_region = input;
        self
    }
    /// <p>The primary Region for a plan.</p>
    pub fn get_primary_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.primary_region
    }
    /// <p>The version for the plan.</p>
    pub fn version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version for the plan.</p>
    pub fn set_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.version = input;
        self
    }
    /// <p>The version for the plan.</p>
    pub fn get_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.version
    }
    /// <p>The timestamp when the plan execution was last updated.</p>
    pub fn updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the plan execution was last updated.</p>
    pub fn set_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>The timestamp when the plan execution was last updated.</p>
    pub fn get_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_at
    }
    /// <p>The description of a Region switch plan.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of a Region switch plan.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of a Region switch plan.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The execution role is a way to categorize a Region switch plan.</p>
    pub fn execution_role(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.execution_role = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The execution role is a way to categorize a Region switch plan.</p>
    pub fn set_execution_role(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.execution_role = input;
        self
    }
    /// <p>The execution role is a way to categorize a Region switch plan.</p>
    pub fn get_execution_role(&self) -> &::std::option::Option<::std::string::String> {
        &self.execution_role
    }
    /// <p>Specifies if this is the active plan execution at this time.</p>
    pub fn active_plan_execution(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.active_plan_execution = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies if this is the active plan execution at this time.</p>
    pub fn set_active_plan_execution(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.active_plan_execution = input;
        self
    }
    /// <p>Specifies if this is the active plan execution at this time.</p>
    pub fn get_active_plan_execution(&self) -> &::std::option::Option<::std::string::String> {
        &self.active_plan_execution
    }
    /// <p>The recovery time objective that you've specified.</p>
    pub fn recovery_time_objective_minutes(mut self, input: i32) -> Self {
        self.recovery_time_objective_minutes = ::std::option::Option::Some(input);
        self
    }
    /// <p>The recovery time objective that you've specified.</p>
    pub fn set_recovery_time_objective_minutes(mut self, input: ::std::option::Option<i32>) -> Self {
        self.recovery_time_objective_minutes = input;
        self
    }
    /// <p>The recovery time objective that you've specified.</p>
    pub fn get_recovery_time_objective_minutes(&self) -> &::std::option::Option<i32> {
        &self.recovery_time_objective_minutes
    }
    /// Consumes the builder and constructs a [`AbbreviatedPlan`](crate::types::AbbreviatedPlan).
    /// This method will fail if any of the following fields are not set:
    /// - [`arn`](crate::types::builders::AbbreviatedPlanBuilder::arn)
    /// - [`owner`](crate::types::builders::AbbreviatedPlanBuilder::owner)
    /// - [`name`](crate::types::builders::AbbreviatedPlanBuilder::name)
    /// - [`regions`](crate::types::builders::AbbreviatedPlanBuilder::regions)
    /// - [`recovery_approach`](crate::types::builders::AbbreviatedPlanBuilder::recovery_approach)
    pub fn build(self) -> ::std::result::Result<crate::types::AbbreviatedPlan, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AbbreviatedPlan {
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building AbbreviatedPlan",
                )
            })?,
            owner: self.owner.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "owner",
                    "owner was not specified but it is required when building AbbreviatedPlan",
                )
            })?,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building AbbreviatedPlan",
                )
            })?,
            regions: self.regions.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "regions",
                    "regions was not specified but it is required when building AbbreviatedPlan",
                )
            })?,
            recovery_approach: self.recovery_approach.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "recovery_approach",
                    "recovery_approach was not specified but it is required when building AbbreviatedPlan",
                )
            })?,
            primary_region: self.primary_region,
            version: self.version,
            updated_at: self.updated_at,
            description: self.description,
            execution_role: self.execution_role,
            active_plan_execution: self.active_plan_execution,
            recovery_time_objective_minutes: self.recovery_time_objective_minutes,
        })
    }
}
