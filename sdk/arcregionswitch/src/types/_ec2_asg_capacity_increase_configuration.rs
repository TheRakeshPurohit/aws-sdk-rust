// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration for increasing the capacity of Amazon EC2 Auto Scaling groups during a Region switch.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Ec2AsgCapacityIncreaseConfiguration {
    /// <p>The timeout value specified for the configuration.</p>
    pub timeout_minutes: i32,
    /// <p>The EC2 Auto Scaling groups for the configuration.</p>
    pub asgs: ::std::vec::Vec<crate::types::Asg>,
    /// <p>The settings for ungraceful execution.</p>
    pub ungraceful: ::std::option::Option<crate::types::Ec2Ungraceful>,
    /// <p>The target percentage that you specify for EC2 Auto Scaling groups.</p>
    pub target_percent: i32,
    /// <p>The monitoring approach that you specify EC2 Auto Scaling groups for the configuration.</p>
    pub capacity_monitoring_approach: crate::types::Ec2AsgCapacityMonitoringApproach,
}
impl Ec2AsgCapacityIncreaseConfiguration {
    /// <p>The timeout value specified for the configuration.</p>
    pub fn timeout_minutes(&self) -> i32 {
        self.timeout_minutes
    }
    /// <p>The EC2 Auto Scaling groups for the configuration.</p>
    pub fn asgs(&self) -> &[crate::types::Asg] {
        use std::ops::Deref;
        self.asgs.deref()
    }
    /// <p>The settings for ungraceful execution.</p>
    pub fn ungraceful(&self) -> ::std::option::Option<&crate::types::Ec2Ungraceful> {
        self.ungraceful.as_ref()
    }
    /// <p>The target percentage that you specify for EC2 Auto Scaling groups.</p>
    pub fn target_percent(&self) -> i32 {
        self.target_percent
    }
    /// <p>The monitoring approach that you specify EC2 Auto Scaling groups for the configuration.</p>
    pub fn capacity_monitoring_approach(&self) -> &crate::types::Ec2AsgCapacityMonitoringApproach {
        &self.capacity_monitoring_approach
    }
}
impl Ec2AsgCapacityIncreaseConfiguration {
    /// Creates a new builder-style object to manufacture [`Ec2AsgCapacityIncreaseConfiguration`](crate::types::Ec2AsgCapacityIncreaseConfiguration).
    pub fn builder() -> crate::types::builders::Ec2AsgCapacityIncreaseConfigurationBuilder {
        crate::types::builders::Ec2AsgCapacityIncreaseConfigurationBuilder::default()
    }
}

/// A builder for [`Ec2AsgCapacityIncreaseConfiguration`](crate::types::Ec2AsgCapacityIncreaseConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct Ec2AsgCapacityIncreaseConfigurationBuilder {
    pub(crate) timeout_minutes: ::std::option::Option<i32>,
    pub(crate) asgs: ::std::option::Option<::std::vec::Vec<crate::types::Asg>>,
    pub(crate) ungraceful: ::std::option::Option<crate::types::Ec2Ungraceful>,
    pub(crate) target_percent: ::std::option::Option<i32>,
    pub(crate) capacity_monitoring_approach: ::std::option::Option<crate::types::Ec2AsgCapacityMonitoringApproach>,
}
impl Ec2AsgCapacityIncreaseConfigurationBuilder {
    /// <p>The timeout value specified for the configuration.</p>
    pub fn timeout_minutes(mut self, input: i32) -> Self {
        self.timeout_minutes = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timeout value specified for the configuration.</p>
    pub fn set_timeout_minutes(mut self, input: ::std::option::Option<i32>) -> Self {
        self.timeout_minutes = input;
        self
    }
    /// <p>The timeout value specified for the configuration.</p>
    pub fn get_timeout_minutes(&self) -> &::std::option::Option<i32> {
        &self.timeout_minutes
    }
    /// Appends an item to `asgs`.
    ///
    /// To override the contents of this collection use [`set_asgs`](Self::set_asgs).
    ///
    /// <p>The EC2 Auto Scaling groups for the configuration.</p>
    pub fn asgs(mut self, input: crate::types::Asg) -> Self {
        let mut v = self.asgs.unwrap_or_default();
        v.push(input);
        self.asgs = ::std::option::Option::Some(v);
        self
    }
    /// <p>The EC2 Auto Scaling groups for the configuration.</p>
    pub fn set_asgs(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Asg>>) -> Self {
        self.asgs = input;
        self
    }
    /// <p>The EC2 Auto Scaling groups for the configuration.</p>
    pub fn get_asgs(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Asg>> {
        &self.asgs
    }
    /// <p>The settings for ungraceful execution.</p>
    pub fn ungraceful(mut self, input: crate::types::Ec2Ungraceful) -> Self {
        self.ungraceful = ::std::option::Option::Some(input);
        self
    }
    /// <p>The settings for ungraceful execution.</p>
    pub fn set_ungraceful(mut self, input: ::std::option::Option<crate::types::Ec2Ungraceful>) -> Self {
        self.ungraceful = input;
        self
    }
    /// <p>The settings for ungraceful execution.</p>
    pub fn get_ungraceful(&self) -> &::std::option::Option<crate::types::Ec2Ungraceful> {
        &self.ungraceful
    }
    /// <p>The target percentage that you specify for EC2 Auto Scaling groups.</p>
    pub fn target_percent(mut self, input: i32) -> Self {
        self.target_percent = ::std::option::Option::Some(input);
        self
    }
    /// <p>The target percentage that you specify for EC2 Auto Scaling groups.</p>
    pub fn set_target_percent(mut self, input: ::std::option::Option<i32>) -> Self {
        self.target_percent = input;
        self
    }
    /// <p>The target percentage that you specify for EC2 Auto Scaling groups.</p>
    pub fn get_target_percent(&self) -> &::std::option::Option<i32> {
        &self.target_percent
    }
    /// <p>The monitoring approach that you specify EC2 Auto Scaling groups for the configuration.</p>
    pub fn capacity_monitoring_approach(mut self, input: crate::types::Ec2AsgCapacityMonitoringApproach) -> Self {
        self.capacity_monitoring_approach = ::std::option::Option::Some(input);
        self
    }
    /// <p>The monitoring approach that you specify EC2 Auto Scaling groups for the configuration.</p>
    pub fn set_capacity_monitoring_approach(mut self, input: ::std::option::Option<crate::types::Ec2AsgCapacityMonitoringApproach>) -> Self {
        self.capacity_monitoring_approach = input;
        self
    }
    /// <p>The monitoring approach that you specify EC2 Auto Scaling groups for the configuration.</p>
    pub fn get_capacity_monitoring_approach(&self) -> &::std::option::Option<crate::types::Ec2AsgCapacityMonitoringApproach> {
        &self.capacity_monitoring_approach
    }
    /// Consumes the builder and constructs a [`Ec2AsgCapacityIncreaseConfiguration`](crate::types::Ec2AsgCapacityIncreaseConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`asgs`](crate::types::builders::Ec2AsgCapacityIncreaseConfigurationBuilder::asgs)
    pub fn build(self) -> ::std::result::Result<crate::types::Ec2AsgCapacityIncreaseConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::Ec2AsgCapacityIncreaseConfiguration {
            timeout_minutes: self.timeout_minutes.unwrap_or(60),
            asgs: self.asgs.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "asgs",
                    "asgs was not specified but it is required when building Ec2AsgCapacityIncreaseConfiguration",
                )
            })?,
            ungraceful: self.ungraceful,
            target_percent: self.target_percent.unwrap_or(100),
            capacity_monitoring_approach: self.capacity_monitoring_approach.unwrap_or(
                "sampledMaxInLast24Hours"
                    .parse::<crate::types::Ec2AsgCapacityMonitoringApproach>()
                    .expect("static value validated to member"),
            ),
        })
    }
}
