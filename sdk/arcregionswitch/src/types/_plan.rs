// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a Region switch plan. A plan defines the steps required to shift traffic from one Amazon Web Services Region to another.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Plan {
    /// <p>The Amazon Resource Name (ARN) of the plan.</p>
    pub arn: ::std::string::String,
    /// <p>The description for a plan.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The workflows for a plan.</p>
    pub workflows: ::std::vec::Vec<crate::types::Workflow>,
    /// <p>The execution role for a plan.</p>
    pub execution_role: ::std::string::String,
    /// <p>The recovery time objective for a plan.</p>
    pub recovery_time_objective_minutes: ::std::option::Option<i32>,
    /// <p>The associated application health alarms for a plan.</p>
    pub associated_alarms: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::AssociatedAlarm>>,
    /// <p>The triggers for a plan.</p>
    pub triggers: ::std::option::Option<::std::vec::Vec<crate::types::Trigger>>,
    /// <p>The name for a plan.</p>
    pub name: ::std::string::String,
    /// <p>The Amazon Web Services Regions for a plan.</p>
    pub regions: ::std::vec::Vec<::std::string::String>,
    /// <p>The recovery approach for a Region switch plan, which can be active/active (activeActive) or active/passive (activePassive).</p>
    pub recovery_approach: crate::types::RecoveryApproach,
    /// <p>The primary Region for a plan.</p>
    pub primary_region: ::std::option::Option<::std::string::String>,
    /// <p>The owner of a plan.</p>
    pub owner: ::std::string::String,
    /// <p>The version for the plan.</p>
    pub version: ::std::option::Option<::std::string::String>,
    /// <p>The timestamp when the plan was last updated.</p>
    pub updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl Plan {
    /// <p>The Amazon Resource Name (ARN) of the plan.</p>
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// <p>The description for a plan.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The workflows for a plan.</p>
    pub fn workflows(&self) -> &[crate::types::Workflow] {
        use std::ops::Deref;
        self.workflows.deref()
    }
    /// <p>The execution role for a plan.</p>
    pub fn execution_role(&self) -> &str {
        use std::ops::Deref;
        self.execution_role.deref()
    }
    /// <p>The recovery time objective for a plan.</p>
    pub fn recovery_time_objective_minutes(&self) -> ::std::option::Option<i32> {
        self.recovery_time_objective_minutes
    }
    /// <p>The associated application health alarms for a plan.</p>
    pub fn associated_alarms(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, crate::types::AssociatedAlarm>> {
        self.associated_alarms.as_ref()
    }
    /// <p>The triggers for a plan.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.triggers.is_none()`.
    pub fn triggers(&self) -> &[crate::types::Trigger] {
        self.triggers.as_deref().unwrap_or_default()
    }
    /// <p>The name for a plan.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The Amazon Web Services Regions for a plan.</p>
    pub fn regions(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.regions.deref()
    }
    /// <p>The recovery approach for a Region switch plan, which can be active/active (activeActive) or active/passive (activePassive).</p>
    pub fn recovery_approach(&self) -> &crate::types::RecoveryApproach {
        &self.recovery_approach
    }
    /// <p>The primary Region for a plan.</p>
    pub fn primary_region(&self) -> ::std::option::Option<&str> {
        self.primary_region.as_deref()
    }
    /// <p>The owner of a plan.</p>
    pub fn owner(&self) -> &str {
        use std::ops::Deref;
        self.owner.deref()
    }
    /// <p>The version for the plan.</p>
    pub fn version(&self) -> ::std::option::Option<&str> {
        self.version.as_deref()
    }
    /// <p>The timestamp when the plan was last updated.</p>
    pub fn updated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
}
impl Plan {
    /// Creates a new builder-style object to manufacture [`Plan`](crate::types::Plan).
    pub fn builder() -> crate::types::builders::PlanBuilder {
        crate::types::builders::PlanBuilder::default()
    }
}

/// A builder for [`Plan`](crate::types::Plan).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct PlanBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) workflows: ::std::option::Option<::std::vec::Vec<crate::types::Workflow>>,
    pub(crate) execution_role: ::std::option::Option<::std::string::String>,
    pub(crate) recovery_time_objective_minutes: ::std::option::Option<i32>,
    pub(crate) associated_alarms: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::AssociatedAlarm>>,
    pub(crate) triggers: ::std::option::Option<::std::vec::Vec<crate::types::Trigger>>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) regions: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) recovery_approach: ::std::option::Option<crate::types::RecoveryApproach>,
    pub(crate) primary_region: ::std::option::Option<::std::string::String>,
    pub(crate) owner: ::std::option::Option<::std::string::String>,
    pub(crate) version: ::std::option::Option<::std::string::String>,
    pub(crate) updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl PlanBuilder {
    /// <p>The Amazon Resource Name (ARN) of the plan.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the plan.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the plan.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The description for a plan.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description for a plan.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description for a plan.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Appends an item to `workflows`.
    ///
    /// To override the contents of this collection use [`set_workflows`](Self::set_workflows).
    ///
    /// <p>The workflows for a plan.</p>
    pub fn workflows(mut self, input: crate::types::Workflow) -> Self {
        let mut v = self.workflows.unwrap_or_default();
        v.push(input);
        self.workflows = ::std::option::Option::Some(v);
        self
    }
    /// <p>The workflows for a plan.</p>
    pub fn set_workflows(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Workflow>>) -> Self {
        self.workflows = input;
        self
    }
    /// <p>The workflows for a plan.</p>
    pub fn get_workflows(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Workflow>> {
        &self.workflows
    }
    /// <p>The execution role for a plan.</p>
    /// This field is required.
    pub fn execution_role(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.execution_role = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The execution role for a plan.</p>
    pub fn set_execution_role(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.execution_role = input;
        self
    }
    /// <p>The execution role for a plan.</p>
    pub fn get_execution_role(&self) -> &::std::option::Option<::std::string::String> {
        &self.execution_role
    }
    /// <p>The recovery time objective for a plan.</p>
    pub fn recovery_time_objective_minutes(mut self, input: i32) -> Self {
        self.recovery_time_objective_minutes = ::std::option::Option::Some(input);
        self
    }
    /// <p>The recovery time objective for a plan.</p>
    pub fn set_recovery_time_objective_minutes(mut self, input: ::std::option::Option<i32>) -> Self {
        self.recovery_time_objective_minutes = input;
        self
    }
    /// <p>The recovery time objective for a plan.</p>
    pub fn get_recovery_time_objective_minutes(&self) -> &::std::option::Option<i32> {
        &self.recovery_time_objective_minutes
    }
    /// Adds a key-value pair to `associated_alarms`.
    ///
    /// To override the contents of this collection use [`set_associated_alarms`](Self::set_associated_alarms).
    ///
    /// <p>The associated application health alarms for a plan.</p>
    pub fn associated_alarms(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::AssociatedAlarm) -> Self {
        let mut hash_map = self.associated_alarms.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.associated_alarms = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The associated application health alarms for a plan.</p>
    pub fn set_associated_alarms(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::AssociatedAlarm>>,
    ) -> Self {
        self.associated_alarms = input;
        self
    }
    /// <p>The associated application health alarms for a plan.</p>
    pub fn get_associated_alarms(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::AssociatedAlarm>> {
        &self.associated_alarms
    }
    /// Appends an item to `triggers`.
    ///
    /// To override the contents of this collection use [`set_triggers`](Self::set_triggers).
    ///
    /// <p>The triggers for a plan.</p>
    pub fn triggers(mut self, input: crate::types::Trigger) -> Self {
        let mut v = self.triggers.unwrap_or_default();
        v.push(input);
        self.triggers = ::std::option::Option::Some(v);
        self
    }
    /// <p>The triggers for a plan.</p>
    pub fn set_triggers(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Trigger>>) -> Self {
        self.triggers = input;
        self
    }
    /// <p>The triggers for a plan.</p>
    pub fn get_triggers(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Trigger>> {
        &self.triggers
    }
    /// <p>The name for a plan.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name for a plan.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name for a plan.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// Appends an item to `regions`.
    ///
    /// To override the contents of this collection use [`set_regions`](Self::set_regions).
    ///
    /// <p>The Amazon Web Services Regions for a plan.</p>
    pub fn regions(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.regions.unwrap_or_default();
        v.push(input.into());
        self.regions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The Amazon Web Services Regions for a plan.</p>
    pub fn set_regions(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.regions = input;
        self
    }
    /// <p>The Amazon Web Services Regions for a plan.</p>
    pub fn get_regions(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.regions
    }
    /// <p>The recovery approach for a Region switch plan, which can be active/active (activeActive) or active/passive (activePassive).</p>
    /// This field is required.
    pub fn recovery_approach(mut self, input: crate::types::RecoveryApproach) -> Self {
        self.recovery_approach = ::std::option::Option::Some(input);
        self
    }
    /// <p>The recovery approach for a Region switch plan, which can be active/active (activeActive) or active/passive (activePassive).</p>
    pub fn set_recovery_approach(mut self, input: ::std::option::Option<crate::types::RecoveryApproach>) -> Self {
        self.recovery_approach = input;
        self
    }
    /// <p>The recovery approach for a Region switch plan, which can be active/active (activeActive) or active/passive (activePassive).</p>
    pub fn get_recovery_approach(&self) -> &::std::option::Option<crate::types::RecoveryApproach> {
        &self.recovery_approach
    }
    /// <p>The primary Region for a plan.</p>
    pub fn primary_region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.primary_region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The primary Region for a plan.</p>
    pub fn set_primary_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.primary_region = input;
        self
    }
    /// <p>The primary Region for a plan.</p>
    pub fn get_primary_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.primary_region
    }
    /// <p>The owner of a plan.</p>
    /// This field is required.
    pub fn owner(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.owner = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The owner of a plan.</p>
    pub fn set_owner(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.owner = input;
        self
    }
    /// <p>The owner of a plan.</p>
    pub fn get_owner(&self) -> &::std::option::Option<::std::string::String> {
        &self.owner
    }
    /// <p>The version for the plan.</p>
    pub fn version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version for the plan.</p>
    pub fn set_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.version = input;
        self
    }
    /// <p>The version for the plan.</p>
    pub fn get_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.version
    }
    /// <p>The timestamp when the plan was last updated.</p>
    pub fn updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the plan was last updated.</p>
    pub fn set_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>The timestamp when the plan was last updated.</p>
    pub fn get_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_at
    }
    /// Consumes the builder and constructs a [`Plan`](crate::types::Plan).
    /// This method will fail if any of the following fields are not set:
    /// - [`arn`](crate::types::builders::PlanBuilder::arn)
    /// - [`workflows`](crate::types::builders::PlanBuilder::workflows)
    /// - [`execution_role`](crate::types::builders::PlanBuilder::execution_role)
    /// - [`name`](crate::types::builders::PlanBuilder::name)
    /// - [`regions`](crate::types::builders::PlanBuilder::regions)
    /// - [`recovery_approach`](crate::types::builders::PlanBuilder::recovery_approach)
    /// - [`owner`](crate::types::builders::PlanBuilder::owner)
    pub fn build(self) -> ::std::result::Result<crate::types::Plan, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::Plan {
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field("arn", "arn was not specified but it is required when building Plan")
            })?,
            description: self.description,
            workflows: self.workflows.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "workflows",
                    "workflows was not specified but it is required when building Plan",
                )
            })?,
            execution_role: self.execution_role.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "execution_role",
                    "execution_role was not specified but it is required when building Plan",
                )
            })?,
            recovery_time_objective_minutes: self.recovery_time_objective_minutes,
            associated_alarms: self.associated_alarms,
            triggers: self.triggers,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building Plan",
                )
            })?,
            regions: self.regions.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "regions",
                    "regions was not specified but it is required when building Plan",
                )
            })?,
            recovery_approach: self.recovery_approach.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "recovery_approach",
                    "recovery_approach was not specified but it is required when building Plan",
                )
            })?,
            primary_region: self.primary_region,
            owner: self.owner.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "owner",
                    "owner was not specified but it is required when building Plan",
                )
            })?,
            version: self.version,
            updated_at: self.updated_at,
        })
    }
}
