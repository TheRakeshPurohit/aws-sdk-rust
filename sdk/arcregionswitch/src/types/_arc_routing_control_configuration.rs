// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration for ARC routing controls used in a Region switch plan. Routing controls are simple on/off switches that you can use to shift traffic away from an impaired Region.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ArcRoutingControlConfiguration {
    /// <p>The timeout value specified for the configuration.</p>
    pub timeout_minutes: i32,
    /// <p>The cross account role for the configuration.</p>
    pub cross_account_role: ::std::option::Option<::std::string::String>,
    /// <p>The external ID (secret key) for the configuration.</p>
    pub external_id: ::std::option::Option<::std::string::String>,
    /// <p>The Region and ARC routing controls for the configuration.</p>
    pub region_and_routing_controls: ::std::collections::HashMap<::std::string::String, ::std::vec::Vec<crate::types::ArcRoutingControlState>>,
}
impl ArcRoutingControlConfiguration {
    /// <p>The timeout value specified for the configuration.</p>
    pub fn timeout_minutes(&self) -> i32 {
        self.timeout_minutes
    }
    /// <p>The cross account role for the configuration.</p>
    pub fn cross_account_role(&self) -> ::std::option::Option<&str> {
        self.cross_account_role.as_deref()
    }
    /// <p>The external ID (secret key) for the configuration.</p>
    pub fn external_id(&self) -> ::std::option::Option<&str> {
        self.external_id.as_deref()
    }
    /// <p>The Region and ARC routing controls for the configuration.</p>
    pub fn region_and_routing_controls(
        &self,
    ) -> &::std::collections::HashMap<::std::string::String, ::std::vec::Vec<crate::types::ArcRoutingControlState>> {
        &self.region_and_routing_controls
    }
}
impl ArcRoutingControlConfiguration {
    /// Creates a new builder-style object to manufacture [`ArcRoutingControlConfiguration`](crate::types::ArcRoutingControlConfiguration).
    pub fn builder() -> crate::types::builders::ArcRoutingControlConfigurationBuilder {
        crate::types::builders::ArcRoutingControlConfigurationBuilder::default()
    }
}

/// A builder for [`ArcRoutingControlConfiguration`](crate::types::ArcRoutingControlConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ArcRoutingControlConfigurationBuilder {
    pub(crate) timeout_minutes: ::std::option::Option<i32>,
    pub(crate) cross_account_role: ::std::option::Option<::std::string::String>,
    pub(crate) external_id: ::std::option::Option<::std::string::String>,
    pub(crate) region_and_routing_controls:
        ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::vec::Vec<crate::types::ArcRoutingControlState>>>,
}
impl ArcRoutingControlConfigurationBuilder {
    /// <p>The timeout value specified for the configuration.</p>
    pub fn timeout_minutes(mut self, input: i32) -> Self {
        self.timeout_minutes = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timeout value specified for the configuration.</p>
    pub fn set_timeout_minutes(mut self, input: ::std::option::Option<i32>) -> Self {
        self.timeout_minutes = input;
        self
    }
    /// <p>The timeout value specified for the configuration.</p>
    pub fn get_timeout_minutes(&self) -> &::std::option::Option<i32> {
        &self.timeout_minutes
    }
    /// <p>The cross account role for the configuration.</p>
    pub fn cross_account_role(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cross_account_role = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The cross account role for the configuration.</p>
    pub fn set_cross_account_role(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cross_account_role = input;
        self
    }
    /// <p>The cross account role for the configuration.</p>
    pub fn get_cross_account_role(&self) -> &::std::option::Option<::std::string::String> {
        &self.cross_account_role
    }
    /// <p>The external ID (secret key) for the configuration.</p>
    pub fn external_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.external_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The external ID (secret key) for the configuration.</p>
    pub fn set_external_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.external_id = input;
        self
    }
    /// <p>The external ID (secret key) for the configuration.</p>
    pub fn get_external_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.external_id
    }
    /// Adds a key-value pair to `region_and_routing_controls`.
    ///
    /// To override the contents of this collection use [`set_region_and_routing_controls`](Self::set_region_and_routing_controls).
    ///
    /// <p>The Region and ARC routing controls for the configuration.</p>
    pub fn region_and_routing_controls(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: ::std::vec::Vec<crate::types::ArcRoutingControlState>,
    ) -> Self {
        let mut hash_map = self.region_and_routing_controls.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.region_and_routing_controls = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The Region and ARC routing controls for the configuration.</p>
    pub fn set_region_and_routing_controls(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::vec::Vec<crate::types::ArcRoutingControlState>>>,
    ) -> Self {
        self.region_and_routing_controls = input;
        self
    }
    /// <p>The Region and ARC routing controls for the configuration.</p>
    pub fn get_region_and_routing_controls(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::vec::Vec<crate::types::ArcRoutingControlState>>> {
        &self.region_and_routing_controls
    }
    /// Consumes the builder and constructs a [`ArcRoutingControlConfiguration`](crate::types::ArcRoutingControlConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`region_and_routing_controls`](crate::types::builders::ArcRoutingControlConfigurationBuilder::region_and_routing_controls)
    pub fn build(self) -> ::std::result::Result<crate::types::ArcRoutingControlConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ArcRoutingControlConfiguration {
            timeout_minutes: self.timeout_minutes.unwrap_or(60),
            cross_account_role: self.cross_account_role,
            external_id: self.external_id,
            region_and_routing_controls: self.region_and_routing_controls.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "region_and_routing_controls",
                    "region_and_routing_controls was not specified but it is required when building ArcRoutingControlConfiguration",
                )
            })?,
        })
    }
}
