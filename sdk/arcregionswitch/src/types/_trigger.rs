// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines a condition that can automatically trigger the execution of a Region switch plan.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Trigger {
    /// <p>The description for a trigger.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Web Services Region for a trigger.</p>
    pub target_region: ::std::string::String,
    /// <p>The action to perform when the trigger fires. Valid values include ACTIVATE and DEACTIVATE.</p>
    pub action: crate::types::WorkflowTargetAction,
    /// <p>The conditions that must be met for the trigger to fire.</p>
    pub conditions: ::std::vec::Vec<crate::types::TriggerCondition>,
    /// <p>The minimum time, in minutes, that must elapse between automatic executions of the plan.</p>
    pub min_delay_minutes_between_executions: i32,
}
impl Trigger {
    /// <p>The description for a trigger.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The Amazon Web Services Region for a trigger.</p>
    pub fn target_region(&self) -> &str {
        use std::ops::Deref;
        self.target_region.deref()
    }
    /// <p>The action to perform when the trigger fires. Valid values include ACTIVATE and DEACTIVATE.</p>
    pub fn action(&self) -> &crate::types::WorkflowTargetAction {
        &self.action
    }
    /// <p>The conditions that must be met for the trigger to fire.</p>
    pub fn conditions(&self) -> &[crate::types::TriggerCondition] {
        use std::ops::Deref;
        self.conditions.deref()
    }
    /// <p>The minimum time, in minutes, that must elapse between automatic executions of the plan.</p>
    pub fn min_delay_minutes_between_executions(&self) -> i32 {
        self.min_delay_minutes_between_executions
    }
}
impl Trigger {
    /// Creates a new builder-style object to manufacture [`Trigger`](crate::types::Trigger).
    pub fn builder() -> crate::types::builders::TriggerBuilder {
        crate::types::builders::TriggerBuilder::default()
    }
}

/// A builder for [`Trigger`](crate::types::Trigger).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct TriggerBuilder {
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) target_region: ::std::option::Option<::std::string::String>,
    pub(crate) action: ::std::option::Option<crate::types::WorkflowTargetAction>,
    pub(crate) conditions: ::std::option::Option<::std::vec::Vec<crate::types::TriggerCondition>>,
    pub(crate) min_delay_minutes_between_executions: ::std::option::Option<i32>,
}
impl TriggerBuilder {
    /// <p>The description for a trigger.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description for a trigger.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description for a trigger.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The Amazon Web Services Region for a trigger.</p>
    /// This field is required.
    pub fn target_region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.target_region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services Region for a trigger.</p>
    pub fn set_target_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.target_region = input;
        self
    }
    /// <p>The Amazon Web Services Region for a trigger.</p>
    pub fn get_target_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.target_region
    }
    /// <p>The action to perform when the trigger fires. Valid values include ACTIVATE and DEACTIVATE.</p>
    /// This field is required.
    pub fn action(mut self, input: crate::types::WorkflowTargetAction) -> Self {
        self.action = ::std::option::Option::Some(input);
        self
    }
    /// <p>The action to perform when the trigger fires. Valid values include ACTIVATE and DEACTIVATE.</p>
    pub fn set_action(mut self, input: ::std::option::Option<crate::types::WorkflowTargetAction>) -> Self {
        self.action = input;
        self
    }
    /// <p>The action to perform when the trigger fires. Valid values include ACTIVATE and DEACTIVATE.</p>
    pub fn get_action(&self) -> &::std::option::Option<crate::types::WorkflowTargetAction> {
        &self.action
    }
    /// Appends an item to `conditions`.
    ///
    /// To override the contents of this collection use [`set_conditions`](Self::set_conditions).
    ///
    /// <p>The conditions that must be met for the trigger to fire.</p>
    pub fn conditions(mut self, input: crate::types::TriggerCondition) -> Self {
        let mut v = self.conditions.unwrap_or_default();
        v.push(input);
        self.conditions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The conditions that must be met for the trigger to fire.</p>
    pub fn set_conditions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::TriggerCondition>>) -> Self {
        self.conditions = input;
        self
    }
    /// <p>The conditions that must be met for the trigger to fire.</p>
    pub fn get_conditions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TriggerCondition>> {
        &self.conditions
    }
    /// <p>The minimum time, in minutes, that must elapse between automatic executions of the plan.</p>
    /// This field is required.
    pub fn min_delay_minutes_between_executions(mut self, input: i32) -> Self {
        self.min_delay_minutes_between_executions = ::std::option::Option::Some(input);
        self
    }
    /// <p>The minimum time, in minutes, that must elapse between automatic executions of the plan.</p>
    pub fn set_min_delay_minutes_between_executions(mut self, input: ::std::option::Option<i32>) -> Self {
        self.min_delay_minutes_between_executions = input;
        self
    }
    /// <p>The minimum time, in minutes, that must elapse between automatic executions of the plan.</p>
    pub fn get_min_delay_minutes_between_executions(&self) -> &::std::option::Option<i32> {
        &self.min_delay_minutes_between_executions
    }
    /// Consumes the builder and constructs a [`Trigger`](crate::types::Trigger).
    /// This method will fail if any of the following fields are not set:
    /// - [`target_region`](crate::types::builders::TriggerBuilder::target_region)
    /// - [`action`](crate::types::builders::TriggerBuilder::action)
    /// - [`conditions`](crate::types::builders::TriggerBuilder::conditions)
    /// - [`min_delay_minutes_between_executions`](crate::types::builders::TriggerBuilder::min_delay_minutes_between_executions)
    pub fn build(self) -> ::std::result::Result<crate::types::Trigger, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::Trigger {
            description: self.description,
            target_region: self.target_region.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "target_region",
                    "target_region was not specified but it is required when building Trigger",
                )
            })?,
            action: self.action.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "action",
                    "action was not specified but it is required when building Trigger",
                )
            })?,
            conditions: self.conditions.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "conditions",
                    "conditions was not specified but it is required when building Trigger",
                )
            })?,
            min_delay_minutes_between_executions: self.min_delay_minutes_between_executions.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "min_delay_minutes_between_executions",
                    "min_delay_minutes_between_executions was not specified but it is required when building Trigger",
                )
            })?,
        })
    }
}
