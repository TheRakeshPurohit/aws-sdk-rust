// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The Amazon Web Services EKS cluster execution block configuration.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EksCluster {
    /// <p>The cross account role for the configuration.</p>
    pub cross_account_role: ::std::option::Option<::std::string::String>,
    /// <p>The external ID (secret key) for the configuration.</p>
    pub external_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of an Amazon Web Services EKS cluster.</p>
    pub cluster_arn: ::std::string::String,
}
impl EksCluster {
    /// <p>The cross account role for the configuration.</p>
    pub fn cross_account_role(&self) -> ::std::option::Option<&str> {
        self.cross_account_role.as_deref()
    }
    /// <p>The external ID (secret key) for the configuration.</p>
    pub fn external_id(&self) -> ::std::option::Option<&str> {
        self.external_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of an Amazon Web Services EKS cluster.</p>
    pub fn cluster_arn(&self) -> &str {
        use std::ops::Deref;
        self.cluster_arn.deref()
    }
}
impl EksCluster {
    /// Creates a new builder-style object to manufacture [`EksCluster`](crate::types::EksCluster).
    pub fn builder() -> crate::types::builders::EksClusterBuilder {
        crate::types::builders::EksClusterBuilder::default()
    }
}

/// A builder for [`EksCluster`](crate::types::EksCluster).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct EksClusterBuilder {
    pub(crate) cross_account_role: ::std::option::Option<::std::string::String>,
    pub(crate) external_id: ::std::option::Option<::std::string::String>,
    pub(crate) cluster_arn: ::std::option::Option<::std::string::String>,
}
impl EksClusterBuilder {
    /// <p>The cross account role for the configuration.</p>
    pub fn cross_account_role(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cross_account_role = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The cross account role for the configuration.</p>
    pub fn set_cross_account_role(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cross_account_role = input;
        self
    }
    /// <p>The cross account role for the configuration.</p>
    pub fn get_cross_account_role(&self) -> &::std::option::Option<::std::string::String> {
        &self.cross_account_role
    }
    /// <p>The external ID (secret key) for the configuration.</p>
    pub fn external_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.external_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The external ID (secret key) for the configuration.</p>
    pub fn set_external_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.external_id = input;
        self
    }
    /// <p>The external ID (secret key) for the configuration.</p>
    pub fn get_external_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.external_id
    }
    /// <p>The Amazon Resource Name (ARN) of an Amazon Web Services EKS cluster.</p>
    /// This field is required.
    pub fn cluster_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cluster_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of an Amazon Web Services EKS cluster.</p>
    pub fn set_cluster_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cluster_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of an Amazon Web Services EKS cluster.</p>
    pub fn get_cluster_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.cluster_arn
    }
    /// Consumes the builder and constructs a [`EksCluster`](crate::types::EksCluster).
    /// This method will fail if any of the following fields are not set:
    /// - [`cluster_arn`](crate::types::builders::EksClusterBuilder::cluster_arn)
    pub fn build(self) -> ::std::result::Result<crate::types::EksCluster, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::EksCluster {
            cross_account_role: self.cross_account_role,
            external_id: self.external_id,
            cluster_arn: self.cluster_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "cluster_arn",
                    "cluster_arn was not specified but it is required when building EksCluster",
                )
            })?,
        })
    }
}
