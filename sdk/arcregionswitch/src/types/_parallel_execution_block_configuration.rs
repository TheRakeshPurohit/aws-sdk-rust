// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration for steps that should be executed in parallel during a Region switch.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ParallelExecutionBlockConfiguration {
    /// <p>The steps for a parallel execution block.</p>
    pub steps: ::std::vec::Vec<crate::types::Step>,
}
impl ParallelExecutionBlockConfiguration {
    /// <p>The steps for a parallel execution block.</p>
    pub fn steps(&self) -> &[crate::types::Step] {
        use std::ops::Deref;
        self.steps.deref()
    }
}
impl ParallelExecutionBlockConfiguration {
    /// Creates a new builder-style object to manufacture [`ParallelExecutionBlockConfiguration`](crate::types::ParallelExecutionBlockConfiguration).
    pub fn builder() -> crate::types::builders::ParallelExecutionBlockConfigurationBuilder {
        crate::types::builders::ParallelExecutionBlockConfigurationBuilder::default()
    }
}

/// A builder for [`ParallelExecutionBlockConfiguration`](crate::types::ParallelExecutionBlockConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ParallelExecutionBlockConfigurationBuilder {
    pub(crate) steps: ::std::option::Option<::std::vec::Vec<crate::types::Step>>,
}
impl ParallelExecutionBlockConfigurationBuilder {
    /// Appends an item to `steps`.
    ///
    /// To override the contents of this collection use [`set_steps`](Self::set_steps).
    ///
    /// <p>The steps for a parallel execution block.</p>
    pub fn steps(mut self, input: crate::types::Step) -> Self {
        let mut v = self.steps.unwrap_or_default();
        v.push(input);
        self.steps = ::std::option::Option::Some(v);
        self
    }
    /// <p>The steps for a parallel execution block.</p>
    pub fn set_steps(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Step>>) -> Self {
        self.steps = input;
        self
    }
    /// <p>The steps for a parallel execution block.</p>
    pub fn get_steps(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Step>> {
        &self.steps
    }
    /// Consumes the builder and constructs a [`ParallelExecutionBlockConfiguration`](crate::types::ParallelExecutionBlockConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`steps`](crate::types::builders::ParallelExecutionBlockConfigurationBuilder::steps)
    pub fn build(self) -> ::std::result::Result<crate::types::ParallelExecutionBlockConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ParallelExecutionBlockConfiguration {
            steps: self.steps.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "steps",
                    "steps was not specified but it is required when building ParallelExecutionBlockConfiguration",
                )
            })?,
        })
    }
}
