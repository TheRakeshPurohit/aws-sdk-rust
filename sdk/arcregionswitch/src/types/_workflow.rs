// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a workflow in a Region switch plan. A workflow defines a sequence of steps to execute during a Region switch.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Workflow {
    /// <p>The steps that make up the workflow.</p>
    pub steps: ::std::option::Option<::std::vec::Vec<crate::types::Step>>,
    /// <p>The action that the workflow performs. Valid values include ACTIVATE and DEACTIVATE.</p>
    pub workflow_target_action: crate::types::WorkflowTargetAction,
    /// <p>The Amazon Web Services Region that the workflow targets.</p>
    pub workflow_target_region: ::std::option::Option<::std::string::String>,
    /// <p>The description of the workflow.</p>
    pub workflow_description: ::std::option::Option<::std::string::String>,
}
impl Workflow {
    /// <p>The steps that make up the workflow.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.steps.is_none()`.
    pub fn steps(&self) -> &[crate::types::Step] {
        self.steps.as_deref().unwrap_or_default()
    }
    /// <p>The action that the workflow performs. Valid values include ACTIVATE and DEACTIVATE.</p>
    pub fn workflow_target_action(&self) -> &crate::types::WorkflowTargetAction {
        &self.workflow_target_action
    }
    /// <p>The Amazon Web Services Region that the workflow targets.</p>
    pub fn workflow_target_region(&self) -> ::std::option::Option<&str> {
        self.workflow_target_region.as_deref()
    }
    /// <p>The description of the workflow.</p>
    pub fn workflow_description(&self) -> ::std::option::Option<&str> {
        self.workflow_description.as_deref()
    }
}
impl Workflow {
    /// Creates a new builder-style object to manufacture [`Workflow`](crate::types::Workflow).
    pub fn builder() -> crate::types::builders::WorkflowBuilder {
        crate::types::builders::WorkflowBuilder::default()
    }
}

/// A builder for [`Workflow`](crate::types::Workflow).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct WorkflowBuilder {
    pub(crate) steps: ::std::option::Option<::std::vec::Vec<crate::types::Step>>,
    pub(crate) workflow_target_action: ::std::option::Option<crate::types::WorkflowTargetAction>,
    pub(crate) workflow_target_region: ::std::option::Option<::std::string::String>,
    pub(crate) workflow_description: ::std::option::Option<::std::string::String>,
}
impl WorkflowBuilder {
    /// Appends an item to `steps`.
    ///
    /// To override the contents of this collection use [`set_steps`](Self::set_steps).
    ///
    /// <p>The steps that make up the workflow.</p>
    pub fn steps(mut self, input: crate::types::Step) -> Self {
        let mut v = self.steps.unwrap_or_default();
        v.push(input);
        self.steps = ::std::option::Option::Some(v);
        self
    }
    /// <p>The steps that make up the workflow.</p>
    pub fn set_steps(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Step>>) -> Self {
        self.steps = input;
        self
    }
    /// <p>The steps that make up the workflow.</p>
    pub fn get_steps(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Step>> {
        &self.steps
    }
    /// <p>The action that the workflow performs. Valid values include ACTIVATE and DEACTIVATE.</p>
    /// This field is required.
    pub fn workflow_target_action(mut self, input: crate::types::WorkflowTargetAction) -> Self {
        self.workflow_target_action = ::std::option::Option::Some(input);
        self
    }
    /// <p>The action that the workflow performs. Valid values include ACTIVATE and DEACTIVATE.</p>
    pub fn set_workflow_target_action(mut self, input: ::std::option::Option<crate::types::WorkflowTargetAction>) -> Self {
        self.workflow_target_action = input;
        self
    }
    /// <p>The action that the workflow performs. Valid values include ACTIVATE and DEACTIVATE.</p>
    pub fn get_workflow_target_action(&self) -> &::std::option::Option<crate::types::WorkflowTargetAction> {
        &self.workflow_target_action
    }
    /// <p>The Amazon Web Services Region that the workflow targets.</p>
    pub fn workflow_target_region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.workflow_target_region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services Region that the workflow targets.</p>
    pub fn set_workflow_target_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.workflow_target_region = input;
        self
    }
    /// <p>The Amazon Web Services Region that the workflow targets.</p>
    pub fn get_workflow_target_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.workflow_target_region
    }
    /// <p>The description of the workflow.</p>
    pub fn workflow_description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.workflow_description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the workflow.</p>
    pub fn set_workflow_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.workflow_description = input;
        self
    }
    /// <p>The description of the workflow.</p>
    pub fn get_workflow_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.workflow_description
    }
    /// Consumes the builder and constructs a [`Workflow`](crate::types::Workflow).
    /// This method will fail if any of the following fields are not set:
    /// - [`workflow_target_action`](crate::types::builders::WorkflowBuilder::workflow_target_action)
    pub fn build(self) -> ::std::result::Result<crate::types::Workflow, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::Workflow {
            steps: self.steps,
            workflow_target_action: self.workflow_target_action.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "workflow_target_action",
                    "workflow_target_action was not specified but it is required when building Workflow",
                )
            })?,
            workflow_target_region: self.workflow_target_region,
            workflow_description: self.workflow_description,
        })
    }
}
