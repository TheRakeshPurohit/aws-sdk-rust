// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A simplified representation of a workflow in a Region switch plan.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MinimalWorkflow {
    /// <p>The action for a minimal workflow, which can be Activate or Deactivate.</p>
    pub action: ::std::option::Option<crate::types::ExecutionAction>,
    /// <p>The name for a minimal workflow</p>
    pub name: ::std::option::Option<::std::string::String>,
}
impl MinimalWorkflow {
    /// <p>The action for a minimal workflow, which can be Activate or Deactivate.</p>
    pub fn action(&self) -> ::std::option::Option<&crate::types::ExecutionAction> {
        self.action.as_ref()
    }
    /// <p>The name for a minimal workflow</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
}
impl MinimalWorkflow {
    /// Creates a new builder-style object to manufacture [`MinimalWorkflow`](crate::types::MinimalWorkflow).
    pub fn builder() -> crate::types::builders::MinimalWorkflowBuilder {
        crate::types::builders::MinimalWorkflowBuilder::default()
    }
}

/// A builder for [`MinimalWorkflow`](crate::types::MinimalWorkflow).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct MinimalWorkflowBuilder {
    pub(crate) action: ::std::option::Option<crate::types::ExecutionAction>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
}
impl MinimalWorkflowBuilder {
    /// <p>The action for a minimal workflow, which can be Activate or Deactivate.</p>
    pub fn action(mut self, input: crate::types::ExecutionAction) -> Self {
        self.action = ::std::option::Option::Some(input);
        self
    }
    /// <p>The action for a minimal workflow, which can be Activate or Deactivate.</p>
    pub fn set_action(mut self, input: ::std::option::Option<crate::types::ExecutionAction>) -> Self {
        self.action = input;
        self
    }
    /// <p>The action for a minimal workflow, which can be Activate or Deactivate.</p>
    pub fn get_action(&self) -> &::std::option::Option<crate::types::ExecutionAction> {
        &self.action
    }
    /// <p>The name for a minimal workflow</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name for a minimal workflow</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name for a minimal workflow</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// Consumes the builder and constructs a [`MinimalWorkflow`](crate::types::MinimalWorkflow).
    pub fn build(self) -> crate::types::MinimalWorkflow {
        crate::types::MinimalWorkflow {
            action: self.action,
            name: self.name,
        }
    }
}
