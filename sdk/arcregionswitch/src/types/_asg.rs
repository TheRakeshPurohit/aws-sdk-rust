// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration for an Amazon EC2 Auto Scaling group used in a Region switch plan.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Asg {
    /// <p>The cross account role for the configuration.</p>
    pub cross_account_role: ::std::option::Option<::std::string::String>,
    /// <p>The external ID (secret key) for the configuration.</p>
    pub external_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the EC2 Auto Scaling group.</p>
    pub arn: ::std::option::Option<::std::string::String>,
}
impl Asg {
    /// <p>The cross account role for the configuration.</p>
    pub fn cross_account_role(&self) -> ::std::option::Option<&str> {
        self.cross_account_role.as_deref()
    }
    /// <p>The external ID (secret key) for the configuration.</p>
    pub fn external_id(&self) -> ::std::option::Option<&str> {
        self.external_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the EC2 Auto Scaling group.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
}
impl Asg {
    /// Creates a new builder-style object to manufacture [`Asg`](crate::types::Asg).
    pub fn builder() -> crate::types::builders::AsgBuilder {
        crate::types::builders::AsgBuilder::default()
    }
}

/// A builder for [`Asg`](crate::types::Asg).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AsgBuilder {
    pub(crate) cross_account_role: ::std::option::Option<::std::string::String>,
    pub(crate) external_id: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
}
impl AsgBuilder {
    /// <p>The cross account role for the configuration.</p>
    pub fn cross_account_role(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cross_account_role = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The cross account role for the configuration.</p>
    pub fn set_cross_account_role(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cross_account_role = input;
        self
    }
    /// <p>The cross account role for the configuration.</p>
    pub fn get_cross_account_role(&self) -> &::std::option::Option<::std::string::String> {
        &self.cross_account_role
    }
    /// <p>The external ID (secret key) for the configuration.</p>
    pub fn external_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.external_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The external ID (secret key) for the configuration.</p>
    pub fn set_external_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.external_id = input;
        self
    }
    /// <p>The external ID (secret key) for the configuration.</p>
    pub fn get_external_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.external_id
    }
    /// <p>The Amazon Resource Name (ARN) of the EC2 Auto Scaling group.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the EC2 Auto Scaling group.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the EC2 Auto Scaling group.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// Consumes the builder and constructs a [`Asg`](crate::types::Asg).
    pub fn build(self) -> crate::types::Asg {
        crate::types::Asg {
            cross_account_role: self.cross_account_role,
            external_id: self.external_id,
            arn: self.arn,
        }
    }
}
