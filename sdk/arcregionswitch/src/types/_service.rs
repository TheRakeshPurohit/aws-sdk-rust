// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The service for a cross account role.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Service {
    /// <p>The cross account role for a service.</p>
    pub cross_account_role: ::std::option::Option<::std::string::String>,
    /// <p>The external ID (secret key) for the service.</p>
    pub external_id: ::std::option::Option<::std::string::String>,
    /// <p>The cluster Amazon Resource Name (ARN) for a service.</p>
    pub cluster_arn: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) for a service.</p>
    pub service_arn: ::std::option::Option<::std::string::String>,
}
impl Service {
    /// <p>The cross account role for a service.</p>
    pub fn cross_account_role(&self) -> ::std::option::Option<&str> {
        self.cross_account_role.as_deref()
    }
    /// <p>The external ID (secret key) for the service.</p>
    pub fn external_id(&self) -> ::std::option::Option<&str> {
        self.external_id.as_deref()
    }
    /// <p>The cluster Amazon Resource Name (ARN) for a service.</p>
    pub fn cluster_arn(&self) -> ::std::option::Option<&str> {
        self.cluster_arn.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) for a service.</p>
    pub fn service_arn(&self) -> ::std::option::Option<&str> {
        self.service_arn.as_deref()
    }
}
impl Service {
    /// Creates a new builder-style object to manufacture [`Service`](crate::types::Service).
    pub fn builder() -> crate::types::builders::ServiceBuilder {
        crate::types::builders::ServiceBuilder::default()
    }
}

/// A builder for [`Service`](crate::types::Service).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ServiceBuilder {
    pub(crate) cross_account_role: ::std::option::Option<::std::string::String>,
    pub(crate) external_id: ::std::option::Option<::std::string::String>,
    pub(crate) cluster_arn: ::std::option::Option<::std::string::String>,
    pub(crate) service_arn: ::std::option::Option<::std::string::String>,
}
impl ServiceBuilder {
    /// <p>The cross account role for a service.</p>
    pub fn cross_account_role(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cross_account_role = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The cross account role for a service.</p>
    pub fn set_cross_account_role(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cross_account_role = input;
        self
    }
    /// <p>The cross account role for a service.</p>
    pub fn get_cross_account_role(&self) -> &::std::option::Option<::std::string::String> {
        &self.cross_account_role
    }
    /// <p>The external ID (secret key) for the service.</p>
    pub fn external_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.external_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The external ID (secret key) for the service.</p>
    pub fn set_external_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.external_id = input;
        self
    }
    /// <p>The external ID (secret key) for the service.</p>
    pub fn get_external_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.external_id
    }
    /// <p>The cluster Amazon Resource Name (ARN) for a service.</p>
    pub fn cluster_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cluster_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The cluster Amazon Resource Name (ARN) for a service.</p>
    pub fn set_cluster_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cluster_arn = input;
        self
    }
    /// <p>The cluster Amazon Resource Name (ARN) for a service.</p>
    pub fn get_cluster_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.cluster_arn
    }
    /// <p>The Amazon Resource Name (ARN) for a service.</p>
    pub fn service_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.service_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) for a service.</p>
    pub fn set_service_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.service_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) for a service.</p>
    pub fn get_service_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.service_arn
    }
    /// Consumes the builder and constructs a [`Service`](crate::types::Service).
    pub fn build(self) -> crate::types::Service {
        crate::types::Service {
            cross_account_role: self.cross_account_role,
            external_id: self.external_id,
            cluster_arn: self.cluster_arn,
            service_arn: self.service_arn,
        }
    }
}
