// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An Amazon CloudWatch alarm associated with a Region switch plan. These alarms can be used to trigger automatic execution of the plan.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AssociatedAlarm {
    /// <p>The cross account role for the configuration.</p>
    pub cross_account_role: ::std::option::Option<::std::string::String>,
    /// <p>The external ID (secret key) for the configuration.</p>
    pub external_id: ::std::option::Option<::std::string::String>,
    /// <p>The resource identifier for alarms that you associate with a plan.</p>
    pub resource_identifier: ::std::string::String,
    /// <p>The alarm type for an associated alarm. An associated CloudWatch alarm can be an application health alarm or a trigger alarm.</p>
    pub alarm_type: crate::types::AlarmType,
}
impl AssociatedAlarm {
    /// <p>The cross account role for the configuration.</p>
    pub fn cross_account_role(&self) -> ::std::option::Option<&str> {
        self.cross_account_role.as_deref()
    }
    /// <p>The external ID (secret key) for the configuration.</p>
    pub fn external_id(&self) -> ::std::option::Option<&str> {
        self.external_id.as_deref()
    }
    /// <p>The resource identifier for alarms that you associate with a plan.</p>
    pub fn resource_identifier(&self) -> &str {
        use std::ops::Deref;
        self.resource_identifier.deref()
    }
    /// <p>The alarm type for an associated alarm. An associated CloudWatch alarm can be an application health alarm or a trigger alarm.</p>
    pub fn alarm_type(&self) -> &crate::types::AlarmType {
        &self.alarm_type
    }
}
impl AssociatedAlarm {
    /// Creates a new builder-style object to manufacture [`AssociatedAlarm`](crate::types::AssociatedAlarm).
    pub fn builder() -> crate::types::builders::AssociatedAlarmBuilder {
        crate::types::builders::AssociatedAlarmBuilder::default()
    }
}

/// A builder for [`AssociatedAlarm`](crate::types::AssociatedAlarm).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AssociatedAlarmBuilder {
    pub(crate) cross_account_role: ::std::option::Option<::std::string::String>,
    pub(crate) external_id: ::std::option::Option<::std::string::String>,
    pub(crate) resource_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) alarm_type: ::std::option::Option<crate::types::AlarmType>,
}
impl AssociatedAlarmBuilder {
    /// <p>The cross account role for the configuration.</p>
    pub fn cross_account_role(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cross_account_role = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The cross account role for the configuration.</p>
    pub fn set_cross_account_role(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cross_account_role = input;
        self
    }
    /// <p>The cross account role for the configuration.</p>
    pub fn get_cross_account_role(&self) -> &::std::option::Option<::std::string::String> {
        &self.cross_account_role
    }
    /// <p>The external ID (secret key) for the configuration.</p>
    pub fn external_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.external_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The external ID (secret key) for the configuration.</p>
    pub fn set_external_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.external_id = input;
        self
    }
    /// <p>The external ID (secret key) for the configuration.</p>
    pub fn get_external_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.external_id
    }
    /// <p>The resource identifier for alarms that you associate with a plan.</p>
    /// This field is required.
    pub fn resource_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The resource identifier for alarms that you associate with a plan.</p>
    pub fn set_resource_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_identifier = input;
        self
    }
    /// <p>The resource identifier for alarms that you associate with a plan.</p>
    pub fn get_resource_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_identifier
    }
    /// <p>The alarm type for an associated alarm. An associated CloudWatch alarm can be an application health alarm or a trigger alarm.</p>
    /// This field is required.
    pub fn alarm_type(mut self, input: crate::types::AlarmType) -> Self {
        self.alarm_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The alarm type for an associated alarm. An associated CloudWatch alarm can be an application health alarm or a trigger alarm.</p>
    pub fn set_alarm_type(mut self, input: ::std::option::Option<crate::types::AlarmType>) -> Self {
        self.alarm_type = input;
        self
    }
    /// <p>The alarm type for an associated alarm. An associated CloudWatch alarm can be an application health alarm or a trigger alarm.</p>
    pub fn get_alarm_type(&self) -> &::std::option::Option<crate::types::AlarmType> {
        &self.alarm_type
    }
    /// Consumes the builder and constructs a [`AssociatedAlarm`](crate::types::AssociatedAlarm).
    /// This method will fail if any of the following fields are not set:
    /// - [`resource_identifier`](crate::types::builders::AssociatedAlarmBuilder::resource_identifier)
    /// - [`alarm_type`](crate::types::builders::AssociatedAlarmBuilder::alarm_type)
    pub fn build(self) -> ::std::result::Result<crate::types::AssociatedAlarm, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AssociatedAlarm {
            cross_account_role: self.cross_account_role,
            external_id: self.external_id,
            resource_identifier: self.resource_identifier.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "resource_identifier",
                    "resource_identifier was not specified but it is required when building AssociatedAlarm",
                )
            })?,
            alarm_type: self.alarm_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "alarm_type",
                    "alarm_type was not specified but it is required when building AssociatedAlarm",
                )
            })?,
        })
    }
}
