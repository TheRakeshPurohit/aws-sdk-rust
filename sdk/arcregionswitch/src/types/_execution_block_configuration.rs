// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Execution block configurations for a workflow in a Region switch plan. An execution block represents a specific type of action to perform during a Region switch.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum ExecutionBlockConfiguration {
    /// <p>An ARC routing control execution block.</p>
    ArcRoutingControlConfig(crate::types::ArcRoutingControlConfiguration),
    /// <p>An Amazon Web Services Lambda execution block.</p>
    CustomActionLambdaConfig(crate::types::CustomActionLambdaConfiguration),
    /// <p>An EC2 Auto Scaling group execution block.</p>
    Ec2AsgCapacityIncreaseConfig(crate::types::Ec2AsgCapacityIncreaseConfiguration),
    /// <p>The capacity increase specified for the configuration.</p>
    EcsCapacityIncreaseConfig(crate::types::EcsCapacityIncreaseConfiguration),
    /// <p>An Amazon Web Services EKS resource scaling execution block.</p>
    EksResourceScalingConfig(crate::types::EksResourceScalingConfiguration),
    /// <p>A manual approval execution block.</p>
    ExecutionApprovalConfig(crate::types::ExecutionApprovalConfiguration),
    /// <p>An Aurora Global Database execution block.</p>
    GlobalAuroraConfig(crate::types::GlobalAuroraConfiguration),
    /// <p>A parallel configuration execution block.</p>
    ParallelConfig(crate::types::ParallelExecutionBlockConfiguration),
    /// <p>A Region switch plan execution block.</p>
    RegionSwitchPlanConfig(crate::types::RegionSwitchPlanConfiguration),
    /// <p>The Amazon Route 53 health check configuration.</p>
    Route53HealthCheckConfig(crate::types::Route53HealthCheckConfiguration),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl ExecutionBlockConfiguration {
    /// Tries to convert the enum instance into [`ArcRoutingControlConfig`](crate::types::ExecutionBlockConfiguration::ArcRoutingControlConfig), extracting the inner [`ArcRoutingControlConfiguration`](crate::types::ArcRoutingControlConfiguration).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_arc_routing_control_config(&self) -> ::std::result::Result<&crate::types::ArcRoutingControlConfiguration, &Self> {
        if let ExecutionBlockConfiguration::ArcRoutingControlConfig(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`ArcRoutingControlConfig`](crate::types::ExecutionBlockConfiguration::ArcRoutingControlConfig).
    pub fn is_arc_routing_control_config(&self) -> bool {
        self.as_arc_routing_control_config().is_ok()
    }
    /// Tries to convert the enum instance into [`CustomActionLambdaConfig`](crate::types::ExecutionBlockConfiguration::CustomActionLambdaConfig), extracting the inner [`CustomActionLambdaConfiguration`](crate::types::CustomActionLambdaConfiguration).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_custom_action_lambda_config(&self) -> ::std::result::Result<&crate::types::CustomActionLambdaConfiguration, &Self> {
        if let ExecutionBlockConfiguration::CustomActionLambdaConfig(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`CustomActionLambdaConfig`](crate::types::ExecutionBlockConfiguration::CustomActionLambdaConfig).
    pub fn is_custom_action_lambda_config(&self) -> bool {
        self.as_custom_action_lambda_config().is_ok()
    }
    /// Tries to convert the enum instance into [`Ec2AsgCapacityIncreaseConfig`](crate::types::ExecutionBlockConfiguration::Ec2AsgCapacityIncreaseConfig), extracting the inner [`Ec2AsgCapacityIncreaseConfiguration`](crate::types::Ec2AsgCapacityIncreaseConfiguration).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_ec2_asg_capacity_increase_config(&self) -> ::std::result::Result<&crate::types::Ec2AsgCapacityIncreaseConfiguration, &Self> {
        if let ExecutionBlockConfiguration::Ec2AsgCapacityIncreaseConfig(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Ec2AsgCapacityIncreaseConfig`](crate::types::ExecutionBlockConfiguration::Ec2AsgCapacityIncreaseConfig).
    pub fn is_ec2_asg_capacity_increase_config(&self) -> bool {
        self.as_ec2_asg_capacity_increase_config().is_ok()
    }
    /// Tries to convert the enum instance into [`EcsCapacityIncreaseConfig`](crate::types::ExecutionBlockConfiguration::EcsCapacityIncreaseConfig), extracting the inner [`EcsCapacityIncreaseConfiguration`](crate::types::EcsCapacityIncreaseConfiguration).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_ecs_capacity_increase_config(&self) -> ::std::result::Result<&crate::types::EcsCapacityIncreaseConfiguration, &Self> {
        if let ExecutionBlockConfiguration::EcsCapacityIncreaseConfig(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`EcsCapacityIncreaseConfig`](crate::types::ExecutionBlockConfiguration::EcsCapacityIncreaseConfig).
    pub fn is_ecs_capacity_increase_config(&self) -> bool {
        self.as_ecs_capacity_increase_config().is_ok()
    }
    /// Tries to convert the enum instance into [`EksResourceScalingConfig`](crate::types::ExecutionBlockConfiguration::EksResourceScalingConfig), extracting the inner [`EksResourceScalingConfiguration`](crate::types::EksResourceScalingConfiguration).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_eks_resource_scaling_config(&self) -> ::std::result::Result<&crate::types::EksResourceScalingConfiguration, &Self> {
        if let ExecutionBlockConfiguration::EksResourceScalingConfig(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`EksResourceScalingConfig`](crate::types::ExecutionBlockConfiguration::EksResourceScalingConfig).
    pub fn is_eks_resource_scaling_config(&self) -> bool {
        self.as_eks_resource_scaling_config().is_ok()
    }
    /// Tries to convert the enum instance into [`ExecutionApprovalConfig`](crate::types::ExecutionBlockConfiguration::ExecutionApprovalConfig), extracting the inner [`ExecutionApprovalConfiguration`](crate::types::ExecutionApprovalConfiguration).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_execution_approval_config(&self) -> ::std::result::Result<&crate::types::ExecutionApprovalConfiguration, &Self> {
        if let ExecutionBlockConfiguration::ExecutionApprovalConfig(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`ExecutionApprovalConfig`](crate::types::ExecutionBlockConfiguration::ExecutionApprovalConfig).
    pub fn is_execution_approval_config(&self) -> bool {
        self.as_execution_approval_config().is_ok()
    }
    /// Tries to convert the enum instance into [`GlobalAuroraConfig`](crate::types::ExecutionBlockConfiguration::GlobalAuroraConfig), extracting the inner [`GlobalAuroraConfiguration`](crate::types::GlobalAuroraConfiguration).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_global_aurora_config(&self) -> ::std::result::Result<&crate::types::GlobalAuroraConfiguration, &Self> {
        if let ExecutionBlockConfiguration::GlobalAuroraConfig(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`GlobalAuroraConfig`](crate::types::ExecutionBlockConfiguration::GlobalAuroraConfig).
    pub fn is_global_aurora_config(&self) -> bool {
        self.as_global_aurora_config().is_ok()
    }
    /// Tries to convert the enum instance into [`ParallelConfig`](crate::types::ExecutionBlockConfiguration::ParallelConfig), extracting the inner [`ParallelExecutionBlockConfiguration`](crate::types::ParallelExecutionBlockConfiguration).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_parallel_config(&self) -> ::std::result::Result<&crate::types::ParallelExecutionBlockConfiguration, &Self> {
        if let ExecutionBlockConfiguration::ParallelConfig(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`ParallelConfig`](crate::types::ExecutionBlockConfiguration::ParallelConfig).
    pub fn is_parallel_config(&self) -> bool {
        self.as_parallel_config().is_ok()
    }
    /// Tries to convert the enum instance into [`RegionSwitchPlanConfig`](crate::types::ExecutionBlockConfiguration::RegionSwitchPlanConfig), extracting the inner [`RegionSwitchPlanConfiguration`](crate::types::RegionSwitchPlanConfiguration).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_region_switch_plan_config(&self) -> ::std::result::Result<&crate::types::RegionSwitchPlanConfiguration, &Self> {
        if let ExecutionBlockConfiguration::RegionSwitchPlanConfig(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`RegionSwitchPlanConfig`](crate::types::ExecutionBlockConfiguration::RegionSwitchPlanConfig).
    pub fn is_region_switch_plan_config(&self) -> bool {
        self.as_region_switch_plan_config().is_ok()
    }
    /// Tries to convert the enum instance into [`Route53HealthCheckConfig`](crate::types::ExecutionBlockConfiguration::Route53HealthCheckConfig), extracting the inner [`Route53HealthCheckConfiguration`](crate::types::Route53HealthCheckConfiguration).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_route53_health_check_config(&self) -> ::std::result::Result<&crate::types::Route53HealthCheckConfiguration, &Self> {
        if let ExecutionBlockConfiguration::Route53HealthCheckConfig(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Route53HealthCheckConfig`](crate::types::ExecutionBlockConfiguration::Route53HealthCheckConfig).
    pub fn is_route53_health_check_config(&self) -> bool {
        self.as_route53_health_check_config().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
