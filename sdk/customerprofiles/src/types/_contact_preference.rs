// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Object that defines users contact preference.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ContactPreference {
    /// <p>A searchable, unique identifier of a customer profile.</p>
    pub key_name: ::std::option::Option<::std::string::String>,
    /// <p>The key value used to look up profile based off the keyName.</p>
    pub key_value: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of a customer profile.</p>
    pub profile_id: ::std::option::Option<::std::string::String>,
    /// <p>The contact type used for engagement. For example: HomePhoneNumber, PersonalEmailAddress.</p>
    pub contact_type: ::std::option::Option<crate::types::ContactType>,
}
impl ContactPreference {
    /// <p>A searchable, unique identifier of a customer profile.</p>
    pub fn key_name(&self) -> ::std::option::Option<&str> {
        self.key_name.as_deref()
    }
    /// <p>The key value used to look up profile based off the keyName.</p>
    pub fn key_value(&self) -> ::std::option::Option<&str> {
        self.key_value.as_deref()
    }
    /// <p>The unique identifier of a customer profile.</p>
    pub fn profile_id(&self) -> ::std::option::Option<&str> {
        self.profile_id.as_deref()
    }
    /// <p>The contact type used for engagement. For example: HomePhoneNumber, PersonalEmailAddress.</p>
    pub fn contact_type(&self) -> ::std::option::Option<&crate::types::ContactType> {
        self.contact_type.as_ref()
    }
}
impl ContactPreference {
    /// Creates a new builder-style object to manufacture [`ContactPreference`](crate::types::ContactPreference).
    pub fn builder() -> crate::types::builders::ContactPreferenceBuilder {
        crate::types::builders::ContactPreferenceBuilder::default()
    }
}

/// A builder for [`ContactPreference`](crate::types::ContactPreference).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ContactPreferenceBuilder {
    pub(crate) key_name: ::std::option::Option<::std::string::String>,
    pub(crate) key_value: ::std::option::Option<::std::string::String>,
    pub(crate) profile_id: ::std::option::Option<::std::string::String>,
    pub(crate) contact_type: ::std::option::Option<crate::types::ContactType>,
}
impl ContactPreferenceBuilder {
    /// <p>A searchable, unique identifier of a customer profile.</p>
    pub fn key_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.key_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A searchable, unique identifier of a customer profile.</p>
    pub fn set_key_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.key_name = input;
        self
    }
    /// <p>A searchable, unique identifier of a customer profile.</p>
    pub fn get_key_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.key_name
    }
    /// <p>The key value used to look up profile based off the keyName.</p>
    pub fn key_value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.key_value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The key value used to look up profile based off the keyName.</p>
    pub fn set_key_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.key_value = input;
        self
    }
    /// <p>The key value used to look up profile based off the keyName.</p>
    pub fn get_key_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.key_value
    }
    /// <p>The unique identifier of a customer profile.</p>
    pub fn profile_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.profile_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of a customer profile.</p>
    pub fn set_profile_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.profile_id = input;
        self
    }
    /// <p>The unique identifier of a customer profile.</p>
    pub fn get_profile_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.profile_id
    }
    /// <p>The contact type used for engagement. For example: HomePhoneNumber, PersonalEmailAddress.</p>
    pub fn contact_type(mut self, input: crate::types::ContactType) -> Self {
        self.contact_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The contact type used for engagement. For example: HomePhoneNumber, PersonalEmailAddress.</p>
    pub fn set_contact_type(mut self, input: ::std::option::Option<crate::types::ContactType>) -> Self {
        self.contact_type = input;
        self
    }
    /// <p>The contact type used for engagement. For example: HomePhoneNumber, PersonalEmailAddress.</p>
    pub fn get_contact_type(&self) -> &::std::option::Option<crate::types::ContactType> {
        &self.contact_type
    }
    /// Consumes the builder and constructs a [`ContactPreference`](crate::types::ContactPreference).
    pub fn build(self) -> crate::types::ContactPreference {
        crate::types::ContactPreference {
            key_name: self.key_name,
            key_value: self.key_value,
            profile_id: self.profile_id,
            contact_type: self.contact_type,
        }
    }
}
