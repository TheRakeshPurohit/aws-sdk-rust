// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Object that defines users preferred methods of engagement.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct EngagementPreferences {
    /// <p>A list of phone-related contact preferences</p>
    pub phone: ::std::option::Option<::std::vec::Vec<crate::types::ContactPreference>>,
    /// <p>A list of email-related contact preferences</p>
    pub email: ::std::option::Option<::std::vec::Vec<crate::types::ContactPreference>>,
}
impl EngagementPreferences {
    /// <p>A list of phone-related contact preferences</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.phone.is_none()`.
    pub fn phone(&self) -> &[crate::types::ContactPreference] {
        self.phone.as_deref().unwrap_or_default()
    }
    /// <p>A list of email-related contact preferences</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.email.is_none()`.
    pub fn email(&self) -> &[crate::types::ContactPreference] {
        self.email.as_deref().unwrap_or_default()
    }
}
impl ::std::fmt::Debug for EngagementPreferences {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("EngagementPreferences");
        formatter.field("phone", &"*** Sensitive Data Redacted ***");
        formatter.field("email", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl EngagementPreferences {
    /// Creates a new builder-style object to manufacture [`EngagementPreferences`](crate::types::EngagementPreferences).
    pub fn builder() -> crate::types::builders::EngagementPreferencesBuilder {
        crate::types::builders::EngagementPreferencesBuilder::default()
    }
}

/// A builder for [`EngagementPreferences`](crate::types::EngagementPreferences).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct EngagementPreferencesBuilder {
    pub(crate) phone: ::std::option::Option<::std::vec::Vec<crate::types::ContactPreference>>,
    pub(crate) email: ::std::option::Option<::std::vec::Vec<crate::types::ContactPreference>>,
}
impl EngagementPreferencesBuilder {
    /// Appends an item to `phone`.
    ///
    /// To override the contents of this collection use [`set_phone`](Self::set_phone).
    ///
    /// <p>A list of phone-related contact preferences</p>
    pub fn phone(mut self, input: crate::types::ContactPreference) -> Self {
        let mut v = self.phone.unwrap_or_default();
        v.push(input);
        self.phone = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of phone-related contact preferences</p>
    pub fn set_phone(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ContactPreference>>) -> Self {
        self.phone = input;
        self
    }
    /// <p>A list of phone-related contact preferences</p>
    pub fn get_phone(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ContactPreference>> {
        &self.phone
    }
    /// Appends an item to `email`.
    ///
    /// To override the contents of this collection use [`set_email`](Self::set_email).
    ///
    /// <p>A list of email-related contact preferences</p>
    pub fn email(mut self, input: crate::types::ContactPreference) -> Self {
        let mut v = self.email.unwrap_or_default();
        v.push(input);
        self.email = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of email-related contact preferences</p>
    pub fn set_email(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ContactPreference>>) -> Self {
        self.email = input;
        self
    }
    /// <p>A list of email-related contact preferences</p>
    pub fn get_email(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ContactPreference>> {
        &self.email
    }
    /// Consumes the builder and constructs a [`EngagementPreferences`](crate::types::EngagementPreferences).
    pub fn build(self) -> crate::types::EngagementPreferences {
        crate::types::EngagementPreferences {
            phone: self.phone,
            email: self.email,
        }
    }
}
impl ::std::fmt::Debug for EngagementPreferencesBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("EngagementPreferencesBuilder");
        formatter.field("phone", &"*** Sensitive Data Redacted ***");
        formatter.field("email", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
