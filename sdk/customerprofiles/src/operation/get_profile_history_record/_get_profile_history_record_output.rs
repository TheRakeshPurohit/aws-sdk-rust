// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GetProfileHistoryRecordOutput {
    /// <p>The unique identifier of the profile history record.</p>
    pub id: ::std::string::String,
    /// <p>The name of the profile object type.</p>
    pub object_type_name: ::std::string::String,
    /// <p>The timestamp of when the profile history record was created.</p>
    pub created_at: ::aws_smithy_types::DateTime,
    /// <p>The timestamp of when the profile history record was last updated.</p>
    pub last_updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The action type of the profile history record.</p>
    pub action_type: crate::types::ActionType,
    /// <p>The unique identifier of the profile object generated by the service.</p>
    pub profile_object_unique_key: ::std::option::Option<::std::string::String>,
    /// <p>A string containing the customer profile, profile object, or profile key content.</p>
    pub content: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the person or service principal who performed the action.</p>
    pub performed_by: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetProfileHistoryRecordOutput {
    /// <p>The unique identifier of the profile history record.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>The name of the profile object type.</p>
    pub fn object_type_name(&self) -> &str {
        use std::ops::Deref;
        self.object_type_name.deref()
    }
    /// <p>The timestamp of when the profile history record was created.</p>
    pub fn created_at(&self) -> &::aws_smithy_types::DateTime {
        &self.created_at
    }
    /// <p>The timestamp of when the profile history record was last updated.</p>
    pub fn last_updated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_updated_at.as_ref()
    }
    /// <p>The action type of the profile history record.</p>
    pub fn action_type(&self) -> &crate::types::ActionType {
        &self.action_type
    }
    /// <p>The unique identifier of the profile object generated by the service.</p>
    pub fn profile_object_unique_key(&self) -> ::std::option::Option<&str> {
        self.profile_object_unique_key.as_deref()
    }
    /// <p>A string containing the customer profile, profile object, or profile key content.</p>
    pub fn content(&self) -> ::std::option::Option<&str> {
        self.content.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the person or service principal who performed the action.</p>
    pub fn performed_by(&self) -> ::std::option::Option<&str> {
        self.performed_by.as_deref()
    }
}
impl ::std::fmt::Debug for GetProfileHistoryRecordOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetProfileHistoryRecordOutput");
        formatter.field("id", &self.id);
        formatter.field("object_type_name", &self.object_type_name);
        formatter.field("created_at", &self.created_at);
        formatter.field("last_updated_at", &self.last_updated_at);
        formatter.field("action_type", &self.action_type);
        formatter.field("profile_object_unique_key", &self.profile_object_unique_key);
        formatter.field("content", &"*** Sensitive Data Redacted ***");
        formatter.field("performed_by", &self.performed_by);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_types::request_id::RequestId for GetProfileHistoryRecordOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetProfileHistoryRecordOutput {
    /// Creates a new builder-style object to manufacture [`GetProfileHistoryRecordOutput`](crate::operation::get_profile_history_record::GetProfileHistoryRecordOutput).
    pub fn builder() -> crate::operation::get_profile_history_record::builders::GetProfileHistoryRecordOutputBuilder {
        crate::operation::get_profile_history_record::builders::GetProfileHistoryRecordOutputBuilder::default()
    }
}

/// A builder for [`GetProfileHistoryRecordOutput`](crate::operation::get_profile_history_record::GetProfileHistoryRecordOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct GetProfileHistoryRecordOutputBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) object_type_name: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) action_type: ::std::option::Option<crate::types::ActionType>,
    pub(crate) profile_object_unique_key: ::std::option::Option<::std::string::String>,
    pub(crate) content: ::std::option::Option<::std::string::String>,
    pub(crate) performed_by: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetProfileHistoryRecordOutputBuilder {
    /// <p>The unique identifier of the profile history record.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the profile history record.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The unique identifier of the profile history record.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The name of the profile object type.</p>
    /// This field is required.
    pub fn object_type_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.object_type_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the profile object type.</p>
    pub fn set_object_type_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.object_type_name = input;
        self
    }
    /// <p>The name of the profile object type.</p>
    pub fn get_object_type_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.object_type_name
    }
    /// <p>The timestamp of when the profile history record was created.</p>
    /// This field is required.
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of when the profile history record was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The timestamp of when the profile history record was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The timestamp of when the profile history record was last updated.</p>
    pub fn last_updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of when the profile history record was last updated.</p>
    pub fn set_last_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated_at = input;
        self
    }
    /// <p>The timestamp of when the profile history record was last updated.</p>
    pub fn get_last_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated_at
    }
    /// <p>The action type of the profile history record.</p>
    /// This field is required.
    pub fn action_type(mut self, input: crate::types::ActionType) -> Self {
        self.action_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The action type of the profile history record.</p>
    pub fn set_action_type(mut self, input: ::std::option::Option<crate::types::ActionType>) -> Self {
        self.action_type = input;
        self
    }
    /// <p>The action type of the profile history record.</p>
    pub fn get_action_type(&self) -> &::std::option::Option<crate::types::ActionType> {
        &self.action_type
    }
    /// <p>The unique identifier of the profile object generated by the service.</p>
    pub fn profile_object_unique_key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.profile_object_unique_key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the profile object generated by the service.</p>
    pub fn set_profile_object_unique_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.profile_object_unique_key = input;
        self
    }
    /// <p>The unique identifier of the profile object generated by the service.</p>
    pub fn get_profile_object_unique_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.profile_object_unique_key
    }
    /// <p>A string containing the customer profile, profile object, or profile key content.</p>
    pub fn content(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.content = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A string containing the customer profile, profile object, or profile key content.</p>
    pub fn set_content(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.content = input;
        self
    }
    /// <p>A string containing the customer profile, profile object, or profile key content.</p>
    pub fn get_content(&self) -> &::std::option::Option<::std::string::String> {
        &self.content
    }
    /// <p>The Amazon Resource Name (ARN) of the person or service principal who performed the action.</p>
    pub fn performed_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.performed_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the person or service principal who performed the action.</p>
    pub fn set_performed_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.performed_by = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the person or service principal who performed the action.</p>
    pub fn get_performed_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.performed_by
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetProfileHistoryRecordOutput`](crate::operation::get_profile_history_record::GetProfileHistoryRecordOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`id`](crate::operation::get_profile_history_record::builders::GetProfileHistoryRecordOutputBuilder::id)
    /// - [`object_type_name`](crate::operation::get_profile_history_record::builders::GetProfileHistoryRecordOutputBuilder::object_type_name)
    /// - [`created_at`](crate::operation::get_profile_history_record::builders::GetProfileHistoryRecordOutputBuilder::created_at)
    /// - [`action_type`](crate::operation::get_profile_history_record::builders::GetProfileHistoryRecordOutputBuilder::action_type)
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_profile_history_record::GetProfileHistoryRecordOutput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::get_profile_history_record::GetProfileHistoryRecordOutput {
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building GetProfileHistoryRecordOutput",
                )
            })?,
            object_type_name: self.object_type_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "object_type_name",
                    "object_type_name was not specified but it is required when building GetProfileHistoryRecordOutput",
                )
            })?,
            created_at: self.created_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_at",
                    "created_at was not specified but it is required when building GetProfileHistoryRecordOutput",
                )
            })?,
            last_updated_at: self.last_updated_at,
            action_type: self.action_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "action_type",
                    "action_type was not specified but it is required when building GetProfileHistoryRecordOutput",
                )
            })?,
            profile_object_unique_key: self.profile_object_unique_key,
            content: self.content,
            performed_by: self.performed_by,
            _request_id: self._request_id,
        })
    }
}
impl ::std::fmt::Debug for GetProfileHistoryRecordOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetProfileHistoryRecordOutputBuilder");
        formatter.field("id", &self.id);
        formatter.field("object_type_name", &self.object_type_name);
        formatter.field("created_at", &self.created_at);
        formatter.field("last_updated_at", &self.last_updated_at);
        formatter.field("action_type", &self.action_type);
        formatter.field("profile_object_unique_key", &self.profile_object_unique_key);
        formatter.field("content", &"*** Sensitive Data Redacted ***");
        formatter.field("performed_by", &self.performed_by);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
