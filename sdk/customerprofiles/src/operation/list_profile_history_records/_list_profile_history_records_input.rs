// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListProfileHistoryRecordsInput {
    /// <p>The unique name of the domain for which to return profile history records.</p>
    pub domain_name: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the profile to be taken.</p>
    pub profile_id: ::std::option::Option<::std::string::String>,
    /// <p>Applies a filter to include profile history records only with the specified <code>ObjectTypeName</code> value in the response.</p>
    pub object_type_name: ::std::option::Option<::std::string::String>,
    /// <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of results to return per page.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>Applies a filter to include profile history records only with the specified <code>ActionType</code> value in the response.</p>
    pub action_type: ::std::option::Option<crate::types::ActionType>,
    /// <p>Applies a filter to include profile history records only with the specified <code>PerformedBy</code> value in the response. The <code>PerformedBy</code> value can be the Amazon Resource Name (ARN) of the person or service principal who performed the action.</p>
    pub performed_by: ::std::option::Option<::std::string::String>,
}
impl ListProfileHistoryRecordsInput {
    /// <p>The unique name of the domain for which to return profile history records.</p>
    pub fn domain_name(&self) -> ::std::option::Option<&str> {
        self.domain_name.as_deref()
    }
    /// <p>The identifier of the profile to be taken.</p>
    pub fn profile_id(&self) -> ::std::option::Option<&str> {
        self.profile_id.as_deref()
    }
    /// <p>Applies a filter to include profile history records only with the specified <code>ObjectTypeName</code> value in the response.</p>
    pub fn object_type_name(&self) -> ::std::option::Option<&str> {
        self.object_type_name.as_deref()
    }
    /// <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of results to return per page.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>Applies a filter to include profile history records only with the specified <code>ActionType</code> value in the response.</p>
    pub fn action_type(&self) -> ::std::option::Option<&crate::types::ActionType> {
        self.action_type.as_ref()
    }
    /// <p>Applies a filter to include profile history records only with the specified <code>PerformedBy</code> value in the response. The <code>PerformedBy</code> value can be the Amazon Resource Name (ARN) of the person or service principal who performed the action.</p>
    pub fn performed_by(&self) -> ::std::option::Option<&str> {
        self.performed_by.as_deref()
    }
}
impl ListProfileHistoryRecordsInput {
    /// Creates a new builder-style object to manufacture [`ListProfileHistoryRecordsInput`](crate::operation::list_profile_history_records::ListProfileHistoryRecordsInput).
    pub fn builder() -> crate::operation::list_profile_history_records::builders::ListProfileHistoryRecordsInputBuilder {
        crate::operation::list_profile_history_records::builders::ListProfileHistoryRecordsInputBuilder::default()
    }
}

/// A builder for [`ListProfileHistoryRecordsInput`](crate::operation::list_profile_history_records::ListProfileHistoryRecordsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListProfileHistoryRecordsInputBuilder {
    pub(crate) domain_name: ::std::option::Option<::std::string::String>,
    pub(crate) profile_id: ::std::option::Option<::std::string::String>,
    pub(crate) object_type_name: ::std::option::Option<::std::string::String>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) action_type: ::std::option::Option<crate::types::ActionType>,
    pub(crate) performed_by: ::std::option::Option<::std::string::String>,
}
impl ListProfileHistoryRecordsInputBuilder {
    /// <p>The unique name of the domain for which to return profile history records.</p>
    /// This field is required.
    pub fn domain_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique name of the domain for which to return profile history records.</p>
    pub fn set_domain_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_name = input;
        self
    }
    /// <p>The unique name of the domain for which to return profile history records.</p>
    pub fn get_domain_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_name
    }
    /// <p>The identifier of the profile to be taken.</p>
    /// This field is required.
    pub fn profile_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.profile_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the profile to be taken.</p>
    pub fn set_profile_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.profile_id = input;
        self
    }
    /// <p>The identifier of the profile to be taken.</p>
    pub fn get_profile_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.profile_id
    }
    /// <p>Applies a filter to include profile history records only with the specified <code>ObjectTypeName</code> value in the response.</p>
    pub fn object_type_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.object_type_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Applies a filter to include profile history records only with the specified <code>ObjectTypeName</code> value in the response.</p>
    pub fn set_object_type_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.object_type_name = input;
        self
    }
    /// <p>Applies a filter to include profile history records only with the specified <code>ObjectTypeName</code> value in the response.</p>
    pub fn get_object_type_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.object_type_name
    }
    /// <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The maximum number of results to return per page.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results to return per page.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of results to return per page.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>Applies a filter to include profile history records only with the specified <code>ActionType</code> value in the response.</p>
    pub fn action_type(mut self, input: crate::types::ActionType) -> Self {
        self.action_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Applies a filter to include profile history records only with the specified <code>ActionType</code> value in the response.</p>
    pub fn set_action_type(mut self, input: ::std::option::Option<crate::types::ActionType>) -> Self {
        self.action_type = input;
        self
    }
    /// <p>Applies a filter to include profile history records only with the specified <code>ActionType</code> value in the response.</p>
    pub fn get_action_type(&self) -> &::std::option::Option<crate::types::ActionType> {
        &self.action_type
    }
    /// <p>Applies a filter to include profile history records only with the specified <code>PerformedBy</code> value in the response. The <code>PerformedBy</code> value can be the Amazon Resource Name (ARN) of the person or service principal who performed the action.</p>
    pub fn performed_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.performed_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Applies a filter to include profile history records only with the specified <code>PerformedBy</code> value in the response. The <code>PerformedBy</code> value can be the Amazon Resource Name (ARN) of the person or service principal who performed the action.</p>
    pub fn set_performed_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.performed_by = input;
        self
    }
    /// <p>Applies a filter to include profile history records only with the specified <code>PerformedBy</code> value in the response. The <code>PerformedBy</code> value can be the Amazon Resource Name (ARN) of the person or service principal who performed the action.</p>
    pub fn get_performed_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.performed_by
    }
    /// Consumes the builder and constructs a [`ListProfileHistoryRecordsInput`](crate::operation::list_profile_history_records::ListProfileHistoryRecordsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_profile_history_records::ListProfileHistoryRecordsInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::list_profile_history_records::ListProfileHistoryRecordsInput {
            domain_name: self.domain_name,
            profile_id: self.profile_id,
            object_type_name: self.object_type_name,
            next_token: self.next_token,
            max_results: self.max_results,
            action_type: self.action_type,
            performed_by: self.performed_by,
        })
    }
}
