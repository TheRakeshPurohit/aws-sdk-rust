// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DeleteConnection`](crate::operation::delete_connection::builders::DeleteConnectionFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`client_id(impl Into<String>)`](crate::operation::delete_connection::builders::DeleteConnectionFluentBuilder::client_id) / [`set_client_id(Option<String>)`](crate::operation::delete_connection::builders::DeleteConnectionFluentBuilder::set_client_id):<br>required: **true**<br><p>The unique identifier of the MQTT client to disconnect. The client ID can't start with a dollar sign ($).</p><br>
    ///   - [`clean_session(bool)`](crate::operation::delete_connection::builders::DeleteConnectionFluentBuilder::clean_session) / [`set_clean_session(Option<bool>)`](crate::operation::delete_connection::builders::DeleteConnectionFluentBuilder::set_clean_session):<br>required: **false**<br><p>Specifies whether to remove the client's session state when disconnecting. Set to <code>TRUE</code> to delete all session information, including subscriptions and queued messages. Set to <code>FALSE</code> to preserve the session state. By default, this is set to <code>FALSE</code> (preserves the session state).</p><br>
    ///   - [`prevent_will_message(bool)`](crate::operation::delete_connection::builders::DeleteConnectionFluentBuilder::prevent_will_message) / [`set_prevent_will_message(Option<bool>)`](crate::operation::delete_connection::builders::DeleteConnectionFluentBuilder::set_prevent_will_message):<br>required: **false**<br><p>Controls if Amazon Web Services IoT Core publishes the client's Last Will and Testament (LWT) message upon disconnection. Set to <code>TRUE</code> to prevent publishing the LWT message. Set to <code>FALSE</code> to allow publishing. By default, this is set to <code>FALSE</code> (allows publishing the LWT message).</p><br>
    /// - On success, responds with [`DeleteConnectionOutput`](crate::operation::delete_connection::DeleteConnectionOutput)
    /// - On failure, responds with [`SdkError<DeleteConnectionError>`](crate::operation::delete_connection::DeleteConnectionError)
    pub fn delete_connection(&self) -> crate::operation::delete_connection::builders::DeleteConnectionFluentBuilder {
        crate::operation::delete_connection::builders::DeleteConnectionFluentBuilder::new(self.handle.clone())
    }
}
