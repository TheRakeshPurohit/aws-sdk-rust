// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Required when you set Codec to the value MP2.
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Mp2Settings {
    /// Choose BROADCASTER_MIXED_AD when the input contains pre-mixed main audio + audio description (AD) as a stereo pair. The value for AudioType will be set to 3, which signals to downstream systems that this stream contains "broadcaster mixed AD". Note that the input received by the encoder must contain pre-mixed audio; the encoder does not perform the mixing. When you choose BROADCASTER_MIXED_AD, the encoder ignores any values you provide in AudioType and FollowInputAudioType. Choose NONE when the input does not contain pre-mixed audio + audio description (AD). In this case, the encoder will use any values you provide for AudioType and FollowInputAudioType.
    pub audio_description_mix: ::std::option::Option<crate::types::Mp2AudioDescriptionMix>,
    /// Specify the average bitrate in bits per second.
    pub bitrate: ::std::option::Option<i32>,
    /// Set Channels to specify the number of channels in this output audio track. Choosing Mono in will give you 1 output channel; choosing Stereo will give you 2. In the API, valid values are 1 and 2.
    pub channels: ::std::option::Option<i32>,
    /// Sample rate in Hz.
    pub sample_rate: ::std::option::Option<i32>,
}
impl Mp2Settings {
    /// Choose BROADCASTER_MIXED_AD when the input contains pre-mixed main audio + audio description (AD) as a stereo pair. The value for AudioType will be set to 3, which signals to downstream systems that this stream contains "broadcaster mixed AD". Note that the input received by the encoder must contain pre-mixed audio; the encoder does not perform the mixing. When you choose BROADCASTER_MIXED_AD, the encoder ignores any values you provide in AudioType and FollowInputAudioType. Choose NONE when the input does not contain pre-mixed audio + audio description (AD). In this case, the encoder will use any values you provide for AudioType and FollowInputAudioType.
    pub fn audio_description_mix(&self) -> ::std::option::Option<&crate::types::Mp2AudioDescriptionMix> {
        self.audio_description_mix.as_ref()
    }
    /// Specify the average bitrate in bits per second.
    pub fn bitrate(&self) -> ::std::option::Option<i32> {
        self.bitrate
    }
    /// Set Channels to specify the number of channels in this output audio track. Choosing Mono in will give you 1 output channel; choosing Stereo will give you 2. In the API, valid values are 1 and 2.
    pub fn channels(&self) -> ::std::option::Option<i32> {
        self.channels
    }
    /// Sample rate in Hz.
    pub fn sample_rate(&self) -> ::std::option::Option<i32> {
        self.sample_rate
    }
}
impl Mp2Settings {
    /// Creates a new builder-style object to manufacture [`Mp2Settings`](crate::types::Mp2Settings).
    pub fn builder() -> crate::types::builders::Mp2SettingsBuilder {
        crate::types::builders::Mp2SettingsBuilder::default()
    }
}

/// A builder for [`Mp2Settings`](crate::types::Mp2Settings).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct Mp2SettingsBuilder {
    pub(crate) audio_description_mix: ::std::option::Option<crate::types::Mp2AudioDescriptionMix>,
    pub(crate) bitrate: ::std::option::Option<i32>,
    pub(crate) channels: ::std::option::Option<i32>,
    pub(crate) sample_rate: ::std::option::Option<i32>,
}
impl Mp2SettingsBuilder {
    /// Choose BROADCASTER_MIXED_AD when the input contains pre-mixed main audio + audio description (AD) as a stereo pair. The value for AudioType will be set to 3, which signals to downstream systems that this stream contains "broadcaster mixed AD". Note that the input received by the encoder must contain pre-mixed audio; the encoder does not perform the mixing. When you choose BROADCASTER_MIXED_AD, the encoder ignores any values you provide in AudioType and FollowInputAudioType. Choose NONE when the input does not contain pre-mixed audio + audio description (AD). In this case, the encoder will use any values you provide for AudioType and FollowInputAudioType.
    pub fn audio_description_mix(mut self, input: crate::types::Mp2AudioDescriptionMix) -> Self {
        self.audio_description_mix = ::std::option::Option::Some(input);
        self
    }
    /// Choose BROADCASTER_MIXED_AD when the input contains pre-mixed main audio + audio description (AD) as a stereo pair. The value for AudioType will be set to 3, which signals to downstream systems that this stream contains "broadcaster mixed AD". Note that the input received by the encoder must contain pre-mixed audio; the encoder does not perform the mixing. When you choose BROADCASTER_MIXED_AD, the encoder ignores any values you provide in AudioType and FollowInputAudioType. Choose NONE when the input does not contain pre-mixed audio + audio description (AD). In this case, the encoder will use any values you provide for AudioType and FollowInputAudioType.
    pub fn set_audio_description_mix(mut self, input: ::std::option::Option<crate::types::Mp2AudioDescriptionMix>) -> Self {
        self.audio_description_mix = input;
        self
    }
    /// Choose BROADCASTER_MIXED_AD when the input contains pre-mixed main audio + audio description (AD) as a stereo pair. The value for AudioType will be set to 3, which signals to downstream systems that this stream contains "broadcaster mixed AD". Note that the input received by the encoder must contain pre-mixed audio; the encoder does not perform the mixing. When you choose BROADCASTER_MIXED_AD, the encoder ignores any values you provide in AudioType and FollowInputAudioType. Choose NONE when the input does not contain pre-mixed audio + audio description (AD). In this case, the encoder will use any values you provide for AudioType and FollowInputAudioType.
    pub fn get_audio_description_mix(&self) -> &::std::option::Option<crate::types::Mp2AudioDescriptionMix> {
        &self.audio_description_mix
    }
    /// Specify the average bitrate in bits per second.
    pub fn bitrate(mut self, input: i32) -> Self {
        self.bitrate = ::std::option::Option::Some(input);
        self
    }
    /// Specify the average bitrate in bits per second.
    pub fn set_bitrate(mut self, input: ::std::option::Option<i32>) -> Self {
        self.bitrate = input;
        self
    }
    /// Specify the average bitrate in bits per second.
    pub fn get_bitrate(&self) -> &::std::option::Option<i32> {
        &self.bitrate
    }
    /// Set Channels to specify the number of channels in this output audio track. Choosing Mono in will give you 1 output channel; choosing Stereo will give you 2. In the API, valid values are 1 and 2.
    pub fn channels(mut self, input: i32) -> Self {
        self.channels = ::std::option::Option::Some(input);
        self
    }
    /// Set Channels to specify the number of channels in this output audio track. Choosing Mono in will give you 1 output channel; choosing Stereo will give you 2. In the API, valid values are 1 and 2.
    pub fn set_channels(mut self, input: ::std::option::Option<i32>) -> Self {
        self.channels = input;
        self
    }
    /// Set Channels to specify the number of channels in this output audio track. Choosing Mono in will give you 1 output channel; choosing Stereo will give you 2. In the API, valid values are 1 and 2.
    pub fn get_channels(&self) -> &::std::option::Option<i32> {
        &self.channels
    }
    /// Sample rate in Hz.
    pub fn sample_rate(mut self, input: i32) -> Self {
        self.sample_rate = ::std::option::Option::Some(input);
        self
    }
    /// Sample rate in Hz.
    pub fn set_sample_rate(mut self, input: ::std::option::Option<i32>) -> Self {
        self.sample_rate = input;
        self
    }
    /// Sample rate in Hz.
    pub fn get_sample_rate(&self) -> &::std::option::Option<i32> {
        &self.sample_rate
    }
    /// Consumes the builder and constructs a [`Mp2Settings`](crate::types::Mp2Settings).
    pub fn build(self) -> crate::types::Mp2Settings {
        crate::types::Mp2Settings {
            audio_description_mix: self.audio_description_mix,
            bitrate: self.bitrate,
            channels: self.channels,
            sample_rate: self.sample_rate,
        }
    }
}
