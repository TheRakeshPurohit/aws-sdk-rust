// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`StartSyncExecution`](crate::operation::start_sync_execution::builders::StartSyncExecutionFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`state_machine_arn(impl Into<String>)`](crate::operation::start_sync_execution::builders::StartSyncExecutionFluentBuilder::state_machine_arn) / [`set_state_machine_arn(Option<String>)`](crate::operation::start_sync_execution::builders::StartSyncExecutionFluentBuilder::set_state_machine_arn):<br>required: **true**<br><p>The Amazon Resource Name (ARN) of the state machine to execute.</p><br>
    ///   - [`name(impl Into<String>)`](crate::operation::start_sync_execution::builders::StartSyncExecutionFluentBuilder::name) / [`set_name(Option<String>)`](crate::operation::start_sync_execution::builders::StartSyncExecutionFluentBuilder::set_name):<br>required: **false**<br><p>The name of the execution.</p><br>
    ///   - [`input(impl Into<String>)`](crate::operation::start_sync_execution::builders::StartSyncExecutionFluentBuilder::input) / [`set_input(Option<String>)`](crate::operation::start_sync_execution::builders::StartSyncExecutionFluentBuilder::set_input):<br>required: **false**<br><p>The string that contains the JSON input data for the execution, for example:</p> <p><code>"{\"first_name\" : \"Alejandro\"}"</code></p><note>  <p>If you don't include any JSON input data, you still must include the two braces, for example: <code>"{}"</code></p> </note> <p>Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.</p><br>
    ///   - [`trace_header(impl Into<String>)`](crate::operation::start_sync_execution::builders::StartSyncExecutionFluentBuilder::trace_header) / [`set_trace_header(Option<String>)`](crate::operation::start_sync_execution::builders::StartSyncExecutionFluentBuilder::set_trace_header):<br>required: **false**<br><p>Passes the X-Ray trace header. The trace header can also be passed in the request payload.</p><note>  <p>For X-Ray traces, all Amazon Web Services services use the <code>X-Amzn-Trace-Id</code> header from the HTTP request. Using the header is the preferred mechanism to identify a trace. <code>StartExecution</code> and <code>StartSyncExecution</code> API operations can also use <code>traceHeader</code> from the body of the request payload. If <b>both</b> sources are provided, Step Functions will use the <b>header value</b> (preferred) over the value in the request body.</p> </note><br>
    ///   - [`included_data(IncludedData)`](crate::operation::start_sync_execution::builders::StartSyncExecutionFluentBuilder::included_data) / [`set_included_data(Option<IncludedData>)`](crate::operation::start_sync_execution::builders::StartSyncExecutionFluentBuilder::set_included_data):<br>required: **false**<br><p>If your state machine definition is encrypted with a KMS key, callers must have <code>kms:Decrypt</code> permission to decrypt the definition. Alternatively, you can call the API with <code>includedData = METADATA_ONLY</code> to get a successful response without the encrypted definition.</p><br>
    /// - On success, responds with [`StartSyncExecutionOutput`](crate::operation::start_sync_execution::StartSyncExecutionOutput) with field(s):
    ///   - [`execution_arn(String)`](crate::operation::start_sync_execution::StartSyncExecutionOutput::execution_arn): <p>The Amazon Resource Name (ARN) that identifies the execution.</p>
    ///   - [`state_machine_arn(Option<String>)`](crate::operation::start_sync_execution::StartSyncExecutionOutput::state_machine_arn): <p>The Amazon Resource Name (ARN) that identifies the state machine.</p>
    ///   - [`name(Option<String>)`](crate::operation::start_sync_execution::StartSyncExecutionOutput::name): <p>The name of the execution.</p>
    ///   - [`start_date(DateTime)`](crate::operation::start_sync_execution::StartSyncExecutionOutput::start_date): <p>The date the execution is started.</p>
    ///   - [`stop_date(DateTime)`](crate::operation::start_sync_execution::StartSyncExecutionOutput::stop_date): <p>If the execution has already ended, the date the execution stopped.</p>
    ///   - [`status(SyncExecutionStatus)`](crate::operation::start_sync_execution::StartSyncExecutionOutput::status): <p>The current status of the execution.</p>
    ///   - [`error(Option<String>)`](crate::operation::start_sync_execution::StartSyncExecutionOutput::error): <p>The error code of the failure.</p>
    ///   - [`cause(Option<String>)`](crate::operation::start_sync_execution::StartSyncExecutionOutput::cause): <p>A more detailed explanation of the cause of the failure.</p>
    ///   - [`input(Option<String>)`](crate::operation::start_sync_execution::StartSyncExecutionOutput::input): <p>The string that contains the JSON input data of the execution. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.</p>
    ///   - [`input_details(Option<CloudWatchEventsExecutionDataDetails>)`](crate::operation::start_sync_execution::StartSyncExecutionOutput::input_details): <p>Provides details about execution input or output.</p>
    ///   - [`output(Option<String>)`](crate::operation::start_sync_execution::StartSyncExecutionOutput::output): <p>The JSON output data of the execution. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.</p><note>  <p>This field is set only if the execution succeeds. If the execution fails, this field is null.</p> </note>
    ///   - [`output_details(Option<CloudWatchEventsExecutionDataDetails>)`](crate::operation::start_sync_execution::StartSyncExecutionOutput::output_details): <p>Provides details about execution input or output.</p>
    ///   - [`trace_header(Option<String>)`](crate::operation::start_sync_execution::StartSyncExecutionOutput::trace_header): <p>The X-Ray trace header that was passed to the execution.</p><note>  <p>For X-Ray traces, all Amazon Web Services services use the <code>X-Amzn-Trace-Id</code> header from the HTTP request. Using the header is the preferred mechanism to identify a trace. <code>StartExecution</code> and <code>StartSyncExecution</code> API operations can also use <code>traceHeader</code> from the body of the request payload. If <b>both</b> sources are provided, Step Functions will use the <b>header value</b> (preferred) over the value in the request body.</p> </note>
    ///   - [`billing_details(Option<BillingDetails>)`](crate::operation::start_sync_execution::StartSyncExecutionOutput::billing_details): <p>An object that describes workflow billing details, including billed duration and memory use.</p>
    /// - On failure, responds with [`SdkError<StartSyncExecutionError>`](crate::operation::start_sync_execution::StartSyncExecutionError)
    pub fn start_sync_execution(&self) -> crate::operation::start_sync_execution::builders::StartSyncExecutionFluentBuilder {
        crate::operation::start_sync_execution::builders::StartSyncExecutionFluentBuilder::new(self.handle.clone())
    }
}
