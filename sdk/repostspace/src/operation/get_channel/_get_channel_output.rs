// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GetChannelOutput {
    /// <p>The unique ID of the private re:Post.</p>
    pub space_id: ::std::string::String,
    /// <p>The unique ID of the private re:Post channel.</p>
    pub channel_id: ::std::string::String,
    /// <p>The name for the channel. This must be unique per private re:Post.</p>
    pub channel_name: ::std::string::String,
    /// <p>A description for the channel. This is used only to help you identify this channel.</p>
    pub channel_description: ::std::option::Option<::std::string::String>,
    /// <p>The date when the channel was created.</p>
    pub create_date_time: ::aws_smithy_types::DateTime,
    /// <p>The date when the channel was deleted.</p>
    pub delete_date_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The channel roles associated to the users and groups of the channel.</p>
    pub channel_roles: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::vec::Vec<crate::types::ChannelRole>>>,
    /// <p>The status pf the channel.</p>
    pub channel_status: crate::types::ChannelStatus,
    _request_id: Option<String>,
}
impl GetChannelOutput {
    /// <p>The unique ID of the private re:Post.</p>
    pub fn space_id(&self) -> &str {
        use std::ops::Deref;
        self.space_id.deref()
    }
    /// <p>The unique ID of the private re:Post channel.</p>
    pub fn channel_id(&self) -> &str {
        use std::ops::Deref;
        self.channel_id.deref()
    }
    /// <p>The name for the channel. This must be unique per private re:Post.</p>
    pub fn channel_name(&self) -> &str {
        use std::ops::Deref;
        self.channel_name.deref()
    }
    /// <p>A description for the channel. This is used only to help you identify this channel.</p>
    pub fn channel_description(&self) -> ::std::option::Option<&str> {
        self.channel_description.as_deref()
    }
    /// <p>The date when the channel was created.</p>
    pub fn create_date_time(&self) -> &::aws_smithy_types::DateTime {
        &self.create_date_time
    }
    /// <p>The date when the channel was deleted.</p>
    pub fn delete_date_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.delete_date_time.as_ref()
    }
    /// <p>The channel roles associated to the users and groups of the channel.</p>
    pub fn channel_roles(
        &self,
    ) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::vec::Vec<crate::types::ChannelRole>>> {
        self.channel_roles.as_ref()
    }
    /// <p>The status pf the channel.</p>
    pub fn channel_status(&self) -> &crate::types::ChannelStatus {
        &self.channel_status
    }
}
impl ::std::fmt::Debug for GetChannelOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetChannelOutput");
        formatter.field("space_id", &self.space_id);
        formatter.field("channel_id", &self.channel_id);
        formatter.field("channel_name", &"*** Sensitive Data Redacted ***");
        formatter.field("channel_description", &"*** Sensitive Data Redacted ***");
        formatter.field("create_date_time", &self.create_date_time);
        formatter.field("delete_date_time", &self.delete_date_time);
        formatter.field("channel_roles", &self.channel_roles);
        formatter.field("channel_status", &self.channel_status);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_types::request_id::RequestId for GetChannelOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetChannelOutput {
    /// Creates a new builder-style object to manufacture [`GetChannelOutput`](crate::operation::get_channel::GetChannelOutput).
    pub fn builder() -> crate::operation::get_channel::builders::GetChannelOutputBuilder {
        crate::operation::get_channel::builders::GetChannelOutputBuilder::default()
    }
}

/// A builder for [`GetChannelOutput`](crate::operation::get_channel::GetChannelOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct GetChannelOutputBuilder {
    pub(crate) space_id: ::std::option::Option<::std::string::String>,
    pub(crate) channel_id: ::std::option::Option<::std::string::String>,
    pub(crate) channel_name: ::std::option::Option<::std::string::String>,
    pub(crate) channel_description: ::std::option::Option<::std::string::String>,
    pub(crate) create_date_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) delete_date_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) channel_roles: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::vec::Vec<crate::types::ChannelRole>>>,
    pub(crate) channel_status: ::std::option::Option<crate::types::ChannelStatus>,
    _request_id: Option<String>,
}
impl GetChannelOutputBuilder {
    /// <p>The unique ID of the private re:Post.</p>
    /// This field is required.
    pub fn space_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.space_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique ID of the private re:Post.</p>
    pub fn set_space_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.space_id = input;
        self
    }
    /// <p>The unique ID of the private re:Post.</p>
    pub fn get_space_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.space_id
    }
    /// <p>The unique ID of the private re:Post channel.</p>
    /// This field is required.
    pub fn channel_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.channel_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique ID of the private re:Post channel.</p>
    pub fn set_channel_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.channel_id = input;
        self
    }
    /// <p>The unique ID of the private re:Post channel.</p>
    pub fn get_channel_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.channel_id
    }
    /// <p>The name for the channel. This must be unique per private re:Post.</p>
    /// This field is required.
    pub fn channel_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.channel_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name for the channel. This must be unique per private re:Post.</p>
    pub fn set_channel_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.channel_name = input;
        self
    }
    /// <p>The name for the channel. This must be unique per private re:Post.</p>
    pub fn get_channel_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.channel_name
    }
    /// <p>A description for the channel. This is used only to help you identify this channel.</p>
    pub fn channel_description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.channel_description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description for the channel. This is used only to help you identify this channel.</p>
    pub fn set_channel_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.channel_description = input;
        self
    }
    /// <p>A description for the channel. This is used only to help you identify this channel.</p>
    pub fn get_channel_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.channel_description
    }
    /// <p>The date when the channel was created.</p>
    /// This field is required.
    pub fn create_date_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.create_date_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date when the channel was created.</p>
    pub fn set_create_date_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.create_date_time = input;
        self
    }
    /// <p>The date when the channel was created.</p>
    pub fn get_create_date_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.create_date_time
    }
    /// <p>The date when the channel was deleted.</p>
    pub fn delete_date_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.delete_date_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date when the channel was deleted.</p>
    pub fn set_delete_date_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.delete_date_time = input;
        self
    }
    /// <p>The date when the channel was deleted.</p>
    pub fn get_delete_date_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.delete_date_time
    }
    /// Adds a key-value pair to `channel_roles`.
    ///
    /// To override the contents of this collection use [`set_channel_roles`](Self::set_channel_roles).
    ///
    /// <p>The channel roles associated to the users and groups of the channel.</p>
    pub fn channel_roles(mut self, k: impl ::std::convert::Into<::std::string::String>, v: ::std::vec::Vec<crate::types::ChannelRole>) -> Self {
        let mut hash_map = self.channel_roles.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.channel_roles = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The channel roles associated to the users and groups of the channel.</p>
    pub fn set_channel_roles(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::vec::Vec<crate::types::ChannelRole>>>,
    ) -> Self {
        self.channel_roles = input;
        self
    }
    /// <p>The channel roles associated to the users and groups of the channel.</p>
    pub fn get_channel_roles(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::vec::Vec<crate::types::ChannelRole>>> {
        &self.channel_roles
    }
    /// <p>The status pf the channel.</p>
    /// This field is required.
    pub fn channel_status(mut self, input: crate::types::ChannelStatus) -> Self {
        self.channel_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status pf the channel.</p>
    pub fn set_channel_status(mut self, input: ::std::option::Option<crate::types::ChannelStatus>) -> Self {
        self.channel_status = input;
        self
    }
    /// <p>The status pf the channel.</p>
    pub fn get_channel_status(&self) -> &::std::option::Option<crate::types::ChannelStatus> {
        &self.channel_status
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetChannelOutput`](crate::operation::get_channel::GetChannelOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`space_id`](crate::operation::get_channel::builders::GetChannelOutputBuilder::space_id)
    /// - [`channel_id`](crate::operation::get_channel::builders::GetChannelOutputBuilder::channel_id)
    /// - [`channel_name`](crate::operation::get_channel::builders::GetChannelOutputBuilder::channel_name)
    /// - [`create_date_time`](crate::operation::get_channel::builders::GetChannelOutputBuilder::create_date_time)
    /// - [`channel_status`](crate::operation::get_channel::builders::GetChannelOutputBuilder::channel_status)
    pub fn build(self) -> ::std::result::Result<crate::operation::get_channel::GetChannelOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::get_channel::GetChannelOutput {
            space_id: self.space_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "space_id",
                    "space_id was not specified but it is required when building GetChannelOutput",
                )
            })?,
            channel_id: self.channel_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "channel_id",
                    "channel_id was not specified but it is required when building GetChannelOutput",
                )
            })?,
            channel_name: self.channel_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "channel_name",
                    "channel_name was not specified but it is required when building GetChannelOutput",
                )
            })?,
            channel_description: self.channel_description,
            create_date_time: self.create_date_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "create_date_time",
                    "create_date_time was not specified but it is required when building GetChannelOutput",
                )
            })?,
            delete_date_time: self.delete_date_time,
            channel_roles: self.channel_roles,
            channel_status: self.channel_status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "channel_status",
                    "channel_status was not specified but it is required when building GetChannelOutput",
                )
            })?,
            _request_id: self._request_id,
        })
    }
}
impl ::std::fmt::Debug for GetChannelOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetChannelOutputBuilder");
        formatter.field("space_id", &self.space_id);
        formatter.field("channel_id", &self.channel_id);
        formatter.field("channel_name", &"*** Sensitive Data Redacted ***");
        formatter.field("channel_description", &"*** Sensitive Data Redacted ***");
        formatter.field("create_date_time", &self.create_date_time);
        formatter.field("delete_date_time", &self.delete_date_time);
        formatter.field("channel_roles", &self.channel_roles);
        formatter.field("channel_status", &self.channel_status);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
