// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchRemoveChannelRoleFromAccessorsInput {
    /// <p>The unique ID of the private re:Post.</p>
    pub space_id: ::std::option::Option<::std::string::String>,
    /// <p>The unique ID of the private re:Post channel.</p>
    pub channel_id: ::std::option::Option<::std::string::String>,
    /// <p>The users or groups identifiers to remove the role from.</p>
    pub accessor_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The channel role to remove from the users or groups.</p>
    pub channel_role: ::std::option::Option<crate::types::ChannelRole>,
}
impl BatchRemoveChannelRoleFromAccessorsInput {
    /// <p>The unique ID of the private re:Post.</p>
    pub fn space_id(&self) -> ::std::option::Option<&str> {
        self.space_id.as_deref()
    }
    /// <p>The unique ID of the private re:Post channel.</p>
    pub fn channel_id(&self) -> ::std::option::Option<&str> {
        self.channel_id.as_deref()
    }
    /// <p>The users or groups identifiers to remove the role from.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.accessor_ids.is_none()`.
    pub fn accessor_ids(&self) -> &[::std::string::String] {
        self.accessor_ids.as_deref().unwrap_or_default()
    }
    /// <p>The channel role to remove from the users or groups.</p>
    pub fn channel_role(&self) -> ::std::option::Option<&crate::types::ChannelRole> {
        self.channel_role.as_ref()
    }
}
impl BatchRemoveChannelRoleFromAccessorsInput {
    /// Creates a new builder-style object to manufacture [`BatchRemoveChannelRoleFromAccessorsInput`](crate::operation::batch_remove_channel_role_from_accessors::BatchRemoveChannelRoleFromAccessorsInput).
    pub fn builder() -> crate::operation::batch_remove_channel_role_from_accessors::builders::BatchRemoveChannelRoleFromAccessorsInputBuilder {
        crate::operation::batch_remove_channel_role_from_accessors::builders::BatchRemoveChannelRoleFromAccessorsInputBuilder::default()
    }
}

/// A builder for [`BatchRemoveChannelRoleFromAccessorsInput`](crate::operation::batch_remove_channel_role_from_accessors::BatchRemoveChannelRoleFromAccessorsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct BatchRemoveChannelRoleFromAccessorsInputBuilder {
    pub(crate) space_id: ::std::option::Option<::std::string::String>,
    pub(crate) channel_id: ::std::option::Option<::std::string::String>,
    pub(crate) accessor_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) channel_role: ::std::option::Option<crate::types::ChannelRole>,
}
impl BatchRemoveChannelRoleFromAccessorsInputBuilder {
    /// <p>The unique ID of the private re:Post.</p>
    /// This field is required.
    pub fn space_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.space_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique ID of the private re:Post.</p>
    pub fn set_space_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.space_id = input;
        self
    }
    /// <p>The unique ID of the private re:Post.</p>
    pub fn get_space_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.space_id
    }
    /// <p>The unique ID of the private re:Post channel.</p>
    /// This field is required.
    pub fn channel_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.channel_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique ID of the private re:Post channel.</p>
    pub fn set_channel_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.channel_id = input;
        self
    }
    /// <p>The unique ID of the private re:Post channel.</p>
    pub fn get_channel_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.channel_id
    }
    /// Appends an item to `accessor_ids`.
    ///
    /// To override the contents of this collection use [`set_accessor_ids`](Self::set_accessor_ids).
    ///
    /// <p>The users or groups identifiers to remove the role from.</p>
    pub fn accessor_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.accessor_ids.unwrap_or_default();
        v.push(input.into());
        self.accessor_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>The users or groups identifiers to remove the role from.</p>
    pub fn set_accessor_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.accessor_ids = input;
        self
    }
    /// <p>The users or groups identifiers to remove the role from.</p>
    pub fn get_accessor_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.accessor_ids
    }
    /// <p>The channel role to remove from the users or groups.</p>
    /// This field is required.
    pub fn channel_role(mut self, input: crate::types::ChannelRole) -> Self {
        self.channel_role = ::std::option::Option::Some(input);
        self
    }
    /// <p>The channel role to remove from the users or groups.</p>
    pub fn set_channel_role(mut self, input: ::std::option::Option<crate::types::ChannelRole>) -> Self {
        self.channel_role = input;
        self
    }
    /// <p>The channel role to remove from the users or groups.</p>
    pub fn get_channel_role(&self) -> &::std::option::Option<crate::types::ChannelRole> {
        &self.channel_role
    }
    /// Consumes the builder and constructs a [`BatchRemoveChannelRoleFromAccessorsInput`](crate::operation::batch_remove_channel_role_from_accessors::BatchRemoveChannelRoleFromAccessorsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::batch_remove_channel_role_from_accessors::BatchRemoveChannelRoleFromAccessorsInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::batch_remove_channel_role_from_accessors::BatchRemoveChannelRoleFromAccessorsInput {
                space_id: self.space_id,
                channel_id: self.channel_id,
                accessor_ids: self.accessor_ids,
                channel_role: self.channel_role,
            },
        )
    }
}
