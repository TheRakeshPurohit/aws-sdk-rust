// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CreateChannelInput {
    /// <p>The unique ID of the private re:Post.</p>
    pub space_id: ::std::option::Option<::std::string::String>,
    /// <p>The name for the channel. This must be unique per private re:Post.</p>
    pub channel_name: ::std::option::Option<::std::string::String>,
    /// <p>A description for the channel. This is used only to help you identify this channel.</p>
    pub channel_description: ::std::option::Option<::std::string::String>,
}
impl CreateChannelInput {
    /// <p>The unique ID of the private re:Post.</p>
    pub fn space_id(&self) -> ::std::option::Option<&str> {
        self.space_id.as_deref()
    }
    /// <p>The name for the channel. This must be unique per private re:Post.</p>
    pub fn channel_name(&self) -> ::std::option::Option<&str> {
        self.channel_name.as_deref()
    }
    /// <p>A description for the channel. This is used only to help you identify this channel.</p>
    pub fn channel_description(&self) -> ::std::option::Option<&str> {
        self.channel_description.as_deref()
    }
}
impl ::std::fmt::Debug for CreateChannelInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateChannelInput");
        formatter.field("space_id", &self.space_id);
        formatter.field("channel_name", &"*** Sensitive Data Redacted ***");
        formatter.field("channel_description", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl CreateChannelInput {
    /// Creates a new builder-style object to manufacture [`CreateChannelInput`](crate::operation::create_channel::CreateChannelInput).
    pub fn builder() -> crate::operation::create_channel::builders::CreateChannelInputBuilder {
        crate::operation::create_channel::builders::CreateChannelInputBuilder::default()
    }
}

/// A builder for [`CreateChannelInput`](crate::operation::create_channel::CreateChannelInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct CreateChannelInputBuilder {
    pub(crate) space_id: ::std::option::Option<::std::string::String>,
    pub(crate) channel_name: ::std::option::Option<::std::string::String>,
    pub(crate) channel_description: ::std::option::Option<::std::string::String>,
}
impl CreateChannelInputBuilder {
    /// <p>The unique ID of the private re:Post.</p>
    /// This field is required.
    pub fn space_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.space_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique ID of the private re:Post.</p>
    pub fn set_space_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.space_id = input;
        self
    }
    /// <p>The unique ID of the private re:Post.</p>
    pub fn get_space_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.space_id
    }
    /// <p>The name for the channel. This must be unique per private re:Post.</p>
    /// This field is required.
    pub fn channel_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.channel_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name for the channel. This must be unique per private re:Post.</p>
    pub fn set_channel_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.channel_name = input;
        self
    }
    /// <p>The name for the channel. This must be unique per private re:Post.</p>
    pub fn get_channel_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.channel_name
    }
    /// <p>A description for the channel. This is used only to help you identify this channel.</p>
    pub fn channel_description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.channel_description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description for the channel. This is used only to help you identify this channel.</p>
    pub fn set_channel_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.channel_description = input;
        self
    }
    /// <p>A description for the channel. This is used only to help you identify this channel.</p>
    pub fn get_channel_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.channel_description
    }
    /// Consumes the builder and constructs a [`CreateChannelInput`](crate::operation::create_channel::CreateChannelInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_channel::CreateChannelInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_channel::CreateChannelInput {
            space_id: self.space_id,
            channel_name: self.channel_name,
            channel_description: self.channel_description,
        })
    }
}
impl ::std::fmt::Debug for CreateChannelInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateChannelInputBuilder");
        formatter.field("space_id", &self.space_id);
        formatter.field("channel_name", &"*** Sensitive Data Redacted ***");
        formatter.field("channel_description", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
