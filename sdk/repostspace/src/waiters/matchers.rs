// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Matcher union: {"output":{"path":"channelStatus","expected":"CREATED","comparator":"stringEquals"}}
pub(crate) fn match_get_channel_e8b5d995c3c3ce357(
    _result: ::std::result::Result<&crate::operation::get_channel::GetChannelOutput, &crate::operation::get_channel::GetChannelError>,
) -> bool {
    fn path_traversal<'a>(_output: &'a crate::operation::get_channel::GetChannelOutput) -> ::std::option::Option<&'a crate::types::ChannelStatus> {
        let _fld_1 = &_output.channel_status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "CREATED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"channelStatus","expected":"CREATE_FAILED","comparator":"stringEquals"}}
pub(crate) fn match_get_channel_6ffac86663d1811db(
    _result: ::std::result::Result<&crate::operation::get_channel::GetChannelOutput, &crate::operation::get_channel::GetChannelError>,
) -> bool {
    fn path_traversal<'a>(_output: &'a crate::operation::get_channel::GetChannelOutput) -> ::std::option::Option<&'a crate::types::ChannelStatus> {
        let _fld_1 = &_output.channel_status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "CREATE_FAILED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"channelStatus","expected":"CREATING","comparator":"stringEquals"}}
pub(crate) fn match_get_channel_63429972c1ba2a686(
    _result: ::std::result::Result<&crate::operation::get_channel::GetChannelOutput, &crate::operation::get_channel::GetChannelError>,
) -> bool {
    fn path_traversal<'a>(_output: &'a crate::operation::get_channel::GetChannelOutput) -> ::std::option::Option<&'a crate::types::ChannelStatus> {
        let _fld_1 = &_output.channel_status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "CREATING";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"errorType":"ResourceNotFoundException"}
pub(crate) fn match_get_channel_1cce2c05524fb92d4(
    _result: ::std::result::Result<&crate::operation::get_channel::GetChannelOutput, &crate::operation::get_channel::GetChannelError>,
) -> bool {
    if let ::std::result::Result::Err(err) = _result {
        if let ::std::option::Option::Some(code) = ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(err) {
            return code == "ResourceNotFoundException";
        }
    }
    false
}

/// Matcher union: {"output":{"path":"channelStatus","expected":"DELETED","comparator":"stringEquals"}}
pub(crate) fn match_get_channel_a0462734eff9a038f(
    _result: ::std::result::Result<&crate::operation::get_channel::GetChannelOutput, &crate::operation::get_channel::GetChannelError>,
) -> bool {
    fn path_traversal<'a>(_output: &'a crate::operation::get_channel::GetChannelOutput) -> ::std::option::Option<&'a crate::types::ChannelStatus> {
        let _fld_1 = &_output.channel_status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "DELETED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"channelStatus","expected":"DELETE_FAILED","comparator":"stringEquals"}}
pub(crate) fn match_get_channel_7b2ebe45652468968(
    _result: ::std::result::Result<&crate::operation::get_channel::GetChannelOutput, &crate::operation::get_channel::GetChannelError>,
) -> bool {
    fn path_traversal<'a>(_output: &'a crate::operation::get_channel::GetChannelOutput) -> ::std::option::Option<&'a crate::types::ChannelStatus> {
        let _fld_1 = &_output.channel_status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "DELETE_FAILED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"channelStatus","expected":"DELETING","comparator":"stringEquals"}}
pub(crate) fn match_get_channel_606fdd81b22ef0000(
    _result: ::std::result::Result<&crate::operation::get_channel::GetChannelOutput, &crate::operation::get_channel::GetChannelError>,
) -> bool {
    fn path_traversal<'a>(_output: &'a crate::operation::get_channel::GetChannelOutput) -> ::std::option::Option<&'a crate::types::ChannelStatus> {
        let _fld_1 = &_output.channel_status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "DELETING";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"CREATED","comparator":"stringEquals"}}
pub(crate) fn match_get_space_2b785f05e541db69e(
    _result: ::std::result::Result<&crate::operation::get_space::GetSpaceOutput, &crate::operation::get_space::GetSpaceError>,
) -> bool {
    fn path_traversal<'a>(_output: &'a crate::operation::get_space::GetSpaceOutput) -> ::std::option::Option<&'a ::std::string::String> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "CREATED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"CREATE_FAILED","comparator":"stringEquals"}}
pub(crate) fn match_get_space_00d7b810548bbcb91(
    _result: ::std::result::Result<&crate::operation::get_space::GetSpaceOutput, &crate::operation::get_space::GetSpaceError>,
) -> bool {
    fn path_traversal<'a>(_output: &'a crate::operation::get_space::GetSpaceOutput) -> ::std::option::Option<&'a ::std::string::String> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "CREATE_FAILED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"CREATING","comparator":"stringEquals"}}
pub(crate) fn match_get_space_ab538ef2e7cb9d2b4(
    _result: ::std::result::Result<&crate::operation::get_space::GetSpaceOutput, &crate::operation::get_space::GetSpaceError>,
) -> bool {
    fn path_traversal<'a>(_output: &'a crate::operation::get_space::GetSpaceOutput) -> ::std::option::Option<&'a ::std::string::String> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "CREATING";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"errorType":"ResourceNotFoundException"}
pub(crate) fn match_get_space_1cce2c05524fb92d4(
    _result: ::std::result::Result<&crate::operation::get_space::GetSpaceOutput, &crate::operation::get_space::GetSpaceError>,
) -> bool {
    if let ::std::result::Result::Err(err) = _result {
        if let ::std::option::Option::Some(code) = ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(err) {
            return code == "ResourceNotFoundException";
        }
    }
    false
}

/// Matcher union: {"output":{"path":"status","expected":"DELETED","comparator":"stringEquals"}}
pub(crate) fn match_get_space_8edac4c36e2a37f69(
    _result: ::std::result::Result<&crate::operation::get_space::GetSpaceOutput, &crate::operation::get_space::GetSpaceError>,
) -> bool {
    fn path_traversal<'a>(_output: &'a crate::operation::get_space::GetSpaceOutput) -> ::std::option::Option<&'a ::std::string::String> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "DELETED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"DELETE_FAILED","comparator":"stringEquals"}}
pub(crate) fn match_get_space_184758db81b6271a8(
    _result: ::std::result::Result<&crate::operation::get_space::GetSpaceOutput, &crate::operation::get_space::GetSpaceError>,
) -> bool {
    fn path_traversal<'a>(_output: &'a crate::operation::get_space::GetSpaceOutput) -> ::std::option::Option<&'a ::std::string::String> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "DELETE_FAILED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"DELETING","comparator":"stringEquals"}}
pub(crate) fn match_get_space_ac9cf40eec4f10ab5(
    _result: ::std::result::Result<&crate::operation::get_space::GetSpaceOutput, &crate::operation::get_space::GetSpaceError>,
) -> bool {
    fn path_traversal<'a>(_output: &'a crate::operation::get_space::GetSpaceOutput) -> ::std::option::Option<&'a ::std::string::String> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "DELETING";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}
