// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure that contains some information about a channel in a private re:Post.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct ChannelData {
    /// <p>The unique ID of the private re:Post.</p>
    pub space_id: ::std::string::String,
    /// <p>The unique ID of the private re:Post channel.</p>
    pub channel_id: ::std::string::String,
    /// <p>The name for the channel. This must be unique per private re:Post.</p>
    pub channel_name: ::std::string::String,
    /// <p>A description for the channel. This is used only to help you identify this channel.</p>
    pub channel_description: ::std::option::Option<::std::string::String>,
    /// <p>The date when the channel was created.</p>
    pub create_date_time: ::aws_smithy_types::DateTime,
    /// <p>The date when the channel was deleted.</p>
    pub delete_date_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The status pf the channel.</p>
    pub channel_status: crate::types::ChannelStatus,
    /// <p>The number of users that are part of the channel.</p>
    pub user_count: i32,
    /// <p>The number of groups that are part of the channel.</p>
    pub group_count: i32,
}
impl ChannelData {
    /// <p>The unique ID of the private re:Post.</p>
    pub fn space_id(&self) -> &str {
        use std::ops::Deref;
        self.space_id.deref()
    }
    /// <p>The unique ID of the private re:Post channel.</p>
    pub fn channel_id(&self) -> &str {
        use std::ops::Deref;
        self.channel_id.deref()
    }
    /// <p>The name for the channel. This must be unique per private re:Post.</p>
    pub fn channel_name(&self) -> &str {
        use std::ops::Deref;
        self.channel_name.deref()
    }
    /// <p>A description for the channel. This is used only to help you identify this channel.</p>
    pub fn channel_description(&self) -> ::std::option::Option<&str> {
        self.channel_description.as_deref()
    }
    /// <p>The date when the channel was created.</p>
    pub fn create_date_time(&self) -> &::aws_smithy_types::DateTime {
        &self.create_date_time
    }
    /// <p>The date when the channel was deleted.</p>
    pub fn delete_date_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.delete_date_time.as_ref()
    }
    /// <p>The status pf the channel.</p>
    pub fn channel_status(&self) -> &crate::types::ChannelStatus {
        &self.channel_status
    }
    /// <p>The number of users that are part of the channel.</p>
    pub fn user_count(&self) -> i32 {
        self.user_count
    }
    /// <p>The number of groups that are part of the channel.</p>
    pub fn group_count(&self) -> i32 {
        self.group_count
    }
}
impl ::std::fmt::Debug for ChannelData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ChannelData");
        formatter.field("space_id", &self.space_id);
        formatter.field("channel_id", &self.channel_id);
        formatter.field("channel_name", &"*** Sensitive Data Redacted ***");
        formatter.field("channel_description", &"*** Sensitive Data Redacted ***");
        formatter.field("create_date_time", &self.create_date_time);
        formatter.field("delete_date_time", &self.delete_date_time);
        formatter.field("channel_status", &self.channel_status);
        formatter.field("user_count", &self.user_count);
        formatter.field("group_count", &self.group_count);
        formatter.finish()
    }
}
impl ChannelData {
    /// Creates a new builder-style object to manufacture [`ChannelData`](crate::types::ChannelData).
    pub fn builder() -> crate::types::builders::ChannelDataBuilder {
        crate::types::builders::ChannelDataBuilder::default()
    }
}

/// A builder for [`ChannelData`](crate::types::ChannelData).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct ChannelDataBuilder {
    pub(crate) space_id: ::std::option::Option<::std::string::String>,
    pub(crate) channel_id: ::std::option::Option<::std::string::String>,
    pub(crate) channel_name: ::std::option::Option<::std::string::String>,
    pub(crate) channel_description: ::std::option::Option<::std::string::String>,
    pub(crate) create_date_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) delete_date_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) channel_status: ::std::option::Option<crate::types::ChannelStatus>,
    pub(crate) user_count: ::std::option::Option<i32>,
    pub(crate) group_count: ::std::option::Option<i32>,
}
impl ChannelDataBuilder {
    /// <p>The unique ID of the private re:Post.</p>
    /// This field is required.
    pub fn space_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.space_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique ID of the private re:Post.</p>
    pub fn set_space_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.space_id = input;
        self
    }
    /// <p>The unique ID of the private re:Post.</p>
    pub fn get_space_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.space_id
    }
    /// <p>The unique ID of the private re:Post channel.</p>
    /// This field is required.
    pub fn channel_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.channel_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique ID of the private re:Post channel.</p>
    pub fn set_channel_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.channel_id = input;
        self
    }
    /// <p>The unique ID of the private re:Post channel.</p>
    pub fn get_channel_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.channel_id
    }
    /// <p>The name for the channel. This must be unique per private re:Post.</p>
    /// This field is required.
    pub fn channel_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.channel_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name for the channel. This must be unique per private re:Post.</p>
    pub fn set_channel_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.channel_name = input;
        self
    }
    /// <p>The name for the channel. This must be unique per private re:Post.</p>
    pub fn get_channel_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.channel_name
    }
    /// <p>A description for the channel. This is used only to help you identify this channel.</p>
    pub fn channel_description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.channel_description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description for the channel. This is used only to help you identify this channel.</p>
    pub fn set_channel_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.channel_description = input;
        self
    }
    /// <p>A description for the channel. This is used only to help you identify this channel.</p>
    pub fn get_channel_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.channel_description
    }
    /// <p>The date when the channel was created.</p>
    /// This field is required.
    pub fn create_date_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.create_date_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date when the channel was created.</p>
    pub fn set_create_date_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.create_date_time = input;
        self
    }
    /// <p>The date when the channel was created.</p>
    pub fn get_create_date_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.create_date_time
    }
    /// <p>The date when the channel was deleted.</p>
    pub fn delete_date_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.delete_date_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date when the channel was deleted.</p>
    pub fn set_delete_date_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.delete_date_time = input;
        self
    }
    /// <p>The date when the channel was deleted.</p>
    pub fn get_delete_date_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.delete_date_time
    }
    /// <p>The status pf the channel.</p>
    /// This field is required.
    pub fn channel_status(mut self, input: crate::types::ChannelStatus) -> Self {
        self.channel_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status pf the channel.</p>
    pub fn set_channel_status(mut self, input: ::std::option::Option<crate::types::ChannelStatus>) -> Self {
        self.channel_status = input;
        self
    }
    /// <p>The status pf the channel.</p>
    pub fn get_channel_status(&self) -> &::std::option::Option<crate::types::ChannelStatus> {
        &self.channel_status
    }
    /// <p>The number of users that are part of the channel.</p>
    /// This field is required.
    pub fn user_count(mut self, input: i32) -> Self {
        self.user_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of users that are part of the channel.</p>
    pub fn set_user_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.user_count = input;
        self
    }
    /// <p>The number of users that are part of the channel.</p>
    pub fn get_user_count(&self) -> &::std::option::Option<i32> {
        &self.user_count
    }
    /// <p>The number of groups that are part of the channel.</p>
    /// This field is required.
    pub fn group_count(mut self, input: i32) -> Self {
        self.group_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of groups that are part of the channel.</p>
    pub fn set_group_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.group_count = input;
        self
    }
    /// <p>The number of groups that are part of the channel.</p>
    pub fn get_group_count(&self) -> &::std::option::Option<i32> {
        &self.group_count
    }
    /// Consumes the builder and constructs a [`ChannelData`](crate::types::ChannelData).
    /// This method will fail if any of the following fields are not set:
    /// - [`space_id`](crate::types::builders::ChannelDataBuilder::space_id)
    /// - [`channel_id`](crate::types::builders::ChannelDataBuilder::channel_id)
    /// - [`channel_name`](crate::types::builders::ChannelDataBuilder::channel_name)
    /// - [`create_date_time`](crate::types::builders::ChannelDataBuilder::create_date_time)
    /// - [`channel_status`](crate::types::builders::ChannelDataBuilder::channel_status)
    /// - [`user_count`](crate::types::builders::ChannelDataBuilder::user_count)
    /// - [`group_count`](crate::types::builders::ChannelDataBuilder::group_count)
    pub fn build(self) -> ::std::result::Result<crate::types::ChannelData, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ChannelData {
            space_id: self.space_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "space_id",
                    "space_id was not specified but it is required when building ChannelData",
                )
            })?,
            channel_id: self.channel_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "channel_id",
                    "channel_id was not specified but it is required when building ChannelData",
                )
            })?,
            channel_name: self.channel_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "channel_name",
                    "channel_name was not specified but it is required when building ChannelData",
                )
            })?,
            channel_description: self.channel_description,
            create_date_time: self.create_date_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "create_date_time",
                    "create_date_time was not specified but it is required when building ChannelData",
                )
            })?,
            delete_date_time: self.delete_date_time,
            channel_status: self.channel_status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "channel_status",
                    "channel_status was not specified but it is required when building ChannelData",
                )
            })?,
            user_count: self.user_count.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "user_count",
                    "user_count was not specified but it is required when building ChannelData",
                )
            })?,
            group_count: self.group_count.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "group_count",
                    "group_count was not specified but it is required when building ChannelData",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for ChannelDataBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ChannelDataBuilder");
        formatter.field("space_id", &self.space_id);
        formatter.field("channel_id", &self.channel_id);
        formatter.field("channel_name", &"*** Sensitive Data Redacted ***");
        formatter.field("channel_description", &"*** Sensitive Data Redacted ***");
        formatter.field("create_date_time", &self.create_date_time);
        formatter.field("delete_date_time", &self.delete_date_time);
        formatter.field("channel_status", &self.channel_status);
        formatter.field("user_count", &self.user_count);
        formatter.field("group_count", &self.group_count);
        formatter.finish()
    }
}
