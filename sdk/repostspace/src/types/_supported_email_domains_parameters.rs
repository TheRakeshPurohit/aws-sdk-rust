// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p></p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SupportedEmailDomainsParameters {
    /// <p></p>
    pub enabled: ::std::option::Option<crate::types::FeatureEnableParameter>,
    /// <p></p>
    pub allowed_domains: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl SupportedEmailDomainsParameters {
    /// <p></p>
    pub fn enabled(&self) -> ::std::option::Option<&crate::types::FeatureEnableParameter> {
        self.enabled.as_ref()
    }
    /// <p></p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.allowed_domains.is_none()`.
    pub fn allowed_domains(&self) -> &[::std::string::String] {
        self.allowed_domains.as_deref().unwrap_or_default()
    }
}
impl SupportedEmailDomainsParameters {
    /// Creates a new builder-style object to manufacture [`SupportedEmailDomainsParameters`](crate::types::SupportedEmailDomainsParameters).
    pub fn builder() -> crate::types::builders::SupportedEmailDomainsParametersBuilder {
        crate::types::builders::SupportedEmailDomainsParametersBuilder::default()
    }
}

/// A builder for [`SupportedEmailDomainsParameters`](crate::types::SupportedEmailDomainsParameters).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SupportedEmailDomainsParametersBuilder {
    pub(crate) enabled: ::std::option::Option<crate::types::FeatureEnableParameter>,
    pub(crate) allowed_domains: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl SupportedEmailDomainsParametersBuilder {
    /// <p></p>
    pub fn enabled(mut self, input: crate::types::FeatureEnableParameter) -> Self {
        self.enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p></p>
    pub fn set_enabled(mut self, input: ::std::option::Option<crate::types::FeatureEnableParameter>) -> Self {
        self.enabled = input;
        self
    }
    /// <p></p>
    pub fn get_enabled(&self) -> &::std::option::Option<crate::types::FeatureEnableParameter> {
        &self.enabled
    }
    /// Appends an item to `allowed_domains`.
    ///
    /// To override the contents of this collection use [`set_allowed_domains`](Self::set_allowed_domains).
    ///
    /// <p></p>
    pub fn allowed_domains(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.allowed_domains.unwrap_or_default();
        v.push(input.into());
        self.allowed_domains = ::std::option::Option::Some(v);
        self
    }
    /// <p></p>
    pub fn set_allowed_domains(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.allowed_domains = input;
        self
    }
    /// <p></p>
    pub fn get_allowed_domains(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.allowed_domains
    }
    /// Consumes the builder and constructs a [`SupportedEmailDomainsParameters`](crate::types::SupportedEmailDomainsParameters).
    pub fn build(self) -> crate::types::SupportedEmailDomainsParameters {
        crate::types::SupportedEmailDomainsParameters {
            enabled: self.enabled,
            allowed_domains: self.allowed_domains,
        }
    }
}
