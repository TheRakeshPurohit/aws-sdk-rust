// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The settings to enable CDN authorization headers in MediaPackage.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CdnAuthConfiguration {
    /// <p>The ARN for the secret in Secrets Manager that your CDN uses for authorization to access the endpoint.</p>
    pub cdn_identifier_secret_arns: ::std::vec::Vec<::std::string::String>,
    /// <p>The ARN for the IAM role that gives MediaPackage read access to Secrets Manager and KMS for CDN authorization.</p>
    pub secrets_role_arn: ::std::string::String,
}
impl CdnAuthConfiguration {
    /// <p>The ARN for the secret in Secrets Manager that your CDN uses for authorization to access the endpoint.</p>
    pub fn cdn_identifier_secret_arns(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.cdn_identifier_secret_arns.deref()
    }
    /// <p>The ARN for the IAM role that gives MediaPackage read access to Secrets Manager and KMS for CDN authorization.</p>
    pub fn secrets_role_arn(&self) -> &str {
        use std::ops::Deref;
        self.secrets_role_arn.deref()
    }
}
impl CdnAuthConfiguration {
    /// Creates a new builder-style object to manufacture [`CdnAuthConfiguration`](crate::types::CdnAuthConfiguration).
    pub fn builder() -> crate::types::builders::CdnAuthConfigurationBuilder {
        crate::types::builders::CdnAuthConfigurationBuilder::default()
    }
}

/// A builder for [`CdnAuthConfiguration`](crate::types::CdnAuthConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CdnAuthConfigurationBuilder {
    pub(crate) cdn_identifier_secret_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) secrets_role_arn: ::std::option::Option<::std::string::String>,
}
impl CdnAuthConfigurationBuilder {
    /// Appends an item to `cdn_identifier_secret_arns`.
    ///
    /// To override the contents of this collection use [`set_cdn_identifier_secret_arns`](Self::set_cdn_identifier_secret_arns).
    ///
    /// <p>The ARN for the secret in Secrets Manager that your CDN uses for authorization to access the endpoint.</p>
    pub fn cdn_identifier_secret_arns(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.cdn_identifier_secret_arns.unwrap_or_default();
        v.push(input.into());
        self.cdn_identifier_secret_arns = ::std::option::Option::Some(v);
        self
    }
    /// <p>The ARN for the secret in Secrets Manager that your CDN uses for authorization to access the endpoint.</p>
    pub fn set_cdn_identifier_secret_arns(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.cdn_identifier_secret_arns = input;
        self
    }
    /// <p>The ARN for the secret in Secrets Manager that your CDN uses for authorization to access the endpoint.</p>
    pub fn get_cdn_identifier_secret_arns(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.cdn_identifier_secret_arns
    }
    /// <p>The ARN for the IAM role that gives MediaPackage read access to Secrets Manager and KMS for CDN authorization.</p>
    /// This field is required.
    pub fn secrets_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.secrets_role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN for the IAM role that gives MediaPackage read access to Secrets Manager and KMS for CDN authorization.</p>
    pub fn set_secrets_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.secrets_role_arn = input;
        self
    }
    /// <p>The ARN for the IAM role that gives MediaPackage read access to Secrets Manager and KMS for CDN authorization.</p>
    pub fn get_secrets_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.secrets_role_arn
    }
    /// Consumes the builder and constructs a [`CdnAuthConfiguration`](crate::types::CdnAuthConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`cdn_identifier_secret_arns`](crate::types::builders::CdnAuthConfigurationBuilder::cdn_identifier_secret_arns)
    /// - [`secrets_role_arn`](crate::types::builders::CdnAuthConfigurationBuilder::secrets_role_arn)
    pub fn build(self) -> ::std::result::Result<crate::types::CdnAuthConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CdnAuthConfiguration {
            cdn_identifier_secret_arns: self.cdn_identifier_secret_arns.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "cdn_identifier_secret_arns",
                    "cdn_identifier_secret_arns was not specified but it is required when building CdnAuthConfiguration",
                )
            })?,
            secrets_role_arn: self.secrets_role_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "secrets_role_arn",
                    "secrets_role_arn was not specified but it is required when building CdnAuthConfiguration",
                )
            })?,
        })
    }
}
