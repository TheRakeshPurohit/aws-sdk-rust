// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_case::_create_case_output::CreateCaseOutputBuilder;

pub use crate::operation::create_case::_create_case_input::CreateCaseInputBuilder;

impl crate::operation::create_case::builders::CreateCaseInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_case::CreateCaseOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_case::CreateCaseError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_case();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateCase`.
///
/// <p>Creates a new case.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateCaseFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_case::builders::CreateCaseInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_case::CreateCaseOutput,
        crate::operation::create_case::CreateCaseError,
    > for CreateCaseFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_case::CreateCaseOutput,
            crate::operation::create_case::CreateCaseError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreateCaseFluentBuilder {
    /// Creates a new `CreateCaseFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateCase as a reference.
    pub fn as_input(&self) -> &crate::operation::create_case::builders::CreateCaseInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_case::CreateCaseOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_case::CreateCaseError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_case::CreateCase::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_case::CreateCase::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_case::CreateCaseOutput,
        crate::operation::create_case::CreateCaseError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <note>
    /// <p>The <code>clientToken</code> field is an idempotency key used to ensure that repeated attempts for a single action will be ignored by the server during retries. A caller supplied unique ID (typically a UUID) should be provided.</p>
    /// </note>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <note>
    /// <p>The <code>clientToken</code> field is an idempotency key used to ensure that repeated attempts for a single action will be ignored by the server during retries. A caller supplied unique ID (typically a UUID) should be provided.</p>
    /// </note>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
    /// <note>
    /// <p>The <code>clientToken</code> field is an idempotency key used to ensure that repeated attempts for a single action will be ignored by the server during retries. A caller supplied unique ID (typically a UUID) should be provided.</p>
    /// </note>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_client_token()
    }
    /// <p>Required element used in combination with CreateCase to identify the resolver type.</p>
    pub fn resolver_type(mut self, input: crate::types::ResolverType) -> Self {
        self.inner = self.inner.resolver_type(input);
        self
    }
    /// <p>Required element used in combination with CreateCase to identify the resolver type.</p>
    pub fn set_resolver_type(mut self, input: ::std::option::Option<crate::types::ResolverType>) -> Self {
        self.inner = self.inner.set_resolver_type(input);
        self
    }
    /// <p>Required element used in combination with CreateCase to identify the resolver type.</p>
    pub fn get_resolver_type(&self) -> &::std::option::Option<crate::types::ResolverType> {
        self.inner.get_resolver_type()
    }
    /// <p>Required element used in combination with CreateCase to provide a title for the new case.</p>
    pub fn title(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.title(input.into());
        self
    }
    /// <p>Required element used in combination with CreateCase to provide a title for the new case.</p>
    pub fn set_title(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_title(input);
        self
    }
    /// <p>Required element used in combination with CreateCase to provide a title for the new case.</p>
    pub fn get_title(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_title()
    }
    /// <p>Required element used in combination with CreateCase</p>
    /// <p>to provide a description for the new case.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>Required element used in combination with CreateCase</p>
    /// <p>to provide a description for the new case.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>Required element used in combination with CreateCase</p>
    /// <p>to provide a description for the new case.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_description()
    }
    /// <p>Required element used in combination with CreateCase to provide an engagement type for the new cases. Available engagement types include Security Incident | Investigation</p>
    pub fn engagement_type(mut self, input: crate::types::EngagementType) -> Self {
        self.inner = self.inner.engagement_type(input);
        self
    }
    /// <p>Required element used in combination with CreateCase to provide an engagement type for the new cases. Available engagement types include Security Incident | Investigation</p>
    pub fn set_engagement_type(mut self, input: ::std::option::Option<crate::types::EngagementType>) -> Self {
        self.inner = self.inner.set_engagement_type(input);
        self
    }
    /// <p>Required element used in combination with CreateCase to provide an engagement type for the new cases. Available engagement types include Security Incident | Investigation</p>
    pub fn get_engagement_type(&self) -> &::std::option::Option<crate::types::EngagementType> {
        self.inner.get_engagement_type()
    }
    /// <p>Required element used in combination with CreateCase to provide an initial start date for the unauthorized activity.</p>
    pub fn reported_incident_start_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.reported_incident_start_date(input);
        self
    }
    /// <p>Required element used in combination with CreateCase to provide an initial start date for the unauthorized activity.</p>
    pub fn set_reported_incident_start_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.inner = self.inner.set_reported_incident_start_date(input);
        self
    }
    /// <p>Required element used in combination with CreateCase to provide an initial start date for the unauthorized activity.</p>
    pub fn get_reported_incident_start_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        self.inner.get_reported_incident_start_date()
    }
    ///
    /// Appends an item to `impactedAccounts`.
    ///
    /// To override the contents of this collection use [`set_impacted_accounts`](Self::set_impacted_accounts).
    ///
    /// <p>Required element used in combination with CreateCase to provide a list of impacted accounts.</p><note>
    /// <p>AWS account ID's may appear less than 12 characters and need to be zero-prepended. An example would be <code>123123123</code> which is nine digits, and with zero-prepend would be <code>000123123123</code>. Not zero-prepending to 12 digits could result in errors.</p>
    /// </note>
    pub fn impacted_accounts(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.impacted_accounts(input.into());
        self
    }
    /// <p>Required element used in combination with CreateCase to provide a list of impacted accounts.</p><note>
    /// <p>AWS account ID's may appear less than 12 characters and need to be zero-prepended. An example would be <code>123123123</code> which is nine digits, and with zero-prepend would be <code>000123123123</code>. Not zero-prepending to 12 digits could result in errors.</p>
    /// </note>
    pub fn set_impacted_accounts(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_impacted_accounts(input);
        self
    }
    /// <p>Required element used in combination with CreateCase to provide a list of impacted accounts.</p><note>
    /// <p>AWS account ID's may appear less than 12 characters and need to be zero-prepended. An example would be <code>123123123</code> which is nine digits, and with zero-prepend would be <code>000123123123</code>. Not zero-prepending to 12 digits could result in errors.</p>
    /// </note>
    pub fn get_impacted_accounts(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_impacted_accounts()
    }
    ///
    /// Appends an item to `watchers`.
    ///
    /// To override the contents of this collection use [`set_watchers`](Self::set_watchers).
    ///
    /// <p>Required element used in combination with CreateCase to provide a list of entities to receive notifications for case updates.</p>
    pub fn watchers(mut self, input: crate::types::Watcher) -> Self {
        self.inner = self.inner.watchers(input);
        self
    }
    /// <p>Required element used in combination with CreateCase to provide a list of entities to receive notifications for case updates.</p>
    pub fn set_watchers(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Watcher>>) -> Self {
        self.inner = self.inner.set_watchers(input);
        self
    }
    /// <p>Required element used in combination with CreateCase to provide a list of entities to receive notifications for case updates.</p>
    pub fn get_watchers(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Watcher>> {
        self.inner.get_watchers()
    }
    ///
    /// Appends an item to `threatActorIpAddresses`.
    ///
    /// To override the contents of this collection use [`set_threat_actor_ip_addresses`](Self::set_threat_actor_ip_addresses).
    ///
    /// <p>An optional element used in combination with CreateCase to provide a list of suspicious internet protocol addresses associated with unauthorized activity.</p>
    pub fn threat_actor_ip_addresses(mut self, input: crate::types::ThreatActorIp) -> Self {
        self.inner = self.inner.threat_actor_ip_addresses(input);
        self
    }
    /// <p>An optional element used in combination with CreateCase to provide a list of suspicious internet protocol addresses associated with unauthorized activity.</p>
    pub fn set_threat_actor_ip_addresses(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ThreatActorIp>>) -> Self {
        self.inner = self.inner.set_threat_actor_ip_addresses(input);
        self
    }
    /// <p>An optional element used in combination with CreateCase to provide a list of suspicious internet protocol addresses associated with unauthorized activity.</p>
    pub fn get_threat_actor_ip_addresses(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ThreatActorIp>> {
        self.inner.get_threat_actor_ip_addresses()
    }
    ///
    /// Appends an item to `impactedServices`.
    ///
    /// To override the contents of this collection use [`set_impacted_services`](Self::set_impacted_services).
    ///
    /// <p>An optional element used in combination with CreateCase to provide a list of services impacted.</p>
    pub fn impacted_services(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.impacted_services(input.into());
        self
    }
    /// <p>An optional element used in combination with CreateCase to provide a list of services impacted.</p>
    pub fn set_impacted_services(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_impacted_services(input);
        self
    }
    /// <p>An optional element used in combination with CreateCase to provide a list of services impacted.</p>
    pub fn get_impacted_services(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_impacted_services()
    }
    ///
    /// Appends an item to `impactedAwsRegions`.
    ///
    /// To override the contents of this collection use [`set_impacted_aws_regions`](Self::set_impacted_aws_regions).
    ///
    /// <p>An optional element used in combination with CreateCase to provide a list of impacted regions.</p>
    pub fn impacted_aws_regions(mut self, input: crate::types::ImpactedAwsRegion) -> Self {
        self.inner = self.inner.impacted_aws_regions(input);
        self
    }
    /// <p>An optional element used in combination with CreateCase to provide a list of impacted regions.</p>
    pub fn set_impacted_aws_regions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ImpactedAwsRegion>>) -> Self {
        self.inner = self.inner.set_impacted_aws_regions(input);
        self
    }
    /// <p>An optional element used in combination with CreateCase to provide a list of impacted regions.</p>
    pub fn get_impacted_aws_regions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ImpactedAwsRegion>> {
        self.inner.get_impacted_aws_regions()
    }
    ///
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>An optional element used in combination with CreateCase to add customer specified tags to a case.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.tags(k.into(), v.into());
        self
    }
    /// <p>An optional element used in combination with CreateCase to add customer specified tags to a case.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>An optional element used in combination with CreateCase to add customer specified tags to a case.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.inner.get_tags()
    }
}
