// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_membership::_update_membership_output::UpdateMembershipOutputBuilder;

pub use crate::operation::update_membership::_update_membership_input::UpdateMembershipInputBuilder;

impl crate::operation::update_membership::builders::UpdateMembershipInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::update_membership::UpdateMembershipOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_membership::UpdateMembershipError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.update_membership();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `UpdateMembership`.
///
/// <p>Updates membership configuration.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct UpdateMembershipFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_membership::builders::UpdateMembershipInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::update_membership::UpdateMembershipOutput,
        crate::operation::update_membership::UpdateMembershipError,
    > for UpdateMembershipFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::update_membership::UpdateMembershipOutput,
            crate::operation::update_membership::UpdateMembershipError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl UpdateMembershipFluentBuilder {
    /// Creates a new `UpdateMembershipFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the UpdateMembership as a reference.
    pub fn as_input(&self) -> &crate::operation::update_membership::builders::UpdateMembershipInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_membership::UpdateMembershipOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_membership::UpdateMembershipError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::update_membership::UpdateMembership::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::update_membership::UpdateMembership::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::update_membership::UpdateMembershipOutput,
        crate::operation::update_membership::UpdateMembershipError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>Required element for UpdateMembership to identify the membership to update.</p>
    pub fn membership_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.membership_id(input.into());
        self
    }
    /// <p>Required element for UpdateMembership to identify the membership to update.</p>
    pub fn set_membership_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_membership_id(input);
        self
    }
    /// <p>Required element for UpdateMembership to identify the membership to update.</p>
    pub fn get_membership_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_membership_id()
    }
    /// <p>Optional element for UpdateMembership to update the membership name.</p>
    pub fn membership_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.membership_name(input.into());
        self
    }
    /// <p>Optional element for UpdateMembership to update the membership name.</p>
    pub fn set_membership_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_membership_name(input);
        self
    }
    /// <p>Optional element for UpdateMembership to update the membership name.</p>
    pub fn get_membership_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_membership_name()
    }
    ///
    /// Appends an item to `incidentResponseTeam`.
    ///
    /// To override the contents of this collection use [`set_incident_response_team`](Self::set_incident_response_team).
    ///
    /// <p>Optional element for UpdateMembership to update the membership name.</p>
    pub fn incident_response_team(mut self, input: crate::types::IncidentResponder) -> Self {
        self.inner = self.inner.incident_response_team(input);
        self
    }
    /// <p>Optional element for UpdateMembership to update the membership name.</p>
    pub fn set_incident_response_team(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::IncidentResponder>>) -> Self {
        self.inner = self.inner.set_incident_response_team(input);
        self
    }
    /// <p>Optional element for UpdateMembership to update the membership name.</p>
    pub fn get_incident_response_team(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::IncidentResponder>> {
        self.inner.get_incident_response_team()
    }
    ///
    /// Appends an item to `optInFeatures`.
    ///
    /// To override the contents of this collection use [`set_opt_in_features`](Self::set_opt_in_features).
    ///
    /// <p>Optional element for UpdateMembership to enable or disable opt-in features for the service.</p>
    pub fn opt_in_features(mut self, input: crate::types::OptInFeature) -> Self {
        self.inner = self.inner.opt_in_features(input);
        self
    }
    /// <p>Optional element for UpdateMembership to enable or disable opt-in features for the service.</p>
    pub fn set_opt_in_features(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::OptInFeature>>) -> Self {
        self.inner = self.inner.set_opt_in_features(input);
        self
    }
    /// <p>Optional element for UpdateMembership to enable or disable opt-in features for the service.</p>
    pub fn get_opt_in_features(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::OptInFeature>> {
        self.inner.get_opt_in_features()
    }
    /// <p>The <code>membershipAccountsConfigurationsUpdate</code> field in the <code>UpdateMembershipRequest</code> structure allows you to update the configuration settings for accounts within a membership.</p>
    /// <p>This field is optional and contains a structure of type <code>MembershipAccountsConfigurationsUpdate </code> that specifies the updated account configurations for the membership.</p>
    pub fn membership_accounts_configurations_update(mut self, input: crate::types::MembershipAccountsConfigurationsUpdate) -> Self {
        self.inner = self.inner.membership_accounts_configurations_update(input);
        self
    }
    /// <p>The <code>membershipAccountsConfigurationsUpdate</code> field in the <code>UpdateMembershipRequest</code> structure allows you to update the configuration settings for accounts within a membership.</p>
    /// <p>This field is optional and contains a structure of type <code>MembershipAccountsConfigurationsUpdate </code> that specifies the updated account configurations for the membership.</p>
    pub fn set_membership_accounts_configurations_update(
        mut self,
        input: ::std::option::Option<crate::types::MembershipAccountsConfigurationsUpdate>,
    ) -> Self {
        self.inner = self.inner.set_membership_accounts_configurations_update(input);
        self
    }
    /// <p>The <code>membershipAccountsConfigurationsUpdate</code> field in the <code>UpdateMembershipRequest</code> structure allows you to update the configuration settings for accounts within a membership.</p>
    /// <p>This field is optional and contains a structure of type <code>MembershipAccountsConfigurationsUpdate </code> that specifies the updated account configurations for the membership.</p>
    pub fn get_membership_accounts_configurations_update(&self) -> &::std::option::Option<crate::types::MembershipAccountsConfigurationsUpdate> {
        self.inner.get_membership_accounts_configurations_update()
    }
    /// <p>The <code>undoMembershipCancellation</code> parameter is a boolean flag that indicates whether to reverse a previously requested membership cancellation. When set to true, this will revoke the cancellation request and maintain the membership status.</p>
    /// <p>This parameter is optional and can be used in scenarios where you need to restore a membership that was marked for cancellation but hasn't been fully terminated yet.</p>
    /// <ul>
    /// <li>
    /// <p>If set to <code>true</code>, the cancellation request will be revoked</p></li>
    /// <li>
    /// <p>If set to <code>false</code> the service will throw a ValidationException.</p></li>
    /// </ul>
    pub fn undo_membership_cancellation(mut self, input: bool) -> Self {
        self.inner = self.inner.undo_membership_cancellation(input);
        self
    }
    /// <p>The <code>undoMembershipCancellation</code> parameter is a boolean flag that indicates whether to reverse a previously requested membership cancellation. When set to true, this will revoke the cancellation request and maintain the membership status.</p>
    /// <p>This parameter is optional and can be used in scenarios where you need to restore a membership that was marked for cancellation but hasn't been fully terminated yet.</p>
    /// <ul>
    /// <li>
    /// <p>If set to <code>true</code>, the cancellation request will be revoked</p></li>
    /// <li>
    /// <p>If set to <code>false</code> the service will throw a ValidationException.</p></li>
    /// </ul>
    pub fn set_undo_membership_cancellation(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_undo_membership_cancellation(input);
        self
    }
    /// <p>The <code>undoMembershipCancellation</code> parameter is a boolean flag that indicates whether to reverse a previously requested membership cancellation. When set to true, this will revoke the cancellation request and maintain the membership status.</p>
    /// <p>This parameter is optional and can be used in scenarios where you need to restore a membership that was marked for cancellation but hasn't been fully terminated yet.</p>
    /// <ul>
    /// <li>
    /// <p>If set to <code>true</code>, the cancellation request will be revoked</p></li>
    /// <li>
    /// <p>If set to <code>false</code> the service will throw a ValidationException.</p></li>
    /// </ul>
    pub fn get_undo_membership_cancellation(&self) -> &::std::option::Option<bool> {
        self.inner.get_undo_membership_cancellation()
    }
}
