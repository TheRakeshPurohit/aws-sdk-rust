// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GetCaseAttachmentUploadUrlInput {
    /// <p>Required element for GetCaseAttachmentUploadUrl to identify the case ID for uploading an attachment.</p>
    pub case_id: ::std::option::Option<::std::string::String>,
    /// <p>Required element for GetCaseAttachmentUploadUrl to identify the file name of the attachment to upload.</p>
    pub file_name: ::std::option::Option<::std::string::String>,
    /// <p>Required element for GetCaseAttachmentUploadUrl to identify the size of the file attachment.</p>
    pub content_length: ::std::option::Option<i64>,
    /// <note>
    /// <p>The <code>clientToken</code> field is an idempotency key used to ensure that repeated attempts for a single action will be ignored by the server during retries. A caller supplied unique ID (typically a UUID) should be provided.</p>
    /// </note>
    pub client_token: ::std::option::Option<::std::string::String>,
}
impl GetCaseAttachmentUploadUrlInput {
    /// <p>Required element for GetCaseAttachmentUploadUrl to identify the case ID for uploading an attachment.</p>
    pub fn case_id(&self) -> ::std::option::Option<&str> {
        self.case_id.as_deref()
    }
    /// <p>Required element for GetCaseAttachmentUploadUrl to identify the file name of the attachment to upload.</p>
    pub fn file_name(&self) -> ::std::option::Option<&str> {
        self.file_name.as_deref()
    }
    /// <p>Required element for GetCaseAttachmentUploadUrl to identify the size of the file attachment.</p>
    pub fn content_length(&self) -> ::std::option::Option<i64> {
        self.content_length
    }
    /// <note>
    /// <p>The <code>clientToken</code> field is an idempotency key used to ensure that repeated attempts for a single action will be ignored by the server during retries. A caller supplied unique ID (typically a UUID) should be provided.</p>
    /// </note>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl ::std::fmt::Debug for GetCaseAttachmentUploadUrlInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetCaseAttachmentUploadUrlInput");
        formatter.field("case_id", &self.case_id);
        formatter.field("file_name", &"*** Sensitive Data Redacted ***");
        formatter.field("content_length", &self.content_length);
        formatter.field("client_token", &self.client_token);
        formatter.finish()
    }
}
impl GetCaseAttachmentUploadUrlInput {
    /// Creates a new builder-style object to manufacture [`GetCaseAttachmentUploadUrlInput`](crate::operation::get_case_attachment_upload_url::GetCaseAttachmentUploadUrlInput).
    pub fn builder() -> crate::operation::get_case_attachment_upload_url::builders::GetCaseAttachmentUploadUrlInputBuilder {
        crate::operation::get_case_attachment_upload_url::builders::GetCaseAttachmentUploadUrlInputBuilder::default()
    }
}

/// A builder for [`GetCaseAttachmentUploadUrlInput`](crate::operation::get_case_attachment_upload_url::GetCaseAttachmentUploadUrlInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct GetCaseAttachmentUploadUrlInputBuilder {
    pub(crate) case_id: ::std::option::Option<::std::string::String>,
    pub(crate) file_name: ::std::option::Option<::std::string::String>,
    pub(crate) content_length: ::std::option::Option<i64>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
}
impl GetCaseAttachmentUploadUrlInputBuilder {
    /// <p>Required element for GetCaseAttachmentUploadUrl to identify the case ID for uploading an attachment.</p>
    /// This field is required.
    pub fn case_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.case_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Required element for GetCaseAttachmentUploadUrl to identify the case ID for uploading an attachment.</p>
    pub fn set_case_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.case_id = input;
        self
    }
    /// <p>Required element for GetCaseAttachmentUploadUrl to identify the case ID for uploading an attachment.</p>
    pub fn get_case_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.case_id
    }
    /// <p>Required element for GetCaseAttachmentUploadUrl to identify the file name of the attachment to upload.</p>
    /// This field is required.
    pub fn file_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.file_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Required element for GetCaseAttachmentUploadUrl to identify the file name of the attachment to upload.</p>
    pub fn set_file_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.file_name = input;
        self
    }
    /// <p>Required element for GetCaseAttachmentUploadUrl to identify the file name of the attachment to upload.</p>
    pub fn get_file_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.file_name
    }
    /// <p>Required element for GetCaseAttachmentUploadUrl to identify the size of the file attachment.</p>
    /// This field is required.
    pub fn content_length(mut self, input: i64) -> Self {
        self.content_length = ::std::option::Option::Some(input);
        self
    }
    /// <p>Required element for GetCaseAttachmentUploadUrl to identify the size of the file attachment.</p>
    pub fn set_content_length(mut self, input: ::std::option::Option<i64>) -> Self {
        self.content_length = input;
        self
    }
    /// <p>Required element for GetCaseAttachmentUploadUrl to identify the size of the file attachment.</p>
    pub fn get_content_length(&self) -> &::std::option::Option<i64> {
        &self.content_length
    }
    /// <note>
    /// <p>The <code>clientToken</code> field is an idempotency key used to ensure that repeated attempts for a single action will be ignored by the server during retries. A caller supplied unique ID (typically a UUID) should be provided.</p>
    /// </note>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <note>
    /// <p>The <code>clientToken</code> field is an idempotency key used to ensure that repeated attempts for a single action will be ignored by the server during retries. A caller supplied unique ID (typically a UUID) should be provided.</p>
    /// </note>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <note>
    /// <p>The <code>clientToken</code> field is an idempotency key used to ensure that repeated attempts for a single action will be ignored by the server during retries. A caller supplied unique ID (typically a UUID) should be provided.</p>
    /// </note>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Consumes the builder and constructs a [`GetCaseAttachmentUploadUrlInput`](crate::operation::get_case_attachment_upload_url::GetCaseAttachmentUploadUrlInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_case_attachment_upload_url::GetCaseAttachmentUploadUrlInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::get_case_attachment_upload_url::GetCaseAttachmentUploadUrlInput {
            case_id: self.case_id,
            file_name: self.file_name,
            content_length: self.content_length,
            client_token: self.client_token,
        })
    }
}
impl ::std::fmt::Debug for GetCaseAttachmentUploadUrlInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetCaseAttachmentUploadUrlInputBuilder");
        formatter.field("case_id", &self.case_id);
        formatter.field("file_name", &"*** Sensitive Data Redacted ***");
        formatter.field("content_length", &self.content_length);
        formatter.field("client_token", &self.client_token);
        formatter.finish()
    }
}
