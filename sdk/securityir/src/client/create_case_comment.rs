// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateCaseComment`](crate::operation::create_case_comment::builders::CreateCaseCommentFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`case_id(impl Into<String>)`](crate::operation::create_case_comment::builders::CreateCaseCommentFluentBuilder::case_id) / [`set_case_id(Option<String>)`](crate::operation::create_case_comment::builders::CreateCaseCommentFluentBuilder::set_case_id):<br>required: **true**<br><p>Required element used in combination with CreateCaseComment to specify a case ID.</p><br>
    ///   - [`client_token(impl Into<String>)`](crate::operation::create_case_comment::builders::CreateCaseCommentFluentBuilder::client_token) / [`set_client_token(Option<String>)`](crate::operation::create_case_comment::builders::CreateCaseCommentFluentBuilder::set_client_token):<br>required: **false**<br><note>  <p>The <code>clientToken</code> field is an idempotency key used to ensure that repeated attempts for a single action will be ignored by the server during retries. A caller supplied unique ID (typically a UUID) should be provided.</p> </note><br>
    ///   - [`body(impl Into<String>)`](crate::operation::create_case_comment::builders::CreateCaseCommentFluentBuilder::body) / [`set_body(Option<String>)`](crate::operation::create_case_comment::builders::CreateCaseCommentFluentBuilder::set_body):<br>required: **true**<br><p>Required element used in combination with CreateCaseComment to add content for the new comment.</p><br>
    /// - On success, responds with [`CreateCaseCommentOutput`](crate::operation::create_case_comment::CreateCaseCommentOutput) with field(s):
    ///   - [`comment_id(String)`](crate::operation::create_case_comment::CreateCaseCommentOutput::comment_id): <p>Response element indicating the new comment ID.</p>
    /// - On failure, responds with [`SdkError<CreateCaseCommentError>`](crate::operation::create_case_comment::CreateCaseCommentError)
    pub fn create_case_comment(&self) -> crate::operation::create_case_comment::builders::CreateCaseCommentFluentBuilder {
        crate::operation::create_case_comment::builders::CreateCaseCommentFluentBuilder::new(self.handle.clone())
    }
}
