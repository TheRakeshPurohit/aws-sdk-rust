// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains details about the validation errors that occurred when generating or enforcing an <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_effective.html">effective policy</a>, such as which policies contributed to the error and location of the error.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EffectivePolicyValidationError {
    /// <p>The error code for the validation error. For example, <code>ELEMENTS_TOO_MANY</code>.</p>
    pub error_code: ::std::option::Option<::std::string::String>,
    /// <p>The error message for the validation error.</p>
    pub error_message: ::std::option::Option<::std::string::String>,
    /// <p>The path within the effective policy where the validation error occurred.</p>
    pub path_to_error: ::std::option::Option<::std::string::String>,
    /// <p>The individual policies <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_inheritance_mgmt.html">inherited</a> and <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_policies_attach.html">attached</a> to the account which contributed to the validation error.</p>
    pub contributing_policies: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl EffectivePolicyValidationError {
    /// <p>The error code for the validation error. For example, <code>ELEMENTS_TOO_MANY</code>.</p>
    pub fn error_code(&self) -> ::std::option::Option<&str> {
        self.error_code.as_deref()
    }
    /// <p>The error message for the validation error.</p>
    pub fn error_message(&self) -> ::std::option::Option<&str> {
        self.error_message.as_deref()
    }
    /// <p>The path within the effective policy where the validation error occurred.</p>
    pub fn path_to_error(&self) -> ::std::option::Option<&str> {
        self.path_to_error.as_deref()
    }
    /// <p>The individual policies <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_inheritance_mgmt.html">inherited</a> and <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_policies_attach.html">attached</a> to the account which contributed to the validation error.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.contributing_policies.is_none()`.
    pub fn contributing_policies(&self) -> &[::std::string::String] {
        self.contributing_policies.as_deref().unwrap_or_default()
    }
}
impl EffectivePolicyValidationError {
    /// Creates a new builder-style object to manufacture [`EffectivePolicyValidationError`](crate::types::EffectivePolicyValidationError).
    pub fn builder() -> crate::types::builders::EffectivePolicyValidationErrorBuilder {
        crate::types::builders::EffectivePolicyValidationErrorBuilder::default()
    }
}

/// A builder for [`EffectivePolicyValidationError`](crate::types::EffectivePolicyValidationError).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct EffectivePolicyValidationErrorBuilder {
    pub(crate) error_code: ::std::option::Option<::std::string::String>,
    pub(crate) error_message: ::std::option::Option<::std::string::String>,
    pub(crate) path_to_error: ::std::option::Option<::std::string::String>,
    pub(crate) contributing_policies: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl EffectivePolicyValidationErrorBuilder {
    /// <p>The error code for the validation error. For example, <code>ELEMENTS_TOO_MANY</code>.</p>
    pub fn error_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.error_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The error code for the validation error. For example, <code>ELEMENTS_TOO_MANY</code>.</p>
    pub fn set_error_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.error_code = input;
        self
    }
    /// <p>The error code for the validation error. For example, <code>ELEMENTS_TOO_MANY</code>.</p>
    pub fn get_error_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.error_code
    }
    /// <p>The error message for the validation error.</p>
    pub fn error_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.error_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The error message for the validation error.</p>
    pub fn set_error_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.error_message = input;
        self
    }
    /// <p>The error message for the validation error.</p>
    pub fn get_error_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.error_message
    }
    /// <p>The path within the effective policy where the validation error occurred.</p>
    pub fn path_to_error(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.path_to_error = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The path within the effective policy where the validation error occurred.</p>
    pub fn set_path_to_error(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.path_to_error = input;
        self
    }
    /// <p>The path within the effective policy where the validation error occurred.</p>
    pub fn get_path_to_error(&self) -> &::std::option::Option<::std::string::String> {
        &self.path_to_error
    }
    /// Appends an item to `contributing_policies`.
    ///
    /// To override the contents of this collection use [`set_contributing_policies`](Self::set_contributing_policies).
    ///
    /// <p>The individual policies <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_inheritance_mgmt.html">inherited</a> and <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_policies_attach.html">attached</a> to the account which contributed to the validation error.</p>
    pub fn contributing_policies(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.contributing_policies.unwrap_or_default();
        v.push(input.into());
        self.contributing_policies = ::std::option::Option::Some(v);
        self
    }
    /// <p>The individual policies <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_inheritance_mgmt.html">inherited</a> and <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_policies_attach.html">attached</a> to the account which contributed to the validation error.</p>
    pub fn set_contributing_policies(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.contributing_policies = input;
        self
    }
    /// <p>The individual policies <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_inheritance_mgmt.html">inherited</a> and <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_policies_attach.html">attached</a> to the account which contributed to the validation error.</p>
    pub fn get_contributing_policies(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.contributing_policies
    }
    /// Consumes the builder and constructs a [`EffectivePolicyValidationError`](crate::types::EffectivePolicyValidationError).
    pub fn build(self) -> crate::types::EffectivePolicyValidationError {
        crate::types::EffectivePolicyValidationError {
            error_code: self.error_code,
            error_message: self.error_message,
            path_to_error: self.path_to_error,
            contributing_policies: self.contributing_policies,
        }
    }
}
