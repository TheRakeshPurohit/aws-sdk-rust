// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListAccountsWithInvalidEffectivePolicyOutput {
    /// <p>The accounts in the organization which have an invalid effective policy for the specified policy type.</p>
    pub accounts: ::std::option::Option<::std::vec::Vec<crate::types::Account>>,
    /// <p>The specified policy type. One of the following values:</p>
    /// <ul>
    /// <li>
    /// <p><a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_declarative.html">DECLARATIVE_POLICY_EC2</a></p></li>
    /// <li>
    /// <p><a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_backup.html">BACKUP_POLICY</a></p></li>
    /// <li>
    /// <p><a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_tag-policies.html">TAG_POLICY</a></p></li>
    /// <li>
    /// <p><a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_chatbot.html">CHATBOT_POLICY</a></p></li>
    /// <li>
    /// <p><a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_ai-opt-out.html">AISERVICES_OPT_OUT_POLICY</a></p></li>
    /// <li>
    /// <p><a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_security_hub.html">SECURITYHUB_POLICY</a></p></li>
    /// </ul>
    pub policy_type: ::std::option::Option<crate::types::EffectivePolicyType>,
    /// <p>If present, indicates that more output is available than is included in the current response. Use this value in the <code>NextToken</code> request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the <code>NextToken</code> response element comes back as <code>null</code>.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListAccountsWithInvalidEffectivePolicyOutput {
    /// <p>The accounts in the organization which have an invalid effective policy for the specified policy type.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.accounts.is_none()`.
    pub fn accounts(&self) -> &[crate::types::Account] {
        self.accounts.as_deref().unwrap_or_default()
    }
    /// <p>The specified policy type. One of the following values:</p>
    /// <ul>
    /// <li>
    /// <p><a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_declarative.html">DECLARATIVE_POLICY_EC2</a></p></li>
    /// <li>
    /// <p><a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_backup.html">BACKUP_POLICY</a></p></li>
    /// <li>
    /// <p><a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_tag-policies.html">TAG_POLICY</a></p></li>
    /// <li>
    /// <p><a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_chatbot.html">CHATBOT_POLICY</a></p></li>
    /// <li>
    /// <p><a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_ai-opt-out.html">AISERVICES_OPT_OUT_POLICY</a></p></li>
    /// <li>
    /// <p><a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_security_hub.html">SECURITYHUB_POLICY</a></p></li>
    /// </ul>
    pub fn policy_type(&self) -> ::std::option::Option<&crate::types::EffectivePolicyType> {
        self.policy_type.as_ref()
    }
    /// <p>If present, indicates that more output is available than is included in the current response. Use this value in the <code>NextToken</code> request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the <code>NextToken</code> response element comes back as <code>null</code>.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ::aws_types::request_id::RequestId for ListAccountsWithInvalidEffectivePolicyOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListAccountsWithInvalidEffectivePolicyOutput {
    /// Creates a new builder-style object to manufacture [`ListAccountsWithInvalidEffectivePolicyOutput`](crate::operation::list_accounts_with_invalid_effective_policy::ListAccountsWithInvalidEffectivePolicyOutput).
    pub fn builder() -> crate::operation::list_accounts_with_invalid_effective_policy::builders::ListAccountsWithInvalidEffectivePolicyOutputBuilder {
        crate::operation::list_accounts_with_invalid_effective_policy::builders::ListAccountsWithInvalidEffectivePolicyOutputBuilder::default()
    }
}

/// A builder for [`ListAccountsWithInvalidEffectivePolicyOutput`](crate::operation::list_accounts_with_invalid_effective_policy::ListAccountsWithInvalidEffectivePolicyOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListAccountsWithInvalidEffectivePolicyOutputBuilder {
    pub(crate) accounts: ::std::option::Option<::std::vec::Vec<crate::types::Account>>,
    pub(crate) policy_type: ::std::option::Option<crate::types::EffectivePolicyType>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListAccountsWithInvalidEffectivePolicyOutputBuilder {
    /// Appends an item to `accounts`.
    ///
    /// To override the contents of this collection use [`set_accounts`](Self::set_accounts).
    ///
    /// <p>The accounts in the organization which have an invalid effective policy for the specified policy type.</p>
    pub fn accounts(mut self, input: crate::types::Account) -> Self {
        let mut v = self.accounts.unwrap_or_default();
        v.push(input);
        self.accounts = ::std::option::Option::Some(v);
        self
    }
    /// <p>The accounts in the organization which have an invalid effective policy for the specified policy type.</p>
    pub fn set_accounts(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Account>>) -> Self {
        self.accounts = input;
        self
    }
    /// <p>The accounts in the organization which have an invalid effective policy for the specified policy type.</p>
    pub fn get_accounts(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Account>> {
        &self.accounts
    }
    /// <p>The specified policy type. One of the following values:</p>
    /// <ul>
    /// <li>
    /// <p><a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_declarative.html">DECLARATIVE_POLICY_EC2</a></p></li>
    /// <li>
    /// <p><a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_backup.html">BACKUP_POLICY</a></p></li>
    /// <li>
    /// <p><a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_tag-policies.html">TAG_POLICY</a></p></li>
    /// <li>
    /// <p><a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_chatbot.html">CHATBOT_POLICY</a></p></li>
    /// <li>
    /// <p><a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_ai-opt-out.html">AISERVICES_OPT_OUT_POLICY</a></p></li>
    /// <li>
    /// <p><a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_security_hub.html">SECURITYHUB_POLICY</a></p></li>
    /// </ul>
    pub fn policy_type(mut self, input: crate::types::EffectivePolicyType) -> Self {
        self.policy_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The specified policy type. One of the following values:</p>
    /// <ul>
    /// <li>
    /// <p><a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_declarative.html">DECLARATIVE_POLICY_EC2</a></p></li>
    /// <li>
    /// <p><a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_backup.html">BACKUP_POLICY</a></p></li>
    /// <li>
    /// <p><a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_tag-policies.html">TAG_POLICY</a></p></li>
    /// <li>
    /// <p><a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_chatbot.html">CHATBOT_POLICY</a></p></li>
    /// <li>
    /// <p><a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_ai-opt-out.html">AISERVICES_OPT_OUT_POLICY</a></p></li>
    /// <li>
    /// <p><a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_security_hub.html">SECURITYHUB_POLICY</a></p></li>
    /// </ul>
    pub fn set_policy_type(mut self, input: ::std::option::Option<crate::types::EffectivePolicyType>) -> Self {
        self.policy_type = input;
        self
    }
    /// <p>The specified policy type. One of the following values:</p>
    /// <ul>
    /// <li>
    /// <p><a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_declarative.html">DECLARATIVE_POLICY_EC2</a></p></li>
    /// <li>
    /// <p><a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_backup.html">BACKUP_POLICY</a></p></li>
    /// <li>
    /// <p><a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_tag-policies.html">TAG_POLICY</a></p></li>
    /// <li>
    /// <p><a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_chatbot.html">CHATBOT_POLICY</a></p></li>
    /// <li>
    /// <p><a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_ai-opt-out.html">AISERVICES_OPT_OUT_POLICY</a></p></li>
    /// <li>
    /// <p><a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_security_hub.html">SECURITYHUB_POLICY</a></p></li>
    /// </ul>
    pub fn get_policy_type(&self) -> &::std::option::Option<crate::types::EffectivePolicyType> {
        &self.policy_type
    }
    /// <p>If present, indicates that more output is available than is included in the current response. Use this value in the <code>NextToken</code> request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the <code>NextToken</code> response element comes back as <code>null</code>.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If present, indicates that more output is available than is included in the current response. Use this value in the <code>NextToken</code> request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the <code>NextToken</code> response element comes back as <code>null</code>.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>If present, indicates that more output is available than is included in the current response. Use this value in the <code>NextToken</code> request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the <code>NextToken</code> response element comes back as <code>null</code>.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListAccountsWithInvalidEffectivePolicyOutput`](crate::operation::list_accounts_with_invalid_effective_policy::ListAccountsWithInvalidEffectivePolicyOutput).
    pub fn build(self) -> crate::operation::list_accounts_with_invalid_effective_policy::ListAccountsWithInvalidEffectivePolicyOutput {
        crate::operation::list_accounts_with_invalid_effective_policy::ListAccountsWithInvalidEffectivePolicyOutput {
            accounts: self.accounts,
            policy_type: self.policy_type,
            next_token: self.next_token,
            _request_id: self._request_id,
        }
    }
}
