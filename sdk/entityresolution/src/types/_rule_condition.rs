// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that defines the <code>ruleCondition</code> and the <code>ruleName</code> to use in a matching workflow.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RuleCondition {
    /// <p>A name for the matching rule.</p>
    /// <p>For example: <code>Rule1</code></p>
    pub rule_name: ::std::string::String,
    /// <p>A statement that specifies the conditions for a matching rule.</p>
    /// <p>If your data is accurate, use an Exact matching function: <code>Exact</code> or <code>ExactManyToMany</code>.</p>
    /// <p>If your data has variations in spelling or pronunciation, use a Fuzzy matching function: <code>Cosine</code>, <code>Levenshtein</code>, or <code>Soundex</code>.</p>
    /// <p>Use operators if you want to combine (<code>AND</code>), separate (<code>OR</code>), or group matching functions <code>(...)</code>.</p>
    /// <p>For example: <code>(Cosine(a, 10) AND Exact(b, true)) OR ExactManyToMany(c, d)</code></p>
    pub condition: ::std::string::String,
}
impl RuleCondition {
    /// <p>A name for the matching rule.</p>
    /// <p>For example: <code>Rule1</code></p>
    pub fn rule_name(&self) -> &str {
        use std::ops::Deref;
        self.rule_name.deref()
    }
    /// <p>A statement that specifies the conditions for a matching rule.</p>
    /// <p>If your data is accurate, use an Exact matching function: <code>Exact</code> or <code>ExactManyToMany</code>.</p>
    /// <p>If your data has variations in spelling or pronunciation, use a Fuzzy matching function: <code>Cosine</code>, <code>Levenshtein</code>, or <code>Soundex</code>.</p>
    /// <p>Use operators if you want to combine (<code>AND</code>), separate (<code>OR</code>), or group matching functions <code>(...)</code>.</p>
    /// <p>For example: <code>(Cosine(a, 10) AND Exact(b, true)) OR ExactManyToMany(c, d)</code></p>
    pub fn condition(&self) -> &str {
        use std::ops::Deref;
        self.condition.deref()
    }
}
impl RuleCondition {
    /// Creates a new builder-style object to manufacture [`RuleCondition`](crate::types::RuleCondition).
    pub fn builder() -> crate::types::builders::RuleConditionBuilder {
        crate::types::builders::RuleConditionBuilder::default()
    }
}

/// A builder for [`RuleCondition`](crate::types::RuleCondition).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RuleConditionBuilder {
    pub(crate) rule_name: ::std::option::Option<::std::string::String>,
    pub(crate) condition: ::std::option::Option<::std::string::String>,
}
impl RuleConditionBuilder {
    /// <p>A name for the matching rule.</p>
    /// <p>For example: <code>Rule1</code></p>
    /// This field is required.
    pub fn rule_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.rule_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A name for the matching rule.</p>
    /// <p>For example: <code>Rule1</code></p>
    pub fn set_rule_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.rule_name = input;
        self
    }
    /// <p>A name for the matching rule.</p>
    /// <p>For example: <code>Rule1</code></p>
    pub fn get_rule_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.rule_name
    }
    /// <p>A statement that specifies the conditions for a matching rule.</p>
    /// <p>If your data is accurate, use an Exact matching function: <code>Exact</code> or <code>ExactManyToMany</code>.</p>
    /// <p>If your data has variations in spelling or pronunciation, use a Fuzzy matching function: <code>Cosine</code>, <code>Levenshtein</code>, or <code>Soundex</code>.</p>
    /// <p>Use operators if you want to combine (<code>AND</code>), separate (<code>OR</code>), or group matching functions <code>(...)</code>.</p>
    /// <p>For example: <code>(Cosine(a, 10) AND Exact(b, true)) OR ExactManyToMany(c, d)</code></p>
    /// This field is required.
    pub fn condition(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.condition = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A statement that specifies the conditions for a matching rule.</p>
    /// <p>If your data is accurate, use an Exact matching function: <code>Exact</code> or <code>ExactManyToMany</code>.</p>
    /// <p>If your data has variations in spelling or pronunciation, use a Fuzzy matching function: <code>Cosine</code>, <code>Levenshtein</code>, or <code>Soundex</code>.</p>
    /// <p>Use operators if you want to combine (<code>AND</code>), separate (<code>OR</code>), or group matching functions <code>(...)</code>.</p>
    /// <p>For example: <code>(Cosine(a, 10) AND Exact(b, true)) OR ExactManyToMany(c, d)</code></p>
    pub fn set_condition(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.condition = input;
        self
    }
    /// <p>A statement that specifies the conditions for a matching rule.</p>
    /// <p>If your data is accurate, use an Exact matching function: <code>Exact</code> or <code>ExactManyToMany</code>.</p>
    /// <p>If your data has variations in spelling or pronunciation, use a Fuzzy matching function: <code>Cosine</code>, <code>Levenshtein</code>, or <code>Soundex</code>.</p>
    /// <p>Use operators if you want to combine (<code>AND</code>), separate (<code>OR</code>), or group matching functions <code>(...)</code>.</p>
    /// <p>For example: <code>(Cosine(a, 10) AND Exact(b, true)) OR ExactManyToMany(c, d)</code></p>
    pub fn get_condition(&self) -> &::std::option::Option<::std::string::String> {
        &self.condition
    }
    /// Consumes the builder and constructs a [`RuleCondition`](crate::types::RuleCondition).
    /// This method will fail if any of the following fields are not set:
    /// - [`rule_name`](crate::types::builders::RuleConditionBuilder::rule_name)
    /// - [`condition`](crate::types::builders::RuleConditionBuilder::condition)
    pub fn build(self) -> ::std::result::Result<crate::types::RuleCondition, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RuleCondition {
            rule_name: self.rule_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "rule_name",
                    "rule_name was not specified but it is required when building RuleCondition",
                )
            })?,
            condition: self.condition.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "condition",
                    "condition was not specified but it is required when building RuleCondition",
                )
            })?,
        })
    }
}
