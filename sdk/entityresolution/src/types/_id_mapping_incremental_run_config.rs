// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Incremental run configuration for an ID mapping workflow.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct IdMappingIncrementalRunConfig {
    /// <p>The incremental run type for an ID mapping workflow.</p>
    /// <p>It takes only one value: <code>ON_DEMAND</code>. This setting runs the ID mapping workflow when it's manually triggered through the <code>StartIdMappingJob</code> API.</p>
    pub incremental_run_type: ::std::option::Option<crate::types::IdMappingIncrementalRunType>,
}
impl IdMappingIncrementalRunConfig {
    /// <p>The incremental run type for an ID mapping workflow.</p>
    /// <p>It takes only one value: <code>ON_DEMAND</code>. This setting runs the ID mapping workflow when it's manually triggered through the <code>StartIdMappingJob</code> API.</p>
    pub fn incremental_run_type(&self) -> ::std::option::Option<&crate::types::IdMappingIncrementalRunType> {
        self.incremental_run_type.as_ref()
    }
}
impl IdMappingIncrementalRunConfig {
    /// Creates a new builder-style object to manufacture [`IdMappingIncrementalRunConfig`](crate::types::IdMappingIncrementalRunConfig).
    pub fn builder() -> crate::types::builders::IdMappingIncrementalRunConfigBuilder {
        crate::types::builders::IdMappingIncrementalRunConfigBuilder::default()
    }
}

/// A builder for [`IdMappingIncrementalRunConfig`](crate::types::IdMappingIncrementalRunConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct IdMappingIncrementalRunConfigBuilder {
    pub(crate) incremental_run_type: ::std::option::Option<crate::types::IdMappingIncrementalRunType>,
}
impl IdMappingIncrementalRunConfigBuilder {
    /// <p>The incremental run type for an ID mapping workflow.</p>
    /// <p>It takes only one value: <code>ON_DEMAND</code>. This setting runs the ID mapping workflow when it's manually triggered through the <code>StartIdMappingJob</code> API.</p>
    pub fn incremental_run_type(mut self, input: crate::types::IdMappingIncrementalRunType) -> Self {
        self.incremental_run_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The incremental run type for an ID mapping workflow.</p>
    /// <p>It takes only one value: <code>ON_DEMAND</code>. This setting runs the ID mapping workflow when it's manually triggered through the <code>StartIdMappingJob</code> API.</p>
    pub fn set_incremental_run_type(mut self, input: ::std::option::Option<crate::types::IdMappingIncrementalRunType>) -> Self {
        self.incremental_run_type = input;
        self
    }
    /// <p>The incremental run type for an ID mapping workflow.</p>
    /// <p>It takes only one value: <code>ON_DEMAND</code>. This setting runs the ID mapping workflow when it's manually triggered through the <code>StartIdMappingJob</code> API.</p>
    pub fn get_incremental_run_type(&self) -> &::std::option::Option<crate::types::IdMappingIncrementalRunType> {
        &self.incremental_run_type
    }
    /// Consumes the builder and constructs a [`IdMappingIncrementalRunConfig`](crate::types::IdMappingIncrementalRunConfig).
    pub fn build(self) -> crate::types::IdMappingIncrementalRunConfig {
        crate::types::IdMappingIncrementalRunConfig {
            incremental_run_type: self.incremental_run_type,
        }
    }
}
