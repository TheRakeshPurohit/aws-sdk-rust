// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the Organizations accounts where you want to create, update, or delete stack instances. You can target either your entire organization or specific accounts using organizational units (OUs) and account filter options.</p>
/// <p>CloudFormation doesn't deploy stack instances to the organization management account, even if the organization management account is in your organization or in an OU in your organization.</p>
/// <p>When performing create operations, if you specify both <code>OrganizationalUnitIds</code> and <code>Accounts</code>, you must also specify the <code>AccountFilterType</code> property.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DeploymentTargets {
    /// <p>The Amazon Web Services account IDs where you want to perform stack operations. How these accounts are used depends on the <code>AccountFilterType</code> property.</p>
    /// <p>If you have many account numbers, you can provide those accounts using the <code>AccountsUrl</code> property instead.</p>
    pub accounts: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The Amazon S3 URL path to a file that contains a list of Amazon Web Services account IDs. The file format must be either <code>.csv</code> or <code>.txt</code>, and the data can be comma-separated or new-line-separated. There is currently a 10MB limit for the data (approximately 800,000 accounts).</p>
    /// <p>This property serves the same purpose as <code>Accounts</code> but allows you to specify a large number of accounts.</p>
    pub accounts_url: ::std::option::Option<::std::string::String>,
    /// <p>The organization root ID or organizational unit (OU) IDs where you want to perform stack operations. CloudFormation will perform operations on accounts within these OUs and their child OUs.</p>
    pub organizational_unit_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Refines which accounts will have stack operations performed on them by specifying how to use the <code>Accounts</code> and <code>OrganizationalUnitIds</code> properties together.</p>
    /// <p>The following values determine how CloudFormation selects target accounts:</p>
    /// <ul>
    /// <li>
    /// <p><code>INTERSECTION</code>: Performs stack operations only on specific individual accounts within the selected OUs. Only accounts that are both specified in the <code>Accounts</code> property and belong to the specified OUs will be targeted.</p></li>
    /// <li>
    /// <p><code>DIFFERENCE</code>: Performs stack operations on all accounts in the selected OUs except for specific accounts listed in the <code>Accounts</code> property. This enables you to exclude certain accounts within an OU, such as suspended accounts.</p></li>
    /// <li>
    /// <p><code>UNION</code>: Performs stack operations on the specified OUs plus additional individual accounts listed in the <code>Accounts</code> property. This is the default value if <code>AccountFilterType</code> is not provided. This lets you target an entire OU and individual accounts from a different OU in one request. Note that <code>UNION</code> is not supported for <code>CreateStackInstances</code> operations.</p></li>
    /// <li>
    /// <p><code>NONE</code>: Performs stack operations on all accounts in the specified organizational units (OUs).</p></li>
    /// </ul>
    pub account_filter_type: ::std::option::Option<crate::types::AccountFilterType>,
}
impl DeploymentTargets {
    /// <p>The Amazon Web Services account IDs where you want to perform stack operations. How these accounts are used depends on the <code>AccountFilterType</code> property.</p>
    /// <p>If you have many account numbers, you can provide those accounts using the <code>AccountsUrl</code> property instead.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.accounts.is_none()`.
    pub fn accounts(&self) -> &[::std::string::String] {
        self.accounts.as_deref().unwrap_or_default()
    }
    /// <p>The Amazon S3 URL path to a file that contains a list of Amazon Web Services account IDs. The file format must be either <code>.csv</code> or <code>.txt</code>, and the data can be comma-separated or new-line-separated. There is currently a 10MB limit for the data (approximately 800,000 accounts).</p>
    /// <p>This property serves the same purpose as <code>Accounts</code> but allows you to specify a large number of accounts.</p>
    pub fn accounts_url(&self) -> ::std::option::Option<&str> {
        self.accounts_url.as_deref()
    }
    /// <p>The organization root ID or organizational unit (OU) IDs where you want to perform stack operations. CloudFormation will perform operations on accounts within these OUs and their child OUs.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.organizational_unit_ids.is_none()`.
    pub fn organizational_unit_ids(&self) -> &[::std::string::String] {
        self.organizational_unit_ids.as_deref().unwrap_or_default()
    }
    /// <p>Refines which accounts will have stack operations performed on them by specifying how to use the <code>Accounts</code> and <code>OrganizationalUnitIds</code> properties together.</p>
    /// <p>The following values determine how CloudFormation selects target accounts:</p>
    /// <ul>
    /// <li>
    /// <p><code>INTERSECTION</code>: Performs stack operations only on specific individual accounts within the selected OUs. Only accounts that are both specified in the <code>Accounts</code> property and belong to the specified OUs will be targeted.</p></li>
    /// <li>
    /// <p><code>DIFFERENCE</code>: Performs stack operations on all accounts in the selected OUs except for specific accounts listed in the <code>Accounts</code> property. This enables you to exclude certain accounts within an OU, such as suspended accounts.</p></li>
    /// <li>
    /// <p><code>UNION</code>: Performs stack operations on the specified OUs plus additional individual accounts listed in the <code>Accounts</code> property. This is the default value if <code>AccountFilterType</code> is not provided. This lets you target an entire OU and individual accounts from a different OU in one request. Note that <code>UNION</code> is not supported for <code>CreateStackInstances</code> operations.</p></li>
    /// <li>
    /// <p><code>NONE</code>: Performs stack operations on all accounts in the specified organizational units (OUs).</p></li>
    /// </ul>
    pub fn account_filter_type(&self) -> ::std::option::Option<&crate::types::AccountFilterType> {
        self.account_filter_type.as_ref()
    }
}
impl DeploymentTargets {
    /// Creates a new builder-style object to manufacture [`DeploymentTargets`](crate::types::DeploymentTargets).
    pub fn builder() -> crate::types::builders::DeploymentTargetsBuilder {
        crate::types::builders::DeploymentTargetsBuilder::default()
    }
}

/// A builder for [`DeploymentTargets`](crate::types::DeploymentTargets).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DeploymentTargetsBuilder {
    pub(crate) accounts: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) accounts_url: ::std::option::Option<::std::string::String>,
    pub(crate) organizational_unit_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) account_filter_type: ::std::option::Option<crate::types::AccountFilterType>,
}
impl DeploymentTargetsBuilder {
    /// Appends an item to `accounts`.
    ///
    /// To override the contents of this collection use [`set_accounts`](Self::set_accounts).
    ///
    /// <p>The Amazon Web Services account IDs where you want to perform stack operations. How these accounts are used depends on the <code>AccountFilterType</code> property.</p>
    /// <p>If you have many account numbers, you can provide those accounts using the <code>AccountsUrl</code> property instead.</p>
    pub fn accounts(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.accounts.unwrap_or_default();
        v.push(input.into());
        self.accounts = ::std::option::Option::Some(v);
        self
    }
    /// <p>The Amazon Web Services account IDs where you want to perform stack operations. How these accounts are used depends on the <code>AccountFilterType</code> property.</p>
    /// <p>If you have many account numbers, you can provide those accounts using the <code>AccountsUrl</code> property instead.</p>
    pub fn set_accounts(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.accounts = input;
        self
    }
    /// <p>The Amazon Web Services account IDs where you want to perform stack operations. How these accounts are used depends on the <code>AccountFilterType</code> property.</p>
    /// <p>If you have many account numbers, you can provide those accounts using the <code>AccountsUrl</code> property instead.</p>
    pub fn get_accounts(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.accounts
    }
    /// <p>The Amazon S3 URL path to a file that contains a list of Amazon Web Services account IDs. The file format must be either <code>.csv</code> or <code>.txt</code>, and the data can be comma-separated or new-line-separated. There is currently a 10MB limit for the data (approximately 800,000 accounts).</p>
    /// <p>This property serves the same purpose as <code>Accounts</code> but allows you to specify a large number of accounts.</p>
    pub fn accounts_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.accounts_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon S3 URL path to a file that contains a list of Amazon Web Services account IDs. The file format must be either <code>.csv</code> or <code>.txt</code>, and the data can be comma-separated or new-line-separated. There is currently a 10MB limit for the data (approximately 800,000 accounts).</p>
    /// <p>This property serves the same purpose as <code>Accounts</code> but allows you to specify a large number of accounts.</p>
    pub fn set_accounts_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.accounts_url = input;
        self
    }
    /// <p>The Amazon S3 URL path to a file that contains a list of Amazon Web Services account IDs. The file format must be either <code>.csv</code> or <code>.txt</code>, and the data can be comma-separated or new-line-separated. There is currently a 10MB limit for the data (approximately 800,000 accounts).</p>
    /// <p>This property serves the same purpose as <code>Accounts</code> but allows you to specify a large number of accounts.</p>
    pub fn get_accounts_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.accounts_url
    }
    /// Appends an item to `organizational_unit_ids`.
    ///
    /// To override the contents of this collection use [`set_organizational_unit_ids`](Self::set_organizational_unit_ids).
    ///
    /// <p>The organization root ID or organizational unit (OU) IDs where you want to perform stack operations. CloudFormation will perform operations on accounts within these OUs and their child OUs.</p>
    pub fn organizational_unit_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.organizational_unit_ids.unwrap_or_default();
        v.push(input.into());
        self.organizational_unit_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>The organization root ID or organizational unit (OU) IDs where you want to perform stack operations. CloudFormation will perform operations on accounts within these OUs and their child OUs.</p>
    pub fn set_organizational_unit_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.organizational_unit_ids = input;
        self
    }
    /// <p>The organization root ID or organizational unit (OU) IDs where you want to perform stack operations. CloudFormation will perform operations on accounts within these OUs and their child OUs.</p>
    pub fn get_organizational_unit_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.organizational_unit_ids
    }
    /// <p>Refines which accounts will have stack operations performed on them by specifying how to use the <code>Accounts</code> and <code>OrganizationalUnitIds</code> properties together.</p>
    /// <p>The following values determine how CloudFormation selects target accounts:</p>
    /// <ul>
    /// <li>
    /// <p><code>INTERSECTION</code>: Performs stack operations only on specific individual accounts within the selected OUs. Only accounts that are both specified in the <code>Accounts</code> property and belong to the specified OUs will be targeted.</p></li>
    /// <li>
    /// <p><code>DIFFERENCE</code>: Performs stack operations on all accounts in the selected OUs except for specific accounts listed in the <code>Accounts</code> property. This enables you to exclude certain accounts within an OU, such as suspended accounts.</p></li>
    /// <li>
    /// <p><code>UNION</code>: Performs stack operations on the specified OUs plus additional individual accounts listed in the <code>Accounts</code> property. This is the default value if <code>AccountFilterType</code> is not provided. This lets you target an entire OU and individual accounts from a different OU in one request. Note that <code>UNION</code> is not supported for <code>CreateStackInstances</code> operations.</p></li>
    /// <li>
    /// <p><code>NONE</code>: Performs stack operations on all accounts in the specified organizational units (OUs).</p></li>
    /// </ul>
    pub fn account_filter_type(mut self, input: crate::types::AccountFilterType) -> Self {
        self.account_filter_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Refines which accounts will have stack operations performed on them by specifying how to use the <code>Accounts</code> and <code>OrganizationalUnitIds</code> properties together.</p>
    /// <p>The following values determine how CloudFormation selects target accounts:</p>
    /// <ul>
    /// <li>
    /// <p><code>INTERSECTION</code>: Performs stack operations only on specific individual accounts within the selected OUs. Only accounts that are both specified in the <code>Accounts</code> property and belong to the specified OUs will be targeted.</p></li>
    /// <li>
    /// <p><code>DIFFERENCE</code>: Performs stack operations on all accounts in the selected OUs except for specific accounts listed in the <code>Accounts</code> property. This enables you to exclude certain accounts within an OU, such as suspended accounts.</p></li>
    /// <li>
    /// <p><code>UNION</code>: Performs stack operations on the specified OUs plus additional individual accounts listed in the <code>Accounts</code> property. This is the default value if <code>AccountFilterType</code> is not provided. This lets you target an entire OU and individual accounts from a different OU in one request. Note that <code>UNION</code> is not supported for <code>CreateStackInstances</code> operations.</p></li>
    /// <li>
    /// <p><code>NONE</code>: Performs stack operations on all accounts in the specified organizational units (OUs).</p></li>
    /// </ul>
    pub fn set_account_filter_type(mut self, input: ::std::option::Option<crate::types::AccountFilterType>) -> Self {
        self.account_filter_type = input;
        self
    }
    /// <p>Refines which accounts will have stack operations performed on them by specifying how to use the <code>Accounts</code> and <code>OrganizationalUnitIds</code> properties together.</p>
    /// <p>The following values determine how CloudFormation selects target accounts:</p>
    /// <ul>
    /// <li>
    /// <p><code>INTERSECTION</code>: Performs stack operations only on specific individual accounts within the selected OUs. Only accounts that are both specified in the <code>Accounts</code> property and belong to the specified OUs will be targeted.</p></li>
    /// <li>
    /// <p><code>DIFFERENCE</code>: Performs stack operations on all accounts in the selected OUs except for specific accounts listed in the <code>Accounts</code> property. This enables you to exclude certain accounts within an OU, such as suspended accounts.</p></li>
    /// <li>
    /// <p><code>UNION</code>: Performs stack operations on the specified OUs plus additional individual accounts listed in the <code>Accounts</code> property. This is the default value if <code>AccountFilterType</code> is not provided. This lets you target an entire OU and individual accounts from a different OU in one request. Note that <code>UNION</code> is not supported for <code>CreateStackInstances</code> operations.</p></li>
    /// <li>
    /// <p><code>NONE</code>: Performs stack operations on all accounts in the specified organizational units (OUs).</p></li>
    /// </ul>
    pub fn get_account_filter_type(&self) -> &::std::option::Option<crate::types::AccountFilterType> {
        &self.account_filter_type
    }
    /// Consumes the builder and constructs a [`DeploymentTargets`](crate::types::DeploymentTargets).
    pub fn build(self) -> crate::types::DeploymentTargets {
        crate::types::DeploymentTargets {
            accounts: self.accounts,
            accounts_url: self.accounts_url,
            organizational_unit_ids: self.organizational_unit_ids,
            account_filter_type: self.account_filter_type,
        }
    }
}
