// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn access_denied_exception_correct_errors(
    mut builder: crate::types::error::builders::AccessDeniedExceptionBuilder,
) -> crate::types::error::builders::AccessDeniedExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn internal_server_exception_correct_errors(
    mut builder: crate::types::error::builders::InternalServerExceptionBuilder,
) -> crate::types::error::builders::InternalServerExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn throttling_exception_correct_errors(
    mut builder: crate::types::error::builders::ThrottlingExceptionBuilder,
) -> crate::types::error::builders::ThrottlingExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_correct_errors(
    mut builder: crate::types::error::builders::ValidationExceptionBuilder,
) -> crate::types::error::builders::ValidationExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.reason.is_none() {
        builder.reason = "no value was set".parse::<crate::types::ValidationExceptionReason>().ok()
    }
    if builder.field_list.is_none() {
        builder.field_list = Some(Default::default())
    }
    builder
}

pub(crate) fn autocomplete_output_output_correct_errors(
    mut builder: crate::operation::autocomplete::builders::AutocompleteOutputBuilder,
) -> crate::operation::autocomplete::builders::AutocompleteOutputBuilder {
    if builder.pricing_bucket.is_none() {
        builder.pricing_bucket = Some(Default::default())
    }
    builder
}

pub(crate) fn geocode_output_output_correct_errors(
    mut builder: crate::operation::geocode::builders::GeocodeOutputBuilder,
) -> crate::operation::geocode::builders::GeocodeOutputBuilder {
    if builder.pricing_bucket.is_none() {
        builder.pricing_bucket = Some(Default::default())
    }
    builder
}

pub(crate) fn get_place_output_output_correct_errors(
    mut builder: crate::operation::get_place::builders::GetPlaceOutputBuilder,
) -> crate::operation::get_place::builders::GetPlaceOutputBuilder {
    if builder.place_id.is_none() {
        builder.place_id = Some(Default::default())
    }
    if builder.place_type.is_none() {
        builder.place_type = "no value was set".parse::<crate::types::PlaceType>().ok()
    }
    if builder.title.is_none() {
        builder.title = Some(Default::default())
    }
    if builder.pricing_bucket.is_none() {
        builder.pricing_bucket = Some(Default::default())
    }
    builder
}

pub(crate) fn reverse_geocode_output_output_correct_errors(
    mut builder: crate::operation::reverse_geocode::builders::ReverseGeocodeOutputBuilder,
) -> crate::operation::reverse_geocode::builders::ReverseGeocodeOutputBuilder {
    if builder.pricing_bucket.is_none() {
        builder.pricing_bucket = Some(Default::default())
    }
    builder
}

pub(crate) fn search_nearby_output_output_correct_errors(
    mut builder: crate::operation::search_nearby::builders::SearchNearbyOutputBuilder,
) -> crate::operation::search_nearby::builders::SearchNearbyOutputBuilder {
    if builder.pricing_bucket.is_none() {
        builder.pricing_bucket = Some(Default::default())
    }
    builder
}

pub(crate) fn search_text_output_output_correct_errors(
    mut builder: crate::operation::search_text::builders::SearchTextOutputBuilder,
) -> crate::operation::search_text::builders::SearchTextOutputBuilder {
    if builder.pricing_bucket.is_none() {
        builder.pricing_bucket = Some(Default::default())
    }
    builder
}

pub(crate) fn suggest_output_output_correct_errors(
    mut builder: crate::operation::suggest::builders::SuggestOutputBuilder,
) -> crate::operation::suggest::builders::SuggestOutputBuilder {
    if builder.pricing_bucket.is_none() {
        builder.pricing_bucket = Some(Default::default())
    }
    builder
}

pub(crate) fn related_place_correct_errors(mut builder: crate::types::builders::RelatedPlaceBuilder) -> crate::types::builders::RelatedPlaceBuilder {
    if builder.place_id.is_none() {
        builder.place_id = Some(Default::default())
    }
    if builder.place_type.is_none() {
        builder.place_type = "no value was set".parse::<crate::types::PlaceType>().ok()
    }
    if builder.title.is_none() {
        builder.title = Some(Default::default())
    }
    builder
}

pub(crate) fn time_zone_correct_errors(mut builder: crate::types::builders::TimeZoneBuilder) -> crate::types::builders::TimeZoneBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn autocomplete_result_item_correct_errors(
    mut builder: crate::types::builders::AutocompleteResultItemBuilder,
) -> crate::types::builders::AutocompleteResultItemBuilder {
    if builder.place_id.is_none() {
        builder.place_id = Some(Default::default())
    }
    if builder.place_type.is_none() {
        builder.place_type = "no value was set".parse::<crate::types::PlaceType>().ok()
    }
    if builder.title.is_none() {
        builder.title = Some(Default::default())
    }
    builder
}

pub(crate) fn category_correct_errors(mut builder: crate::types::builders::CategoryBuilder) -> crate::types::builders::CategoryBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn food_type_correct_errors(mut builder: crate::types::builders::FoodTypeBuilder) -> crate::types::builders::FoodTypeBuilder {
    if builder.localized_name.is_none() {
        builder.localized_name = Some(Default::default())
    }
    builder
}

pub(crate) fn geocode_result_item_correct_errors(
    mut builder: crate::types::builders::GeocodeResultItemBuilder,
) -> crate::types::builders::GeocodeResultItemBuilder {
    if builder.place_id.is_none() {
        builder.place_id = Some(Default::default())
    }
    if builder.place_type.is_none() {
        builder.place_type = "no value was set".parse::<crate::types::PlaceType>().ok()
    }
    if builder.title.is_none() {
        builder.title = Some(Default::default())
    }
    builder
}

pub(crate) fn query_refinement_correct_errors(
    mut builder: crate::types::builders::QueryRefinementBuilder,
) -> crate::types::builders::QueryRefinementBuilder {
    if builder.refined_term.is_none() {
        builder.refined_term = Some(Default::default())
    }
    if builder.original_term.is_none() {
        builder.original_term = Some(Default::default())
    }
    if builder.start_index.is_none() {
        builder.start_index = Some(Default::default())
    }
    if builder.end_index.is_none() {
        builder.end_index = Some(Default::default())
    }
    builder
}

pub(crate) fn reverse_geocode_result_item_correct_errors(
    mut builder: crate::types::builders::ReverseGeocodeResultItemBuilder,
) -> crate::types::builders::ReverseGeocodeResultItemBuilder {
    if builder.place_id.is_none() {
        builder.place_id = Some(Default::default())
    }
    if builder.place_type.is_none() {
        builder.place_type = "no value was set".parse::<crate::types::PlaceType>().ok()
    }
    if builder.title.is_none() {
        builder.title = Some(Default::default())
    }
    builder
}

pub(crate) fn search_nearby_result_item_correct_errors(
    mut builder: crate::types::builders::SearchNearbyResultItemBuilder,
) -> crate::types::builders::SearchNearbyResultItemBuilder {
    if builder.place_id.is_none() {
        builder.place_id = Some(Default::default())
    }
    if builder.place_type.is_none() {
        builder.place_type = "no value was set".parse::<crate::types::PlaceType>().ok()
    }
    if builder.title.is_none() {
        builder.title = Some(Default::default())
    }
    builder
}

pub(crate) fn search_text_result_item_correct_errors(
    mut builder: crate::types::builders::SearchTextResultItemBuilder,
) -> crate::types::builders::SearchTextResultItemBuilder {
    if builder.place_id.is_none() {
        builder.place_id = Some(Default::default())
    }
    if builder.place_type.is_none() {
        builder.place_type = "no value was set".parse::<crate::types::PlaceType>().ok()
    }
    if builder.title.is_none() {
        builder.title = Some(Default::default())
    }
    builder
}

pub(crate) fn suggest_result_item_correct_errors(
    mut builder: crate::types::builders::SuggestResultItemBuilder,
) -> crate::types::builders::SuggestResultItemBuilder {
    if builder.title.is_none() {
        builder.title = Some(Default::default())
    }
    if builder.suggest_result_item_type.is_none() {
        builder.suggest_result_item_type = "no value was set".parse::<crate::types::SuggestResultItemType>().ok()
    }
    builder
}

pub(crate) fn validation_exception_field_correct_errors(
    mut builder: crate::types::builders::ValidationExceptionFieldBuilder,
) -> crate::types::builders::ValidationExceptionFieldBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn secondary_address_component_correct_errors(
    mut builder: crate::types::builders::SecondaryAddressComponentBuilder,
) -> crate::types::builders::SecondaryAddressComponentBuilder {
    if builder.number.is_none() {
        builder.number = Some(Default::default())
    }
    builder
}

pub(crate) fn intersection_correct_errors(mut builder: crate::types::builders::IntersectionBuilder) -> crate::types::builders::IntersectionBuilder {
    if builder.place_id.is_none() {
        builder.place_id = Some(Default::default())
    }
    if builder.title.is_none() {
        builder.title = Some(Default::default())
    }
    builder
}

pub(crate) fn parsed_query_secondary_address_component_correct_errors(
    mut builder: crate::types::builders::ParsedQuerySecondaryAddressComponentBuilder,
) -> crate::types::builders::ParsedQuerySecondaryAddressComponentBuilder {
    if builder.start_index.is_none() {
        builder.start_index = Some(Default::default())
    }
    if builder.end_index.is_none() {
        builder.end_index = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    if builder.number.is_none() {
        builder.number = Some(Default::default())
    }
    if builder.designator.is_none() {
        builder.designator = Some(Default::default())
    }
    builder
}
