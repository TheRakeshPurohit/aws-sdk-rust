// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::search_nearby::_search_nearby_output::SearchNearbyOutputBuilder;

pub use crate::operation::search_nearby::_search_nearby_input::SearchNearbyInputBuilder;

impl crate::operation::search_nearby::builders::SearchNearbyInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::search_nearby::SearchNearbyOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::search_nearby::SearchNearbyError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.search_nearby();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `SearchNearby`.
///
/// <p><code>SearchNearby</code> queries for points of interest within a radius from a central coordinates, returning place results with optional filters such as categories, business chains, food types and more. The API returns details such as a place name, address, phone, category, food type, contact, opening hours. Also, the API can return phonemes, time zones and more based on requested parameters.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct SearchNearbyFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::search_nearby::builders::SearchNearbyInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::search_nearby::SearchNearbyOutput,
        crate::operation::search_nearby::SearchNearbyError,
    > for SearchNearbyFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::search_nearby::SearchNearbyOutput,
            crate::operation::search_nearby::SearchNearbyError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl SearchNearbyFluentBuilder {
    /// Creates a new `SearchNearbyFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the SearchNearby as a reference.
    pub fn as_input(&self) -> &crate::operation::search_nearby::builders::SearchNearbyInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::search_nearby::SearchNearbyOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::search_nearby::SearchNearbyError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::search_nearby::SearchNearby::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::search_nearby::SearchNearby::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::search_nearby::SearchNearbyOutput,
        crate::operation::search_nearby::SearchNearbyError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    ///
    /// Appends an item to `QueryPosition`.
    ///
    /// To override the contents of this collection use [`set_query_position`](Self::set_query_position).
    ///
    /// <p>The position, in <code>\[lng, lat\]</code> for which you are querying nearby results for. Results closer to the position will be ranked higher then results further away from the position</p>
    pub fn query_position(mut self, input: f64) -> Self {
        self.inner = self.inner.query_position(input);
        self
    }
    /// <p>The position, in <code>\[lng, lat\]</code> for which you are querying nearby results for. Results closer to the position will be ranked higher then results further away from the position</p>
    pub fn set_query_position(mut self, input: ::std::option::Option<::std::vec::Vec<f64>>) -> Self {
        self.inner = self.inner.set_query_position(input);
        self
    }
    /// <p>The position, in <code>\[lng, lat\]</code> for which you are querying nearby results for. Results closer to the position will be ranked higher then results further away from the position</p>
    pub fn get_query_position(&self) -> &::std::option::Option<::std::vec::Vec<f64>> {
        self.inner.get_query_position()
    }
    /// <p>The maximum distance in meters from the QueryPosition from which a result will be returned.</p><note>
    /// <p>The fields <code>QueryText</code>, and <code>QueryID</code> are mutually exclusive.</p>
    /// </note>
    pub fn query_radius(mut self, input: i64) -> Self {
        self.inner = self.inner.query_radius(input);
        self
    }
    /// <p>The maximum distance in meters from the QueryPosition from which a result will be returned.</p><note>
    /// <p>The fields <code>QueryText</code>, and <code>QueryID</code> are mutually exclusive.</p>
    /// </note>
    pub fn set_query_radius(mut self, input: ::std::option::Option<i64>) -> Self {
        self.inner = self.inner.set_query_radius(input);
        self
    }
    /// <p>The maximum distance in meters from the QueryPosition from which a result will be returned.</p><note>
    /// <p>The fields <code>QueryText</code>, and <code>QueryID</code> are mutually exclusive.</p>
    /// </note>
    pub fn get_query_radius(&self) -> &::std::option::Option<i64> {
        self.inner.get_query_radius()
    }
    /// <p>An optional limit for the number of results returned in a single call.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>An optional limit for the number of results returned in a single call.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>An optional limit for the number of results returned in a single call.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        self.inner.get_max_results()
    }
    /// <p>A structure which contains a set of inclusion/exclusion properties that results must possess in order to be returned as a result.</p>
    pub fn filter(mut self, input: crate::types::SearchNearbyFilter) -> Self {
        self.inner = self.inner.filter(input);
        self
    }
    /// <p>A structure which contains a set of inclusion/exclusion properties that results must possess in order to be returned as a result.</p>
    pub fn set_filter(mut self, input: ::std::option::Option<crate::types::SearchNearbyFilter>) -> Self {
        self.inner = self.inner.set_filter(input);
        self
    }
    /// <p>A structure which contains a set of inclusion/exclusion properties that results must possess in order to be returned as a result.</p>
    pub fn get_filter(&self) -> &::std::option::Option<crate::types::SearchNearbyFilter> {
        self.inner.get_filter()
    }
    ///
    /// Appends an item to `AdditionalFeatures`.
    ///
    /// To override the contents of this collection use [`set_additional_features`](Self::set_additional_features).
    ///
    /// <p>A list of optional additional parameters, such as time zone, that can be requested for each result.</p>
    pub fn additional_features(mut self, input: crate::types::SearchNearbyAdditionalFeature) -> Self {
        self.inner = self.inner.additional_features(input);
        self
    }
    /// <p>A list of optional additional parameters, such as time zone, that can be requested for each result.</p>
    pub fn set_additional_features(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::SearchNearbyAdditionalFeature>>) -> Self {
        self.inner = self.inner.set_additional_features(input);
        self
    }
    /// <p>A list of optional additional parameters, such as time zone, that can be requested for each result.</p>
    pub fn get_additional_features(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SearchNearbyAdditionalFeature>> {
        self.inner.get_additional_features()
    }
    /// <p>A list of <a href="https://en.wikipedia.org/wiki/IETF_language_tag">BCP 47</a> compliant language codes for the results to be rendered in. If there is no data for the result in the requested language, data will be returned in the default language for the entry.</p>
    pub fn language(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.language(input.into());
        self
    }
    /// <p>A list of <a href="https://en.wikipedia.org/wiki/IETF_language_tag">BCP 47</a> compliant language codes for the results to be rendered in. If there is no data for the result in the requested language, data will be returned in the default language for the entry.</p>
    pub fn set_language(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_language(input);
        self
    }
    /// <p>A list of <a href="https://en.wikipedia.org/wiki/IETF_language_tag">BCP 47</a> compliant language codes for the results to be rendered in. If there is no data for the result in the requested language, data will be returned in the default language for the entry.</p>
    pub fn get_language(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_language()
    }
    /// <p>The alpha-2 or alpha-3 character code for the political view of a country. The political view applies to the results of the request to represent unresolved territorial claims through the point of view of the specified country.</p>
    pub fn political_view(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.political_view(input.into());
        self
    }
    /// <p>The alpha-2 or alpha-3 character code for the political view of a country. The political view applies to the results of the request to represent unresolved territorial claims through the point of view of the specified country.</p>
    pub fn set_political_view(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_political_view(input);
        self
    }
    /// <p>The alpha-2 or alpha-3 character code for the political view of a country. The political view applies to the results of the request to represent unresolved territorial claims through the point of view of the specified country.</p>
    pub fn get_political_view(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_political_view()
    }
    /// <p>Indicates if the results will be stored. Defaults to <code>SingleUse</code>, if left empty.</p><note>
    /// <p>Storing the response of an SearchNearby query is required to comply with service terms, but charged at a higher cost per request. Please review the <a href="https://aws.amazon.com/location/sla/">user agreement</a> and <a href="https://aws.amazon.com/location/pricing/">service pricing structure</a> to determine the correct setting for your use case.</p>
    /// </note>
    pub fn intended_use(mut self, input: crate::types::SearchNearbyIntendedUse) -> Self {
        self.inner = self.inner.intended_use(input);
        self
    }
    /// <p>Indicates if the results will be stored. Defaults to <code>SingleUse</code>, if left empty.</p><note>
    /// <p>Storing the response of an SearchNearby query is required to comply with service terms, but charged at a higher cost per request. Please review the <a href="https://aws.amazon.com/location/sla/">user agreement</a> and <a href="https://aws.amazon.com/location/pricing/">service pricing structure</a> to determine the correct setting for your use case.</p>
    /// </note>
    pub fn set_intended_use(mut self, input: ::std::option::Option<crate::types::SearchNearbyIntendedUse>) -> Self {
        self.inner = self.inner.set_intended_use(input);
        self
    }
    /// <p>Indicates if the results will be stored. Defaults to <code>SingleUse</code>, if left empty.</p><note>
    /// <p>Storing the response of an SearchNearby query is required to comply with service terms, but charged at a higher cost per request. Please review the <a href="https://aws.amazon.com/location/sla/">user agreement</a> and <a href="https://aws.amazon.com/location/pricing/">service pricing structure</a> to determine the correct setting for your use case.</p>
    /// </note>
    pub fn get_intended_use(&self) -> &::std::option::Option<crate::types::SearchNearbyIntendedUse> {
        self.inner.get_intended_use()
    }
    /// <p>If <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>If <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>If <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_next_token()
    }
    /// <p>Optional: The API key to be used for authorization. Either an API key or valid SigV4 signature must be provided when making a request.</p>
    pub fn key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.key(input.into());
        self
    }
    /// <p>Optional: The API key to be used for authorization. Either an API key or valid SigV4 signature must be provided when making a request.</p>
    pub fn set_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_key(input);
        self
    }
    /// <p>Optional: The API key to be used for authorization. Either an API key or valid SigV4 signature must be provided when making a request.</p>
    pub fn get_key(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_key()
    }
}
