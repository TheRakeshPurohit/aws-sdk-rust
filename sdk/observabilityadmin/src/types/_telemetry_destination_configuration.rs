// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration specifying where and how telemetry data should be delivered for Amazon Web Services resources.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TelemetryDestinationConfiguration {
    /// <p>The type of destination for the telemetry data (e.g., "Amazon CloudWatch Logs", "S3").</p>
    pub destination_type: ::std::option::Option<crate::types::DestinationType>,
    /// <p>The pattern used to generate the destination path or name, supporting macros like &lt;resourceId&gt; and &lt;accountId&gt;.</p>
    pub destination_pattern: ::std::option::Option<::std::string::String>,
    /// <p>The number of days to retain the telemetry data in the destination.</p>
    pub retention_in_days: ::std::option::Option<i32>,
    /// <p>Configuration parameters specific to VPC Flow Logs when VPC is the resource type.</p>
    pub vpc_flow_log_parameters: ::std::option::Option<crate::types::VpcFlowLogParameters>,
}
impl TelemetryDestinationConfiguration {
    /// <p>The type of destination for the telemetry data (e.g., "Amazon CloudWatch Logs", "S3").</p>
    pub fn destination_type(&self) -> ::std::option::Option<&crate::types::DestinationType> {
        self.destination_type.as_ref()
    }
    /// <p>The pattern used to generate the destination path or name, supporting macros like &lt;resourceId&gt; and &lt;accountId&gt;.</p>
    pub fn destination_pattern(&self) -> ::std::option::Option<&str> {
        self.destination_pattern.as_deref()
    }
    /// <p>The number of days to retain the telemetry data in the destination.</p>
    pub fn retention_in_days(&self) -> ::std::option::Option<i32> {
        self.retention_in_days
    }
    /// <p>Configuration parameters specific to VPC Flow Logs when VPC is the resource type.</p>
    pub fn vpc_flow_log_parameters(&self) -> ::std::option::Option<&crate::types::VpcFlowLogParameters> {
        self.vpc_flow_log_parameters.as_ref()
    }
}
impl TelemetryDestinationConfiguration {
    /// Creates a new builder-style object to manufacture [`TelemetryDestinationConfiguration`](crate::types::TelemetryDestinationConfiguration).
    pub fn builder() -> crate::types::builders::TelemetryDestinationConfigurationBuilder {
        crate::types::builders::TelemetryDestinationConfigurationBuilder::default()
    }
}

/// A builder for [`TelemetryDestinationConfiguration`](crate::types::TelemetryDestinationConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct TelemetryDestinationConfigurationBuilder {
    pub(crate) destination_type: ::std::option::Option<crate::types::DestinationType>,
    pub(crate) destination_pattern: ::std::option::Option<::std::string::String>,
    pub(crate) retention_in_days: ::std::option::Option<i32>,
    pub(crate) vpc_flow_log_parameters: ::std::option::Option<crate::types::VpcFlowLogParameters>,
}
impl TelemetryDestinationConfigurationBuilder {
    /// <p>The type of destination for the telemetry data (e.g., "Amazon CloudWatch Logs", "S3").</p>
    pub fn destination_type(mut self, input: crate::types::DestinationType) -> Self {
        self.destination_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of destination for the telemetry data (e.g., "Amazon CloudWatch Logs", "S3").</p>
    pub fn set_destination_type(mut self, input: ::std::option::Option<crate::types::DestinationType>) -> Self {
        self.destination_type = input;
        self
    }
    /// <p>The type of destination for the telemetry data (e.g., "Amazon CloudWatch Logs", "S3").</p>
    pub fn get_destination_type(&self) -> &::std::option::Option<crate::types::DestinationType> {
        &self.destination_type
    }
    /// <p>The pattern used to generate the destination path or name, supporting macros like &lt;resourceId&gt; and &lt;accountId&gt;.</p>
    pub fn destination_pattern(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.destination_pattern = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The pattern used to generate the destination path or name, supporting macros like &lt;resourceId&gt; and &lt;accountId&gt;.</p>
    pub fn set_destination_pattern(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.destination_pattern = input;
        self
    }
    /// <p>The pattern used to generate the destination path or name, supporting macros like &lt;resourceId&gt; and &lt;accountId&gt;.</p>
    pub fn get_destination_pattern(&self) -> &::std::option::Option<::std::string::String> {
        &self.destination_pattern
    }
    /// <p>The number of days to retain the telemetry data in the destination.</p>
    pub fn retention_in_days(mut self, input: i32) -> Self {
        self.retention_in_days = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of days to retain the telemetry data in the destination.</p>
    pub fn set_retention_in_days(mut self, input: ::std::option::Option<i32>) -> Self {
        self.retention_in_days = input;
        self
    }
    /// <p>The number of days to retain the telemetry data in the destination.</p>
    pub fn get_retention_in_days(&self) -> &::std::option::Option<i32> {
        &self.retention_in_days
    }
    /// <p>Configuration parameters specific to VPC Flow Logs when VPC is the resource type.</p>
    pub fn vpc_flow_log_parameters(mut self, input: crate::types::VpcFlowLogParameters) -> Self {
        self.vpc_flow_log_parameters = ::std::option::Option::Some(input);
        self
    }
    /// <p>Configuration parameters specific to VPC Flow Logs when VPC is the resource type.</p>
    pub fn set_vpc_flow_log_parameters(mut self, input: ::std::option::Option<crate::types::VpcFlowLogParameters>) -> Self {
        self.vpc_flow_log_parameters = input;
        self
    }
    /// <p>Configuration parameters specific to VPC Flow Logs when VPC is the resource type.</p>
    pub fn get_vpc_flow_log_parameters(&self) -> &::std::option::Option<crate::types::VpcFlowLogParameters> {
        &self.vpc_flow_log_parameters
    }
    /// Consumes the builder and constructs a [`TelemetryDestinationConfiguration`](crate::types::TelemetryDestinationConfiguration).
    pub fn build(self) -> crate::types::TelemetryDestinationConfiguration {
        crate::types::TelemetryDestinationConfiguration {
            destination_type: self.destination_type,
            destination_pattern: self.destination_pattern,
            retention_in_days: self.retention_in_days,
            vpc_flow_log_parameters: self.vpc_flow_log_parameters,
        }
    }
}
