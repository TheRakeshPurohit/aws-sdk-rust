// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration specifying the source of telemetry data to be centralized.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CentralizationRuleSource {
    /// <p>The list of source regions from which telemetry data should be centralized.</p>
    pub regions: ::std::vec::Vec<::std::string::String>,
    /// <p>The organizational scope from which telemetry data should be centralized, specified using organization id, accounts or organizational unit ids.</p>
    pub scope: ::std::option::Option<::std::string::String>,
    /// <p>Log specific configuration for centralization source log groups.</p>
    pub source_logs_configuration: ::std::option::Option<crate::types::SourceLogsConfiguration>,
}
impl CentralizationRuleSource {
    /// <p>The list of source regions from which telemetry data should be centralized.</p>
    pub fn regions(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.regions.deref()
    }
    /// <p>The organizational scope from which telemetry data should be centralized, specified using organization id, accounts or organizational unit ids.</p>
    pub fn scope(&self) -> ::std::option::Option<&str> {
        self.scope.as_deref()
    }
    /// <p>Log specific configuration for centralization source log groups.</p>
    pub fn source_logs_configuration(&self) -> ::std::option::Option<&crate::types::SourceLogsConfiguration> {
        self.source_logs_configuration.as_ref()
    }
}
impl CentralizationRuleSource {
    /// Creates a new builder-style object to manufacture [`CentralizationRuleSource`](crate::types::CentralizationRuleSource).
    pub fn builder() -> crate::types::builders::CentralizationRuleSourceBuilder {
        crate::types::builders::CentralizationRuleSourceBuilder::default()
    }
}

/// A builder for [`CentralizationRuleSource`](crate::types::CentralizationRuleSource).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CentralizationRuleSourceBuilder {
    pub(crate) regions: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) scope: ::std::option::Option<::std::string::String>,
    pub(crate) source_logs_configuration: ::std::option::Option<crate::types::SourceLogsConfiguration>,
}
impl CentralizationRuleSourceBuilder {
    /// Appends an item to `regions`.
    ///
    /// To override the contents of this collection use [`set_regions`](Self::set_regions).
    ///
    /// <p>The list of source regions from which telemetry data should be centralized.</p>
    pub fn regions(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.regions.unwrap_or_default();
        v.push(input.into());
        self.regions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of source regions from which telemetry data should be centralized.</p>
    pub fn set_regions(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.regions = input;
        self
    }
    /// <p>The list of source regions from which telemetry data should be centralized.</p>
    pub fn get_regions(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.regions
    }
    /// <p>The organizational scope from which telemetry data should be centralized, specified using organization id, accounts or organizational unit ids.</p>
    pub fn scope(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.scope = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The organizational scope from which telemetry data should be centralized, specified using organization id, accounts or organizational unit ids.</p>
    pub fn set_scope(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.scope = input;
        self
    }
    /// <p>The organizational scope from which telemetry data should be centralized, specified using organization id, accounts or organizational unit ids.</p>
    pub fn get_scope(&self) -> &::std::option::Option<::std::string::String> {
        &self.scope
    }
    /// <p>Log specific configuration for centralization source log groups.</p>
    pub fn source_logs_configuration(mut self, input: crate::types::SourceLogsConfiguration) -> Self {
        self.source_logs_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Log specific configuration for centralization source log groups.</p>
    pub fn set_source_logs_configuration(mut self, input: ::std::option::Option<crate::types::SourceLogsConfiguration>) -> Self {
        self.source_logs_configuration = input;
        self
    }
    /// <p>Log specific configuration for centralization source log groups.</p>
    pub fn get_source_logs_configuration(&self) -> &::std::option::Option<crate::types::SourceLogsConfiguration> {
        &self.source_logs_configuration
    }
    /// Consumes the builder and constructs a [`CentralizationRuleSource`](crate::types::CentralizationRuleSource).
    /// This method will fail if any of the following fields are not set:
    /// - [`regions`](crate::types::builders::CentralizationRuleSourceBuilder::regions)
    pub fn build(self) -> ::std::result::Result<crate::types::CentralizationRuleSource, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CentralizationRuleSource {
            regions: self.regions.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "regions",
                    "regions was not specified but it is required when building CentralizationRuleSource",
                )
            })?,
            scope: self.scope,
            source_logs_configuration: self.source_logs_configuration,
        })
    }
}
