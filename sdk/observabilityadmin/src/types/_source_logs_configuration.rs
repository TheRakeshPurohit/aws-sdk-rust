// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration for selecting and handling source log groups for centralization.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SourceLogsConfiguration {
    /// <p>The selection criteria that specifies which source log groups to centralize. The selection criteria uses the same format as OAM link filters.</p>
    pub log_group_selection_criteria: ::std::string::String,
    /// <p>A strategy determining whether to centralize source log groups that are encrypted with customer managed KMS keys (CMK). ALLOW will consider CMK encrypted source log groups for centralization while SKIP will skip CMK encrypted source log groups from centralization.</p>
    pub encrypted_log_group_strategy: crate::types::EncryptedLogGroupStrategy,
}
impl SourceLogsConfiguration {
    /// <p>The selection criteria that specifies which source log groups to centralize. The selection criteria uses the same format as OAM link filters.</p>
    pub fn log_group_selection_criteria(&self) -> &str {
        use std::ops::Deref;
        self.log_group_selection_criteria.deref()
    }
    /// <p>A strategy determining whether to centralize source log groups that are encrypted with customer managed KMS keys (CMK). ALLOW will consider CMK encrypted source log groups for centralization while SKIP will skip CMK encrypted source log groups from centralization.</p>
    pub fn encrypted_log_group_strategy(&self) -> &crate::types::EncryptedLogGroupStrategy {
        &self.encrypted_log_group_strategy
    }
}
impl SourceLogsConfiguration {
    /// Creates a new builder-style object to manufacture [`SourceLogsConfiguration`](crate::types::SourceLogsConfiguration).
    pub fn builder() -> crate::types::builders::SourceLogsConfigurationBuilder {
        crate::types::builders::SourceLogsConfigurationBuilder::default()
    }
}

/// A builder for [`SourceLogsConfiguration`](crate::types::SourceLogsConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SourceLogsConfigurationBuilder {
    pub(crate) log_group_selection_criteria: ::std::option::Option<::std::string::String>,
    pub(crate) encrypted_log_group_strategy: ::std::option::Option<crate::types::EncryptedLogGroupStrategy>,
}
impl SourceLogsConfigurationBuilder {
    /// <p>The selection criteria that specifies which source log groups to centralize. The selection criteria uses the same format as OAM link filters.</p>
    /// This field is required.
    pub fn log_group_selection_criteria(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.log_group_selection_criteria = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The selection criteria that specifies which source log groups to centralize. The selection criteria uses the same format as OAM link filters.</p>
    pub fn set_log_group_selection_criteria(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.log_group_selection_criteria = input;
        self
    }
    /// <p>The selection criteria that specifies which source log groups to centralize. The selection criteria uses the same format as OAM link filters.</p>
    pub fn get_log_group_selection_criteria(&self) -> &::std::option::Option<::std::string::String> {
        &self.log_group_selection_criteria
    }
    /// <p>A strategy determining whether to centralize source log groups that are encrypted with customer managed KMS keys (CMK). ALLOW will consider CMK encrypted source log groups for centralization while SKIP will skip CMK encrypted source log groups from centralization.</p>
    /// This field is required.
    pub fn encrypted_log_group_strategy(mut self, input: crate::types::EncryptedLogGroupStrategy) -> Self {
        self.encrypted_log_group_strategy = ::std::option::Option::Some(input);
        self
    }
    /// <p>A strategy determining whether to centralize source log groups that are encrypted with customer managed KMS keys (CMK). ALLOW will consider CMK encrypted source log groups for centralization while SKIP will skip CMK encrypted source log groups from centralization.</p>
    pub fn set_encrypted_log_group_strategy(mut self, input: ::std::option::Option<crate::types::EncryptedLogGroupStrategy>) -> Self {
        self.encrypted_log_group_strategy = input;
        self
    }
    /// <p>A strategy determining whether to centralize source log groups that are encrypted with customer managed KMS keys (CMK). ALLOW will consider CMK encrypted source log groups for centralization while SKIP will skip CMK encrypted source log groups from centralization.</p>
    pub fn get_encrypted_log_group_strategy(&self) -> &::std::option::Option<crate::types::EncryptedLogGroupStrategy> {
        &self.encrypted_log_group_strategy
    }
    /// Consumes the builder and constructs a [`SourceLogsConfiguration`](crate::types::SourceLogsConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`log_group_selection_criteria`](crate::types::builders::SourceLogsConfigurationBuilder::log_group_selection_criteria)
    /// - [`encrypted_log_group_strategy`](crate::types::builders::SourceLogsConfigurationBuilder::encrypted_log_group_strategy)
    pub fn build(self) -> ::std::result::Result<crate::types::SourceLogsConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SourceLogsConfiguration {
            log_group_selection_criteria: self.log_group_selection_criteria.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "log_group_selection_criteria",
                    "log_group_selection_criteria was not specified but it is required when building SourceLogsConfiguration",
                )
            })?,
            encrypted_log_group_strategy: self.encrypted_log_group_strategy.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "encrypted_log_group_strategy",
                    "encrypted_log_group_strategy was not specified but it is required when building SourceLogsConfiguration",
                )
            })?,
        })
    }
}
