// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A summary of a centralization rule's key properties and status.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CentralizationRuleSummary {
    /// <p>The name of the organization centralization rule.</p>
    pub rule_name: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the organization centralization rule.</p>
    pub rule_arn: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Web Services Account that created the organization centralization rule.</p>
    pub creator_account_id: ::std::option::Option<::std::string::String>,
    /// <p>The timestamp when the organization centralization rule was created.</p>
    pub created_time_stamp: ::std::option::Option<i64>,
    /// <p>The Amazon Web Services region where the organization centralization rule was created.</p>
    pub created_region: ::std::option::Option<::std::string::String>,
    /// <p>The timestamp when the organization centralization rule was last updated.</p>
    pub last_update_time_stamp: ::std::option::Option<i64>,
    /// <p>The health status of the organization centralization rule.</p>
    pub rule_health: ::std::option::Option<crate::types::RuleHealth>,
    /// <p>The reason why an organization centralization rule is marked UNHEALTHY.</p>
    pub failure_reason: ::std::option::Option<crate::types::CentralizationFailureReason>,
    /// <p>The primary destination account of the organization centralization rule.</p>
    pub destination_account_id: ::std::option::Option<::std::string::String>,
    /// <p>The primary destination region of the organization centralization rule.</p>
    pub destination_region: ::std::option::Option<::std::string::String>,
}
impl CentralizationRuleSummary {
    /// <p>The name of the organization centralization rule.</p>
    pub fn rule_name(&self) -> ::std::option::Option<&str> {
        self.rule_name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the organization centralization rule.</p>
    pub fn rule_arn(&self) -> ::std::option::Option<&str> {
        self.rule_arn.as_deref()
    }
    /// <p>The Amazon Web Services Account that created the organization centralization rule.</p>
    pub fn creator_account_id(&self) -> ::std::option::Option<&str> {
        self.creator_account_id.as_deref()
    }
    /// <p>The timestamp when the organization centralization rule was created.</p>
    pub fn created_time_stamp(&self) -> ::std::option::Option<i64> {
        self.created_time_stamp
    }
    /// <p>The Amazon Web Services region where the organization centralization rule was created.</p>
    pub fn created_region(&self) -> ::std::option::Option<&str> {
        self.created_region.as_deref()
    }
    /// <p>The timestamp when the organization centralization rule was last updated.</p>
    pub fn last_update_time_stamp(&self) -> ::std::option::Option<i64> {
        self.last_update_time_stamp
    }
    /// <p>The health status of the organization centralization rule.</p>
    pub fn rule_health(&self) -> ::std::option::Option<&crate::types::RuleHealth> {
        self.rule_health.as_ref()
    }
    /// <p>The reason why an organization centralization rule is marked UNHEALTHY.</p>
    pub fn failure_reason(&self) -> ::std::option::Option<&crate::types::CentralizationFailureReason> {
        self.failure_reason.as_ref()
    }
    /// <p>The primary destination account of the organization centralization rule.</p>
    pub fn destination_account_id(&self) -> ::std::option::Option<&str> {
        self.destination_account_id.as_deref()
    }
    /// <p>The primary destination region of the organization centralization rule.</p>
    pub fn destination_region(&self) -> ::std::option::Option<&str> {
        self.destination_region.as_deref()
    }
}
impl CentralizationRuleSummary {
    /// Creates a new builder-style object to manufacture [`CentralizationRuleSummary`](crate::types::CentralizationRuleSummary).
    pub fn builder() -> crate::types::builders::CentralizationRuleSummaryBuilder {
        crate::types::builders::CentralizationRuleSummaryBuilder::default()
    }
}

/// A builder for [`CentralizationRuleSummary`](crate::types::CentralizationRuleSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CentralizationRuleSummaryBuilder {
    pub(crate) rule_name: ::std::option::Option<::std::string::String>,
    pub(crate) rule_arn: ::std::option::Option<::std::string::String>,
    pub(crate) creator_account_id: ::std::option::Option<::std::string::String>,
    pub(crate) created_time_stamp: ::std::option::Option<i64>,
    pub(crate) created_region: ::std::option::Option<::std::string::String>,
    pub(crate) last_update_time_stamp: ::std::option::Option<i64>,
    pub(crate) rule_health: ::std::option::Option<crate::types::RuleHealth>,
    pub(crate) failure_reason: ::std::option::Option<crate::types::CentralizationFailureReason>,
    pub(crate) destination_account_id: ::std::option::Option<::std::string::String>,
    pub(crate) destination_region: ::std::option::Option<::std::string::String>,
}
impl CentralizationRuleSummaryBuilder {
    /// <p>The name of the organization centralization rule.</p>
    pub fn rule_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.rule_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the organization centralization rule.</p>
    pub fn set_rule_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.rule_name = input;
        self
    }
    /// <p>The name of the organization centralization rule.</p>
    pub fn get_rule_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.rule_name
    }
    /// <p>The Amazon Resource Name (ARN) of the organization centralization rule.</p>
    pub fn rule_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.rule_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the organization centralization rule.</p>
    pub fn set_rule_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.rule_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the organization centralization rule.</p>
    pub fn get_rule_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.rule_arn
    }
    /// <p>The Amazon Web Services Account that created the organization centralization rule.</p>
    pub fn creator_account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.creator_account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services Account that created the organization centralization rule.</p>
    pub fn set_creator_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.creator_account_id = input;
        self
    }
    /// <p>The Amazon Web Services Account that created the organization centralization rule.</p>
    pub fn get_creator_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.creator_account_id
    }
    /// <p>The timestamp when the organization centralization rule was created.</p>
    pub fn created_time_stamp(mut self, input: i64) -> Self {
        self.created_time_stamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the organization centralization rule was created.</p>
    pub fn set_created_time_stamp(mut self, input: ::std::option::Option<i64>) -> Self {
        self.created_time_stamp = input;
        self
    }
    /// <p>The timestamp when the organization centralization rule was created.</p>
    pub fn get_created_time_stamp(&self) -> &::std::option::Option<i64> {
        &self.created_time_stamp
    }
    /// <p>The Amazon Web Services region where the organization centralization rule was created.</p>
    pub fn created_region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.created_region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services region where the organization centralization rule was created.</p>
    pub fn set_created_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.created_region = input;
        self
    }
    /// <p>The Amazon Web Services region where the organization centralization rule was created.</p>
    pub fn get_created_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.created_region
    }
    /// <p>The timestamp when the organization centralization rule was last updated.</p>
    pub fn last_update_time_stamp(mut self, input: i64) -> Self {
        self.last_update_time_stamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the organization centralization rule was last updated.</p>
    pub fn set_last_update_time_stamp(mut self, input: ::std::option::Option<i64>) -> Self {
        self.last_update_time_stamp = input;
        self
    }
    /// <p>The timestamp when the organization centralization rule was last updated.</p>
    pub fn get_last_update_time_stamp(&self) -> &::std::option::Option<i64> {
        &self.last_update_time_stamp
    }
    /// <p>The health status of the organization centralization rule.</p>
    pub fn rule_health(mut self, input: crate::types::RuleHealth) -> Self {
        self.rule_health = ::std::option::Option::Some(input);
        self
    }
    /// <p>The health status of the organization centralization rule.</p>
    pub fn set_rule_health(mut self, input: ::std::option::Option<crate::types::RuleHealth>) -> Self {
        self.rule_health = input;
        self
    }
    /// <p>The health status of the organization centralization rule.</p>
    pub fn get_rule_health(&self) -> &::std::option::Option<crate::types::RuleHealth> {
        &self.rule_health
    }
    /// <p>The reason why an organization centralization rule is marked UNHEALTHY.</p>
    pub fn failure_reason(mut self, input: crate::types::CentralizationFailureReason) -> Self {
        self.failure_reason = ::std::option::Option::Some(input);
        self
    }
    /// <p>The reason why an organization centralization rule is marked UNHEALTHY.</p>
    pub fn set_failure_reason(mut self, input: ::std::option::Option<crate::types::CentralizationFailureReason>) -> Self {
        self.failure_reason = input;
        self
    }
    /// <p>The reason why an organization centralization rule is marked UNHEALTHY.</p>
    pub fn get_failure_reason(&self) -> &::std::option::Option<crate::types::CentralizationFailureReason> {
        &self.failure_reason
    }
    /// <p>The primary destination account of the organization centralization rule.</p>
    pub fn destination_account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.destination_account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The primary destination account of the organization centralization rule.</p>
    pub fn set_destination_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.destination_account_id = input;
        self
    }
    /// <p>The primary destination account of the organization centralization rule.</p>
    pub fn get_destination_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.destination_account_id
    }
    /// <p>The primary destination region of the organization centralization rule.</p>
    pub fn destination_region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.destination_region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The primary destination region of the organization centralization rule.</p>
    pub fn set_destination_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.destination_region = input;
        self
    }
    /// <p>The primary destination region of the organization centralization rule.</p>
    pub fn get_destination_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.destination_region
    }
    /// Consumes the builder and constructs a [`CentralizationRuleSummary`](crate::types::CentralizationRuleSummary).
    pub fn build(self) -> crate::types::CentralizationRuleSummary {
        crate::types::CentralizationRuleSummary {
            rule_name: self.rule_name,
            rule_arn: self.rule_arn,
            creator_account_id: self.creator_account_id,
            created_time_stamp: self.created_time_stamp,
            created_region: self.created_region,
            last_update_time_stamp: self.last_update_time_stamp,
            rule_health: self.rule_health,
            failure_reason: self.failure_reason,
            destination_account_id: self.destination_account_id,
            destination_region: self.destination_region,
        }
    }
}
