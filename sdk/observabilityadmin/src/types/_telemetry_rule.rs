// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines how telemetry should be configured for specific Amazon Web Services resources.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TelemetryRule {
    /// <p>The type of Amazon Web Services resource to configure telemetry for (e.g., "AWS::EC2::VPC").</p>
    pub resource_type: ::std::option::Option<crate::types::ResourceType>,
    /// <p>The type of telemetry to collect (Logs, Metrics, or Traces).</p>
    pub telemetry_type: crate::types::TelemetryType,
    /// <p>Configuration specifying where and how the telemetry data should be delivered.</p>
    pub destination_configuration: ::std::option::Option<crate::types::TelemetryDestinationConfiguration>,
    /// <p>The organizational scope to which the rule applies, specified using accounts or organizational units.</p>
    pub scope: ::std::option::Option<::std::string::String>,
    /// <p>Criteria for selecting which resources the rule applies to, such as resource tags.</p>
    pub selection_criteria: ::std::option::Option<::std::string::String>,
}
impl TelemetryRule {
    /// <p>The type of Amazon Web Services resource to configure telemetry for (e.g., "AWS::EC2::VPC").</p>
    pub fn resource_type(&self) -> ::std::option::Option<&crate::types::ResourceType> {
        self.resource_type.as_ref()
    }
    /// <p>The type of telemetry to collect (Logs, Metrics, or Traces).</p>
    pub fn telemetry_type(&self) -> &crate::types::TelemetryType {
        &self.telemetry_type
    }
    /// <p>Configuration specifying where and how the telemetry data should be delivered.</p>
    pub fn destination_configuration(&self) -> ::std::option::Option<&crate::types::TelemetryDestinationConfiguration> {
        self.destination_configuration.as_ref()
    }
    /// <p>The organizational scope to which the rule applies, specified using accounts or organizational units.</p>
    pub fn scope(&self) -> ::std::option::Option<&str> {
        self.scope.as_deref()
    }
    /// <p>Criteria for selecting which resources the rule applies to, such as resource tags.</p>
    pub fn selection_criteria(&self) -> ::std::option::Option<&str> {
        self.selection_criteria.as_deref()
    }
}
impl TelemetryRule {
    /// Creates a new builder-style object to manufacture [`TelemetryRule`](crate::types::TelemetryRule).
    pub fn builder() -> crate::types::builders::TelemetryRuleBuilder {
        crate::types::builders::TelemetryRuleBuilder::default()
    }
}

/// A builder for [`TelemetryRule`](crate::types::TelemetryRule).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct TelemetryRuleBuilder {
    pub(crate) resource_type: ::std::option::Option<crate::types::ResourceType>,
    pub(crate) telemetry_type: ::std::option::Option<crate::types::TelemetryType>,
    pub(crate) destination_configuration: ::std::option::Option<crate::types::TelemetryDestinationConfiguration>,
    pub(crate) scope: ::std::option::Option<::std::string::String>,
    pub(crate) selection_criteria: ::std::option::Option<::std::string::String>,
}
impl TelemetryRuleBuilder {
    /// <p>The type of Amazon Web Services resource to configure telemetry for (e.g., "AWS::EC2::VPC").</p>
    pub fn resource_type(mut self, input: crate::types::ResourceType) -> Self {
        self.resource_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of Amazon Web Services resource to configure telemetry for (e.g., "AWS::EC2::VPC").</p>
    pub fn set_resource_type(mut self, input: ::std::option::Option<crate::types::ResourceType>) -> Self {
        self.resource_type = input;
        self
    }
    /// <p>The type of Amazon Web Services resource to configure telemetry for (e.g., "AWS::EC2::VPC").</p>
    pub fn get_resource_type(&self) -> &::std::option::Option<crate::types::ResourceType> {
        &self.resource_type
    }
    /// <p>The type of telemetry to collect (Logs, Metrics, or Traces).</p>
    /// This field is required.
    pub fn telemetry_type(mut self, input: crate::types::TelemetryType) -> Self {
        self.telemetry_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of telemetry to collect (Logs, Metrics, or Traces).</p>
    pub fn set_telemetry_type(mut self, input: ::std::option::Option<crate::types::TelemetryType>) -> Self {
        self.telemetry_type = input;
        self
    }
    /// <p>The type of telemetry to collect (Logs, Metrics, or Traces).</p>
    pub fn get_telemetry_type(&self) -> &::std::option::Option<crate::types::TelemetryType> {
        &self.telemetry_type
    }
    /// <p>Configuration specifying where and how the telemetry data should be delivered.</p>
    pub fn destination_configuration(mut self, input: crate::types::TelemetryDestinationConfiguration) -> Self {
        self.destination_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Configuration specifying where and how the telemetry data should be delivered.</p>
    pub fn set_destination_configuration(mut self, input: ::std::option::Option<crate::types::TelemetryDestinationConfiguration>) -> Self {
        self.destination_configuration = input;
        self
    }
    /// <p>Configuration specifying where and how the telemetry data should be delivered.</p>
    pub fn get_destination_configuration(&self) -> &::std::option::Option<crate::types::TelemetryDestinationConfiguration> {
        &self.destination_configuration
    }
    /// <p>The organizational scope to which the rule applies, specified using accounts or organizational units.</p>
    pub fn scope(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.scope = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The organizational scope to which the rule applies, specified using accounts or organizational units.</p>
    pub fn set_scope(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.scope = input;
        self
    }
    /// <p>The organizational scope to which the rule applies, specified using accounts or organizational units.</p>
    pub fn get_scope(&self) -> &::std::option::Option<::std::string::String> {
        &self.scope
    }
    /// <p>Criteria for selecting which resources the rule applies to, such as resource tags.</p>
    pub fn selection_criteria(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.selection_criteria = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Criteria for selecting which resources the rule applies to, such as resource tags.</p>
    pub fn set_selection_criteria(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.selection_criteria = input;
        self
    }
    /// <p>Criteria for selecting which resources the rule applies to, such as resource tags.</p>
    pub fn get_selection_criteria(&self) -> &::std::option::Option<::std::string::String> {
        &self.selection_criteria
    }
    /// Consumes the builder and constructs a [`TelemetryRule`](crate::types::TelemetryRule).
    /// This method will fail if any of the following fields are not set:
    /// - [`telemetry_type`](crate::types::builders::TelemetryRuleBuilder::telemetry_type)
    pub fn build(self) -> ::std::result::Result<crate::types::TelemetryRule, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::TelemetryRule {
            resource_type: self.resource_type,
            telemetry_type: self.telemetry_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "telemetry_type",
                    "telemetry_type was not specified but it is required when building TelemetryRule",
                )
            })?,
            destination_configuration: self.destination_configuration,
            scope: self.scope,
            selection_criteria: self.selection_criteria,
        })
    }
}
