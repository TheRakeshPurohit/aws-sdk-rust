// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A summary of a telemetry rule's key properties.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TelemetryRuleSummary {
    /// <p>The name of the telemetry rule.</p>
    pub rule_name: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the telemetry rule.</p>
    pub rule_arn: ::std::option::Option<::std::string::String>,
    /// <p>The timestamp when the telemetry rule was created.</p>
    pub created_time_stamp: ::std::option::Option<i64>,
    /// <p>The timestamp when the telemetry rule was last modified.</p>
    pub last_update_time_stamp: ::std::option::Option<i64>,
    /// <p>The type of Amazon Web Services resource the rule applies to.</p>
    pub resource_type: ::std::option::Option<crate::types::ResourceType>,
    /// <p>The type of telemetry (Logs, Metrics, or Traces) the rule configures.</p>
    pub telemetry_type: ::std::option::Option<crate::types::TelemetryType>,
}
impl TelemetryRuleSummary {
    /// <p>The name of the telemetry rule.</p>
    pub fn rule_name(&self) -> ::std::option::Option<&str> {
        self.rule_name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the telemetry rule.</p>
    pub fn rule_arn(&self) -> ::std::option::Option<&str> {
        self.rule_arn.as_deref()
    }
    /// <p>The timestamp when the telemetry rule was created.</p>
    pub fn created_time_stamp(&self) -> ::std::option::Option<i64> {
        self.created_time_stamp
    }
    /// <p>The timestamp when the telemetry rule was last modified.</p>
    pub fn last_update_time_stamp(&self) -> ::std::option::Option<i64> {
        self.last_update_time_stamp
    }
    /// <p>The type of Amazon Web Services resource the rule applies to.</p>
    pub fn resource_type(&self) -> ::std::option::Option<&crate::types::ResourceType> {
        self.resource_type.as_ref()
    }
    /// <p>The type of telemetry (Logs, Metrics, or Traces) the rule configures.</p>
    pub fn telemetry_type(&self) -> ::std::option::Option<&crate::types::TelemetryType> {
        self.telemetry_type.as_ref()
    }
}
impl TelemetryRuleSummary {
    /// Creates a new builder-style object to manufacture [`TelemetryRuleSummary`](crate::types::TelemetryRuleSummary).
    pub fn builder() -> crate::types::builders::TelemetryRuleSummaryBuilder {
        crate::types::builders::TelemetryRuleSummaryBuilder::default()
    }
}

/// A builder for [`TelemetryRuleSummary`](crate::types::TelemetryRuleSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct TelemetryRuleSummaryBuilder {
    pub(crate) rule_name: ::std::option::Option<::std::string::String>,
    pub(crate) rule_arn: ::std::option::Option<::std::string::String>,
    pub(crate) created_time_stamp: ::std::option::Option<i64>,
    pub(crate) last_update_time_stamp: ::std::option::Option<i64>,
    pub(crate) resource_type: ::std::option::Option<crate::types::ResourceType>,
    pub(crate) telemetry_type: ::std::option::Option<crate::types::TelemetryType>,
}
impl TelemetryRuleSummaryBuilder {
    /// <p>The name of the telemetry rule.</p>
    pub fn rule_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.rule_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the telemetry rule.</p>
    pub fn set_rule_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.rule_name = input;
        self
    }
    /// <p>The name of the telemetry rule.</p>
    pub fn get_rule_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.rule_name
    }
    /// <p>The Amazon Resource Name (ARN) of the telemetry rule.</p>
    pub fn rule_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.rule_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the telemetry rule.</p>
    pub fn set_rule_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.rule_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the telemetry rule.</p>
    pub fn get_rule_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.rule_arn
    }
    /// <p>The timestamp when the telemetry rule was created.</p>
    pub fn created_time_stamp(mut self, input: i64) -> Self {
        self.created_time_stamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the telemetry rule was created.</p>
    pub fn set_created_time_stamp(mut self, input: ::std::option::Option<i64>) -> Self {
        self.created_time_stamp = input;
        self
    }
    /// <p>The timestamp when the telemetry rule was created.</p>
    pub fn get_created_time_stamp(&self) -> &::std::option::Option<i64> {
        &self.created_time_stamp
    }
    /// <p>The timestamp when the telemetry rule was last modified.</p>
    pub fn last_update_time_stamp(mut self, input: i64) -> Self {
        self.last_update_time_stamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the telemetry rule was last modified.</p>
    pub fn set_last_update_time_stamp(mut self, input: ::std::option::Option<i64>) -> Self {
        self.last_update_time_stamp = input;
        self
    }
    /// <p>The timestamp when the telemetry rule was last modified.</p>
    pub fn get_last_update_time_stamp(&self) -> &::std::option::Option<i64> {
        &self.last_update_time_stamp
    }
    /// <p>The type of Amazon Web Services resource the rule applies to.</p>
    pub fn resource_type(mut self, input: crate::types::ResourceType) -> Self {
        self.resource_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of Amazon Web Services resource the rule applies to.</p>
    pub fn set_resource_type(mut self, input: ::std::option::Option<crate::types::ResourceType>) -> Self {
        self.resource_type = input;
        self
    }
    /// <p>The type of Amazon Web Services resource the rule applies to.</p>
    pub fn get_resource_type(&self) -> &::std::option::Option<crate::types::ResourceType> {
        &self.resource_type
    }
    /// <p>The type of telemetry (Logs, Metrics, or Traces) the rule configures.</p>
    pub fn telemetry_type(mut self, input: crate::types::TelemetryType) -> Self {
        self.telemetry_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of telemetry (Logs, Metrics, or Traces) the rule configures.</p>
    pub fn set_telemetry_type(mut self, input: ::std::option::Option<crate::types::TelemetryType>) -> Self {
        self.telemetry_type = input;
        self
    }
    /// <p>The type of telemetry (Logs, Metrics, or Traces) the rule configures.</p>
    pub fn get_telemetry_type(&self) -> &::std::option::Option<crate::types::TelemetryType> {
        &self.telemetry_type
    }
    /// Consumes the builder and constructs a [`TelemetryRuleSummary`](crate::types::TelemetryRuleSummary).
    pub fn build(self) -> crate::types::TelemetryRuleSummary {
        crate::types::TelemetryRuleSummary {
            rule_name: self.rule_name,
            rule_arn: self.rule_arn,
            created_time_stamp: self.created_time_stamp,
            last_update_time_stamp: self.last_update_time_stamp,
            resource_type: self.resource_type,
            telemetry_type: self.telemetry_type,
        }
    }
}
