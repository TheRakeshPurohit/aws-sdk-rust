// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration parameters specific to VPC Flow Logs.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct VpcFlowLogParameters {
    /// <p>The format in which VPC Flow Log entries should be logged.</p>
    pub log_format: ::std::option::Option<::std::string::String>,
    /// <p>The type of traffic to log (ACCEPT, REJECT, or ALL).</p>
    pub traffic_type: ::std::option::Option<::std::string::String>,
    /// <p>The maximum interval in seconds between the capture of flow log records.</p>
    pub max_aggregation_interval: ::std::option::Option<i32>,
}
impl VpcFlowLogParameters {
    /// <p>The format in which VPC Flow Log entries should be logged.</p>
    pub fn log_format(&self) -> ::std::option::Option<&str> {
        self.log_format.as_deref()
    }
    /// <p>The type of traffic to log (ACCEPT, REJECT, or ALL).</p>
    pub fn traffic_type(&self) -> ::std::option::Option<&str> {
        self.traffic_type.as_deref()
    }
    /// <p>The maximum interval in seconds between the capture of flow log records.</p>
    pub fn max_aggregation_interval(&self) -> ::std::option::Option<i32> {
        self.max_aggregation_interval
    }
}
impl VpcFlowLogParameters {
    /// Creates a new builder-style object to manufacture [`VpcFlowLogParameters`](crate::types::VpcFlowLogParameters).
    pub fn builder() -> crate::types::builders::VpcFlowLogParametersBuilder {
        crate::types::builders::VpcFlowLogParametersBuilder::default()
    }
}

/// A builder for [`VpcFlowLogParameters`](crate::types::VpcFlowLogParameters).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct VpcFlowLogParametersBuilder {
    pub(crate) log_format: ::std::option::Option<::std::string::String>,
    pub(crate) traffic_type: ::std::option::Option<::std::string::String>,
    pub(crate) max_aggregation_interval: ::std::option::Option<i32>,
}
impl VpcFlowLogParametersBuilder {
    /// <p>The format in which VPC Flow Log entries should be logged.</p>
    pub fn log_format(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.log_format = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The format in which VPC Flow Log entries should be logged.</p>
    pub fn set_log_format(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.log_format = input;
        self
    }
    /// <p>The format in which VPC Flow Log entries should be logged.</p>
    pub fn get_log_format(&self) -> &::std::option::Option<::std::string::String> {
        &self.log_format
    }
    /// <p>The type of traffic to log (ACCEPT, REJECT, or ALL).</p>
    pub fn traffic_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.traffic_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of traffic to log (ACCEPT, REJECT, or ALL).</p>
    pub fn set_traffic_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.traffic_type = input;
        self
    }
    /// <p>The type of traffic to log (ACCEPT, REJECT, or ALL).</p>
    pub fn get_traffic_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.traffic_type
    }
    /// <p>The maximum interval in seconds between the capture of flow log records.</p>
    pub fn max_aggregation_interval(mut self, input: i32) -> Self {
        self.max_aggregation_interval = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum interval in seconds between the capture of flow log records.</p>
    pub fn set_max_aggregation_interval(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_aggregation_interval = input;
        self
    }
    /// <p>The maximum interval in seconds between the capture of flow log records.</p>
    pub fn get_max_aggregation_interval(&self) -> &::std::option::Option<i32> {
        &self.max_aggregation_interval
    }
    /// Consumes the builder and constructs a [`VpcFlowLogParameters`](crate::types::VpcFlowLogParameters).
    pub fn build(self) -> crate::types::VpcFlowLogParameters {
        crate::types::VpcFlowLogParameters {
            log_format: self.log_format,
            traffic_type: self.traffic_type,
            max_aggregation_interval: self.max_aggregation_interval,
        }
    }
}
