// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines how telemetry data should be centralized across an Amazon Web Services Organization, including source and destination configurations.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CentralizationRule {
    /// <p>Configuration determining the source of the telemetry data to be centralized.</p>
    pub source: ::std::option::Option<crate::types::CentralizationRuleSource>,
    /// <p>Configuration determining where the telemetry data should be centralized, backed up, as well as encryption configuration for the primary and backup destinations.</p>
    pub destination: ::std::option::Option<crate::types::CentralizationRuleDestination>,
}
impl CentralizationRule {
    /// <p>Configuration determining the source of the telemetry data to be centralized.</p>
    pub fn source(&self) -> ::std::option::Option<&crate::types::CentralizationRuleSource> {
        self.source.as_ref()
    }
    /// <p>Configuration determining where the telemetry data should be centralized, backed up, as well as encryption configuration for the primary and backup destinations.</p>
    pub fn destination(&self) -> ::std::option::Option<&crate::types::CentralizationRuleDestination> {
        self.destination.as_ref()
    }
}
impl CentralizationRule {
    /// Creates a new builder-style object to manufacture [`CentralizationRule`](crate::types::CentralizationRule).
    pub fn builder() -> crate::types::builders::CentralizationRuleBuilder {
        crate::types::builders::CentralizationRuleBuilder::default()
    }
}

/// A builder for [`CentralizationRule`](crate::types::CentralizationRule).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CentralizationRuleBuilder {
    pub(crate) source: ::std::option::Option<crate::types::CentralizationRuleSource>,
    pub(crate) destination: ::std::option::Option<crate::types::CentralizationRuleDestination>,
}
impl CentralizationRuleBuilder {
    /// <p>Configuration determining the source of the telemetry data to be centralized.</p>
    /// This field is required.
    pub fn source(mut self, input: crate::types::CentralizationRuleSource) -> Self {
        self.source = ::std::option::Option::Some(input);
        self
    }
    /// <p>Configuration determining the source of the telemetry data to be centralized.</p>
    pub fn set_source(mut self, input: ::std::option::Option<crate::types::CentralizationRuleSource>) -> Self {
        self.source = input;
        self
    }
    /// <p>Configuration determining the source of the telemetry data to be centralized.</p>
    pub fn get_source(&self) -> &::std::option::Option<crate::types::CentralizationRuleSource> {
        &self.source
    }
    /// <p>Configuration determining where the telemetry data should be centralized, backed up, as well as encryption configuration for the primary and backup destinations.</p>
    /// This field is required.
    pub fn destination(mut self, input: crate::types::CentralizationRuleDestination) -> Self {
        self.destination = ::std::option::Option::Some(input);
        self
    }
    /// <p>Configuration determining where the telemetry data should be centralized, backed up, as well as encryption configuration for the primary and backup destinations.</p>
    pub fn set_destination(mut self, input: ::std::option::Option<crate::types::CentralizationRuleDestination>) -> Self {
        self.destination = input;
        self
    }
    /// <p>Configuration determining where the telemetry data should be centralized, backed up, as well as encryption configuration for the primary and backup destinations.</p>
    pub fn get_destination(&self) -> &::std::option::Option<crate::types::CentralizationRuleDestination> {
        &self.destination
    }
    /// Consumes the builder and constructs a [`CentralizationRule`](crate::types::CentralizationRule).
    pub fn build(self) -> crate::types::CentralizationRule {
        crate::types::CentralizationRule {
            source: self.source,
            destination: self.destination,
        }
    }
}
