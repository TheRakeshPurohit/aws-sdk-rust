// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration for centralization destination log groups, including encryption and backup settings.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DestinationLogsConfiguration {
    /// <p>The encryption configuration for centralization destination log groups.</p>
    pub logs_encryption_configuration: ::std::option::Option<crate::types::LogsEncryptionConfiguration>,
    /// <p>Configuration defining the backup region and an optional KMS key for the backup destination.</p>
    pub backup_configuration: ::std::option::Option<crate::types::LogsBackupConfiguration>,
}
impl DestinationLogsConfiguration {
    /// <p>The encryption configuration for centralization destination log groups.</p>
    pub fn logs_encryption_configuration(&self) -> ::std::option::Option<&crate::types::LogsEncryptionConfiguration> {
        self.logs_encryption_configuration.as_ref()
    }
    /// <p>Configuration defining the backup region and an optional KMS key for the backup destination.</p>
    pub fn backup_configuration(&self) -> ::std::option::Option<&crate::types::LogsBackupConfiguration> {
        self.backup_configuration.as_ref()
    }
}
impl DestinationLogsConfiguration {
    /// Creates a new builder-style object to manufacture [`DestinationLogsConfiguration`](crate::types::DestinationLogsConfiguration).
    pub fn builder() -> crate::types::builders::DestinationLogsConfigurationBuilder {
        crate::types::builders::DestinationLogsConfigurationBuilder::default()
    }
}

/// A builder for [`DestinationLogsConfiguration`](crate::types::DestinationLogsConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DestinationLogsConfigurationBuilder {
    pub(crate) logs_encryption_configuration: ::std::option::Option<crate::types::LogsEncryptionConfiguration>,
    pub(crate) backup_configuration: ::std::option::Option<crate::types::LogsBackupConfiguration>,
}
impl DestinationLogsConfigurationBuilder {
    /// <p>The encryption configuration for centralization destination log groups.</p>
    pub fn logs_encryption_configuration(mut self, input: crate::types::LogsEncryptionConfiguration) -> Self {
        self.logs_encryption_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The encryption configuration for centralization destination log groups.</p>
    pub fn set_logs_encryption_configuration(mut self, input: ::std::option::Option<crate::types::LogsEncryptionConfiguration>) -> Self {
        self.logs_encryption_configuration = input;
        self
    }
    /// <p>The encryption configuration for centralization destination log groups.</p>
    pub fn get_logs_encryption_configuration(&self) -> &::std::option::Option<crate::types::LogsEncryptionConfiguration> {
        &self.logs_encryption_configuration
    }
    /// <p>Configuration defining the backup region and an optional KMS key for the backup destination.</p>
    pub fn backup_configuration(mut self, input: crate::types::LogsBackupConfiguration) -> Self {
        self.backup_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Configuration defining the backup region and an optional KMS key for the backup destination.</p>
    pub fn set_backup_configuration(mut self, input: ::std::option::Option<crate::types::LogsBackupConfiguration>) -> Self {
        self.backup_configuration = input;
        self
    }
    /// <p>Configuration defining the backup region and an optional KMS key for the backup destination.</p>
    pub fn get_backup_configuration(&self) -> &::std::option::Option<crate::types::LogsBackupConfiguration> {
        &self.backup_configuration
    }
    /// Consumes the builder and constructs a [`DestinationLogsConfiguration`](crate::types::DestinationLogsConfiguration).
    pub fn build(self) -> crate::types::DestinationLogsConfiguration {
        crate::types::DestinationLogsConfiguration {
            logs_encryption_configuration: self.logs_encryption_configuration,
            backup_configuration: self.backup_configuration,
        }
    }
}
