// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration for encrypting centralized log groups. This configuration is only applied to destination log groups for which the corresponding source log groups are encrypted using Customer Managed KMS Keys.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LogsEncryptionConfiguration {
    /// <p>Configuration that determines the encryption strategy of the destination log groups. CUSTOMER_MANAGED uses the configured KmsKeyArn to encrypt newly created destination log groups.</p>
    pub encryption_strategy: crate::types::EncryptionStrategy,
    /// <p>KMS Key arn belonging to the primary destination account and region, to encrypt newly created central log groups in the primary destination.</p>
    pub kms_key_arn: ::std::option::Option<::std::string::String>,
    /// <p>Conflict resolution strategy for centralization if the encryption strategy is set to CUSTOMER_MANAGED and the destination log group is encrypted with an AWS_OWNED KMS Key. ALLOW lets centralization go through while SKIP prevents centralization into the destination log group.</p>
    pub encryption_conflict_resolution_strategy: ::std::option::Option<crate::types::EncryptionConflictResolutionStrategy>,
}
impl LogsEncryptionConfiguration {
    /// <p>Configuration that determines the encryption strategy of the destination log groups. CUSTOMER_MANAGED uses the configured KmsKeyArn to encrypt newly created destination log groups.</p>
    pub fn encryption_strategy(&self) -> &crate::types::EncryptionStrategy {
        &self.encryption_strategy
    }
    /// <p>KMS Key arn belonging to the primary destination account and region, to encrypt newly created central log groups in the primary destination.</p>
    pub fn kms_key_arn(&self) -> ::std::option::Option<&str> {
        self.kms_key_arn.as_deref()
    }
    /// <p>Conflict resolution strategy for centralization if the encryption strategy is set to CUSTOMER_MANAGED and the destination log group is encrypted with an AWS_OWNED KMS Key. ALLOW lets centralization go through while SKIP prevents centralization into the destination log group.</p>
    pub fn encryption_conflict_resolution_strategy(&self) -> ::std::option::Option<&crate::types::EncryptionConflictResolutionStrategy> {
        self.encryption_conflict_resolution_strategy.as_ref()
    }
}
impl LogsEncryptionConfiguration {
    /// Creates a new builder-style object to manufacture [`LogsEncryptionConfiguration`](crate::types::LogsEncryptionConfiguration).
    pub fn builder() -> crate::types::builders::LogsEncryptionConfigurationBuilder {
        crate::types::builders::LogsEncryptionConfigurationBuilder::default()
    }
}

/// A builder for [`LogsEncryptionConfiguration`](crate::types::LogsEncryptionConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct LogsEncryptionConfigurationBuilder {
    pub(crate) encryption_strategy: ::std::option::Option<crate::types::EncryptionStrategy>,
    pub(crate) kms_key_arn: ::std::option::Option<::std::string::String>,
    pub(crate) encryption_conflict_resolution_strategy: ::std::option::Option<crate::types::EncryptionConflictResolutionStrategy>,
}
impl LogsEncryptionConfigurationBuilder {
    /// <p>Configuration that determines the encryption strategy of the destination log groups. CUSTOMER_MANAGED uses the configured KmsKeyArn to encrypt newly created destination log groups.</p>
    /// This field is required.
    pub fn encryption_strategy(mut self, input: crate::types::EncryptionStrategy) -> Self {
        self.encryption_strategy = ::std::option::Option::Some(input);
        self
    }
    /// <p>Configuration that determines the encryption strategy of the destination log groups. CUSTOMER_MANAGED uses the configured KmsKeyArn to encrypt newly created destination log groups.</p>
    pub fn set_encryption_strategy(mut self, input: ::std::option::Option<crate::types::EncryptionStrategy>) -> Self {
        self.encryption_strategy = input;
        self
    }
    /// <p>Configuration that determines the encryption strategy of the destination log groups. CUSTOMER_MANAGED uses the configured KmsKeyArn to encrypt newly created destination log groups.</p>
    pub fn get_encryption_strategy(&self) -> &::std::option::Option<crate::types::EncryptionStrategy> {
        &self.encryption_strategy
    }
    /// <p>KMS Key arn belonging to the primary destination account and region, to encrypt newly created central log groups in the primary destination.</p>
    pub fn kms_key_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.kms_key_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>KMS Key arn belonging to the primary destination account and region, to encrypt newly created central log groups in the primary destination.</p>
    pub fn set_kms_key_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.kms_key_arn = input;
        self
    }
    /// <p>KMS Key arn belonging to the primary destination account and region, to encrypt newly created central log groups in the primary destination.</p>
    pub fn get_kms_key_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.kms_key_arn
    }
    /// <p>Conflict resolution strategy for centralization if the encryption strategy is set to CUSTOMER_MANAGED and the destination log group is encrypted with an AWS_OWNED KMS Key. ALLOW lets centralization go through while SKIP prevents centralization into the destination log group.</p>
    pub fn encryption_conflict_resolution_strategy(mut self, input: crate::types::EncryptionConflictResolutionStrategy) -> Self {
        self.encryption_conflict_resolution_strategy = ::std::option::Option::Some(input);
        self
    }
    /// <p>Conflict resolution strategy for centralization if the encryption strategy is set to CUSTOMER_MANAGED and the destination log group is encrypted with an AWS_OWNED KMS Key. ALLOW lets centralization go through while SKIP prevents centralization into the destination log group.</p>
    pub fn set_encryption_conflict_resolution_strategy(
        mut self,
        input: ::std::option::Option<crate::types::EncryptionConflictResolutionStrategy>,
    ) -> Self {
        self.encryption_conflict_resolution_strategy = input;
        self
    }
    /// <p>Conflict resolution strategy for centralization if the encryption strategy is set to CUSTOMER_MANAGED and the destination log group is encrypted with an AWS_OWNED KMS Key. ALLOW lets centralization go through while SKIP prevents centralization into the destination log group.</p>
    pub fn get_encryption_conflict_resolution_strategy(&self) -> &::std::option::Option<crate::types::EncryptionConflictResolutionStrategy> {
        &self.encryption_conflict_resolution_strategy
    }
    /// Consumes the builder and constructs a [`LogsEncryptionConfiguration`](crate::types::LogsEncryptionConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`encryption_strategy`](crate::types::builders::LogsEncryptionConfigurationBuilder::encryption_strategy)
    pub fn build(self) -> ::std::result::Result<crate::types::LogsEncryptionConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::LogsEncryptionConfiguration {
            encryption_strategy: self.encryption_strategy.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "encryption_strategy",
                    "encryption_strategy was not specified but it is required when building LogsEncryptionConfiguration",
                )
            })?,
            kms_key_arn: self.kms_key_arn,
            encryption_conflict_resolution_strategy: self.encryption_conflict_resolution_strategy,
        })
    }
}
