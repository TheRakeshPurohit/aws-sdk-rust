// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration specifying the primary destination for centralized telemetry data.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CentralizationRuleDestination {
    /// <p>The primary destination region to which telemetry data should be centralized.</p>
    pub region: ::std::string::String,
    /// <p>The destination account (within the organization) to which the telemetry data should be centralized.</p>
    pub account: ::std::option::Option<::std::string::String>,
    /// <p>Log specific configuration for centralization destination log groups.</p>
    pub destination_logs_configuration: ::std::option::Option<crate::types::DestinationLogsConfiguration>,
}
impl CentralizationRuleDestination {
    /// <p>The primary destination region to which telemetry data should be centralized.</p>
    pub fn region(&self) -> &str {
        use std::ops::Deref;
        self.region.deref()
    }
    /// <p>The destination account (within the organization) to which the telemetry data should be centralized.</p>
    pub fn account(&self) -> ::std::option::Option<&str> {
        self.account.as_deref()
    }
    /// <p>Log specific configuration for centralization destination log groups.</p>
    pub fn destination_logs_configuration(&self) -> ::std::option::Option<&crate::types::DestinationLogsConfiguration> {
        self.destination_logs_configuration.as_ref()
    }
}
impl CentralizationRuleDestination {
    /// Creates a new builder-style object to manufacture [`CentralizationRuleDestination`](crate::types::CentralizationRuleDestination).
    pub fn builder() -> crate::types::builders::CentralizationRuleDestinationBuilder {
        crate::types::builders::CentralizationRuleDestinationBuilder::default()
    }
}

/// A builder for [`CentralizationRuleDestination`](crate::types::CentralizationRuleDestination).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CentralizationRuleDestinationBuilder {
    pub(crate) region: ::std::option::Option<::std::string::String>,
    pub(crate) account: ::std::option::Option<::std::string::String>,
    pub(crate) destination_logs_configuration: ::std::option::Option<crate::types::DestinationLogsConfiguration>,
}
impl CentralizationRuleDestinationBuilder {
    /// <p>The primary destination region to which telemetry data should be centralized.</p>
    /// This field is required.
    pub fn region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The primary destination region to which telemetry data should be centralized.</p>
    pub fn set_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.region = input;
        self
    }
    /// <p>The primary destination region to which telemetry data should be centralized.</p>
    pub fn get_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.region
    }
    /// <p>The destination account (within the organization) to which the telemetry data should be centralized.</p>
    pub fn account(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.account = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The destination account (within the organization) to which the telemetry data should be centralized.</p>
    pub fn set_account(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.account = input;
        self
    }
    /// <p>The destination account (within the organization) to which the telemetry data should be centralized.</p>
    pub fn get_account(&self) -> &::std::option::Option<::std::string::String> {
        &self.account
    }
    /// <p>Log specific configuration for centralization destination log groups.</p>
    pub fn destination_logs_configuration(mut self, input: crate::types::DestinationLogsConfiguration) -> Self {
        self.destination_logs_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Log specific configuration for centralization destination log groups.</p>
    pub fn set_destination_logs_configuration(mut self, input: ::std::option::Option<crate::types::DestinationLogsConfiguration>) -> Self {
        self.destination_logs_configuration = input;
        self
    }
    /// <p>Log specific configuration for centralization destination log groups.</p>
    pub fn get_destination_logs_configuration(&self) -> &::std::option::Option<crate::types::DestinationLogsConfiguration> {
        &self.destination_logs_configuration
    }
    /// Consumes the builder and constructs a [`CentralizationRuleDestination`](crate::types::CentralizationRuleDestination).
    /// This method will fail if any of the following fields are not set:
    /// - [`region`](crate::types::builders::CentralizationRuleDestinationBuilder::region)
    pub fn build(self) -> ::std::result::Result<crate::types::CentralizationRuleDestination, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CentralizationRuleDestination {
            region: self.region.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "region",
                    "region was not specified but it is required when building CentralizationRuleDestination",
                )
            })?,
            account: self.account,
            destination_logs_configuration: self.destination_logs_configuration,
        })
    }
}
