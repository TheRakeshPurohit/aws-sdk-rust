// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::list_resource_telemetry_for_organization::_list_resource_telemetry_for_organization_output::ListResourceTelemetryForOrganizationOutputBuilder;

pub use crate::operation::list_resource_telemetry_for_organization::_list_resource_telemetry_for_organization_input::ListResourceTelemetryForOrganizationInputBuilder;

impl crate::operation::list_resource_telemetry_for_organization::builders::ListResourceTelemetryForOrganizationInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::list_resource_telemetry_for_organization::ListResourceTelemetryForOrganizationOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_resource_telemetry_for_organization::ListResourceTelemetryForOrganizationError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.list_resource_telemetry_for_organization();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `ListResourceTelemetryForOrganization`.
///
/// <p>Returns a list of telemetry configurations for Amazon Web Services resources supported by telemetry config in the organization.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct ListResourceTelemetryForOrganizationFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::list_resource_telemetry_for_organization::builders::ListResourceTelemetryForOrganizationInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::list_resource_telemetry_for_organization::ListResourceTelemetryForOrganizationOutput,
        crate::operation::list_resource_telemetry_for_organization::ListResourceTelemetryForOrganizationError,
    > for ListResourceTelemetryForOrganizationFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::list_resource_telemetry_for_organization::ListResourceTelemetryForOrganizationOutput,
            crate::operation::list_resource_telemetry_for_organization::ListResourceTelemetryForOrganizationError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl ListResourceTelemetryForOrganizationFluentBuilder {
    /// Creates a new `ListResourceTelemetryForOrganizationFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the ListResourceTelemetryForOrganization as a reference.
    pub fn as_input(
        &self,
    ) -> &crate::operation::list_resource_telemetry_for_organization::builders::ListResourceTelemetryForOrganizationInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_resource_telemetry_for_organization::ListResourceTelemetryForOrganizationOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_resource_telemetry_for_organization::ListResourceTelemetryForOrganizationError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins =
            crate::operation::list_resource_telemetry_for_organization::ListResourceTelemetryForOrganization::operation_runtime_plugins(
                self.handle.runtime_plugins.clone(),
                &self.handle.conf,
                self.config_override,
            );
        crate::operation::list_resource_telemetry_for_organization::ListResourceTelemetryForOrganization::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::list_resource_telemetry_for_organization::ListResourceTelemetryForOrganizationOutput,
        crate::operation::list_resource_telemetry_for_organization::ListResourceTelemetryForOrganizationError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::list_resource_telemetry_for_organization::paginator::ListResourceTelemetryForOrganizationPaginator::send) which returns a [`PaginationStream`](aws_smithy_async::future::pagination_stream::PaginationStream).
    pub fn into_paginator(
        self,
    ) -> crate::operation::list_resource_telemetry_for_organization::paginator::ListResourceTelemetryForOrganizationPaginator {
        crate::operation::list_resource_telemetry_for_organization::paginator::ListResourceTelemetryForOrganizationPaginator::new(
            self.handle,
            self.inner,
        )
    }
    ///
    /// Appends an item to `AccountIdentifiers`.
    ///
    /// To override the contents of this collection use [`set_account_identifiers`](Self::set_account_identifiers).
    ///
    /// <p>A list of Amazon Web Services accounts used to filter the resources to those associated with the specified accounts.</p>
    pub fn account_identifiers(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.account_identifiers(input.into());
        self
    }
    /// <p>A list of Amazon Web Services accounts used to filter the resources to those associated with the specified accounts.</p>
    pub fn set_account_identifiers(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_account_identifiers(input);
        self
    }
    /// <p>A list of Amazon Web Services accounts used to filter the resources to those associated with the specified accounts.</p>
    pub fn get_account_identifiers(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_account_identifiers()
    }
    /// <p>A string used to filter resources in the organization which have a <code>ResourceIdentifier</code> starting with the <code>ResourceIdentifierPrefix</code>.</p>
    pub fn resource_identifier_prefix(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.resource_identifier_prefix(input.into());
        self
    }
    /// <p>A string used to filter resources in the organization which have a <code>ResourceIdentifier</code> starting with the <code>ResourceIdentifierPrefix</code>.</p>
    pub fn set_resource_identifier_prefix(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_resource_identifier_prefix(input);
        self
    }
    /// <p>A string used to filter resources in the organization which have a <code>ResourceIdentifier</code> starting with the <code>ResourceIdentifierPrefix</code>.</p>
    pub fn get_resource_identifier_prefix(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_resource_identifier_prefix()
    }
    ///
    /// Appends an item to `ResourceTypes`.
    ///
    /// To override the contents of this collection use [`set_resource_types`](Self::set_resource_types).
    ///
    /// <p>A list of resource types used to filter resources in the organization. If this parameter is provided, the resources will be returned in the same order used in the request.</p>
    pub fn resource_types(mut self, input: crate::types::ResourceType) -> Self {
        self.inner = self.inner.resource_types(input);
        self
    }
    /// <p>A list of resource types used to filter resources in the organization. If this parameter is provided, the resources will be returned in the same order used in the request.</p>
    pub fn set_resource_types(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ResourceType>>) -> Self {
        self.inner = self.inner.set_resource_types(input);
        self
    }
    /// <p>A list of resource types used to filter resources in the organization. If this parameter is provided, the resources will be returned in the same order used in the request.</p>
    pub fn get_resource_types(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ResourceType>> {
        self.inner.get_resource_types()
    }
    ///
    /// Adds a key-value pair to `TelemetryConfigurationState`.
    ///
    /// To override the contents of this collection use [`set_telemetry_configuration_state`](Self::set_telemetry_configuration_state).
    ///
    /// <p>A key-value pair to filter resources in the organization based on the telemetry type and the state of the telemetry configuration. The key is the telemetry type and the value is the state.</p>
    pub fn telemetry_configuration_state(mut self, k: crate::types::TelemetryType, v: crate::types::TelemetryState) -> Self {
        self.inner = self.inner.telemetry_configuration_state(k, v);
        self
    }
    /// <p>A key-value pair to filter resources in the organization based on the telemetry type and the state of the telemetry configuration. The key is the telemetry type and the value is the state.</p>
    pub fn set_telemetry_configuration_state(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<crate::types::TelemetryType, crate::types::TelemetryState>>,
    ) -> Self {
        self.inner = self.inner.set_telemetry_configuration_state(input);
        self
    }
    /// <p>A key-value pair to filter resources in the organization based on the telemetry type and the state of the telemetry configuration. The key is the telemetry type and the value is the state.</p>
    pub fn get_telemetry_configuration_state(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<crate::types::TelemetryType, crate::types::TelemetryState>> {
        self.inner.get_telemetry_configuration_state()
    }
    ///
    /// Adds a key-value pair to `ResourceTags`.
    ///
    /// To override the contents of this collection use [`set_resource_tags`](Self::set_resource_tags).
    ///
    /// <p>A key-value pair to filter resources in the organization based on tags associated with the resource. Fore more information about tags, see <a href="https://docs.aws.amazon.com/whitepapers/latest/tagging-best-practices/what-are-tags.html">What are tags?</a></p>
    pub fn resource_tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.resource_tags(k.into(), v.into());
        self
    }
    /// <p>A key-value pair to filter resources in the organization based on tags associated with the resource. Fore more information about tags, see <a href="https://docs.aws.amazon.com/whitepapers/latest/tagging-best-practices/what-are-tags.html">What are tags?</a></p>
    pub fn set_resource_tags(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_resource_tags(input);
        self
    }
    /// <p>A key-value pair to filter resources in the organization based on tags associated with the resource. Fore more information about tags, see <a href="https://docs.aws.amazon.com/whitepapers/latest/tagging-best-practices/what-are-tags.html">What are tags?</a></p>
    pub fn get_resource_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.inner.get_resource_tags()
    }
    /// <p>A number field used to limit the number of results within the returned list.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>A number field used to limit the number of results within the returned list.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>A number field used to limit the number of results within the returned list.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        self.inner.get_max_results()
    }
    /// <p>The token for the next set of items to return. A previous call provides this token.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>The token for the next set of items to return. A previous call provides this token.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The token for the next set of items to return. A previous call provides this token.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_next_token()
    }
}
