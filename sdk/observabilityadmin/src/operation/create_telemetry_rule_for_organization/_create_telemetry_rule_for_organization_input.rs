// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateTelemetryRuleForOrganizationInput {
    /// <p>A unique name for the organization-wide telemetry rule being created.</p>
    pub rule_name: ::std::option::Option<::std::string::String>,
    /// <p>The configuration details for the organization-wide telemetry rule, including the resource type, telemetry type, destination configuration, and selection criteria for which resources the rule applies to across the organization.</p>
    pub rule: ::std::option::Option<crate::types::TelemetryRule>,
    /// <p>The key-value pairs to associate with the organization telemetry rule resource for categorization and management purposes.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateTelemetryRuleForOrganizationInput {
    /// <p>A unique name for the organization-wide telemetry rule being created.</p>
    pub fn rule_name(&self) -> ::std::option::Option<&str> {
        self.rule_name.as_deref()
    }
    /// <p>The configuration details for the organization-wide telemetry rule, including the resource type, telemetry type, destination configuration, and selection criteria for which resources the rule applies to across the organization.</p>
    pub fn rule(&self) -> ::std::option::Option<&crate::types::TelemetryRule> {
        self.rule.as_ref()
    }
    /// <p>The key-value pairs to associate with the organization telemetry rule resource for categorization and management purposes.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl CreateTelemetryRuleForOrganizationInput {
    /// Creates a new builder-style object to manufacture [`CreateTelemetryRuleForOrganizationInput`](crate::operation::create_telemetry_rule_for_organization::CreateTelemetryRuleForOrganizationInput).
    pub fn builder() -> crate::operation::create_telemetry_rule_for_organization::builders::CreateTelemetryRuleForOrganizationInputBuilder {
        crate::operation::create_telemetry_rule_for_organization::builders::CreateTelemetryRuleForOrganizationInputBuilder::default()
    }
}

/// A builder for [`CreateTelemetryRuleForOrganizationInput`](crate::operation::create_telemetry_rule_for_organization::CreateTelemetryRuleForOrganizationInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateTelemetryRuleForOrganizationInputBuilder {
    pub(crate) rule_name: ::std::option::Option<::std::string::String>,
    pub(crate) rule: ::std::option::Option<crate::types::TelemetryRule>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateTelemetryRuleForOrganizationInputBuilder {
    /// <p>A unique name for the organization-wide telemetry rule being created.</p>
    /// This field is required.
    pub fn rule_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.rule_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique name for the organization-wide telemetry rule being created.</p>
    pub fn set_rule_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.rule_name = input;
        self
    }
    /// <p>A unique name for the organization-wide telemetry rule being created.</p>
    pub fn get_rule_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.rule_name
    }
    /// <p>The configuration details for the organization-wide telemetry rule, including the resource type, telemetry type, destination configuration, and selection criteria for which resources the rule applies to across the organization.</p>
    /// This field is required.
    pub fn rule(mut self, input: crate::types::TelemetryRule) -> Self {
        self.rule = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration details for the organization-wide telemetry rule, including the resource type, telemetry type, destination configuration, and selection criteria for which resources the rule applies to across the organization.</p>
    pub fn set_rule(mut self, input: ::std::option::Option<crate::types::TelemetryRule>) -> Self {
        self.rule = input;
        self
    }
    /// <p>The configuration details for the organization-wide telemetry rule, including the resource type, telemetry type, destination configuration, and selection criteria for which resources the rule applies to across the organization.</p>
    pub fn get_rule(&self) -> &::std::option::Option<crate::types::TelemetryRule> {
        &self.rule
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The key-value pairs to associate with the organization telemetry rule resource for categorization and management purposes.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The key-value pairs to associate with the organization telemetry rule resource for categorization and management purposes.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The key-value pairs to associate with the organization telemetry rule resource for categorization and management purposes.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateTelemetryRuleForOrganizationInput`](crate::operation::create_telemetry_rule_for_organization::CreateTelemetryRuleForOrganizationInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_telemetry_rule_for_organization::CreateTelemetryRuleForOrganizationInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::create_telemetry_rule_for_organization::CreateTelemetryRuleForOrganizationInput {
                rule_name: self.rule_name,
                rule: self.rule,
                tags: self.tags,
            },
        )
    }
}
