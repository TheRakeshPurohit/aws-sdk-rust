// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeAdAssessmentOutput {
    /// <p>Detailed information about the self-managed instance settings (IDs and DNS IPs).</p>
    pub assessment: ::std::option::Option<crate::types::Assessment>,
    /// <p>A list of assessment reports containing validation results for each domain controller and test category. Each report includes specific validation details and outcomes.</p>
    pub assessment_reports: ::std::option::Option<::std::vec::Vec<crate::types::AssessmentReport>>,
    _request_id: Option<String>,
}
impl DescribeAdAssessmentOutput {
    /// <p>Detailed information about the self-managed instance settings (IDs and DNS IPs).</p>
    pub fn assessment(&self) -> ::std::option::Option<&crate::types::Assessment> {
        self.assessment.as_ref()
    }
    /// <p>A list of assessment reports containing validation results for each domain controller and test category. Each report includes specific validation details and outcomes.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.assessment_reports.is_none()`.
    pub fn assessment_reports(&self) -> &[crate::types::AssessmentReport] {
        self.assessment_reports.as_deref().unwrap_or_default()
    }
}
impl ::aws_types::request_id::RequestId for DescribeAdAssessmentOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeAdAssessmentOutput {
    /// Creates a new builder-style object to manufacture [`DescribeAdAssessmentOutput`](crate::operation::describe_ad_assessment::DescribeAdAssessmentOutput).
    pub fn builder() -> crate::operation::describe_ad_assessment::builders::DescribeAdAssessmentOutputBuilder {
        crate::operation::describe_ad_assessment::builders::DescribeAdAssessmentOutputBuilder::default()
    }
}

/// A builder for [`DescribeAdAssessmentOutput`](crate::operation::describe_ad_assessment::DescribeAdAssessmentOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DescribeAdAssessmentOutputBuilder {
    pub(crate) assessment: ::std::option::Option<crate::types::Assessment>,
    pub(crate) assessment_reports: ::std::option::Option<::std::vec::Vec<crate::types::AssessmentReport>>,
    _request_id: Option<String>,
}
impl DescribeAdAssessmentOutputBuilder {
    /// <p>Detailed information about the self-managed instance settings (IDs and DNS IPs).</p>
    pub fn assessment(mut self, input: crate::types::Assessment) -> Self {
        self.assessment = ::std::option::Option::Some(input);
        self
    }
    /// <p>Detailed information about the self-managed instance settings (IDs and DNS IPs).</p>
    pub fn set_assessment(mut self, input: ::std::option::Option<crate::types::Assessment>) -> Self {
        self.assessment = input;
        self
    }
    /// <p>Detailed information about the self-managed instance settings (IDs and DNS IPs).</p>
    pub fn get_assessment(&self) -> &::std::option::Option<crate::types::Assessment> {
        &self.assessment
    }
    /// Appends an item to `assessment_reports`.
    ///
    /// To override the contents of this collection use [`set_assessment_reports`](Self::set_assessment_reports).
    ///
    /// <p>A list of assessment reports containing validation results for each domain controller and test category. Each report includes specific validation details and outcomes.</p>
    pub fn assessment_reports(mut self, input: crate::types::AssessmentReport) -> Self {
        let mut v = self.assessment_reports.unwrap_or_default();
        v.push(input);
        self.assessment_reports = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of assessment reports containing validation results for each domain controller and test category. Each report includes specific validation details and outcomes.</p>
    pub fn set_assessment_reports(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AssessmentReport>>) -> Self {
        self.assessment_reports = input;
        self
    }
    /// <p>A list of assessment reports containing validation results for each domain controller and test category. Each report includes specific validation details and outcomes.</p>
    pub fn get_assessment_reports(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AssessmentReport>> {
        &self.assessment_reports
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeAdAssessmentOutput`](crate::operation::describe_ad_assessment::DescribeAdAssessmentOutput).
    pub fn build(self) -> crate::operation::describe_ad_assessment::DescribeAdAssessmentOutput {
        crate::operation::describe_ad_assessment::DescribeAdAssessmentOutput {
            assessment: self.assessment,
            assessment_reports: self.assessment_reports,
            _request_id: self._request_id,
        }
    }
}
