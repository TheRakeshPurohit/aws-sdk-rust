// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StartAdAssessmentInput {
    /// <p>Configuration parameters for the directory assessment, including DNS server information, domain name, Amazon VPC subnet, and Amazon Web Services System Manager managed node details.</p>
    pub assessment_configuration: ::std::option::Option<crate::types::AssessmentConfiguration>,
    /// <p>The identifier of the directory for which to perform the assessment. This should be an existing directory. If the assessment is not for an existing directory, this parameter should be omitted.</p>
    pub directory_id: ::std::option::Option<::std::string::String>,
}
impl StartAdAssessmentInput {
    /// <p>Configuration parameters for the directory assessment, including DNS server information, domain name, Amazon VPC subnet, and Amazon Web Services System Manager managed node details.</p>
    pub fn assessment_configuration(&self) -> ::std::option::Option<&crate::types::AssessmentConfiguration> {
        self.assessment_configuration.as_ref()
    }
    /// <p>The identifier of the directory for which to perform the assessment. This should be an existing directory. If the assessment is not for an existing directory, this parameter should be omitted.</p>
    pub fn directory_id(&self) -> ::std::option::Option<&str> {
        self.directory_id.as_deref()
    }
}
impl StartAdAssessmentInput {
    /// Creates a new builder-style object to manufacture [`StartAdAssessmentInput`](crate::operation::start_ad_assessment::StartAdAssessmentInput).
    pub fn builder() -> crate::operation::start_ad_assessment::builders::StartAdAssessmentInputBuilder {
        crate::operation::start_ad_assessment::builders::StartAdAssessmentInputBuilder::default()
    }
}

/// A builder for [`StartAdAssessmentInput`](crate::operation::start_ad_assessment::StartAdAssessmentInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct StartAdAssessmentInputBuilder {
    pub(crate) assessment_configuration: ::std::option::Option<crate::types::AssessmentConfiguration>,
    pub(crate) directory_id: ::std::option::Option<::std::string::String>,
}
impl StartAdAssessmentInputBuilder {
    /// <p>Configuration parameters for the directory assessment, including DNS server information, domain name, Amazon VPC subnet, and Amazon Web Services System Manager managed node details.</p>
    pub fn assessment_configuration(mut self, input: crate::types::AssessmentConfiguration) -> Self {
        self.assessment_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Configuration parameters for the directory assessment, including DNS server information, domain name, Amazon VPC subnet, and Amazon Web Services System Manager managed node details.</p>
    pub fn set_assessment_configuration(mut self, input: ::std::option::Option<crate::types::AssessmentConfiguration>) -> Self {
        self.assessment_configuration = input;
        self
    }
    /// <p>Configuration parameters for the directory assessment, including DNS server information, domain name, Amazon VPC subnet, and Amazon Web Services System Manager managed node details.</p>
    pub fn get_assessment_configuration(&self) -> &::std::option::Option<crate::types::AssessmentConfiguration> {
        &self.assessment_configuration
    }
    /// <p>The identifier of the directory for which to perform the assessment. This should be an existing directory. If the assessment is not for an existing directory, this parameter should be omitted.</p>
    pub fn directory_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.directory_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the directory for which to perform the assessment. This should be an existing directory. If the assessment is not for an existing directory, this parameter should be omitted.</p>
    pub fn set_directory_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.directory_id = input;
        self
    }
    /// <p>The identifier of the directory for which to perform the assessment. This should be an existing directory. If the assessment is not for an existing directory, this parameter should be omitted.</p>
    pub fn get_directory_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.directory_id
    }
    /// Consumes the builder and constructs a [`StartAdAssessmentInput`](crate::operation::start_ad_assessment::StartAdAssessmentInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::start_ad_assessment::StartAdAssessmentInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::start_ad_assessment::StartAdAssessmentInput {
            assessment_configuration: self.assessment_configuration,
            directory_id: self.directory_id,
        })
    }
}
