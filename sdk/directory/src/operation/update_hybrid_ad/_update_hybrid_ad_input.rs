// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateHybridAdInput {
    /// <p>The identifier of the hybrid directory to update.</p>
    pub directory_id: ::std::option::Option<::std::string::String>,
    /// <p>We create a hybrid directory administrator account when we create a hybrid directory. Use <code>HybridAdministratorAccountUpdate</code> to recover the hybrid directory administrator account if you have deleted it.</p>
    /// <p>To recover your hybrid directory administrator account, we need temporary access to a user in your self-managed AD with administrator permissions in the form of a secret from Amazon Web Services Secrets Manager. We use these credentials once during recovery and don't store them.</p>
    /// <p>If your hybrid directory administrator account exists, then you don’t need to use <code>HybridAdministratorAccountUpdate</code>, even if you have updated your self-managed AD administrator user.</p>
    pub hybrid_administrator_account_update: ::std::option::Option<crate::types::HybridAdministratorAccountUpdate>,
    /// <p>Updates to the self-managed AD configuration, including DNS server IP addresses and Amazon Web Services System Manager managed node identifiers.</p>
    pub self_managed_instances_settings: ::std::option::Option<crate::types::HybridCustomerInstancesSettings>,
}
impl UpdateHybridAdInput {
    /// <p>The identifier of the hybrid directory to update.</p>
    pub fn directory_id(&self) -> ::std::option::Option<&str> {
        self.directory_id.as_deref()
    }
    /// <p>We create a hybrid directory administrator account when we create a hybrid directory. Use <code>HybridAdministratorAccountUpdate</code> to recover the hybrid directory administrator account if you have deleted it.</p>
    /// <p>To recover your hybrid directory administrator account, we need temporary access to a user in your self-managed AD with administrator permissions in the form of a secret from Amazon Web Services Secrets Manager. We use these credentials once during recovery and don't store them.</p>
    /// <p>If your hybrid directory administrator account exists, then you don’t need to use <code>HybridAdministratorAccountUpdate</code>, even if you have updated your self-managed AD administrator user.</p>
    pub fn hybrid_administrator_account_update(&self) -> ::std::option::Option<&crate::types::HybridAdministratorAccountUpdate> {
        self.hybrid_administrator_account_update.as_ref()
    }
    /// <p>Updates to the self-managed AD configuration, including DNS server IP addresses and Amazon Web Services System Manager managed node identifiers.</p>
    pub fn self_managed_instances_settings(&self) -> ::std::option::Option<&crate::types::HybridCustomerInstancesSettings> {
        self.self_managed_instances_settings.as_ref()
    }
}
impl UpdateHybridAdInput {
    /// Creates a new builder-style object to manufacture [`UpdateHybridAdInput`](crate::operation::update_hybrid_ad::UpdateHybridAdInput).
    pub fn builder() -> crate::operation::update_hybrid_ad::builders::UpdateHybridAdInputBuilder {
        crate::operation::update_hybrid_ad::builders::UpdateHybridAdInputBuilder::default()
    }
}

/// A builder for [`UpdateHybridAdInput`](crate::operation::update_hybrid_ad::UpdateHybridAdInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateHybridAdInputBuilder {
    pub(crate) directory_id: ::std::option::Option<::std::string::String>,
    pub(crate) hybrid_administrator_account_update: ::std::option::Option<crate::types::HybridAdministratorAccountUpdate>,
    pub(crate) self_managed_instances_settings: ::std::option::Option<crate::types::HybridCustomerInstancesSettings>,
}
impl UpdateHybridAdInputBuilder {
    /// <p>The identifier of the hybrid directory to update.</p>
    /// This field is required.
    pub fn directory_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.directory_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the hybrid directory to update.</p>
    pub fn set_directory_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.directory_id = input;
        self
    }
    /// <p>The identifier of the hybrid directory to update.</p>
    pub fn get_directory_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.directory_id
    }
    /// <p>We create a hybrid directory administrator account when we create a hybrid directory. Use <code>HybridAdministratorAccountUpdate</code> to recover the hybrid directory administrator account if you have deleted it.</p>
    /// <p>To recover your hybrid directory administrator account, we need temporary access to a user in your self-managed AD with administrator permissions in the form of a secret from Amazon Web Services Secrets Manager. We use these credentials once during recovery and don't store them.</p>
    /// <p>If your hybrid directory administrator account exists, then you don’t need to use <code>HybridAdministratorAccountUpdate</code>, even if you have updated your self-managed AD administrator user.</p>
    pub fn hybrid_administrator_account_update(mut self, input: crate::types::HybridAdministratorAccountUpdate) -> Self {
        self.hybrid_administrator_account_update = ::std::option::Option::Some(input);
        self
    }
    /// <p>We create a hybrid directory administrator account when we create a hybrid directory. Use <code>HybridAdministratorAccountUpdate</code> to recover the hybrid directory administrator account if you have deleted it.</p>
    /// <p>To recover your hybrid directory administrator account, we need temporary access to a user in your self-managed AD with administrator permissions in the form of a secret from Amazon Web Services Secrets Manager. We use these credentials once during recovery and don't store them.</p>
    /// <p>If your hybrid directory administrator account exists, then you don’t need to use <code>HybridAdministratorAccountUpdate</code>, even if you have updated your self-managed AD administrator user.</p>
    pub fn set_hybrid_administrator_account_update(mut self, input: ::std::option::Option<crate::types::HybridAdministratorAccountUpdate>) -> Self {
        self.hybrid_administrator_account_update = input;
        self
    }
    /// <p>We create a hybrid directory administrator account when we create a hybrid directory. Use <code>HybridAdministratorAccountUpdate</code> to recover the hybrid directory administrator account if you have deleted it.</p>
    /// <p>To recover your hybrid directory administrator account, we need temporary access to a user in your self-managed AD with administrator permissions in the form of a secret from Amazon Web Services Secrets Manager. We use these credentials once during recovery and don't store them.</p>
    /// <p>If your hybrid directory administrator account exists, then you don’t need to use <code>HybridAdministratorAccountUpdate</code>, even if you have updated your self-managed AD administrator user.</p>
    pub fn get_hybrid_administrator_account_update(&self) -> &::std::option::Option<crate::types::HybridAdministratorAccountUpdate> {
        &self.hybrid_administrator_account_update
    }
    /// <p>Updates to the self-managed AD configuration, including DNS server IP addresses and Amazon Web Services System Manager managed node identifiers.</p>
    pub fn self_managed_instances_settings(mut self, input: crate::types::HybridCustomerInstancesSettings) -> Self {
        self.self_managed_instances_settings = ::std::option::Option::Some(input);
        self
    }
    /// <p>Updates to the self-managed AD configuration, including DNS server IP addresses and Amazon Web Services System Manager managed node identifiers.</p>
    pub fn set_self_managed_instances_settings(mut self, input: ::std::option::Option<crate::types::HybridCustomerInstancesSettings>) -> Self {
        self.self_managed_instances_settings = input;
        self
    }
    /// <p>Updates to the self-managed AD configuration, including DNS server IP addresses and Amazon Web Services System Manager managed node identifiers.</p>
    pub fn get_self_managed_instances_settings(&self) -> &::std::option::Option<crate::types::HybridCustomerInstancesSettings> {
        &self.self_managed_instances_settings
    }
    /// Consumes the builder and constructs a [`UpdateHybridAdInput`](crate::operation::update_hybrid_ad::UpdateHybridAdInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_hybrid_ad::UpdateHybridAdInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_hybrid_ad::UpdateHybridAdInput {
            directory_id: self.directory_id,
            hybrid_administrator_account_update: self.hybrid_administrator_account_update,
            self_managed_instances_settings: self.self_managed_instances_settings,
        })
    }
}
