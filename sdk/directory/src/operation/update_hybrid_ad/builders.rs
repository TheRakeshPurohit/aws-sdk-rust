// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_hybrid_ad::_update_hybrid_ad_output::UpdateHybridAdOutputBuilder;

pub use crate::operation::update_hybrid_ad::_update_hybrid_ad_input::UpdateHybridAdInputBuilder;

impl crate::operation::update_hybrid_ad::builders::UpdateHybridAdInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::update_hybrid_ad::UpdateHybridAdOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_hybrid_ad::UpdateHybridADError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.update_hybrid_ad();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `UpdateHybridAD`.
///
/// <p>Updates the configuration of an existing hybrid directory. You can recover hybrid directory administrator account or modify self-managed instance settings.</p>
/// <p>Updates are applied asynchronously. Use <code>DescribeHybridADUpdate</code> to monitor the progress of configuration changes.</p>
/// <p>The InstanceIds must have a one-to-one correspondence with CustomerDnsIps, meaning that if the IP address for instance i-10243410 is 10.24.34.100 and the IP address for instance i-10243420 is 10.24.34.200, then the input arrays must maintain the same order relationship, either \[10.24.34.100, 10.24.34.200\] paired with \[i-10243410, i-10243420\] or \[10.24.34.200, 10.24.34.100\] paired with \[i-10243420, i-10243410\].</p><note>
/// <p>You must provide at least one update to <code>UpdateHybridADRequest$HybridAdministratorAccountUpdate</code> or <code>UpdateHybridADRequest$SelfManagedInstancesSettings</code>.</p>
/// </note>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct UpdateHybridADFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_hybrid_ad::builders::UpdateHybridAdInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::update_hybrid_ad::UpdateHybridAdOutput,
        crate::operation::update_hybrid_ad::UpdateHybridADError,
    > for UpdateHybridADFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::update_hybrid_ad::UpdateHybridAdOutput,
            crate::operation::update_hybrid_ad::UpdateHybridADError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl UpdateHybridADFluentBuilder {
    /// Creates a new `UpdateHybridADFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the UpdateHybridAD as a reference.
    pub fn as_input(&self) -> &crate::operation::update_hybrid_ad::builders::UpdateHybridAdInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_hybrid_ad::UpdateHybridAdOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_hybrid_ad::UpdateHybridADError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::update_hybrid_ad::UpdateHybridAD::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::update_hybrid_ad::UpdateHybridAD::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::update_hybrid_ad::UpdateHybridAdOutput,
        crate::operation::update_hybrid_ad::UpdateHybridADError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The identifier of the hybrid directory to update.</p>
    pub fn directory_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.directory_id(input.into());
        self
    }
    /// <p>The identifier of the hybrid directory to update.</p>
    pub fn set_directory_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_directory_id(input);
        self
    }
    /// <p>The identifier of the hybrid directory to update.</p>
    pub fn get_directory_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_directory_id()
    }
    /// <p>We create a hybrid directory administrator account when we create a hybrid directory. Use <code>HybridAdministratorAccountUpdate</code> to recover the hybrid directory administrator account if you have deleted it.</p>
    /// <p>To recover your hybrid directory administrator account, we need temporary access to a user in your self-managed AD with administrator permissions in the form of a secret from Amazon Web Services Secrets Manager. We use these credentials once during recovery and don't store them.</p>
    /// <p>If your hybrid directory administrator account exists, then you don’t need to use <code>HybridAdministratorAccountUpdate</code>, even if you have updated your self-managed AD administrator user.</p>
    pub fn hybrid_administrator_account_update(mut self, input: crate::types::HybridAdministratorAccountUpdate) -> Self {
        self.inner = self.inner.hybrid_administrator_account_update(input);
        self
    }
    /// <p>We create a hybrid directory administrator account when we create a hybrid directory. Use <code>HybridAdministratorAccountUpdate</code> to recover the hybrid directory administrator account if you have deleted it.</p>
    /// <p>To recover your hybrid directory administrator account, we need temporary access to a user in your self-managed AD with administrator permissions in the form of a secret from Amazon Web Services Secrets Manager. We use these credentials once during recovery and don't store them.</p>
    /// <p>If your hybrid directory administrator account exists, then you don’t need to use <code>HybridAdministratorAccountUpdate</code>, even if you have updated your self-managed AD administrator user.</p>
    pub fn set_hybrid_administrator_account_update(mut self, input: ::std::option::Option<crate::types::HybridAdministratorAccountUpdate>) -> Self {
        self.inner = self.inner.set_hybrid_administrator_account_update(input);
        self
    }
    /// <p>We create a hybrid directory administrator account when we create a hybrid directory. Use <code>HybridAdministratorAccountUpdate</code> to recover the hybrid directory administrator account if you have deleted it.</p>
    /// <p>To recover your hybrid directory administrator account, we need temporary access to a user in your self-managed AD with administrator permissions in the form of a secret from Amazon Web Services Secrets Manager. We use these credentials once during recovery and don't store them.</p>
    /// <p>If your hybrid directory administrator account exists, then you don’t need to use <code>HybridAdministratorAccountUpdate</code>, even if you have updated your self-managed AD administrator user.</p>
    pub fn get_hybrid_administrator_account_update(&self) -> &::std::option::Option<crate::types::HybridAdministratorAccountUpdate> {
        self.inner.get_hybrid_administrator_account_update()
    }
    /// <p>Updates to the self-managed AD configuration, including DNS server IP addresses and Amazon Web Services System Manager managed node identifiers.</p>
    pub fn self_managed_instances_settings(mut self, input: crate::types::HybridCustomerInstancesSettings) -> Self {
        self.inner = self.inner.self_managed_instances_settings(input);
        self
    }
    /// <p>Updates to the self-managed AD configuration, including DNS server IP addresses and Amazon Web Services System Manager managed node identifiers.</p>
    pub fn set_self_managed_instances_settings(mut self, input: ::std::option::Option<crate::types::HybridCustomerInstancesSettings>) -> Self {
        self.inner = self.inner.set_self_managed_instances_settings(input);
        self
    }
    /// <p>Updates to the self-managed AD configuration, including DNS server IP addresses and Amazon Web Services System Manager managed node identifiers.</p>
    pub fn get_self_managed_instances_settings(&self) -> &::std::option::Option<crate::types::HybridCustomerInstancesSettings> {
        self.inner.get_self_managed_instances_settings()
    }
}
