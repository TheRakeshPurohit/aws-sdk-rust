// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the results of the <code>DescribeCAEnrollmentPolicy</code> operation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeCaEnrollmentPolicyOutput {
    /// <p>The identifier of the directory associated with this CA enrollment policy.</p>
    pub directory_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the Amazon Web Services Private Certificate Authority (PCA) connector that is configured for automatic certificate enrollment in this directory.</p>
    pub pca_connector_arn: ::std::option::Option<::std::string::String>,
    /// <p>The current status of the CA enrollment policy. This indicates if automatic certificate enrollment is currently active, inactive, or in a transitional state.</p>
    /// <p>Valid values:</p>
    /// <ul>
    /// <li>
    /// <p><code>IN_PROGRESS</code> - The policy is being activated T</p></li>
    /// <li>
    /// <p><code>SUCCESS</code> - The policy is active and automatic certificate enrollment is operational</p></li>
    /// <li>
    /// <p><code>FAILED</code> - The policy activation or deactivation failed</p></li>
    /// <li>
    /// <p><code>DISABLING</code> - The policy is being deactivated</p></li>
    /// <li>
    /// <p><code>DISABLED</code> - The policy is inactive and automatic certificate enrollment is not available</p></li>
    /// <li>
    /// <p><code>IMPAIRED</code> - Network connectivity is impaired.</p></li>
    /// </ul>
    pub ca_enrollment_policy_status: ::std::option::Option<crate::types::CaEnrollmentPolicyStatus>,
    /// <p>The date and time when the CA enrollment policy was last modified or updated.</p>
    pub last_updated_date_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Additional information explaining the current status of the CA enrollment policy, particularly useful when the policy is in an error or transitional state.</p>
    pub ca_enrollment_policy_status_reason: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl DescribeCaEnrollmentPolicyOutput {
    /// <p>The identifier of the directory associated with this CA enrollment policy.</p>
    pub fn directory_id(&self) -> ::std::option::Option<&str> {
        self.directory_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon Web Services Private Certificate Authority (PCA) connector that is configured for automatic certificate enrollment in this directory.</p>
    pub fn pca_connector_arn(&self) -> ::std::option::Option<&str> {
        self.pca_connector_arn.as_deref()
    }
    /// <p>The current status of the CA enrollment policy. This indicates if automatic certificate enrollment is currently active, inactive, or in a transitional state.</p>
    /// <p>Valid values:</p>
    /// <ul>
    /// <li>
    /// <p><code>IN_PROGRESS</code> - The policy is being activated T</p></li>
    /// <li>
    /// <p><code>SUCCESS</code> - The policy is active and automatic certificate enrollment is operational</p></li>
    /// <li>
    /// <p><code>FAILED</code> - The policy activation or deactivation failed</p></li>
    /// <li>
    /// <p><code>DISABLING</code> - The policy is being deactivated</p></li>
    /// <li>
    /// <p><code>DISABLED</code> - The policy is inactive and automatic certificate enrollment is not available</p></li>
    /// <li>
    /// <p><code>IMPAIRED</code> - Network connectivity is impaired.</p></li>
    /// </ul>
    pub fn ca_enrollment_policy_status(&self) -> ::std::option::Option<&crate::types::CaEnrollmentPolicyStatus> {
        self.ca_enrollment_policy_status.as_ref()
    }
    /// <p>The date and time when the CA enrollment policy was last modified or updated.</p>
    pub fn last_updated_date_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_updated_date_time.as_ref()
    }
    /// <p>Additional information explaining the current status of the CA enrollment policy, particularly useful when the policy is in an error or transitional state.</p>
    pub fn ca_enrollment_policy_status_reason(&self) -> ::std::option::Option<&str> {
        self.ca_enrollment_policy_status_reason.as_deref()
    }
}
impl ::aws_types::request_id::RequestId for DescribeCaEnrollmentPolicyOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeCaEnrollmentPolicyOutput {
    /// Creates a new builder-style object to manufacture [`DescribeCaEnrollmentPolicyOutput`](crate::operation::describe_ca_enrollment_policy::DescribeCaEnrollmentPolicyOutput).
    pub fn builder() -> crate::operation::describe_ca_enrollment_policy::builders::DescribeCaEnrollmentPolicyOutputBuilder {
        crate::operation::describe_ca_enrollment_policy::builders::DescribeCaEnrollmentPolicyOutputBuilder::default()
    }
}

/// A builder for [`DescribeCaEnrollmentPolicyOutput`](crate::operation::describe_ca_enrollment_policy::DescribeCaEnrollmentPolicyOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DescribeCaEnrollmentPolicyOutputBuilder {
    pub(crate) directory_id: ::std::option::Option<::std::string::String>,
    pub(crate) pca_connector_arn: ::std::option::Option<::std::string::String>,
    pub(crate) ca_enrollment_policy_status: ::std::option::Option<crate::types::CaEnrollmentPolicyStatus>,
    pub(crate) last_updated_date_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) ca_enrollment_policy_status_reason: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl DescribeCaEnrollmentPolicyOutputBuilder {
    /// <p>The identifier of the directory associated with this CA enrollment policy.</p>
    pub fn directory_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.directory_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the directory associated with this CA enrollment policy.</p>
    pub fn set_directory_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.directory_id = input;
        self
    }
    /// <p>The identifier of the directory associated with this CA enrollment policy.</p>
    pub fn get_directory_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.directory_id
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon Web Services Private Certificate Authority (PCA) connector that is configured for automatic certificate enrollment in this directory.</p>
    pub fn pca_connector_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.pca_connector_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon Web Services Private Certificate Authority (PCA) connector that is configured for automatic certificate enrollment in this directory.</p>
    pub fn set_pca_connector_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.pca_connector_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon Web Services Private Certificate Authority (PCA) connector that is configured for automatic certificate enrollment in this directory.</p>
    pub fn get_pca_connector_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.pca_connector_arn
    }
    /// <p>The current status of the CA enrollment policy. This indicates if automatic certificate enrollment is currently active, inactive, or in a transitional state.</p>
    /// <p>Valid values:</p>
    /// <ul>
    /// <li>
    /// <p><code>IN_PROGRESS</code> - The policy is being activated T</p></li>
    /// <li>
    /// <p><code>SUCCESS</code> - The policy is active and automatic certificate enrollment is operational</p></li>
    /// <li>
    /// <p><code>FAILED</code> - The policy activation or deactivation failed</p></li>
    /// <li>
    /// <p><code>DISABLING</code> - The policy is being deactivated</p></li>
    /// <li>
    /// <p><code>DISABLED</code> - The policy is inactive and automatic certificate enrollment is not available</p></li>
    /// <li>
    /// <p><code>IMPAIRED</code> - Network connectivity is impaired.</p></li>
    /// </ul>
    pub fn ca_enrollment_policy_status(mut self, input: crate::types::CaEnrollmentPolicyStatus) -> Self {
        self.ca_enrollment_policy_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the CA enrollment policy. This indicates if automatic certificate enrollment is currently active, inactive, or in a transitional state.</p>
    /// <p>Valid values:</p>
    /// <ul>
    /// <li>
    /// <p><code>IN_PROGRESS</code> - The policy is being activated T</p></li>
    /// <li>
    /// <p><code>SUCCESS</code> - The policy is active and automatic certificate enrollment is operational</p></li>
    /// <li>
    /// <p><code>FAILED</code> - The policy activation or deactivation failed</p></li>
    /// <li>
    /// <p><code>DISABLING</code> - The policy is being deactivated</p></li>
    /// <li>
    /// <p><code>DISABLED</code> - The policy is inactive and automatic certificate enrollment is not available</p></li>
    /// <li>
    /// <p><code>IMPAIRED</code> - Network connectivity is impaired.</p></li>
    /// </ul>
    pub fn set_ca_enrollment_policy_status(mut self, input: ::std::option::Option<crate::types::CaEnrollmentPolicyStatus>) -> Self {
        self.ca_enrollment_policy_status = input;
        self
    }
    /// <p>The current status of the CA enrollment policy. This indicates if automatic certificate enrollment is currently active, inactive, or in a transitional state.</p>
    /// <p>Valid values:</p>
    /// <ul>
    /// <li>
    /// <p><code>IN_PROGRESS</code> - The policy is being activated T</p></li>
    /// <li>
    /// <p><code>SUCCESS</code> - The policy is active and automatic certificate enrollment is operational</p></li>
    /// <li>
    /// <p><code>FAILED</code> - The policy activation or deactivation failed</p></li>
    /// <li>
    /// <p><code>DISABLING</code> - The policy is being deactivated</p></li>
    /// <li>
    /// <p><code>DISABLED</code> - The policy is inactive and automatic certificate enrollment is not available</p></li>
    /// <li>
    /// <p><code>IMPAIRED</code> - Network connectivity is impaired.</p></li>
    /// </ul>
    pub fn get_ca_enrollment_policy_status(&self) -> &::std::option::Option<crate::types::CaEnrollmentPolicyStatus> {
        &self.ca_enrollment_policy_status
    }
    /// <p>The date and time when the CA enrollment policy was last modified or updated.</p>
    pub fn last_updated_date_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated_date_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time when the CA enrollment policy was last modified or updated.</p>
    pub fn set_last_updated_date_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated_date_time = input;
        self
    }
    /// <p>The date and time when the CA enrollment policy was last modified or updated.</p>
    pub fn get_last_updated_date_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated_date_time
    }
    /// <p>Additional information explaining the current status of the CA enrollment policy, particularly useful when the policy is in an error or transitional state.</p>
    pub fn ca_enrollment_policy_status_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ca_enrollment_policy_status_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Additional information explaining the current status of the CA enrollment policy, particularly useful when the policy is in an error or transitional state.</p>
    pub fn set_ca_enrollment_policy_status_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ca_enrollment_policy_status_reason = input;
        self
    }
    /// <p>Additional information explaining the current status of the CA enrollment policy, particularly useful when the policy is in an error or transitional state.</p>
    pub fn get_ca_enrollment_policy_status_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.ca_enrollment_policy_status_reason
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeCaEnrollmentPolicyOutput`](crate::operation::describe_ca_enrollment_policy::DescribeCaEnrollmentPolicyOutput).
    pub fn build(self) -> crate::operation::describe_ca_enrollment_policy::DescribeCaEnrollmentPolicyOutput {
        crate::operation::describe_ca_enrollment_policy::DescribeCaEnrollmentPolicyOutput {
            directory_id: self.directory_id,
            pca_connector_arn: self.pca_connector_arn,
            ca_enrollment_policy_status: self.ca_enrollment_policy_status,
            last_updated_date_time: self.last_updated_date_time,
            ca_enrollment_policy_status_reason: self.ca_enrollment_policy_status_reason,
            _request_id: self._request_id,
        }
    }
}
