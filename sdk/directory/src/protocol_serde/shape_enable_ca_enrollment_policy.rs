// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn de_enable_ca_enrollment_policy_http_error(
    _response_status: u16,
    _response_headers: &::aws_smithy_runtime_api::http::Headers,
    _response_body: &[u8],
) -> std::result::Result<
    crate::operation::enable_ca_enrollment_policy::EnableCaEnrollmentPolicyOutput,
    crate::operation::enable_ca_enrollment_policy::EnableCAEnrollmentPolicyError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(_response_status, _response_headers, _response_body)
        .map_err(crate::operation::enable_ca_enrollment_policy::EnableCAEnrollmentPolicyError::unhandled)?;
    generic_builder = ::aws_types::request_id::apply_request_id(generic_builder, _response_headers);
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::operation::enable_ca_enrollment_policy::EnableCAEnrollmentPolicyError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "AccessDeniedException" => crate::operation::enable_ca_enrollment_policy::EnableCAEnrollmentPolicyError::AccessDeniedException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::AccessDeniedExceptionBuilder::default();
                output = crate::protocol_serde::shape_access_denied_exception::de_access_denied_exception_json_err(_response_body, output)
                    .map_err(crate::operation::enable_ca_enrollment_policy::EnableCAEnrollmentPolicyError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "ClientException" => crate::operation::enable_ca_enrollment_policy::EnableCAEnrollmentPolicyError::ClientException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::ClientExceptionBuilder::default();
                output = crate::protocol_serde::shape_client_exception::de_client_exception_json_err(_response_body, output)
                    .map_err(crate::operation::enable_ca_enrollment_policy::EnableCAEnrollmentPolicyError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "DirectoryDoesNotExistException" => {
            crate::operation::enable_ca_enrollment_policy::EnableCAEnrollmentPolicyError::DirectoryDoesNotExistException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::DirectoryDoesNotExistExceptionBuilder::default();
                    output = crate::protocol_serde::shape_directory_does_not_exist_exception::de_directory_does_not_exist_exception_json_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::enable_ca_enrollment_policy::EnableCAEnrollmentPolicyError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "DirectoryUnavailableException" => {
            crate::operation::enable_ca_enrollment_policy::EnableCAEnrollmentPolicyError::DirectoryUnavailableException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::DirectoryUnavailableExceptionBuilder::default();
                    output = crate::protocol_serde::shape_directory_unavailable_exception::de_directory_unavailable_exception_json_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::enable_ca_enrollment_policy::EnableCAEnrollmentPolicyError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "EnableAlreadyInProgressException" => {
            crate::operation::enable_ca_enrollment_policy::EnableCAEnrollmentPolicyError::EnableAlreadyInProgressException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::EnableAlreadyInProgressExceptionBuilder::default();
                    output = crate::protocol_serde::shape_enable_already_in_progress_exception::de_enable_already_in_progress_exception_json_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::enable_ca_enrollment_policy::EnableCAEnrollmentPolicyError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "EntityAlreadyExistsException" => {
            crate::operation::enable_ca_enrollment_policy::EnableCAEnrollmentPolicyError::EntityAlreadyExistsException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::EntityAlreadyExistsExceptionBuilder::default();
                    output = crate::protocol_serde::shape_entity_already_exists_exception::de_entity_already_exists_exception_json_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::enable_ca_enrollment_policy::EnableCAEnrollmentPolicyError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "EntityDoesNotExistException" => crate::operation::enable_ca_enrollment_policy::EnableCAEnrollmentPolicyError::EntityDoesNotExistException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::EntityDoesNotExistExceptionBuilder::default();
                output =
                    crate::protocol_serde::shape_entity_does_not_exist_exception::de_entity_does_not_exist_exception_json_err(_response_body, output)
                        .map_err(crate::operation::enable_ca_enrollment_policy::EnableCAEnrollmentPolicyError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InvalidParameterException" => crate::operation::enable_ca_enrollment_policy::EnableCAEnrollmentPolicyError::InvalidParameterException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InvalidParameterExceptionBuilder::default();
                output = crate::protocol_serde::shape_invalid_parameter_exception::de_invalid_parameter_exception_json_err(_response_body, output)
                    .map_err(crate::operation::enable_ca_enrollment_policy::EnableCAEnrollmentPolicyError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "ServiceException" => crate::operation::enable_ca_enrollment_policy::EnableCAEnrollmentPolicyError::ServiceException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::ServiceExceptionBuilder::default();
                output = crate::protocol_serde::shape_service_exception::de_service_exception_json_err(_response_body, output)
                    .map_err(crate::operation::enable_ca_enrollment_policy::EnableCAEnrollmentPolicyError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::operation::enable_ca_enrollment_policy::EnableCAEnrollmentPolicyError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_enable_ca_enrollment_policy_http_response(
    _response_status: u16,
    _response_headers: &::aws_smithy_runtime_api::http::Headers,
    _response_body: &[u8],
) -> std::result::Result<
    crate::operation::enable_ca_enrollment_policy::EnableCaEnrollmentPolicyOutput,
    crate::operation::enable_ca_enrollment_policy::EnableCAEnrollmentPolicyError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::operation::enable_ca_enrollment_policy::builders::EnableCaEnrollmentPolicyOutputBuilder::default();
        output._set_request_id(::aws_types::request_id::RequestId::request_id(_response_headers).map(str::to_string));
        output.build()
    })
}

pub fn ser_enable_ca_enrollment_policy_input(
    input: &crate::operation::enable_ca_enrollment_policy::EnableCaEnrollmentPolicyInput,
) -> ::std::result::Result<::aws_smithy_types::body::SdkBody, ::aws_smithy_types::error::operation::SerializationError> {
    let mut out = String::new();
    let mut object = ::aws_smithy_json::serialize::JsonObjectWriter::new(&mut out);
    crate::protocol_serde::shape_enable_ca_enrollment_policy_input::ser_enable_ca_enrollment_policy_input_input(&mut object, input)?;
    object.finish();
    Ok(::aws_smithy_types::body::SdkBody::from(out))
}
