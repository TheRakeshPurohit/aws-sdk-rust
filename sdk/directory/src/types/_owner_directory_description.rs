// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the directory owner account details shared with the directory consumer account.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct OwnerDirectoryDescription {
    /// <p>Identifier of the Managed Microsoft AD directory in the directory owner account.</p>
    pub directory_id: ::std::option::Option<::std::string::String>,
    /// <p>Identifier of the directory owner account.</p>
    pub account_id: ::std::option::Option<::std::string::String>,
    /// <p>IP address of the directory’s domain controllers.</p>
    pub dns_ip_addrs: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>IPv6 addresses of the directory’s domain controllers.</p>
    pub dns_ipv6_addrs: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Information about the VPC settings for the directory.</p>
    pub vpc_settings: ::std::option::Option<crate::types::DirectoryVpcSettingsDescription>,
    /// <p>Information about the <code>RadiusSettings</code> object server configuration.</p>
    pub radius_settings: ::std::option::Option<crate::types::RadiusSettings>,
    /// <p>The status of the RADIUS server.</p>
    pub radius_status: ::std::option::Option<crate::types::RadiusStatus>,
    /// <p>Network type of the directory in the directory owner account.</p>
    pub network_type: ::std::option::Option<crate::types::NetworkType>,
}
impl OwnerDirectoryDescription {
    /// <p>Identifier of the Managed Microsoft AD directory in the directory owner account.</p>
    pub fn directory_id(&self) -> ::std::option::Option<&str> {
        self.directory_id.as_deref()
    }
    /// <p>Identifier of the directory owner account.</p>
    pub fn account_id(&self) -> ::std::option::Option<&str> {
        self.account_id.as_deref()
    }
    /// <p>IP address of the directory’s domain controllers.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.dns_ip_addrs.is_none()`.
    pub fn dns_ip_addrs(&self) -> &[::std::string::String] {
        self.dns_ip_addrs.as_deref().unwrap_or_default()
    }
    /// <p>IPv6 addresses of the directory’s domain controllers.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.dns_ipv6_addrs.is_none()`.
    pub fn dns_ipv6_addrs(&self) -> &[::std::string::String] {
        self.dns_ipv6_addrs.as_deref().unwrap_or_default()
    }
    /// <p>Information about the VPC settings for the directory.</p>
    pub fn vpc_settings(&self) -> ::std::option::Option<&crate::types::DirectoryVpcSettingsDescription> {
        self.vpc_settings.as_ref()
    }
    /// <p>Information about the <code>RadiusSettings</code> object server configuration.</p>
    pub fn radius_settings(&self) -> ::std::option::Option<&crate::types::RadiusSettings> {
        self.radius_settings.as_ref()
    }
    /// <p>The status of the RADIUS server.</p>
    pub fn radius_status(&self) -> ::std::option::Option<&crate::types::RadiusStatus> {
        self.radius_status.as_ref()
    }
    /// <p>Network type of the directory in the directory owner account.</p>
    pub fn network_type(&self) -> ::std::option::Option<&crate::types::NetworkType> {
        self.network_type.as_ref()
    }
}
impl OwnerDirectoryDescription {
    /// Creates a new builder-style object to manufacture [`OwnerDirectoryDescription`](crate::types::OwnerDirectoryDescription).
    pub fn builder() -> crate::types::builders::OwnerDirectoryDescriptionBuilder {
        crate::types::builders::OwnerDirectoryDescriptionBuilder::default()
    }
}

/// A builder for [`OwnerDirectoryDescription`](crate::types::OwnerDirectoryDescription).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct OwnerDirectoryDescriptionBuilder {
    pub(crate) directory_id: ::std::option::Option<::std::string::String>,
    pub(crate) account_id: ::std::option::Option<::std::string::String>,
    pub(crate) dns_ip_addrs: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) dns_ipv6_addrs: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) vpc_settings: ::std::option::Option<crate::types::DirectoryVpcSettingsDescription>,
    pub(crate) radius_settings: ::std::option::Option<crate::types::RadiusSettings>,
    pub(crate) radius_status: ::std::option::Option<crate::types::RadiusStatus>,
    pub(crate) network_type: ::std::option::Option<crate::types::NetworkType>,
}
impl OwnerDirectoryDescriptionBuilder {
    /// <p>Identifier of the Managed Microsoft AD directory in the directory owner account.</p>
    pub fn directory_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.directory_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Identifier of the Managed Microsoft AD directory in the directory owner account.</p>
    pub fn set_directory_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.directory_id = input;
        self
    }
    /// <p>Identifier of the Managed Microsoft AD directory in the directory owner account.</p>
    pub fn get_directory_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.directory_id
    }
    /// <p>Identifier of the directory owner account.</p>
    pub fn account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Identifier of the directory owner account.</p>
    pub fn set_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// <p>Identifier of the directory owner account.</p>
    pub fn get_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.account_id
    }
    /// Appends an item to `dns_ip_addrs`.
    ///
    /// To override the contents of this collection use [`set_dns_ip_addrs`](Self::set_dns_ip_addrs).
    ///
    /// <p>IP address of the directory’s domain controllers.</p>
    pub fn dns_ip_addrs(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.dns_ip_addrs.unwrap_or_default();
        v.push(input.into());
        self.dns_ip_addrs = ::std::option::Option::Some(v);
        self
    }
    /// <p>IP address of the directory’s domain controllers.</p>
    pub fn set_dns_ip_addrs(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.dns_ip_addrs = input;
        self
    }
    /// <p>IP address of the directory’s domain controllers.</p>
    pub fn get_dns_ip_addrs(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.dns_ip_addrs
    }
    /// Appends an item to `dns_ipv6_addrs`.
    ///
    /// To override the contents of this collection use [`set_dns_ipv6_addrs`](Self::set_dns_ipv6_addrs).
    ///
    /// <p>IPv6 addresses of the directory’s domain controllers.</p>
    pub fn dns_ipv6_addrs(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.dns_ipv6_addrs.unwrap_or_default();
        v.push(input.into());
        self.dns_ipv6_addrs = ::std::option::Option::Some(v);
        self
    }
    /// <p>IPv6 addresses of the directory’s domain controllers.</p>
    pub fn set_dns_ipv6_addrs(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.dns_ipv6_addrs = input;
        self
    }
    /// <p>IPv6 addresses of the directory’s domain controllers.</p>
    pub fn get_dns_ipv6_addrs(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.dns_ipv6_addrs
    }
    /// <p>Information about the VPC settings for the directory.</p>
    pub fn vpc_settings(mut self, input: crate::types::DirectoryVpcSettingsDescription) -> Self {
        self.vpc_settings = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about the VPC settings for the directory.</p>
    pub fn set_vpc_settings(mut self, input: ::std::option::Option<crate::types::DirectoryVpcSettingsDescription>) -> Self {
        self.vpc_settings = input;
        self
    }
    /// <p>Information about the VPC settings for the directory.</p>
    pub fn get_vpc_settings(&self) -> &::std::option::Option<crate::types::DirectoryVpcSettingsDescription> {
        &self.vpc_settings
    }
    /// <p>Information about the <code>RadiusSettings</code> object server configuration.</p>
    pub fn radius_settings(mut self, input: crate::types::RadiusSettings) -> Self {
        self.radius_settings = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about the <code>RadiusSettings</code> object server configuration.</p>
    pub fn set_radius_settings(mut self, input: ::std::option::Option<crate::types::RadiusSettings>) -> Self {
        self.radius_settings = input;
        self
    }
    /// <p>Information about the <code>RadiusSettings</code> object server configuration.</p>
    pub fn get_radius_settings(&self) -> &::std::option::Option<crate::types::RadiusSettings> {
        &self.radius_settings
    }
    /// <p>The status of the RADIUS server.</p>
    pub fn radius_status(mut self, input: crate::types::RadiusStatus) -> Self {
        self.radius_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the RADIUS server.</p>
    pub fn set_radius_status(mut self, input: ::std::option::Option<crate::types::RadiusStatus>) -> Self {
        self.radius_status = input;
        self
    }
    /// <p>The status of the RADIUS server.</p>
    pub fn get_radius_status(&self) -> &::std::option::Option<crate::types::RadiusStatus> {
        &self.radius_status
    }
    /// <p>Network type of the directory in the directory owner account.</p>
    pub fn network_type(mut self, input: crate::types::NetworkType) -> Self {
        self.network_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Network type of the directory in the directory owner account.</p>
    pub fn set_network_type(mut self, input: ::std::option::Option<crate::types::NetworkType>) -> Self {
        self.network_type = input;
        self
    }
    /// <p>Network type of the directory in the directory owner account.</p>
    pub fn get_network_type(&self) -> &::std::option::Option<crate::types::NetworkType> {
        &self.network_type
    }
    /// Consumes the builder and constructs a [`OwnerDirectoryDescription`](crate::types::OwnerDirectoryDescription).
    pub fn build(self) -> crate::types::OwnerDirectoryDescription {
        crate::types::OwnerDirectoryDescription {
            directory_id: self.directory_id,
            account_id: self.account_id,
            dns_ip_addrs: self.dns_ip_addrs,
            dns_ipv6_addrs: self.dns_ipv6_addrs,
            vpc_settings: self.vpc_settings,
            radius_settings: self.radius_settings,
            radius_status: self.radius_status,
            network_type: self.network_type,
        }
    }
}
