// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the configuration values for a hybrid directory update, including Amazon Web Services System Manager managed node and DNS information.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct HybridUpdateValue {
    /// <p>The identifiers of the self-managed instances with SSM in the hybrid directory configuration.</p>
    pub instance_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The IP addresses of the DNS servers or domain controllers in the hybrid directory configuration.</p>
    pub dns_ips: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl HybridUpdateValue {
    /// <p>The identifiers of the self-managed instances with SSM in the hybrid directory configuration.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.instance_ids.is_none()`.
    pub fn instance_ids(&self) -> &[::std::string::String] {
        self.instance_ids.as_deref().unwrap_or_default()
    }
    /// <p>The IP addresses of the DNS servers or domain controllers in the hybrid directory configuration.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.dns_ips.is_none()`.
    pub fn dns_ips(&self) -> &[::std::string::String] {
        self.dns_ips.as_deref().unwrap_or_default()
    }
}
impl HybridUpdateValue {
    /// Creates a new builder-style object to manufacture [`HybridUpdateValue`](crate::types::HybridUpdateValue).
    pub fn builder() -> crate::types::builders::HybridUpdateValueBuilder {
        crate::types::builders::HybridUpdateValueBuilder::default()
    }
}

/// A builder for [`HybridUpdateValue`](crate::types::HybridUpdateValue).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct HybridUpdateValueBuilder {
    pub(crate) instance_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) dns_ips: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl HybridUpdateValueBuilder {
    /// Appends an item to `instance_ids`.
    ///
    /// To override the contents of this collection use [`set_instance_ids`](Self::set_instance_ids).
    ///
    /// <p>The identifiers of the self-managed instances with SSM in the hybrid directory configuration.</p>
    pub fn instance_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.instance_ids.unwrap_or_default();
        v.push(input.into());
        self.instance_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>The identifiers of the self-managed instances with SSM in the hybrid directory configuration.</p>
    pub fn set_instance_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.instance_ids = input;
        self
    }
    /// <p>The identifiers of the self-managed instances with SSM in the hybrid directory configuration.</p>
    pub fn get_instance_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.instance_ids
    }
    /// Appends an item to `dns_ips`.
    ///
    /// To override the contents of this collection use [`set_dns_ips`](Self::set_dns_ips).
    ///
    /// <p>The IP addresses of the DNS servers or domain controllers in the hybrid directory configuration.</p>
    pub fn dns_ips(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.dns_ips.unwrap_or_default();
        v.push(input.into());
        self.dns_ips = ::std::option::Option::Some(v);
        self
    }
    /// <p>The IP addresses of the DNS servers or domain controllers in the hybrid directory configuration.</p>
    pub fn set_dns_ips(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.dns_ips = input;
        self
    }
    /// <p>The IP addresses of the DNS servers or domain controllers in the hybrid directory configuration.</p>
    pub fn get_dns_ips(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.dns_ips
    }
    /// Consumes the builder and constructs a [`HybridUpdateValue`](crate::types::HybridUpdateValue).
    pub fn build(self) -> crate::types::HybridUpdateValue {
        crate::types::HybridUpdateValue {
            instance_ids: self.instance_ids,
            dns_ips: self.dns_ips,
        }
    }
}
