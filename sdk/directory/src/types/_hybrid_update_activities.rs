// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about update activities for different components of a hybrid directory.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct HybridUpdateActivities {
    /// <p>A list of update activities related to the self-managed instances with SSM in the self-managed instances with SSM hybrid directory configuration.</p>
    pub self_managed_instances: ::std::option::Option<::std::vec::Vec<crate::types::HybridUpdateInfoEntry>>,
    /// <p>A list of update activities related to hybrid directory administrator account changes.</p>
    pub hybrid_administrator_account: ::std::option::Option<::std::vec::Vec<crate::types::HybridUpdateInfoEntry>>,
}
impl HybridUpdateActivities {
    /// <p>A list of update activities related to the self-managed instances with SSM in the self-managed instances with SSM hybrid directory configuration.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.self_managed_instances.is_none()`.
    pub fn self_managed_instances(&self) -> &[crate::types::HybridUpdateInfoEntry] {
        self.self_managed_instances.as_deref().unwrap_or_default()
    }
    /// <p>A list of update activities related to hybrid directory administrator account changes.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.hybrid_administrator_account.is_none()`.
    pub fn hybrid_administrator_account(&self) -> &[crate::types::HybridUpdateInfoEntry] {
        self.hybrid_administrator_account.as_deref().unwrap_or_default()
    }
}
impl HybridUpdateActivities {
    /// Creates a new builder-style object to manufacture [`HybridUpdateActivities`](crate::types::HybridUpdateActivities).
    pub fn builder() -> crate::types::builders::HybridUpdateActivitiesBuilder {
        crate::types::builders::HybridUpdateActivitiesBuilder::default()
    }
}

/// A builder for [`HybridUpdateActivities`](crate::types::HybridUpdateActivities).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct HybridUpdateActivitiesBuilder {
    pub(crate) self_managed_instances: ::std::option::Option<::std::vec::Vec<crate::types::HybridUpdateInfoEntry>>,
    pub(crate) hybrid_administrator_account: ::std::option::Option<::std::vec::Vec<crate::types::HybridUpdateInfoEntry>>,
}
impl HybridUpdateActivitiesBuilder {
    /// Appends an item to `self_managed_instances`.
    ///
    /// To override the contents of this collection use [`set_self_managed_instances`](Self::set_self_managed_instances).
    ///
    /// <p>A list of update activities related to the self-managed instances with SSM in the self-managed instances with SSM hybrid directory configuration.</p>
    pub fn self_managed_instances(mut self, input: crate::types::HybridUpdateInfoEntry) -> Self {
        let mut v = self.self_managed_instances.unwrap_or_default();
        v.push(input);
        self.self_managed_instances = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of update activities related to the self-managed instances with SSM in the self-managed instances with SSM hybrid directory configuration.</p>
    pub fn set_self_managed_instances(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::HybridUpdateInfoEntry>>) -> Self {
        self.self_managed_instances = input;
        self
    }
    /// <p>A list of update activities related to the self-managed instances with SSM in the self-managed instances with SSM hybrid directory configuration.</p>
    pub fn get_self_managed_instances(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::HybridUpdateInfoEntry>> {
        &self.self_managed_instances
    }
    /// Appends an item to `hybrid_administrator_account`.
    ///
    /// To override the contents of this collection use [`set_hybrid_administrator_account`](Self::set_hybrid_administrator_account).
    ///
    /// <p>A list of update activities related to hybrid directory administrator account changes.</p>
    pub fn hybrid_administrator_account(mut self, input: crate::types::HybridUpdateInfoEntry) -> Self {
        let mut v = self.hybrid_administrator_account.unwrap_or_default();
        v.push(input);
        self.hybrid_administrator_account = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of update activities related to hybrid directory administrator account changes.</p>
    pub fn set_hybrid_administrator_account(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::HybridUpdateInfoEntry>>) -> Self {
        self.hybrid_administrator_account = input;
        self
    }
    /// <p>A list of update activities related to hybrid directory administrator account changes.</p>
    pub fn get_hybrid_administrator_account(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::HybridUpdateInfoEntry>> {
        &self.hybrid_administrator_account
    }
    /// Consumes the builder and constructs a [`HybridUpdateActivities`](crate::types::HybridUpdateActivities).
    pub fn build(self) -> crate::types::HybridUpdateActivities {
        crate::types::HybridUpdateActivities {
            self_managed_instances: self.self_managed_instances,
            hybrid_administrator_account: self.hybrid_administrator_account,
        }
    }
}
