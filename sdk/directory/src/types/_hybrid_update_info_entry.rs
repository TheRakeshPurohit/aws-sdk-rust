// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains detailed information about a specific update activity for a hybrid directory component.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct HybridUpdateInfoEntry {
    /// <p>The current status of the update activity. Valid values include <code>UPDATED</code>, <code>UPDATING</code>, and <code>UPDATE_FAILED</code>.</p>
    pub status: ::std::option::Option<crate::types::UpdateStatus>,
    /// <p>A human-readable description of the update status, including any error details or progress information.</p>
    pub status_reason: ::std::option::Option<::std::string::String>,
    /// <p>Specifies if the update was initiated by the customer or Amazon Web Services.</p>
    pub initiated_by: ::std::option::Option<::std::string::String>,
    /// <p>The new configuration values being applied in this update.</p>
    pub new_value: ::std::option::Option<crate::types::HybridUpdateValue>,
    /// <p>The previous configuration values before this update was applied.</p>
    pub previous_value: ::std::option::Option<crate::types::HybridUpdateValue>,
    /// <p>The date and time when the update activity was initiated.</p>
    pub start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date and time when the update activity status was last updated.</p>
    pub last_updated_date_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The identifier of the assessment performed to validate this update configuration.</p>
    pub assessment_id: ::std::option::Option<::std::string::String>,
}
impl HybridUpdateInfoEntry {
    /// <p>The current status of the update activity. Valid values include <code>UPDATED</code>, <code>UPDATING</code>, and <code>UPDATE_FAILED</code>.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::UpdateStatus> {
        self.status.as_ref()
    }
    /// <p>A human-readable description of the update status, including any error details or progress information.</p>
    pub fn status_reason(&self) -> ::std::option::Option<&str> {
        self.status_reason.as_deref()
    }
    /// <p>Specifies if the update was initiated by the customer or Amazon Web Services.</p>
    pub fn initiated_by(&self) -> ::std::option::Option<&str> {
        self.initiated_by.as_deref()
    }
    /// <p>The new configuration values being applied in this update.</p>
    pub fn new_value(&self) -> ::std::option::Option<&crate::types::HybridUpdateValue> {
        self.new_value.as_ref()
    }
    /// <p>The previous configuration values before this update was applied.</p>
    pub fn previous_value(&self) -> ::std::option::Option<&crate::types::HybridUpdateValue> {
        self.previous_value.as_ref()
    }
    /// <p>The date and time when the update activity was initiated.</p>
    pub fn start_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p>The date and time when the update activity status was last updated.</p>
    pub fn last_updated_date_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_updated_date_time.as_ref()
    }
    /// <p>The identifier of the assessment performed to validate this update configuration.</p>
    pub fn assessment_id(&self) -> ::std::option::Option<&str> {
        self.assessment_id.as_deref()
    }
}
impl HybridUpdateInfoEntry {
    /// Creates a new builder-style object to manufacture [`HybridUpdateInfoEntry`](crate::types::HybridUpdateInfoEntry).
    pub fn builder() -> crate::types::builders::HybridUpdateInfoEntryBuilder {
        crate::types::builders::HybridUpdateInfoEntryBuilder::default()
    }
}

/// A builder for [`HybridUpdateInfoEntry`](crate::types::HybridUpdateInfoEntry).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct HybridUpdateInfoEntryBuilder {
    pub(crate) status: ::std::option::Option<crate::types::UpdateStatus>,
    pub(crate) status_reason: ::std::option::Option<::std::string::String>,
    pub(crate) initiated_by: ::std::option::Option<::std::string::String>,
    pub(crate) new_value: ::std::option::Option<crate::types::HybridUpdateValue>,
    pub(crate) previous_value: ::std::option::Option<crate::types::HybridUpdateValue>,
    pub(crate) start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_updated_date_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) assessment_id: ::std::option::Option<::std::string::String>,
}
impl HybridUpdateInfoEntryBuilder {
    /// <p>The current status of the update activity. Valid values include <code>UPDATED</code>, <code>UPDATING</code>, and <code>UPDATE_FAILED</code>.</p>
    pub fn status(mut self, input: crate::types::UpdateStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the update activity. Valid values include <code>UPDATED</code>, <code>UPDATING</code>, and <code>UPDATE_FAILED</code>.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::UpdateStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status of the update activity. Valid values include <code>UPDATED</code>, <code>UPDATING</code>, and <code>UPDATE_FAILED</code>.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::UpdateStatus> {
        &self.status
    }
    /// <p>A human-readable description of the update status, including any error details or progress information.</p>
    pub fn status_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A human-readable description of the update status, including any error details or progress information.</p>
    pub fn set_status_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_reason = input;
        self
    }
    /// <p>A human-readable description of the update status, including any error details or progress information.</p>
    pub fn get_status_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_reason
    }
    /// <p>Specifies if the update was initiated by the customer or Amazon Web Services.</p>
    pub fn initiated_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.initiated_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies if the update was initiated by the customer or Amazon Web Services.</p>
    pub fn set_initiated_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.initiated_by = input;
        self
    }
    /// <p>Specifies if the update was initiated by the customer or Amazon Web Services.</p>
    pub fn get_initiated_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.initiated_by
    }
    /// <p>The new configuration values being applied in this update.</p>
    pub fn new_value(mut self, input: crate::types::HybridUpdateValue) -> Self {
        self.new_value = ::std::option::Option::Some(input);
        self
    }
    /// <p>The new configuration values being applied in this update.</p>
    pub fn set_new_value(mut self, input: ::std::option::Option<crate::types::HybridUpdateValue>) -> Self {
        self.new_value = input;
        self
    }
    /// <p>The new configuration values being applied in this update.</p>
    pub fn get_new_value(&self) -> &::std::option::Option<crate::types::HybridUpdateValue> {
        &self.new_value
    }
    /// <p>The previous configuration values before this update was applied.</p>
    pub fn previous_value(mut self, input: crate::types::HybridUpdateValue) -> Self {
        self.previous_value = ::std::option::Option::Some(input);
        self
    }
    /// <p>The previous configuration values before this update was applied.</p>
    pub fn set_previous_value(mut self, input: ::std::option::Option<crate::types::HybridUpdateValue>) -> Self {
        self.previous_value = input;
        self
    }
    /// <p>The previous configuration values before this update was applied.</p>
    pub fn get_previous_value(&self) -> &::std::option::Option<crate::types::HybridUpdateValue> {
        &self.previous_value
    }
    /// <p>The date and time when the update activity was initiated.</p>
    pub fn start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time when the update activity was initiated.</p>
    pub fn set_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_time = input;
        self
    }
    /// <p>The date and time when the update activity was initiated.</p>
    pub fn get_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_time
    }
    /// <p>The date and time when the update activity status was last updated.</p>
    pub fn last_updated_date_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated_date_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time when the update activity status was last updated.</p>
    pub fn set_last_updated_date_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated_date_time = input;
        self
    }
    /// <p>The date and time when the update activity status was last updated.</p>
    pub fn get_last_updated_date_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated_date_time
    }
    /// <p>The identifier of the assessment performed to validate this update configuration.</p>
    pub fn assessment_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.assessment_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the assessment performed to validate this update configuration.</p>
    pub fn set_assessment_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.assessment_id = input;
        self
    }
    /// <p>The identifier of the assessment performed to validate this update configuration.</p>
    pub fn get_assessment_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.assessment_id
    }
    /// Consumes the builder and constructs a [`HybridUpdateInfoEntry`](crate::types::HybridUpdateInfoEntry).
    pub fn build(self) -> crate::types::HybridUpdateInfoEntry {
        crate::types::HybridUpdateInfoEntry {
            status: self.status,
            status_reason: self.status_reason,
            initiated_by: self.initiated_by,
            new_value: self.new_value,
            previous_value: self.previous_value,
            start_time: self.start_time,
            last_updated_date_time: self.last_updated_date_time,
            assessment_id: self.assessment_id,
        }
    }
}
