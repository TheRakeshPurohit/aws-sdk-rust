// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the results of validation tests performed against a specific domain controller during a directory assessment.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AssessmentReport {
    /// <p>The IP address of the domain controller that was tested during the assessment.</p>
    pub domain_controller_ip: ::std::option::Option<::std::string::String>,
    /// <p>A list of validation results for different test categories performed against this domain controller.</p>
    pub validations: ::std::option::Option<::std::vec::Vec<crate::types::AssessmentValidation>>,
}
impl AssessmentReport {
    /// <p>The IP address of the domain controller that was tested during the assessment.</p>
    pub fn domain_controller_ip(&self) -> ::std::option::Option<&str> {
        self.domain_controller_ip.as_deref()
    }
    /// <p>A list of validation results for different test categories performed against this domain controller.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.validations.is_none()`.
    pub fn validations(&self) -> &[crate::types::AssessmentValidation] {
        self.validations.as_deref().unwrap_or_default()
    }
}
impl AssessmentReport {
    /// Creates a new builder-style object to manufacture [`AssessmentReport`](crate::types::AssessmentReport).
    pub fn builder() -> crate::types::builders::AssessmentReportBuilder {
        crate::types::builders::AssessmentReportBuilder::default()
    }
}

/// A builder for [`AssessmentReport`](crate::types::AssessmentReport).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AssessmentReportBuilder {
    pub(crate) domain_controller_ip: ::std::option::Option<::std::string::String>,
    pub(crate) validations: ::std::option::Option<::std::vec::Vec<crate::types::AssessmentValidation>>,
}
impl AssessmentReportBuilder {
    /// <p>The IP address of the domain controller that was tested during the assessment.</p>
    pub fn domain_controller_ip(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_controller_ip = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IP address of the domain controller that was tested during the assessment.</p>
    pub fn set_domain_controller_ip(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_controller_ip = input;
        self
    }
    /// <p>The IP address of the domain controller that was tested during the assessment.</p>
    pub fn get_domain_controller_ip(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_controller_ip
    }
    /// Appends an item to `validations`.
    ///
    /// To override the contents of this collection use [`set_validations`](Self::set_validations).
    ///
    /// <p>A list of validation results for different test categories performed against this domain controller.</p>
    pub fn validations(mut self, input: crate::types::AssessmentValidation) -> Self {
        let mut v = self.validations.unwrap_or_default();
        v.push(input);
        self.validations = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of validation results for different test categories performed against this domain controller.</p>
    pub fn set_validations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AssessmentValidation>>) -> Self {
        self.validations = input;
        self
    }
    /// <p>A list of validation results for different test categories performed against this domain controller.</p>
    pub fn get_validations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AssessmentValidation>> {
        &self.validations
    }
    /// Consumes the builder and constructs a [`AssessmentReport`](crate::types::AssessmentReport).
    pub fn build(self) -> crate::types::AssessmentReport {
        crate::types::AssessmentReport {
            domain_controller_ip: self.domain_controller_ip,
            validations: self.validations,
        }
    }
}
