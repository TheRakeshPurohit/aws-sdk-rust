// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains configuration parameters required to perform a directory assessment.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AssessmentConfiguration {
    /// <p>A list of IP addresses for the DNS servers or domain controllers in your self-managed AD that are tested during the assessment.</p>
    pub customer_dns_ips: ::std::vec::Vec<::std::string::String>,
    /// <p>The fully qualified domain name (FQDN) of the self-managed AD domain to assess.</p>
    pub dns_name: ::std::string::String,
    /// <p>Contains VPC information for the <code>CreateDirectory</code>, <code>CreateMicrosoftAD</code>, or <code>CreateHybridAD</code> operation.</p>
    pub vpc_settings: ::std::option::Option<crate::types::DirectoryVpcSettings>,
    /// <p>The identifiers of the self-managed instances with SSM that are used to perform connectivity and validation tests.</p>
    pub instance_ids: ::std::vec::Vec<::std::string::String>,
    /// <p>By default, the service attaches a security group to allow network access to the self-managed nodes in your Amazon VPC. You can optionally supply your own security group that allows network traffic to and from your self-managed domain controllers outside of your Amazon VPC.</p>
    pub security_group_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl AssessmentConfiguration {
    /// <p>A list of IP addresses for the DNS servers or domain controllers in your self-managed AD that are tested during the assessment.</p>
    pub fn customer_dns_ips(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.customer_dns_ips.deref()
    }
    /// <p>The fully qualified domain name (FQDN) of the self-managed AD domain to assess.</p>
    pub fn dns_name(&self) -> &str {
        use std::ops::Deref;
        self.dns_name.deref()
    }
    /// <p>Contains VPC information for the <code>CreateDirectory</code>, <code>CreateMicrosoftAD</code>, or <code>CreateHybridAD</code> operation.</p>
    pub fn vpc_settings(&self) -> ::std::option::Option<&crate::types::DirectoryVpcSettings> {
        self.vpc_settings.as_ref()
    }
    /// <p>The identifiers of the self-managed instances with SSM that are used to perform connectivity and validation tests.</p>
    pub fn instance_ids(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.instance_ids.deref()
    }
    /// <p>By default, the service attaches a security group to allow network access to the self-managed nodes in your Amazon VPC. You can optionally supply your own security group that allows network traffic to and from your self-managed domain controllers outside of your Amazon VPC.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.security_group_ids.is_none()`.
    pub fn security_group_ids(&self) -> &[::std::string::String] {
        self.security_group_ids.as_deref().unwrap_or_default()
    }
}
impl AssessmentConfiguration {
    /// Creates a new builder-style object to manufacture [`AssessmentConfiguration`](crate::types::AssessmentConfiguration).
    pub fn builder() -> crate::types::builders::AssessmentConfigurationBuilder {
        crate::types::builders::AssessmentConfigurationBuilder::default()
    }
}

/// A builder for [`AssessmentConfiguration`](crate::types::AssessmentConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AssessmentConfigurationBuilder {
    pub(crate) customer_dns_ips: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) dns_name: ::std::option::Option<::std::string::String>,
    pub(crate) vpc_settings: ::std::option::Option<crate::types::DirectoryVpcSettings>,
    pub(crate) instance_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) security_group_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl AssessmentConfigurationBuilder {
    /// Appends an item to `customer_dns_ips`.
    ///
    /// To override the contents of this collection use [`set_customer_dns_ips`](Self::set_customer_dns_ips).
    ///
    /// <p>A list of IP addresses for the DNS servers or domain controllers in your self-managed AD that are tested during the assessment.</p>
    pub fn customer_dns_ips(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.customer_dns_ips.unwrap_or_default();
        v.push(input.into());
        self.customer_dns_ips = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of IP addresses for the DNS servers or domain controllers in your self-managed AD that are tested during the assessment.</p>
    pub fn set_customer_dns_ips(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.customer_dns_ips = input;
        self
    }
    /// <p>A list of IP addresses for the DNS servers or domain controllers in your self-managed AD that are tested during the assessment.</p>
    pub fn get_customer_dns_ips(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.customer_dns_ips
    }
    /// <p>The fully qualified domain name (FQDN) of the self-managed AD domain to assess.</p>
    /// This field is required.
    pub fn dns_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.dns_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The fully qualified domain name (FQDN) of the self-managed AD domain to assess.</p>
    pub fn set_dns_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.dns_name = input;
        self
    }
    /// <p>The fully qualified domain name (FQDN) of the self-managed AD domain to assess.</p>
    pub fn get_dns_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.dns_name
    }
    /// <p>Contains VPC information for the <code>CreateDirectory</code>, <code>CreateMicrosoftAD</code>, or <code>CreateHybridAD</code> operation.</p>
    /// This field is required.
    pub fn vpc_settings(mut self, input: crate::types::DirectoryVpcSettings) -> Self {
        self.vpc_settings = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains VPC information for the <code>CreateDirectory</code>, <code>CreateMicrosoftAD</code>, or <code>CreateHybridAD</code> operation.</p>
    pub fn set_vpc_settings(mut self, input: ::std::option::Option<crate::types::DirectoryVpcSettings>) -> Self {
        self.vpc_settings = input;
        self
    }
    /// <p>Contains VPC information for the <code>CreateDirectory</code>, <code>CreateMicrosoftAD</code>, or <code>CreateHybridAD</code> operation.</p>
    pub fn get_vpc_settings(&self) -> &::std::option::Option<crate::types::DirectoryVpcSettings> {
        &self.vpc_settings
    }
    /// Appends an item to `instance_ids`.
    ///
    /// To override the contents of this collection use [`set_instance_ids`](Self::set_instance_ids).
    ///
    /// <p>The identifiers of the self-managed instances with SSM that are used to perform connectivity and validation tests.</p>
    pub fn instance_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.instance_ids.unwrap_or_default();
        v.push(input.into());
        self.instance_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>The identifiers of the self-managed instances with SSM that are used to perform connectivity and validation tests.</p>
    pub fn set_instance_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.instance_ids = input;
        self
    }
    /// <p>The identifiers of the self-managed instances with SSM that are used to perform connectivity and validation tests.</p>
    pub fn get_instance_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.instance_ids
    }
    /// Appends an item to `security_group_ids`.
    ///
    /// To override the contents of this collection use [`set_security_group_ids`](Self::set_security_group_ids).
    ///
    /// <p>By default, the service attaches a security group to allow network access to the self-managed nodes in your Amazon VPC. You can optionally supply your own security group that allows network traffic to and from your self-managed domain controllers outside of your Amazon VPC.</p>
    pub fn security_group_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.security_group_ids.unwrap_or_default();
        v.push(input.into());
        self.security_group_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>By default, the service attaches a security group to allow network access to the self-managed nodes in your Amazon VPC. You can optionally supply your own security group that allows network traffic to and from your self-managed domain controllers outside of your Amazon VPC.</p>
    pub fn set_security_group_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.security_group_ids = input;
        self
    }
    /// <p>By default, the service attaches a security group to allow network access to the self-managed nodes in your Amazon VPC. You can optionally supply your own security group that allows network traffic to and from your self-managed domain controllers outside of your Amazon VPC.</p>
    pub fn get_security_group_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.security_group_ids
    }
    /// Consumes the builder and constructs a [`AssessmentConfiguration`](crate::types::AssessmentConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`customer_dns_ips`](crate::types::builders::AssessmentConfigurationBuilder::customer_dns_ips)
    /// - [`dns_name`](crate::types::builders::AssessmentConfigurationBuilder::dns_name)
    /// - [`instance_ids`](crate::types::builders::AssessmentConfigurationBuilder::instance_ids)
    pub fn build(self) -> ::std::result::Result<crate::types::AssessmentConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AssessmentConfiguration {
            customer_dns_ips: self.customer_dns_ips.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "customer_dns_ips",
                    "customer_dns_ips was not specified but it is required when building AssessmentConfiguration",
                )
            })?,
            dns_name: self.dns_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "dns_name",
                    "dns_name was not specified but it is required when building AssessmentConfiguration",
                )
            })?,
            vpc_settings: self.vpc_settings,
            instance_ids: self.instance_ids.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "instance_ids",
                    "instance_ids was not specified but it is required when building AssessmentConfiguration",
                )
            })?,
            security_group_ids: self.security_group_ids,
        })
    }
}
