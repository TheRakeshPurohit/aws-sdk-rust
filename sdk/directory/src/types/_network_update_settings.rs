// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the network configuration for directory update operations.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct NetworkUpdateSettings {
    /// <p>The target network type for the directory update.</p>
    pub network_type: ::std::option::Option<crate::types::NetworkType>,
    /// <p>IPv6 addresses of DNS servers or domain controllers in the self-managed directory. Required only when updating an AD Connector directory.</p>
    pub customer_dns_ips_v6: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl NetworkUpdateSettings {
    /// <p>The target network type for the directory update.</p>
    pub fn network_type(&self) -> ::std::option::Option<&crate::types::NetworkType> {
        self.network_type.as_ref()
    }
    /// <p>IPv6 addresses of DNS servers or domain controllers in the self-managed directory. Required only when updating an AD Connector directory.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.customer_dns_ips_v6.is_none()`.
    pub fn customer_dns_ips_v6(&self) -> &[::std::string::String] {
        self.customer_dns_ips_v6.as_deref().unwrap_or_default()
    }
}
impl NetworkUpdateSettings {
    /// Creates a new builder-style object to manufacture [`NetworkUpdateSettings`](crate::types::NetworkUpdateSettings).
    pub fn builder() -> crate::types::builders::NetworkUpdateSettingsBuilder {
        crate::types::builders::NetworkUpdateSettingsBuilder::default()
    }
}

/// A builder for [`NetworkUpdateSettings`](crate::types::NetworkUpdateSettings).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct NetworkUpdateSettingsBuilder {
    pub(crate) network_type: ::std::option::Option<crate::types::NetworkType>,
    pub(crate) customer_dns_ips_v6: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl NetworkUpdateSettingsBuilder {
    /// <p>The target network type for the directory update.</p>
    pub fn network_type(mut self, input: crate::types::NetworkType) -> Self {
        self.network_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The target network type for the directory update.</p>
    pub fn set_network_type(mut self, input: ::std::option::Option<crate::types::NetworkType>) -> Self {
        self.network_type = input;
        self
    }
    /// <p>The target network type for the directory update.</p>
    pub fn get_network_type(&self) -> &::std::option::Option<crate::types::NetworkType> {
        &self.network_type
    }
    /// Appends an item to `customer_dns_ips_v6`.
    ///
    /// To override the contents of this collection use [`set_customer_dns_ips_v6`](Self::set_customer_dns_ips_v6).
    ///
    /// <p>IPv6 addresses of DNS servers or domain controllers in the self-managed directory. Required only when updating an AD Connector directory.</p>
    pub fn customer_dns_ips_v6(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.customer_dns_ips_v6.unwrap_or_default();
        v.push(input.into());
        self.customer_dns_ips_v6 = ::std::option::Option::Some(v);
        self
    }
    /// <p>IPv6 addresses of DNS servers or domain controllers in the self-managed directory. Required only when updating an AD Connector directory.</p>
    pub fn set_customer_dns_ips_v6(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.customer_dns_ips_v6 = input;
        self
    }
    /// <p>IPv6 addresses of DNS servers or domain controllers in the self-managed directory. Required only when updating an AD Connector directory.</p>
    pub fn get_customer_dns_ips_v6(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.customer_dns_ips_v6
    }
    /// Consumes the builder and constructs a [`NetworkUpdateSettings`](crate::types::NetworkUpdateSettings).
    pub fn build(self) -> crate::types::NetworkUpdateSettings {
        crate::types::NetworkUpdateSettings {
            network_type: self.network_type,
            customer_dns_ips_v6: self.customer_dns_ips_v6,
        }
    }
}
