// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains configuration settings for self-managed instances with SSM used in hybrid directory operations.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct HybridCustomerInstancesSettings {
    /// <p>The IP addresses of the DNS servers or domain controllers in your self-managed AD environment.</p>
    pub customer_dns_ips: ::std::vec::Vec<::std::string::String>,
    /// <p>The identifiers of the self-managed instances with SSM used in hybrid directory.</p>
    pub instance_ids: ::std::vec::Vec<::std::string::String>,
}
impl HybridCustomerInstancesSettings {
    /// <p>The IP addresses of the DNS servers or domain controllers in your self-managed AD environment.</p>
    pub fn customer_dns_ips(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.customer_dns_ips.deref()
    }
    /// <p>The identifiers of the self-managed instances with SSM used in hybrid directory.</p>
    pub fn instance_ids(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.instance_ids.deref()
    }
}
impl HybridCustomerInstancesSettings {
    /// Creates a new builder-style object to manufacture [`HybridCustomerInstancesSettings`](crate::types::HybridCustomerInstancesSettings).
    pub fn builder() -> crate::types::builders::HybridCustomerInstancesSettingsBuilder {
        crate::types::builders::HybridCustomerInstancesSettingsBuilder::default()
    }
}

/// A builder for [`HybridCustomerInstancesSettings`](crate::types::HybridCustomerInstancesSettings).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct HybridCustomerInstancesSettingsBuilder {
    pub(crate) customer_dns_ips: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) instance_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl HybridCustomerInstancesSettingsBuilder {
    /// Appends an item to `customer_dns_ips`.
    ///
    /// To override the contents of this collection use [`set_customer_dns_ips`](Self::set_customer_dns_ips).
    ///
    /// <p>The IP addresses of the DNS servers or domain controllers in your self-managed AD environment.</p>
    pub fn customer_dns_ips(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.customer_dns_ips.unwrap_or_default();
        v.push(input.into());
        self.customer_dns_ips = ::std::option::Option::Some(v);
        self
    }
    /// <p>The IP addresses of the DNS servers or domain controllers in your self-managed AD environment.</p>
    pub fn set_customer_dns_ips(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.customer_dns_ips = input;
        self
    }
    /// <p>The IP addresses of the DNS servers or domain controllers in your self-managed AD environment.</p>
    pub fn get_customer_dns_ips(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.customer_dns_ips
    }
    /// Appends an item to `instance_ids`.
    ///
    /// To override the contents of this collection use [`set_instance_ids`](Self::set_instance_ids).
    ///
    /// <p>The identifiers of the self-managed instances with SSM used in hybrid directory.</p>
    pub fn instance_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.instance_ids.unwrap_or_default();
        v.push(input.into());
        self.instance_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>The identifiers of the self-managed instances with SSM used in hybrid directory.</p>
    pub fn set_instance_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.instance_ids = input;
        self
    }
    /// <p>The identifiers of the self-managed instances with SSM used in hybrid directory.</p>
    pub fn get_instance_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.instance_ids
    }
    /// Consumes the builder and constructs a [`HybridCustomerInstancesSettings`](crate::types::HybridCustomerInstancesSettings).
    /// This method will fail if any of the following fields are not set:
    /// - [`customer_dns_ips`](crate::types::builders::HybridCustomerInstancesSettingsBuilder::customer_dns_ips)
    /// - [`instance_ids`](crate::types::builders::HybridCustomerInstancesSettingsBuilder::instance_ids)
    pub fn build(self) -> ::std::result::Result<crate::types::HybridCustomerInstancesSettings, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::HybridCustomerInstancesSettings {
            customer_dns_ips: self.customer_dns_ips.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "customer_dns_ips",
                    "customer_dns_ips was not specified but it is required when building HybridCustomerInstancesSettings",
                )
            })?,
            instance_ids: self.instance_ids.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "instance_ids",
                    "instance_ids was not specified but it is required when building HybridCustomerInstancesSettings",
                )
            })?,
        })
    }
}
