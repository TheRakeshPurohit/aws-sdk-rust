// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about a specific validation test performed during a directory assessment.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AssessmentValidation {
    /// <p>The category of the validation test.</p>
    pub category: ::std::option::Option<::std::string::String>,
    /// <p>The name of the specific validation test performed within the category.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The result status of the validation test. Valid values include <code>SUCCESS</code>, <code>FAILED</code>, <code>PENDING</code>, and <code>IN_PROGRESS</code>.</p>
    pub status: ::std::option::Option<::std::string::String>,
    /// <p>A detailed status code providing additional information about the validation result.</p>
    pub status_code: ::std::option::Option<::std::string::String>,
    /// <p>A human-readable description of the validation result, including any error details or recommendations.</p>
    pub status_reason: ::std::option::Option<::std::string::String>,
    /// <p>The date and time when the validation test was started.</p>
    pub start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date and time when the validation test was completed or last updated.</p>
    pub last_update_date_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl AssessmentValidation {
    /// <p>The category of the validation test.</p>
    pub fn category(&self) -> ::std::option::Option<&str> {
        self.category.as_deref()
    }
    /// <p>The name of the specific validation test performed within the category.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The result status of the validation test. Valid values include <code>SUCCESS</code>, <code>FAILED</code>, <code>PENDING</code>, and <code>IN_PROGRESS</code>.</p>
    pub fn status(&self) -> ::std::option::Option<&str> {
        self.status.as_deref()
    }
    /// <p>A detailed status code providing additional information about the validation result.</p>
    pub fn status_code(&self) -> ::std::option::Option<&str> {
        self.status_code.as_deref()
    }
    /// <p>A human-readable description of the validation result, including any error details or recommendations.</p>
    pub fn status_reason(&self) -> ::std::option::Option<&str> {
        self.status_reason.as_deref()
    }
    /// <p>The date and time when the validation test was started.</p>
    pub fn start_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p>The date and time when the validation test was completed or last updated.</p>
    pub fn last_update_date_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_update_date_time.as_ref()
    }
}
impl AssessmentValidation {
    /// Creates a new builder-style object to manufacture [`AssessmentValidation`](crate::types::AssessmentValidation).
    pub fn builder() -> crate::types::builders::AssessmentValidationBuilder {
        crate::types::builders::AssessmentValidationBuilder::default()
    }
}

/// A builder for [`AssessmentValidation`](crate::types::AssessmentValidation).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AssessmentValidationBuilder {
    pub(crate) category: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<::std::string::String>,
    pub(crate) status_code: ::std::option::Option<::std::string::String>,
    pub(crate) status_reason: ::std::option::Option<::std::string::String>,
    pub(crate) start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_update_date_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl AssessmentValidationBuilder {
    /// <p>The category of the validation test.</p>
    pub fn category(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.category = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The category of the validation test.</p>
    pub fn set_category(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.category = input;
        self
    }
    /// <p>The category of the validation test.</p>
    pub fn get_category(&self) -> &::std::option::Option<::std::string::String> {
        &self.category
    }
    /// <p>The name of the specific validation test performed within the category.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the specific validation test performed within the category.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the specific validation test performed within the category.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The result status of the validation test. Valid values include <code>SUCCESS</code>, <code>FAILED</code>, <code>PENDING</code>, and <code>IN_PROGRESS</code>.</p>
    pub fn status(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The result status of the validation test. Valid values include <code>SUCCESS</code>, <code>FAILED</code>, <code>PENDING</code>, and <code>IN_PROGRESS</code>.</p>
    pub fn set_status(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status = input;
        self
    }
    /// <p>The result status of the validation test. Valid values include <code>SUCCESS</code>, <code>FAILED</code>, <code>PENDING</code>, and <code>IN_PROGRESS</code>.</p>
    pub fn get_status(&self) -> &::std::option::Option<::std::string::String> {
        &self.status
    }
    /// <p>A detailed status code providing additional information about the validation result.</p>
    pub fn status_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A detailed status code providing additional information about the validation result.</p>
    pub fn set_status_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_code = input;
        self
    }
    /// <p>A detailed status code providing additional information about the validation result.</p>
    pub fn get_status_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_code
    }
    /// <p>A human-readable description of the validation result, including any error details or recommendations.</p>
    pub fn status_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A human-readable description of the validation result, including any error details or recommendations.</p>
    pub fn set_status_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_reason = input;
        self
    }
    /// <p>A human-readable description of the validation result, including any error details or recommendations.</p>
    pub fn get_status_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_reason
    }
    /// <p>The date and time when the validation test was started.</p>
    pub fn start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time when the validation test was started.</p>
    pub fn set_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_time = input;
        self
    }
    /// <p>The date and time when the validation test was started.</p>
    pub fn get_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_time
    }
    /// <p>The date and time when the validation test was completed or last updated.</p>
    pub fn last_update_date_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_update_date_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time when the validation test was completed or last updated.</p>
    pub fn set_last_update_date_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_update_date_time = input;
        self
    }
    /// <p>The date and time when the validation test was completed or last updated.</p>
    pub fn get_last_update_date_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_update_date_time
    }
    /// Consumes the builder and constructs a [`AssessmentValidation`](crate::types::AssessmentValidation).
    pub fn build(self) -> crate::types::AssessmentValidation {
        crate::types::AssessmentValidation {
            category: self.category,
            name: self.name,
            status: self.status,
            status_code: self.status_code,
            status_reason: self.status_reason,
            start_time: self.start_time,
            last_update_date_time: self.last_update_date_time,
        }
    }
}
