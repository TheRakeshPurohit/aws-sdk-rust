// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_medical_scribe_configuration_event(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::MedicalScribeConfigurationEvent,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.vocabulary_name {
        object.key("VocabularyName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.vocabulary_filter_name {
        object.key("VocabularyFilterName").string(var_2.as_str());
    }
    if let Some(var_3) = &input.vocabulary_filter_method {
        object.key("VocabularyFilterMethod").string(var_3.as_str());
    }
    {
        object.key("ResourceAccessRoleArn").string(input.resource_access_role_arn.as_str());
    }
    if let Some(var_4) = &input.channel_definitions {
        let mut array_5 = object.key("ChannelDefinitions").start_array();
        for item_6 in var_4 {
            {
                #[allow(unused_mut)]
                let mut object_7 = array_5.value().start_object();
                crate::protocol_serde::shape_medical_scribe_channel_definition::ser_medical_scribe_channel_definition(&mut object_7, item_6)?;
                object_7.finish();
            }
        }
        array_5.finish();
    }
    if let Some(var_8) = &input.encryption_settings {
        #[allow(unused_mut)]
        let mut object_9 = object.key("EncryptionSettings").start_object();
        crate::protocol_serde::shape_medical_scribe_encryption_settings::ser_medical_scribe_encryption_settings(&mut object_9, var_8)?;
        object_9.finish();
    }
    if let Some(var_10) = &input.post_stream_analytics_settings {
        #[allow(unused_mut)]
        let mut object_11 = object.key("PostStreamAnalyticsSettings").start_object();
        crate::protocol_serde::shape_medical_scribe_post_stream_analytics_settings::ser_medical_scribe_post_stream_analytics_settings(
            &mut object_11,
            var_10,
        )?;
        object_11.finish();
    }
    if let Some(var_12) = &input.medical_scribe_context {
        #[allow(unused_mut)]
        let mut object_13 = object.key("MedicalScribeContext").start_object();
        crate::protocol_serde::shape_medical_scribe_context::ser_medical_scribe_context(&mut object_13, var_12)?;
        object_13.finish();
    }
    Ok(())
}
