// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn de_start_medical_scribe_stream_http_response(
    response: &mut ::aws_smithy_runtime_api::http::Response,
) -> std::result::Result<
    crate::operation::start_medical_scribe_stream::StartMedicalScribeStreamOutput,
    crate::operation::start_medical_scribe_stream::StartMedicalScribeStreamError,
> {
    let mut _response_body = ::aws_smithy_types::body::SdkBody::taken();
    std::mem::swap(&mut _response_body, response.body_mut());
    let _response_body = &mut _response_body;

    let _response_status = response.status().as_u16();
    let _response_headers = response.headers();
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::operation::start_medical_scribe_stream::builders::StartMedicalScribeStreamOutputBuilder::default();
        output = output.set_language_code(
            crate::protocol_serde::shape_start_medical_scribe_stream_output::de_language_code_header(_response_headers).map_err(|_| {
                crate::operation::start_medical_scribe_stream::StartMedicalScribeStreamError::unhandled(
                    "Failed to parse LanguageCode from header `x-amzn-transcribe-language-code",
                )
            })?,
        );
        output = output.set_media_encoding(
            crate::protocol_serde::shape_start_medical_scribe_stream_output::de_media_encoding_header(_response_headers).map_err(|_| {
                crate::operation::start_medical_scribe_stream::StartMedicalScribeStreamError::unhandled(
                    "Failed to parse MediaEncoding from header `x-amzn-transcribe-media-encoding",
                )
            })?,
        );
        output = output.set_media_sample_rate_hertz(
            crate::protocol_serde::shape_start_medical_scribe_stream_output::de_media_sample_rate_hertz_header(_response_headers).map_err(|_| {
                crate::operation::start_medical_scribe_stream::StartMedicalScribeStreamError::unhandled(
                    "Failed to parse MediaSampleRateHertz from header `x-amzn-transcribe-sample-rate",
                )
            })?,
        );
        output = output.set_request_id(
            crate::protocol_serde::shape_start_medical_scribe_stream_output::de_request_id_header(_response_headers).map_err(|_| {
                crate::operation::start_medical_scribe_stream::StartMedicalScribeStreamError::unhandled(
                    "Failed to parse RequestId from header `x-amzn-request-id",
                )
            })?,
        );
        output = output.set_result_stream(Some(
            crate::protocol_serde::shape_start_medical_scribe_stream_output::de_result_stream_payload(_response_body)?,
        ));
        output = output.set_session_id(
            crate::protocol_serde::shape_start_medical_scribe_stream_output::de_session_id_header(_response_headers).map_err(|_| {
                crate::operation::start_medical_scribe_stream::StartMedicalScribeStreamError::unhandled(
                    "Failed to parse SessionId from header `x-amzn-transcribe-session-id",
                )
            })?,
        );
        output._set_request_id(::aws_types::request_id::RequestId::request_id(_response_headers).map(str::to_string));
        output
            .build()
            .map_err(crate::operation::start_medical_scribe_stream::StartMedicalScribeStreamError::unhandled)?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_start_medical_scribe_stream_http_error(
    _response_status: u16,
    _response_headers: &::aws_smithy_runtime_api::http::Headers,
    _response_body: &[u8],
) -> std::result::Result<
    crate::operation::start_medical_scribe_stream::StartMedicalScribeStreamOutput,
    crate::operation::start_medical_scribe_stream::StartMedicalScribeStreamError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(_response_status, _response_headers, _response_body)
        .map_err(crate::operation::start_medical_scribe_stream::StartMedicalScribeStreamError::unhandled)?;
    generic_builder = ::aws_types::request_id::apply_request_id(generic_builder, _response_headers);
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::operation::start_medical_scribe_stream::StartMedicalScribeStreamError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "BadRequestException" => crate::operation::start_medical_scribe_stream::StartMedicalScribeStreamError::BadRequestException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::BadRequestExceptionBuilder::default();
                output = crate::protocol_serde::shape_bad_request_exception::de_bad_request_exception_json_err(_response_body, output)
                    .map_err(crate::operation::start_medical_scribe_stream::StartMedicalScribeStreamError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "ConflictException" => crate::operation::start_medical_scribe_stream::StartMedicalScribeStreamError::ConflictException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::ConflictExceptionBuilder::default();
                output = crate::protocol_serde::shape_conflict_exception::de_conflict_exception_json_err(_response_body, output)
                    .map_err(crate::operation::start_medical_scribe_stream::StartMedicalScribeStreamError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InternalFailureException" => crate::operation::start_medical_scribe_stream::StartMedicalScribeStreamError::InternalFailureException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InternalFailureExceptionBuilder::default();
                output = crate::protocol_serde::shape_internal_failure_exception::de_internal_failure_exception_json_err(_response_body, output)
                    .map_err(crate::operation::start_medical_scribe_stream::StartMedicalScribeStreamError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "LimitExceededException" => crate::operation::start_medical_scribe_stream::StartMedicalScribeStreamError::LimitExceededException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::LimitExceededExceptionBuilder::default();
                output = crate::protocol_serde::shape_limit_exceeded_exception::de_limit_exceeded_exception_json_err(_response_body, output)
                    .map_err(crate::operation::start_medical_scribe_stream::StartMedicalScribeStreamError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "ServiceUnavailableException" => crate::operation::start_medical_scribe_stream::StartMedicalScribeStreamError::ServiceUnavailableException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::ServiceUnavailableExceptionBuilder::default();
                output =
                    crate::protocol_serde::shape_service_unavailable_exception::de_service_unavailable_exception_json_err(_response_body, output)
                        .map_err(crate::operation::start_medical_scribe_stream::StartMedicalScribeStreamError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::operation::start_medical_scribe_stream::StartMedicalScribeStreamError::generic(generic),
    })
}

pub fn ser_start_medical_scribe_stream_headers(
    input: &crate::operation::start_medical_scribe_stream::StartMedicalScribeStreamInput,
    mut builder: ::http::request::Builder,
) -> std::result::Result<::http::request::Builder, ::aws_smithy_types::error::operation::BuildError> {
    if let ::std::option::Option::Some(inner_1) = &input.session_id {
        let formatted_2 = inner_1.as_str();
        let header_value = formatted_2;
        let header_value: ::http::HeaderValue = header_value.parse().map_err(|err| {
            ::aws_smithy_types::error::operation::BuildError::invalid_field(
                "session_id",
                format!("`{}` cannot be used as a header value: {}", &header_value, err),
            )
        })?;
        builder = builder.header("x-amzn-transcribe-session-id", header_value);
    }
    if let ::std::option::Option::Some(inner_3) = &input.language_code {
        let formatted_4 = inner_3.as_str();
        let header_value = formatted_4;
        let header_value: ::http::HeaderValue = header_value.parse().map_err(|err| {
            ::aws_smithy_types::error::operation::BuildError::invalid_field(
                "language_code",
                format!("`{}` cannot be used as a header value: {}", &header_value, err),
            )
        })?;
        builder = builder.header("x-amzn-transcribe-language-code", header_value);
    }
    if let ::std::option::Option::Some(inner_5) = &input.media_sample_rate_hertz {
        let mut encoder = ::aws_smithy_types::primitive::Encoder::from(*inner_5);
        let formatted_6 = encoder.encode();
        let header_value = formatted_6;
        let header_value: ::http::HeaderValue = header_value.parse().map_err(|err| {
            ::aws_smithy_types::error::operation::BuildError::invalid_field(
                "media_sample_rate_hertz",
                format!("`{}` cannot be used as a header value: {}", &header_value, err),
            )
        })?;
        builder = builder.header("x-amzn-transcribe-sample-rate", header_value);
    }
    if let ::std::option::Option::Some(inner_7) = &input.media_encoding {
        let formatted_8 = inner_7.as_str();
        let header_value = formatted_8;
        let header_value: ::http::HeaderValue = header_value.parse().map_err(|err| {
            ::aws_smithy_types::error::operation::BuildError::invalid_field(
                "media_encoding",
                format!("`{}` cannot be used as a header value: {}", &header_value, err),
            )
        })?;
        builder = builder.header("x-amzn-transcribe-media-encoding", header_value);
    }
    Ok(builder)
}
