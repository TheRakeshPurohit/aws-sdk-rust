// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The language code that represents the language identified in your audio, including the associated confidence score.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CallAnalyticsLanguageWithScore {
    /// <p>The language code of the identified language.</p>
    pub language_code: ::std::option::Option<crate::types::CallAnalyticsLanguageCode>,
    /// <p>The confidence score associated with the identified language code. Confidence scores are values between zero and one; larger values indicate a higher confidence in the identified language.</p>
    pub score: f64,
}
impl CallAnalyticsLanguageWithScore {
    /// <p>The language code of the identified language.</p>
    pub fn language_code(&self) -> ::std::option::Option<&crate::types::CallAnalyticsLanguageCode> {
        self.language_code.as_ref()
    }
    /// <p>The confidence score associated with the identified language code. Confidence scores are values between zero and one; larger values indicate a higher confidence in the identified language.</p>
    pub fn score(&self) -> f64 {
        self.score
    }
}
impl CallAnalyticsLanguageWithScore {
    /// Creates a new builder-style object to manufacture [`CallAnalyticsLanguageWithScore`](crate::types::CallAnalyticsLanguageWithScore).
    pub fn builder() -> crate::types::builders::CallAnalyticsLanguageWithScoreBuilder {
        crate::types::builders::CallAnalyticsLanguageWithScoreBuilder::default()
    }
}

/// A builder for [`CallAnalyticsLanguageWithScore`](crate::types::CallAnalyticsLanguageWithScore).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CallAnalyticsLanguageWithScoreBuilder {
    pub(crate) language_code: ::std::option::Option<crate::types::CallAnalyticsLanguageCode>,
    pub(crate) score: ::std::option::Option<f64>,
}
impl CallAnalyticsLanguageWithScoreBuilder {
    /// <p>The language code of the identified language.</p>
    pub fn language_code(mut self, input: crate::types::CallAnalyticsLanguageCode) -> Self {
        self.language_code = ::std::option::Option::Some(input);
        self
    }
    /// <p>The language code of the identified language.</p>
    pub fn set_language_code(mut self, input: ::std::option::Option<crate::types::CallAnalyticsLanguageCode>) -> Self {
        self.language_code = input;
        self
    }
    /// <p>The language code of the identified language.</p>
    pub fn get_language_code(&self) -> &::std::option::Option<crate::types::CallAnalyticsLanguageCode> {
        &self.language_code
    }
    /// <p>The confidence score associated with the identified language code. Confidence scores are values between zero and one; larger values indicate a higher confidence in the identified language.</p>
    pub fn score(mut self, input: f64) -> Self {
        self.score = ::std::option::Option::Some(input);
        self
    }
    /// <p>The confidence score associated with the identified language code. Confidence scores are values between zero and one; larger values indicate a higher confidence in the identified language.</p>
    pub fn set_score(mut self, input: ::std::option::Option<f64>) -> Self {
        self.score = input;
        self
    }
    /// <p>The confidence score associated with the identified language code. Confidence scores are values between zero and one; larger values indicate a higher confidence in the identified language.</p>
    pub fn get_score(&self) -> &::std::option::Option<f64> {
        &self.score
    }
    /// Consumes the builder and constructs a [`CallAnalyticsLanguageWithScore`](crate::types::CallAnalyticsLanguageWithScore).
    pub fn build(self) -> crate::types::CallAnalyticsLanguageWithScore {
        crate::types::CallAnalyticsLanguageWithScore {
            language_code: self.language_code,
            score: self.score.unwrap_or_default(),
        }
    }
}
