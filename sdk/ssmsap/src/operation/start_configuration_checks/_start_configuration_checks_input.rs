// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StartConfigurationChecksInput {
    /// <p>The ID of the application.</p>
    pub application_id: ::std::option::Option<::std::string::String>,
    /// <p>The list of configuration checks to perform.</p>
    pub configuration_check_ids: ::std::option::Option<::std::vec::Vec<crate::types::ConfigurationCheckType>>,
}
impl StartConfigurationChecksInput {
    /// <p>The ID of the application.</p>
    pub fn application_id(&self) -> ::std::option::Option<&str> {
        self.application_id.as_deref()
    }
    /// <p>The list of configuration checks to perform.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.configuration_check_ids.is_none()`.
    pub fn configuration_check_ids(&self) -> &[crate::types::ConfigurationCheckType] {
        self.configuration_check_ids.as_deref().unwrap_or_default()
    }
}
impl StartConfigurationChecksInput {
    /// Creates a new builder-style object to manufacture [`StartConfigurationChecksInput`](crate::operation::start_configuration_checks::StartConfigurationChecksInput).
    pub fn builder() -> crate::operation::start_configuration_checks::builders::StartConfigurationChecksInputBuilder {
        crate::operation::start_configuration_checks::builders::StartConfigurationChecksInputBuilder::default()
    }
}

/// A builder for [`StartConfigurationChecksInput`](crate::operation::start_configuration_checks::StartConfigurationChecksInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct StartConfigurationChecksInputBuilder {
    pub(crate) application_id: ::std::option::Option<::std::string::String>,
    pub(crate) configuration_check_ids: ::std::option::Option<::std::vec::Vec<crate::types::ConfigurationCheckType>>,
}
impl StartConfigurationChecksInputBuilder {
    /// <p>The ID of the application.</p>
    /// This field is required.
    pub fn application_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.application_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the application.</p>
    pub fn set_application_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.application_id = input;
        self
    }
    /// <p>The ID of the application.</p>
    pub fn get_application_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.application_id
    }
    /// Appends an item to `configuration_check_ids`.
    ///
    /// To override the contents of this collection use [`set_configuration_check_ids`](Self::set_configuration_check_ids).
    ///
    /// <p>The list of configuration checks to perform.</p>
    pub fn configuration_check_ids(mut self, input: crate::types::ConfigurationCheckType) -> Self {
        let mut v = self.configuration_check_ids.unwrap_or_default();
        v.push(input);
        self.configuration_check_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of configuration checks to perform.</p>
    pub fn set_configuration_check_ids(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ConfigurationCheckType>>) -> Self {
        self.configuration_check_ids = input;
        self
    }
    /// <p>The list of configuration checks to perform.</p>
    pub fn get_configuration_check_ids(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ConfigurationCheckType>> {
        &self.configuration_check_ids
    }
    /// Consumes the builder and constructs a [`StartConfigurationChecksInput`](crate::operation::start_configuration_checks::StartConfigurationChecksInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::start_configuration_checks::StartConfigurationChecksInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::start_configuration_checks::StartConfigurationChecksInput {
            application_id: self.application_id,
            configuration_check_ids: self.configuration_check_ids,
        })
    }
}
