// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListConfigurationCheckOperationsInput {
    /// <p>The ID of the application.</p>
    pub application_id: ::std::option::Option<::std::string::String>,
    /// <p>The mode for listing configuration check operations. Defaults to "LATEST_PER_CHECK".</p>
    /// <ul>
    /// <li>
    /// <p>LATEST_PER_CHECK - Will list the latest configuration check operation per check type.</p></li>
    /// <li>
    /// <p>ALL_OPERATIONS - Will list all configuration check operations performed on the application.</p></li>
    /// </ul>
    pub list_mode: ::std::option::Option<crate::types::ConfigurationCheckOperationListingMode>,
    /// <p>The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>The token for the next page of results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The filters of an operation.</p>
    pub filters: ::std::option::Option<::std::vec::Vec<crate::types::Filter>>,
}
impl ListConfigurationCheckOperationsInput {
    /// <p>The ID of the application.</p>
    pub fn application_id(&self) -> ::std::option::Option<&str> {
        self.application_id.as_deref()
    }
    /// <p>The mode for listing configuration check operations. Defaults to "LATEST_PER_CHECK".</p>
    /// <ul>
    /// <li>
    /// <p>LATEST_PER_CHECK - Will list the latest configuration check operation per check type.</p></li>
    /// <li>
    /// <p>ALL_OPERATIONS - Will list all configuration check operations performed on the application.</p></li>
    /// </ul>
    pub fn list_mode(&self) -> ::std::option::Option<&crate::types::ConfigurationCheckOperationListingMode> {
        self.list_mode.as_ref()
    }
    /// <p>The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>The token for the next page of results.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The filters of an operation.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.filters.is_none()`.
    pub fn filters(&self) -> &[crate::types::Filter] {
        self.filters.as_deref().unwrap_or_default()
    }
}
impl ListConfigurationCheckOperationsInput {
    /// Creates a new builder-style object to manufacture [`ListConfigurationCheckOperationsInput`](crate::operation::list_configuration_check_operations::ListConfigurationCheckOperationsInput).
    pub fn builder() -> crate::operation::list_configuration_check_operations::builders::ListConfigurationCheckOperationsInputBuilder {
        crate::operation::list_configuration_check_operations::builders::ListConfigurationCheckOperationsInputBuilder::default()
    }
}

/// A builder for [`ListConfigurationCheckOperationsInput`](crate::operation::list_configuration_check_operations::ListConfigurationCheckOperationsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListConfigurationCheckOperationsInputBuilder {
    pub(crate) application_id: ::std::option::Option<::std::string::String>,
    pub(crate) list_mode: ::std::option::Option<crate::types::ConfigurationCheckOperationListingMode>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) filters: ::std::option::Option<::std::vec::Vec<crate::types::Filter>>,
}
impl ListConfigurationCheckOperationsInputBuilder {
    /// <p>The ID of the application.</p>
    /// This field is required.
    pub fn application_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.application_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the application.</p>
    pub fn set_application_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.application_id = input;
        self
    }
    /// <p>The ID of the application.</p>
    pub fn get_application_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.application_id
    }
    /// <p>The mode for listing configuration check operations. Defaults to "LATEST_PER_CHECK".</p>
    /// <ul>
    /// <li>
    /// <p>LATEST_PER_CHECK - Will list the latest configuration check operation per check type.</p></li>
    /// <li>
    /// <p>ALL_OPERATIONS - Will list all configuration check operations performed on the application.</p></li>
    /// </ul>
    pub fn list_mode(mut self, input: crate::types::ConfigurationCheckOperationListingMode) -> Self {
        self.list_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>The mode for listing configuration check operations. Defaults to "LATEST_PER_CHECK".</p>
    /// <ul>
    /// <li>
    /// <p>LATEST_PER_CHECK - Will list the latest configuration check operation per check type.</p></li>
    /// <li>
    /// <p>ALL_OPERATIONS - Will list all configuration check operations performed on the application.</p></li>
    /// </ul>
    pub fn set_list_mode(mut self, input: ::std::option::Option<crate::types::ConfigurationCheckOperationListingMode>) -> Self {
        self.list_mode = input;
        self
    }
    /// <p>The mode for listing configuration check operations. Defaults to "LATEST_PER_CHECK".</p>
    /// <ul>
    /// <li>
    /// <p>LATEST_PER_CHECK - Will list the latest configuration check operation per check type.</p></li>
    /// <li>
    /// <p>ALL_OPERATIONS - Will list all configuration check operations performed on the application.</p></li>
    /// </ul>
    pub fn get_list_mode(&self) -> &::std::option::Option<crate::types::ConfigurationCheckOperationListingMode> {
        &self.list_mode
    }
    /// <p>The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>The token for the next page of results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The token for the next page of results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The token for the next page of results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Appends an item to `filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p>The filters of an operation.</p>
    pub fn filters(mut self, input: crate::types::Filter) -> Self {
        let mut v = self.filters.unwrap_or_default();
        v.push(input);
        self.filters = ::std::option::Option::Some(v);
        self
    }
    /// <p>The filters of an operation.</p>
    pub fn set_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Filter>>) -> Self {
        self.filters = input;
        self
    }
    /// <p>The filters of an operation.</p>
    pub fn get_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Filter>> {
        &self.filters
    }
    /// Consumes the builder and constructs a [`ListConfigurationCheckOperationsInput`](crate::operation::list_configuration_check_operations::ListConfigurationCheckOperationsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_configuration_check_operations::ListConfigurationCheckOperationsInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::list_configuration_check_operations::ListConfigurationCheckOperationsInput {
                application_id: self.application_id,
                list_mode: self.list_mode,
                max_results: self.max_results,
                next_token: self.next_token,
                filters: self.filters,
            },
        )
    }
}
