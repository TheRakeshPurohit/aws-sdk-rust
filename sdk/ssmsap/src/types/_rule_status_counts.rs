// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A summary of rule results, providing counts for each status type.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RuleStatusCounts {
    /// <p>The number of rules that failed.</p>
    pub failed: ::std::option::Option<i32>,
    /// <p>The number of rules that returned warnings.</p>
    pub warning: ::std::option::Option<i32>,
    /// <p>The number of rules that returned informational results.</p>
    pub info: ::std::option::Option<i32>,
    /// <p>The number of rules that passed.</p>
    pub passed: ::std::option::Option<i32>,
    /// <p>The number of rules with unknown status.</p>
    pub unknown: ::std::option::Option<i32>,
}
impl RuleStatusCounts {
    /// <p>The number of rules that failed.</p>
    pub fn failed(&self) -> ::std::option::Option<i32> {
        self.failed
    }
    /// <p>The number of rules that returned warnings.</p>
    pub fn warning(&self) -> ::std::option::Option<i32> {
        self.warning
    }
    /// <p>The number of rules that returned informational results.</p>
    pub fn info(&self) -> ::std::option::Option<i32> {
        self.info
    }
    /// <p>The number of rules that passed.</p>
    pub fn passed(&self) -> ::std::option::Option<i32> {
        self.passed
    }
    /// <p>The number of rules with unknown status.</p>
    pub fn unknown(&self) -> ::std::option::Option<i32> {
        self.unknown
    }
}
impl RuleStatusCounts {
    /// Creates a new builder-style object to manufacture [`RuleStatusCounts`](crate::types::RuleStatusCounts).
    pub fn builder() -> crate::types::builders::RuleStatusCountsBuilder {
        crate::types::builders::RuleStatusCountsBuilder::default()
    }
}

/// A builder for [`RuleStatusCounts`](crate::types::RuleStatusCounts).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RuleStatusCountsBuilder {
    pub(crate) failed: ::std::option::Option<i32>,
    pub(crate) warning: ::std::option::Option<i32>,
    pub(crate) info: ::std::option::Option<i32>,
    pub(crate) passed: ::std::option::Option<i32>,
    pub(crate) unknown: ::std::option::Option<i32>,
}
impl RuleStatusCountsBuilder {
    /// <p>The number of rules that failed.</p>
    pub fn failed(mut self, input: i32) -> Self {
        self.failed = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of rules that failed.</p>
    pub fn set_failed(mut self, input: ::std::option::Option<i32>) -> Self {
        self.failed = input;
        self
    }
    /// <p>The number of rules that failed.</p>
    pub fn get_failed(&self) -> &::std::option::Option<i32> {
        &self.failed
    }
    /// <p>The number of rules that returned warnings.</p>
    pub fn warning(mut self, input: i32) -> Self {
        self.warning = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of rules that returned warnings.</p>
    pub fn set_warning(mut self, input: ::std::option::Option<i32>) -> Self {
        self.warning = input;
        self
    }
    /// <p>The number of rules that returned warnings.</p>
    pub fn get_warning(&self) -> &::std::option::Option<i32> {
        &self.warning
    }
    /// <p>The number of rules that returned informational results.</p>
    pub fn info(mut self, input: i32) -> Self {
        self.info = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of rules that returned informational results.</p>
    pub fn set_info(mut self, input: ::std::option::Option<i32>) -> Self {
        self.info = input;
        self
    }
    /// <p>The number of rules that returned informational results.</p>
    pub fn get_info(&self) -> &::std::option::Option<i32> {
        &self.info
    }
    /// <p>The number of rules that passed.</p>
    pub fn passed(mut self, input: i32) -> Self {
        self.passed = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of rules that passed.</p>
    pub fn set_passed(mut self, input: ::std::option::Option<i32>) -> Self {
        self.passed = input;
        self
    }
    /// <p>The number of rules that passed.</p>
    pub fn get_passed(&self) -> &::std::option::Option<i32> {
        &self.passed
    }
    /// <p>The number of rules with unknown status.</p>
    pub fn unknown(mut self, input: i32) -> Self {
        self.unknown = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of rules with unknown status.</p>
    pub fn set_unknown(mut self, input: ::std::option::Option<i32>) -> Self {
        self.unknown = input;
        self
    }
    /// <p>The number of rules with unknown status.</p>
    pub fn get_unknown(&self) -> &::std::option::Option<i32> {
        &self.unknown
    }
    /// Consumes the builder and constructs a [`RuleStatusCounts`](crate::types::RuleStatusCounts).
    pub fn build(self) -> crate::types::RuleStatusCounts {
        crate::types::RuleStatusCounts {
            failed: self.failed,
            warning: self.warning,
            info: self.info,
            passed: self.passed,
            unknown: self.unknown,
        }
    }
}
