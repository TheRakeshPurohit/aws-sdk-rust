// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the result of a single rule within a configuration check.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RuleResult {
    /// <p>The unique identifier of the rule result.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>A description of what the rule validates.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The status of the rule result.</p>
    pub status: ::std::option::Option<crate::types::RuleResultStatus>,
    /// <p>A message providing details about the rule result.</p>
    pub message: ::std::option::Option<::std::string::String>,
    /// <p>Additional metadata associated with the rule result.</p>
    pub metadata: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl RuleResult {
    /// <p>The unique identifier of the rule result.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>A description of what the rule validates.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The status of the rule result.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::RuleResultStatus> {
        self.status.as_ref()
    }
    /// <p>A message providing details about the rule result.</p>
    pub fn message(&self) -> ::std::option::Option<&str> {
        self.message.as_deref()
    }
    /// <p>Additional metadata associated with the rule result.</p>
    pub fn metadata(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.metadata.as_ref()
    }
}
impl RuleResult {
    /// Creates a new builder-style object to manufacture [`RuleResult`](crate::types::RuleResult).
    pub fn builder() -> crate::types::builders::RuleResultBuilder {
        crate::types::builders::RuleResultBuilder::default()
    }
}

/// A builder for [`RuleResult`](crate::types::RuleResult).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RuleResultBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::RuleResultStatus>,
    pub(crate) message: ::std::option::Option<::std::string::String>,
    pub(crate) metadata: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl RuleResultBuilder {
    /// <p>The unique identifier of the rule result.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the rule result.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The unique identifier of the rule result.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>A description of what the rule validates.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of what the rule validates.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description of what the rule validates.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The status of the rule result.</p>
    pub fn status(mut self, input: crate::types::RuleResultStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the rule result.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::RuleResultStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the rule result.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::RuleResultStatus> {
        &self.status
    }
    /// <p>A message providing details about the rule result.</p>
    pub fn message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A message providing details about the rule result.</p>
    pub fn set_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// <p>A message providing details about the rule result.</p>
    pub fn get_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.message
    }
    /// Adds a key-value pair to `metadata`.
    ///
    /// To override the contents of this collection use [`set_metadata`](Self::set_metadata).
    ///
    /// <p>Additional metadata associated with the rule result.</p>
    pub fn metadata(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.metadata.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.metadata = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Additional metadata associated with the rule result.</p>
    pub fn set_metadata(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.metadata = input;
        self
    }
    /// <p>Additional metadata associated with the rule result.</p>
    pub fn get_metadata(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.metadata
    }
    /// Consumes the builder and constructs a [`RuleResult`](crate::types::RuleResult).
    pub fn build(self) -> crate::types::RuleResult {
        crate::types::RuleResult {
            id: self.id,
            description: self.description,
            status: self.status,
            message: self.message,
            metadata: self.metadata,
        }
    }
}
