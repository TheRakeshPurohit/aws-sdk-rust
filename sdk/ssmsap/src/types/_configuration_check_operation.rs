// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a configuration check operation that has been executed against an application.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ConfigurationCheckOperation {
    /// <p>The unique identifier of the configuration check operation.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the application against which the configuration check was performed.</p>
    pub application_id: ::std::option::Option<::std::string::String>,
    /// <p>The current status of the configuration check operation.</p>
    pub status: ::std::option::Option<crate::types::OperationStatus>,
    /// <p>A message providing additional details about the status of the configuration check operation.</p>
    pub status_message: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of the configuration check that was performed.</p>
    pub configuration_check_id: ::std::option::Option<crate::types::ConfigurationCheckType>,
    /// <p>The name of the configuration check that was performed.</p>
    pub configuration_check_name: ::std::option::Option<::std::string::String>,
    /// <p>A description of the configuration check that was performed.</p>
    pub configuration_check_description: ::std::option::Option<::std::string::String>,
    /// <p>The time at which the configuration check operation started.</p>
    pub start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The time at which the configuration check operation completed.</p>
    pub end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>A summary of all the rule results, showing counts for each status type.</p>
    pub rule_status_counts: ::std::option::Option<crate::types::RuleStatusCounts>,
}
impl ConfigurationCheckOperation {
    /// <p>The unique identifier of the configuration check operation.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The ID of the application against which the configuration check was performed.</p>
    pub fn application_id(&self) -> ::std::option::Option<&str> {
        self.application_id.as_deref()
    }
    /// <p>The current status of the configuration check operation.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::OperationStatus> {
        self.status.as_ref()
    }
    /// <p>A message providing additional details about the status of the configuration check operation.</p>
    pub fn status_message(&self) -> ::std::option::Option<&str> {
        self.status_message.as_deref()
    }
    /// <p>The unique identifier of the configuration check that was performed.</p>
    pub fn configuration_check_id(&self) -> ::std::option::Option<&crate::types::ConfigurationCheckType> {
        self.configuration_check_id.as_ref()
    }
    /// <p>The name of the configuration check that was performed.</p>
    pub fn configuration_check_name(&self) -> ::std::option::Option<&str> {
        self.configuration_check_name.as_deref()
    }
    /// <p>A description of the configuration check that was performed.</p>
    pub fn configuration_check_description(&self) -> ::std::option::Option<&str> {
        self.configuration_check_description.as_deref()
    }
    /// <p>The time at which the configuration check operation started.</p>
    pub fn start_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p>The time at which the configuration check operation completed.</p>
    pub fn end_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.end_time.as_ref()
    }
    /// <p>A summary of all the rule results, showing counts for each status type.</p>
    pub fn rule_status_counts(&self) -> ::std::option::Option<&crate::types::RuleStatusCounts> {
        self.rule_status_counts.as_ref()
    }
}
impl ConfigurationCheckOperation {
    /// Creates a new builder-style object to manufacture [`ConfigurationCheckOperation`](crate::types::ConfigurationCheckOperation).
    pub fn builder() -> crate::types::builders::ConfigurationCheckOperationBuilder {
        crate::types::builders::ConfigurationCheckOperationBuilder::default()
    }
}

/// A builder for [`ConfigurationCheckOperation`](crate::types::ConfigurationCheckOperation).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ConfigurationCheckOperationBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) application_id: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::OperationStatus>,
    pub(crate) status_message: ::std::option::Option<::std::string::String>,
    pub(crate) configuration_check_id: ::std::option::Option<crate::types::ConfigurationCheckType>,
    pub(crate) configuration_check_name: ::std::option::Option<::std::string::String>,
    pub(crate) configuration_check_description: ::std::option::Option<::std::string::String>,
    pub(crate) start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) rule_status_counts: ::std::option::Option<crate::types::RuleStatusCounts>,
}
impl ConfigurationCheckOperationBuilder {
    /// <p>The unique identifier of the configuration check operation.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the configuration check operation.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The unique identifier of the configuration check operation.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The ID of the application against which the configuration check was performed.</p>
    pub fn application_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.application_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the application against which the configuration check was performed.</p>
    pub fn set_application_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.application_id = input;
        self
    }
    /// <p>The ID of the application against which the configuration check was performed.</p>
    pub fn get_application_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.application_id
    }
    /// <p>The current status of the configuration check operation.</p>
    pub fn status(mut self, input: crate::types::OperationStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the configuration check operation.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::OperationStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status of the configuration check operation.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::OperationStatus> {
        &self.status
    }
    /// <p>A message providing additional details about the status of the configuration check operation.</p>
    pub fn status_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A message providing additional details about the status of the configuration check operation.</p>
    pub fn set_status_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_message = input;
        self
    }
    /// <p>A message providing additional details about the status of the configuration check operation.</p>
    pub fn get_status_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_message
    }
    /// <p>The unique identifier of the configuration check that was performed.</p>
    pub fn configuration_check_id(mut self, input: crate::types::ConfigurationCheckType) -> Self {
        self.configuration_check_id = ::std::option::Option::Some(input);
        self
    }
    /// <p>The unique identifier of the configuration check that was performed.</p>
    pub fn set_configuration_check_id(mut self, input: ::std::option::Option<crate::types::ConfigurationCheckType>) -> Self {
        self.configuration_check_id = input;
        self
    }
    /// <p>The unique identifier of the configuration check that was performed.</p>
    pub fn get_configuration_check_id(&self) -> &::std::option::Option<crate::types::ConfigurationCheckType> {
        &self.configuration_check_id
    }
    /// <p>The name of the configuration check that was performed.</p>
    pub fn configuration_check_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.configuration_check_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the configuration check that was performed.</p>
    pub fn set_configuration_check_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.configuration_check_name = input;
        self
    }
    /// <p>The name of the configuration check that was performed.</p>
    pub fn get_configuration_check_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.configuration_check_name
    }
    /// <p>A description of the configuration check that was performed.</p>
    pub fn configuration_check_description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.configuration_check_description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of the configuration check that was performed.</p>
    pub fn set_configuration_check_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.configuration_check_description = input;
        self
    }
    /// <p>A description of the configuration check that was performed.</p>
    pub fn get_configuration_check_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.configuration_check_description
    }
    /// <p>The time at which the configuration check operation started.</p>
    pub fn start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time at which the configuration check operation started.</p>
    pub fn set_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_time = input;
        self
    }
    /// <p>The time at which the configuration check operation started.</p>
    pub fn get_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_time
    }
    /// <p>The time at which the configuration check operation completed.</p>
    pub fn end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.end_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time at which the configuration check operation completed.</p>
    pub fn set_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.end_time = input;
        self
    }
    /// <p>The time at which the configuration check operation completed.</p>
    pub fn get_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.end_time
    }
    /// <p>A summary of all the rule results, showing counts for each status type.</p>
    pub fn rule_status_counts(mut self, input: crate::types::RuleStatusCounts) -> Self {
        self.rule_status_counts = ::std::option::Option::Some(input);
        self
    }
    /// <p>A summary of all the rule results, showing counts for each status type.</p>
    pub fn set_rule_status_counts(mut self, input: ::std::option::Option<crate::types::RuleStatusCounts>) -> Self {
        self.rule_status_counts = input;
        self
    }
    /// <p>A summary of all the rule results, showing counts for each status type.</p>
    pub fn get_rule_status_counts(&self) -> &::std::option::Option<crate::types::RuleStatusCounts> {
        &self.rule_status_counts
    }
    /// Consumes the builder and constructs a [`ConfigurationCheckOperation`](crate::types::ConfigurationCheckOperation).
    pub fn build(self) -> crate::types::ConfigurationCheckOperation {
        crate::types::ConfigurationCheckOperation {
            id: self.id,
            application_id: self.application_id,
            status: self.status,
            status_message: self.status_message,
            configuration_check_id: self.configuration_check_id,
            configuration_check_name: self.configuration_check_name,
            configuration_check_description: self.configuration_check_description,
            start_time: self.start_time,
            end_time: self.end_time,
            rule_status_counts: self.rule_status_counts,
        }
    }
}
