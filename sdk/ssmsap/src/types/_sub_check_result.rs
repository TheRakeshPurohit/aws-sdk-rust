// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the result of a sub-check within a configuration check operation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SubCheckResult {
    /// <p>The unique identifier of the sub-check result.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the sub-check.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>A description of what the sub-check validates.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>A list of references or documentation links related to the sub-check.</p>
    pub references: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl SubCheckResult {
    /// <p>The unique identifier of the sub-check result.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The name of the sub-check.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A description of what the sub-check validates.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>A list of references or documentation links related to the sub-check.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.references.is_none()`.
    pub fn references(&self) -> &[::std::string::String] {
        self.references.as_deref().unwrap_or_default()
    }
}
impl SubCheckResult {
    /// Creates a new builder-style object to manufacture [`SubCheckResult`](crate::types::SubCheckResult).
    pub fn builder() -> crate::types::builders::SubCheckResultBuilder {
        crate::types::builders::SubCheckResultBuilder::default()
    }
}

/// A builder for [`SubCheckResult`](crate::types::SubCheckResult).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SubCheckResultBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) references: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl SubCheckResultBuilder {
    /// <p>The unique identifier of the sub-check result.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the sub-check result.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The unique identifier of the sub-check result.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The name of the sub-check.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the sub-check.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the sub-check.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>A description of what the sub-check validates.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of what the sub-check validates.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description of what the sub-check validates.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Appends an item to `references`.
    ///
    /// To override the contents of this collection use [`set_references`](Self::set_references).
    ///
    /// <p>A list of references or documentation links related to the sub-check.</p>
    pub fn references(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.references.unwrap_or_default();
        v.push(input.into());
        self.references = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of references or documentation links related to the sub-check.</p>
    pub fn set_references(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.references = input;
        self
    }
    /// <p>A list of references or documentation links related to the sub-check.</p>
    pub fn get_references(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.references
    }
    /// Consumes the builder and constructs a [`SubCheckResult`](crate::types::SubCheckResult).
    pub fn build(self) -> crate::types::SubCheckResult {
        crate::types::SubCheckResult {
            id: self.id,
            name: self.name,
            description: self.description,
            references: self.references,
        }
    }
}
