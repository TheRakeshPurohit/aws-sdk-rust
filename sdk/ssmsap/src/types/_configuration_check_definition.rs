// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a configuration check definition supported by AWS Systems Manager for SAP.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ConfigurationCheckDefinition {
    /// <p>The unique identifier of the configuration check.</p>
    pub id: ::std::option::Option<crate::types::ConfigurationCheckType>,
    /// <p>The name of the configuration check.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>A description of what the configuration check validates.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The list of SSMSAP application types that this configuration check can be evaluated against.</p>
    pub applicable_application_types: ::std::option::Option<::std::vec::Vec<crate::types::ApplicationType>>,
}
impl ConfigurationCheckDefinition {
    /// <p>The unique identifier of the configuration check.</p>
    pub fn id(&self) -> ::std::option::Option<&crate::types::ConfigurationCheckType> {
        self.id.as_ref()
    }
    /// <p>The name of the configuration check.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A description of what the configuration check validates.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The list of SSMSAP application types that this configuration check can be evaluated against.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.applicable_application_types.is_none()`.
    pub fn applicable_application_types(&self) -> &[crate::types::ApplicationType] {
        self.applicable_application_types.as_deref().unwrap_or_default()
    }
}
impl ConfigurationCheckDefinition {
    /// Creates a new builder-style object to manufacture [`ConfigurationCheckDefinition`](crate::types::ConfigurationCheckDefinition).
    pub fn builder() -> crate::types::builders::ConfigurationCheckDefinitionBuilder {
        crate::types::builders::ConfigurationCheckDefinitionBuilder::default()
    }
}

/// A builder for [`ConfigurationCheckDefinition`](crate::types::ConfigurationCheckDefinition).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ConfigurationCheckDefinitionBuilder {
    pub(crate) id: ::std::option::Option<crate::types::ConfigurationCheckType>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) applicable_application_types: ::std::option::Option<::std::vec::Vec<crate::types::ApplicationType>>,
}
impl ConfigurationCheckDefinitionBuilder {
    /// <p>The unique identifier of the configuration check.</p>
    pub fn id(mut self, input: crate::types::ConfigurationCheckType) -> Self {
        self.id = ::std::option::Option::Some(input);
        self
    }
    /// <p>The unique identifier of the configuration check.</p>
    pub fn set_id(mut self, input: ::std::option::Option<crate::types::ConfigurationCheckType>) -> Self {
        self.id = input;
        self
    }
    /// <p>The unique identifier of the configuration check.</p>
    pub fn get_id(&self) -> &::std::option::Option<crate::types::ConfigurationCheckType> {
        &self.id
    }
    /// <p>The name of the configuration check.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the configuration check.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the configuration check.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>A description of what the configuration check validates.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of what the configuration check validates.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description of what the configuration check validates.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Appends an item to `applicable_application_types`.
    ///
    /// To override the contents of this collection use [`set_applicable_application_types`](Self::set_applicable_application_types).
    ///
    /// <p>The list of SSMSAP application types that this configuration check can be evaluated against.</p>
    pub fn applicable_application_types(mut self, input: crate::types::ApplicationType) -> Self {
        let mut v = self.applicable_application_types.unwrap_or_default();
        v.push(input);
        self.applicable_application_types = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of SSMSAP application types that this configuration check can be evaluated against.</p>
    pub fn set_applicable_application_types(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ApplicationType>>) -> Self {
        self.applicable_application_types = input;
        self
    }
    /// <p>The list of SSMSAP application types that this configuration check can be evaluated against.</p>
    pub fn get_applicable_application_types(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ApplicationType>> {
        &self.applicable_application_types
    }
    /// Consumes the builder and constructs a [`ConfigurationCheckDefinition`](crate::types::ConfigurationCheckDefinition).
    pub fn build(self) -> crate::types::ConfigurationCheckDefinition {
        crate::types::ConfigurationCheckDefinition {
            id: self.id,
            name: self.name,
            description: self.description,
            applicable_application_types: self.applicable_application_types,
        }
    }
}
