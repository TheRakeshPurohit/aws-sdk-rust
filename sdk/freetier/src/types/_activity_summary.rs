// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The summary of activities.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ActivitySummary {
    /// <p>A unique identifier that identifies the activity.</p>
    pub activity_id: ::std::string::String,
    /// <p>The title of the activity.</p>
    pub title: ::std::string::String,
    /// <p>The reward for the activity.</p>
    pub reward: ::std::option::Option<crate::types::ActivityReward>,
    /// <p>The current status of the activity.</p>
    pub status: crate::types::ActivityStatus,
}
impl ActivitySummary {
    /// <p>A unique identifier that identifies the activity.</p>
    pub fn activity_id(&self) -> &str {
        use std::ops::Deref;
        self.activity_id.deref()
    }
    /// <p>The title of the activity.</p>
    pub fn title(&self) -> &str {
        use std::ops::Deref;
        self.title.deref()
    }
    /// <p>The reward for the activity.</p>
    pub fn reward(&self) -> ::std::option::Option<&crate::types::ActivityReward> {
        self.reward.as_ref()
    }
    /// <p>The current status of the activity.</p>
    pub fn status(&self) -> &crate::types::ActivityStatus {
        &self.status
    }
}
impl ActivitySummary {
    /// Creates a new builder-style object to manufacture [`ActivitySummary`](crate::types::ActivitySummary).
    pub fn builder() -> crate::types::builders::ActivitySummaryBuilder {
        crate::types::builders::ActivitySummaryBuilder::default()
    }
}

/// A builder for [`ActivitySummary`](crate::types::ActivitySummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ActivitySummaryBuilder {
    pub(crate) activity_id: ::std::option::Option<::std::string::String>,
    pub(crate) title: ::std::option::Option<::std::string::String>,
    pub(crate) reward: ::std::option::Option<crate::types::ActivityReward>,
    pub(crate) status: ::std::option::Option<crate::types::ActivityStatus>,
}
impl ActivitySummaryBuilder {
    /// <p>A unique identifier that identifies the activity.</p>
    /// This field is required.
    pub fn activity_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.activity_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier that identifies the activity.</p>
    pub fn set_activity_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.activity_id = input;
        self
    }
    /// <p>A unique identifier that identifies the activity.</p>
    pub fn get_activity_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.activity_id
    }
    /// <p>The title of the activity.</p>
    /// This field is required.
    pub fn title(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.title = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The title of the activity.</p>
    pub fn set_title(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.title = input;
        self
    }
    /// <p>The title of the activity.</p>
    pub fn get_title(&self) -> &::std::option::Option<::std::string::String> {
        &self.title
    }
    /// <p>The reward for the activity.</p>
    /// This field is required.
    pub fn reward(mut self, input: crate::types::ActivityReward) -> Self {
        self.reward = ::std::option::Option::Some(input);
        self
    }
    /// <p>The reward for the activity.</p>
    pub fn set_reward(mut self, input: ::std::option::Option<crate::types::ActivityReward>) -> Self {
        self.reward = input;
        self
    }
    /// <p>The reward for the activity.</p>
    pub fn get_reward(&self) -> &::std::option::Option<crate::types::ActivityReward> {
        &self.reward
    }
    /// <p>The current status of the activity.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::ActivityStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the activity.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ActivityStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status of the activity.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ActivityStatus> {
        &self.status
    }
    /// Consumes the builder and constructs a [`ActivitySummary`](crate::types::ActivitySummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`activity_id`](crate::types::builders::ActivitySummaryBuilder::activity_id)
    /// - [`title`](crate::types::builders::ActivitySummaryBuilder::title)
    /// - [`status`](crate::types::builders::ActivitySummaryBuilder::status)
    pub fn build(self) -> ::std::result::Result<crate::types::ActivitySummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ActivitySummary {
            activity_id: self.activity_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "activity_id",
                    "activity_id was not specified but it is required when building ActivitySummary",
                )
            })?,
            title: self.title.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "title",
                    "title was not specified but it is required when building ActivitySummary",
                )
            })?,
            reward: self.reward,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building ActivitySummary",
                )
            })?,
        })
    }
}
