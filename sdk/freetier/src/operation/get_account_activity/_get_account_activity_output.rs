// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetAccountActivityOutput {
    /// <p>A unique identifier that identifies the activity.</p>
    pub activity_id: ::std::string::String,
    /// <p>A short activity title.</p>
    pub title: ::std::string::String,
    /// <p>Provides detailed information about the activity and its expected outcomes.</p>
    pub description: ::std::string::String,
    /// <p>The current activity status.</p>
    pub status: crate::types::ActivityStatus,
    /// <p>The URL resource that provides guidance on activity requirements and completion.</p>
    pub instructions_url: ::std::string::String,
    /// <p>A reward granted upon activity completion.</p>
    pub reward: ::std::option::Option<crate::types::ActivityReward>,
    /// <p>The estimated time to complete the activity. This is the duration in minutes.</p>
    pub estimated_time_to_complete_in_minutes: ::std::option::Option<i32>,
    /// <p>The time by which the activity must be completed to receive a reward.</p>
    pub expires_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The timestamp when the activity started. This field appears only for activities in the <code>IN_PROGRESS</code> or <code>COMPLETED</code> states.</p>
    pub started_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The timestamp when the activity is completed. This field appears only for activities in the <code>COMPLETED</code> state.</p>
    pub completed_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl GetAccountActivityOutput {
    /// <p>A unique identifier that identifies the activity.</p>
    pub fn activity_id(&self) -> &str {
        use std::ops::Deref;
        self.activity_id.deref()
    }
    /// <p>A short activity title.</p>
    pub fn title(&self) -> &str {
        use std::ops::Deref;
        self.title.deref()
    }
    /// <p>Provides detailed information about the activity and its expected outcomes.</p>
    pub fn description(&self) -> &str {
        use std::ops::Deref;
        self.description.deref()
    }
    /// <p>The current activity status.</p>
    pub fn status(&self) -> &crate::types::ActivityStatus {
        &self.status
    }
    /// <p>The URL resource that provides guidance on activity requirements and completion.</p>
    pub fn instructions_url(&self) -> &str {
        use std::ops::Deref;
        self.instructions_url.deref()
    }
    /// <p>A reward granted upon activity completion.</p>
    pub fn reward(&self) -> ::std::option::Option<&crate::types::ActivityReward> {
        self.reward.as_ref()
    }
    /// <p>The estimated time to complete the activity. This is the duration in minutes.</p>
    pub fn estimated_time_to_complete_in_minutes(&self) -> ::std::option::Option<i32> {
        self.estimated_time_to_complete_in_minutes
    }
    /// <p>The time by which the activity must be completed to receive a reward.</p>
    pub fn expires_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.expires_at.as_ref()
    }
    /// <p>The timestamp when the activity started. This field appears only for activities in the <code>IN_PROGRESS</code> or <code>COMPLETED</code> states.</p>
    pub fn started_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.started_at.as_ref()
    }
    /// <p>The timestamp when the activity is completed. This field appears only for activities in the <code>COMPLETED</code> state.</p>
    pub fn completed_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.completed_at.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for GetAccountActivityOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetAccountActivityOutput {
    /// Creates a new builder-style object to manufacture [`GetAccountActivityOutput`](crate::operation::get_account_activity::GetAccountActivityOutput).
    pub fn builder() -> crate::operation::get_account_activity::builders::GetAccountActivityOutputBuilder {
        crate::operation::get_account_activity::builders::GetAccountActivityOutputBuilder::default()
    }
}

/// A builder for [`GetAccountActivityOutput`](crate::operation::get_account_activity::GetAccountActivityOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetAccountActivityOutputBuilder {
    pub(crate) activity_id: ::std::option::Option<::std::string::String>,
    pub(crate) title: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::ActivityStatus>,
    pub(crate) instructions_url: ::std::option::Option<::std::string::String>,
    pub(crate) reward: ::std::option::Option<crate::types::ActivityReward>,
    pub(crate) estimated_time_to_complete_in_minutes: ::std::option::Option<i32>,
    pub(crate) expires_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) started_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) completed_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl GetAccountActivityOutputBuilder {
    /// <p>A unique identifier that identifies the activity.</p>
    /// This field is required.
    pub fn activity_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.activity_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier that identifies the activity.</p>
    pub fn set_activity_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.activity_id = input;
        self
    }
    /// <p>A unique identifier that identifies the activity.</p>
    pub fn get_activity_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.activity_id
    }
    /// <p>A short activity title.</p>
    /// This field is required.
    pub fn title(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.title = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A short activity title.</p>
    pub fn set_title(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.title = input;
        self
    }
    /// <p>A short activity title.</p>
    pub fn get_title(&self) -> &::std::option::Option<::std::string::String> {
        &self.title
    }
    /// <p>Provides detailed information about the activity and its expected outcomes.</p>
    /// This field is required.
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Provides detailed information about the activity and its expected outcomes.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>Provides detailed information about the activity and its expected outcomes.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The current activity status.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::ActivityStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current activity status.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ActivityStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current activity status.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ActivityStatus> {
        &self.status
    }
    /// <p>The URL resource that provides guidance on activity requirements and completion.</p>
    /// This field is required.
    pub fn instructions_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instructions_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The URL resource that provides guidance on activity requirements and completion.</p>
    pub fn set_instructions_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instructions_url = input;
        self
    }
    /// <p>The URL resource that provides guidance on activity requirements and completion.</p>
    pub fn get_instructions_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.instructions_url
    }
    /// <p>A reward granted upon activity completion.</p>
    /// This field is required.
    pub fn reward(mut self, input: crate::types::ActivityReward) -> Self {
        self.reward = ::std::option::Option::Some(input);
        self
    }
    /// <p>A reward granted upon activity completion.</p>
    pub fn set_reward(mut self, input: ::std::option::Option<crate::types::ActivityReward>) -> Self {
        self.reward = input;
        self
    }
    /// <p>A reward granted upon activity completion.</p>
    pub fn get_reward(&self) -> &::std::option::Option<crate::types::ActivityReward> {
        &self.reward
    }
    /// <p>The estimated time to complete the activity. This is the duration in minutes.</p>
    pub fn estimated_time_to_complete_in_minutes(mut self, input: i32) -> Self {
        self.estimated_time_to_complete_in_minutes = ::std::option::Option::Some(input);
        self
    }
    /// <p>The estimated time to complete the activity. This is the duration in minutes.</p>
    pub fn set_estimated_time_to_complete_in_minutes(mut self, input: ::std::option::Option<i32>) -> Self {
        self.estimated_time_to_complete_in_minutes = input;
        self
    }
    /// <p>The estimated time to complete the activity. This is the duration in minutes.</p>
    pub fn get_estimated_time_to_complete_in_minutes(&self) -> &::std::option::Option<i32> {
        &self.estimated_time_to_complete_in_minutes
    }
    /// <p>The time by which the activity must be completed to receive a reward.</p>
    pub fn expires_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.expires_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time by which the activity must be completed to receive a reward.</p>
    pub fn set_expires_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.expires_at = input;
        self
    }
    /// <p>The time by which the activity must be completed to receive a reward.</p>
    pub fn get_expires_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.expires_at
    }
    /// <p>The timestamp when the activity started. This field appears only for activities in the <code>IN_PROGRESS</code> or <code>COMPLETED</code> states.</p>
    pub fn started_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.started_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the activity started. This field appears only for activities in the <code>IN_PROGRESS</code> or <code>COMPLETED</code> states.</p>
    pub fn set_started_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.started_at = input;
        self
    }
    /// <p>The timestamp when the activity started. This field appears only for activities in the <code>IN_PROGRESS</code> or <code>COMPLETED</code> states.</p>
    pub fn get_started_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.started_at
    }
    /// <p>The timestamp when the activity is completed. This field appears only for activities in the <code>COMPLETED</code> state.</p>
    pub fn completed_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.completed_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the activity is completed. This field appears only for activities in the <code>COMPLETED</code> state.</p>
    pub fn set_completed_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.completed_at = input;
        self
    }
    /// <p>The timestamp when the activity is completed. This field appears only for activities in the <code>COMPLETED</code> state.</p>
    pub fn get_completed_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.completed_at
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetAccountActivityOutput`](crate::operation::get_account_activity::GetAccountActivityOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`activity_id`](crate::operation::get_account_activity::builders::GetAccountActivityOutputBuilder::activity_id)
    /// - [`title`](crate::operation::get_account_activity::builders::GetAccountActivityOutputBuilder::title)
    /// - [`description`](crate::operation::get_account_activity::builders::GetAccountActivityOutputBuilder::description)
    /// - [`status`](crate::operation::get_account_activity::builders::GetAccountActivityOutputBuilder::status)
    /// - [`instructions_url`](crate::operation::get_account_activity::builders::GetAccountActivityOutputBuilder::instructions_url)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::get_account_activity::GetAccountActivityOutput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::get_account_activity::GetAccountActivityOutput {
            activity_id: self.activity_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "activity_id",
                    "activity_id was not specified but it is required when building GetAccountActivityOutput",
                )
            })?,
            title: self.title.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "title",
                    "title was not specified but it is required when building GetAccountActivityOutput",
                )
            })?,
            description: self.description.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "description",
                    "description was not specified but it is required when building GetAccountActivityOutput",
                )
            })?,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building GetAccountActivityOutput",
                )
            })?,
            instructions_url: self.instructions_url.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "instructions_url",
                    "instructions_url was not specified but it is required when building GetAccountActivityOutput",
                )
            })?,
            reward: self.reward,
            estimated_time_to_complete_in_minutes: self.estimated_time_to_complete_in_minutes,
            expires_at: self.expires_at,
            started_at: self.started_at,
            completed_at: self.completed_at,
            _request_id: self._request_id,
        })
    }
}
