// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListAccountActivitiesInput {
    /// <p>The activity status filter. This field can be used to filter the response by activities status.</p>
    pub filter_activity_statuses: ::std::option::Option<::std::vec::Vec<crate::types::ActivityStatus>>,
    /// <p>A token from a previous paginated response. If this is specified, the response includes records beginning from this token (inclusive), up to the number specified by <code>maxResults</code>.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>The language code used to return translated titles.</p>
    pub language_code: ::std::option::Option<crate::types::LanguageCode>,
}
impl ListAccountActivitiesInput {
    /// <p>The activity status filter. This field can be used to filter the response by activities status.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.filter_activity_statuses.is_none()`.
    pub fn filter_activity_statuses(&self) -> &[crate::types::ActivityStatus] {
        self.filter_activity_statuses.as_deref().unwrap_or_default()
    }
    /// <p>A token from a previous paginated response. If this is specified, the response includes records beginning from this token (inclusive), up to the number specified by <code>maxResults</code>.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>The language code used to return translated titles.</p>
    pub fn language_code(&self) -> ::std::option::Option<&crate::types::LanguageCode> {
        self.language_code.as_ref()
    }
}
impl ListAccountActivitiesInput {
    /// Creates a new builder-style object to manufacture [`ListAccountActivitiesInput`](crate::operation::list_account_activities::ListAccountActivitiesInput).
    pub fn builder() -> crate::operation::list_account_activities::builders::ListAccountActivitiesInputBuilder {
        crate::operation::list_account_activities::builders::ListAccountActivitiesInputBuilder::default()
    }
}

/// A builder for [`ListAccountActivitiesInput`](crate::operation::list_account_activities::ListAccountActivitiesInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListAccountActivitiesInputBuilder {
    pub(crate) filter_activity_statuses: ::std::option::Option<::std::vec::Vec<crate::types::ActivityStatus>>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) language_code: ::std::option::Option<crate::types::LanguageCode>,
}
impl ListAccountActivitiesInputBuilder {
    /// Appends an item to `filter_activity_statuses`.
    ///
    /// To override the contents of this collection use [`set_filter_activity_statuses`](Self::set_filter_activity_statuses).
    ///
    /// <p>The activity status filter. This field can be used to filter the response by activities status.</p>
    pub fn filter_activity_statuses(mut self, input: crate::types::ActivityStatus) -> Self {
        let mut v = self.filter_activity_statuses.unwrap_or_default();
        v.push(input);
        self.filter_activity_statuses = ::std::option::Option::Some(v);
        self
    }
    /// <p>The activity status filter. This field can be used to filter the response by activities status.</p>
    pub fn set_filter_activity_statuses(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ActivityStatus>>) -> Self {
        self.filter_activity_statuses = input;
        self
    }
    /// <p>The activity status filter. This field can be used to filter the response by activities status.</p>
    pub fn get_filter_activity_statuses(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ActivityStatus>> {
        &self.filter_activity_statuses
    }
    /// <p>A token from a previous paginated response. If this is specified, the response includes records beginning from this token (inclusive), up to the number specified by <code>maxResults</code>.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A token from a previous paginated response. If this is specified, the response includes records beginning from this token (inclusive), up to the number specified by <code>maxResults</code>.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>A token from a previous paginated response. If this is specified, the response includes records beginning from this token (inclusive), up to the number specified by <code>maxResults</code>.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>The language code used to return translated titles.</p>
    pub fn language_code(mut self, input: crate::types::LanguageCode) -> Self {
        self.language_code = ::std::option::Option::Some(input);
        self
    }
    /// <p>The language code used to return translated titles.</p>
    pub fn set_language_code(mut self, input: ::std::option::Option<crate::types::LanguageCode>) -> Self {
        self.language_code = input;
        self
    }
    /// <p>The language code used to return translated titles.</p>
    pub fn get_language_code(&self) -> &::std::option::Option<crate::types::LanguageCode> {
        &self.language_code
    }
    /// Consumes the builder and constructs a [`ListAccountActivitiesInput`](crate::operation::list_account_activities::ListAccountActivitiesInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_account_activities::ListAccountActivitiesInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::list_account_activities::ListAccountActivitiesInput {
            filter_activity_statuses: self.filter_activity_statuses,
            next_token: self.next_token,
            max_results: self.max_results,
            language_code: self.language_code,
        })
    }
}
