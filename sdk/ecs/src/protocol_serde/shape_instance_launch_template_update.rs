// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_instance_launch_template_update(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::InstanceLaunchTemplateUpdate,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.ec2_instance_profile_arn {
        object.key("ec2InstanceProfileArn").string(var_1.as_str());
    }
    if let Some(var_2) = &input.network_configuration {
        #[allow(unused_mut)]
        let mut object_3 = object.key("networkConfiguration").start_object();
        crate::protocol_serde::shape_managed_instances_network_configuration::ser_managed_instances_network_configuration(&mut object_3, var_2)?;
        object_3.finish();
    }
    if let Some(var_4) = &input.storage_configuration {
        #[allow(unused_mut)]
        let mut object_5 = object.key("storageConfiguration").start_object();
        crate::protocol_serde::shape_managed_instances_storage_configuration::ser_managed_instances_storage_configuration(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.monitoring {
        object.key("monitoring").string(var_6.as_str());
    }
    if let Some(var_7) = &input.instance_requirements {
        #[allow(unused_mut)]
        let mut object_8 = object.key("instanceRequirements").start_object();
        crate::protocol_serde::shape_instance_requirements_request::ser_instance_requirements_request(&mut object_8, var_7)?;
        object_8.finish();
    }
    Ok(())
}
