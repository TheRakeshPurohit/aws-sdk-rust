// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration for creating a Amazon ECS Managed Instances provider. This specifies how Amazon ECS should manage Amazon EC2 instances, including the infrastructure role, instance launch template, and whether to propagate tags from the capacity provider to the instances.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateManagedInstancesProviderConfiguration {
    /// <p>The Amazon Resource Name (ARN) of the infrastructure role that Amazon ECS uses to manage instances on your behalf. This role must have permissions to launch, terminate, and manage Amazon EC2 instances, as well as access to other Amazon Web Services services required for Amazon ECS Managed Instances functionality.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/infrastructure_IAM_role.html">Amazon ECS infrastructure IAM role</a> in the <i>Amazon ECS Developer Guide</i>.</p>
    pub infrastructure_role_arn: ::std::string::String,
    /// <p>The launch template configuration that specifies how Amazon ECS should launch Amazon EC2 instances. This includes the instance profile, network configuration, storage settings, and instance requirements for attribute-based instance type selection.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html">Store instance launch parameters in Amazon EC2 launch templates</a> in the <i>Amazon EC2 User Guide</i>.</p>
    pub instance_launch_template: ::std::option::Option<crate::types::InstanceLaunchTemplate>,
    /// <p>Specifies whether to propagate tags from the capacity provider to the Amazon ECS Managed Instances. When enabled, tags applied to the capacity provider are automatically applied to all instances launched by this provider.</p>
    pub propagate_tags: ::std::option::Option<crate::types::PropagateMiTags>,
}
impl CreateManagedInstancesProviderConfiguration {
    /// <p>The Amazon Resource Name (ARN) of the infrastructure role that Amazon ECS uses to manage instances on your behalf. This role must have permissions to launch, terminate, and manage Amazon EC2 instances, as well as access to other Amazon Web Services services required for Amazon ECS Managed Instances functionality.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/infrastructure_IAM_role.html">Amazon ECS infrastructure IAM role</a> in the <i>Amazon ECS Developer Guide</i>.</p>
    pub fn infrastructure_role_arn(&self) -> &str {
        use std::ops::Deref;
        self.infrastructure_role_arn.deref()
    }
    /// <p>The launch template configuration that specifies how Amazon ECS should launch Amazon EC2 instances. This includes the instance profile, network configuration, storage settings, and instance requirements for attribute-based instance type selection.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html">Store instance launch parameters in Amazon EC2 launch templates</a> in the <i>Amazon EC2 User Guide</i>.</p>
    pub fn instance_launch_template(&self) -> ::std::option::Option<&crate::types::InstanceLaunchTemplate> {
        self.instance_launch_template.as_ref()
    }
    /// <p>Specifies whether to propagate tags from the capacity provider to the Amazon ECS Managed Instances. When enabled, tags applied to the capacity provider are automatically applied to all instances launched by this provider.</p>
    pub fn propagate_tags(&self) -> ::std::option::Option<&crate::types::PropagateMiTags> {
        self.propagate_tags.as_ref()
    }
}
impl CreateManagedInstancesProviderConfiguration {
    /// Creates a new builder-style object to manufacture [`CreateManagedInstancesProviderConfiguration`](crate::types::CreateManagedInstancesProviderConfiguration).
    pub fn builder() -> crate::types::builders::CreateManagedInstancesProviderConfigurationBuilder {
        crate::types::builders::CreateManagedInstancesProviderConfigurationBuilder::default()
    }
}

/// A builder for [`CreateManagedInstancesProviderConfiguration`](crate::types::CreateManagedInstancesProviderConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateManagedInstancesProviderConfigurationBuilder {
    pub(crate) infrastructure_role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) instance_launch_template: ::std::option::Option<crate::types::InstanceLaunchTemplate>,
    pub(crate) propagate_tags: ::std::option::Option<crate::types::PropagateMiTags>,
}
impl CreateManagedInstancesProviderConfigurationBuilder {
    /// <p>The Amazon Resource Name (ARN) of the infrastructure role that Amazon ECS uses to manage instances on your behalf. This role must have permissions to launch, terminate, and manage Amazon EC2 instances, as well as access to other Amazon Web Services services required for Amazon ECS Managed Instances functionality.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/infrastructure_IAM_role.html">Amazon ECS infrastructure IAM role</a> in the <i>Amazon ECS Developer Guide</i>.</p>
    /// This field is required.
    pub fn infrastructure_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.infrastructure_role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the infrastructure role that Amazon ECS uses to manage instances on your behalf. This role must have permissions to launch, terminate, and manage Amazon EC2 instances, as well as access to other Amazon Web Services services required for Amazon ECS Managed Instances functionality.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/infrastructure_IAM_role.html">Amazon ECS infrastructure IAM role</a> in the <i>Amazon ECS Developer Guide</i>.</p>
    pub fn set_infrastructure_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.infrastructure_role_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the infrastructure role that Amazon ECS uses to manage instances on your behalf. This role must have permissions to launch, terminate, and manage Amazon EC2 instances, as well as access to other Amazon Web Services services required for Amazon ECS Managed Instances functionality.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/infrastructure_IAM_role.html">Amazon ECS infrastructure IAM role</a> in the <i>Amazon ECS Developer Guide</i>.</p>
    pub fn get_infrastructure_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.infrastructure_role_arn
    }
    /// <p>The launch template configuration that specifies how Amazon ECS should launch Amazon EC2 instances. This includes the instance profile, network configuration, storage settings, and instance requirements for attribute-based instance type selection.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html">Store instance launch parameters in Amazon EC2 launch templates</a> in the <i>Amazon EC2 User Guide</i>.</p>
    /// This field is required.
    pub fn instance_launch_template(mut self, input: crate::types::InstanceLaunchTemplate) -> Self {
        self.instance_launch_template = ::std::option::Option::Some(input);
        self
    }
    /// <p>The launch template configuration that specifies how Amazon ECS should launch Amazon EC2 instances. This includes the instance profile, network configuration, storage settings, and instance requirements for attribute-based instance type selection.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html">Store instance launch parameters in Amazon EC2 launch templates</a> in the <i>Amazon EC2 User Guide</i>.</p>
    pub fn set_instance_launch_template(mut self, input: ::std::option::Option<crate::types::InstanceLaunchTemplate>) -> Self {
        self.instance_launch_template = input;
        self
    }
    /// <p>The launch template configuration that specifies how Amazon ECS should launch Amazon EC2 instances. This includes the instance profile, network configuration, storage settings, and instance requirements for attribute-based instance type selection.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html">Store instance launch parameters in Amazon EC2 launch templates</a> in the <i>Amazon EC2 User Guide</i>.</p>
    pub fn get_instance_launch_template(&self) -> &::std::option::Option<crate::types::InstanceLaunchTemplate> {
        &self.instance_launch_template
    }
    /// <p>Specifies whether to propagate tags from the capacity provider to the Amazon ECS Managed Instances. When enabled, tags applied to the capacity provider are automatically applied to all instances launched by this provider.</p>
    pub fn propagate_tags(mut self, input: crate::types::PropagateMiTags) -> Self {
        self.propagate_tags = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether to propagate tags from the capacity provider to the Amazon ECS Managed Instances. When enabled, tags applied to the capacity provider are automatically applied to all instances launched by this provider.</p>
    pub fn set_propagate_tags(mut self, input: ::std::option::Option<crate::types::PropagateMiTags>) -> Self {
        self.propagate_tags = input;
        self
    }
    /// <p>Specifies whether to propagate tags from the capacity provider to the Amazon ECS Managed Instances. When enabled, tags applied to the capacity provider are automatically applied to all instances launched by this provider.</p>
    pub fn get_propagate_tags(&self) -> &::std::option::Option<crate::types::PropagateMiTags> {
        &self.propagate_tags
    }
    /// Consumes the builder and constructs a [`CreateManagedInstancesProviderConfiguration`](crate::types::CreateManagedInstancesProviderConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`infrastructure_role_arn`](crate::types::builders::CreateManagedInstancesProviderConfigurationBuilder::infrastructure_role_arn)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::CreateManagedInstancesProviderConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CreateManagedInstancesProviderConfiguration {
            infrastructure_role_arn: self.infrastructure_role_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "infrastructure_role_arn",
                    "infrastructure_role_arn was not specified but it is required when building CreateManagedInstancesProviderConfiguration",
                )
            })?,
            instance_launch_template: self.instance_launch_template,
            propagate_tags: self.propagate_tags,
        })
    }
}
