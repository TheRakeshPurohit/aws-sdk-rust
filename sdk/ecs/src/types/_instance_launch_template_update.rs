// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The updated launch template configuration for Amazon ECS Managed Instances. You can modify the instance profile, network configuration, storage settings, and instance requirements. Changes apply to new instances launched after the update.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html">Store instance launch parameters in Amazon EC2 launch templates</a> in the <i>Amazon EC2 User Guide</i>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct InstanceLaunchTemplateUpdate {
    /// <p>The updated Amazon Resource Name (ARN) of the instance profile. The new instance profile must have the necessary permissions for your tasks.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/managed-instances-instance-profile.html">Amazon ECS instance profile for Managed Instances</a> in the <i>Amazon ECS Developer Guide</i>.</p>
    pub ec2_instance_profile_arn: ::std::option::Option<::std::string::String>,
    /// <p>The updated network configuration for Amazon ECS Managed Instances. Changes to subnets and security groups affect new instances launched after the update.</p>
    pub network_configuration: ::std::option::Option<crate::types::ManagedInstancesNetworkConfiguration>,
    /// <p>The updated storage configuration for Amazon ECS Managed Instances. Changes to storage settings apply to new instances launched after the update.</p>
    pub storage_configuration: ::std::option::Option<crate::types::ManagedInstancesStorageConfiguration>,
    /// <p>CloudWatch provides two categories of monitoring: basic monitoring and detailed monitoring. By default, your managed instance is configured for basic monitoring. You can optionally enable detailed monitoring to help you more quickly identify and act on operational issues. You can enable or turn off detailed monitoring at launch or when the managed instance is running or stopped. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/detailed-monitoring-managed-instances.html">Detailed monitoring for Amazon ECS Managed Instances</a> in the Amazon ECS Developer Guide.</p>
    pub monitoring: ::std::option::Option<crate::types::ManagedInstancesMonitoringOptions>,
    /// <p>The updated instance requirements for attribute-based instance type selection. Changes to instance requirements affect which instance types Amazon ECS selects for new instances.</p>
    pub instance_requirements: ::std::option::Option<crate::types::InstanceRequirementsRequest>,
}
impl InstanceLaunchTemplateUpdate {
    /// <p>The updated Amazon Resource Name (ARN) of the instance profile. The new instance profile must have the necessary permissions for your tasks.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/managed-instances-instance-profile.html">Amazon ECS instance profile for Managed Instances</a> in the <i>Amazon ECS Developer Guide</i>.</p>
    pub fn ec2_instance_profile_arn(&self) -> ::std::option::Option<&str> {
        self.ec2_instance_profile_arn.as_deref()
    }
    /// <p>The updated network configuration for Amazon ECS Managed Instances. Changes to subnets and security groups affect new instances launched after the update.</p>
    pub fn network_configuration(&self) -> ::std::option::Option<&crate::types::ManagedInstancesNetworkConfiguration> {
        self.network_configuration.as_ref()
    }
    /// <p>The updated storage configuration for Amazon ECS Managed Instances. Changes to storage settings apply to new instances launched after the update.</p>
    pub fn storage_configuration(&self) -> ::std::option::Option<&crate::types::ManagedInstancesStorageConfiguration> {
        self.storage_configuration.as_ref()
    }
    /// <p>CloudWatch provides two categories of monitoring: basic monitoring and detailed monitoring. By default, your managed instance is configured for basic monitoring. You can optionally enable detailed monitoring to help you more quickly identify and act on operational issues. You can enable or turn off detailed monitoring at launch or when the managed instance is running or stopped. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/detailed-monitoring-managed-instances.html">Detailed monitoring for Amazon ECS Managed Instances</a> in the Amazon ECS Developer Guide.</p>
    pub fn monitoring(&self) -> ::std::option::Option<&crate::types::ManagedInstancesMonitoringOptions> {
        self.monitoring.as_ref()
    }
    /// <p>The updated instance requirements for attribute-based instance type selection. Changes to instance requirements affect which instance types Amazon ECS selects for new instances.</p>
    pub fn instance_requirements(&self) -> ::std::option::Option<&crate::types::InstanceRequirementsRequest> {
        self.instance_requirements.as_ref()
    }
}
impl InstanceLaunchTemplateUpdate {
    /// Creates a new builder-style object to manufacture [`InstanceLaunchTemplateUpdate`](crate::types::InstanceLaunchTemplateUpdate).
    pub fn builder() -> crate::types::builders::InstanceLaunchTemplateUpdateBuilder {
        crate::types::builders::InstanceLaunchTemplateUpdateBuilder::default()
    }
}

/// A builder for [`InstanceLaunchTemplateUpdate`](crate::types::InstanceLaunchTemplateUpdate).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct InstanceLaunchTemplateUpdateBuilder {
    pub(crate) ec2_instance_profile_arn: ::std::option::Option<::std::string::String>,
    pub(crate) network_configuration: ::std::option::Option<crate::types::ManagedInstancesNetworkConfiguration>,
    pub(crate) storage_configuration: ::std::option::Option<crate::types::ManagedInstancesStorageConfiguration>,
    pub(crate) monitoring: ::std::option::Option<crate::types::ManagedInstancesMonitoringOptions>,
    pub(crate) instance_requirements: ::std::option::Option<crate::types::InstanceRequirementsRequest>,
}
impl InstanceLaunchTemplateUpdateBuilder {
    /// <p>The updated Amazon Resource Name (ARN) of the instance profile. The new instance profile must have the necessary permissions for your tasks.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/managed-instances-instance-profile.html">Amazon ECS instance profile for Managed Instances</a> in the <i>Amazon ECS Developer Guide</i>.</p>
    pub fn ec2_instance_profile_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ec2_instance_profile_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The updated Amazon Resource Name (ARN) of the instance profile. The new instance profile must have the necessary permissions for your tasks.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/managed-instances-instance-profile.html">Amazon ECS instance profile for Managed Instances</a> in the <i>Amazon ECS Developer Guide</i>.</p>
    pub fn set_ec2_instance_profile_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ec2_instance_profile_arn = input;
        self
    }
    /// <p>The updated Amazon Resource Name (ARN) of the instance profile. The new instance profile must have the necessary permissions for your tasks.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/managed-instances-instance-profile.html">Amazon ECS instance profile for Managed Instances</a> in the <i>Amazon ECS Developer Guide</i>.</p>
    pub fn get_ec2_instance_profile_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.ec2_instance_profile_arn
    }
    /// <p>The updated network configuration for Amazon ECS Managed Instances. Changes to subnets and security groups affect new instances launched after the update.</p>
    pub fn network_configuration(mut self, input: crate::types::ManagedInstancesNetworkConfiguration) -> Self {
        self.network_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The updated network configuration for Amazon ECS Managed Instances. Changes to subnets and security groups affect new instances launched after the update.</p>
    pub fn set_network_configuration(mut self, input: ::std::option::Option<crate::types::ManagedInstancesNetworkConfiguration>) -> Self {
        self.network_configuration = input;
        self
    }
    /// <p>The updated network configuration for Amazon ECS Managed Instances. Changes to subnets and security groups affect new instances launched after the update.</p>
    pub fn get_network_configuration(&self) -> &::std::option::Option<crate::types::ManagedInstancesNetworkConfiguration> {
        &self.network_configuration
    }
    /// <p>The updated storage configuration for Amazon ECS Managed Instances. Changes to storage settings apply to new instances launched after the update.</p>
    pub fn storage_configuration(mut self, input: crate::types::ManagedInstancesStorageConfiguration) -> Self {
        self.storage_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The updated storage configuration for Amazon ECS Managed Instances. Changes to storage settings apply to new instances launched after the update.</p>
    pub fn set_storage_configuration(mut self, input: ::std::option::Option<crate::types::ManagedInstancesStorageConfiguration>) -> Self {
        self.storage_configuration = input;
        self
    }
    /// <p>The updated storage configuration for Amazon ECS Managed Instances. Changes to storage settings apply to new instances launched after the update.</p>
    pub fn get_storage_configuration(&self) -> &::std::option::Option<crate::types::ManagedInstancesStorageConfiguration> {
        &self.storage_configuration
    }
    /// <p>CloudWatch provides two categories of monitoring: basic monitoring and detailed monitoring. By default, your managed instance is configured for basic monitoring. You can optionally enable detailed monitoring to help you more quickly identify and act on operational issues. You can enable or turn off detailed monitoring at launch or when the managed instance is running or stopped. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/detailed-monitoring-managed-instances.html">Detailed monitoring for Amazon ECS Managed Instances</a> in the Amazon ECS Developer Guide.</p>
    pub fn monitoring(mut self, input: crate::types::ManagedInstancesMonitoringOptions) -> Self {
        self.monitoring = ::std::option::Option::Some(input);
        self
    }
    /// <p>CloudWatch provides two categories of monitoring: basic monitoring and detailed monitoring. By default, your managed instance is configured for basic monitoring. You can optionally enable detailed monitoring to help you more quickly identify and act on operational issues. You can enable or turn off detailed monitoring at launch or when the managed instance is running or stopped. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/detailed-monitoring-managed-instances.html">Detailed monitoring for Amazon ECS Managed Instances</a> in the Amazon ECS Developer Guide.</p>
    pub fn set_monitoring(mut self, input: ::std::option::Option<crate::types::ManagedInstancesMonitoringOptions>) -> Self {
        self.monitoring = input;
        self
    }
    /// <p>CloudWatch provides two categories of monitoring: basic monitoring and detailed monitoring. By default, your managed instance is configured for basic monitoring. You can optionally enable detailed monitoring to help you more quickly identify and act on operational issues. You can enable or turn off detailed monitoring at launch or when the managed instance is running or stopped. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/detailed-monitoring-managed-instances.html">Detailed monitoring for Amazon ECS Managed Instances</a> in the Amazon ECS Developer Guide.</p>
    pub fn get_monitoring(&self) -> &::std::option::Option<crate::types::ManagedInstancesMonitoringOptions> {
        &self.monitoring
    }
    /// <p>The updated instance requirements for attribute-based instance type selection. Changes to instance requirements affect which instance types Amazon ECS selects for new instances.</p>
    pub fn instance_requirements(mut self, input: crate::types::InstanceRequirementsRequest) -> Self {
        self.instance_requirements = ::std::option::Option::Some(input);
        self
    }
    /// <p>The updated instance requirements for attribute-based instance type selection. Changes to instance requirements affect which instance types Amazon ECS selects for new instances.</p>
    pub fn set_instance_requirements(mut self, input: ::std::option::Option<crate::types::InstanceRequirementsRequest>) -> Self {
        self.instance_requirements = input;
        self
    }
    /// <p>The updated instance requirements for attribute-based instance type selection. Changes to instance requirements affect which instance types Amazon ECS selects for new instances.</p>
    pub fn get_instance_requirements(&self) -> &::std::option::Option<crate::types::InstanceRequirementsRequest> {
        &self.instance_requirements
    }
    /// Consumes the builder and constructs a [`InstanceLaunchTemplateUpdate`](crate::types::InstanceLaunchTemplateUpdate).
    pub fn build(self) -> crate::types::InstanceLaunchTemplateUpdate {
        crate::types::InstanceLaunchTemplateUpdate {
            ec2_instance_profile_arn: self.ec2_instance_profile_arn,
            network_configuration: self.network_configuration,
            storage_configuration: self.storage_configuration,
            monitoring: self.monitoring,
            instance_requirements: self.instance_requirements,
        }
    }
}
