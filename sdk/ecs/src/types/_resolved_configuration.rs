// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The resolved configuration for a service revision, which contains the actual resources your service revision uses, such as which target groups serve traffic.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ResolvedConfiguration {
    /// <p>The resolved load balancer configuration for the service revision. This includes information about which target groups serve traffic and which listener rules direct traffic to them.</p>
    pub load_balancers: ::std::option::Option<::std::vec::Vec<crate::types::ServiceRevisionLoadBalancer>>,
}
impl ResolvedConfiguration {
    /// <p>The resolved load balancer configuration for the service revision. This includes information about which target groups serve traffic and which listener rules direct traffic to them.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.load_balancers.is_none()`.
    pub fn load_balancers(&self) -> &[crate::types::ServiceRevisionLoadBalancer] {
        self.load_balancers.as_deref().unwrap_or_default()
    }
}
impl ResolvedConfiguration {
    /// Creates a new builder-style object to manufacture [`ResolvedConfiguration`](crate::types::ResolvedConfiguration).
    pub fn builder() -> crate::types::builders::ResolvedConfigurationBuilder {
        crate::types::builders::ResolvedConfigurationBuilder::default()
    }
}

/// A builder for [`ResolvedConfiguration`](crate::types::ResolvedConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ResolvedConfigurationBuilder {
    pub(crate) load_balancers: ::std::option::Option<::std::vec::Vec<crate::types::ServiceRevisionLoadBalancer>>,
}
impl ResolvedConfigurationBuilder {
    /// Appends an item to `load_balancers`.
    ///
    /// To override the contents of this collection use [`set_load_balancers`](Self::set_load_balancers).
    ///
    /// <p>The resolved load balancer configuration for the service revision. This includes information about which target groups serve traffic and which listener rules direct traffic to them.</p>
    pub fn load_balancers(mut self, input: crate::types::ServiceRevisionLoadBalancer) -> Self {
        let mut v = self.load_balancers.unwrap_or_default();
        v.push(input);
        self.load_balancers = ::std::option::Option::Some(v);
        self
    }
    /// <p>The resolved load balancer configuration for the service revision. This includes information about which target groups serve traffic and which listener rules direct traffic to them.</p>
    pub fn set_load_balancers(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ServiceRevisionLoadBalancer>>) -> Self {
        self.load_balancers = input;
        self
    }
    /// <p>The resolved load balancer configuration for the service revision. This includes information about which target groups serve traffic and which listener rules direct traffic to them.</p>
    pub fn get_load_balancers(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ServiceRevisionLoadBalancer>> {
        &self.load_balancers
    }
    /// Consumes the builder and constructs a [`ResolvedConfiguration`](crate::types::ResolvedConfiguration).
    pub fn build(self) -> crate::types::ResolvedConfiguration {
        crate::types::ResolvedConfiguration {
            load_balancers: self.load_balancers,
        }
    }
}
