// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The advanced settings for a load balancer used in blue/green deployments. Specify the alternate target group, listener rules, and IAM role required for traffic shifting during blue/green deployments. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/blue-green-deployment-implementation.html">Required resources for Amazon ECS blue/green deployments</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AdvancedConfiguration {
    /// <p>The Amazon Resource Name (ARN) of the alternate target group for Amazon ECS blue/green deployments.</p>
    pub alternate_target_group_arn: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) that that identifies the production listener rule (in the case of an Application Load Balancer) or listener (in the case for an Network Load Balancer) for routing production traffic.</p>
    pub production_listener_rule: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) that identifies ) that identifies the test listener rule (in the case of an Application Load Balancer) or listener (in the case for an Network Load Balancer) for routing test traffic.</p>
    pub test_listener_rule: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the IAM role that grants Amazon ECS permission to call the Elastic Load Balancing APIs for you.</p>
    pub role_arn: ::std::option::Option<::std::string::String>,
}
impl AdvancedConfiguration {
    /// <p>The Amazon Resource Name (ARN) of the alternate target group for Amazon ECS blue/green deployments.</p>
    pub fn alternate_target_group_arn(&self) -> ::std::option::Option<&str> {
        self.alternate_target_group_arn.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) that that identifies the production listener rule (in the case of an Application Load Balancer) or listener (in the case for an Network Load Balancer) for routing production traffic.</p>
    pub fn production_listener_rule(&self) -> ::std::option::Option<&str> {
        self.production_listener_rule.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) that identifies ) that identifies the test listener rule (in the case of an Application Load Balancer) or listener (in the case for an Network Load Balancer) for routing test traffic.</p>
    pub fn test_listener_rule(&self) -> ::std::option::Option<&str> {
        self.test_listener_rule.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role that grants Amazon ECS permission to call the Elastic Load Balancing APIs for you.</p>
    pub fn role_arn(&self) -> ::std::option::Option<&str> {
        self.role_arn.as_deref()
    }
}
impl AdvancedConfiguration {
    /// Creates a new builder-style object to manufacture [`AdvancedConfiguration`](crate::types::AdvancedConfiguration).
    pub fn builder() -> crate::types::builders::AdvancedConfigurationBuilder {
        crate::types::builders::AdvancedConfigurationBuilder::default()
    }
}

/// A builder for [`AdvancedConfiguration`](crate::types::AdvancedConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AdvancedConfigurationBuilder {
    pub(crate) alternate_target_group_arn: ::std::option::Option<::std::string::String>,
    pub(crate) production_listener_rule: ::std::option::Option<::std::string::String>,
    pub(crate) test_listener_rule: ::std::option::Option<::std::string::String>,
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
}
impl AdvancedConfigurationBuilder {
    /// <p>The Amazon Resource Name (ARN) of the alternate target group for Amazon ECS blue/green deployments.</p>
    pub fn alternate_target_group_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.alternate_target_group_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the alternate target group for Amazon ECS blue/green deployments.</p>
    pub fn set_alternate_target_group_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.alternate_target_group_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the alternate target group for Amazon ECS blue/green deployments.</p>
    pub fn get_alternate_target_group_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.alternate_target_group_arn
    }
    /// <p>The Amazon Resource Name (ARN) that that identifies the production listener rule (in the case of an Application Load Balancer) or listener (in the case for an Network Load Balancer) for routing production traffic.</p>
    pub fn production_listener_rule(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.production_listener_rule = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) that that identifies the production listener rule (in the case of an Application Load Balancer) or listener (in the case for an Network Load Balancer) for routing production traffic.</p>
    pub fn set_production_listener_rule(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.production_listener_rule = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) that that identifies the production listener rule (in the case of an Application Load Balancer) or listener (in the case for an Network Load Balancer) for routing production traffic.</p>
    pub fn get_production_listener_rule(&self) -> &::std::option::Option<::std::string::String> {
        &self.production_listener_rule
    }
    /// <p>The Amazon Resource Name (ARN) that identifies ) that identifies the test listener rule (in the case of an Application Load Balancer) or listener (in the case for an Network Load Balancer) for routing test traffic.</p>
    pub fn test_listener_rule(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.test_listener_rule = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) that identifies ) that identifies the test listener rule (in the case of an Application Load Balancer) or listener (in the case for an Network Load Balancer) for routing test traffic.</p>
    pub fn set_test_listener_rule(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.test_listener_rule = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) that identifies ) that identifies the test listener rule (in the case of an Application Load Balancer) or listener (in the case for an Network Load Balancer) for routing test traffic.</p>
    pub fn get_test_listener_rule(&self) -> &::std::option::Option<::std::string::String> {
        &self.test_listener_rule
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role that grants Amazon ECS permission to call the Elastic Load Balancing APIs for you.</p>
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role that grants Amazon ECS permission to call the Elastic Load Balancing APIs for you.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role that grants Amazon ECS permission to call the Elastic Load Balancing APIs for you.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// Consumes the builder and constructs a [`AdvancedConfiguration`](crate::types::AdvancedConfiguration).
    pub fn build(self) -> crate::types::AdvancedConfiguration {
        crate::types::AdvancedConfiguration {
            alternate_target_group_arn: self.alternate_target_group_arn,
            production_listener_rule: self.production_listener_rule,
            test_listener_rule: self.test_listener_rule,
            role_arn: self.role_arn,
        }
    }
}
