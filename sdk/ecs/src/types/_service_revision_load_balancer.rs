// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The resolved load balancer configuration for a service revision. This includes information about which target groups serve traffic and which listener rules direct traffic to them.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ServiceRevisionLoadBalancer {
    /// <p>The Amazon Resource Name (ARN) of the target group associated with the service revision.</p>
    pub target_group_arn: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the production listener rule or listener that directs traffic to the target group associated with the service revision.</p>
    pub production_listener_rule: ::std::option::Option<::std::string::String>,
}
impl ServiceRevisionLoadBalancer {
    /// <p>The Amazon Resource Name (ARN) of the target group associated with the service revision.</p>
    pub fn target_group_arn(&self) -> ::std::option::Option<&str> {
        self.target_group_arn.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the production listener rule or listener that directs traffic to the target group associated with the service revision.</p>
    pub fn production_listener_rule(&self) -> ::std::option::Option<&str> {
        self.production_listener_rule.as_deref()
    }
}
impl ServiceRevisionLoadBalancer {
    /// Creates a new builder-style object to manufacture [`ServiceRevisionLoadBalancer`](crate::types::ServiceRevisionLoadBalancer).
    pub fn builder() -> crate::types::builders::ServiceRevisionLoadBalancerBuilder {
        crate::types::builders::ServiceRevisionLoadBalancerBuilder::default()
    }
}

/// A builder for [`ServiceRevisionLoadBalancer`](crate::types::ServiceRevisionLoadBalancer).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ServiceRevisionLoadBalancerBuilder {
    pub(crate) target_group_arn: ::std::option::Option<::std::string::String>,
    pub(crate) production_listener_rule: ::std::option::Option<::std::string::String>,
}
impl ServiceRevisionLoadBalancerBuilder {
    /// <p>The Amazon Resource Name (ARN) of the target group associated with the service revision.</p>
    pub fn target_group_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.target_group_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the target group associated with the service revision.</p>
    pub fn set_target_group_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.target_group_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the target group associated with the service revision.</p>
    pub fn get_target_group_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.target_group_arn
    }
    /// <p>The Amazon Resource Name (ARN) of the production listener rule or listener that directs traffic to the target group associated with the service revision.</p>
    pub fn production_listener_rule(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.production_listener_rule = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the production listener rule or listener that directs traffic to the target group associated with the service revision.</p>
    pub fn set_production_listener_rule(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.production_listener_rule = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the production listener rule or listener that directs traffic to the target group associated with the service revision.</p>
    pub fn get_production_listener_rule(&self) -> &::std::option::Option<::std::string::String> {
        &self.production_listener_rule
    }
    /// Consumes the builder and constructs a [`ServiceRevisionLoadBalancer`](crate::types::ServiceRevisionLoadBalancer).
    pub fn build(self) -> crate::types::ServiceRevisionLoadBalancer {
        crate::types::ServiceRevisionLoadBalancer {
            target_group_arn: self.target_group_arn,
            production_listener_rule: self.production_listener_rule,
        }
    }
}
