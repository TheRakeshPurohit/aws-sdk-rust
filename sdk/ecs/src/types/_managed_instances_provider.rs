// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration for a Amazon ECS Managed Instances provider. Amazon ECS uses this configuration to automatically launch, manage, and terminate Amazon EC2 instances on your behalf. Managed instances provide access to the full range of Amazon EC2 instance types and features while offloading infrastructure management to Amazon Web Services.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ManagedInstancesProvider {
    /// <p>The Amazon Resource Name (ARN) of the infrastructure role that Amazon ECS assumes to manage instances. This role must include permissions for Amazon EC2 instance lifecycle management, networking, and any additional Amazon Web Services services required for your workloads.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/infrastructure_IAM_role.html">Amazon ECS infrastructure IAM role</a> in the <i>Amazon ECS Developer Guide</i>.</p>
    pub infrastructure_role_arn: ::std::option::Option<::std::string::String>,
    /// <p>The launch template that defines how Amazon ECS launches Amazon ECS Managed Instances. This includes the instance profile for your tasks, network and storage configuration, and instance requirements that determine which Amazon EC2 instance types can be used.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html">Store instance launch parameters in Amazon EC2 launch templates</a> in the <i>Amazon EC2 User Guide</i>.</p>
    pub instance_launch_template: ::std::option::Option<crate::types::InstanceLaunchTemplate>,
    /// <p>Determines whether tags from the capacity provider are automatically applied to Amazon ECS Managed Instances. This helps with cost allocation and resource management by ensuring consistent tagging across your infrastructure.</p>
    pub propagate_tags: ::std::option::Option<crate::types::PropagateMiTags>,
}
impl ManagedInstancesProvider {
    /// <p>The Amazon Resource Name (ARN) of the infrastructure role that Amazon ECS assumes to manage instances. This role must include permissions for Amazon EC2 instance lifecycle management, networking, and any additional Amazon Web Services services required for your workloads.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/infrastructure_IAM_role.html">Amazon ECS infrastructure IAM role</a> in the <i>Amazon ECS Developer Guide</i>.</p>
    pub fn infrastructure_role_arn(&self) -> ::std::option::Option<&str> {
        self.infrastructure_role_arn.as_deref()
    }
    /// <p>The launch template that defines how Amazon ECS launches Amazon ECS Managed Instances. This includes the instance profile for your tasks, network and storage configuration, and instance requirements that determine which Amazon EC2 instance types can be used.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html">Store instance launch parameters in Amazon EC2 launch templates</a> in the <i>Amazon EC2 User Guide</i>.</p>
    pub fn instance_launch_template(&self) -> ::std::option::Option<&crate::types::InstanceLaunchTemplate> {
        self.instance_launch_template.as_ref()
    }
    /// <p>Determines whether tags from the capacity provider are automatically applied to Amazon ECS Managed Instances. This helps with cost allocation and resource management by ensuring consistent tagging across your infrastructure.</p>
    pub fn propagate_tags(&self) -> ::std::option::Option<&crate::types::PropagateMiTags> {
        self.propagate_tags.as_ref()
    }
}
impl ManagedInstancesProvider {
    /// Creates a new builder-style object to manufacture [`ManagedInstancesProvider`](crate::types::ManagedInstancesProvider).
    pub fn builder() -> crate::types::builders::ManagedInstancesProviderBuilder {
        crate::types::builders::ManagedInstancesProviderBuilder::default()
    }
}

/// A builder for [`ManagedInstancesProvider`](crate::types::ManagedInstancesProvider).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ManagedInstancesProviderBuilder {
    pub(crate) infrastructure_role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) instance_launch_template: ::std::option::Option<crate::types::InstanceLaunchTemplate>,
    pub(crate) propagate_tags: ::std::option::Option<crate::types::PropagateMiTags>,
}
impl ManagedInstancesProviderBuilder {
    /// <p>The Amazon Resource Name (ARN) of the infrastructure role that Amazon ECS assumes to manage instances. This role must include permissions for Amazon EC2 instance lifecycle management, networking, and any additional Amazon Web Services services required for your workloads.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/infrastructure_IAM_role.html">Amazon ECS infrastructure IAM role</a> in the <i>Amazon ECS Developer Guide</i>.</p>
    pub fn infrastructure_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.infrastructure_role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the infrastructure role that Amazon ECS assumes to manage instances. This role must include permissions for Amazon EC2 instance lifecycle management, networking, and any additional Amazon Web Services services required for your workloads.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/infrastructure_IAM_role.html">Amazon ECS infrastructure IAM role</a> in the <i>Amazon ECS Developer Guide</i>.</p>
    pub fn set_infrastructure_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.infrastructure_role_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the infrastructure role that Amazon ECS assumes to manage instances. This role must include permissions for Amazon EC2 instance lifecycle management, networking, and any additional Amazon Web Services services required for your workloads.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/infrastructure_IAM_role.html">Amazon ECS infrastructure IAM role</a> in the <i>Amazon ECS Developer Guide</i>.</p>
    pub fn get_infrastructure_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.infrastructure_role_arn
    }
    /// <p>The launch template that defines how Amazon ECS launches Amazon ECS Managed Instances. This includes the instance profile for your tasks, network and storage configuration, and instance requirements that determine which Amazon EC2 instance types can be used.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html">Store instance launch parameters in Amazon EC2 launch templates</a> in the <i>Amazon EC2 User Guide</i>.</p>
    pub fn instance_launch_template(mut self, input: crate::types::InstanceLaunchTemplate) -> Self {
        self.instance_launch_template = ::std::option::Option::Some(input);
        self
    }
    /// <p>The launch template that defines how Amazon ECS launches Amazon ECS Managed Instances. This includes the instance profile for your tasks, network and storage configuration, and instance requirements that determine which Amazon EC2 instance types can be used.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html">Store instance launch parameters in Amazon EC2 launch templates</a> in the <i>Amazon EC2 User Guide</i>.</p>
    pub fn set_instance_launch_template(mut self, input: ::std::option::Option<crate::types::InstanceLaunchTemplate>) -> Self {
        self.instance_launch_template = input;
        self
    }
    /// <p>The launch template that defines how Amazon ECS launches Amazon ECS Managed Instances. This includes the instance profile for your tasks, network and storage configuration, and instance requirements that determine which Amazon EC2 instance types can be used.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html">Store instance launch parameters in Amazon EC2 launch templates</a> in the <i>Amazon EC2 User Guide</i>.</p>
    pub fn get_instance_launch_template(&self) -> &::std::option::Option<crate::types::InstanceLaunchTemplate> {
        &self.instance_launch_template
    }
    /// <p>Determines whether tags from the capacity provider are automatically applied to Amazon ECS Managed Instances. This helps with cost allocation and resource management by ensuring consistent tagging across your infrastructure.</p>
    pub fn propagate_tags(mut self, input: crate::types::PropagateMiTags) -> Self {
        self.propagate_tags = ::std::option::Option::Some(input);
        self
    }
    /// <p>Determines whether tags from the capacity provider are automatically applied to Amazon ECS Managed Instances. This helps with cost allocation and resource management by ensuring consistent tagging across your infrastructure.</p>
    pub fn set_propagate_tags(mut self, input: ::std::option::Option<crate::types::PropagateMiTags>) -> Self {
        self.propagate_tags = input;
        self
    }
    /// <p>Determines whether tags from the capacity provider are automatically applied to Amazon ECS Managed Instances. This helps with cost allocation and resource management by ensuring consistent tagging across your infrastructure.</p>
    pub fn get_propagate_tags(&self) -> &::std::option::Option<crate::types::PropagateMiTags> {
        &self.propagate_tags
    }
    /// Consumes the builder and constructs a [`ManagedInstancesProvider`](crate::types::ManagedInstancesProvider).
    pub fn build(self) -> crate::types::ManagedInstancesProvider {
        crate::types::ManagedInstancesProvider {
            infrastructure_role_arn: self.infrastructure_role_arn,
            instance_launch_template: self.instance_launch_template,
            propagate_tags: self.propagate_tags,
        }
    }
}
