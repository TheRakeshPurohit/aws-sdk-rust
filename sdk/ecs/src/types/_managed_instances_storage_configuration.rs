// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The storage configuration for Amazon ECS Managed Instances. This defines the root volume configuration for the instances.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ManagedInstancesStorageConfiguration {
    /// <p>The size of the tasks volume.</p>
    pub storage_size_gib: ::std::option::Option<i32>,
}
impl ManagedInstancesStorageConfiguration {
    /// <p>The size of the tasks volume.</p>
    pub fn storage_size_gib(&self) -> ::std::option::Option<i32> {
        self.storage_size_gib
    }
}
impl ManagedInstancesStorageConfiguration {
    /// Creates a new builder-style object to manufacture [`ManagedInstancesStorageConfiguration`](crate::types::ManagedInstancesStorageConfiguration).
    pub fn builder() -> crate::types::builders::ManagedInstancesStorageConfigurationBuilder {
        crate::types::builders::ManagedInstancesStorageConfigurationBuilder::default()
    }
}

/// A builder for [`ManagedInstancesStorageConfiguration`](crate::types::ManagedInstancesStorageConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ManagedInstancesStorageConfigurationBuilder {
    pub(crate) storage_size_gib: ::std::option::Option<i32>,
}
impl ManagedInstancesStorageConfigurationBuilder {
    /// <p>The size of the tasks volume.</p>
    pub fn storage_size_gib(mut self, input: i32) -> Self {
        self.storage_size_gib = ::std::option::Option::Some(input);
        self
    }
    /// <p>The size of the tasks volume.</p>
    pub fn set_storage_size_gib(mut self, input: ::std::option::Option<i32>) -> Self {
        self.storage_size_gib = input;
        self
    }
    /// <p>The size of the tasks volume.</p>
    pub fn get_storage_size_gib(&self) -> &::std::option::Option<i32> {
        &self.storage_size_gib
    }
    /// Consumes the builder and constructs a [`ManagedInstancesStorageConfiguration`](crate::types::ManagedInstancesStorageConfiguration).
    pub fn build(self) -> crate::types::ManagedInstancesStorageConfiguration {
        crate::types::ManagedInstancesStorageConfiguration {
            storage_size_gib: self.storage_size_gib,
        }
    }
}
