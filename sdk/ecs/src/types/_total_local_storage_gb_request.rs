// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The minimum and maximum total local storage in gigabytes (GB) for instance types with local storage. This is useful for workloads that require local storage for temporary data or caching.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TotalLocalStorageGbRequest {
    /// <p>The minimum total local storage in GB. Instance types with less local storage are excluded from selection.</p>
    pub min: ::std::option::Option<f64>,
    /// <p>The maximum total local storage in GB. Instance types with more local storage are excluded from selection.</p>
    pub max: ::std::option::Option<f64>,
}
impl TotalLocalStorageGbRequest {
    /// <p>The minimum total local storage in GB. Instance types with less local storage are excluded from selection.</p>
    pub fn min(&self) -> ::std::option::Option<f64> {
        self.min
    }
    /// <p>The maximum total local storage in GB. Instance types with more local storage are excluded from selection.</p>
    pub fn max(&self) -> ::std::option::Option<f64> {
        self.max
    }
}
impl TotalLocalStorageGbRequest {
    /// Creates a new builder-style object to manufacture [`TotalLocalStorageGbRequest`](crate::types::TotalLocalStorageGbRequest).
    pub fn builder() -> crate::types::builders::TotalLocalStorageGbRequestBuilder {
        crate::types::builders::TotalLocalStorageGbRequestBuilder::default()
    }
}

/// A builder for [`TotalLocalStorageGbRequest`](crate::types::TotalLocalStorageGbRequest).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct TotalLocalStorageGbRequestBuilder {
    pub(crate) min: ::std::option::Option<f64>,
    pub(crate) max: ::std::option::Option<f64>,
}
impl TotalLocalStorageGbRequestBuilder {
    /// <p>The minimum total local storage in GB. Instance types with less local storage are excluded from selection.</p>
    pub fn min(mut self, input: f64) -> Self {
        self.min = ::std::option::Option::Some(input);
        self
    }
    /// <p>The minimum total local storage in GB. Instance types with less local storage are excluded from selection.</p>
    pub fn set_min(mut self, input: ::std::option::Option<f64>) -> Self {
        self.min = input;
        self
    }
    /// <p>The minimum total local storage in GB. Instance types with less local storage are excluded from selection.</p>
    pub fn get_min(&self) -> &::std::option::Option<f64> {
        &self.min
    }
    /// <p>The maximum total local storage in GB. Instance types with more local storage are excluded from selection.</p>
    pub fn max(mut self, input: f64) -> Self {
        self.max = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum total local storage in GB. Instance types with more local storage are excluded from selection.</p>
    pub fn set_max(mut self, input: ::std::option::Option<f64>) -> Self {
        self.max = input;
        self
    }
    /// <p>The maximum total local storage in GB. Instance types with more local storage are excluded from selection.</p>
    pub fn get_max(&self) -> &::std::option::Option<f64> {
        &self.max
    }
    /// Consumes the builder and constructs a [`TotalLocalStorageGbRequest`](crate::types::TotalLocalStorageGbRequest).
    pub fn build(self) -> crate::types::TotalLocalStorageGbRequest {
        crate::types::TotalLocalStorageGbRequest {
            min: self.min,
            max: self.max,
        }
    }
}
