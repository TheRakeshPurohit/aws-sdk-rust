// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The test traffic routing configuration for Amazon ECS blue/green deployments. This configuration allows you to define rules for routing specific traffic to the new service revision during the deployment process, allowing for safe testing before full production traffic shift.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect-blue-green.html">Service Connect for Amazon ECS blue/green deployments</a> in the <i> Amazon Elastic Container Service Developer Guide</i>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ServiceConnectTestTrafficRules {
    /// <p>The HTTP header-based routing rules that determine which requests should be routed to the new service version during blue/green deployment testing. These rules provide fine-grained control over test traffic routing based on request headers.</p>
    pub header: ::std::option::Option<crate::types::ServiceConnectTestTrafficHeaderRules>,
}
impl ServiceConnectTestTrafficRules {
    /// <p>The HTTP header-based routing rules that determine which requests should be routed to the new service version during blue/green deployment testing. These rules provide fine-grained control over test traffic routing based on request headers.</p>
    pub fn header(&self) -> ::std::option::Option<&crate::types::ServiceConnectTestTrafficHeaderRules> {
        self.header.as_ref()
    }
}
impl ServiceConnectTestTrafficRules {
    /// Creates a new builder-style object to manufacture [`ServiceConnectTestTrafficRules`](crate::types::ServiceConnectTestTrafficRules).
    pub fn builder() -> crate::types::builders::ServiceConnectTestTrafficRulesBuilder {
        crate::types::builders::ServiceConnectTestTrafficRulesBuilder::default()
    }
}

/// A builder for [`ServiceConnectTestTrafficRules`](crate::types::ServiceConnectTestTrafficRules).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ServiceConnectTestTrafficRulesBuilder {
    pub(crate) header: ::std::option::Option<crate::types::ServiceConnectTestTrafficHeaderRules>,
}
impl ServiceConnectTestTrafficRulesBuilder {
    /// <p>The HTTP header-based routing rules that determine which requests should be routed to the new service version during blue/green deployment testing. These rules provide fine-grained control over test traffic routing based on request headers.</p>
    /// This field is required.
    pub fn header(mut self, input: crate::types::ServiceConnectTestTrafficHeaderRules) -> Self {
        self.header = ::std::option::Option::Some(input);
        self
    }
    /// <p>The HTTP header-based routing rules that determine which requests should be routed to the new service version during blue/green deployment testing. These rules provide fine-grained control over test traffic routing based on request headers.</p>
    pub fn set_header(mut self, input: ::std::option::Option<crate::types::ServiceConnectTestTrafficHeaderRules>) -> Self {
        self.header = input;
        self
    }
    /// <p>The HTTP header-based routing rules that determine which requests should be routed to the new service version during blue/green deployment testing. These rules provide fine-grained control over test traffic routing based on request headers.</p>
    pub fn get_header(&self) -> &::std::option::Option<crate::types::ServiceConnectTestTrafficHeaderRules> {
        &self.header
    }
    /// Consumes the builder and constructs a [`ServiceConnectTestTrafficRules`](crate::types::ServiceConnectTestTrafficRules).
    pub fn build(self) -> crate::types::ServiceConnectTestTrafficRules {
        crate::types::ServiceConnectTestTrafficRules { header: self.header }
    }
}
