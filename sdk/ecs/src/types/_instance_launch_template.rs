// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The launch template configuration for Amazon ECS Managed Instances. This defines how Amazon ECS launches Amazon EC2 instances, including the instance profile for your tasks, network and storage configuration, capacity options, and instance requirements for flexible instance type selection.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct InstanceLaunchTemplate {
    /// <p>The Amazon Resource Name (ARN) of the instance profile that Amazon ECS applies to Amazon ECS Managed Instances. This instance profile must include the necessary permissions for your tasks to access Amazon Web Services services and resources.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/managed-instances-instance-profile.html">Amazon ECS instance profile for Managed Instances</a> in the <i>Amazon ECS Developer Guide</i>.</p>
    pub ec2_instance_profile_arn: ::std::string::String,
    /// <p>The network configuration for Amazon ECS Managed Instances. This specifies the subnets and security groups that instances use for network connectivity.</p>
    pub network_configuration: ::std::option::Option<crate::types::ManagedInstancesNetworkConfiguration>,
    /// <p>The storage configuration for Amazon ECS Managed Instances. This defines the root volume size and type for the instances.</p>
    pub storage_configuration: ::std::option::Option<crate::types::ManagedInstancesStorageConfiguration>,
    /// <p>CloudWatch provides two categories of monitoring: basic monitoring and detailed monitoring. By default, your managed instance is configured for basic monitoring. You can optionally enable detailed monitoring to help you more quickly identify and act on operational issues. You can enable or turn off detailed monitoring at launch or when the managed instance is running or stopped. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/detailed-monitoring-managed-instances.html">Detailed monitoring for Amazon ECS Managed Instances</a> in the Amazon ECS Developer Guide.</p>
    pub monitoring: ::std::option::Option<crate::types::ManagedInstancesMonitoringOptions>,
    /// <p>The instance requirements. You can specify:</p>
    /// <ul>
    /// <li>
    /// <p>The instance types</p></li>
    /// <li>
    /// <p>Instance requirements such as vCPU count, memory, network performance, and accelerator specifications</p></li>
    /// </ul>
    /// <p>Amazon ECS automatically selects the instances that match the specified criteria.</p>
    pub instance_requirements: ::std::option::Option<crate::types::InstanceRequirementsRequest>,
}
impl InstanceLaunchTemplate {
    /// <p>The Amazon Resource Name (ARN) of the instance profile that Amazon ECS applies to Amazon ECS Managed Instances. This instance profile must include the necessary permissions for your tasks to access Amazon Web Services services and resources.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/managed-instances-instance-profile.html">Amazon ECS instance profile for Managed Instances</a> in the <i>Amazon ECS Developer Guide</i>.</p>
    pub fn ec2_instance_profile_arn(&self) -> &str {
        use std::ops::Deref;
        self.ec2_instance_profile_arn.deref()
    }
    /// <p>The network configuration for Amazon ECS Managed Instances. This specifies the subnets and security groups that instances use for network connectivity.</p>
    pub fn network_configuration(&self) -> ::std::option::Option<&crate::types::ManagedInstancesNetworkConfiguration> {
        self.network_configuration.as_ref()
    }
    /// <p>The storage configuration for Amazon ECS Managed Instances. This defines the root volume size and type for the instances.</p>
    pub fn storage_configuration(&self) -> ::std::option::Option<&crate::types::ManagedInstancesStorageConfiguration> {
        self.storage_configuration.as_ref()
    }
    /// <p>CloudWatch provides two categories of monitoring: basic monitoring and detailed monitoring. By default, your managed instance is configured for basic monitoring. You can optionally enable detailed monitoring to help you more quickly identify and act on operational issues. You can enable or turn off detailed monitoring at launch or when the managed instance is running or stopped. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/detailed-monitoring-managed-instances.html">Detailed monitoring for Amazon ECS Managed Instances</a> in the Amazon ECS Developer Guide.</p>
    pub fn monitoring(&self) -> ::std::option::Option<&crate::types::ManagedInstancesMonitoringOptions> {
        self.monitoring.as_ref()
    }
    /// <p>The instance requirements. You can specify:</p>
    /// <ul>
    /// <li>
    /// <p>The instance types</p></li>
    /// <li>
    /// <p>Instance requirements such as vCPU count, memory, network performance, and accelerator specifications</p></li>
    /// </ul>
    /// <p>Amazon ECS automatically selects the instances that match the specified criteria.</p>
    pub fn instance_requirements(&self) -> ::std::option::Option<&crate::types::InstanceRequirementsRequest> {
        self.instance_requirements.as_ref()
    }
}
impl InstanceLaunchTemplate {
    /// Creates a new builder-style object to manufacture [`InstanceLaunchTemplate`](crate::types::InstanceLaunchTemplate).
    pub fn builder() -> crate::types::builders::InstanceLaunchTemplateBuilder {
        crate::types::builders::InstanceLaunchTemplateBuilder::default()
    }
}

/// A builder for [`InstanceLaunchTemplate`](crate::types::InstanceLaunchTemplate).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct InstanceLaunchTemplateBuilder {
    pub(crate) ec2_instance_profile_arn: ::std::option::Option<::std::string::String>,
    pub(crate) network_configuration: ::std::option::Option<crate::types::ManagedInstancesNetworkConfiguration>,
    pub(crate) storage_configuration: ::std::option::Option<crate::types::ManagedInstancesStorageConfiguration>,
    pub(crate) monitoring: ::std::option::Option<crate::types::ManagedInstancesMonitoringOptions>,
    pub(crate) instance_requirements: ::std::option::Option<crate::types::InstanceRequirementsRequest>,
}
impl InstanceLaunchTemplateBuilder {
    /// <p>The Amazon Resource Name (ARN) of the instance profile that Amazon ECS applies to Amazon ECS Managed Instances. This instance profile must include the necessary permissions for your tasks to access Amazon Web Services services and resources.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/managed-instances-instance-profile.html">Amazon ECS instance profile for Managed Instances</a> in the <i>Amazon ECS Developer Guide</i>.</p>
    /// This field is required.
    pub fn ec2_instance_profile_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ec2_instance_profile_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the instance profile that Amazon ECS applies to Amazon ECS Managed Instances. This instance profile must include the necessary permissions for your tasks to access Amazon Web Services services and resources.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/managed-instances-instance-profile.html">Amazon ECS instance profile for Managed Instances</a> in the <i>Amazon ECS Developer Guide</i>.</p>
    pub fn set_ec2_instance_profile_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ec2_instance_profile_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the instance profile that Amazon ECS applies to Amazon ECS Managed Instances. This instance profile must include the necessary permissions for your tasks to access Amazon Web Services services and resources.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/managed-instances-instance-profile.html">Amazon ECS instance profile for Managed Instances</a> in the <i>Amazon ECS Developer Guide</i>.</p>
    pub fn get_ec2_instance_profile_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.ec2_instance_profile_arn
    }
    /// <p>The network configuration for Amazon ECS Managed Instances. This specifies the subnets and security groups that instances use for network connectivity.</p>
    /// This field is required.
    pub fn network_configuration(mut self, input: crate::types::ManagedInstancesNetworkConfiguration) -> Self {
        self.network_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The network configuration for Amazon ECS Managed Instances. This specifies the subnets and security groups that instances use for network connectivity.</p>
    pub fn set_network_configuration(mut self, input: ::std::option::Option<crate::types::ManagedInstancesNetworkConfiguration>) -> Self {
        self.network_configuration = input;
        self
    }
    /// <p>The network configuration for Amazon ECS Managed Instances. This specifies the subnets and security groups that instances use for network connectivity.</p>
    pub fn get_network_configuration(&self) -> &::std::option::Option<crate::types::ManagedInstancesNetworkConfiguration> {
        &self.network_configuration
    }
    /// <p>The storage configuration for Amazon ECS Managed Instances. This defines the root volume size and type for the instances.</p>
    pub fn storage_configuration(mut self, input: crate::types::ManagedInstancesStorageConfiguration) -> Self {
        self.storage_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The storage configuration for Amazon ECS Managed Instances. This defines the root volume size and type for the instances.</p>
    pub fn set_storage_configuration(mut self, input: ::std::option::Option<crate::types::ManagedInstancesStorageConfiguration>) -> Self {
        self.storage_configuration = input;
        self
    }
    /// <p>The storage configuration for Amazon ECS Managed Instances. This defines the root volume size and type for the instances.</p>
    pub fn get_storage_configuration(&self) -> &::std::option::Option<crate::types::ManagedInstancesStorageConfiguration> {
        &self.storage_configuration
    }
    /// <p>CloudWatch provides two categories of monitoring: basic monitoring and detailed monitoring. By default, your managed instance is configured for basic monitoring. You can optionally enable detailed monitoring to help you more quickly identify and act on operational issues. You can enable or turn off detailed monitoring at launch or when the managed instance is running or stopped. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/detailed-monitoring-managed-instances.html">Detailed monitoring for Amazon ECS Managed Instances</a> in the Amazon ECS Developer Guide.</p>
    pub fn monitoring(mut self, input: crate::types::ManagedInstancesMonitoringOptions) -> Self {
        self.monitoring = ::std::option::Option::Some(input);
        self
    }
    /// <p>CloudWatch provides two categories of monitoring: basic monitoring and detailed monitoring. By default, your managed instance is configured for basic monitoring. You can optionally enable detailed monitoring to help you more quickly identify and act on operational issues. You can enable or turn off detailed monitoring at launch or when the managed instance is running or stopped. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/detailed-monitoring-managed-instances.html">Detailed monitoring for Amazon ECS Managed Instances</a> in the Amazon ECS Developer Guide.</p>
    pub fn set_monitoring(mut self, input: ::std::option::Option<crate::types::ManagedInstancesMonitoringOptions>) -> Self {
        self.monitoring = input;
        self
    }
    /// <p>CloudWatch provides two categories of monitoring: basic monitoring and detailed monitoring. By default, your managed instance is configured for basic monitoring. You can optionally enable detailed monitoring to help you more quickly identify and act on operational issues. You can enable or turn off detailed monitoring at launch or when the managed instance is running or stopped. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/detailed-monitoring-managed-instances.html">Detailed monitoring for Amazon ECS Managed Instances</a> in the Amazon ECS Developer Guide.</p>
    pub fn get_monitoring(&self) -> &::std::option::Option<crate::types::ManagedInstancesMonitoringOptions> {
        &self.monitoring
    }
    /// <p>The instance requirements. You can specify:</p>
    /// <ul>
    /// <li>
    /// <p>The instance types</p></li>
    /// <li>
    /// <p>Instance requirements such as vCPU count, memory, network performance, and accelerator specifications</p></li>
    /// </ul>
    /// <p>Amazon ECS automatically selects the instances that match the specified criteria.</p>
    pub fn instance_requirements(mut self, input: crate::types::InstanceRequirementsRequest) -> Self {
        self.instance_requirements = ::std::option::Option::Some(input);
        self
    }
    /// <p>The instance requirements. You can specify:</p>
    /// <ul>
    /// <li>
    /// <p>The instance types</p></li>
    /// <li>
    /// <p>Instance requirements such as vCPU count, memory, network performance, and accelerator specifications</p></li>
    /// </ul>
    /// <p>Amazon ECS automatically selects the instances that match the specified criteria.</p>
    pub fn set_instance_requirements(mut self, input: ::std::option::Option<crate::types::InstanceRequirementsRequest>) -> Self {
        self.instance_requirements = input;
        self
    }
    /// <p>The instance requirements. You can specify:</p>
    /// <ul>
    /// <li>
    /// <p>The instance types</p></li>
    /// <li>
    /// <p>Instance requirements such as vCPU count, memory, network performance, and accelerator specifications</p></li>
    /// </ul>
    /// <p>Amazon ECS automatically selects the instances that match the specified criteria.</p>
    pub fn get_instance_requirements(&self) -> &::std::option::Option<crate::types::InstanceRequirementsRequest> {
        &self.instance_requirements
    }
    /// Consumes the builder and constructs a [`InstanceLaunchTemplate`](crate::types::InstanceLaunchTemplate).
    /// This method will fail if any of the following fields are not set:
    /// - [`ec2_instance_profile_arn`](crate::types::builders::InstanceLaunchTemplateBuilder::ec2_instance_profile_arn)
    pub fn build(self) -> ::std::result::Result<crate::types::InstanceLaunchTemplate, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::InstanceLaunchTemplate {
            ec2_instance_profile_arn: self.ec2_instance_profile_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "ec2_instance_profile_arn",
                    "ec2_instance_profile_arn was not specified but it is required when building InstanceLaunchTemplate",
                )
            })?,
            network_configuration: self.network_configuration,
            storage_configuration: self.storage_configuration,
            monitoring: self.monitoring,
            instance_requirements: self.instance_requirements,
        })
    }
}
