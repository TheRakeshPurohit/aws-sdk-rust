// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The header matching rules for test traffic routing in Amazon ECS blue/green deployments. These rules determine how incoming requests are matched based on HTTP headers to route test traffic to the new service revision.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ServiceConnectTestTrafficHeaderMatchRules {
    /// <p>The exact value that the HTTP header must match for the test traffic routing rule to apply. This provides precise control over which requests are routed to the new service revision during blue/green deployments.</p>
    pub exact: ::std::string::String,
}
impl ServiceConnectTestTrafficHeaderMatchRules {
    /// <p>The exact value that the HTTP header must match for the test traffic routing rule to apply. This provides precise control over which requests are routed to the new service revision during blue/green deployments.</p>
    pub fn exact(&self) -> &str {
        use std::ops::Deref;
        self.exact.deref()
    }
}
impl ServiceConnectTestTrafficHeaderMatchRules {
    /// Creates a new builder-style object to manufacture [`ServiceConnectTestTrafficHeaderMatchRules`](crate::types::ServiceConnectTestTrafficHeaderMatchRules).
    pub fn builder() -> crate::types::builders::ServiceConnectTestTrafficHeaderMatchRulesBuilder {
        crate::types::builders::ServiceConnectTestTrafficHeaderMatchRulesBuilder::default()
    }
}

/// A builder for [`ServiceConnectTestTrafficHeaderMatchRules`](crate::types::ServiceConnectTestTrafficHeaderMatchRules).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ServiceConnectTestTrafficHeaderMatchRulesBuilder {
    pub(crate) exact: ::std::option::Option<::std::string::String>,
}
impl ServiceConnectTestTrafficHeaderMatchRulesBuilder {
    /// <p>The exact value that the HTTP header must match for the test traffic routing rule to apply. This provides precise control over which requests are routed to the new service revision during blue/green deployments.</p>
    /// This field is required.
    pub fn exact(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.exact = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The exact value that the HTTP header must match for the test traffic routing rule to apply. This provides precise control over which requests are routed to the new service revision during blue/green deployments.</p>
    pub fn set_exact(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.exact = input;
        self
    }
    /// <p>The exact value that the HTTP header must match for the test traffic routing rule to apply. This provides precise control over which requests are routed to the new service revision during blue/green deployments.</p>
    pub fn get_exact(&self) -> &::std::option::Option<::std::string::String> {
        &self.exact
    }
    /// Consumes the builder and constructs a [`ServiceConnectTestTrafficHeaderMatchRules`](crate::types::ServiceConnectTestTrafficHeaderMatchRules).
    /// This method will fail if any of the following fields are not set:
    /// - [`exact`](crate::types::builders::ServiceConnectTestTrafficHeaderMatchRulesBuilder::exact)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::ServiceConnectTestTrafficHeaderMatchRules, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ServiceConnectTestTrafficHeaderMatchRules {
            exact: self.exact.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "exact",
                    "exact was not specified but it is required when building ServiceConnectTestTrafficHeaderMatchRules",
                )
            })?,
        })
    }
}
