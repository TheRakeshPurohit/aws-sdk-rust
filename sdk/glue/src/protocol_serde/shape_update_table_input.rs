// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_table_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_table::UpdateTableInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.catalog_id {
        object.key("CatalogId").string(var_1.as_str());
    }
    if let Some(var_2) = &input.database_name {
        object.key("DatabaseName").string(var_2.as_str());
    }
    if let Some(var_3) = &input.name {
        object.key("Name").string(var_3.as_str());
    }
    if let Some(var_4) = &input.table_input {
        #[allow(unused_mut)]
        let mut object_5 = object.key("TableInput").start_object();
        crate::protocol_serde::shape_table_input::ser_table_input(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.skip_archive {
        object.key("SkipArchive").boolean(*var_6);
    }
    if let Some(var_7) = &input.transaction_id {
        object.key("TransactionId").string(var_7.as_str());
    }
    if let Some(var_8) = &input.version_id {
        object.key("VersionId").string(var_8.as_str());
    }
    if let Some(var_9) = &input.view_update_action {
        object.key("ViewUpdateAction").string(var_9.as_str());
    }
    if let Some(var_10) = &input.force {
        object.key("Force").boolean(*var_10);
    }
    if let Some(var_11) = &input.update_open_table_format_input {
        #[allow(unused_mut)]
        let mut object_12 = object.key("UpdateOpenTableFormatInput").start_object();
        crate::protocol_serde::shape_update_open_table_format_input::ser_update_open_table_format_input(&mut object_12, var_11)?;
        object_12.finish();
    }
    Ok(())
}
