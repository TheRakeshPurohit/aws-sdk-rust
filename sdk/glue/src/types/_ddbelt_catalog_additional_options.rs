// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies additional options for DynamoDB ELT catalog operations.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DdbeltCatalogAdditionalOptions {
    /// <p>Specifies the DynamoDB export configuration for the ELT operation.</p>
    pub dynamodb_export: ::std::option::Option<::std::string::String>,
    /// <p>Specifies whether to unnest DynamoDB JSON format. When set to <code>true</code>, nested JSON structures in DynamoDB items are flattened.</p>
    pub dynamodb_unnest_ddb_json: bool,
}
impl DdbeltCatalogAdditionalOptions {
    /// <p>Specifies the DynamoDB export configuration for the ELT operation.</p>
    pub fn dynamodb_export(&self) -> ::std::option::Option<&str> {
        self.dynamodb_export.as_deref()
    }
    /// <p>Specifies whether to unnest DynamoDB JSON format. When set to <code>true</code>, nested JSON structures in DynamoDB items are flattened.</p>
    pub fn dynamodb_unnest_ddb_json(&self) -> bool {
        self.dynamodb_unnest_ddb_json
    }
}
impl DdbeltCatalogAdditionalOptions {
    /// Creates a new builder-style object to manufacture [`DdbeltCatalogAdditionalOptions`](crate::types::DdbeltCatalogAdditionalOptions).
    pub fn builder() -> crate::types::builders::DdbeltCatalogAdditionalOptionsBuilder {
        crate::types::builders::DdbeltCatalogAdditionalOptionsBuilder::default()
    }
}

/// A builder for [`DdbeltCatalogAdditionalOptions`](crate::types::DdbeltCatalogAdditionalOptions).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DdbeltCatalogAdditionalOptionsBuilder {
    pub(crate) dynamodb_export: ::std::option::Option<::std::string::String>,
    pub(crate) dynamodb_unnest_ddb_json: ::std::option::Option<bool>,
}
impl DdbeltCatalogAdditionalOptionsBuilder {
    /// <p>Specifies the DynamoDB export configuration for the ELT operation.</p>
    pub fn dynamodb_export(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.dynamodb_export = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the DynamoDB export configuration for the ELT operation.</p>
    pub fn set_dynamodb_export(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.dynamodb_export = input;
        self
    }
    /// <p>Specifies the DynamoDB export configuration for the ELT operation.</p>
    pub fn get_dynamodb_export(&self) -> &::std::option::Option<::std::string::String> {
        &self.dynamodb_export
    }
    /// <p>Specifies whether to unnest DynamoDB JSON format. When set to <code>true</code>, nested JSON structures in DynamoDB items are flattened.</p>
    pub fn dynamodb_unnest_ddb_json(mut self, input: bool) -> Self {
        self.dynamodb_unnest_ddb_json = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether to unnest DynamoDB JSON format. When set to <code>true</code>, nested JSON structures in DynamoDB items are flattened.</p>
    pub fn set_dynamodb_unnest_ddb_json(mut self, input: ::std::option::Option<bool>) -> Self {
        self.dynamodb_unnest_ddb_json = input;
        self
    }
    /// <p>Specifies whether to unnest DynamoDB JSON format. When set to <code>true</code>, nested JSON structures in DynamoDB items are flattened.</p>
    pub fn get_dynamodb_unnest_ddb_json(&self) -> &::std::option::Option<bool> {
        &self.dynamodb_unnest_ddb_json
    }
    /// Consumes the builder and constructs a [`DdbeltCatalogAdditionalOptions`](crate::types::DdbeltCatalogAdditionalOptions).
    pub fn build(self) -> crate::types::DdbeltCatalogAdditionalOptions {
        crate::types::DdbeltCatalogAdditionalOptions {
            dynamodb_export: self.dynamodb_export,
            dynamodb_unnest_ddb_json: self.dynamodb_unnest_ddb_json.unwrap_or_default(),
        }
    }
}
