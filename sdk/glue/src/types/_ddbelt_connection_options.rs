// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies connection options for DynamoDB ELT (Extract, Load, Transform) operations. This structure contains configuration parameters for connecting to and extracting data from DynamoDB tables using the ELT connector.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DdbeltConnectionOptions {
    /// <p>Specifies the export type for DynamoDB data extraction. This parameter determines how data is exported from the DynamoDB table during the ELT process.</p>
    pub dynamodb_export: ::std::option::Option<crate::types::DdbExportType>,
    /// <p>A boolean value that specifies whether to unnest DynamoDB JSON format during data extraction. When set to <code>true</code>, the connector will flatten nested JSON structures from DynamoDB items. When set to <code>false</code>, the original DynamoDB JSON structure is preserved.</p>
    pub dynamodb_unnest_ddb_json: bool,
    /// <p>The Amazon Resource Name (ARN) of the DynamoDB table to extract data from. This parameter specifies the source table for the ELT operation.</p>
    pub dynamodb_table_arn: ::std::string::String,
    /// <p>The name of the Amazon S3 bucket used for intermediate storage during the DynamoDB ELT process. This bucket is used to temporarily store exported DynamoDB data before it is processed by the ELT job.</p>
    pub dynamodb_s3_bucket: ::std::option::Option<::std::string::String>,
    /// <p>The S3 object key prefix for files stored in the intermediate S3 bucket during the DynamoDB ELT process. This prefix helps organize and identify the temporary files created during data extraction.</p>
    pub dynamodb_s3_prefix: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Web Services account ID of the owner of the S3 bucket specified in <code>DynamodbS3Bucket</code>. This parameter is required when the S3 bucket is owned by a different Amazon Web Services account than the one running the ELT job, enabling cross-account access to the intermediate storage bucket.</p>
    pub dynamodb_s3_bucket_owner: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the Amazon Web Services Security Token Service (STS) role to assume for accessing DynamoDB and S3 resources during the ELT operation. This role must have the necessary permissions to read from the DynamoDB table and write to the intermediate S3 bucket.</p>
    pub dynamodb_sts_role_arn: ::std::option::Option<::std::string::String>,
}
impl DdbeltConnectionOptions {
    /// <p>Specifies the export type for DynamoDB data extraction. This parameter determines how data is exported from the DynamoDB table during the ELT process.</p>
    pub fn dynamodb_export(&self) -> ::std::option::Option<&crate::types::DdbExportType> {
        self.dynamodb_export.as_ref()
    }
    /// <p>A boolean value that specifies whether to unnest DynamoDB JSON format during data extraction. When set to <code>true</code>, the connector will flatten nested JSON structures from DynamoDB items. When set to <code>false</code>, the original DynamoDB JSON structure is preserved.</p>
    pub fn dynamodb_unnest_ddb_json(&self) -> bool {
        self.dynamodb_unnest_ddb_json
    }
    /// <p>The Amazon Resource Name (ARN) of the DynamoDB table to extract data from. This parameter specifies the source table for the ELT operation.</p>
    pub fn dynamodb_table_arn(&self) -> &str {
        use std::ops::Deref;
        self.dynamodb_table_arn.deref()
    }
    /// <p>The name of the Amazon S3 bucket used for intermediate storage during the DynamoDB ELT process. This bucket is used to temporarily store exported DynamoDB data before it is processed by the ELT job.</p>
    pub fn dynamodb_s3_bucket(&self) -> ::std::option::Option<&str> {
        self.dynamodb_s3_bucket.as_deref()
    }
    /// <p>The S3 object key prefix for files stored in the intermediate S3 bucket during the DynamoDB ELT process. This prefix helps organize and identify the temporary files created during data extraction.</p>
    pub fn dynamodb_s3_prefix(&self) -> ::std::option::Option<&str> {
        self.dynamodb_s3_prefix.as_deref()
    }
    /// <p>The Amazon Web Services account ID of the owner of the S3 bucket specified in <code>DynamodbS3Bucket</code>. This parameter is required when the S3 bucket is owned by a different Amazon Web Services account than the one running the ELT job, enabling cross-account access to the intermediate storage bucket.</p>
    pub fn dynamodb_s3_bucket_owner(&self) -> ::std::option::Option<&str> {
        self.dynamodb_s3_bucket_owner.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon Web Services Security Token Service (STS) role to assume for accessing DynamoDB and S3 resources during the ELT operation. This role must have the necessary permissions to read from the DynamoDB table and write to the intermediate S3 bucket.</p>
    pub fn dynamodb_sts_role_arn(&self) -> ::std::option::Option<&str> {
        self.dynamodb_sts_role_arn.as_deref()
    }
}
impl DdbeltConnectionOptions {
    /// Creates a new builder-style object to manufacture [`DdbeltConnectionOptions`](crate::types::DdbeltConnectionOptions).
    pub fn builder() -> crate::types::builders::DdbeltConnectionOptionsBuilder {
        crate::types::builders::DdbeltConnectionOptionsBuilder::default()
    }
}

/// A builder for [`DdbeltConnectionOptions`](crate::types::DdbeltConnectionOptions).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DdbeltConnectionOptionsBuilder {
    pub(crate) dynamodb_export: ::std::option::Option<crate::types::DdbExportType>,
    pub(crate) dynamodb_unnest_ddb_json: ::std::option::Option<bool>,
    pub(crate) dynamodb_table_arn: ::std::option::Option<::std::string::String>,
    pub(crate) dynamodb_s3_bucket: ::std::option::Option<::std::string::String>,
    pub(crate) dynamodb_s3_prefix: ::std::option::Option<::std::string::String>,
    pub(crate) dynamodb_s3_bucket_owner: ::std::option::Option<::std::string::String>,
    pub(crate) dynamodb_sts_role_arn: ::std::option::Option<::std::string::String>,
}
impl DdbeltConnectionOptionsBuilder {
    /// <p>Specifies the export type for DynamoDB data extraction. This parameter determines how data is exported from the DynamoDB table during the ELT process.</p>
    pub fn dynamodb_export(mut self, input: crate::types::DdbExportType) -> Self {
        self.dynamodb_export = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the export type for DynamoDB data extraction. This parameter determines how data is exported from the DynamoDB table during the ELT process.</p>
    pub fn set_dynamodb_export(mut self, input: ::std::option::Option<crate::types::DdbExportType>) -> Self {
        self.dynamodb_export = input;
        self
    }
    /// <p>Specifies the export type for DynamoDB data extraction. This parameter determines how data is exported from the DynamoDB table during the ELT process.</p>
    pub fn get_dynamodb_export(&self) -> &::std::option::Option<crate::types::DdbExportType> {
        &self.dynamodb_export
    }
    /// <p>A boolean value that specifies whether to unnest DynamoDB JSON format during data extraction. When set to <code>true</code>, the connector will flatten nested JSON structures from DynamoDB items. When set to <code>false</code>, the original DynamoDB JSON structure is preserved.</p>
    pub fn dynamodb_unnest_ddb_json(mut self, input: bool) -> Self {
        self.dynamodb_unnest_ddb_json = ::std::option::Option::Some(input);
        self
    }
    /// <p>A boolean value that specifies whether to unnest DynamoDB JSON format during data extraction. When set to <code>true</code>, the connector will flatten nested JSON structures from DynamoDB items. When set to <code>false</code>, the original DynamoDB JSON structure is preserved.</p>
    pub fn set_dynamodb_unnest_ddb_json(mut self, input: ::std::option::Option<bool>) -> Self {
        self.dynamodb_unnest_ddb_json = input;
        self
    }
    /// <p>A boolean value that specifies whether to unnest DynamoDB JSON format during data extraction. When set to <code>true</code>, the connector will flatten nested JSON structures from DynamoDB items. When set to <code>false</code>, the original DynamoDB JSON structure is preserved.</p>
    pub fn get_dynamodb_unnest_ddb_json(&self) -> &::std::option::Option<bool> {
        &self.dynamodb_unnest_ddb_json
    }
    /// <p>The Amazon Resource Name (ARN) of the DynamoDB table to extract data from. This parameter specifies the source table for the ELT operation.</p>
    /// This field is required.
    pub fn dynamodb_table_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.dynamodb_table_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the DynamoDB table to extract data from. This parameter specifies the source table for the ELT operation.</p>
    pub fn set_dynamodb_table_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.dynamodb_table_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the DynamoDB table to extract data from. This parameter specifies the source table for the ELT operation.</p>
    pub fn get_dynamodb_table_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.dynamodb_table_arn
    }
    /// <p>The name of the Amazon S3 bucket used for intermediate storage during the DynamoDB ELT process. This bucket is used to temporarily store exported DynamoDB data before it is processed by the ELT job.</p>
    pub fn dynamodb_s3_bucket(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.dynamodb_s3_bucket = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the Amazon S3 bucket used for intermediate storage during the DynamoDB ELT process. This bucket is used to temporarily store exported DynamoDB data before it is processed by the ELT job.</p>
    pub fn set_dynamodb_s3_bucket(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.dynamodb_s3_bucket = input;
        self
    }
    /// <p>The name of the Amazon S3 bucket used for intermediate storage during the DynamoDB ELT process. This bucket is used to temporarily store exported DynamoDB data before it is processed by the ELT job.</p>
    pub fn get_dynamodb_s3_bucket(&self) -> &::std::option::Option<::std::string::String> {
        &self.dynamodb_s3_bucket
    }
    /// <p>The S3 object key prefix for files stored in the intermediate S3 bucket during the DynamoDB ELT process. This prefix helps organize and identify the temporary files created during data extraction.</p>
    pub fn dynamodb_s3_prefix(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.dynamodb_s3_prefix = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The S3 object key prefix for files stored in the intermediate S3 bucket during the DynamoDB ELT process. This prefix helps organize and identify the temporary files created during data extraction.</p>
    pub fn set_dynamodb_s3_prefix(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.dynamodb_s3_prefix = input;
        self
    }
    /// <p>The S3 object key prefix for files stored in the intermediate S3 bucket during the DynamoDB ELT process. This prefix helps organize and identify the temporary files created during data extraction.</p>
    pub fn get_dynamodb_s3_prefix(&self) -> &::std::option::Option<::std::string::String> {
        &self.dynamodb_s3_prefix
    }
    /// <p>The Amazon Web Services account ID of the owner of the S3 bucket specified in <code>DynamodbS3Bucket</code>. This parameter is required when the S3 bucket is owned by a different Amazon Web Services account than the one running the ELT job, enabling cross-account access to the intermediate storage bucket.</p>
    pub fn dynamodb_s3_bucket_owner(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.dynamodb_s3_bucket_owner = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID of the owner of the S3 bucket specified in <code>DynamodbS3Bucket</code>. This parameter is required when the S3 bucket is owned by a different Amazon Web Services account than the one running the ELT job, enabling cross-account access to the intermediate storage bucket.</p>
    pub fn set_dynamodb_s3_bucket_owner(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.dynamodb_s3_bucket_owner = input;
        self
    }
    /// <p>The Amazon Web Services account ID of the owner of the S3 bucket specified in <code>DynamodbS3Bucket</code>. This parameter is required when the S3 bucket is owned by a different Amazon Web Services account than the one running the ELT job, enabling cross-account access to the intermediate storage bucket.</p>
    pub fn get_dynamodb_s3_bucket_owner(&self) -> &::std::option::Option<::std::string::String> {
        &self.dynamodb_s3_bucket_owner
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon Web Services Security Token Service (STS) role to assume for accessing DynamoDB and S3 resources during the ELT operation. This role must have the necessary permissions to read from the DynamoDB table and write to the intermediate S3 bucket.</p>
    pub fn dynamodb_sts_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.dynamodb_sts_role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon Web Services Security Token Service (STS) role to assume for accessing DynamoDB and S3 resources during the ELT operation. This role must have the necessary permissions to read from the DynamoDB table and write to the intermediate S3 bucket.</p>
    pub fn set_dynamodb_sts_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.dynamodb_sts_role_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon Web Services Security Token Service (STS) role to assume for accessing DynamoDB and S3 resources during the ELT operation. This role must have the necessary permissions to read from the DynamoDB table and write to the intermediate S3 bucket.</p>
    pub fn get_dynamodb_sts_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.dynamodb_sts_role_arn
    }
    /// Consumes the builder and constructs a [`DdbeltConnectionOptions`](crate::types::DdbeltConnectionOptions).
    /// This method will fail if any of the following fields are not set:
    /// - [`dynamodb_table_arn`](crate::types::builders::DdbeltConnectionOptionsBuilder::dynamodb_table_arn)
    pub fn build(self) -> ::std::result::Result<crate::types::DdbeltConnectionOptions, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DdbeltConnectionOptions {
            dynamodb_export: self.dynamodb_export,
            dynamodb_unnest_ddb_json: self.dynamodb_unnest_ddb_json.unwrap_or_default(),
            dynamodb_table_arn: self.dynamodb_table_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "dynamodb_table_arn",
                    "dynamodb_table_arn was not specified but it is required when building DdbeltConnectionOptions",
                )
            })?,
            dynamodb_s3_bucket: self.dynamodb_s3_bucket,
            dynamodb_s3_prefix: self.dynamodb_s3_prefix,
            dynamodb_s3_bucket_owner: self.dynamodb_s3_bucket_owner,
            dynamodb_sts_role_arn: self.dynamodb_sts_role_arn,
        })
    }
}
