// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies a group of filters with a logical operator that determines how the filters are combined to evaluate routing conditions.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GroupFilters {
    /// <p>The name of the filter group.</p>
    pub group_name: ::std::string::String,
    /// <p>A list of filter expressions that define the conditions for this group.</p>
    pub filters: ::std::vec::Vec<crate::types::FilterExpression>,
    /// <p>The logical operator used to combine the filters in this group. Determines whether all filters must match (AND) or any filter can match (OR).</p>
    pub logical_operator: crate::types::FilterLogicalOperator,
}
impl GroupFilters {
    /// <p>The name of the filter group.</p>
    pub fn group_name(&self) -> &str {
        use std::ops::Deref;
        self.group_name.deref()
    }
    /// <p>A list of filter expressions that define the conditions for this group.</p>
    pub fn filters(&self) -> &[crate::types::FilterExpression] {
        use std::ops::Deref;
        self.filters.deref()
    }
    /// <p>The logical operator used to combine the filters in this group. Determines whether all filters must match (AND) or any filter can match (OR).</p>
    pub fn logical_operator(&self) -> &crate::types::FilterLogicalOperator {
        &self.logical_operator
    }
}
impl GroupFilters {
    /// Creates a new builder-style object to manufacture [`GroupFilters`](crate::types::GroupFilters).
    pub fn builder() -> crate::types::builders::GroupFiltersBuilder {
        crate::types::builders::GroupFiltersBuilder::default()
    }
}

/// A builder for [`GroupFilters`](crate::types::GroupFilters).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GroupFiltersBuilder {
    pub(crate) group_name: ::std::option::Option<::std::string::String>,
    pub(crate) filters: ::std::option::Option<::std::vec::Vec<crate::types::FilterExpression>>,
    pub(crate) logical_operator: ::std::option::Option<crate::types::FilterLogicalOperator>,
}
impl GroupFiltersBuilder {
    /// <p>The name of the filter group.</p>
    /// This field is required.
    pub fn group_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.group_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the filter group.</p>
    pub fn set_group_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.group_name = input;
        self
    }
    /// <p>The name of the filter group.</p>
    pub fn get_group_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.group_name
    }
    /// Appends an item to `filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p>A list of filter expressions that define the conditions for this group.</p>
    pub fn filters(mut self, input: crate::types::FilterExpression) -> Self {
        let mut v = self.filters.unwrap_or_default();
        v.push(input);
        self.filters = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of filter expressions that define the conditions for this group.</p>
    pub fn set_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::FilterExpression>>) -> Self {
        self.filters = input;
        self
    }
    /// <p>A list of filter expressions that define the conditions for this group.</p>
    pub fn get_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::FilterExpression>> {
        &self.filters
    }
    /// <p>The logical operator used to combine the filters in this group. Determines whether all filters must match (AND) or any filter can match (OR).</p>
    /// This field is required.
    pub fn logical_operator(mut self, input: crate::types::FilterLogicalOperator) -> Self {
        self.logical_operator = ::std::option::Option::Some(input);
        self
    }
    /// <p>The logical operator used to combine the filters in this group. Determines whether all filters must match (AND) or any filter can match (OR).</p>
    pub fn set_logical_operator(mut self, input: ::std::option::Option<crate::types::FilterLogicalOperator>) -> Self {
        self.logical_operator = input;
        self
    }
    /// <p>The logical operator used to combine the filters in this group. Determines whether all filters must match (AND) or any filter can match (OR).</p>
    pub fn get_logical_operator(&self) -> &::std::option::Option<crate::types::FilterLogicalOperator> {
        &self.logical_operator
    }
    /// Consumes the builder and constructs a [`GroupFilters`](crate::types::GroupFilters).
    /// This method will fail if any of the following fields are not set:
    /// - [`group_name`](crate::types::builders::GroupFiltersBuilder::group_name)
    /// - [`filters`](crate::types::builders::GroupFiltersBuilder::filters)
    /// - [`logical_operator`](crate::types::builders::GroupFiltersBuilder::logical_operator)
    pub fn build(self) -> ::std::result::Result<crate::types::GroupFilters, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::GroupFilters {
            group_name: self.group_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "group_name",
                    "group_name was not specified but it is required when building GroupFilters",
                )
            })?,
            filters: self.filters.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "filters",
                    "filters was not specified but it is required when building GroupFilters",
                )
            })?,
            logical_operator: self.logical_operator.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "logical_operator",
                    "logical_operator was not specified but it is required when building GroupFilters",
                )
            })?,
        })
    }
}
