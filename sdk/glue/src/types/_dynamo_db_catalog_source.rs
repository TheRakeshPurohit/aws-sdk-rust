// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies a DynamoDB data source in the Glue Data Catalog.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DynamoDbCatalogSource {
    /// <p>The name of the data source.</p>
    pub name: ::std::string::String,
    /// <p>The name of the database to read from.</p>
    pub database: ::std::string::String,
    /// <p>The name of the table in the database to read from.</p>
    pub table: ::std::string::String,
    /// <p>Specifies whether Point-in-Time Recovery (PITR) is enabled for the DynamoDB table. When set to <code>true</code>, allows reading from a specific point in time. The default value is <code>false</code>.</p>
    pub pitr_enabled: ::std::option::Option<bool>,
    /// <p>Specifies additional connection options for the DynamoDB data source.</p>
    pub additional_options: ::std::option::Option<crate::types::DdbeltCatalogAdditionalOptions>,
}
impl DynamoDbCatalogSource {
    /// <p>The name of the data source.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The name of the database to read from.</p>
    pub fn database(&self) -> &str {
        use std::ops::Deref;
        self.database.deref()
    }
    /// <p>The name of the table in the database to read from.</p>
    pub fn table(&self) -> &str {
        use std::ops::Deref;
        self.table.deref()
    }
    /// <p>Specifies whether Point-in-Time Recovery (PITR) is enabled for the DynamoDB table. When set to <code>true</code>, allows reading from a specific point in time. The default value is <code>false</code>.</p>
    pub fn pitr_enabled(&self) -> ::std::option::Option<bool> {
        self.pitr_enabled
    }
    /// <p>Specifies additional connection options for the DynamoDB data source.</p>
    pub fn additional_options(&self) -> ::std::option::Option<&crate::types::DdbeltCatalogAdditionalOptions> {
        self.additional_options.as_ref()
    }
}
impl DynamoDbCatalogSource {
    /// Creates a new builder-style object to manufacture [`DynamoDbCatalogSource`](crate::types::DynamoDbCatalogSource).
    pub fn builder() -> crate::types::builders::DynamoDbCatalogSourceBuilder {
        crate::types::builders::DynamoDbCatalogSourceBuilder::default()
    }
}

/// A builder for [`DynamoDbCatalogSource`](crate::types::DynamoDbCatalogSource).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DynamoDbCatalogSourceBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) database: ::std::option::Option<::std::string::String>,
    pub(crate) table: ::std::option::Option<::std::string::String>,
    pub(crate) pitr_enabled: ::std::option::Option<bool>,
    pub(crate) additional_options: ::std::option::Option<crate::types::DdbeltCatalogAdditionalOptions>,
}
impl DynamoDbCatalogSourceBuilder {
    /// <p>The name of the data source.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the data source.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the data source.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The name of the database to read from.</p>
    /// This field is required.
    pub fn database(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.database = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the database to read from.</p>
    pub fn set_database(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.database = input;
        self
    }
    /// <p>The name of the database to read from.</p>
    pub fn get_database(&self) -> &::std::option::Option<::std::string::String> {
        &self.database
    }
    /// <p>The name of the table in the database to read from.</p>
    /// This field is required.
    pub fn table(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.table = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the table in the database to read from.</p>
    pub fn set_table(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.table = input;
        self
    }
    /// <p>The name of the table in the database to read from.</p>
    pub fn get_table(&self) -> &::std::option::Option<::std::string::String> {
        &self.table
    }
    /// <p>Specifies whether Point-in-Time Recovery (PITR) is enabled for the DynamoDB table. When set to <code>true</code>, allows reading from a specific point in time. The default value is <code>false</code>.</p>
    pub fn pitr_enabled(mut self, input: bool) -> Self {
        self.pitr_enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether Point-in-Time Recovery (PITR) is enabled for the DynamoDB table. When set to <code>true</code>, allows reading from a specific point in time. The default value is <code>false</code>.</p>
    pub fn set_pitr_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.pitr_enabled = input;
        self
    }
    /// <p>Specifies whether Point-in-Time Recovery (PITR) is enabled for the DynamoDB table. When set to <code>true</code>, allows reading from a specific point in time. The default value is <code>false</code>.</p>
    pub fn get_pitr_enabled(&self) -> &::std::option::Option<bool> {
        &self.pitr_enabled
    }
    /// <p>Specifies additional connection options for the DynamoDB data source.</p>
    pub fn additional_options(mut self, input: crate::types::DdbeltCatalogAdditionalOptions) -> Self {
        self.additional_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies additional connection options for the DynamoDB data source.</p>
    pub fn set_additional_options(mut self, input: ::std::option::Option<crate::types::DdbeltCatalogAdditionalOptions>) -> Self {
        self.additional_options = input;
        self
    }
    /// <p>Specifies additional connection options for the DynamoDB data source.</p>
    pub fn get_additional_options(&self) -> &::std::option::Option<crate::types::DdbeltCatalogAdditionalOptions> {
        &self.additional_options
    }
    /// Consumes the builder and constructs a [`DynamoDbCatalogSource`](crate::types::DynamoDbCatalogSource).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::DynamoDbCatalogSourceBuilder::name)
    /// - [`database`](crate::types::builders::DynamoDbCatalogSourceBuilder::database)
    /// - [`table`](crate::types::builders::DynamoDbCatalogSourceBuilder::table)
    pub fn build(self) -> ::std::result::Result<crate::types::DynamoDbCatalogSource, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DynamoDbCatalogSource {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building DynamoDbCatalogSource",
                )
            })?,
            database: self.database.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "database",
                    "database was not specified but it is required when building DynamoDbCatalogSource",
                )
            })?,
            table: self.table.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "table",
                    "table was not specified but it is required when building DynamoDbCatalogSource",
                )
            })?,
            pitr_enabled: self.pitr_enabled,
            additional_options: self.additional_options,
        })
    }
}
