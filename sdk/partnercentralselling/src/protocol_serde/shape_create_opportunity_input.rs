// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_opportunity_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_opportunity::CreateOpportunityInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.catalog {
        object.key("Catalog").string(var_1.as_str());
    }
    if let Some(var_2) = &input.primary_needs_from_aws {
        let mut array_3 = object.key("PrimaryNeedsFromAws").start_array();
        for item_4 in var_2 {
            {
                array_3.value().string(item_4.as_str());
            }
        }
        array_3.finish();
    }
    if let Some(var_5) = &input.national_security {
        object.key("NationalSecurity").string(var_5.as_str());
    }
    if let Some(var_6) = &input.partner_opportunity_identifier {
        object.key("PartnerOpportunityIdentifier").string(var_6.as_str());
    }
    if let Some(var_7) = &input.customer {
        #[allow(unused_mut)]
        let mut object_8 = object.key("Customer").start_object();
        crate::protocol_serde::shape_customer::ser_customer(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.project {
        #[allow(unused_mut)]
        let mut object_10 = object.key("Project").start_object();
        crate::protocol_serde::shape_project::ser_project(&mut object_10, var_9)?;
        object_10.finish();
    }
    if let Some(var_11) = &input.opportunity_type {
        object.key("OpportunityType").string(var_11.as_str());
    }
    if let Some(var_12) = &input.marketing {
        #[allow(unused_mut)]
        let mut object_13 = object.key("Marketing").start_object();
        crate::protocol_serde::shape_marketing::ser_marketing(&mut object_13, var_12)?;
        object_13.finish();
    }
    if let Some(var_14) = &input.software_revenue {
        #[allow(unused_mut)]
        let mut object_15 = object.key("SoftwareRevenue").start_object();
        crate::protocol_serde::shape_software_revenue::ser_software_revenue(&mut object_15, var_14)?;
        object_15.finish();
    }
    if let Some(var_16) = &input.client_token {
        object.key("ClientToken").string(var_16.as_str());
    }
    if let Some(var_17) = &input.life_cycle {
        #[allow(unused_mut)]
        let mut object_18 = object.key("LifeCycle").start_object();
        crate::protocol_serde::shape_life_cycle::ser_life_cycle(&mut object_18, var_17)?;
        object_18.finish();
    }
    if let Some(var_19) = &input.origin {
        object.key("Origin").string(var_19.as_str());
    }
    if let Some(var_20) = &input.opportunity_team {
        let mut array_21 = object.key("OpportunityTeam").start_array();
        for item_22 in var_20 {
            {
                #[allow(unused_mut)]
                let mut object_23 = array_21.value().start_object();
                crate::protocol_serde::shape_contact::ser_contact(&mut object_23, item_22)?;
                object_23.finish();
            }
        }
        array_21.finish();
    }
    if let Some(var_24) = &input.tags {
        let mut array_25 = object.key("Tags").start_array();
        for item_26 in var_24 {
            {
                #[allow(unused_mut)]
                let mut object_27 = array_25.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_27, item_26)?;
                object_27.finish();
            }
        }
        array_25.finish();
    }
    Ok(())
}
