// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::list_opportunities::_list_opportunities_output::ListOpportunitiesOutputBuilder;

pub use crate::operation::list_opportunities::_list_opportunities_input::ListOpportunitiesInputBuilder;

impl crate::operation::list_opportunities::builders::ListOpportunitiesInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::list_opportunities::ListOpportunitiesOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_opportunities::ListOpportunitiesError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.list_opportunities();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `ListOpportunities`.
///
/// <p>This request accepts a list of filters that retrieve opportunity subsets as well as sort options. This feature is available to partners from <a href="https://partnercentral.awspartner.com/">Partner Central</a> using the <code>ListOpportunities</code> API action.</p>
/// <p>To synchronize your system with Amazon Web Services, list only the opportunities that were newly created or updated. We recommend you rely on events emitted by the service into your Amazon Web Services account’s Amazon EventBridge default event bus. You can also use the <code>ListOpportunities</code> action.</p>
/// <p>We recommend the following approach:</p>
/// <ol>
/// <li>
/// <p>Find the latest <code>LastModifiedDate</code> that you stored, and only use the values that came from Amazon Web Services. Don’t use values generated by your system.</p></li>
/// <li>
/// <p>When you send a <code>ListOpportunities</code> request, submit the date in ISO 8601 format in the <code>AfterLastModifiedDate</code> filter.</p></li>
/// <li>
/// <p>Amazon Web Services only returns opportunities created or updated on or after that date and time. Use <code>NextToken</code> to iterate over all pages.</p></li>
/// </ol>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct ListOpportunitiesFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::list_opportunities::builders::ListOpportunitiesInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::list_opportunities::ListOpportunitiesOutput,
        crate::operation::list_opportunities::ListOpportunitiesError,
    > for ListOpportunitiesFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::list_opportunities::ListOpportunitiesOutput,
            crate::operation::list_opportunities::ListOpportunitiesError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl ListOpportunitiesFluentBuilder {
    /// Creates a new `ListOpportunitiesFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the ListOpportunities as a reference.
    pub fn as_input(&self) -> &crate::operation::list_opportunities::builders::ListOpportunitiesInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_opportunities::ListOpportunitiesOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_opportunities::ListOpportunitiesError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::list_opportunities::ListOpportunities::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::list_opportunities::ListOpportunities::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::list_opportunities::ListOpportunitiesOutput,
        crate::operation::list_opportunities::ListOpportunitiesError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::list_opportunities::paginator::ListOpportunitiesPaginator::send) which returns a [`PaginationStream`](aws_smithy_async::future::pagination_stream::PaginationStream).
    pub fn into_paginator(self) -> crate::operation::list_opportunities::paginator::ListOpportunitiesPaginator {
        crate::operation::list_opportunities::paginator::ListOpportunitiesPaginator::new(self.handle, self.inner)
    }
    /// <p>Specifies the catalog associated with the request. This field takes a string value from a predefined list: <code>AWS</code> or <code>Sandbox</code>. The catalog determines which environment the opportunities are listed in. Use <code>AWS</code> for listing real opportunities in the Amazon Web Services catalog, and <code>Sandbox</code> for testing in secure, isolated environments.</p>
    pub fn catalog(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.catalog(input.into());
        self
    }
    /// <p>Specifies the catalog associated with the request. This field takes a string value from a predefined list: <code>AWS</code> or <code>Sandbox</code>. The catalog determines which environment the opportunities are listed in. Use <code>AWS</code> for listing real opportunities in the Amazon Web Services catalog, and <code>Sandbox</code> for testing in secure, isolated environments.</p>
    pub fn set_catalog(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_catalog(input);
        self
    }
    /// <p>Specifies the catalog associated with the request. This field takes a string value from a predefined list: <code>AWS</code> or <code>Sandbox</code>. The catalog determines which environment the opportunities are listed in. Use <code>AWS</code> for listing real opportunities in the Amazon Web Services catalog, and <code>Sandbox</code> for testing in secure, isolated environments.</p>
    pub fn get_catalog(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_catalog()
    }
    /// <p>Specifies the maximum number of results to return in a single call. This limits the number of opportunities returned in the response to avoid providing too many results at once.</p>
    /// <p>Default: 20</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>Specifies the maximum number of results to return in a single call. This limits the number of opportunities returned in the response to avoid providing too many results at once.</p>
    /// <p>Default: 20</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>Specifies the maximum number of results to return in a single call. This limits the number of opportunities returned in the response to avoid providing too many results at once.</p>
    /// <p>Default: 20</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        self.inner.get_max_results()
    }
    /// <p>A pagination token used to retrieve the next set of results in subsequent calls. This token is included in the response only if there are additional result pages available.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>A pagination token used to retrieve the next set of results in subsequent calls. This token is included in the response only if there are additional result pages available.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>A pagination token used to retrieve the next set of results in subsequent calls. This token is included in the response only if there are additional result pages available.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_next_token()
    }
    /// <p>An object that specifies how the response is sorted. The default <code>Sort.SortBy</code> value is <code>LastModifiedDate</code>.</p>
    pub fn sort(mut self, input: crate::types::OpportunitySort) -> Self {
        self.inner = self.inner.sort(input);
        self
    }
    /// <p>An object that specifies how the response is sorted. The default <code>Sort.SortBy</code> value is <code>LastModifiedDate</code>.</p>
    pub fn set_sort(mut self, input: ::std::option::Option<crate::types::OpportunitySort>) -> Self {
        self.inner = self.inner.set_sort(input);
        self
    }
    /// <p>An object that specifies how the response is sorted. The default <code>Sort.SortBy</code> value is <code>LastModifiedDate</code>.</p>
    pub fn get_sort(&self) -> &::std::option::Option<crate::types::OpportunitySort> {
        self.inner.get_sort()
    }
    /// <p>Filters the opportunities based on their last modified date. This filter helps retrieve opportunities that were updated after the specified date, allowing partners to track recent changes or updates.</p>
    pub fn last_modified_date(mut self, input: crate::types::LastModifiedDate) -> Self {
        self.inner = self.inner.last_modified_date(input);
        self
    }
    /// <p>Filters the opportunities based on their last modified date. This filter helps retrieve opportunities that were updated after the specified date, allowing partners to track recent changes or updates.</p>
    pub fn set_last_modified_date(mut self, input: ::std::option::Option<crate::types::LastModifiedDate>) -> Self {
        self.inner = self.inner.set_last_modified_date(input);
        self
    }
    /// <p>Filters the opportunities based on their last modified date. This filter helps retrieve opportunities that were updated after the specified date, allowing partners to track recent changes or updates.</p>
    pub fn get_last_modified_date(&self) -> &::std::option::Option<crate::types::LastModifiedDate> {
        self.inner.get_last_modified_date()
    }
    ///
    /// Appends an item to `Identifier`.
    ///
    /// To override the contents of this collection use [`set_identifier`](Self::set_identifier).
    ///
    /// <p>Filters the opportunities based on the opportunity identifier. This allows partners to retrieve specific opportunities by providing their unique identifiers, ensuring precise results.</p>
    pub fn identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.identifier(input.into());
        self
    }
    /// <p>Filters the opportunities based on the opportunity identifier. This allows partners to retrieve specific opportunities by providing their unique identifiers, ensuring precise results.</p>
    pub fn set_identifier(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_identifier(input);
        self
    }
    /// <p>Filters the opportunities based on the opportunity identifier. This allows partners to retrieve specific opportunities by providing their unique identifiers, ensuring precise results.</p>
    pub fn get_identifier(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_identifier()
    }
    ///
    /// Appends an item to `LifeCycleStage`.
    ///
    /// To override the contents of this collection use [`set_life_cycle_stage`](Self::set_life_cycle_stage).
    ///
    /// <p>Filters the opportunities based on their lifecycle stage. This filter allows partners to retrieve opportunities at various stages in the sales cycle, such as <code>Qualified</code>, <code>Technical Validation</code>, <code>Business Validation</code>, or <code>Closed Won</code>.</p>
    pub fn life_cycle_stage(mut self, input: crate::types::Stage) -> Self {
        self.inner = self.inner.life_cycle_stage(input);
        self
    }
    /// <p>Filters the opportunities based on their lifecycle stage. This filter allows partners to retrieve opportunities at various stages in the sales cycle, such as <code>Qualified</code>, <code>Technical Validation</code>, <code>Business Validation</code>, or <code>Closed Won</code>.</p>
    pub fn set_life_cycle_stage(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Stage>>) -> Self {
        self.inner = self.inner.set_life_cycle_stage(input);
        self
    }
    /// <p>Filters the opportunities based on their lifecycle stage. This filter allows partners to retrieve opportunities at various stages in the sales cycle, such as <code>Qualified</code>, <code>Technical Validation</code>, <code>Business Validation</code>, or <code>Closed Won</code>.</p>
    pub fn get_life_cycle_stage(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Stage>> {
        self.inner.get_life_cycle_stage()
    }
    ///
    /// Appends an item to `LifeCycleReviewStatus`.
    ///
    /// To override the contents of this collection use [`set_life_cycle_review_status`](Self::set_life_cycle_review_status).
    ///
    /// <p>Filters the opportunities based on their current lifecycle approval status. Use this filter to retrieve opportunities with statuses such as <code>Pending Submission</code>, <code>In Review</code>, <code>Action Required</code>, or <code>Approved</code>.</p>
    pub fn life_cycle_review_status(mut self, input: crate::types::ReviewStatus) -> Self {
        self.inner = self.inner.life_cycle_review_status(input);
        self
    }
    /// <p>Filters the opportunities based on their current lifecycle approval status. Use this filter to retrieve opportunities with statuses such as <code>Pending Submission</code>, <code>In Review</code>, <code>Action Required</code>, or <code>Approved</code>.</p>
    pub fn set_life_cycle_review_status(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ReviewStatus>>) -> Self {
        self.inner = self.inner.set_life_cycle_review_status(input);
        self
    }
    /// <p>Filters the opportunities based on their current lifecycle approval status. Use this filter to retrieve opportunities with statuses such as <code>Pending Submission</code>, <code>In Review</code>, <code>Action Required</code>, or <code>Approved</code>.</p>
    pub fn get_life_cycle_review_status(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ReviewStatus>> {
        self.inner.get_life_cycle_review_status()
    }
    ///
    /// Appends an item to `CustomerCompanyName`.
    ///
    /// To override the contents of this collection use [`set_customer_company_name`](Self::set_customer_company_name).
    ///
    /// <p>Filters the opportunities based on the customer's company name. This allows partners to search for opportunities associated with a specific customer by matching the provided company name string.</p>
    pub fn customer_company_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.customer_company_name(input.into());
        self
    }
    /// <p>Filters the opportunities based on the customer's company name. This allows partners to search for opportunities associated with a specific customer by matching the provided company name string.</p>
    pub fn set_customer_company_name(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_customer_company_name(input);
        self
    }
    /// <p>Filters the opportunities based on the customer's company name. This allows partners to search for opportunities associated with a specific customer by matching the provided company name string.</p>
    pub fn get_customer_company_name(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_customer_company_name()
    }
}
