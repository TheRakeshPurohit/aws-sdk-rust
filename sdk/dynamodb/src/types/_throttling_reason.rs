// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the specific reason why a DynamoDB request was throttled and the ARN of the impacted resource. This helps identify exactly what resource is being throttled, what type of operation caused it, and why the throttling occurred.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ThrottlingReason {
    /// <p>The reason for throttling. The throttling reason follows a specific format: <code>ResourceType+OperationType+LimitType</code>:</p>
    /// <ul>
    /// <li>
    /// <p>Resource Type (What is being throttled): Table or Index</p></li>
    /// <li>
    /// <p>Operation Type (What kind of operation): Read or Write</p></li>
    /// <li>
    /// <p>Limit Type (Why the throttling occurred):</p>
    /// <ul>
    /// <li>
    /// <p><code>ProvisionedThroughputExceeded</code>: The request rate is exceeding the <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/provisioned-capacity-mode.html">provisioned throughput capacity</a> (read or write capacity units) configured for a table or a global secondary index (GSI) in provisioned capacity mode.</p></li>
    /// <li>
    /// <p><code>AccountLimitExceeded</code>: The request rate has caused a table or global secondary index (GSI) in on-demand mode to exceed the <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ServiceQuotas.html#default-limits-throughput">per-table account-level service quotas</a> for read/write throughput in the current Amazon Web Services Region.</p></li>
    /// <li>
    /// <p><code>KeyRangeThroughputExceeded</code>: The request rate directed at a specific partition key value has exceeded the <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/bp-partition-key-design.html">internal partition-level throughput limits</a>, indicating uneven access patterns across the table's or GSI's key space.</p></li>
    /// <li>
    /// <p><code>MaxOnDemandThroughputExceeded</code>: The request rate has exceeded the <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/on-demand-capacity-mode-max-throughput.html">configured maximum throughput limits</a> set for a table or index in on-demand capacity mode.</p></li>
    /// </ul></li>
    /// </ul>
    /// <p>Examples of complete throttling reasons:</p>
    /// <ul>
    /// <li>
    /// <p>TableReadProvisionedThroughputExceeded</p></li>
    /// <li>
    /// <p>IndexWriteAccountLimitExceeded</p></li>
    /// </ul>
    /// <p>This helps identify exactly what resource is being throttled, what type of operation caused it, and why the throttling occurred.</p>
    pub reason: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the DynamoDB table or index that experienced the throttling event.</p>
    pub resource: ::std::option::Option<::std::string::String>,
}
impl ThrottlingReason {
    /// <p>The reason for throttling. The throttling reason follows a specific format: <code>ResourceType+OperationType+LimitType</code>:</p>
    /// <ul>
    /// <li>
    /// <p>Resource Type (What is being throttled): Table or Index</p></li>
    /// <li>
    /// <p>Operation Type (What kind of operation): Read or Write</p></li>
    /// <li>
    /// <p>Limit Type (Why the throttling occurred):</p>
    /// <ul>
    /// <li>
    /// <p><code>ProvisionedThroughputExceeded</code>: The request rate is exceeding the <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/provisioned-capacity-mode.html">provisioned throughput capacity</a> (read or write capacity units) configured for a table or a global secondary index (GSI) in provisioned capacity mode.</p></li>
    /// <li>
    /// <p><code>AccountLimitExceeded</code>: The request rate has caused a table or global secondary index (GSI) in on-demand mode to exceed the <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ServiceQuotas.html#default-limits-throughput">per-table account-level service quotas</a> for read/write throughput in the current Amazon Web Services Region.</p></li>
    /// <li>
    /// <p><code>KeyRangeThroughputExceeded</code>: The request rate directed at a specific partition key value has exceeded the <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/bp-partition-key-design.html">internal partition-level throughput limits</a>, indicating uneven access patterns across the table's or GSI's key space.</p></li>
    /// <li>
    /// <p><code>MaxOnDemandThroughputExceeded</code>: The request rate has exceeded the <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/on-demand-capacity-mode-max-throughput.html">configured maximum throughput limits</a> set for a table or index in on-demand capacity mode.</p></li>
    /// </ul></li>
    /// </ul>
    /// <p>Examples of complete throttling reasons:</p>
    /// <ul>
    /// <li>
    /// <p>TableReadProvisionedThroughputExceeded</p></li>
    /// <li>
    /// <p>IndexWriteAccountLimitExceeded</p></li>
    /// </ul>
    /// <p>This helps identify exactly what resource is being throttled, what type of operation caused it, and why the throttling occurred.</p>
    pub fn reason(&self) -> ::std::option::Option<&str> {
        self.reason.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the DynamoDB table or index that experienced the throttling event.</p>
    pub fn resource(&self) -> ::std::option::Option<&str> {
        self.resource.as_deref()
    }
}
impl ThrottlingReason {
    /// Creates a new builder-style object to manufacture [`ThrottlingReason`](crate::types::ThrottlingReason).
    pub fn builder() -> crate::types::builders::ThrottlingReasonBuilder {
        crate::types::builders::ThrottlingReasonBuilder::default()
    }
}

/// A builder for [`ThrottlingReason`](crate::types::ThrottlingReason).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ThrottlingReasonBuilder {
    pub(crate) reason: ::std::option::Option<::std::string::String>,
    pub(crate) resource: ::std::option::Option<::std::string::String>,
}
impl ThrottlingReasonBuilder {
    /// <p>The reason for throttling. The throttling reason follows a specific format: <code>ResourceType+OperationType+LimitType</code>:</p>
    /// <ul>
    /// <li>
    /// <p>Resource Type (What is being throttled): Table or Index</p></li>
    /// <li>
    /// <p>Operation Type (What kind of operation): Read or Write</p></li>
    /// <li>
    /// <p>Limit Type (Why the throttling occurred):</p>
    /// <ul>
    /// <li>
    /// <p><code>ProvisionedThroughputExceeded</code>: The request rate is exceeding the <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/provisioned-capacity-mode.html">provisioned throughput capacity</a> (read or write capacity units) configured for a table or a global secondary index (GSI) in provisioned capacity mode.</p></li>
    /// <li>
    /// <p><code>AccountLimitExceeded</code>: The request rate has caused a table or global secondary index (GSI) in on-demand mode to exceed the <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ServiceQuotas.html#default-limits-throughput">per-table account-level service quotas</a> for read/write throughput in the current Amazon Web Services Region.</p></li>
    /// <li>
    /// <p><code>KeyRangeThroughputExceeded</code>: The request rate directed at a specific partition key value has exceeded the <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/bp-partition-key-design.html">internal partition-level throughput limits</a>, indicating uneven access patterns across the table's or GSI's key space.</p></li>
    /// <li>
    /// <p><code>MaxOnDemandThroughputExceeded</code>: The request rate has exceeded the <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/on-demand-capacity-mode-max-throughput.html">configured maximum throughput limits</a> set for a table or index in on-demand capacity mode.</p></li>
    /// </ul></li>
    /// </ul>
    /// <p>Examples of complete throttling reasons:</p>
    /// <ul>
    /// <li>
    /// <p>TableReadProvisionedThroughputExceeded</p></li>
    /// <li>
    /// <p>IndexWriteAccountLimitExceeded</p></li>
    /// </ul>
    /// <p>This helps identify exactly what resource is being throttled, what type of operation caused it, and why the throttling occurred.</p>
    pub fn reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The reason for throttling. The throttling reason follows a specific format: <code>ResourceType+OperationType+LimitType</code>:</p>
    /// <ul>
    /// <li>
    /// <p>Resource Type (What is being throttled): Table or Index</p></li>
    /// <li>
    /// <p>Operation Type (What kind of operation): Read or Write</p></li>
    /// <li>
    /// <p>Limit Type (Why the throttling occurred):</p>
    /// <ul>
    /// <li>
    /// <p><code>ProvisionedThroughputExceeded</code>: The request rate is exceeding the <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/provisioned-capacity-mode.html">provisioned throughput capacity</a> (read or write capacity units) configured for a table or a global secondary index (GSI) in provisioned capacity mode.</p></li>
    /// <li>
    /// <p><code>AccountLimitExceeded</code>: The request rate has caused a table or global secondary index (GSI) in on-demand mode to exceed the <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ServiceQuotas.html#default-limits-throughput">per-table account-level service quotas</a> for read/write throughput in the current Amazon Web Services Region.</p></li>
    /// <li>
    /// <p><code>KeyRangeThroughputExceeded</code>: The request rate directed at a specific partition key value has exceeded the <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/bp-partition-key-design.html">internal partition-level throughput limits</a>, indicating uneven access patterns across the table's or GSI's key space.</p></li>
    /// <li>
    /// <p><code>MaxOnDemandThroughputExceeded</code>: The request rate has exceeded the <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/on-demand-capacity-mode-max-throughput.html">configured maximum throughput limits</a> set for a table or index in on-demand capacity mode.</p></li>
    /// </ul></li>
    /// </ul>
    /// <p>Examples of complete throttling reasons:</p>
    /// <ul>
    /// <li>
    /// <p>TableReadProvisionedThroughputExceeded</p></li>
    /// <li>
    /// <p>IndexWriteAccountLimitExceeded</p></li>
    /// </ul>
    /// <p>This helps identify exactly what resource is being throttled, what type of operation caused it, and why the throttling occurred.</p>
    pub fn set_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.reason = input;
        self
    }
    /// <p>The reason for throttling. The throttling reason follows a specific format: <code>ResourceType+OperationType+LimitType</code>:</p>
    /// <ul>
    /// <li>
    /// <p>Resource Type (What is being throttled): Table or Index</p></li>
    /// <li>
    /// <p>Operation Type (What kind of operation): Read or Write</p></li>
    /// <li>
    /// <p>Limit Type (Why the throttling occurred):</p>
    /// <ul>
    /// <li>
    /// <p><code>ProvisionedThroughputExceeded</code>: The request rate is exceeding the <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/provisioned-capacity-mode.html">provisioned throughput capacity</a> (read or write capacity units) configured for a table or a global secondary index (GSI) in provisioned capacity mode.</p></li>
    /// <li>
    /// <p><code>AccountLimitExceeded</code>: The request rate has caused a table or global secondary index (GSI) in on-demand mode to exceed the <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ServiceQuotas.html#default-limits-throughput">per-table account-level service quotas</a> for read/write throughput in the current Amazon Web Services Region.</p></li>
    /// <li>
    /// <p><code>KeyRangeThroughputExceeded</code>: The request rate directed at a specific partition key value has exceeded the <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/bp-partition-key-design.html">internal partition-level throughput limits</a>, indicating uneven access patterns across the table's or GSI's key space.</p></li>
    /// <li>
    /// <p><code>MaxOnDemandThroughputExceeded</code>: The request rate has exceeded the <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/on-demand-capacity-mode-max-throughput.html">configured maximum throughput limits</a> set for a table or index in on-demand capacity mode.</p></li>
    /// </ul></li>
    /// </ul>
    /// <p>Examples of complete throttling reasons:</p>
    /// <ul>
    /// <li>
    /// <p>TableReadProvisionedThroughputExceeded</p></li>
    /// <li>
    /// <p>IndexWriteAccountLimitExceeded</p></li>
    /// </ul>
    /// <p>This helps identify exactly what resource is being throttled, what type of operation caused it, and why the throttling occurred.</p>
    pub fn get_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.reason
    }
    /// <p>The Amazon Resource Name (ARN) of the DynamoDB table or index that experienced the throttling event.</p>
    pub fn resource(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the DynamoDB table or index that experienced the throttling event.</p>
    pub fn set_resource(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the DynamoDB table or index that experienced the throttling event.</p>
    pub fn get_resource(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource
    }
    /// Consumes the builder and constructs a [`ThrottlingReason`](crate::types::ThrottlingReason).
    pub fn build(self) -> crate::types::ThrottlingReason {
        crate::types::ThrottlingReason {
            reason: self.reason,
            resource: self.resource,
        }
    }
}
