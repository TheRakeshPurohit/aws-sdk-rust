// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the geofence geometry details.</p>
/// <p>A geofence geometry can be a circle, a polygon, or a multipolygon. <code>Polygon</code> and <code>MultiPolygon</code> geometries can be defined using their respective parameters, or encoded in Geobuf format using the <code>Geobuf</code> parameter. Including multiple geometry types in the same request will return a validation error.</p><note>
/// <p>Amazon Location doesn't currently support polygons that cross the antimeridian.</p>
/// </note>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GeofenceGeometry {
    /// <p>A <code>Polygon</code> is a list of up to 250 linear rings which represent the shape of a geofence. This list <i>must</i> include 1 exterior ring (representing the outer perimeter of the geofence), and can optionally include up to 249 interior rings (representing polygonal spaces within the perimeter, which are excluded from the geofence area).</p>
    /// <p>A linear ring is an array of 4 or more vertices, where the first and last vertex are the same (to form a closed boundary). Each vertex is a 2-dimensional point represented as an array of doubles of length 2: <code>\[longitude, latitude\]</code>.</p>
    /// <p>Each linear ring is represented as an array of arrays of doubles (<code>\[\[longitude, latitude\], \[longitude, latitude\], ...\]</code>). The vertices for the exterior ring must be listed in <i>counter-clockwise</i> sequence. Vertices for all interior rings must be listed in <i>clockwise</i> sequence.</p>
    /// <p>The list of linear rings that describe the entire <code>Polygon</code> is represented as an array of arrays of arrays of doubles (<code>\[\[\[longitude, latitude\], \[longitude, latitude\], ...\], \[\[longitude, latitude\], \[longitude, latitude\], ...\], ...\]</code>). The exterior ring must be listed first, before any interior rings.</p><note>
    /// <p>The following additional requirements and limitations apply to geometries defined using the <code>Polygon</code> parameter:</p>
    /// <ul>
    /// <li>
    /// <p>The entire <code>Polygon</code> must consist of no more than 1,000 vertices, including all vertices from the exterior ring and all interior rings.</p></li>
    /// <li>
    /// <p>Rings must not touch or cross each other.</p></li>
    /// <li>
    /// <p>All interior rings must be fully contained within the exterior ring.</p></li>
    /// <li>
    /// <p>Interior rings must not contain other interior rings.</p></li>
    /// <li>
    /// <p>No ring is permitted to intersect itself.</p></li>
    /// </ul>
    /// </note>
    pub polygon: ::std::option::Option<::std::vec::Vec<::std::vec::Vec<::std::vec::Vec<f64>>>>,
    /// <p>A circle on the earth, as defined by a center point and a radius.</p>
    pub circle: ::std::option::Option<crate::types::Circle>,
    /// <p>Geobuf is a compact binary encoding for geographic data that provides lossless compression of GeoJSON polygons. The Geobuf must be Base64-encoded.</p>
    /// <p>This parameter can contain a Geobuf-encoded GeoJSON geometry object of type <code>Polygon</code> <i>OR</i> <code>MultiPolygon</code>. For more information and specific configuration requirements for these object types, see <a href="https://docs.aws.amazon.com/location/latest/APIReference/API_WaypointGeofencing_GeofenceGeometry.html#location-Type-WaypointGeofencing_GeofenceGeometry-Polygon">Polygon</a> and <a href="https://docs.aws.amazon.com/location/latest/APIReference/API_WaypointGeofencing_GeofenceGeometry.html#location-Type-WaypointGeofencing_GeofenceGeometry-MultiPolygon">MultiPolygon</a>.</p><note>
    /// <p>The following limitations apply specifically to geometries defined using the <code>Geobuf</code> parameter, and supercede the corresponding limitations of the <code>Polygon</code> and <code>MultiPolygon</code> parameters:</p>
    /// <ul>
    /// <li>
    /// <p>A <code>Polygon</code> in <code>Geobuf</code> format can have up to 25,000 rings and up to 100,000 total vertices, including all vertices from all component rings.</p></li>
    /// <li>
    /// <p>A <code>MultiPolygon</code> in <code>Geobuf</code> format can contain up to 10,000 <code>Polygons</code> and up to 100,000 total vertices, including all vertices from all component <code>Polygons</code>.</p></li>
    /// </ul>
    /// </note>
    pub geobuf: ::std::option::Option<::aws_smithy_types::Blob>,
    /// <p>A <code>MultiPolygon</code> is a list of up to 250 <code>Polygon</code> elements which represent the shape of a geofence. The <code>Polygon</code> components of a <code>MultiPolygon</code> geometry can define separate geographical areas that are considered part of the same geofence, perimeters of larger exterior areas with smaller interior spaces that are excluded from the geofence, or some combination of these use cases to form complex geofence boundaries.</p>
    /// <p>For more information and specific configuration requirements for the <code>Polygon</code> components that form a <code>MultiPolygon</code>, see <a href="https://docs.aws.amazon.com/location/latest/APIReference/API_WaypointGeofencing_GeofenceGeometry.html#location-Type-WaypointGeofencing_GeofenceGeometry-Polygon">Polygon</a>.</p><note>
    /// <p>The following additional requirements and limitations apply to geometries defined using the <code>MultiPolygon</code> parameter:</p>
    /// <ul>
    /// <li>
    /// <p>The entire <code>MultiPolygon</code> must consist of no more than 1,000 vertices, including all vertices from all component <code>Polygons</code>.</p></li>
    /// <li>
    /// <p>Each edge of a component <code>Polygon</code> must intersect no more than 5 edges from other <code>Polygons</code>. Parallel edges that are shared but do not cross are not counted toward this limit.</p></li>
    /// <li>
    /// <p>The total number of intersecting edges of component <code>Polygons</code> must be no more than 100,000. Parallel edges that are shared but do not cross are not counted toward this limit.</p></li>
    /// </ul>
    /// </note>
    pub multi_polygon: ::std::option::Option<::std::vec::Vec<::std::vec::Vec<::std::vec::Vec<::std::vec::Vec<f64>>>>>,
}
impl GeofenceGeometry {
    /// <p>A <code>Polygon</code> is a list of up to 250 linear rings which represent the shape of a geofence. This list <i>must</i> include 1 exterior ring (representing the outer perimeter of the geofence), and can optionally include up to 249 interior rings (representing polygonal spaces within the perimeter, which are excluded from the geofence area).</p>
    /// <p>A linear ring is an array of 4 or more vertices, where the first and last vertex are the same (to form a closed boundary). Each vertex is a 2-dimensional point represented as an array of doubles of length 2: <code>\[longitude, latitude\]</code>.</p>
    /// <p>Each linear ring is represented as an array of arrays of doubles (<code>\[\[longitude, latitude\], \[longitude, latitude\], ...\]</code>). The vertices for the exterior ring must be listed in <i>counter-clockwise</i> sequence. Vertices for all interior rings must be listed in <i>clockwise</i> sequence.</p>
    /// <p>The list of linear rings that describe the entire <code>Polygon</code> is represented as an array of arrays of arrays of doubles (<code>\[\[\[longitude, latitude\], \[longitude, latitude\], ...\], \[\[longitude, latitude\], \[longitude, latitude\], ...\], ...\]</code>). The exterior ring must be listed first, before any interior rings.</p><note>
    /// <p>The following additional requirements and limitations apply to geometries defined using the <code>Polygon</code> parameter:</p>
    /// <ul>
    /// <li>
    /// <p>The entire <code>Polygon</code> must consist of no more than 1,000 vertices, including all vertices from the exterior ring and all interior rings.</p></li>
    /// <li>
    /// <p>Rings must not touch or cross each other.</p></li>
    /// <li>
    /// <p>All interior rings must be fully contained within the exterior ring.</p></li>
    /// <li>
    /// <p>Interior rings must not contain other interior rings.</p></li>
    /// <li>
    /// <p>No ring is permitted to intersect itself.</p></li>
    /// </ul>
    /// </note>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.polygon.is_none()`.
    pub fn polygon(&self) -> &[::std::vec::Vec<::std::vec::Vec<f64>>] {
        self.polygon.as_deref().unwrap_or_default()
    }
    /// <p>A circle on the earth, as defined by a center point and a radius.</p>
    pub fn circle(&self) -> ::std::option::Option<&crate::types::Circle> {
        self.circle.as_ref()
    }
    /// <p>Geobuf is a compact binary encoding for geographic data that provides lossless compression of GeoJSON polygons. The Geobuf must be Base64-encoded.</p>
    /// <p>This parameter can contain a Geobuf-encoded GeoJSON geometry object of type <code>Polygon</code> <i>OR</i> <code>MultiPolygon</code>. For more information and specific configuration requirements for these object types, see <a href="https://docs.aws.amazon.com/location/latest/APIReference/API_WaypointGeofencing_GeofenceGeometry.html#location-Type-WaypointGeofencing_GeofenceGeometry-Polygon">Polygon</a> and <a href="https://docs.aws.amazon.com/location/latest/APIReference/API_WaypointGeofencing_GeofenceGeometry.html#location-Type-WaypointGeofencing_GeofenceGeometry-MultiPolygon">MultiPolygon</a>.</p><note>
    /// <p>The following limitations apply specifically to geometries defined using the <code>Geobuf</code> parameter, and supercede the corresponding limitations of the <code>Polygon</code> and <code>MultiPolygon</code> parameters:</p>
    /// <ul>
    /// <li>
    /// <p>A <code>Polygon</code> in <code>Geobuf</code> format can have up to 25,000 rings and up to 100,000 total vertices, including all vertices from all component rings.</p></li>
    /// <li>
    /// <p>A <code>MultiPolygon</code> in <code>Geobuf</code> format can contain up to 10,000 <code>Polygons</code> and up to 100,000 total vertices, including all vertices from all component <code>Polygons</code>.</p></li>
    /// </ul>
    /// </note>
    pub fn geobuf(&self) -> ::std::option::Option<&::aws_smithy_types::Blob> {
        self.geobuf.as_ref()
    }
    /// <p>A <code>MultiPolygon</code> is a list of up to 250 <code>Polygon</code> elements which represent the shape of a geofence. The <code>Polygon</code> components of a <code>MultiPolygon</code> geometry can define separate geographical areas that are considered part of the same geofence, perimeters of larger exterior areas with smaller interior spaces that are excluded from the geofence, or some combination of these use cases to form complex geofence boundaries.</p>
    /// <p>For more information and specific configuration requirements for the <code>Polygon</code> components that form a <code>MultiPolygon</code>, see <a href="https://docs.aws.amazon.com/location/latest/APIReference/API_WaypointGeofencing_GeofenceGeometry.html#location-Type-WaypointGeofencing_GeofenceGeometry-Polygon">Polygon</a>.</p><note>
    /// <p>The following additional requirements and limitations apply to geometries defined using the <code>MultiPolygon</code> parameter:</p>
    /// <ul>
    /// <li>
    /// <p>The entire <code>MultiPolygon</code> must consist of no more than 1,000 vertices, including all vertices from all component <code>Polygons</code>.</p></li>
    /// <li>
    /// <p>Each edge of a component <code>Polygon</code> must intersect no more than 5 edges from other <code>Polygons</code>. Parallel edges that are shared but do not cross are not counted toward this limit.</p></li>
    /// <li>
    /// <p>The total number of intersecting edges of component <code>Polygons</code> must be no more than 100,000. Parallel edges that are shared but do not cross are not counted toward this limit.</p></li>
    /// </ul>
    /// </note>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.multi_polygon.is_none()`.
    pub fn multi_polygon(&self) -> &[::std::vec::Vec<::std::vec::Vec<::std::vec::Vec<f64>>>] {
        self.multi_polygon.as_deref().unwrap_or_default()
    }
}
impl ::std::fmt::Debug for GeofenceGeometry {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GeofenceGeometry");
        formatter.field("polygon", &"*** Sensitive Data Redacted ***");
        formatter.field("circle", &"*** Sensitive Data Redacted ***");
        formatter.field("geobuf", &"*** Sensitive Data Redacted ***");
        formatter.field("multi_polygon", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl GeofenceGeometry {
    /// Creates a new builder-style object to manufacture [`GeofenceGeometry`](crate::types::GeofenceGeometry).
    pub fn builder() -> crate::types::builders::GeofenceGeometryBuilder {
        crate::types::builders::GeofenceGeometryBuilder::default()
    }
}

/// A builder for [`GeofenceGeometry`](crate::types::GeofenceGeometry).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct GeofenceGeometryBuilder {
    pub(crate) polygon: ::std::option::Option<::std::vec::Vec<::std::vec::Vec<::std::vec::Vec<f64>>>>,
    pub(crate) circle: ::std::option::Option<crate::types::Circle>,
    pub(crate) geobuf: ::std::option::Option<::aws_smithy_types::Blob>,
    pub(crate) multi_polygon: ::std::option::Option<::std::vec::Vec<::std::vec::Vec<::std::vec::Vec<::std::vec::Vec<f64>>>>>,
}
impl GeofenceGeometryBuilder {
    /// Appends an item to `polygon`.
    ///
    /// To override the contents of this collection use [`set_polygon`](Self::set_polygon).
    ///
    /// <p>A <code>Polygon</code> is a list of up to 250 linear rings which represent the shape of a geofence. This list <i>must</i> include 1 exterior ring (representing the outer perimeter of the geofence), and can optionally include up to 249 interior rings (representing polygonal spaces within the perimeter, which are excluded from the geofence area).</p>
    /// <p>A linear ring is an array of 4 or more vertices, where the first and last vertex are the same (to form a closed boundary). Each vertex is a 2-dimensional point represented as an array of doubles of length 2: <code>\[longitude, latitude\]</code>.</p>
    /// <p>Each linear ring is represented as an array of arrays of doubles (<code>\[\[longitude, latitude\], \[longitude, latitude\], ...\]</code>). The vertices for the exterior ring must be listed in <i>counter-clockwise</i> sequence. Vertices for all interior rings must be listed in <i>clockwise</i> sequence.</p>
    /// <p>The list of linear rings that describe the entire <code>Polygon</code> is represented as an array of arrays of arrays of doubles (<code>\[\[\[longitude, latitude\], \[longitude, latitude\], ...\], \[\[longitude, latitude\], \[longitude, latitude\], ...\], ...\]</code>). The exterior ring must be listed first, before any interior rings.</p><note>
    /// <p>The following additional requirements and limitations apply to geometries defined using the <code>Polygon</code> parameter:</p>
    /// <ul>
    /// <li>
    /// <p>The entire <code>Polygon</code> must consist of no more than 1,000 vertices, including all vertices from the exterior ring and all interior rings.</p></li>
    /// <li>
    /// <p>Rings must not touch or cross each other.</p></li>
    /// <li>
    /// <p>All interior rings must be fully contained within the exterior ring.</p></li>
    /// <li>
    /// <p>Interior rings must not contain other interior rings.</p></li>
    /// <li>
    /// <p>No ring is permitted to intersect itself.</p></li>
    /// </ul>
    /// </note>
    pub fn polygon(mut self, input: ::std::vec::Vec<::std::vec::Vec<f64>>) -> Self {
        let mut v = self.polygon.unwrap_or_default();
        v.push(input);
        self.polygon = ::std::option::Option::Some(v);
        self
    }
    /// <p>A <code>Polygon</code> is a list of up to 250 linear rings which represent the shape of a geofence. This list <i>must</i> include 1 exterior ring (representing the outer perimeter of the geofence), and can optionally include up to 249 interior rings (representing polygonal spaces within the perimeter, which are excluded from the geofence area).</p>
    /// <p>A linear ring is an array of 4 or more vertices, where the first and last vertex are the same (to form a closed boundary). Each vertex is a 2-dimensional point represented as an array of doubles of length 2: <code>\[longitude, latitude\]</code>.</p>
    /// <p>Each linear ring is represented as an array of arrays of doubles (<code>\[\[longitude, latitude\], \[longitude, latitude\], ...\]</code>). The vertices for the exterior ring must be listed in <i>counter-clockwise</i> sequence. Vertices for all interior rings must be listed in <i>clockwise</i> sequence.</p>
    /// <p>The list of linear rings that describe the entire <code>Polygon</code> is represented as an array of arrays of arrays of doubles (<code>\[\[\[longitude, latitude\], \[longitude, latitude\], ...\], \[\[longitude, latitude\], \[longitude, latitude\], ...\], ...\]</code>). The exterior ring must be listed first, before any interior rings.</p><note>
    /// <p>The following additional requirements and limitations apply to geometries defined using the <code>Polygon</code> parameter:</p>
    /// <ul>
    /// <li>
    /// <p>The entire <code>Polygon</code> must consist of no more than 1,000 vertices, including all vertices from the exterior ring and all interior rings.</p></li>
    /// <li>
    /// <p>Rings must not touch or cross each other.</p></li>
    /// <li>
    /// <p>All interior rings must be fully contained within the exterior ring.</p></li>
    /// <li>
    /// <p>Interior rings must not contain other interior rings.</p></li>
    /// <li>
    /// <p>No ring is permitted to intersect itself.</p></li>
    /// </ul>
    /// </note>
    pub fn set_polygon(mut self, input: ::std::option::Option<::std::vec::Vec<::std::vec::Vec<::std::vec::Vec<f64>>>>) -> Self {
        self.polygon = input;
        self
    }
    /// <p>A <code>Polygon</code> is a list of up to 250 linear rings which represent the shape of a geofence. This list <i>must</i> include 1 exterior ring (representing the outer perimeter of the geofence), and can optionally include up to 249 interior rings (representing polygonal spaces within the perimeter, which are excluded from the geofence area).</p>
    /// <p>A linear ring is an array of 4 or more vertices, where the first and last vertex are the same (to form a closed boundary). Each vertex is a 2-dimensional point represented as an array of doubles of length 2: <code>\[longitude, latitude\]</code>.</p>
    /// <p>Each linear ring is represented as an array of arrays of doubles (<code>\[\[longitude, latitude\], \[longitude, latitude\], ...\]</code>). The vertices for the exterior ring must be listed in <i>counter-clockwise</i> sequence. Vertices for all interior rings must be listed in <i>clockwise</i> sequence.</p>
    /// <p>The list of linear rings that describe the entire <code>Polygon</code> is represented as an array of arrays of arrays of doubles (<code>\[\[\[longitude, latitude\], \[longitude, latitude\], ...\], \[\[longitude, latitude\], \[longitude, latitude\], ...\], ...\]</code>). The exterior ring must be listed first, before any interior rings.</p><note>
    /// <p>The following additional requirements and limitations apply to geometries defined using the <code>Polygon</code> parameter:</p>
    /// <ul>
    /// <li>
    /// <p>The entire <code>Polygon</code> must consist of no more than 1,000 vertices, including all vertices from the exterior ring and all interior rings.</p></li>
    /// <li>
    /// <p>Rings must not touch or cross each other.</p></li>
    /// <li>
    /// <p>All interior rings must be fully contained within the exterior ring.</p></li>
    /// <li>
    /// <p>Interior rings must not contain other interior rings.</p></li>
    /// <li>
    /// <p>No ring is permitted to intersect itself.</p></li>
    /// </ul>
    /// </note>
    pub fn get_polygon(&self) -> &::std::option::Option<::std::vec::Vec<::std::vec::Vec<::std::vec::Vec<f64>>>> {
        &self.polygon
    }
    /// <p>A circle on the earth, as defined by a center point and a radius.</p>
    pub fn circle(mut self, input: crate::types::Circle) -> Self {
        self.circle = ::std::option::Option::Some(input);
        self
    }
    /// <p>A circle on the earth, as defined by a center point and a radius.</p>
    pub fn set_circle(mut self, input: ::std::option::Option<crate::types::Circle>) -> Self {
        self.circle = input;
        self
    }
    /// <p>A circle on the earth, as defined by a center point and a radius.</p>
    pub fn get_circle(&self) -> &::std::option::Option<crate::types::Circle> {
        &self.circle
    }
    /// <p>Geobuf is a compact binary encoding for geographic data that provides lossless compression of GeoJSON polygons. The Geobuf must be Base64-encoded.</p>
    /// <p>This parameter can contain a Geobuf-encoded GeoJSON geometry object of type <code>Polygon</code> <i>OR</i> <code>MultiPolygon</code>. For more information and specific configuration requirements for these object types, see <a href="https://docs.aws.amazon.com/location/latest/APIReference/API_WaypointGeofencing_GeofenceGeometry.html#location-Type-WaypointGeofencing_GeofenceGeometry-Polygon">Polygon</a> and <a href="https://docs.aws.amazon.com/location/latest/APIReference/API_WaypointGeofencing_GeofenceGeometry.html#location-Type-WaypointGeofencing_GeofenceGeometry-MultiPolygon">MultiPolygon</a>.</p><note>
    /// <p>The following limitations apply specifically to geometries defined using the <code>Geobuf</code> parameter, and supercede the corresponding limitations of the <code>Polygon</code> and <code>MultiPolygon</code> parameters:</p>
    /// <ul>
    /// <li>
    /// <p>A <code>Polygon</code> in <code>Geobuf</code> format can have up to 25,000 rings and up to 100,000 total vertices, including all vertices from all component rings.</p></li>
    /// <li>
    /// <p>A <code>MultiPolygon</code> in <code>Geobuf</code> format can contain up to 10,000 <code>Polygons</code> and up to 100,000 total vertices, including all vertices from all component <code>Polygons</code>.</p></li>
    /// </ul>
    /// </note>
    pub fn geobuf(mut self, input: ::aws_smithy_types::Blob) -> Self {
        self.geobuf = ::std::option::Option::Some(input);
        self
    }
    /// <p>Geobuf is a compact binary encoding for geographic data that provides lossless compression of GeoJSON polygons. The Geobuf must be Base64-encoded.</p>
    /// <p>This parameter can contain a Geobuf-encoded GeoJSON geometry object of type <code>Polygon</code> <i>OR</i> <code>MultiPolygon</code>. For more information and specific configuration requirements for these object types, see <a href="https://docs.aws.amazon.com/location/latest/APIReference/API_WaypointGeofencing_GeofenceGeometry.html#location-Type-WaypointGeofencing_GeofenceGeometry-Polygon">Polygon</a> and <a href="https://docs.aws.amazon.com/location/latest/APIReference/API_WaypointGeofencing_GeofenceGeometry.html#location-Type-WaypointGeofencing_GeofenceGeometry-MultiPolygon">MultiPolygon</a>.</p><note>
    /// <p>The following limitations apply specifically to geometries defined using the <code>Geobuf</code> parameter, and supercede the corresponding limitations of the <code>Polygon</code> and <code>MultiPolygon</code> parameters:</p>
    /// <ul>
    /// <li>
    /// <p>A <code>Polygon</code> in <code>Geobuf</code> format can have up to 25,000 rings and up to 100,000 total vertices, including all vertices from all component rings.</p></li>
    /// <li>
    /// <p>A <code>MultiPolygon</code> in <code>Geobuf</code> format can contain up to 10,000 <code>Polygons</code> and up to 100,000 total vertices, including all vertices from all component <code>Polygons</code>.</p></li>
    /// </ul>
    /// </note>
    pub fn set_geobuf(mut self, input: ::std::option::Option<::aws_smithy_types::Blob>) -> Self {
        self.geobuf = input;
        self
    }
    /// <p>Geobuf is a compact binary encoding for geographic data that provides lossless compression of GeoJSON polygons. The Geobuf must be Base64-encoded.</p>
    /// <p>This parameter can contain a Geobuf-encoded GeoJSON geometry object of type <code>Polygon</code> <i>OR</i> <code>MultiPolygon</code>. For more information and specific configuration requirements for these object types, see <a href="https://docs.aws.amazon.com/location/latest/APIReference/API_WaypointGeofencing_GeofenceGeometry.html#location-Type-WaypointGeofencing_GeofenceGeometry-Polygon">Polygon</a> and <a href="https://docs.aws.amazon.com/location/latest/APIReference/API_WaypointGeofencing_GeofenceGeometry.html#location-Type-WaypointGeofencing_GeofenceGeometry-MultiPolygon">MultiPolygon</a>.</p><note>
    /// <p>The following limitations apply specifically to geometries defined using the <code>Geobuf</code> parameter, and supercede the corresponding limitations of the <code>Polygon</code> and <code>MultiPolygon</code> parameters:</p>
    /// <ul>
    /// <li>
    /// <p>A <code>Polygon</code> in <code>Geobuf</code> format can have up to 25,000 rings and up to 100,000 total vertices, including all vertices from all component rings.</p></li>
    /// <li>
    /// <p>A <code>MultiPolygon</code> in <code>Geobuf</code> format can contain up to 10,000 <code>Polygons</code> and up to 100,000 total vertices, including all vertices from all component <code>Polygons</code>.</p></li>
    /// </ul>
    /// </note>
    pub fn get_geobuf(&self) -> &::std::option::Option<::aws_smithy_types::Blob> {
        &self.geobuf
    }
    /// Appends an item to `multi_polygon`.
    ///
    /// To override the contents of this collection use [`set_multi_polygon`](Self::set_multi_polygon).
    ///
    /// <p>A <code>MultiPolygon</code> is a list of up to 250 <code>Polygon</code> elements which represent the shape of a geofence. The <code>Polygon</code> components of a <code>MultiPolygon</code> geometry can define separate geographical areas that are considered part of the same geofence, perimeters of larger exterior areas with smaller interior spaces that are excluded from the geofence, or some combination of these use cases to form complex geofence boundaries.</p>
    /// <p>For more information and specific configuration requirements for the <code>Polygon</code> components that form a <code>MultiPolygon</code>, see <a href="https://docs.aws.amazon.com/location/latest/APIReference/API_WaypointGeofencing_GeofenceGeometry.html#location-Type-WaypointGeofencing_GeofenceGeometry-Polygon">Polygon</a>.</p><note>
    /// <p>The following additional requirements and limitations apply to geometries defined using the <code>MultiPolygon</code> parameter:</p>
    /// <ul>
    /// <li>
    /// <p>The entire <code>MultiPolygon</code> must consist of no more than 1,000 vertices, including all vertices from all component <code>Polygons</code>.</p></li>
    /// <li>
    /// <p>Each edge of a component <code>Polygon</code> must intersect no more than 5 edges from other <code>Polygons</code>. Parallel edges that are shared but do not cross are not counted toward this limit.</p></li>
    /// <li>
    /// <p>The total number of intersecting edges of component <code>Polygons</code> must be no more than 100,000. Parallel edges that are shared but do not cross are not counted toward this limit.</p></li>
    /// </ul>
    /// </note>
    pub fn multi_polygon(mut self, input: ::std::vec::Vec<::std::vec::Vec<::std::vec::Vec<f64>>>) -> Self {
        let mut v = self.multi_polygon.unwrap_or_default();
        v.push(input);
        self.multi_polygon = ::std::option::Option::Some(v);
        self
    }
    /// <p>A <code>MultiPolygon</code> is a list of up to 250 <code>Polygon</code> elements which represent the shape of a geofence. The <code>Polygon</code> components of a <code>MultiPolygon</code> geometry can define separate geographical areas that are considered part of the same geofence, perimeters of larger exterior areas with smaller interior spaces that are excluded from the geofence, or some combination of these use cases to form complex geofence boundaries.</p>
    /// <p>For more information and specific configuration requirements for the <code>Polygon</code> components that form a <code>MultiPolygon</code>, see <a href="https://docs.aws.amazon.com/location/latest/APIReference/API_WaypointGeofencing_GeofenceGeometry.html#location-Type-WaypointGeofencing_GeofenceGeometry-Polygon">Polygon</a>.</p><note>
    /// <p>The following additional requirements and limitations apply to geometries defined using the <code>MultiPolygon</code> parameter:</p>
    /// <ul>
    /// <li>
    /// <p>The entire <code>MultiPolygon</code> must consist of no more than 1,000 vertices, including all vertices from all component <code>Polygons</code>.</p></li>
    /// <li>
    /// <p>Each edge of a component <code>Polygon</code> must intersect no more than 5 edges from other <code>Polygons</code>. Parallel edges that are shared but do not cross are not counted toward this limit.</p></li>
    /// <li>
    /// <p>The total number of intersecting edges of component <code>Polygons</code> must be no more than 100,000. Parallel edges that are shared but do not cross are not counted toward this limit.</p></li>
    /// </ul>
    /// </note>
    pub fn set_multi_polygon(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<::std::vec::Vec<::std::vec::Vec<::std::vec::Vec<f64>>>>>,
    ) -> Self {
        self.multi_polygon = input;
        self
    }
    /// <p>A <code>MultiPolygon</code> is a list of up to 250 <code>Polygon</code> elements which represent the shape of a geofence. The <code>Polygon</code> components of a <code>MultiPolygon</code> geometry can define separate geographical areas that are considered part of the same geofence, perimeters of larger exterior areas with smaller interior spaces that are excluded from the geofence, or some combination of these use cases to form complex geofence boundaries.</p>
    /// <p>For more information and specific configuration requirements for the <code>Polygon</code> components that form a <code>MultiPolygon</code>, see <a href="https://docs.aws.amazon.com/location/latest/APIReference/API_WaypointGeofencing_GeofenceGeometry.html#location-Type-WaypointGeofencing_GeofenceGeometry-Polygon">Polygon</a>.</p><note>
    /// <p>The following additional requirements and limitations apply to geometries defined using the <code>MultiPolygon</code> parameter:</p>
    /// <ul>
    /// <li>
    /// <p>The entire <code>MultiPolygon</code> must consist of no more than 1,000 vertices, including all vertices from all component <code>Polygons</code>.</p></li>
    /// <li>
    /// <p>Each edge of a component <code>Polygon</code> must intersect no more than 5 edges from other <code>Polygons</code>. Parallel edges that are shared but do not cross are not counted toward this limit.</p></li>
    /// <li>
    /// <p>The total number of intersecting edges of component <code>Polygons</code> must be no more than 100,000. Parallel edges that are shared but do not cross are not counted toward this limit.</p></li>
    /// </ul>
    /// </note>
    pub fn get_multi_polygon(&self) -> &::std::option::Option<::std::vec::Vec<::std::vec::Vec<::std::vec::Vec<::std::vec::Vec<f64>>>>> {
        &self.multi_polygon
    }
    /// Consumes the builder and constructs a [`GeofenceGeometry`](crate::types::GeofenceGeometry).
    pub fn build(self) -> crate::types::GeofenceGeometry {
        crate::types::GeofenceGeometry {
            polygon: self.polygon,
            circle: self.circle,
            geobuf: self.geobuf,
            multi_polygon: self.multi_polygon,
        }
    }
}
impl ::std::fmt::Debug for GeofenceGeometryBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GeofenceGeometryBuilder");
        formatter.field("polygon", &"*** Sensitive Data Redacted ***");
        formatter.field("circle", &"*** Sensitive Data Redacted ***");
        formatter.field("geobuf", &"*** Sensitive Data Redacted ***");
        formatter.field("multi_polygon", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
