// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines the level of certainty of the position.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct PositionalAccuracy {
    /// <p>Estimated maximum distance, in meters, between the measured position and the true position of a device, along the Earth's surface.</p>
    pub horizontal: f64,
}
impl PositionalAccuracy {
    /// <p>Estimated maximum distance, in meters, between the measured position and the true position of a device, along the Earth's surface.</p>
    pub fn horizontal(&self) -> f64 {
        self.horizontal
    }
}
impl ::std::fmt::Debug for PositionalAccuracy {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("PositionalAccuracy");
        formatter.field("horizontal", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl PositionalAccuracy {
    /// Creates a new builder-style object to manufacture [`PositionalAccuracy`](crate::types::PositionalAccuracy).
    pub fn builder() -> crate::types::builders::PositionalAccuracyBuilder {
        crate::types::builders::PositionalAccuracyBuilder::default()
    }
}

/// A builder for [`PositionalAccuracy`](crate::types::PositionalAccuracy).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct PositionalAccuracyBuilder {
    pub(crate) horizontal: ::std::option::Option<f64>,
}
impl PositionalAccuracyBuilder {
    /// <p>Estimated maximum distance, in meters, between the measured position and the true position of a device, along the Earth's surface.</p>
    /// This field is required.
    pub fn horizontal(mut self, input: f64) -> Self {
        self.horizontal = ::std::option::Option::Some(input);
        self
    }
    /// <p>Estimated maximum distance, in meters, between the measured position and the true position of a device, along the Earth's surface.</p>
    pub fn set_horizontal(mut self, input: ::std::option::Option<f64>) -> Self {
        self.horizontal = input;
        self
    }
    /// <p>Estimated maximum distance, in meters, between the measured position and the true position of a device, along the Earth's surface.</p>
    pub fn get_horizontal(&self) -> &::std::option::Option<f64> {
        &self.horizontal
    }
    /// Consumes the builder and constructs a [`PositionalAccuracy`](crate::types::PositionalAccuracy).
    /// This method will fail if any of the following fields are not set:
    /// - [`horizontal`](crate::types::builders::PositionalAccuracyBuilder::horizontal)
    pub fn build(self) -> ::std::result::Result<crate::types::PositionalAccuracy, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::PositionalAccuracy {
            horizontal: self.horizontal.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "horizontal",
                    "horizontal was not specified but it is required when building PositionalAccuracy",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for PositionalAccuracyBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("PositionalAccuracyBuilder");
        formatter.field("horizontal", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
