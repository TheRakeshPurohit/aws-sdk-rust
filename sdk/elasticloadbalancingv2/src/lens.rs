// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_describe_account_limits_output_output_next_marker(
    input: &crate::operation::describe_account_limits::DescribeAccountLimitsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_marker {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_describe_listener_certificates_output_output_next_marker(
    input: &crate::operation::describe_listener_certificates::DescribeListenerCertificatesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_marker {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_describe_listeners_output_output_next_marker(
    input: &crate::operation::describe_listeners::DescribeListenersOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_marker {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_describe_load_balancers_output_output_next_marker(
    input: &crate::operation::describe_load_balancers::DescribeLoadBalancersOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_marker {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_describe_rules_output_output_next_marker(
    input: &crate::operation::describe_rules::DescribeRulesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_marker {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_describe_target_groups_output_output_next_marker(
    input: &crate::operation::describe_target_groups::DescribeTargetGroupsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_marker {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_describe_trust_store_associations_output_output_next_marker(
    input: &crate::operation::describe_trust_store_associations::DescribeTrustStoreAssociationsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_marker {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_describe_trust_store_revocations_output_output_next_marker(
    input: &crate::operation::describe_trust_store_revocations::DescribeTrustStoreRevocationsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_marker {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_describe_trust_stores_output_output_next_marker(
    input: &crate::operation::describe_trust_stores::DescribeTrustStoresOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_marker {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_describe_account_limits_output_output_limits(
    input: crate::operation::describe_account_limits::DescribeAccountLimitsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Limit>> {
    let input = input.limits?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_describe_listener_certificates_output_output_certificates(
    input: crate::operation::describe_listener_certificates::DescribeListenerCertificatesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Certificate>> {
    let input = input.certificates?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_describe_listeners_output_output_listeners(
    input: crate::operation::describe_listeners::DescribeListenersOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Listener>> {
    let input = input.listeners?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_describe_load_balancers_output_output_load_balancers(
    input: crate::operation::describe_load_balancers::DescribeLoadBalancersOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::LoadBalancer>> {
    let input = input.load_balancers?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_describe_rules_output_output_rules(
    input: crate::operation::describe_rules::DescribeRulesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Rule>> {
    let input = input.rules?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_describe_target_groups_output_output_target_groups(
    input: crate::operation::describe_target_groups::DescribeTargetGroupsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::TargetGroup>> {
    let input = input.target_groups?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_describe_trust_store_associations_output_output_trust_store_associations(
    input: crate::operation::describe_trust_store_associations::DescribeTrustStoreAssociationsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::TrustStoreAssociation>> {
    let input = input.trust_store_associations?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_describe_trust_store_revocations_output_output_trust_store_revocations(
    input: crate::operation::describe_trust_store_revocations::DescribeTrustStoreRevocationsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::DescribeTrustStoreRevocation>> {
    let input = input.trust_store_revocations?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_describe_trust_stores_output_output_trust_stores(
    input: crate::operation::describe_trust_stores::DescribeTrustStoresOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::TrustStore>> {
    let input = input.trust_stores?;
    ::std::option::Option::Some(input)
}
