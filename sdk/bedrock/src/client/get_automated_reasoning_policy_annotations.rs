// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`GetAutomatedReasoningPolicyAnnotations`](crate::operation::get_automated_reasoning_policy_annotations::builders::GetAutomatedReasoningPolicyAnnotationsFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`policy_arn(impl Into<String>)`](crate::operation::get_automated_reasoning_policy_annotations::builders::GetAutomatedReasoningPolicyAnnotationsFluentBuilder::policy_arn) / [`set_policy_arn(Option<String>)`](crate::operation::get_automated_reasoning_policy_annotations::builders::GetAutomatedReasoningPolicyAnnotationsFluentBuilder::set_policy_arn):<br>required: **true**<br><p>The Amazon Resource Name (ARN) of the Automated Reasoning policy whose annotations you want to retrieve.</p><br>
    ///   - [`build_workflow_id(impl Into<String>)`](crate::operation::get_automated_reasoning_policy_annotations::builders::GetAutomatedReasoningPolicyAnnotationsFluentBuilder::build_workflow_id) / [`set_build_workflow_id(Option<String>)`](crate::operation::get_automated_reasoning_policy_annotations::builders::GetAutomatedReasoningPolicyAnnotationsFluentBuilder::set_build_workflow_id):<br>required: **true**<br><p>The unique identifier of the build workflow whose annotations you want to retrieve.</p><br>
    /// - On success, responds with [`GetAutomatedReasoningPolicyAnnotationsOutput`](crate::operation::get_automated_reasoning_policy_annotations::GetAutomatedReasoningPolicyAnnotationsOutput) with field(s):
    ///   - [`policy_arn(String)`](crate::operation::get_automated_reasoning_policy_annotations::GetAutomatedReasoningPolicyAnnotationsOutput::policy_arn): <p>The Amazon Resource Name (ARN) of the Automated Reasoning policy.</p>
    ///   - [`name(String)`](crate::operation::get_automated_reasoning_policy_annotations::GetAutomatedReasoningPolicyAnnotationsOutput::name): <p>The name of the Automated Reasoning policy.</p>
    ///   - [`build_workflow_id(String)`](crate::operation::get_automated_reasoning_policy_annotations::GetAutomatedReasoningPolicyAnnotationsOutput::build_workflow_id): <p>The unique identifier of the build workflow.</p>
    ///   - [`annotations(Vec::<AutomatedReasoningPolicyAnnotation>)`](crate::operation::get_automated_reasoning_policy_annotations::GetAutomatedReasoningPolicyAnnotationsOutput::annotations): <p>The current set of annotations containing rules, variables, and types extracted from the source documents. These can be modified before finalizing the policy.</p>
    ///   - [`annotation_set_hash(String)`](crate::operation::get_automated_reasoning_policy_annotations::GetAutomatedReasoningPolicyAnnotationsOutput::annotation_set_hash): <p>A hash value representing the current state of the annotations. This is used for optimistic concurrency control when updating annotations.</p>
    ///   - [`updated_at(DateTime)`](crate::operation::get_automated_reasoning_policy_annotations::GetAutomatedReasoningPolicyAnnotationsOutput::updated_at): <p>The timestamp when the annotations were last updated.</p>
    /// - On failure, responds with [`SdkError<GetAutomatedReasoningPolicyAnnotationsError>`](crate::operation::get_automated_reasoning_policy_annotations::GetAutomatedReasoningPolicyAnnotationsError)
    pub fn get_automated_reasoning_policy_annotations(
        &self,
    ) -> crate::operation::get_automated_reasoning_policy_annotations::builders::GetAutomatedReasoningPolicyAnnotationsFluentBuilder {
        crate::operation::get_automated_reasoning_policy_annotations::builders::GetAutomatedReasoningPolicyAnnotationsFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
