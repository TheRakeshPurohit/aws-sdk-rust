// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_list_custom_model_deployments_output_output_next_token(
    input: &crate::operation::list_custom_model_deployments::ListCustomModelDeploymentsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_custom_models_output_output_next_token(
    input: &crate::operation::list_custom_models::ListCustomModelsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_evaluation_jobs_output_output_next_token(
    input: &crate::operation::list_evaluation_jobs::ListEvaluationJobsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_guardrails_output_output_next_token(
    input: &crate::operation::list_guardrails::ListGuardrailsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_imported_models_output_output_next_token(
    input: &crate::operation::list_imported_models::ListImportedModelsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_inference_profiles_output_output_next_token(
    input: &crate::operation::list_inference_profiles::ListInferenceProfilesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_marketplace_model_endpoints_output_output_next_token(
    input: &crate::operation::list_marketplace_model_endpoints::ListMarketplaceModelEndpointsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_model_copy_jobs_output_output_next_token(
    input: &crate::operation::list_model_copy_jobs::ListModelCopyJobsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_model_customization_jobs_output_output_next_token(
    input: &crate::operation::list_model_customization_jobs::ListModelCustomizationJobsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_model_import_jobs_output_output_next_token(
    input: &crate::operation::list_model_import_jobs::ListModelImportJobsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_model_invocation_jobs_output_output_next_token(
    input: &crate::operation::list_model_invocation_jobs::ListModelInvocationJobsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_prompt_routers_output_output_next_token(
    input: &crate::operation::list_prompt_routers::ListPromptRoutersOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_provisioned_model_throughputs_output_output_next_token(
    input: &crate::operation::list_provisioned_model_throughputs::ListProvisionedModelThroughputsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_custom_model_deployments_output_output_model_deployment_summaries(
    input: crate::operation::list_custom_model_deployments::ListCustomModelDeploymentsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::CustomModelDeploymentSummary>> {
    let input = input.model_deployment_summaries?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_custom_models_output_output_model_summaries(
    input: crate::operation::list_custom_models::ListCustomModelsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::CustomModelSummary>> {
    let input = input.model_summaries?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_evaluation_jobs_output_output_job_summaries(
    input: crate::operation::list_evaluation_jobs::ListEvaluationJobsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::EvaluationSummary>> {
    let input = input.job_summaries?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_guardrails_output_output_guardrails(
    input: crate::operation::list_guardrails::ListGuardrailsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::GuardrailSummary>> {
    let input = input.guardrails;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_imported_models_output_output_model_summaries(
    input: crate::operation::list_imported_models::ListImportedModelsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ImportedModelSummary>> {
    let input = input.model_summaries?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_inference_profiles_output_output_inference_profile_summaries(
    input: crate::operation::list_inference_profiles::ListInferenceProfilesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::InferenceProfileSummary>> {
    let input = input.inference_profile_summaries?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_marketplace_model_endpoints_output_output_marketplace_model_endpoints(
    input: crate::operation::list_marketplace_model_endpoints::ListMarketplaceModelEndpointsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::MarketplaceModelEndpointSummary>> {
    let input = input.marketplace_model_endpoints?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_model_copy_jobs_output_output_model_copy_job_summaries(
    input: crate::operation::list_model_copy_jobs::ListModelCopyJobsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ModelCopyJobSummary>> {
    let input = input.model_copy_job_summaries?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_model_customization_jobs_output_output_model_customization_job_summaries(
    input: crate::operation::list_model_customization_jobs::ListModelCustomizationJobsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ModelCustomizationJobSummary>> {
    let input = input.model_customization_job_summaries?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_model_import_jobs_output_output_model_import_job_summaries(
    input: crate::operation::list_model_import_jobs::ListModelImportJobsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ModelImportJobSummary>> {
    let input = input.model_import_job_summaries?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_model_invocation_jobs_output_output_invocation_job_summaries(
    input: crate::operation::list_model_invocation_jobs::ListModelInvocationJobsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ModelInvocationJobSummary>> {
    let input = input.invocation_job_summaries?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_prompt_routers_output_output_prompt_router_summaries(
    input: crate::operation::list_prompt_routers::ListPromptRoutersOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::PromptRouterSummary>> {
    let input = input.prompt_router_summaries?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_provisioned_model_throughputs_output_output_provisioned_model_summaries(
    input: crate::operation::list_provisioned_model_throughputs::ListProvisionedModelThroughputsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ProvisionedModelSummary>> {
    let input = input.provisioned_model_summaries?;
    ::std::option::Option::Some(input)
}
