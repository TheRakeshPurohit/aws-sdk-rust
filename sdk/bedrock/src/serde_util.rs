// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn batch_delete_evaluation_job_output_output_correct_errors(
    mut builder: crate::operation::batch_delete_evaluation_job::builders::BatchDeleteEvaluationJobOutputBuilder,
) -> crate::operation::batch_delete_evaluation_job::builders::BatchDeleteEvaluationJobOutputBuilder {
    if builder.errors.is_none() {
        builder.errors = Some(Default::default())
    }
    if builder.evaluation_jobs.is_none() {
        builder.evaluation_jobs = Some(Default::default())
    }
    builder
}

pub(crate) fn create_custom_model_output_output_correct_errors(
    mut builder: crate::operation::create_custom_model::builders::CreateCustomModelOutputBuilder,
) -> crate::operation::create_custom_model::builders::CreateCustomModelOutputBuilder {
    if builder.model_arn.is_none() {
        builder.model_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn create_evaluation_job_output_output_correct_errors(
    mut builder: crate::operation::create_evaluation_job::builders::CreateEvaluationJobOutputBuilder,
) -> crate::operation::create_evaluation_job::builders::CreateEvaluationJobOutputBuilder {
    if builder.job_arn.is_none() {
        builder.job_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn create_foundation_model_agreement_output_output_correct_errors(
    mut builder: crate::operation::create_foundation_model_agreement::builders::CreateFoundationModelAgreementOutputBuilder,
) -> crate::operation::create_foundation_model_agreement::builders::CreateFoundationModelAgreementOutputBuilder {
    if builder.model_id.is_none() {
        builder.model_id = Some(Default::default())
    }
    builder
}

pub(crate) fn create_guardrail_output_output_correct_errors(
    mut builder: crate::operation::create_guardrail::builders::CreateGuardrailOutputBuilder,
) -> crate::operation::create_guardrail::builders::CreateGuardrailOutputBuilder {
    if builder.guardrail_id.is_none() {
        builder.guardrail_id = Some(Default::default())
    }
    if builder.guardrail_arn.is_none() {
        builder.guardrail_arn = Some(Default::default())
    }
    if builder.version.is_none() {
        builder.version = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn create_guardrail_version_output_output_correct_errors(
    mut builder: crate::operation::create_guardrail_version::builders::CreateGuardrailVersionOutputBuilder,
) -> crate::operation::create_guardrail_version::builders::CreateGuardrailVersionOutputBuilder {
    if builder.guardrail_id.is_none() {
        builder.guardrail_id = Some(Default::default())
    }
    if builder.version.is_none() {
        builder.version = Some(Default::default())
    }
    builder
}

pub(crate) fn create_inference_profile_output_output_correct_errors(
    mut builder: crate::operation::create_inference_profile::builders::CreateInferenceProfileOutputBuilder,
) -> crate::operation::create_inference_profile::builders::CreateInferenceProfileOutputBuilder {
    if builder.inference_profile_arn.is_none() {
        builder.inference_profile_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn create_marketplace_model_endpoint_output_output_correct_errors(
    mut builder: crate::operation::create_marketplace_model_endpoint::builders::CreateMarketplaceModelEndpointOutputBuilder,
) -> crate::operation::create_marketplace_model_endpoint::builders::CreateMarketplaceModelEndpointOutputBuilder {
    if builder.marketplace_model_endpoint.is_none() {
        builder.marketplace_model_endpoint = {
            let builder = crate::types::builders::MarketplaceModelEndpointBuilder::default();
            crate::serde_util::marketplace_model_endpoint_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn create_model_copy_job_output_output_correct_errors(
    mut builder: crate::operation::create_model_copy_job::builders::CreateModelCopyJobOutputBuilder,
) -> crate::operation::create_model_copy_job::builders::CreateModelCopyJobOutputBuilder {
    if builder.job_arn.is_none() {
        builder.job_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn create_model_customization_job_output_output_correct_errors(
    mut builder: crate::operation::create_model_customization_job::builders::CreateModelCustomizationJobOutputBuilder,
) -> crate::operation::create_model_customization_job::builders::CreateModelCustomizationJobOutputBuilder {
    if builder.job_arn.is_none() {
        builder.job_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn create_model_import_job_output_output_correct_errors(
    mut builder: crate::operation::create_model_import_job::builders::CreateModelImportJobOutputBuilder,
) -> crate::operation::create_model_import_job::builders::CreateModelImportJobOutputBuilder {
    if builder.job_arn.is_none() {
        builder.job_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn create_model_invocation_job_output_output_correct_errors(
    mut builder: crate::operation::create_model_invocation_job::builders::CreateModelInvocationJobOutputBuilder,
) -> crate::operation::create_model_invocation_job::builders::CreateModelInvocationJobOutputBuilder {
    if builder.job_arn.is_none() {
        builder.job_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn create_provisioned_model_throughput_output_output_correct_errors(
    mut builder: crate::operation::create_provisioned_model_throughput::builders::CreateProvisionedModelThroughputOutputBuilder,
) -> crate::operation::create_provisioned_model_throughput::builders::CreateProvisionedModelThroughputOutputBuilder {
    if builder.provisioned_model_arn.is_none() {
        builder.provisioned_model_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn get_custom_model_output_output_correct_errors(
    mut builder: crate::operation::get_custom_model::builders::GetCustomModelOutputBuilder,
) -> crate::operation::get_custom_model::builders::GetCustomModelOutputBuilder {
    if builder.model_arn.is_none() {
        builder.model_arn = Some(Default::default())
    }
    if builder.model_name.is_none() {
        builder.model_name = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn get_evaluation_job_output_output_correct_errors(
    mut builder: crate::operation::get_evaluation_job::builders::GetEvaluationJobOutputBuilder,
) -> crate::operation::get_evaluation_job::builders::GetEvaluationJobOutputBuilder {
    if builder.job_name.is_none() {
        builder.job_name = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::EvaluationJobStatus>().ok()
    }
    if builder.job_arn.is_none() {
        builder.job_arn = Some(Default::default())
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    if builder.job_type.is_none() {
        builder.job_type = "no value was set".parse::<crate::types::EvaluationJobType>().ok()
    }
    if builder.evaluation_config.is_none() {
        builder.evaluation_config = Some(crate::types::EvaluationConfig::Unknown)
    }
    if builder.inference_config.is_none() {
        builder.inference_config = Some(crate::types::EvaluationInferenceConfig::Unknown)
    }
    if builder.output_data_config.is_none() {
        builder.output_data_config = {
            let builder = crate::types::builders::EvaluationOutputDataConfigBuilder::default();
            crate::serde_util::evaluation_output_data_config_correct_errors(builder).build().ok()
        }
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn get_foundation_model_availability_output_output_correct_errors(
    mut builder: crate::operation::get_foundation_model_availability::builders::GetFoundationModelAvailabilityOutputBuilder,
) -> crate::operation::get_foundation_model_availability::builders::GetFoundationModelAvailabilityOutputBuilder {
    if builder.model_id.is_none() {
        builder.model_id = Some(Default::default())
    }
    if builder.agreement_availability.is_none() {
        builder.agreement_availability = {
            let builder = crate::types::builders::AgreementAvailabilityBuilder::default();
            crate::serde_util::agreement_availability_correct_errors(builder).build().ok()
        }
    }
    if builder.authorization_status.is_none() {
        builder.authorization_status = "no value was set".parse::<crate::types::AuthorizationStatus>().ok()
    }
    if builder.entitlement_availability.is_none() {
        builder.entitlement_availability = "no value was set".parse::<crate::types::EntitlementAvailability>().ok()
    }
    if builder.region_availability.is_none() {
        builder.region_availability = "no value was set".parse::<crate::types::RegionAvailability>().ok()
    }
    builder
}

pub(crate) fn get_guardrail_output_output_correct_errors(
    mut builder: crate::operation::get_guardrail::builders::GetGuardrailOutputBuilder,
) -> crate::operation::get_guardrail::builders::GetGuardrailOutputBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.guardrail_id.is_none() {
        builder.guardrail_id = Some(Default::default())
    }
    if builder.guardrail_arn.is_none() {
        builder.guardrail_arn = Some(Default::default())
    }
    if builder.version.is_none() {
        builder.version = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::GuardrailStatus>().ok()
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.blocked_input_messaging.is_none() {
        builder.blocked_input_messaging = Some(Default::default())
    }
    if builder.blocked_outputs_messaging.is_none() {
        builder.blocked_outputs_messaging = Some(Default::default())
    }
    builder
}

pub(crate) fn get_inference_profile_output_output_correct_errors(
    mut builder: crate::operation::get_inference_profile::builders::GetInferenceProfileOutputBuilder,
) -> crate::operation::get_inference_profile::builders::GetInferenceProfileOutputBuilder {
    if builder.inference_profile_name.is_none() {
        builder.inference_profile_name = Some(Default::default())
    }
    if builder.inference_profile_arn.is_none() {
        builder.inference_profile_arn = Some(Default::default())
    }
    if builder.models.is_none() {
        builder.models = Some(Default::default())
    }
    if builder.inference_profile_id.is_none() {
        builder.inference_profile_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::InferenceProfileStatus>().ok()
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::InferenceProfileType>().ok()
    }
    builder
}

pub(crate) fn get_model_copy_job_output_output_correct_errors(
    mut builder: crate::operation::get_model_copy_job::builders::GetModelCopyJobOutputBuilder,
) -> crate::operation::get_model_copy_job::builders::GetModelCopyJobOutputBuilder {
    if builder.job_arn.is_none() {
        builder.job_arn = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ModelCopyJobStatus>().ok()
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.target_model_arn.is_none() {
        builder.target_model_arn = Some(Default::default())
    }
    if builder.source_account_id.is_none() {
        builder.source_account_id = Some(Default::default())
    }
    if builder.source_model_arn.is_none() {
        builder.source_model_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn get_model_customization_job_output_output_correct_errors(
    mut builder: crate::operation::get_model_customization_job::builders::GetModelCustomizationJobOutputBuilder,
) -> crate::operation::get_model_customization_job::builders::GetModelCustomizationJobOutputBuilder {
    if builder.job_arn.is_none() {
        builder.job_arn = Some(Default::default())
    }
    if builder.job_name.is_none() {
        builder.job_name = Some(Default::default())
    }
    if builder.output_model_name.is_none() {
        builder.output_model_name = Some(Default::default())
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.base_model_arn.is_none() {
        builder.base_model_arn = Some(Default::default())
    }
    if builder.training_data_config.is_none() {
        builder.training_data_config = {
            let builder = crate::types::builders::TrainingDataConfigBuilder::default();
            Some(builder.build())
        }
    }
    if builder.validation_data_config.is_none() {
        builder.validation_data_config = {
            let builder = crate::types::builders::ValidationDataConfigBuilder::default();
            crate::serde_util::validation_data_config_correct_errors(builder).build().ok()
        }
    }
    if builder.output_data_config.is_none() {
        builder.output_data_config = {
            let builder = crate::types::builders::OutputDataConfigBuilder::default();
            crate::serde_util::output_data_config_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_model_invocation_job_output_output_correct_errors(
    mut builder: crate::operation::get_model_invocation_job::builders::GetModelInvocationJobOutputBuilder,
) -> crate::operation::get_model_invocation_job::builders::GetModelInvocationJobOutputBuilder {
    if builder.job_arn.is_none() {
        builder.job_arn = Some(Default::default())
    }
    if builder.model_id.is_none() {
        builder.model_id = Some(Default::default())
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    if builder.submit_time.is_none() {
        builder.submit_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.input_data_config.is_none() {
        builder.input_data_config = Some(crate::types::ModelInvocationJobInputDataConfig::Unknown)
    }
    if builder.output_data_config.is_none() {
        builder.output_data_config = Some(crate::types::ModelInvocationJobOutputDataConfig::Unknown)
    }
    builder
}

pub(crate) fn get_prompt_router_output_output_correct_errors(
    mut builder: crate::operation::get_prompt_router::builders::GetPromptRouterOutputBuilder,
) -> crate::operation::get_prompt_router::builders::GetPromptRouterOutputBuilder {
    if builder.prompt_router_name.is_none() {
        builder.prompt_router_name = Some(Default::default())
    }
    if builder.routing_criteria.is_none() {
        builder.routing_criteria = {
            let builder = crate::types::builders::RoutingCriteriaBuilder::default();
            crate::serde_util::routing_criteria_correct_errors(builder).build().ok()
        }
    }
    if builder.prompt_router_arn.is_none() {
        builder.prompt_router_arn = Some(Default::default())
    }
    if builder.models.is_none() {
        builder.models = Some(Default::default())
    }
    if builder.fallback_model.is_none() {
        builder.fallback_model = {
            let builder = crate::types::builders::PromptRouterTargetModelBuilder::default();
            Some(crate::serde_util::prompt_router_target_model_correct_errors(builder).build())
        }
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::PromptRouterStatus>().ok()
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::PromptRouterType>().ok()
    }
    builder
}

pub(crate) fn get_provisioned_model_throughput_output_output_correct_errors(
    mut builder: crate::operation::get_provisioned_model_throughput::builders::GetProvisionedModelThroughputOutputBuilder,
) -> crate::operation::get_provisioned_model_throughput::builders::GetProvisionedModelThroughputOutputBuilder {
    if builder.model_units.is_none() {
        builder.model_units = Some(Default::default())
    }
    if builder.desired_model_units.is_none() {
        builder.desired_model_units = Some(Default::default())
    }
    if builder.provisioned_model_name.is_none() {
        builder.provisioned_model_name = Some(Default::default())
    }
    if builder.provisioned_model_arn.is_none() {
        builder.provisioned_model_arn = Some(Default::default())
    }
    if builder.model_arn.is_none() {
        builder.model_arn = Some(Default::default())
    }
    if builder.desired_model_arn.is_none() {
        builder.desired_model_arn = Some(Default::default())
    }
    if builder.foundation_model_arn.is_none() {
        builder.foundation_model_arn = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ProvisionedModelStatus>().ok()
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_modified_time.is_none() {
        builder.last_modified_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn get_use_case_for_model_access_output_output_correct_errors(
    mut builder: crate::operation::get_use_case_for_model_access::builders::GetUseCaseForModelAccessOutputBuilder,
) -> crate::operation::get_use_case_for_model_access::builders::GetUseCaseForModelAccessOutputBuilder {
    if builder.form_data.is_none() {
        builder.form_data = Some(::aws_smithy_types::Blob::new(""))
    }
    builder
}

pub(crate) fn list_foundation_model_agreement_offers_output_output_correct_errors(
    mut builder: crate::operation::list_foundation_model_agreement_offers::builders::ListFoundationModelAgreementOffersOutputBuilder,
) -> crate::operation::list_foundation_model_agreement_offers::builders::ListFoundationModelAgreementOffersOutputBuilder {
    if builder.model_id.is_none() {
        builder.model_id = Some(Default::default())
    }
    if builder.offers.is_none() {
        builder.offers = Some(Default::default())
    }
    builder
}

pub(crate) fn list_guardrails_output_output_correct_errors(
    mut builder: crate::operation::list_guardrails::builders::ListGuardrailsOutputBuilder,
) -> crate::operation::list_guardrails::builders::ListGuardrailsOutputBuilder {
    if builder.guardrails.is_none() {
        builder.guardrails = Some(Default::default())
    }
    builder
}

pub(crate) fn register_marketplace_model_endpoint_output_output_correct_errors(
    mut builder: crate::operation::register_marketplace_model_endpoint::builders::RegisterMarketplaceModelEndpointOutputBuilder,
) -> crate::operation::register_marketplace_model_endpoint::builders::RegisterMarketplaceModelEndpointOutputBuilder {
    if builder.marketplace_model_endpoint.is_none() {
        builder.marketplace_model_endpoint = {
            let builder = crate::types::builders::MarketplaceModelEndpointBuilder::default();
            crate::serde_util::marketplace_model_endpoint_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn update_guardrail_output_output_correct_errors(
    mut builder: crate::operation::update_guardrail::builders::UpdateGuardrailOutputBuilder,
) -> crate::operation::update_guardrail::builders::UpdateGuardrailOutputBuilder {
    if builder.guardrail_id.is_none() {
        builder.guardrail_id = Some(Default::default())
    }
    if builder.guardrail_arn.is_none() {
        builder.guardrail_arn = Some(Default::default())
    }
    if builder.version.is_none() {
        builder.version = Some(Default::default())
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn update_marketplace_model_endpoint_output_output_correct_errors(
    mut builder: crate::operation::update_marketplace_model_endpoint::builders::UpdateMarketplaceModelEndpointOutputBuilder,
) -> crate::operation::update_marketplace_model_endpoint::builders::UpdateMarketplaceModelEndpointOutputBuilder {
    if builder.marketplace_model_endpoint.is_none() {
        builder.marketplace_model_endpoint = {
            let builder = crate::types::builders::MarketplaceModelEndpointBuilder::default();
            crate::serde_util::marketplace_model_endpoint_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn marketplace_model_endpoint_correct_errors(
    mut builder: crate::types::builders::MarketplaceModelEndpointBuilder,
) -> crate::types::builders::MarketplaceModelEndpointBuilder {
    if builder.endpoint_arn.is_none() {
        builder.endpoint_arn = Some(Default::default())
    }
    if builder.model_source_identifier.is_none() {
        builder.model_source_identifier = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.endpoint_config.is_none() {
        builder.endpoint_config = Some(crate::types::EndpointConfig::Unknown)
    }
    if builder.endpoint_status.is_none() {
        builder.endpoint_status = Some(Default::default())
    }
    builder
}

pub(crate) fn evaluation_output_data_config_correct_errors(
    mut builder: crate::types::builders::EvaluationOutputDataConfigBuilder,
) -> crate::types::builders::EvaluationOutputDataConfigBuilder {
    if builder.s3_uri.is_none() {
        builder.s3_uri = Some(Default::default())
    }
    builder
}

pub(crate) fn agreement_availability_correct_errors(
    mut builder: crate::types::builders::AgreementAvailabilityBuilder,
) -> crate::types::builders::AgreementAvailabilityBuilder {
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::AgreementStatus>().ok()
    }
    builder
}

pub(crate) fn validation_data_config_correct_errors(
    mut builder: crate::types::builders::ValidationDataConfigBuilder,
) -> crate::types::builders::ValidationDataConfigBuilder {
    if builder.validators.is_none() {
        builder.validators = Some(Default::default())
    }
    builder
}

pub(crate) fn output_data_config_correct_errors(
    mut builder: crate::types::builders::OutputDataConfigBuilder,
) -> crate::types::builders::OutputDataConfigBuilder {
    if builder.s3_uri.is_none() {
        builder.s3_uri = Some(Default::default())
    }
    builder
}

pub(crate) fn routing_criteria_correct_errors(
    mut builder: crate::types::builders::RoutingCriteriaBuilder,
) -> crate::types::builders::RoutingCriteriaBuilder {
    if builder.response_quality_difference.is_none() {
        builder.response_quality_difference = Some(Default::default())
    }
    builder
}

pub(crate) fn prompt_router_target_model_correct_errors(
    mut builder: crate::types::builders::PromptRouterTargetModelBuilder,
) -> crate::types::builders::PromptRouterTargetModelBuilder {
    if builder.model_arn.is_none() {
        builder.model_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn foundation_model_details_correct_errors(
    mut builder: crate::types::builders::FoundationModelDetailsBuilder,
) -> crate::types::builders::FoundationModelDetailsBuilder {
    if builder.model_arn.is_none() {
        builder.model_arn = Some(Default::default())
    }
    if builder.model_id.is_none() {
        builder.model_id = Some(Default::default())
    }
    builder
}

pub(crate) fn guardrail_contextual_grounding_policy_correct_errors(
    mut builder: crate::types::builders::GuardrailContextualGroundingPolicyBuilder,
) -> crate::types::builders::GuardrailContextualGroundingPolicyBuilder {
    if builder.filters.is_none() {
        builder.filters = Some(Default::default())
    }
    builder
}

pub(crate) fn guardrail_topic_policy_correct_errors(
    mut builder: crate::types::builders::GuardrailTopicPolicyBuilder,
) -> crate::types::builders::GuardrailTopicPolicyBuilder {
    if builder.topics.is_none() {
        builder.topics = Some(Default::default())
    }
    builder
}

pub(crate) fn vpc_config_correct_errors(mut builder: crate::types::builders::VpcConfigBuilder) -> crate::types::builders::VpcConfigBuilder {
    if builder.subnet_ids.is_none() {
        builder.subnet_ids = Some(Default::default())
    }
    if builder.security_group_ids.is_none() {
        builder.security_group_ids = Some(Default::default())
    }
    builder
}

pub(crate) fn automated_evaluation_config_correct_errors(
    mut builder: crate::types::builders::AutomatedEvaluationConfigBuilder,
) -> crate::types::builders::AutomatedEvaluationConfigBuilder {
    if builder.dataset_metric_configs.is_none() {
        builder.dataset_metric_configs = Some(Default::default())
    }
    builder
}

pub(crate) fn batch_delete_evaluation_job_error_correct_errors(
    mut builder: crate::types::builders::BatchDeleteEvaluationJobErrorBuilder,
) -> crate::types::builders::BatchDeleteEvaluationJobErrorBuilder {
    if builder.job_identifier.is_none() {
        builder.job_identifier = Some(Default::default())
    }
    if builder.code.is_none() {
        builder.code = Some(Default::default())
    }
    builder
}

pub(crate) fn batch_delete_evaluation_job_item_correct_errors(
    mut builder: crate::types::builders::BatchDeleteEvaluationJobItemBuilder,
) -> crate::types::builders::BatchDeleteEvaluationJobItemBuilder {
    if builder.job_identifier.is_none() {
        builder.job_identifier = Some(Default::default())
    }
    if builder.job_status.is_none() {
        builder.job_status = "no value was set".parse::<crate::types::EvaluationJobStatus>().ok()
    }
    builder
}

pub(crate) fn cloud_watch_config_correct_errors(
    mut builder: crate::types::builders::CloudWatchConfigBuilder,
) -> crate::types::builders::CloudWatchConfigBuilder {
    if builder.log_group_name.is_none() {
        builder.log_group_name = Some(Default::default())
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn custom_model_summary_correct_errors(
    mut builder: crate::types::builders::CustomModelSummaryBuilder,
) -> crate::types::builders::CustomModelSummaryBuilder {
    if builder.model_arn.is_none() {
        builder.model_arn = Some(Default::default())
    }
    if builder.model_name.is_none() {
        builder.model_name = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.base_model_arn.is_none() {
        builder.base_model_arn = Some(Default::default())
    }
    if builder.base_model_name.is_none() {
        builder.base_model_name = Some(Default::default())
    }
    builder
}

pub(crate) fn distillation_config_correct_errors(
    mut builder: crate::types::builders::DistillationConfigBuilder,
) -> crate::types::builders::DistillationConfigBuilder {
    if builder.teacher_model_config.is_none() {
        builder.teacher_model_config = {
            let builder = crate::types::builders::TeacherModelConfigBuilder::default();
            crate::serde_util::teacher_model_config_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn evaluation_summary_correct_errors(
    mut builder: crate::types::builders::EvaluationSummaryBuilder,
) -> crate::types::builders::EvaluationSummaryBuilder {
    if builder.job_arn.is_none() {
        builder.job_arn = Some(Default::default())
    }
    if builder.job_name.is_none() {
        builder.job_name = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::EvaluationJobStatus>().ok()
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.job_type.is_none() {
        builder.job_type = "no value was set".parse::<crate::types::EvaluationJobType>().ok()
    }
    if builder.evaluation_task_types.is_none() {
        builder.evaluation_task_types = Some(Default::default())
    }
    builder
}

pub(crate) fn foundation_model_lifecycle_correct_errors(
    mut builder: crate::types::builders::FoundationModelLifecycleBuilder,
) -> crate::types::builders::FoundationModelLifecycleBuilder {
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::FoundationModelLifecycleStatus>().ok()
    }
    builder
}

pub(crate) fn foundation_model_summary_correct_errors(
    mut builder: crate::types::builders::FoundationModelSummaryBuilder,
) -> crate::types::builders::FoundationModelSummaryBuilder {
    if builder.model_arn.is_none() {
        builder.model_arn = Some(Default::default())
    }
    if builder.model_id.is_none() {
        builder.model_id = Some(Default::default())
    }
    builder
}

pub(crate) fn guardrail_content_filters_tier_correct_errors(
    mut builder: crate::types::builders::GuardrailContentFiltersTierBuilder,
) -> crate::types::builders::GuardrailContentFiltersTierBuilder {
    if builder.tier_name.is_none() {
        builder.tier_name = "no value was set".parse::<crate::types::GuardrailContentFiltersTierName>().ok()
    }
    builder
}

pub(crate) fn guardrail_summary_correct_errors(
    mut builder: crate::types::builders::GuardrailSummaryBuilder,
) -> crate::types::builders::GuardrailSummaryBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::GuardrailStatus>().ok()
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.version.is_none() {
        builder.version = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn guardrail_topics_tier_correct_errors(
    mut builder: crate::types::builders::GuardrailTopicsTierBuilder,
) -> crate::types::builders::GuardrailTopicsTierBuilder {
    if builder.tier_name.is_none() {
        builder.tier_name = "no value was set".parse::<crate::types::GuardrailTopicsTierName>().ok()
    }
    builder
}

pub(crate) fn human_evaluation_config_correct_errors(
    mut builder: crate::types::builders::HumanEvaluationConfigBuilder,
) -> crate::types::builders::HumanEvaluationConfigBuilder {
    if builder.dataset_metric_configs.is_none() {
        builder.dataset_metric_configs = Some(Default::default())
    }
    builder
}

pub(crate) fn imported_model_summary_correct_errors(
    mut builder: crate::types::builders::ImportedModelSummaryBuilder,
) -> crate::types::builders::ImportedModelSummaryBuilder {
    if builder.model_arn.is_none() {
        builder.model_arn = Some(Default::default())
    }
    if builder.model_name.is_none() {
        builder.model_name = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn inference_profile_summary_correct_errors(
    mut builder: crate::types::builders::InferenceProfileSummaryBuilder,
) -> crate::types::builders::InferenceProfileSummaryBuilder {
    if builder.inference_profile_name.is_none() {
        builder.inference_profile_name = Some(Default::default())
    }
    if builder.inference_profile_arn.is_none() {
        builder.inference_profile_arn = Some(Default::default())
    }
    if builder.models.is_none() {
        builder.models = Some(Default::default())
    }
    if builder.inference_profile_id.is_none() {
        builder.inference_profile_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::InferenceProfileStatus>().ok()
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::InferenceProfileType>().ok()
    }
    builder
}

pub(crate) fn invocation_logs_config_correct_errors(
    mut builder: crate::types::builders::InvocationLogsConfigBuilder,
) -> crate::types::builders::InvocationLogsConfigBuilder {
    if builder.invocation_log_source.is_none() {
        builder.invocation_log_source = Some(crate::types::InvocationLogSource::Unknown)
    }
    builder
}

pub(crate) fn marketplace_model_endpoint_summary_correct_errors(
    mut builder: crate::types::builders::MarketplaceModelEndpointSummaryBuilder,
) -> crate::types::builders::MarketplaceModelEndpointSummaryBuilder {
    if builder.endpoint_arn.is_none() {
        builder.endpoint_arn = Some(Default::default())
    }
    if builder.model_source_identifier.is_none() {
        builder.model_source_identifier = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn model_copy_job_summary_correct_errors(
    mut builder: crate::types::builders::ModelCopyJobSummaryBuilder,
) -> crate::types::builders::ModelCopyJobSummaryBuilder {
    if builder.job_arn.is_none() {
        builder.job_arn = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ModelCopyJobStatus>().ok()
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.target_model_arn.is_none() {
        builder.target_model_arn = Some(Default::default())
    }
    if builder.source_account_id.is_none() {
        builder.source_account_id = Some(Default::default())
    }
    if builder.source_model_arn.is_none() {
        builder.source_model_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn model_customization_job_summary_correct_errors(
    mut builder: crate::types::builders::ModelCustomizationJobSummaryBuilder,
) -> crate::types::builders::ModelCustomizationJobSummaryBuilder {
    if builder.job_arn.is_none() {
        builder.job_arn = Some(Default::default())
    }
    if builder.base_model_arn.is_none() {
        builder.base_model_arn = Some(Default::default())
    }
    if builder.job_name.is_none() {
        builder.job_name = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ModelCustomizationJobStatus>().ok()
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn model_import_job_summary_correct_errors(
    mut builder: crate::types::builders::ModelImportJobSummaryBuilder,
) -> crate::types::builders::ModelImportJobSummaryBuilder {
    if builder.job_arn.is_none() {
        builder.job_arn = Some(Default::default())
    }
    if builder.job_name.is_none() {
        builder.job_name = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ModelImportJobStatus>().ok()
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn model_invocation_job_s3_input_data_config_correct_errors(
    mut builder: crate::types::builders::ModelInvocationJobS3InputDataConfigBuilder,
) -> crate::types::builders::ModelInvocationJobS3InputDataConfigBuilder {
    if builder.s3_uri.is_none() {
        builder.s3_uri = Some(Default::default())
    }
    builder
}

pub(crate) fn model_invocation_job_s3_output_data_config_correct_errors(
    mut builder: crate::types::builders::ModelInvocationJobS3OutputDataConfigBuilder,
) -> crate::types::builders::ModelInvocationJobS3OutputDataConfigBuilder {
    if builder.s3_uri.is_none() {
        builder.s3_uri = Some(Default::default())
    }
    builder
}

pub(crate) fn model_invocation_job_summary_correct_errors(
    mut builder: crate::types::builders::ModelInvocationJobSummaryBuilder,
) -> crate::types::builders::ModelInvocationJobSummaryBuilder {
    if builder.job_arn.is_none() {
        builder.job_arn = Some(Default::default())
    }
    if builder.job_name.is_none() {
        builder.job_name = Some(Default::default())
    }
    if builder.model_id.is_none() {
        builder.model_id = Some(Default::default())
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    if builder.submit_time.is_none() {
        builder.submit_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.input_data_config.is_none() {
        builder.input_data_config = Some(crate::types::ModelInvocationJobInputDataConfig::Unknown)
    }
    if builder.output_data_config.is_none() {
        builder.output_data_config = Some(crate::types::ModelInvocationJobOutputDataConfig::Unknown)
    }
    builder
}

pub(crate) fn offer_correct_errors(mut builder: crate::types::builders::OfferBuilder) -> crate::types::builders::OfferBuilder {
    if builder.offer_token.is_none() {
        builder.offer_token = Some(Default::default())
    }
    if builder.term_details.is_none() {
        builder.term_details = {
            let builder = crate::types::builders::TermDetailsBuilder::default();
            Some(crate::serde_util::term_details_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn prompt_router_summary_correct_errors(
    mut builder: crate::types::builders::PromptRouterSummaryBuilder,
) -> crate::types::builders::PromptRouterSummaryBuilder {
    if builder.prompt_router_name.is_none() {
        builder.prompt_router_name = Some(Default::default())
    }
    if builder.routing_criteria.is_none() {
        builder.routing_criteria = {
            let builder = crate::types::builders::RoutingCriteriaBuilder::default();
            crate::serde_util::routing_criteria_correct_errors(builder).build().ok()
        }
    }
    if builder.prompt_router_arn.is_none() {
        builder.prompt_router_arn = Some(Default::default())
    }
    if builder.models.is_none() {
        builder.models = Some(Default::default())
    }
    if builder.fallback_model.is_none() {
        builder.fallback_model = {
            let builder = crate::types::builders::PromptRouterTargetModelBuilder::default();
            Some(crate::serde_util::prompt_router_target_model_correct_errors(builder).build())
        }
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::PromptRouterStatus>().ok()
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::PromptRouterType>().ok()
    }
    builder
}

pub(crate) fn provisioned_model_summary_correct_errors(
    mut builder: crate::types::builders::ProvisionedModelSummaryBuilder,
) -> crate::types::builders::ProvisionedModelSummaryBuilder {
    if builder.provisioned_model_name.is_none() {
        builder.provisioned_model_name = Some(Default::default())
    }
    if builder.provisioned_model_arn.is_none() {
        builder.provisioned_model_arn = Some(Default::default())
    }
    if builder.model_arn.is_none() {
        builder.model_arn = Some(Default::default())
    }
    if builder.desired_model_arn.is_none() {
        builder.desired_model_arn = Some(Default::default())
    }
    if builder.foundation_model_arn.is_none() {
        builder.foundation_model_arn = Some(Default::default())
    }
    if builder.model_units.is_none() {
        builder.model_units = Some(Default::default())
    }
    if builder.desired_model_units.is_none() {
        builder.desired_model_units = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ProvisionedModelStatus>().ok()
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_modified_time.is_none() {
        builder.last_modified_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn s3_config_correct_errors(mut builder: crate::types::builders::S3ConfigBuilder) -> crate::types::builders::S3ConfigBuilder {
    if builder.bucket_name.is_none() {
        builder.bucket_name = Some(Default::default())
    }
    builder
}

pub(crate) fn s3_data_source_correct_errors(mut builder: crate::types::builders::S3DataSourceBuilder) -> crate::types::builders::S3DataSourceBuilder {
    if builder.s3_uri.is_none() {
        builder.s3_uri = Some(Default::default())
    }
    builder
}

pub(crate) fn tag_correct_errors(mut builder: crate::types::builders::TagBuilder) -> crate::types::builders::TagBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn automated_evaluation_custom_metric_config_correct_errors(
    mut builder: crate::types::builders::AutomatedEvaluationCustomMetricConfigBuilder,
) -> crate::types::builders::AutomatedEvaluationCustomMetricConfigBuilder {
    if builder.custom_metrics.is_none() {
        builder.custom_metrics = Some(Default::default())
    }
    if builder.evaluator_model_config.is_none() {
        builder.evaluator_model_config = {
            let builder = crate::types::builders::CustomMetricEvaluatorModelConfigBuilder::default();
            crate::serde_util::custom_metric_evaluator_model_config_correct_errors(builder)
                .build()
                .ok()
        }
    }
    builder
}

pub(crate) fn guardrail_content_filter_correct_errors(
    mut builder: crate::types::builders::GuardrailContentFilterBuilder,
) -> crate::types::builders::GuardrailContentFilterBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::GuardrailContentFilterType>().ok()
    }
    if builder.input_strength.is_none() {
        builder.input_strength = "no value was set".parse::<crate::types::GuardrailFilterStrength>().ok()
    }
    if builder.output_strength.is_none() {
        builder.output_strength = "no value was set".parse::<crate::types::GuardrailFilterStrength>().ok()
    }
    builder
}

pub(crate) fn guardrail_contextual_grounding_filter_correct_errors(
    mut builder: crate::types::builders::GuardrailContextualGroundingFilterBuilder,
) -> crate::types::builders::GuardrailContextualGroundingFilterBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::GuardrailContextualGroundingFilterType>().ok()
    }
    if builder.threshold.is_none() {
        builder.threshold = Some(Default::default())
    }
    builder
}

pub(crate) fn guardrail_managed_words_correct_errors(
    mut builder: crate::types::builders::GuardrailManagedWordsBuilder,
) -> crate::types::builders::GuardrailManagedWordsBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::GuardrailManagedWordsType>().ok()
    }
    builder
}

pub(crate) fn guardrail_pii_entity_correct_errors(
    mut builder: crate::types::builders::GuardrailPiiEntityBuilder,
) -> crate::types::builders::GuardrailPiiEntityBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::GuardrailPiiEntityType>().ok()
    }
    if builder.action.is_none() {
        builder.action = "no value was set".parse::<crate::types::GuardrailSensitiveInformationAction>().ok()
    }
    builder
}

pub(crate) fn guardrail_regex_correct_errors(
    mut builder: crate::types::builders::GuardrailRegexBuilder,
) -> crate::types::builders::GuardrailRegexBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.pattern.is_none() {
        builder.pattern = Some(Default::default())
    }
    if builder.action.is_none() {
        builder.action = "no value was set".parse::<crate::types::GuardrailSensitiveInformationAction>().ok()
    }
    builder
}

pub(crate) fn guardrail_topic_correct_errors(
    mut builder: crate::types::builders::GuardrailTopicBuilder,
) -> crate::types::builders::GuardrailTopicBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.definition.is_none() {
        builder.definition = Some(Default::default())
    }
    builder
}

pub(crate) fn guardrail_word_correct_errors(
    mut builder: crate::types::builders::GuardrailWordBuilder,
) -> crate::types::builders::GuardrailWordBuilder {
    if builder.text.is_none() {
        builder.text = Some(Default::default())
    }
    builder
}

pub(crate) fn human_workflow_config_correct_errors(
    mut builder: crate::types::builders::HumanWorkflowConfigBuilder,
) -> crate::types::builders::HumanWorkflowConfigBuilder {
    if builder.flow_definition_arn.is_none() {
        builder.flow_definition_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn sage_maker_endpoint_correct_errors(
    mut builder: crate::types::builders::SageMakerEndpointBuilder,
) -> crate::types::builders::SageMakerEndpointBuilder {
    if builder.initial_instance_count.is_none() {
        builder.initial_instance_count = Some(Default::default())
    }
    if builder.instance_type.is_none() {
        builder.instance_type = Some(Default::default())
    }
    if builder.execution_role.is_none() {
        builder.execution_role = Some(Default::default())
    }
    builder
}

pub(crate) fn teacher_model_config_correct_errors(
    mut builder: crate::types::builders::TeacherModelConfigBuilder,
) -> crate::types::builders::TeacherModelConfigBuilder {
    if builder.teacher_model_identifier.is_none() {
        builder.teacher_model_identifier = Some(Default::default())
    }
    builder
}

pub(crate) fn term_details_correct_errors(mut builder: crate::types::builders::TermDetailsBuilder) -> crate::types::builders::TermDetailsBuilder {
    if builder.usage_based_pricing_term.is_none() {
        builder.usage_based_pricing_term = {
            let builder = crate::types::builders::PricingTermBuilder::default();
            crate::serde_util::pricing_term_correct_errors(builder).build().ok()
        }
    }
    if builder.legal_term.is_none() {
        builder.legal_term = {
            let builder = crate::types::builders::LegalTermBuilder::default();
            Some(builder.build())
        }
    }
    if builder.support_term.is_none() {
        builder.support_term = {
            let builder = crate::types::builders::SupportTermBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn validator_correct_errors(mut builder: crate::types::builders::ValidatorBuilder) -> crate::types::builders::ValidatorBuilder {
    if builder.s3_uri.is_none() {
        builder.s3_uri = Some(Default::default())
    }
    builder
}

pub(crate) fn custom_metric_evaluator_model_config_correct_errors(
    mut builder: crate::types::builders::CustomMetricEvaluatorModelConfigBuilder,
) -> crate::types::builders::CustomMetricEvaluatorModelConfigBuilder {
    if builder.bedrock_evaluator_models.is_none() {
        builder.bedrock_evaluator_models = Some(Default::default())
    }
    builder
}

pub(crate) fn evaluation_bedrock_model_correct_errors(
    mut builder: crate::types::builders::EvaluationBedrockModelBuilder,
) -> crate::types::builders::EvaluationBedrockModelBuilder {
    if builder.model_identifier.is_none() {
        builder.model_identifier = Some(Default::default())
    }
    builder
}

pub(crate) fn evaluation_dataset_metric_config_correct_errors(
    mut builder: crate::types::builders::EvaluationDatasetMetricConfigBuilder,
) -> crate::types::builders::EvaluationDatasetMetricConfigBuilder {
    if builder.task_type.is_none() {
        builder.task_type = "no value was set".parse::<crate::types::EvaluationTaskType>().ok()
    }
    if builder.dataset.is_none() {
        builder.dataset = {
            let builder = crate::types::builders::EvaluationDatasetBuilder::default();
            crate::serde_util::evaluation_dataset_correct_errors(builder).build().ok()
        }
    }
    if builder.metric_names.is_none() {
        builder.metric_names = Some(Default::default())
    }
    builder
}

pub(crate) fn evaluation_precomputed_inference_source_correct_errors(
    mut builder: crate::types::builders::EvaluationPrecomputedInferenceSourceBuilder,
) -> crate::types::builders::EvaluationPrecomputedInferenceSourceBuilder {
    if builder.inference_source_identifier.is_none() {
        builder.inference_source_identifier = Some(Default::default())
    }
    builder
}

pub(crate) fn human_evaluation_custom_metric_correct_errors(
    mut builder: crate::types::builders::HumanEvaluationCustomMetricBuilder,
) -> crate::types::builders::HumanEvaluationCustomMetricBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.rating_method.is_none() {
        builder.rating_method = Some(Default::default())
    }
    builder
}

pub(crate) fn pricing_term_correct_errors(mut builder: crate::types::builders::PricingTermBuilder) -> crate::types::builders::PricingTermBuilder {
    if builder.rate_card.is_none() {
        builder.rate_card = Some(Default::default())
    }
    builder
}

pub(crate) fn bedrock_evaluator_model_correct_errors(
    mut builder: crate::types::builders::BedrockEvaluatorModelBuilder,
) -> crate::types::builders::BedrockEvaluatorModelBuilder {
    if builder.model_identifier.is_none() {
        builder.model_identifier = Some(Default::default())
    }
    builder
}

pub(crate) fn evaluation_dataset_correct_errors(
    mut builder: crate::types::builders::EvaluationDatasetBuilder,
) -> crate::types::builders::EvaluationDatasetBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn evaluation_precomputed_retrieve_and_generate_source_config_correct_errors(
    mut builder: crate::types::builders::EvaluationPrecomputedRetrieveAndGenerateSourceConfigBuilder,
) -> crate::types::builders::EvaluationPrecomputedRetrieveAndGenerateSourceConfigBuilder {
    if builder.rag_source_identifier.is_none() {
        builder.rag_source_identifier = Some(Default::default())
    }
    builder
}

pub(crate) fn evaluation_precomputed_retrieve_source_config_correct_errors(
    mut builder: crate::types::builders::EvaluationPrecomputedRetrieveSourceConfigBuilder,
) -> crate::types::builders::EvaluationPrecomputedRetrieveSourceConfigBuilder {
    if builder.rag_source_identifier.is_none() {
        builder.rag_source_identifier = Some(Default::default())
    }
    builder
}

pub(crate) fn retrieve_and_generate_configuration_correct_errors(
    mut builder: crate::types::builders::RetrieveAndGenerateConfigurationBuilder,
) -> crate::types::builders::RetrieveAndGenerateConfigurationBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::RetrieveAndGenerateType>().ok()
    }
    builder
}

pub(crate) fn retrieve_config_correct_errors(
    mut builder: crate::types::builders::RetrieveConfigBuilder,
) -> crate::types::builders::RetrieveConfigBuilder {
    if builder.knowledge_base_id.is_none() {
        builder.knowledge_base_id = Some(Default::default())
    }
    if builder.knowledge_base_retrieval_configuration.is_none() {
        builder.knowledge_base_retrieval_configuration = {
            let builder = crate::types::builders::KnowledgeBaseRetrievalConfigurationBuilder::default();
            Some(crate::serde_util::knowledge_base_retrieval_configuration_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn custom_metric_bedrock_evaluator_model_correct_errors(
    mut builder: crate::types::builders::CustomMetricBedrockEvaluatorModelBuilder,
) -> crate::types::builders::CustomMetricBedrockEvaluatorModelBuilder {
    if builder.model_identifier.is_none() {
        builder.model_identifier = Some(Default::default())
    }
    builder
}

pub(crate) fn custom_metric_definition_correct_errors(
    mut builder: crate::types::builders::CustomMetricDefinitionBuilder,
) -> crate::types::builders::CustomMetricDefinitionBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.instructions.is_none() {
        builder.instructions = Some(Default::default())
    }
    builder
}

pub(crate) fn external_sources_retrieve_and_generate_configuration_correct_errors(
    mut builder: crate::types::builders::ExternalSourcesRetrieveAndGenerateConfigurationBuilder,
) -> crate::types::builders::ExternalSourcesRetrieveAndGenerateConfigurationBuilder {
    if builder.model_arn.is_none() {
        builder.model_arn = Some(Default::default())
    }
    if builder.sources.is_none() {
        builder.sources = Some(Default::default())
    }
    builder
}

pub(crate) fn knowledge_base_retrieval_configuration_correct_errors(
    mut builder: crate::types::builders::KnowledgeBaseRetrievalConfigurationBuilder,
) -> crate::types::builders::KnowledgeBaseRetrievalConfigurationBuilder {
    if builder.vector_search_configuration.is_none() {
        builder.vector_search_configuration = {
            let builder = crate::types::builders::KnowledgeBaseVectorSearchConfigurationBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn knowledge_base_retrieve_and_generate_configuration_correct_errors(
    mut builder: crate::types::builders::KnowledgeBaseRetrieveAndGenerateConfigurationBuilder,
) -> crate::types::builders::KnowledgeBaseRetrieveAndGenerateConfigurationBuilder {
    if builder.knowledge_base_id.is_none() {
        builder.knowledge_base_id = Some(Default::default())
    }
    if builder.model_arn.is_none() {
        builder.model_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn orchestration_configuration_correct_errors(
    mut builder: crate::types::builders::OrchestrationConfigurationBuilder,
) -> crate::types::builders::OrchestrationConfigurationBuilder {
    if builder.query_transformation_configuration.is_none() {
        builder.query_transformation_configuration = {
            let builder = crate::types::builders::QueryTransformationConfigurationBuilder::default();
            crate::serde_util::query_transformation_configuration_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn external_source_correct_errors(
    mut builder: crate::types::builders::ExternalSourceBuilder,
) -> crate::types::builders::ExternalSourceBuilder {
    if builder.source_type.is_none() {
        builder.source_type = "no value was set".parse::<crate::types::ExternalSourceType>().ok()
    }
    builder
}

pub(crate) fn guardrail_configuration_correct_errors(
    mut builder: crate::types::builders::GuardrailConfigurationBuilder,
) -> crate::types::builders::GuardrailConfigurationBuilder {
    if builder.guardrail_id.is_none() {
        builder.guardrail_id = Some(Default::default())
    }
    if builder.guardrail_version.is_none() {
        builder.guardrail_version = Some(Default::default())
    }
    builder
}

pub(crate) fn implicit_filter_configuration_correct_errors(
    mut builder: crate::types::builders::ImplicitFilterConfigurationBuilder,
) -> crate::types::builders::ImplicitFilterConfigurationBuilder {
    if builder.metadata_attributes.is_none() {
        builder.metadata_attributes = Some(Default::default())
    }
    if builder.model_arn.is_none() {
        builder.model_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn query_transformation_configuration_correct_errors(
    mut builder: crate::types::builders::QueryTransformationConfigurationBuilder,
) -> crate::types::builders::QueryTransformationConfigurationBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::QueryTransformationType>().ok()
    }
    builder
}

pub(crate) fn rating_scale_item_correct_errors(
    mut builder: crate::types::builders::RatingScaleItemBuilder,
) -> crate::types::builders::RatingScaleItemBuilder {
    if builder.definition.is_none() {
        builder.definition = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(crate::types::RatingScaleItemValue::Unknown)
    }
    builder
}

pub(crate) fn vector_search_reranking_configuration_correct_errors(
    mut builder: crate::types::builders::VectorSearchRerankingConfigurationBuilder,
) -> crate::types::builders::VectorSearchRerankingConfigurationBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::VectorSearchRerankingConfigurationType>().ok()
    }
    builder
}

pub(crate) fn byte_content_doc_correct_errors(
    mut builder: crate::types::builders::ByteContentDocBuilder,
) -> crate::types::builders::ByteContentDocBuilder {
    if builder.identifier.is_none() {
        builder.identifier = Some(Default::default())
    }
    if builder.content_type.is_none() {
        builder.content_type = Some(Default::default())
    }
    if builder.data.is_none() {
        builder.data = Some(::aws_smithy_types::Blob::new(""))
    }
    builder
}

pub(crate) fn filter_attribute_correct_errors(
    mut builder: crate::types::builders::FilterAttributeBuilder,
) -> crate::types::builders::FilterAttributeBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn s3_object_doc_correct_errors(mut builder: crate::types::builders::S3ObjectDocBuilder) -> crate::types::builders::S3ObjectDocBuilder {
    if builder.uri.is_none() {
        builder.uri = Some(Default::default())
    }
    builder
}

pub(crate) fn vector_search_bedrock_reranking_configuration_correct_errors(
    mut builder: crate::types::builders::VectorSearchBedrockRerankingConfigurationBuilder,
) -> crate::types::builders::VectorSearchBedrockRerankingConfigurationBuilder {
    if builder.model_configuration.is_none() {
        builder.model_configuration = {
            let builder = crate::types::builders::VectorSearchBedrockRerankingModelConfigurationBuilder::default();
            crate::serde_util::vector_search_bedrock_reranking_model_configuration_correct_errors(builder)
                .build()
                .ok()
        }
    }
    builder
}

pub(crate) fn metadata_attribute_schema_correct_errors(
    mut builder: crate::types::builders::MetadataAttributeSchemaBuilder,
) -> crate::types::builders::MetadataAttributeSchemaBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::AttributeType>().ok()
    }
    if builder.description.is_none() {
        builder.description = Some(Default::default())
    }
    builder
}

pub(crate) fn metadata_configuration_for_reranking_correct_errors(
    mut builder: crate::types::builders::MetadataConfigurationForRerankingBuilder,
) -> crate::types::builders::MetadataConfigurationForRerankingBuilder {
    if builder.selection_mode.is_none() {
        builder.selection_mode = "no value was set".parse::<crate::types::RerankingMetadataSelectionMode>().ok()
    }
    builder
}

pub(crate) fn vector_search_bedrock_reranking_model_configuration_correct_errors(
    mut builder: crate::types::builders::VectorSearchBedrockRerankingModelConfigurationBuilder,
) -> crate::types::builders::VectorSearchBedrockRerankingModelConfigurationBuilder {
    if builder.model_arn.is_none() {
        builder.model_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn field_for_reranking_correct_errors(
    mut builder: crate::types::builders::FieldForRerankingBuilder,
) -> crate::types::builders::FieldForRerankingBuilder {
    if builder.field_name.is_none() {
        builder.field_name = Some(Default::default())
    }
    builder
}
