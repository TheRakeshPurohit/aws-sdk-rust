// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GetAutomatedReasoningPolicyAnnotationsOutput {
    /// <p>The Amazon Resource Name (ARN) of the Automated Reasoning policy.</p>
    pub policy_arn: ::std::string::String,
    /// <p>The name of the Automated Reasoning policy.</p>
    pub name: ::std::string::String,
    /// <p>The unique identifier of the build workflow.</p>
    pub build_workflow_id: ::std::string::String,
    /// <p>The current set of annotations containing rules, variables, and types extracted from the source documents. These can be modified before finalizing the policy.</p>
    pub annotations: ::std::vec::Vec<crate::types::AutomatedReasoningPolicyAnnotation>,
    /// <p>A hash value representing the current state of the annotations. This is used for optimistic concurrency control when updating annotations.</p>
    pub annotation_set_hash: ::std::string::String,
    /// <p>The timestamp when the annotations were last updated.</p>
    pub updated_at: ::aws_smithy_types::DateTime,
    _request_id: Option<String>,
}
impl GetAutomatedReasoningPolicyAnnotationsOutput {
    /// <p>The Amazon Resource Name (ARN) of the Automated Reasoning policy.</p>
    pub fn policy_arn(&self) -> &str {
        use std::ops::Deref;
        self.policy_arn.deref()
    }
    /// <p>The name of the Automated Reasoning policy.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The unique identifier of the build workflow.</p>
    pub fn build_workflow_id(&self) -> &str {
        use std::ops::Deref;
        self.build_workflow_id.deref()
    }
    /// <p>The current set of annotations containing rules, variables, and types extracted from the source documents. These can be modified before finalizing the policy.</p>
    pub fn annotations(&self) -> &[crate::types::AutomatedReasoningPolicyAnnotation] {
        use std::ops::Deref;
        self.annotations.deref()
    }
    /// <p>A hash value representing the current state of the annotations. This is used for optimistic concurrency control when updating annotations.</p>
    pub fn annotation_set_hash(&self) -> &str {
        use std::ops::Deref;
        self.annotation_set_hash.deref()
    }
    /// <p>The timestamp when the annotations were last updated.</p>
    pub fn updated_at(&self) -> &::aws_smithy_types::DateTime {
        &self.updated_at
    }
}
impl ::std::fmt::Debug for GetAutomatedReasoningPolicyAnnotationsOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetAutomatedReasoningPolicyAnnotationsOutput");
        formatter.field("policy_arn", &self.policy_arn);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("build_workflow_id", &self.build_workflow_id);
        formatter.field("annotations", &self.annotations);
        formatter.field("annotation_set_hash", &self.annotation_set_hash);
        formatter.field("updated_at", &self.updated_at);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_types::request_id::RequestId for GetAutomatedReasoningPolicyAnnotationsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetAutomatedReasoningPolicyAnnotationsOutput {
    /// Creates a new builder-style object to manufacture [`GetAutomatedReasoningPolicyAnnotationsOutput`](crate::operation::get_automated_reasoning_policy_annotations::GetAutomatedReasoningPolicyAnnotationsOutput).
    pub fn builder() -> crate::operation::get_automated_reasoning_policy_annotations::builders::GetAutomatedReasoningPolicyAnnotationsOutputBuilder {
        crate::operation::get_automated_reasoning_policy_annotations::builders::GetAutomatedReasoningPolicyAnnotationsOutputBuilder::default()
    }
}

/// A builder for [`GetAutomatedReasoningPolicyAnnotationsOutput`](crate::operation::get_automated_reasoning_policy_annotations::GetAutomatedReasoningPolicyAnnotationsOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct GetAutomatedReasoningPolicyAnnotationsOutputBuilder {
    pub(crate) policy_arn: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) build_workflow_id: ::std::option::Option<::std::string::String>,
    pub(crate) annotations: ::std::option::Option<::std::vec::Vec<crate::types::AutomatedReasoningPolicyAnnotation>>,
    pub(crate) annotation_set_hash: ::std::option::Option<::std::string::String>,
    pub(crate) updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl GetAutomatedReasoningPolicyAnnotationsOutputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the Automated Reasoning policy.</p>
    /// This field is required.
    pub fn policy_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.policy_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Automated Reasoning policy.</p>
    pub fn set_policy_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.policy_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Automated Reasoning policy.</p>
    pub fn get_policy_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.policy_arn
    }
    /// <p>The name of the Automated Reasoning policy.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the Automated Reasoning policy.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the Automated Reasoning policy.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The unique identifier of the build workflow.</p>
    /// This field is required.
    pub fn build_workflow_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.build_workflow_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the build workflow.</p>
    pub fn set_build_workflow_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.build_workflow_id = input;
        self
    }
    /// <p>The unique identifier of the build workflow.</p>
    pub fn get_build_workflow_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.build_workflow_id
    }
    /// Appends an item to `annotations`.
    ///
    /// To override the contents of this collection use [`set_annotations`](Self::set_annotations).
    ///
    /// <p>The current set of annotations containing rules, variables, and types extracted from the source documents. These can be modified before finalizing the policy.</p>
    pub fn annotations(mut self, input: crate::types::AutomatedReasoningPolicyAnnotation) -> Self {
        let mut v = self.annotations.unwrap_or_default();
        v.push(input);
        self.annotations = ::std::option::Option::Some(v);
        self
    }
    /// <p>The current set of annotations containing rules, variables, and types extracted from the source documents. These can be modified before finalizing the policy.</p>
    pub fn set_annotations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AutomatedReasoningPolicyAnnotation>>) -> Self {
        self.annotations = input;
        self
    }
    /// <p>The current set of annotations containing rules, variables, and types extracted from the source documents. These can be modified before finalizing the policy.</p>
    pub fn get_annotations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AutomatedReasoningPolicyAnnotation>> {
        &self.annotations
    }
    /// <p>A hash value representing the current state of the annotations. This is used for optimistic concurrency control when updating annotations.</p>
    /// This field is required.
    pub fn annotation_set_hash(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.annotation_set_hash = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A hash value representing the current state of the annotations. This is used for optimistic concurrency control when updating annotations.</p>
    pub fn set_annotation_set_hash(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.annotation_set_hash = input;
        self
    }
    /// <p>A hash value representing the current state of the annotations. This is used for optimistic concurrency control when updating annotations.</p>
    pub fn get_annotation_set_hash(&self) -> &::std::option::Option<::std::string::String> {
        &self.annotation_set_hash
    }
    /// <p>The timestamp when the annotations were last updated.</p>
    /// This field is required.
    pub fn updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the annotations were last updated.</p>
    pub fn set_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>The timestamp when the annotations were last updated.</p>
    pub fn get_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_at
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetAutomatedReasoningPolicyAnnotationsOutput`](crate::operation::get_automated_reasoning_policy_annotations::GetAutomatedReasoningPolicyAnnotationsOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`policy_arn`](crate::operation::get_automated_reasoning_policy_annotations::builders::GetAutomatedReasoningPolicyAnnotationsOutputBuilder::policy_arn)
    /// - [`name`](crate::operation::get_automated_reasoning_policy_annotations::builders::GetAutomatedReasoningPolicyAnnotationsOutputBuilder::name)
    /// - [`build_workflow_id`](crate::operation::get_automated_reasoning_policy_annotations::builders::GetAutomatedReasoningPolicyAnnotationsOutputBuilder::build_workflow_id)
    /// - [`annotations`](crate::operation::get_automated_reasoning_policy_annotations::builders::GetAutomatedReasoningPolicyAnnotationsOutputBuilder::annotations)
    /// - [`annotation_set_hash`](crate::operation::get_automated_reasoning_policy_annotations::builders::GetAutomatedReasoningPolicyAnnotationsOutputBuilder::annotation_set_hash)
    /// - [`updated_at`](crate::operation::get_automated_reasoning_policy_annotations::builders::GetAutomatedReasoningPolicyAnnotationsOutputBuilder::updated_at)
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_automated_reasoning_policy_annotations::GetAutomatedReasoningPolicyAnnotationsOutput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::get_automated_reasoning_policy_annotations::GetAutomatedReasoningPolicyAnnotationsOutput {
                policy_arn: self.policy_arn.ok_or_else(|| {
                    ::aws_smithy_types::error::operation::BuildError::missing_field(
                        "policy_arn",
                        "policy_arn was not specified but it is required when building GetAutomatedReasoningPolicyAnnotationsOutput",
                    )
                })?,
                name: self.name.ok_or_else(|| {
                    ::aws_smithy_types::error::operation::BuildError::missing_field(
                        "name",
                        "name was not specified but it is required when building GetAutomatedReasoningPolicyAnnotationsOutput",
                    )
                })?,
                build_workflow_id: self.build_workflow_id.ok_or_else(|| {
                    ::aws_smithy_types::error::operation::BuildError::missing_field(
                        "build_workflow_id",
                        "build_workflow_id was not specified but it is required when building GetAutomatedReasoningPolicyAnnotationsOutput",
                    )
                })?,
                annotations: self.annotations.ok_or_else(|| {
                    ::aws_smithy_types::error::operation::BuildError::missing_field(
                        "annotations",
                        "annotations was not specified but it is required when building GetAutomatedReasoningPolicyAnnotationsOutput",
                    )
                })?,
                annotation_set_hash: self.annotation_set_hash.ok_or_else(|| {
                    ::aws_smithy_types::error::operation::BuildError::missing_field(
                        "annotation_set_hash",
                        "annotation_set_hash was not specified but it is required when building GetAutomatedReasoningPolicyAnnotationsOutput",
                    )
                })?,
                updated_at: self.updated_at.ok_or_else(|| {
                    ::aws_smithy_types::error::operation::BuildError::missing_field(
                        "updated_at",
                        "updated_at was not specified but it is required when building GetAutomatedReasoningPolicyAnnotationsOutput",
                    )
                })?,
                _request_id: self._request_id,
            },
        )
    }
}
impl ::std::fmt::Debug for GetAutomatedReasoningPolicyAnnotationsOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetAutomatedReasoningPolicyAnnotationsOutputBuilder");
        formatter.field("policy_arn", &self.policy_arn);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("build_workflow_id", &self.build_workflow_id);
        formatter.field("annotations", &self.annotations);
        formatter.field("annotation_set_hash", &self.annotation_set_hash);
        formatter.field("updated_at", &self.updated_at);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
