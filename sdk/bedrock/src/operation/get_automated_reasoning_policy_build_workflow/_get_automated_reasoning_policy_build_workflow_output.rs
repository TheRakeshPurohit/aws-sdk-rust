// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GetAutomatedReasoningPolicyBuildWorkflowOutput {
    /// <p>The Amazon Resource Name (ARN) of the Automated Reasoning policy.</p>
    pub policy_arn: ::std::string::String,
    /// <p>The unique identifier of the build workflow.</p>
    pub build_workflow_id: ::std::string::String,
    /// <p>The current status of the build workflow (e.g., RUNNING, COMPLETED, FAILED, CANCELLED).</p>
    pub status: crate::types::AutomatedReasoningPolicyBuildWorkflowStatus,
    /// <p>The type of build workflow being executed (e.g., DOCUMENT_INGESTION, POLICY_REPAIR).</p>
    pub build_workflow_type: crate::types::AutomatedReasoningPolicyBuildWorkflowType,
    /// <p>The name of the source document used in the build workflow.</p>
    pub document_name: ::std::option::Option<::std::string::String>,
    /// <p>The content type of the source document (e.g., text/plain, application/pdf).</p>
    pub document_content_type: ::std::option::Option<crate::types::AutomatedReasoningPolicyBuildDocumentContentType>,
    /// <p>A detailed description of the document's content and how it should be used in the policy generation process.</p>
    pub document_description: ::std::option::Option<::std::string::String>,
    /// <p>The timestamp when the build workflow was created.</p>
    pub created_at: ::aws_smithy_types::DateTime,
    /// <p>The timestamp when the build workflow was last updated.</p>
    pub updated_at: ::aws_smithy_types::DateTime,
    _request_id: Option<String>,
}
impl GetAutomatedReasoningPolicyBuildWorkflowOutput {
    /// <p>The Amazon Resource Name (ARN) of the Automated Reasoning policy.</p>
    pub fn policy_arn(&self) -> &str {
        use std::ops::Deref;
        self.policy_arn.deref()
    }
    /// <p>The unique identifier of the build workflow.</p>
    pub fn build_workflow_id(&self) -> &str {
        use std::ops::Deref;
        self.build_workflow_id.deref()
    }
    /// <p>The current status of the build workflow (e.g., RUNNING, COMPLETED, FAILED, CANCELLED).</p>
    pub fn status(&self) -> &crate::types::AutomatedReasoningPolicyBuildWorkflowStatus {
        &self.status
    }
    /// <p>The type of build workflow being executed (e.g., DOCUMENT_INGESTION, POLICY_REPAIR).</p>
    pub fn build_workflow_type(&self) -> &crate::types::AutomatedReasoningPolicyBuildWorkflowType {
        &self.build_workflow_type
    }
    /// <p>The name of the source document used in the build workflow.</p>
    pub fn document_name(&self) -> ::std::option::Option<&str> {
        self.document_name.as_deref()
    }
    /// <p>The content type of the source document (e.g., text/plain, application/pdf).</p>
    pub fn document_content_type(&self) -> ::std::option::Option<&crate::types::AutomatedReasoningPolicyBuildDocumentContentType> {
        self.document_content_type.as_ref()
    }
    /// <p>A detailed description of the document's content and how it should be used in the policy generation process.</p>
    pub fn document_description(&self) -> ::std::option::Option<&str> {
        self.document_description.as_deref()
    }
    /// <p>The timestamp when the build workflow was created.</p>
    pub fn created_at(&self) -> &::aws_smithy_types::DateTime {
        &self.created_at
    }
    /// <p>The timestamp when the build workflow was last updated.</p>
    pub fn updated_at(&self) -> &::aws_smithy_types::DateTime {
        &self.updated_at
    }
}
impl ::std::fmt::Debug for GetAutomatedReasoningPolicyBuildWorkflowOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetAutomatedReasoningPolicyBuildWorkflowOutput");
        formatter.field("policy_arn", &self.policy_arn);
        formatter.field("build_workflow_id", &self.build_workflow_id);
        formatter.field("status", &self.status);
        formatter.field("build_workflow_type", &self.build_workflow_type);
        formatter.field("document_name", &"*** Sensitive Data Redacted ***");
        formatter.field("document_content_type", &self.document_content_type);
        formatter.field("document_description", &"*** Sensitive Data Redacted ***");
        formatter.field("created_at", &self.created_at);
        formatter.field("updated_at", &self.updated_at);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_types::request_id::RequestId for GetAutomatedReasoningPolicyBuildWorkflowOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetAutomatedReasoningPolicyBuildWorkflowOutput {
    /// Creates a new builder-style object to manufacture [`GetAutomatedReasoningPolicyBuildWorkflowOutput`](crate::operation::get_automated_reasoning_policy_build_workflow::GetAutomatedReasoningPolicyBuildWorkflowOutput).
    pub fn builder(
    ) -> crate::operation::get_automated_reasoning_policy_build_workflow::builders::GetAutomatedReasoningPolicyBuildWorkflowOutputBuilder {
        crate::operation::get_automated_reasoning_policy_build_workflow::builders::GetAutomatedReasoningPolicyBuildWorkflowOutputBuilder::default()
    }
}

/// A builder for [`GetAutomatedReasoningPolicyBuildWorkflowOutput`](crate::operation::get_automated_reasoning_policy_build_workflow::GetAutomatedReasoningPolicyBuildWorkflowOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct GetAutomatedReasoningPolicyBuildWorkflowOutputBuilder {
    pub(crate) policy_arn: ::std::option::Option<::std::string::String>,
    pub(crate) build_workflow_id: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::AutomatedReasoningPolicyBuildWorkflowStatus>,
    pub(crate) build_workflow_type: ::std::option::Option<crate::types::AutomatedReasoningPolicyBuildWorkflowType>,
    pub(crate) document_name: ::std::option::Option<::std::string::String>,
    pub(crate) document_content_type: ::std::option::Option<crate::types::AutomatedReasoningPolicyBuildDocumentContentType>,
    pub(crate) document_description: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl GetAutomatedReasoningPolicyBuildWorkflowOutputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the Automated Reasoning policy.</p>
    /// This field is required.
    pub fn policy_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.policy_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Automated Reasoning policy.</p>
    pub fn set_policy_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.policy_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Automated Reasoning policy.</p>
    pub fn get_policy_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.policy_arn
    }
    /// <p>The unique identifier of the build workflow.</p>
    /// This field is required.
    pub fn build_workflow_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.build_workflow_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the build workflow.</p>
    pub fn set_build_workflow_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.build_workflow_id = input;
        self
    }
    /// <p>The unique identifier of the build workflow.</p>
    pub fn get_build_workflow_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.build_workflow_id
    }
    /// <p>The current status of the build workflow (e.g., RUNNING, COMPLETED, FAILED, CANCELLED).</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::AutomatedReasoningPolicyBuildWorkflowStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the build workflow (e.g., RUNNING, COMPLETED, FAILED, CANCELLED).</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::AutomatedReasoningPolicyBuildWorkflowStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status of the build workflow (e.g., RUNNING, COMPLETED, FAILED, CANCELLED).</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::AutomatedReasoningPolicyBuildWorkflowStatus> {
        &self.status
    }
    /// <p>The type of build workflow being executed (e.g., DOCUMENT_INGESTION, POLICY_REPAIR).</p>
    /// This field is required.
    pub fn build_workflow_type(mut self, input: crate::types::AutomatedReasoningPolicyBuildWorkflowType) -> Self {
        self.build_workflow_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of build workflow being executed (e.g., DOCUMENT_INGESTION, POLICY_REPAIR).</p>
    pub fn set_build_workflow_type(mut self, input: ::std::option::Option<crate::types::AutomatedReasoningPolicyBuildWorkflowType>) -> Self {
        self.build_workflow_type = input;
        self
    }
    /// <p>The type of build workflow being executed (e.g., DOCUMENT_INGESTION, POLICY_REPAIR).</p>
    pub fn get_build_workflow_type(&self) -> &::std::option::Option<crate::types::AutomatedReasoningPolicyBuildWorkflowType> {
        &self.build_workflow_type
    }
    /// <p>The name of the source document used in the build workflow.</p>
    pub fn document_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.document_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the source document used in the build workflow.</p>
    pub fn set_document_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.document_name = input;
        self
    }
    /// <p>The name of the source document used in the build workflow.</p>
    pub fn get_document_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.document_name
    }
    /// <p>The content type of the source document (e.g., text/plain, application/pdf).</p>
    pub fn document_content_type(mut self, input: crate::types::AutomatedReasoningPolicyBuildDocumentContentType) -> Self {
        self.document_content_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The content type of the source document (e.g., text/plain, application/pdf).</p>
    pub fn set_document_content_type(mut self, input: ::std::option::Option<crate::types::AutomatedReasoningPolicyBuildDocumentContentType>) -> Self {
        self.document_content_type = input;
        self
    }
    /// <p>The content type of the source document (e.g., text/plain, application/pdf).</p>
    pub fn get_document_content_type(&self) -> &::std::option::Option<crate::types::AutomatedReasoningPolicyBuildDocumentContentType> {
        &self.document_content_type
    }
    /// <p>A detailed description of the document's content and how it should be used in the policy generation process.</p>
    pub fn document_description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.document_description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A detailed description of the document's content and how it should be used in the policy generation process.</p>
    pub fn set_document_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.document_description = input;
        self
    }
    /// <p>A detailed description of the document's content and how it should be used in the policy generation process.</p>
    pub fn get_document_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.document_description
    }
    /// <p>The timestamp when the build workflow was created.</p>
    /// This field is required.
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the build workflow was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The timestamp when the build workflow was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The timestamp when the build workflow was last updated.</p>
    /// This field is required.
    pub fn updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the build workflow was last updated.</p>
    pub fn set_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>The timestamp when the build workflow was last updated.</p>
    pub fn get_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_at
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetAutomatedReasoningPolicyBuildWorkflowOutput`](crate::operation::get_automated_reasoning_policy_build_workflow::GetAutomatedReasoningPolicyBuildWorkflowOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`policy_arn`](crate::operation::get_automated_reasoning_policy_build_workflow::builders::GetAutomatedReasoningPolicyBuildWorkflowOutputBuilder::policy_arn)
    /// - [`build_workflow_id`](crate::operation::get_automated_reasoning_policy_build_workflow::builders::GetAutomatedReasoningPolicyBuildWorkflowOutputBuilder::build_workflow_id)
    /// - [`status`](crate::operation::get_automated_reasoning_policy_build_workflow::builders::GetAutomatedReasoningPolicyBuildWorkflowOutputBuilder::status)
    /// - [`build_workflow_type`](crate::operation::get_automated_reasoning_policy_build_workflow::builders::GetAutomatedReasoningPolicyBuildWorkflowOutputBuilder::build_workflow_type)
    /// - [`created_at`](crate::operation::get_automated_reasoning_policy_build_workflow::builders::GetAutomatedReasoningPolicyBuildWorkflowOutputBuilder::created_at)
    /// - [`updated_at`](crate::operation::get_automated_reasoning_policy_build_workflow::builders::GetAutomatedReasoningPolicyBuildWorkflowOutputBuilder::updated_at)
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_automated_reasoning_policy_build_workflow::GetAutomatedReasoningPolicyBuildWorkflowOutput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::get_automated_reasoning_policy_build_workflow::GetAutomatedReasoningPolicyBuildWorkflowOutput {
                policy_arn: self.policy_arn.ok_or_else(|| {
                    ::aws_smithy_types::error::operation::BuildError::missing_field(
                        "policy_arn",
                        "policy_arn was not specified but it is required when building GetAutomatedReasoningPolicyBuildWorkflowOutput",
                    )
                })?,
                build_workflow_id: self.build_workflow_id.ok_or_else(|| {
                    ::aws_smithy_types::error::operation::BuildError::missing_field(
                        "build_workflow_id",
                        "build_workflow_id was not specified but it is required when building GetAutomatedReasoningPolicyBuildWorkflowOutput",
                    )
                })?,
                status: self.status.ok_or_else(|| {
                    ::aws_smithy_types::error::operation::BuildError::missing_field(
                        "status",
                        "status was not specified but it is required when building GetAutomatedReasoningPolicyBuildWorkflowOutput",
                    )
                })?,
                build_workflow_type: self.build_workflow_type.ok_or_else(|| {
                    ::aws_smithy_types::error::operation::BuildError::missing_field(
                        "build_workflow_type",
                        "build_workflow_type was not specified but it is required when building GetAutomatedReasoningPolicyBuildWorkflowOutput",
                    )
                })?,
                document_name: self.document_name,
                document_content_type: self.document_content_type,
                document_description: self.document_description,
                created_at: self.created_at.ok_or_else(|| {
                    ::aws_smithy_types::error::operation::BuildError::missing_field(
                        "created_at",
                        "created_at was not specified but it is required when building GetAutomatedReasoningPolicyBuildWorkflowOutput",
                    )
                })?,
                updated_at: self.updated_at.ok_or_else(|| {
                    ::aws_smithy_types::error::operation::BuildError::missing_field(
                        "updated_at",
                        "updated_at was not specified but it is required when building GetAutomatedReasoningPolicyBuildWorkflowOutput",
                    )
                })?,
                _request_id: self._request_id,
            },
        )
    }
}
impl ::std::fmt::Debug for GetAutomatedReasoningPolicyBuildWorkflowOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetAutomatedReasoningPolicyBuildWorkflowOutputBuilder");
        formatter.field("policy_arn", &self.policy_arn);
        formatter.field("build_workflow_id", &self.build_workflow_id);
        formatter.field("status", &self.status);
        formatter.field("build_workflow_type", &self.build_workflow_type);
        formatter.field("document_name", &"*** Sensitive Data Redacted ***");
        formatter.field("document_content_type", &self.document_content_type);
        formatter.field("document_description", &"*** Sensitive Data Redacted ***");
        formatter.field("created_at", &self.created_at);
        formatter.field("updated_at", &self.updated_at);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
