// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StartAutomatedReasoningPolicyTestWorkflowInput {
    /// <p>The Amazon Resource Name (ARN) of the Automated Reasoning policy to test.</p>
    pub policy_arn: ::std::option::Option<::std::string::String>,
    /// <p>The build workflow identifier. The build workflow must show a <code>COMPLETED</code> status before running tests.</p>
    pub build_workflow_id: ::std::option::Option<::std::string::String>,
    /// <p>The list of test identifiers to run. If not provided, all tests for the policy are run.</p>
    pub test_case_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>A unique, case-sensitive identifier to ensure that the operation completes no more than one time. If this token matches a previous request, Amazon Bedrock ignores the request but doesn't return an error.</p>
    pub client_request_token: ::std::option::Option<::std::string::String>,
}
impl StartAutomatedReasoningPolicyTestWorkflowInput {
    /// <p>The Amazon Resource Name (ARN) of the Automated Reasoning policy to test.</p>
    pub fn policy_arn(&self) -> ::std::option::Option<&str> {
        self.policy_arn.as_deref()
    }
    /// <p>The build workflow identifier. The build workflow must show a <code>COMPLETED</code> status before running tests.</p>
    pub fn build_workflow_id(&self) -> ::std::option::Option<&str> {
        self.build_workflow_id.as_deref()
    }
    /// <p>The list of test identifiers to run. If not provided, all tests for the policy are run.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.test_case_ids.is_none()`.
    pub fn test_case_ids(&self) -> &[::std::string::String] {
        self.test_case_ids.as_deref().unwrap_or_default()
    }
    /// <p>A unique, case-sensitive identifier to ensure that the operation completes no more than one time. If this token matches a previous request, Amazon Bedrock ignores the request but doesn't return an error.</p>
    pub fn client_request_token(&self) -> ::std::option::Option<&str> {
        self.client_request_token.as_deref()
    }
}
impl StartAutomatedReasoningPolicyTestWorkflowInput {
    /// Creates a new builder-style object to manufacture [`StartAutomatedReasoningPolicyTestWorkflowInput`](crate::operation::start_automated_reasoning_policy_test_workflow::StartAutomatedReasoningPolicyTestWorkflowInput).
    pub fn builder(
    ) -> crate::operation::start_automated_reasoning_policy_test_workflow::builders::StartAutomatedReasoningPolicyTestWorkflowInputBuilder {
        crate::operation::start_automated_reasoning_policy_test_workflow::builders::StartAutomatedReasoningPolicyTestWorkflowInputBuilder::default()
    }
}

/// A builder for [`StartAutomatedReasoningPolicyTestWorkflowInput`](crate::operation::start_automated_reasoning_policy_test_workflow::StartAutomatedReasoningPolicyTestWorkflowInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct StartAutomatedReasoningPolicyTestWorkflowInputBuilder {
    pub(crate) policy_arn: ::std::option::Option<::std::string::String>,
    pub(crate) build_workflow_id: ::std::option::Option<::std::string::String>,
    pub(crate) test_case_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) client_request_token: ::std::option::Option<::std::string::String>,
}
impl StartAutomatedReasoningPolicyTestWorkflowInputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the Automated Reasoning policy to test.</p>
    /// This field is required.
    pub fn policy_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.policy_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Automated Reasoning policy to test.</p>
    pub fn set_policy_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.policy_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Automated Reasoning policy to test.</p>
    pub fn get_policy_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.policy_arn
    }
    /// <p>The build workflow identifier. The build workflow must show a <code>COMPLETED</code> status before running tests.</p>
    /// This field is required.
    pub fn build_workflow_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.build_workflow_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The build workflow identifier. The build workflow must show a <code>COMPLETED</code> status before running tests.</p>
    pub fn set_build_workflow_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.build_workflow_id = input;
        self
    }
    /// <p>The build workflow identifier. The build workflow must show a <code>COMPLETED</code> status before running tests.</p>
    pub fn get_build_workflow_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.build_workflow_id
    }
    /// Appends an item to `test_case_ids`.
    ///
    /// To override the contents of this collection use [`set_test_case_ids`](Self::set_test_case_ids).
    ///
    /// <p>The list of test identifiers to run. If not provided, all tests for the policy are run.</p>
    pub fn test_case_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.test_case_ids.unwrap_or_default();
        v.push(input.into());
        self.test_case_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of test identifiers to run. If not provided, all tests for the policy are run.</p>
    pub fn set_test_case_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.test_case_ids = input;
        self
    }
    /// <p>The list of test identifiers to run. If not provided, all tests for the policy are run.</p>
    pub fn get_test_case_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.test_case_ids
    }
    /// <p>A unique, case-sensitive identifier to ensure that the operation completes no more than one time. If this token matches a previous request, Amazon Bedrock ignores the request but doesn't return an error.</p>
    pub fn client_request_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_request_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier to ensure that the operation completes no more than one time. If this token matches a previous request, Amazon Bedrock ignores the request but doesn't return an error.</p>
    pub fn set_client_request_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_request_token = input;
        self
    }
    /// <p>A unique, case-sensitive identifier to ensure that the operation completes no more than one time. If this token matches a previous request, Amazon Bedrock ignores the request but doesn't return an error.</p>
    pub fn get_client_request_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_request_token
    }
    /// Consumes the builder and constructs a [`StartAutomatedReasoningPolicyTestWorkflowInput`](crate::operation::start_automated_reasoning_policy_test_workflow::StartAutomatedReasoningPolicyTestWorkflowInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::start_automated_reasoning_policy_test_workflow::StartAutomatedReasoningPolicyTestWorkflowInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::start_automated_reasoning_policy_test_workflow::StartAutomatedReasoningPolicyTestWorkflowInput {
                policy_arn: self.policy_arn,
                build_workflow_id: self.build_workflow_id,
                test_case_ids: self.test_case_ids,
                client_request_token: self.client_request_token,
            },
        )
    }
}
