// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListAutomatedReasoningPoliciesOutput {
    /// <p>A list of Automated Reasoning policy summaries.</p>
    pub automated_reasoning_policy_summaries: ::std::vec::Vec<crate::types::AutomatedReasoningPolicySummary>,
    /// <p>The pagination token to use in a subsequent request to retrieve the next page of results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListAutomatedReasoningPoliciesOutput {
    /// <p>A list of Automated Reasoning policy summaries.</p>
    pub fn automated_reasoning_policy_summaries(&self) -> &[crate::types::AutomatedReasoningPolicySummary] {
        use std::ops::Deref;
        self.automated_reasoning_policy_summaries.deref()
    }
    /// <p>The pagination token to use in a subsequent request to retrieve the next page of results.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ::aws_types::request_id::RequestId for ListAutomatedReasoningPoliciesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListAutomatedReasoningPoliciesOutput {
    /// Creates a new builder-style object to manufacture [`ListAutomatedReasoningPoliciesOutput`](crate::operation::list_automated_reasoning_policies::ListAutomatedReasoningPoliciesOutput).
    pub fn builder() -> crate::operation::list_automated_reasoning_policies::builders::ListAutomatedReasoningPoliciesOutputBuilder {
        crate::operation::list_automated_reasoning_policies::builders::ListAutomatedReasoningPoliciesOutputBuilder::default()
    }
}

/// A builder for [`ListAutomatedReasoningPoliciesOutput`](crate::operation::list_automated_reasoning_policies::ListAutomatedReasoningPoliciesOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListAutomatedReasoningPoliciesOutputBuilder {
    pub(crate) automated_reasoning_policy_summaries: ::std::option::Option<::std::vec::Vec<crate::types::AutomatedReasoningPolicySummary>>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListAutomatedReasoningPoliciesOutputBuilder {
    /// Appends an item to `automated_reasoning_policy_summaries`.
    ///
    /// To override the contents of this collection use [`set_automated_reasoning_policy_summaries`](Self::set_automated_reasoning_policy_summaries).
    ///
    /// <p>A list of Automated Reasoning policy summaries.</p>
    pub fn automated_reasoning_policy_summaries(mut self, input: crate::types::AutomatedReasoningPolicySummary) -> Self {
        let mut v = self.automated_reasoning_policy_summaries.unwrap_or_default();
        v.push(input);
        self.automated_reasoning_policy_summaries = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of Automated Reasoning policy summaries.</p>
    pub fn set_automated_reasoning_policy_summaries(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::AutomatedReasoningPolicySummary>>,
    ) -> Self {
        self.automated_reasoning_policy_summaries = input;
        self
    }
    /// <p>A list of Automated Reasoning policy summaries.</p>
    pub fn get_automated_reasoning_policy_summaries(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AutomatedReasoningPolicySummary>> {
        &self.automated_reasoning_policy_summaries
    }
    /// <p>The pagination token to use in a subsequent request to retrieve the next page of results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The pagination token to use in a subsequent request to retrieve the next page of results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The pagination token to use in a subsequent request to retrieve the next page of results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListAutomatedReasoningPoliciesOutput`](crate::operation::list_automated_reasoning_policies::ListAutomatedReasoningPoliciesOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`automated_reasoning_policy_summaries`](crate::operation::list_automated_reasoning_policies::builders::ListAutomatedReasoningPoliciesOutputBuilder::automated_reasoning_policy_summaries)
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_automated_reasoning_policies::ListAutomatedReasoningPoliciesOutput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::list_automated_reasoning_policies::ListAutomatedReasoningPoliciesOutput {
                automated_reasoning_policy_summaries: self.automated_reasoning_policy_summaries
                    .ok_or_else(||
                        ::aws_smithy_types::error::operation::BuildError::missing_field("automated_reasoning_policy_summaries", "automated_reasoning_policy_summaries was not specified but it is required when building ListAutomatedReasoningPoliciesOutput")
                    )?
                ,
                next_token: self.next_token
                ,
                _request_id: self._request_id,
            }
        )
    }
}
