// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::get_automated_reasoning_policy_build_workflow_result_assets::_get_automated_reasoning_policy_build_workflow_result_assets_output::GetAutomatedReasoningPolicyBuildWorkflowResultAssetsOutputBuilder;

pub use crate::operation::get_automated_reasoning_policy_build_workflow_result_assets::_get_automated_reasoning_policy_build_workflow_result_assets_input::GetAutomatedReasoningPolicyBuildWorkflowResultAssetsInputBuilder;

impl crate::operation::get_automated_reasoning_policy_build_workflow_result_assets::builders::GetAutomatedReasoningPolicyBuildWorkflowResultAssetsInputBuilder {
                    /// Sends a request with this input using the given client.
                    pub async fn send_with(self, client: &crate::Client) -> ::std::result::Result<
                        crate::operation::get_automated_reasoning_policy_build_workflow_result_assets::GetAutomatedReasoningPolicyBuildWorkflowResultAssetsOutput,
                        ::aws_smithy_runtime_api::client::result::SdkError<
                            crate::operation::get_automated_reasoning_policy_build_workflow_result_assets::GetAutomatedReasoningPolicyBuildWorkflowResultAssetsError,
                            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse
                        >
                    > {
                        let mut fluent_builder = client.get_automated_reasoning_policy_build_workflow_result_assets();
                        fluent_builder.inner = self;
                        fluent_builder.send().await
                    }
                }
/// Fluent builder constructing a request to `GetAutomatedReasoningPolicyBuildWorkflowResultAssets`.
///
/// <p>Retrieves the resulting assets from a completed Automated Reasoning policy build workflow, including build logs, quality reports, and generated policy artifacts.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct GetAutomatedReasoningPolicyBuildWorkflowResultAssetsFluentBuilder {
                handle: ::std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::get_automated_reasoning_policy_build_workflow_result_assets::builders::GetAutomatedReasoningPolicyBuildWorkflowResultAssetsInputBuilder,
config_override: ::std::option::Option<crate::config::Builder>,
            }
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::get_automated_reasoning_policy_build_workflow_result_assets::GetAutomatedReasoningPolicyBuildWorkflowResultAssetsOutput,
        crate::operation::get_automated_reasoning_policy_build_workflow_result_assets::GetAutomatedReasoningPolicyBuildWorkflowResultAssetsError,
    > for GetAutomatedReasoningPolicyBuildWorkflowResultAssetsFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::get_automated_reasoning_policy_build_workflow_result_assets::GetAutomatedReasoningPolicyBuildWorkflowResultAssetsOutput,
            crate::operation::get_automated_reasoning_policy_build_workflow_result_assets::GetAutomatedReasoningPolicyBuildWorkflowResultAssetsError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl GetAutomatedReasoningPolicyBuildWorkflowResultAssetsFluentBuilder {
    /// Creates a new `GetAutomatedReasoningPolicyBuildWorkflowResultAssetsFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the GetAutomatedReasoningPolicyBuildWorkflowResultAssets as a reference.
    pub fn as_input(&self) -> &crate::operation::get_automated_reasoning_policy_build_workflow_result_assets::builders::GetAutomatedReasoningPolicyBuildWorkflowResultAssetsInputBuilder{
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_automated_reasoning_policy_build_workflow_result_assets::GetAutomatedReasoningPolicyBuildWorkflowResultAssetsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_automated_reasoning_policy_build_workflow_result_assets::GetAutomatedReasoningPolicyBuildWorkflowResultAssetsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::get_automated_reasoning_policy_build_workflow_result_assets::GetAutomatedReasoningPolicyBuildWorkflowResultAssets::operation_runtime_plugins(
                            self.handle.runtime_plugins.clone(),
                            &self.handle.conf,
                            self.config_override,
                        );
        crate::operation::get_automated_reasoning_policy_build_workflow_result_assets::GetAutomatedReasoningPolicyBuildWorkflowResultAssets::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::get_automated_reasoning_policy_build_workflow_result_assets::GetAutomatedReasoningPolicyBuildWorkflowResultAssetsOutput,
        crate::operation::get_automated_reasoning_policy_build_workflow_result_assets::GetAutomatedReasoningPolicyBuildWorkflowResultAssetsError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Automated Reasoning policy whose build workflow assets you want to retrieve.</p>
    pub fn policy_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.policy_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Automated Reasoning policy whose build workflow assets you want to retrieve.</p>
    pub fn set_policy_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_policy_arn(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Automated Reasoning policy whose build workflow assets you want to retrieve.</p>
    pub fn get_policy_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_policy_arn()
    }
    /// <p>The unique identifier of the build workflow whose result assets you want to retrieve.</p>
    pub fn build_workflow_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.build_workflow_id(input.into());
        self
    }
    /// <p>The unique identifier of the build workflow whose result assets you want to retrieve.</p>
    pub fn set_build_workflow_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_build_workflow_id(input);
        self
    }
    /// <p>The unique identifier of the build workflow whose result assets you want to retrieve.</p>
    pub fn get_build_workflow_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_build_workflow_id()
    }
    /// <p>The type of asset to retrieve (e.g., BUILD_LOG, QUALITY_REPORT, POLICY_DEFINITION).</p>
    pub fn asset_type(mut self, input: crate::types::AutomatedReasoningPolicyBuildResultAssetType) -> Self {
        self.inner = self.inner.asset_type(input);
        self
    }
    /// <p>The type of asset to retrieve (e.g., BUILD_LOG, QUALITY_REPORT, POLICY_DEFINITION).</p>
    pub fn set_asset_type(mut self, input: ::std::option::Option<crate::types::AutomatedReasoningPolicyBuildResultAssetType>) -> Self {
        self.inner = self.inner.set_asset_type(input);
        self
    }
    /// <p>The type of asset to retrieve (e.g., BUILD_LOG, QUALITY_REPORT, POLICY_DEFINITION).</p>
    pub fn get_asset_type(&self) -> &::std::option::Option<crate::types::AutomatedReasoningPolicyBuildResultAssetType> {
        self.inner.get_asset_type()
    }
}
