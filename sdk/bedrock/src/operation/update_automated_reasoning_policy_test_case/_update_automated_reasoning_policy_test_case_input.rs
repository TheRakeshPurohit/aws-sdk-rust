// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct UpdateAutomatedReasoningPolicyTestCaseInput {
    /// <p>The Amazon Resource Name (ARN) of the Automated Reasoning policy that contains the test.</p>
    pub policy_arn: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of the test to update.</p>
    pub test_case_id: ::std::option::Option<::std::string::String>,
    /// <p>The updated content to be validated by the Automated Reasoning policy.</p>
    pub guard_content: ::std::option::Option<::std::string::String>,
    /// <p>The updated input query or prompt that generated the content.</p>
    pub query_content: ::std::option::Option<::std::string::String>,
    /// <p>The timestamp when the test was last updated. This is used as a concurrency token to prevent conflicting modifications.</p>
    pub last_updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The updated expected result of the Automated Reasoning check.</p>
    pub expected_aggregated_findings_result: ::std::option::Option<crate::types::AutomatedReasoningCheckResult>,
    /// <p>The updated minimum confidence level for logic validation. If null is provided, the threshold will be removed.</p>
    pub confidence_threshold: ::std::option::Option<f64>,
    /// <p>A unique, case-sensitive identifier to ensure that the operation completes no more than one time. If this token matches a previous request, Amazon Bedrock ignores the request, but does not return an error.</p>
    pub client_request_token: ::std::option::Option<::std::string::String>,
}
impl UpdateAutomatedReasoningPolicyTestCaseInput {
    /// <p>The Amazon Resource Name (ARN) of the Automated Reasoning policy that contains the test.</p>
    pub fn policy_arn(&self) -> ::std::option::Option<&str> {
        self.policy_arn.as_deref()
    }
    /// <p>The unique identifier of the test to update.</p>
    pub fn test_case_id(&self) -> ::std::option::Option<&str> {
        self.test_case_id.as_deref()
    }
    /// <p>The updated content to be validated by the Automated Reasoning policy.</p>
    pub fn guard_content(&self) -> ::std::option::Option<&str> {
        self.guard_content.as_deref()
    }
    /// <p>The updated input query or prompt that generated the content.</p>
    pub fn query_content(&self) -> ::std::option::Option<&str> {
        self.query_content.as_deref()
    }
    /// <p>The timestamp when the test was last updated. This is used as a concurrency token to prevent conflicting modifications.</p>
    pub fn last_updated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_updated_at.as_ref()
    }
    /// <p>The updated expected result of the Automated Reasoning check.</p>
    pub fn expected_aggregated_findings_result(&self) -> ::std::option::Option<&crate::types::AutomatedReasoningCheckResult> {
        self.expected_aggregated_findings_result.as_ref()
    }
    /// <p>The updated minimum confidence level for logic validation. If null is provided, the threshold will be removed.</p>
    pub fn confidence_threshold(&self) -> ::std::option::Option<f64> {
        self.confidence_threshold
    }
    /// <p>A unique, case-sensitive identifier to ensure that the operation completes no more than one time. If this token matches a previous request, Amazon Bedrock ignores the request, but does not return an error.</p>
    pub fn client_request_token(&self) -> ::std::option::Option<&str> {
        self.client_request_token.as_deref()
    }
}
impl ::std::fmt::Debug for UpdateAutomatedReasoningPolicyTestCaseInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateAutomatedReasoningPolicyTestCaseInput");
        formatter.field("policy_arn", &self.policy_arn);
        formatter.field("test_case_id", &self.test_case_id);
        formatter.field("guard_content", &"*** Sensitive Data Redacted ***");
        formatter.field("query_content", &"*** Sensitive Data Redacted ***");
        formatter.field("last_updated_at", &self.last_updated_at);
        formatter.field("expected_aggregated_findings_result", &self.expected_aggregated_findings_result);
        formatter.field("confidence_threshold", &self.confidence_threshold);
        formatter.field("client_request_token", &self.client_request_token);
        formatter.finish()
    }
}
impl UpdateAutomatedReasoningPolicyTestCaseInput {
    /// Creates a new builder-style object to manufacture [`UpdateAutomatedReasoningPolicyTestCaseInput`](crate::operation::update_automated_reasoning_policy_test_case::UpdateAutomatedReasoningPolicyTestCaseInput).
    pub fn builder() -> crate::operation::update_automated_reasoning_policy_test_case::builders::UpdateAutomatedReasoningPolicyTestCaseInputBuilder {
        crate::operation::update_automated_reasoning_policy_test_case::builders::UpdateAutomatedReasoningPolicyTestCaseInputBuilder::default()
    }
}

/// A builder for [`UpdateAutomatedReasoningPolicyTestCaseInput`](crate::operation::update_automated_reasoning_policy_test_case::UpdateAutomatedReasoningPolicyTestCaseInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct UpdateAutomatedReasoningPolicyTestCaseInputBuilder {
    pub(crate) policy_arn: ::std::option::Option<::std::string::String>,
    pub(crate) test_case_id: ::std::option::Option<::std::string::String>,
    pub(crate) guard_content: ::std::option::Option<::std::string::String>,
    pub(crate) query_content: ::std::option::Option<::std::string::String>,
    pub(crate) last_updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) expected_aggregated_findings_result: ::std::option::Option<crate::types::AutomatedReasoningCheckResult>,
    pub(crate) confidence_threshold: ::std::option::Option<f64>,
    pub(crate) client_request_token: ::std::option::Option<::std::string::String>,
}
impl UpdateAutomatedReasoningPolicyTestCaseInputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the Automated Reasoning policy that contains the test.</p>
    /// This field is required.
    pub fn policy_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.policy_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Automated Reasoning policy that contains the test.</p>
    pub fn set_policy_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.policy_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Automated Reasoning policy that contains the test.</p>
    pub fn get_policy_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.policy_arn
    }
    /// <p>The unique identifier of the test to update.</p>
    /// This field is required.
    pub fn test_case_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.test_case_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the test to update.</p>
    pub fn set_test_case_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.test_case_id = input;
        self
    }
    /// <p>The unique identifier of the test to update.</p>
    pub fn get_test_case_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.test_case_id
    }
    /// <p>The updated content to be validated by the Automated Reasoning policy.</p>
    /// This field is required.
    pub fn guard_content(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.guard_content = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The updated content to be validated by the Automated Reasoning policy.</p>
    pub fn set_guard_content(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.guard_content = input;
        self
    }
    /// <p>The updated content to be validated by the Automated Reasoning policy.</p>
    pub fn get_guard_content(&self) -> &::std::option::Option<::std::string::String> {
        &self.guard_content
    }
    /// <p>The updated input query or prompt that generated the content.</p>
    pub fn query_content(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.query_content = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The updated input query or prompt that generated the content.</p>
    pub fn set_query_content(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.query_content = input;
        self
    }
    /// <p>The updated input query or prompt that generated the content.</p>
    pub fn get_query_content(&self) -> &::std::option::Option<::std::string::String> {
        &self.query_content
    }
    /// <p>The timestamp when the test was last updated. This is used as a concurrency token to prevent conflicting modifications.</p>
    /// This field is required.
    pub fn last_updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the test was last updated. This is used as a concurrency token to prevent conflicting modifications.</p>
    pub fn set_last_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated_at = input;
        self
    }
    /// <p>The timestamp when the test was last updated. This is used as a concurrency token to prevent conflicting modifications.</p>
    pub fn get_last_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated_at
    }
    /// <p>The updated expected result of the Automated Reasoning check.</p>
    /// This field is required.
    pub fn expected_aggregated_findings_result(mut self, input: crate::types::AutomatedReasoningCheckResult) -> Self {
        self.expected_aggregated_findings_result = ::std::option::Option::Some(input);
        self
    }
    /// <p>The updated expected result of the Automated Reasoning check.</p>
    pub fn set_expected_aggregated_findings_result(mut self, input: ::std::option::Option<crate::types::AutomatedReasoningCheckResult>) -> Self {
        self.expected_aggregated_findings_result = input;
        self
    }
    /// <p>The updated expected result of the Automated Reasoning check.</p>
    pub fn get_expected_aggregated_findings_result(&self) -> &::std::option::Option<crate::types::AutomatedReasoningCheckResult> {
        &self.expected_aggregated_findings_result
    }
    /// <p>The updated minimum confidence level for logic validation. If null is provided, the threshold will be removed.</p>
    pub fn confidence_threshold(mut self, input: f64) -> Self {
        self.confidence_threshold = ::std::option::Option::Some(input);
        self
    }
    /// <p>The updated minimum confidence level for logic validation. If null is provided, the threshold will be removed.</p>
    pub fn set_confidence_threshold(mut self, input: ::std::option::Option<f64>) -> Self {
        self.confidence_threshold = input;
        self
    }
    /// <p>The updated minimum confidence level for logic validation. If null is provided, the threshold will be removed.</p>
    pub fn get_confidence_threshold(&self) -> &::std::option::Option<f64> {
        &self.confidence_threshold
    }
    /// <p>A unique, case-sensitive identifier to ensure that the operation completes no more than one time. If this token matches a previous request, Amazon Bedrock ignores the request, but does not return an error.</p>
    pub fn client_request_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_request_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier to ensure that the operation completes no more than one time. If this token matches a previous request, Amazon Bedrock ignores the request, but does not return an error.</p>
    pub fn set_client_request_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_request_token = input;
        self
    }
    /// <p>A unique, case-sensitive identifier to ensure that the operation completes no more than one time. If this token matches a previous request, Amazon Bedrock ignores the request, but does not return an error.</p>
    pub fn get_client_request_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_request_token
    }
    /// Consumes the builder and constructs a [`UpdateAutomatedReasoningPolicyTestCaseInput`](crate::operation::update_automated_reasoning_policy_test_case::UpdateAutomatedReasoningPolicyTestCaseInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_automated_reasoning_policy_test_case::UpdateAutomatedReasoningPolicyTestCaseInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::update_automated_reasoning_policy_test_case::UpdateAutomatedReasoningPolicyTestCaseInput {
                policy_arn: self.policy_arn,
                test_case_id: self.test_case_id,
                guard_content: self.guard_content,
                query_content: self.query_content,
                last_updated_at: self.last_updated_at,
                expected_aggregated_findings_result: self.expected_aggregated_findings_result,
                confidence_threshold: self.confidence_threshold,
                client_request_token: self.client_request_token,
            },
        )
    }
}
impl ::std::fmt::Debug for UpdateAutomatedReasoningPolicyTestCaseInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateAutomatedReasoningPolicyTestCaseInputBuilder");
        formatter.field("policy_arn", &self.policy_arn);
        formatter.field("test_case_id", &self.test_case_id);
        formatter.field("guard_content", &"*** Sensitive Data Redacted ***");
        formatter.field("query_content", &"*** Sensitive Data Redacted ***");
        formatter.field("last_updated_at", &self.last_updated_at);
        formatter.field("expected_aggregated_findings_result", &self.expected_aggregated_findings_result);
        formatter.field("confidence_threshold", &self.confidence_threshold);
        formatter.field("client_request_token", &self.client_request_token);
        formatter.finish()
    }
}
