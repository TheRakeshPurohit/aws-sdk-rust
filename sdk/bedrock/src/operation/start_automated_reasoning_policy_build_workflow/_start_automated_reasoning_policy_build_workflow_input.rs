// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StartAutomatedReasoningPolicyBuildWorkflowInput {
    /// <p>The Amazon Resource Name (ARN) of the Automated Reasoning policy for which to start the build workflow.</p>
    pub policy_arn: ::std::option::Option<::std::string::String>,
    /// <p>The type of build workflow to start (e.g., DOCUMENT_INGESTION for processing new documents, POLICY_REPAIR for fixing existing policies).</p>
    pub build_workflow_type: ::std::option::Option<crate::types::AutomatedReasoningPolicyBuildWorkflowType>,
    /// <p>A unique, case-sensitive identifier to ensure that the operation completes no more than once. If this token matches a previous request, Amazon Bedrock ignores the request but doesn't return an error.</p>
    pub client_request_token: ::std::option::Option<::std::string::String>,
    /// <p>The source content for the build workflow, such as documents to analyze or repair instructions for existing policies.</p>
    pub source_content: ::std::option::Option<crate::types::AutomatedReasoningPolicyBuildWorkflowSource>,
}
impl StartAutomatedReasoningPolicyBuildWorkflowInput {
    /// <p>The Amazon Resource Name (ARN) of the Automated Reasoning policy for which to start the build workflow.</p>
    pub fn policy_arn(&self) -> ::std::option::Option<&str> {
        self.policy_arn.as_deref()
    }
    /// <p>The type of build workflow to start (e.g., DOCUMENT_INGESTION for processing new documents, POLICY_REPAIR for fixing existing policies).</p>
    pub fn build_workflow_type(&self) -> ::std::option::Option<&crate::types::AutomatedReasoningPolicyBuildWorkflowType> {
        self.build_workflow_type.as_ref()
    }
    /// <p>A unique, case-sensitive identifier to ensure that the operation completes no more than once. If this token matches a previous request, Amazon Bedrock ignores the request but doesn't return an error.</p>
    pub fn client_request_token(&self) -> ::std::option::Option<&str> {
        self.client_request_token.as_deref()
    }
    /// <p>The source content for the build workflow, such as documents to analyze or repair instructions for existing policies.</p>
    pub fn source_content(&self) -> ::std::option::Option<&crate::types::AutomatedReasoningPolicyBuildWorkflowSource> {
        self.source_content.as_ref()
    }
}
impl StartAutomatedReasoningPolicyBuildWorkflowInput {
    /// Creates a new builder-style object to manufacture [`StartAutomatedReasoningPolicyBuildWorkflowInput`](crate::operation::start_automated_reasoning_policy_build_workflow::StartAutomatedReasoningPolicyBuildWorkflowInput).
    pub fn builder(
    ) -> crate::operation::start_automated_reasoning_policy_build_workflow::builders::StartAutomatedReasoningPolicyBuildWorkflowInputBuilder {
        crate::operation::start_automated_reasoning_policy_build_workflow::builders::StartAutomatedReasoningPolicyBuildWorkflowInputBuilder::default()
    }
}

/// A builder for [`StartAutomatedReasoningPolicyBuildWorkflowInput`](crate::operation::start_automated_reasoning_policy_build_workflow::StartAutomatedReasoningPolicyBuildWorkflowInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct StartAutomatedReasoningPolicyBuildWorkflowInputBuilder {
    pub(crate) policy_arn: ::std::option::Option<::std::string::String>,
    pub(crate) build_workflow_type: ::std::option::Option<crate::types::AutomatedReasoningPolicyBuildWorkflowType>,
    pub(crate) client_request_token: ::std::option::Option<::std::string::String>,
    pub(crate) source_content: ::std::option::Option<crate::types::AutomatedReasoningPolicyBuildWorkflowSource>,
}
impl StartAutomatedReasoningPolicyBuildWorkflowInputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the Automated Reasoning policy for which to start the build workflow.</p>
    /// This field is required.
    pub fn policy_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.policy_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Automated Reasoning policy for which to start the build workflow.</p>
    pub fn set_policy_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.policy_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Automated Reasoning policy for which to start the build workflow.</p>
    pub fn get_policy_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.policy_arn
    }
    /// <p>The type of build workflow to start (e.g., DOCUMENT_INGESTION for processing new documents, POLICY_REPAIR for fixing existing policies).</p>
    /// This field is required.
    pub fn build_workflow_type(mut self, input: crate::types::AutomatedReasoningPolicyBuildWorkflowType) -> Self {
        self.build_workflow_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of build workflow to start (e.g., DOCUMENT_INGESTION for processing new documents, POLICY_REPAIR for fixing existing policies).</p>
    pub fn set_build_workflow_type(mut self, input: ::std::option::Option<crate::types::AutomatedReasoningPolicyBuildWorkflowType>) -> Self {
        self.build_workflow_type = input;
        self
    }
    /// <p>The type of build workflow to start (e.g., DOCUMENT_INGESTION for processing new documents, POLICY_REPAIR for fixing existing policies).</p>
    pub fn get_build_workflow_type(&self) -> &::std::option::Option<crate::types::AutomatedReasoningPolicyBuildWorkflowType> {
        &self.build_workflow_type
    }
    /// <p>A unique, case-sensitive identifier to ensure that the operation completes no more than once. If this token matches a previous request, Amazon Bedrock ignores the request but doesn't return an error.</p>
    pub fn client_request_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_request_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier to ensure that the operation completes no more than once. If this token matches a previous request, Amazon Bedrock ignores the request but doesn't return an error.</p>
    pub fn set_client_request_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_request_token = input;
        self
    }
    /// <p>A unique, case-sensitive identifier to ensure that the operation completes no more than once. If this token matches a previous request, Amazon Bedrock ignores the request but doesn't return an error.</p>
    pub fn get_client_request_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_request_token
    }
    /// <p>The source content for the build workflow, such as documents to analyze or repair instructions for existing policies.</p>
    /// This field is required.
    pub fn source_content(mut self, input: crate::types::AutomatedReasoningPolicyBuildWorkflowSource) -> Self {
        self.source_content = ::std::option::Option::Some(input);
        self
    }
    /// <p>The source content for the build workflow, such as documents to analyze or repair instructions for existing policies.</p>
    pub fn set_source_content(mut self, input: ::std::option::Option<crate::types::AutomatedReasoningPolicyBuildWorkflowSource>) -> Self {
        self.source_content = input;
        self
    }
    /// <p>The source content for the build workflow, such as documents to analyze or repair instructions for existing policies.</p>
    pub fn get_source_content(&self) -> &::std::option::Option<crate::types::AutomatedReasoningPolicyBuildWorkflowSource> {
        &self.source_content
    }
    /// Consumes the builder and constructs a [`StartAutomatedReasoningPolicyBuildWorkflowInput`](crate::operation::start_automated_reasoning_policy_build_workflow::StartAutomatedReasoningPolicyBuildWorkflowInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::start_automated_reasoning_policy_build_workflow::StartAutomatedReasoningPolicyBuildWorkflowInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::start_automated_reasoning_policy_build_workflow::StartAutomatedReasoningPolicyBuildWorkflowInput {
                policy_arn: self.policy_arn,
                build_workflow_type: self.build_workflow_type,
                client_request_token: self.client_request_token,
                source_content: self.source_content,
            },
        )
    }
}
