// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CreateAutomatedReasoningPolicyOutput {
    /// <p>The Amazon Resource Name (ARN) of the Automated Reasoning policy that you created.</p>
    pub policy_arn: ::std::string::String,
    /// <p>The version number of the newly created Automated Reasoning policy. The initial version is always DRAFT.</p>
    pub version: ::std::string::String,
    /// <p>The name of the Automated Reasoning policy.</p>
    pub name: ::std::string::String,
    /// <p>The description of the Automated Reasoning policy.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The hash of the policy definition. This is used as a concurrency token for creating policy versions that you can use in your application.</p>
    pub definition_hash: ::std::option::Option<::std::string::String>,
    /// <p>The timestamp when the policy was created.</p>
    pub created_at: ::aws_smithy_types::DateTime,
    /// <p>The timestamp when the policy was last updated.</p>
    pub updated_at: ::aws_smithy_types::DateTime,
    _request_id: Option<String>,
}
impl CreateAutomatedReasoningPolicyOutput {
    /// <p>The Amazon Resource Name (ARN) of the Automated Reasoning policy that you created.</p>
    pub fn policy_arn(&self) -> &str {
        use std::ops::Deref;
        self.policy_arn.deref()
    }
    /// <p>The version number of the newly created Automated Reasoning policy. The initial version is always DRAFT.</p>
    pub fn version(&self) -> &str {
        use std::ops::Deref;
        self.version.deref()
    }
    /// <p>The name of the Automated Reasoning policy.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The description of the Automated Reasoning policy.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The hash of the policy definition. This is used as a concurrency token for creating policy versions that you can use in your application.</p>
    pub fn definition_hash(&self) -> ::std::option::Option<&str> {
        self.definition_hash.as_deref()
    }
    /// <p>The timestamp when the policy was created.</p>
    pub fn created_at(&self) -> &::aws_smithy_types::DateTime {
        &self.created_at
    }
    /// <p>The timestamp when the policy was last updated.</p>
    pub fn updated_at(&self) -> &::aws_smithy_types::DateTime {
        &self.updated_at
    }
}
impl ::std::fmt::Debug for CreateAutomatedReasoningPolicyOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateAutomatedReasoningPolicyOutput");
        formatter.field("policy_arn", &self.policy_arn);
        formatter.field("version", &self.version);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("definition_hash", &self.definition_hash);
        formatter.field("created_at", &self.created_at);
        formatter.field("updated_at", &self.updated_at);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_types::request_id::RequestId for CreateAutomatedReasoningPolicyOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateAutomatedReasoningPolicyOutput {
    /// Creates a new builder-style object to manufacture [`CreateAutomatedReasoningPolicyOutput`](crate::operation::create_automated_reasoning_policy::CreateAutomatedReasoningPolicyOutput).
    pub fn builder() -> crate::operation::create_automated_reasoning_policy::builders::CreateAutomatedReasoningPolicyOutputBuilder {
        crate::operation::create_automated_reasoning_policy::builders::CreateAutomatedReasoningPolicyOutputBuilder::default()
    }
}

/// A builder for [`CreateAutomatedReasoningPolicyOutput`](crate::operation::create_automated_reasoning_policy::CreateAutomatedReasoningPolicyOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct CreateAutomatedReasoningPolicyOutputBuilder {
    pub(crate) policy_arn: ::std::option::Option<::std::string::String>,
    pub(crate) version: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) definition_hash: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl CreateAutomatedReasoningPolicyOutputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the Automated Reasoning policy that you created.</p>
    /// This field is required.
    pub fn policy_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.policy_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Automated Reasoning policy that you created.</p>
    pub fn set_policy_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.policy_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Automated Reasoning policy that you created.</p>
    pub fn get_policy_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.policy_arn
    }
    /// <p>The version number of the newly created Automated Reasoning policy. The initial version is always DRAFT.</p>
    /// This field is required.
    pub fn version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version number of the newly created Automated Reasoning policy. The initial version is always DRAFT.</p>
    pub fn set_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.version = input;
        self
    }
    /// <p>The version number of the newly created Automated Reasoning policy. The initial version is always DRAFT.</p>
    pub fn get_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.version
    }
    /// <p>The name of the Automated Reasoning policy.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the Automated Reasoning policy.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the Automated Reasoning policy.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The description of the Automated Reasoning policy.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the Automated Reasoning policy.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the Automated Reasoning policy.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The hash of the policy definition. This is used as a concurrency token for creating policy versions that you can use in your application.</p>
    pub fn definition_hash(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.definition_hash = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The hash of the policy definition. This is used as a concurrency token for creating policy versions that you can use in your application.</p>
    pub fn set_definition_hash(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.definition_hash = input;
        self
    }
    /// <p>The hash of the policy definition. This is used as a concurrency token for creating policy versions that you can use in your application.</p>
    pub fn get_definition_hash(&self) -> &::std::option::Option<::std::string::String> {
        &self.definition_hash
    }
    /// <p>The timestamp when the policy was created.</p>
    /// This field is required.
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the policy was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The timestamp when the policy was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The timestamp when the policy was last updated.</p>
    /// This field is required.
    pub fn updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the policy was last updated.</p>
    pub fn set_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>The timestamp when the policy was last updated.</p>
    pub fn get_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_at
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CreateAutomatedReasoningPolicyOutput`](crate::operation::create_automated_reasoning_policy::CreateAutomatedReasoningPolicyOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`policy_arn`](crate::operation::create_automated_reasoning_policy::builders::CreateAutomatedReasoningPolicyOutputBuilder::policy_arn)
    /// - [`version`](crate::operation::create_automated_reasoning_policy::builders::CreateAutomatedReasoningPolicyOutputBuilder::version)
    /// - [`name`](crate::operation::create_automated_reasoning_policy::builders::CreateAutomatedReasoningPolicyOutputBuilder::name)
    /// - [`created_at`](crate::operation::create_automated_reasoning_policy::builders::CreateAutomatedReasoningPolicyOutputBuilder::created_at)
    /// - [`updated_at`](crate::operation::create_automated_reasoning_policy::builders::CreateAutomatedReasoningPolicyOutputBuilder::updated_at)
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_automated_reasoning_policy::CreateAutomatedReasoningPolicyOutput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::create_automated_reasoning_policy::CreateAutomatedReasoningPolicyOutput {
                policy_arn: self.policy_arn.ok_or_else(|| {
                    ::aws_smithy_types::error::operation::BuildError::missing_field(
                        "policy_arn",
                        "policy_arn was not specified but it is required when building CreateAutomatedReasoningPolicyOutput",
                    )
                })?,
                version: self.version.ok_or_else(|| {
                    ::aws_smithy_types::error::operation::BuildError::missing_field(
                        "version",
                        "version was not specified but it is required when building CreateAutomatedReasoningPolicyOutput",
                    )
                })?,
                name: self.name.ok_or_else(|| {
                    ::aws_smithy_types::error::operation::BuildError::missing_field(
                        "name",
                        "name was not specified but it is required when building CreateAutomatedReasoningPolicyOutput",
                    )
                })?,
                description: self.description,
                definition_hash: self.definition_hash,
                created_at: self.created_at.ok_or_else(|| {
                    ::aws_smithy_types::error::operation::BuildError::missing_field(
                        "created_at",
                        "created_at was not specified but it is required when building CreateAutomatedReasoningPolicyOutput",
                    )
                })?,
                updated_at: self.updated_at.ok_or_else(|| {
                    ::aws_smithy_types::error::operation::BuildError::missing_field(
                        "updated_at",
                        "updated_at was not specified but it is required when building CreateAutomatedReasoningPolicyOutput",
                    )
                })?,
                _request_id: self._request_id,
            },
        )
    }
}
impl ::std::fmt::Debug for CreateAutomatedReasoningPolicyOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateAutomatedReasoningPolicyOutputBuilder");
        formatter.field("policy_arn", &self.policy_arn);
        formatter.field("version", &self.version);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("definition_hash", &self.definition_hash);
        formatter.field("created_at", &self.created_at);
        formatter.field("updated_at", &self.updated_at);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
