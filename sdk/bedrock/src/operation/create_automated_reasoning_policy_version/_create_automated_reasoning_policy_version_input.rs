// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateAutomatedReasoningPolicyVersionInput {
    /// <p>The Amazon Resource Name (ARN) of the Automated Reasoning policy for which to create a version.</p>
    pub policy_arn: ::std::option::Option<::std::string::String>,
    /// <p>A unique, case-sensitive identifier to ensure that the operation completes no more than one time. If this token matches a previous request, Amazon Bedrock ignores the request, but does not return an error.</p>
    pub client_request_token: ::std::option::Option<::std::string::String>,
    /// <p>The hash of the current policy definition used as a concurrency token to ensure the policy hasn't been modified since you last retrieved it.</p>
    pub last_updated_definition_hash: ::std::option::Option<::std::string::String>,
    /// <p>A list of tags to associate with the policy version.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CreateAutomatedReasoningPolicyVersionInput {
    /// <p>The Amazon Resource Name (ARN) of the Automated Reasoning policy for which to create a version.</p>
    pub fn policy_arn(&self) -> ::std::option::Option<&str> {
        self.policy_arn.as_deref()
    }
    /// <p>A unique, case-sensitive identifier to ensure that the operation completes no more than one time. If this token matches a previous request, Amazon Bedrock ignores the request, but does not return an error.</p>
    pub fn client_request_token(&self) -> ::std::option::Option<&str> {
        self.client_request_token.as_deref()
    }
    /// <p>The hash of the current policy definition used as a concurrency token to ensure the policy hasn't been modified since you last retrieved it.</p>
    pub fn last_updated_definition_hash(&self) -> ::std::option::Option<&str> {
        self.last_updated_definition_hash.as_deref()
    }
    /// <p>A list of tags to associate with the policy version.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl CreateAutomatedReasoningPolicyVersionInput {
    /// Creates a new builder-style object to manufacture [`CreateAutomatedReasoningPolicyVersionInput`](crate::operation::create_automated_reasoning_policy_version::CreateAutomatedReasoningPolicyVersionInput).
    pub fn builder() -> crate::operation::create_automated_reasoning_policy_version::builders::CreateAutomatedReasoningPolicyVersionInputBuilder {
        crate::operation::create_automated_reasoning_policy_version::builders::CreateAutomatedReasoningPolicyVersionInputBuilder::default()
    }
}

/// A builder for [`CreateAutomatedReasoningPolicyVersionInput`](crate::operation::create_automated_reasoning_policy_version::CreateAutomatedReasoningPolicyVersionInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateAutomatedReasoningPolicyVersionInputBuilder {
    pub(crate) policy_arn: ::std::option::Option<::std::string::String>,
    pub(crate) client_request_token: ::std::option::Option<::std::string::String>,
    pub(crate) last_updated_definition_hash: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CreateAutomatedReasoningPolicyVersionInputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the Automated Reasoning policy for which to create a version.</p>
    /// This field is required.
    pub fn policy_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.policy_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Automated Reasoning policy for which to create a version.</p>
    pub fn set_policy_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.policy_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Automated Reasoning policy for which to create a version.</p>
    pub fn get_policy_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.policy_arn
    }
    /// <p>A unique, case-sensitive identifier to ensure that the operation completes no more than one time. If this token matches a previous request, Amazon Bedrock ignores the request, but does not return an error.</p>
    pub fn client_request_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_request_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier to ensure that the operation completes no more than one time. If this token matches a previous request, Amazon Bedrock ignores the request, but does not return an error.</p>
    pub fn set_client_request_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_request_token = input;
        self
    }
    /// <p>A unique, case-sensitive identifier to ensure that the operation completes no more than one time. If this token matches a previous request, Amazon Bedrock ignores the request, but does not return an error.</p>
    pub fn get_client_request_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_request_token
    }
    /// <p>The hash of the current policy definition used as a concurrency token to ensure the policy hasn't been modified since you last retrieved it.</p>
    /// This field is required.
    pub fn last_updated_definition_hash(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.last_updated_definition_hash = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The hash of the current policy definition used as a concurrency token to ensure the policy hasn't been modified since you last retrieved it.</p>
    pub fn set_last_updated_definition_hash(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.last_updated_definition_hash = input;
        self
    }
    /// <p>The hash of the current policy definition used as a concurrency token to ensure the policy hasn't been modified since you last retrieved it.</p>
    pub fn get_last_updated_definition_hash(&self) -> &::std::option::Option<::std::string::String> {
        &self.last_updated_definition_hash
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A list of tags to associate with the policy version.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of tags to associate with the policy version.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>A list of tags to associate with the policy version.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateAutomatedReasoningPolicyVersionInput`](crate::operation::create_automated_reasoning_policy_version::CreateAutomatedReasoningPolicyVersionInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_automated_reasoning_policy_version::CreateAutomatedReasoningPolicyVersionInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::create_automated_reasoning_policy_version::CreateAutomatedReasoningPolicyVersionInput {
                policy_arn: self.policy_arn,
                client_request_token: self.client_request_token,
                last_updated_definition_hash: self.last_updated_definition_hash,
                tags: self.tags,
            },
        )
    }
}
