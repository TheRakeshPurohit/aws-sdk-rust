// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateAutomatedReasoningPolicyAnnotationsInput {
    /// <p>The Amazon Resource Name (ARN) of the Automated Reasoning policy whose annotations you want to update.</p>
    pub policy_arn: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of the build workflow whose annotations you want to update.</p>
    pub build_workflow_id: ::std::option::Option<::std::string::String>,
    /// <p>The updated annotations containing modified rules, variables, and types for the policy.</p>
    pub annotations: ::std::option::Option<::std::vec::Vec<crate::types::AutomatedReasoningPolicyAnnotation>>,
    /// <p>The hash value of the annotation set that you're updating. This is used for optimistic concurrency control to prevent conflicting updates.</p>
    pub last_updated_annotation_set_hash: ::std::option::Option<::std::string::String>,
}
impl UpdateAutomatedReasoningPolicyAnnotationsInput {
    /// <p>The Amazon Resource Name (ARN) of the Automated Reasoning policy whose annotations you want to update.</p>
    pub fn policy_arn(&self) -> ::std::option::Option<&str> {
        self.policy_arn.as_deref()
    }
    /// <p>The unique identifier of the build workflow whose annotations you want to update.</p>
    pub fn build_workflow_id(&self) -> ::std::option::Option<&str> {
        self.build_workflow_id.as_deref()
    }
    /// <p>The updated annotations containing modified rules, variables, and types for the policy.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.annotations.is_none()`.
    pub fn annotations(&self) -> &[crate::types::AutomatedReasoningPolicyAnnotation] {
        self.annotations.as_deref().unwrap_or_default()
    }
    /// <p>The hash value of the annotation set that you're updating. This is used for optimistic concurrency control to prevent conflicting updates.</p>
    pub fn last_updated_annotation_set_hash(&self) -> ::std::option::Option<&str> {
        self.last_updated_annotation_set_hash.as_deref()
    }
}
impl UpdateAutomatedReasoningPolicyAnnotationsInput {
    /// Creates a new builder-style object to manufacture [`UpdateAutomatedReasoningPolicyAnnotationsInput`](crate::operation::update_automated_reasoning_policy_annotations::UpdateAutomatedReasoningPolicyAnnotationsInput).
    pub fn builder(
    ) -> crate::operation::update_automated_reasoning_policy_annotations::builders::UpdateAutomatedReasoningPolicyAnnotationsInputBuilder {
        crate::operation::update_automated_reasoning_policy_annotations::builders::UpdateAutomatedReasoningPolicyAnnotationsInputBuilder::default()
    }
}

/// A builder for [`UpdateAutomatedReasoningPolicyAnnotationsInput`](crate::operation::update_automated_reasoning_policy_annotations::UpdateAutomatedReasoningPolicyAnnotationsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateAutomatedReasoningPolicyAnnotationsInputBuilder {
    pub(crate) policy_arn: ::std::option::Option<::std::string::String>,
    pub(crate) build_workflow_id: ::std::option::Option<::std::string::String>,
    pub(crate) annotations: ::std::option::Option<::std::vec::Vec<crate::types::AutomatedReasoningPolicyAnnotation>>,
    pub(crate) last_updated_annotation_set_hash: ::std::option::Option<::std::string::String>,
}
impl UpdateAutomatedReasoningPolicyAnnotationsInputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the Automated Reasoning policy whose annotations you want to update.</p>
    /// This field is required.
    pub fn policy_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.policy_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Automated Reasoning policy whose annotations you want to update.</p>
    pub fn set_policy_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.policy_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Automated Reasoning policy whose annotations you want to update.</p>
    pub fn get_policy_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.policy_arn
    }
    /// <p>The unique identifier of the build workflow whose annotations you want to update.</p>
    /// This field is required.
    pub fn build_workflow_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.build_workflow_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the build workflow whose annotations you want to update.</p>
    pub fn set_build_workflow_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.build_workflow_id = input;
        self
    }
    /// <p>The unique identifier of the build workflow whose annotations you want to update.</p>
    pub fn get_build_workflow_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.build_workflow_id
    }
    /// Appends an item to `annotations`.
    ///
    /// To override the contents of this collection use [`set_annotations`](Self::set_annotations).
    ///
    /// <p>The updated annotations containing modified rules, variables, and types for the policy.</p>
    pub fn annotations(mut self, input: crate::types::AutomatedReasoningPolicyAnnotation) -> Self {
        let mut v = self.annotations.unwrap_or_default();
        v.push(input);
        self.annotations = ::std::option::Option::Some(v);
        self
    }
    /// <p>The updated annotations containing modified rules, variables, and types for the policy.</p>
    pub fn set_annotations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AutomatedReasoningPolicyAnnotation>>) -> Self {
        self.annotations = input;
        self
    }
    /// <p>The updated annotations containing modified rules, variables, and types for the policy.</p>
    pub fn get_annotations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AutomatedReasoningPolicyAnnotation>> {
        &self.annotations
    }
    /// <p>The hash value of the annotation set that you're updating. This is used for optimistic concurrency control to prevent conflicting updates.</p>
    /// This field is required.
    pub fn last_updated_annotation_set_hash(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.last_updated_annotation_set_hash = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The hash value of the annotation set that you're updating. This is used for optimistic concurrency control to prevent conflicting updates.</p>
    pub fn set_last_updated_annotation_set_hash(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.last_updated_annotation_set_hash = input;
        self
    }
    /// <p>The hash value of the annotation set that you're updating. This is used for optimistic concurrency control to prevent conflicting updates.</p>
    pub fn get_last_updated_annotation_set_hash(&self) -> &::std::option::Option<::std::string::String> {
        &self.last_updated_annotation_set_hash
    }
    /// Consumes the builder and constructs a [`UpdateAutomatedReasoningPolicyAnnotationsInput`](crate::operation::update_automated_reasoning_policy_annotations::UpdateAutomatedReasoningPolicyAnnotationsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_automated_reasoning_policy_annotations::UpdateAutomatedReasoningPolicyAnnotationsInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::update_automated_reasoning_policy_annotations::UpdateAutomatedReasoningPolicyAnnotationsInput {
                policy_arn: self.policy_arn,
                build_workflow_id: self.build_workflow_id,
                annotations: self.annotations,
                last_updated_annotation_set_hash: self.last_updated_annotation_set_hash,
            },
        )
    }
}
