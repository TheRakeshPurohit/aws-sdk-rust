// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct UpdateAutomatedReasoningPolicyInput {
    /// <p>The Amazon Resource Name (ARN) of the Automated Reasoning policy to update. This must be the ARN of a draft policy.</p>
    pub policy_arn: ::std::option::Option<::std::string::String>,
    /// <p>The updated policy definition containing the formal logic rules, variables, and types.</p>
    pub policy_definition: ::std::option::Option<crate::types::AutomatedReasoningPolicyDefinition>,
    /// <p>The updated name for the Automated Reasoning policy.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The updated description for the Automated Reasoning policy.</p>
    pub description: ::std::option::Option<::std::string::String>,
}
impl UpdateAutomatedReasoningPolicyInput {
    /// <p>The Amazon Resource Name (ARN) of the Automated Reasoning policy to update. This must be the ARN of a draft policy.</p>
    pub fn policy_arn(&self) -> ::std::option::Option<&str> {
        self.policy_arn.as_deref()
    }
    /// <p>The updated policy definition containing the formal logic rules, variables, and types.</p>
    pub fn policy_definition(&self) -> ::std::option::Option<&crate::types::AutomatedReasoningPolicyDefinition> {
        self.policy_definition.as_ref()
    }
    /// <p>The updated name for the Automated Reasoning policy.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The updated description for the Automated Reasoning policy.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
}
impl ::std::fmt::Debug for UpdateAutomatedReasoningPolicyInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateAutomatedReasoningPolicyInput");
        formatter.field("policy_arn", &self.policy_arn);
        formatter.field("policy_definition", &self.policy_definition);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl UpdateAutomatedReasoningPolicyInput {
    /// Creates a new builder-style object to manufacture [`UpdateAutomatedReasoningPolicyInput`](crate::operation::update_automated_reasoning_policy::UpdateAutomatedReasoningPolicyInput).
    pub fn builder() -> crate::operation::update_automated_reasoning_policy::builders::UpdateAutomatedReasoningPolicyInputBuilder {
        crate::operation::update_automated_reasoning_policy::builders::UpdateAutomatedReasoningPolicyInputBuilder::default()
    }
}

/// A builder for [`UpdateAutomatedReasoningPolicyInput`](crate::operation::update_automated_reasoning_policy::UpdateAutomatedReasoningPolicyInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct UpdateAutomatedReasoningPolicyInputBuilder {
    pub(crate) policy_arn: ::std::option::Option<::std::string::String>,
    pub(crate) policy_definition: ::std::option::Option<crate::types::AutomatedReasoningPolicyDefinition>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
}
impl UpdateAutomatedReasoningPolicyInputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the Automated Reasoning policy to update. This must be the ARN of a draft policy.</p>
    /// This field is required.
    pub fn policy_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.policy_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Automated Reasoning policy to update. This must be the ARN of a draft policy.</p>
    pub fn set_policy_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.policy_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Automated Reasoning policy to update. This must be the ARN of a draft policy.</p>
    pub fn get_policy_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.policy_arn
    }
    /// <p>The updated policy definition containing the formal logic rules, variables, and types.</p>
    /// This field is required.
    pub fn policy_definition(mut self, input: crate::types::AutomatedReasoningPolicyDefinition) -> Self {
        self.policy_definition = ::std::option::Option::Some(input);
        self
    }
    /// <p>The updated policy definition containing the formal logic rules, variables, and types.</p>
    pub fn set_policy_definition(mut self, input: ::std::option::Option<crate::types::AutomatedReasoningPolicyDefinition>) -> Self {
        self.policy_definition = input;
        self
    }
    /// <p>The updated policy definition containing the formal logic rules, variables, and types.</p>
    pub fn get_policy_definition(&self) -> &::std::option::Option<crate::types::AutomatedReasoningPolicyDefinition> {
        &self.policy_definition
    }
    /// <p>The updated name for the Automated Reasoning policy.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The updated name for the Automated Reasoning policy.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The updated name for the Automated Reasoning policy.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The updated description for the Automated Reasoning policy.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The updated description for the Automated Reasoning policy.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The updated description for the Automated Reasoning policy.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Consumes the builder and constructs a [`UpdateAutomatedReasoningPolicyInput`](crate::operation::update_automated_reasoning_policy::UpdateAutomatedReasoningPolicyInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_automated_reasoning_policy::UpdateAutomatedReasoningPolicyInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::update_automated_reasoning_policy::UpdateAutomatedReasoningPolicyInput {
            policy_arn: self.policy_arn,
            policy_definition: self.policy_definition,
            name: self.name,
            description: self.description,
        })
    }
}
impl ::std::fmt::Debug for UpdateAutomatedReasoningPolicyInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateAutomatedReasoningPolicyInputBuilder");
        formatter.field("policy_arn", &self.policy_arn);
        formatter.field("policy_definition", &self.policy_definition);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
