// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::list_custom_model_deployments::_list_custom_model_deployments_output::ListCustomModelDeploymentsOutputBuilder;

pub use crate::operation::list_custom_model_deployments::_list_custom_model_deployments_input::ListCustomModelDeploymentsInputBuilder;

impl crate::operation::list_custom_model_deployments::builders::ListCustomModelDeploymentsInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::list_custom_model_deployments::ListCustomModelDeploymentsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_custom_model_deployments::ListCustomModelDeploymentsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.list_custom_model_deployments();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `ListCustomModelDeployments`.
///
/// <p>Lists custom model deployments in your account. You can filter the results by creation time, name, status, and associated model. Use this operation to manage and monitor your custom model deployments.</p>
/// <p>We recommend using pagination to ensure that the operation returns quickly and successfully.</p>
/// <p>The following actions are related to the <code>ListCustomModelDeployments</code> operation:</p>
/// <ul>
/// <li>
/// <p><a href="https://docs.aws.amazon.com/bedrock/latest/APIReference/API_CreateCustomModelDeployment.html">CreateCustomModelDeployment</a></p></li>
/// <li>
/// <p><a href="https://docs.aws.amazon.com/bedrock/latest/APIReference/API_GetCustomModelDeployment.html">GetCustomModelDeployment</a></p></li>
/// <li>
/// <p><a href="https://docs.aws.amazon.com/bedrock/latest/APIReference/API_DeleteCustomModelDeployment.html">DeleteCustomModelDeployment</a></p></li>
/// </ul>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct ListCustomModelDeploymentsFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::list_custom_model_deployments::builders::ListCustomModelDeploymentsInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::list_custom_model_deployments::ListCustomModelDeploymentsOutput,
        crate::operation::list_custom_model_deployments::ListCustomModelDeploymentsError,
    > for ListCustomModelDeploymentsFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::list_custom_model_deployments::ListCustomModelDeploymentsOutput,
            crate::operation::list_custom_model_deployments::ListCustomModelDeploymentsError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl ListCustomModelDeploymentsFluentBuilder {
    /// Creates a new `ListCustomModelDeploymentsFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the ListCustomModelDeployments as a reference.
    pub fn as_input(&self) -> &crate::operation::list_custom_model_deployments::builders::ListCustomModelDeploymentsInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_custom_model_deployments::ListCustomModelDeploymentsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_custom_model_deployments::ListCustomModelDeploymentsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::list_custom_model_deployments::ListCustomModelDeployments::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::list_custom_model_deployments::ListCustomModelDeployments::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::list_custom_model_deployments::ListCustomModelDeploymentsOutput,
        crate::operation::list_custom_model_deployments::ListCustomModelDeploymentsError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::list_custom_model_deployments::paginator::ListCustomModelDeploymentsPaginator::send) which returns a [`PaginationStream`](aws_smithy_async::future::pagination_stream::PaginationStream).
    pub fn into_paginator(self) -> crate::operation::list_custom_model_deployments::paginator::ListCustomModelDeploymentsPaginator {
        crate::operation::list_custom_model_deployments::paginator::ListCustomModelDeploymentsPaginator::new(self.handle, self.inner)
    }
    /// <p>Filters deployments created before the specified date and time.</p>
    pub fn created_before(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.created_before(input);
        self
    }
    /// <p>Filters deployments created before the specified date and time.</p>
    pub fn set_created_before(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.inner = self.inner.set_created_before(input);
        self
    }
    /// <p>Filters deployments created before the specified date and time.</p>
    pub fn get_created_before(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        self.inner.get_created_before()
    }
    /// <p>Filters deployments created after the specified date and time.</p>
    pub fn created_after(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.created_after(input);
        self
    }
    /// <p>Filters deployments created after the specified date and time.</p>
    pub fn set_created_after(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.inner = self.inner.set_created_after(input);
        self
    }
    /// <p>Filters deployments created after the specified date and time.</p>
    pub fn get_created_after(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        self.inner.get_created_after()
    }
    /// <p>Filters deployments whose names contain the specified string.</p>
    pub fn name_contains(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.name_contains(input.into());
        self
    }
    /// <p>Filters deployments whose names contain the specified string.</p>
    pub fn set_name_contains(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_name_contains(input);
        self
    }
    /// <p>Filters deployments whose names contain the specified string.</p>
    pub fn get_name_contains(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_name_contains()
    }
    /// <p>The maximum number of results to return in a single call.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of results to return in a single call.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>The maximum number of results to return in a single call.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        self.inner.get_max_results()
    }
    /// <p>The token for the next set of results. Use this token to retrieve additional results when the response is truncated.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>The token for the next set of results. Use this token to retrieve additional results when the response is truncated.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The token for the next set of results. Use this token to retrieve additional results when the response is truncated.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_next_token()
    }
    /// <p>The field to sort the results by. The only supported value is <code>CreationTime</code>.</p>
    pub fn sort_by(mut self, input: crate::types::SortModelsBy) -> Self {
        self.inner = self.inner.sort_by(input);
        self
    }
    /// <p>The field to sort the results by. The only supported value is <code>CreationTime</code>.</p>
    pub fn set_sort_by(mut self, input: ::std::option::Option<crate::types::SortModelsBy>) -> Self {
        self.inner = self.inner.set_sort_by(input);
        self
    }
    /// <p>The field to sort the results by. The only supported value is <code>CreationTime</code>.</p>
    pub fn get_sort_by(&self) -> &::std::option::Option<crate::types::SortModelsBy> {
        self.inner.get_sort_by()
    }
    /// <p>The sort order for the results. Valid values are <code>Ascending</code> and <code>Descending</code>. Default is <code>Descending</code>.</p>
    pub fn sort_order(mut self, input: crate::types::SortOrder) -> Self {
        self.inner = self.inner.sort_order(input);
        self
    }
    /// <p>The sort order for the results. Valid values are <code>Ascending</code> and <code>Descending</code>. Default is <code>Descending</code>.</p>
    pub fn set_sort_order(mut self, input: ::std::option::Option<crate::types::SortOrder>) -> Self {
        self.inner = self.inner.set_sort_order(input);
        self
    }
    /// <p>The sort order for the results. Valid values are <code>Ascending</code> and <code>Descending</code>. Default is <code>Descending</code>.</p>
    pub fn get_sort_order(&self) -> &::std::option::Option<crate::types::SortOrder> {
        self.inner.get_sort_order()
    }
    /// <p>Filters deployments by status. Valid values are <code>CREATING</code>, <code>ACTIVE</code>, and <code>FAILED</code>.</p>
    pub fn status_equals(mut self, input: crate::types::CustomModelDeploymentStatus) -> Self {
        self.inner = self.inner.status_equals(input);
        self
    }
    /// <p>Filters deployments by status. Valid values are <code>CREATING</code>, <code>ACTIVE</code>, and <code>FAILED</code>.</p>
    pub fn set_status_equals(mut self, input: ::std::option::Option<crate::types::CustomModelDeploymentStatus>) -> Self {
        self.inner = self.inner.set_status_equals(input);
        self
    }
    /// <p>Filters deployments by status. Valid values are <code>CREATING</code>, <code>ACTIVE</code>, and <code>FAILED</code>.</p>
    pub fn get_status_equals(&self) -> &::std::option::Option<crate::types::CustomModelDeploymentStatus> {
        self.inner.get_status_equals()
    }
    /// <p>Filters deployments by the Amazon Resource Name (ARN) of the associated custom model.</p>
    pub fn model_arn_equals(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.model_arn_equals(input.into());
        self
    }
    /// <p>Filters deployments by the Amazon Resource Name (ARN) of the associated custom model.</p>
    pub fn set_model_arn_equals(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_model_arn_equals(input);
        self
    }
    /// <p>Filters deployments by the Amazon Resource Name (ARN) of the associated custom model.</p>
    pub fn get_model_arn_equals(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_model_arn_equals()
    }
}
