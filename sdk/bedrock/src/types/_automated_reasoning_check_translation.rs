// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the logical translation of natural language input into formal logical statements, including premises, claims, and confidence scores.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AutomatedReasoningCheckTranslation {
    /// <p>The logical statements that serve as the foundation or assumptions for the claims.</p>
    pub premises: ::std::option::Option<::std::vec::Vec<crate::types::AutomatedReasoningLogicStatement>>,
    /// <p>The logical statements that are being validated against the premises and policy rules.</p>
    pub claims: ::std::vec::Vec<crate::types::AutomatedReasoningLogicStatement>,
    /// <p>References to portions of the original input text that correspond to the premises but could not be fully translated.</p>
    pub untranslated_premises: ::std::option::Option<::std::vec::Vec<crate::types::AutomatedReasoningCheckInputTextReference>>,
    /// <p>References to portions of the original input text that correspond to the claims but could not be fully translated.</p>
    pub untranslated_claims: ::std::option::Option<::std::vec::Vec<crate::types::AutomatedReasoningCheckInputTextReference>>,
    /// <p>A confidence score between 0 and 1 indicating how certain the system is about the logical translation.</p>
    pub confidence: f64,
}
impl AutomatedReasoningCheckTranslation {
    /// <p>The logical statements that serve as the foundation or assumptions for the claims.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.premises.is_none()`.
    pub fn premises(&self) -> &[crate::types::AutomatedReasoningLogicStatement] {
        self.premises.as_deref().unwrap_or_default()
    }
    /// <p>The logical statements that are being validated against the premises and policy rules.</p>
    pub fn claims(&self) -> &[crate::types::AutomatedReasoningLogicStatement] {
        use std::ops::Deref;
        self.claims.deref()
    }
    /// <p>References to portions of the original input text that correspond to the premises but could not be fully translated.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.untranslated_premises.is_none()`.
    pub fn untranslated_premises(&self) -> &[crate::types::AutomatedReasoningCheckInputTextReference] {
        self.untranslated_premises.as_deref().unwrap_or_default()
    }
    /// <p>References to portions of the original input text that correspond to the claims but could not be fully translated.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.untranslated_claims.is_none()`.
    pub fn untranslated_claims(&self) -> &[crate::types::AutomatedReasoningCheckInputTextReference] {
        self.untranslated_claims.as_deref().unwrap_or_default()
    }
    /// <p>A confidence score between 0 and 1 indicating how certain the system is about the logical translation.</p>
    pub fn confidence(&self) -> f64 {
        self.confidence
    }
}
impl AutomatedReasoningCheckTranslation {
    /// Creates a new builder-style object to manufacture [`AutomatedReasoningCheckTranslation`](crate::types::AutomatedReasoningCheckTranslation).
    pub fn builder() -> crate::types::builders::AutomatedReasoningCheckTranslationBuilder {
        crate::types::builders::AutomatedReasoningCheckTranslationBuilder::default()
    }
}

/// A builder for [`AutomatedReasoningCheckTranslation`](crate::types::AutomatedReasoningCheckTranslation).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AutomatedReasoningCheckTranslationBuilder {
    pub(crate) premises: ::std::option::Option<::std::vec::Vec<crate::types::AutomatedReasoningLogicStatement>>,
    pub(crate) claims: ::std::option::Option<::std::vec::Vec<crate::types::AutomatedReasoningLogicStatement>>,
    pub(crate) untranslated_premises: ::std::option::Option<::std::vec::Vec<crate::types::AutomatedReasoningCheckInputTextReference>>,
    pub(crate) untranslated_claims: ::std::option::Option<::std::vec::Vec<crate::types::AutomatedReasoningCheckInputTextReference>>,
    pub(crate) confidence: ::std::option::Option<f64>,
}
impl AutomatedReasoningCheckTranslationBuilder {
    /// Appends an item to `premises`.
    ///
    /// To override the contents of this collection use [`set_premises`](Self::set_premises).
    ///
    /// <p>The logical statements that serve as the foundation or assumptions for the claims.</p>
    pub fn premises(mut self, input: crate::types::AutomatedReasoningLogicStatement) -> Self {
        let mut v = self.premises.unwrap_or_default();
        v.push(input);
        self.premises = ::std::option::Option::Some(v);
        self
    }
    /// <p>The logical statements that serve as the foundation or assumptions for the claims.</p>
    pub fn set_premises(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AutomatedReasoningLogicStatement>>) -> Self {
        self.premises = input;
        self
    }
    /// <p>The logical statements that serve as the foundation or assumptions for the claims.</p>
    pub fn get_premises(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AutomatedReasoningLogicStatement>> {
        &self.premises
    }
    /// Appends an item to `claims`.
    ///
    /// To override the contents of this collection use [`set_claims`](Self::set_claims).
    ///
    /// <p>The logical statements that are being validated against the premises and policy rules.</p>
    pub fn claims(mut self, input: crate::types::AutomatedReasoningLogicStatement) -> Self {
        let mut v = self.claims.unwrap_or_default();
        v.push(input);
        self.claims = ::std::option::Option::Some(v);
        self
    }
    /// <p>The logical statements that are being validated against the premises and policy rules.</p>
    pub fn set_claims(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AutomatedReasoningLogicStatement>>) -> Self {
        self.claims = input;
        self
    }
    /// <p>The logical statements that are being validated against the premises and policy rules.</p>
    pub fn get_claims(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AutomatedReasoningLogicStatement>> {
        &self.claims
    }
    /// Appends an item to `untranslated_premises`.
    ///
    /// To override the contents of this collection use [`set_untranslated_premises`](Self::set_untranslated_premises).
    ///
    /// <p>References to portions of the original input text that correspond to the premises but could not be fully translated.</p>
    pub fn untranslated_premises(mut self, input: crate::types::AutomatedReasoningCheckInputTextReference) -> Self {
        let mut v = self.untranslated_premises.unwrap_or_default();
        v.push(input);
        self.untranslated_premises = ::std::option::Option::Some(v);
        self
    }
    /// <p>References to portions of the original input text that correspond to the premises but could not be fully translated.</p>
    pub fn set_untranslated_premises(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::AutomatedReasoningCheckInputTextReference>>,
    ) -> Self {
        self.untranslated_premises = input;
        self
    }
    /// <p>References to portions of the original input text that correspond to the premises but could not be fully translated.</p>
    pub fn get_untranslated_premises(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AutomatedReasoningCheckInputTextReference>> {
        &self.untranslated_premises
    }
    /// Appends an item to `untranslated_claims`.
    ///
    /// To override the contents of this collection use [`set_untranslated_claims`](Self::set_untranslated_claims).
    ///
    /// <p>References to portions of the original input text that correspond to the claims but could not be fully translated.</p>
    pub fn untranslated_claims(mut self, input: crate::types::AutomatedReasoningCheckInputTextReference) -> Self {
        let mut v = self.untranslated_claims.unwrap_or_default();
        v.push(input);
        self.untranslated_claims = ::std::option::Option::Some(v);
        self
    }
    /// <p>References to portions of the original input text that correspond to the claims but could not be fully translated.</p>
    pub fn set_untranslated_claims(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::AutomatedReasoningCheckInputTextReference>>,
    ) -> Self {
        self.untranslated_claims = input;
        self
    }
    /// <p>References to portions of the original input text that correspond to the claims but could not be fully translated.</p>
    pub fn get_untranslated_claims(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AutomatedReasoningCheckInputTextReference>> {
        &self.untranslated_claims
    }
    /// <p>A confidence score between 0 and 1 indicating how certain the system is about the logical translation.</p>
    /// This field is required.
    pub fn confidence(mut self, input: f64) -> Self {
        self.confidence = ::std::option::Option::Some(input);
        self
    }
    /// <p>A confidence score between 0 and 1 indicating how certain the system is about the logical translation.</p>
    pub fn set_confidence(mut self, input: ::std::option::Option<f64>) -> Self {
        self.confidence = input;
        self
    }
    /// <p>A confidence score between 0 and 1 indicating how certain the system is about the logical translation.</p>
    pub fn get_confidence(&self) -> &::std::option::Option<f64> {
        &self.confidence
    }
    /// Consumes the builder and constructs a [`AutomatedReasoningCheckTranslation`](crate::types::AutomatedReasoningCheckTranslation).
    /// This method will fail if any of the following fields are not set:
    /// - [`claims`](crate::types::builders::AutomatedReasoningCheckTranslationBuilder::claims)
    /// - [`confidence`](crate::types::builders::AutomatedReasoningCheckTranslationBuilder::confidence)
    pub fn build(self) -> ::std::result::Result<crate::types::AutomatedReasoningCheckTranslation, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AutomatedReasoningCheckTranslation {
            premises: self.premises,
            claims: self.claims.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "claims",
                    "claims was not specified but it is required when building AutomatedReasoningCheckTranslation",
                )
            })?,
            untranslated_premises: self.untranslated_premises,
            untranslated_claims: self.untranslated_claims,
            confidence: self.confidence.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "confidence",
                    "confidence was not specified but it is required when building AutomatedReasoningCheckTranslation",
                )
            })?,
        })
    }
}
