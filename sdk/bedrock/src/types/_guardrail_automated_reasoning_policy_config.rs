// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration settings for integrating Automated Reasoning policies with Amazon Bedrock Guardrails.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GuardrailAutomatedReasoningPolicyConfig {
    /// <p>The list of Automated Reasoning policy ARNs to include in the guardrail configuration.</p>
    pub policies: ::std::vec::Vec<::std::string::String>,
    /// <p>The confidence threshold for triggering guardrail actions based on Automated Reasoning policy violations.</p>
    pub confidence_threshold: ::std::option::Option<f64>,
}
impl GuardrailAutomatedReasoningPolicyConfig {
    /// <p>The list of Automated Reasoning policy ARNs to include in the guardrail configuration.</p>
    pub fn policies(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.policies.deref()
    }
    /// <p>The confidence threshold for triggering guardrail actions based on Automated Reasoning policy violations.</p>
    pub fn confidence_threshold(&self) -> ::std::option::Option<f64> {
        self.confidence_threshold
    }
}
impl GuardrailAutomatedReasoningPolicyConfig {
    /// Creates a new builder-style object to manufacture [`GuardrailAutomatedReasoningPolicyConfig`](crate::types::GuardrailAutomatedReasoningPolicyConfig).
    pub fn builder() -> crate::types::builders::GuardrailAutomatedReasoningPolicyConfigBuilder {
        crate::types::builders::GuardrailAutomatedReasoningPolicyConfigBuilder::default()
    }
}

/// A builder for [`GuardrailAutomatedReasoningPolicyConfig`](crate::types::GuardrailAutomatedReasoningPolicyConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GuardrailAutomatedReasoningPolicyConfigBuilder {
    pub(crate) policies: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) confidence_threshold: ::std::option::Option<f64>,
}
impl GuardrailAutomatedReasoningPolicyConfigBuilder {
    /// Appends an item to `policies`.
    ///
    /// To override the contents of this collection use [`set_policies`](Self::set_policies).
    ///
    /// <p>The list of Automated Reasoning policy ARNs to include in the guardrail configuration.</p>
    pub fn policies(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.policies.unwrap_or_default();
        v.push(input.into());
        self.policies = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of Automated Reasoning policy ARNs to include in the guardrail configuration.</p>
    pub fn set_policies(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.policies = input;
        self
    }
    /// <p>The list of Automated Reasoning policy ARNs to include in the guardrail configuration.</p>
    pub fn get_policies(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.policies
    }
    /// <p>The confidence threshold for triggering guardrail actions based on Automated Reasoning policy violations.</p>
    pub fn confidence_threshold(mut self, input: f64) -> Self {
        self.confidence_threshold = ::std::option::Option::Some(input);
        self
    }
    /// <p>The confidence threshold for triggering guardrail actions based on Automated Reasoning policy violations.</p>
    pub fn set_confidence_threshold(mut self, input: ::std::option::Option<f64>) -> Self {
        self.confidence_threshold = input;
        self
    }
    /// <p>The confidence threshold for triggering guardrail actions based on Automated Reasoning policy violations.</p>
    pub fn get_confidence_threshold(&self) -> &::std::option::Option<f64> {
        &self.confidence_threshold
    }
    /// Consumes the builder and constructs a [`GuardrailAutomatedReasoningPolicyConfig`](crate::types::GuardrailAutomatedReasoningPolicyConfig).
    /// This method will fail if any of the following fields are not set:
    /// - [`policies`](crate::types::builders::GuardrailAutomatedReasoningPolicyConfigBuilder::policies)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::GuardrailAutomatedReasoningPolicyConfig, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::GuardrailAutomatedReasoningPolicyConfig {
            policies: self.policies.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "policies",
                    "policies was not specified but it is required when building GuardrailAutomatedReasoningPolicyConfig",
                )
            })?,
            confidence_threshold: self.confidence_threshold,
        })
    }
}
