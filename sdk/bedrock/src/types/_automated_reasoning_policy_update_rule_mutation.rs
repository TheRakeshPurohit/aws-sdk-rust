// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A mutation operation that modifies an existing rule in the policy definition during the build process.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AutomatedReasoningPolicyUpdateRuleMutation {
    /// <p>The updated rule definition containing the modified formal logical expression and any changed metadata for the existing rule.</p>
    pub rule: ::std::option::Option<crate::types::AutomatedReasoningPolicyDefinitionRule>,
}
impl AutomatedReasoningPolicyUpdateRuleMutation {
    /// <p>The updated rule definition containing the modified formal logical expression and any changed metadata for the existing rule.</p>
    pub fn rule(&self) -> ::std::option::Option<&crate::types::AutomatedReasoningPolicyDefinitionRule> {
        self.rule.as_ref()
    }
}
impl AutomatedReasoningPolicyUpdateRuleMutation {
    /// Creates a new builder-style object to manufacture [`AutomatedReasoningPolicyUpdateRuleMutation`](crate::types::AutomatedReasoningPolicyUpdateRuleMutation).
    pub fn builder() -> crate::types::builders::AutomatedReasoningPolicyUpdateRuleMutationBuilder {
        crate::types::builders::AutomatedReasoningPolicyUpdateRuleMutationBuilder::default()
    }
}

/// A builder for [`AutomatedReasoningPolicyUpdateRuleMutation`](crate::types::AutomatedReasoningPolicyUpdateRuleMutation).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AutomatedReasoningPolicyUpdateRuleMutationBuilder {
    pub(crate) rule: ::std::option::Option<crate::types::AutomatedReasoningPolicyDefinitionRule>,
}
impl AutomatedReasoningPolicyUpdateRuleMutationBuilder {
    /// <p>The updated rule definition containing the modified formal logical expression and any changed metadata for the existing rule.</p>
    /// This field is required.
    pub fn rule(mut self, input: crate::types::AutomatedReasoningPolicyDefinitionRule) -> Self {
        self.rule = ::std::option::Option::Some(input);
        self
    }
    /// <p>The updated rule definition containing the modified formal logical expression and any changed metadata for the existing rule.</p>
    pub fn set_rule(mut self, input: ::std::option::Option<crate::types::AutomatedReasoningPolicyDefinitionRule>) -> Self {
        self.rule = input;
        self
    }
    /// <p>The updated rule definition containing the modified formal logical expression and any changed metadata for the existing rule.</p>
    pub fn get_rule(&self) -> &::std::option::Option<crate::types::AutomatedReasoningPolicyDefinitionRule> {
        &self.rule
    }
    /// Consumes the builder and constructs a [`AutomatedReasoningPolicyUpdateRuleMutation`](crate::types::AutomatedReasoningPolicyUpdateRuleMutation).
    pub fn build(self) -> crate::types::AutomatedReasoningPolicyUpdateRuleMutation {
        crate::types::AutomatedReasoningPolicyUpdateRuleMutation { rule: self.rule }
    }
}
