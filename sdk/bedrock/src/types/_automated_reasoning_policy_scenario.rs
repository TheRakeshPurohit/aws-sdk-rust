// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a test scenario used to validate an Automated Reasoning policy, including the test conditions and expected outcomes.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct AutomatedReasoningPolicyScenario {
    /// <p>The logical expression or condition that defines this test scenario.</p>
    pub expression: ::std::string::String,
    /// <p>An alternative way to express the same test scenario, used for validation and comparison purposes.</p>
    pub alternate_expression: ::std::string::String,
    /// <p>The list of rule identifiers that are expected to be triggered or evaluated by this test scenario.</p>
    pub rule_ids: ::std::vec::Vec<::std::string::String>,
    /// <p>The expected outcome when this scenario is evaluated against the policy (e.g., PASS, FAIL, VIOLATION).</p>
    pub expected_result: crate::types::AutomatedReasoningCheckResult,
}
impl AutomatedReasoningPolicyScenario {
    /// <p>The logical expression or condition that defines this test scenario.</p>
    pub fn expression(&self) -> &str {
        use std::ops::Deref;
        self.expression.deref()
    }
    /// <p>An alternative way to express the same test scenario, used for validation and comparison purposes.</p>
    pub fn alternate_expression(&self) -> &str {
        use std::ops::Deref;
        self.alternate_expression.deref()
    }
    /// <p>The list of rule identifiers that are expected to be triggered or evaluated by this test scenario.</p>
    pub fn rule_ids(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.rule_ids.deref()
    }
    /// <p>The expected outcome when this scenario is evaluated against the policy (e.g., PASS, FAIL, VIOLATION).</p>
    pub fn expected_result(&self) -> &crate::types::AutomatedReasoningCheckResult {
        &self.expected_result
    }
}
impl ::std::fmt::Debug for AutomatedReasoningPolicyScenario {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AutomatedReasoningPolicyScenario");
        formatter.field("expression", &"*** Sensitive Data Redacted ***");
        formatter.field("alternate_expression", &"*** Sensitive Data Redacted ***");
        formatter.field("rule_ids", &self.rule_ids);
        formatter.field("expected_result", &self.expected_result);
        formatter.finish()
    }
}
impl AutomatedReasoningPolicyScenario {
    /// Creates a new builder-style object to manufacture [`AutomatedReasoningPolicyScenario`](crate::types::AutomatedReasoningPolicyScenario).
    pub fn builder() -> crate::types::builders::AutomatedReasoningPolicyScenarioBuilder {
        crate::types::builders::AutomatedReasoningPolicyScenarioBuilder::default()
    }
}

/// A builder for [`AutomatedReasoningPolicyScenario`](crate::types::AutomatedReasoningPolicyScenario).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct AutomatedReasoningPolicyScenarioBuilder {
    pub(crate) expression: ::std::option::Option<::std::string::String>,
    pub(crate) alternate_expression: ::std::option::Option<::std::string::String>,
    pub(crate) rule_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) expected_result: ::std::option::Option<crate::types::AutomatedReasoningCheckResult>,
}
impl AutomatedReasoningPolicyScenarioBuilder {
    /// <p>The logical expression or condition that defines this test scenario.</p>
    /// This field is required.
    pub fn expression(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.expression = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The logical expression or condition that defines this test scenario.</p>
    pub fn set_expression(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.expression = input;
        self
    }
    /// <p>The logical expression or condition that defines this test scenario.</p>
    pub fn get_expression(&self) -> &::std::option::Option<::std::string::String> {
        &self.expression
    }
    /// <p>An alternative way to express the same test scenario, used for validation and comparison purposes.</p>
    /// This field is required.
    pub fn alternate_expression(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.alternate_expression = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An alternative way to express the same test scenario, used for validation and comparison purposes.</p>
    pub fn set_alternate_expression(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.alternate_expression = input;
        self
    }
    /// <p>An alternative way to express the same test scenario, used for validation and comparison purposes.</p>
    pub fn get_alternate_expression(&self) -> &::std::option::Option<::std::string::String> {
        &self.alternate_expression
    }
    /// Appends an item to `rule_ids`.
    ///
    /// To override the contents of this collection use [`set_rule_ids`](Self::set_rule_ids).
    ///
    /// <p>The list of rule identifiers that are expected to be triggered or evaluated by this test scenario.</p>
    pub fn rule_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.rule_ids.unwrap_or_default();
        v.push(input.into());
        self.rule_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of rule identifiers that are expected to be triggered or evaluated by this test scenario.</p>
    pub fn set_rule_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.rule_ids = input;
        self
    }
    /// <p>The list of rule identifiers that are expected to be triggered or evaluated by this test scenario.</p>
    pub fn get_rule_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.rule_ids
    }
    /// <p>The expected outcome when this scenario is evaluated against the policy (e.g., PASS, FAIL, VIOLATION).</p>
    /// This field is required.
    pub fn expected_result(mut self, input: crate::types::AutomatedReasoningCheckResult) -> Self {
        self.expected_result = ::std::option::Option::Some(input);
        self
    }
    /// <p>The expected outcome when this scenario is evaluated against the policy (e.g., PASS, FAIL, VIOLATION).</p>
    pub fn set_expected_result(mut self, input: ::std::option::Option<crate::types::AutomatedReasoningCheckResult>) -> Self {
        self.expected_result = input;
        self
    }
    /// <p>The expected outcome when this scenario is evaluated against the policy (e.g., PASS, FAIL, VIOLATION).</p>
    pub fn get_expected_result(&self) -> &::std::option::Option<crate::types::AutomatedReasoningCheckResult> {
        &self.expected_result
    }
    /// Consumes the builder and constructs a [`AutomatedReasoningPolicyScenario`](crate::types::AutomatedReasoningPolicyScenario).
    /// This method will fail if any of the following fields are not set:
    /// - [`expression`](crate::types::builders::AutomatedReasoningPolicyScenarioBuilder::expression)
    /// - [`alternate_expression`](crate::types::builders::AutomatedReasoningPolicyScenarioBuilder::alternate_expression)
    /// - [`rule_ids`](crate::types::builders::AutomatedReasoningPolicyScenarioBuilder::rule_ids)
    /// - [`expected_result`](crate::types::builders::AutomatedReasoningPolicyScenarioBuilder::expected_result)
    pub fn build(self) -> ::std::result::Result<crate::types::AutomatedReasoningPolicyScenario, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AutomatedReasoningPolicyScenario {
            expression: self.expression.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "expression",
                    "expression was not specified but it is required when building AutomatedReasoningPolicyScenario",
                )
            })?,
            alternate_expression: self.alternate_expression.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "alternate_expression",
                    "alternate_expression was not specified but it is required when building AutomatedReasoningPolicyScenario",
                )
            })?,
            rule_ids: self.rule_ids.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "rule_ids",
                    "rule_ids was not specified but it is required when building AutomatedReasoningPolicyScenario",
                )
            })?,
            expected_result: self.expected_result.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "expected_result",
                    "expected_result was not specified but it is required when building AutomatedReasoningPolicyScenario",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for AutomatedReasoningPolicyScenarioBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AutomatedReasoningPolicyScenarioBuilder");
        formatter.field("expression", &"*** Sensitive Data Redacted ***");
        formatter.field("alternate_expression", &"*** Sensitive Data Redacted ***");
        formatter.field("rule_ids", &self.rule_ids);
        formatter.field("expected_result", &self.expected_result);
        formatter.finish()
    }
}
