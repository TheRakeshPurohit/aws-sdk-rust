// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An annotation for updating the policy based on feedback about how specific rules performed during testing or real-world usage.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct AutomatedReasoningPolicyUpdateFromRuleFeedbackAnnotation {
    /// <p>The list of rule identifiers that the feedback applies to.</p>
    pub rule_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The feedback information about rule performance, including suggestions for improvements or corrections.</p>
    pub feedback: ::std::string::String,
}
impl AutomatedReasoningPolicyUpdateFromRuleFeedbackAnnotation {
    /// <p>The list of rule identifiers that the feedback applies to.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.rule_ids.is_none()`.
    pub fn rule_ids(&self) -> &[::std::string::String] {
        self.rule_ids.as_deref().unwrap_or_default()
    }
    /// <p>The feedback information about rule performance, including suggestions for improvements or corrections.</p>
    pub fn feedback(&self) -> &str {
        use std::ops::Deref;
        self.feedback.deref()
    }
}
impl ::std::fmt::Debug for AutomatedReasoningPolicyUpdateFromRuleFeedbackAnnotation {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AutomatedReasoningPolicyUpdateFromRuleFeedbackAnnotation");
        formatter.field("rule_ids", &self.rule_ids);
        formatter.field("feedback", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl AutomatedReasoningPolicyUpdateFromRuleFeedbackAnnotation {
    /// Creates a new builder-style object to manufacture [`AutomatedReasoningPolicyUpdateFromRuleFeedbackAnnotation`](crate::types::AutomatedReasoningPolicyUpdateFromRuleFeedbackAnnotation).
    pub fn builder() -> crate::types::builders::AutomatedReasoningPolicyUpdateFromRuleFeedbackAnnotationBuilder {
        crate::types::builders::AutomatedReasoningPolicyUpdateFromRuleFeedbackAnnotationBuilder::default()
    }
}

/// A builder for [`AutomatedReasoningPolicyUpdateFromRuleFeedbackAnnotation`](crate::types::AutomatedReasoningPolicyUpdateFromRuleFeedbackAnnotation).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct AutomatedReasoningPolicyUpdateFromRuleFeedbackAnnotationBuilder {
    pub(crate) rule_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) feedback: ::std::option::Option<::std::string::String>,
}
impl AutomatedReasoningPolicyUpdateFromRuleFeedbackAnnotationBuilder {
    /// Appends an item to `rule_ids`.
    ///
    /// To override the contents of this collection use [`set_rule_ids`](Self::set_rule_ids).
    ///
    /// <p>The list of rule identifiers that the feedback applies to.</p>
    pub fn rule_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.rule_ids.unwrap_or_default();
        v.push(input.into());
        self.rule_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of rule identifiers that the feedback applies to.</p>
    pub fn set_rule_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.rule_ids = input;
        self
    }
    /// <p>The list of rule identifiers that the feedback applies to.</p>
    pub fn get_rule_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.rule_ids
    }
    /// <p>The feedback information about rule performance, including suggestions for improvements or corrections.</p>
    /// This field is required.
    pub fn feedback(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.feedback = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The feedback information about rule performance, including suggestions for improvements or corrections.</p>
    pub fn set_feedback(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.feedback = input;
        self
    }
    /// <p>The feedback information about rule performance, including suggestions for improvements or corrections.</p>
    pub fn get_feedback(&self) -> &::std::option::Option<::std::string::String> {
        &self.feedback
    }
    /// Consumes the builder and constructs a [`AutomatedReasoningPolicyUpdateFromRuleFeedbackAnnotation`](crate::types::AutomatedReasoningPolicyUpdateFromRuleFeedbackAnnotation).
    /// This method will fail if any of the following fields are not set:
    /// - [`feedback`](crate::types::builders::AutomatedReasoningPolicyUpdateFromRuleFeedbackAnnotationBuilder::feedback)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::AutomatedReasoningPolicyUpdateFromRuleFeedbackAnnotation, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::types::AutomatedReasoningPolicyUpdateFromRuleFeedbackAnnotation {
            rule_ids: self.rule_ids,
            feedback: self.feedback.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "feedback",
                    "feedback was not specified but it is required when building AutomatedReasoningPolicyUpdateFromRuleFeedbackAnnotation",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for AutomatedReasoningPolicyUpdateFromRuleFeedbackAnnotationBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AutomatedReasoningPolicyUpdateFromRuleFeedbackAnnotationBuilder");
        formatter.field("rule_ids", &self.rule_ids);
        formatter.field("feedback", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
