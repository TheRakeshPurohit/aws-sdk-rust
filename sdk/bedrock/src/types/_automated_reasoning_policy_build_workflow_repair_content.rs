// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains content and instructions for repairing or improving an existing Automated Reasoning policy.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AutomatedReasoningPolicyBuildWorkflowRepairContent {
    /// <p>Specific annotations or modifications to apply during the policy repair process, such as rule corrections or variable updates.</p>
    pub annotations: ::std::vec::Vec<crate::types::AutomatedReasoningPolicyAnnotation>,
}
impl AutomatedReasoningPolicyBuildWorkflowRepairContent {
    /// <p>Specific annotations or modifications to apply during the policy repair process, such as rule corrections or variable updates.</p>
    pub fn annotations(&self) -> &[crate::types::AutomatedReasoningPolicyAnnotation] {
        use std::ops::Deref;
        self.annotations.deref()
    }
}
impl AutomatedReasoningPolicyBuildWorkflowRepairContent {
    /// Creates a new builder-style object to manufacture [`AutomatedReasoningPolicyBuildWorkflowRepairContent`](crate::types::AutomatedReasoningPolicyBuildWorkflowRepairContent).
    pub fn builder() -> crate::types::builders::AutomatedReasoningPolicyBuildWorkflowRepairContentBuilder {
        crate::types::builders::AutomatedReasoningPolicyBuildWorkflowRepairContentBuilder::default()
    }
}

/// A builder for [`AutomatedReasoningPolicyBuildWorkflowRepairContent`](crate::types::AutomatedReasoningPolicyBuildWorkflowRepairContent).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AutomatedReasoningPolicyBuildWorkflowRepairContentBuilder {
    pub(crate) annotations: ::std::option::Option<::std::vec::Vec<crate::types::AutomatedReasoningPolicyAnnotation>>,
}
impl AutomatedReasoningPolicyBuildWorkflowRepairContentBuilder {
    /// Appends an item to `annotations`.
    ///
    /// To override the contents of this collection use [`set_annotations`](Self::set_annotations).
    ///
    /// <p>Specific annotations or modifications to apply during the policy repair process, such as rule corrections or variable updates.</p>
    pub fn annotations(mut self, input: crate::types::AutomatedReasoningPolicyAnnotation) -> Self {
        let mut v = self.annotations.unwrap_or_default();
        v.push(input);
        self.annotations = ::std::option::Option::Some(v);
        self
    }
    /// <p>Specific annotations or modifications to apply during the policy repair process, such as rule corrections or variable updates.</p>
    pub fn set_annotations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AutomatedReasoningPolicyAnnotation>>) -> Self {
        self.annotations = input;
        self
    }
    /// <p>Specific annotations or modifications to apply during the policy repair process, such as rule corrections or variable updates.</p>
    pub fn get_annotations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AutomatedReasoningPolicyAnnotation>> {
        &self.annotations
    }
    /// Consumes the builder and constructs a [`AutomatedReasoningPolicyBuildWorkflowRepairContent`](crate::types::AutomatedReasoningPolicyBuildWorkflowRepairContent).
    /// This method will fail if any of the following fields are not set:
    /// - [`annotations`](crate::types::builders::AutomatedReasoningPolicyBuildWorkflowRepairContentBuilder::annotations)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::AutomatedReasoningPolicyBuildWorkflowRepairContent, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::types::AutomatedReasoningPolicyBuildWorkflowRepairContent {
            annotations: self.annotations.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "annotations",
                    "annotations was not specified but it is required when building AutomatedReasoningPolicyBuildWorkflowRepairContent",
                )
            })?,
        })
    }
}
