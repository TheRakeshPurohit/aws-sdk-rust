// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a logical statement that can be expressed both in formal logic notation and natural language, providing dual representations for better understanding and validation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct AutomatedReasoningLogicStatement {
    /// <p>The formal logic representation of the statement using mathematical notation and logical operators.</p>
    pub logic: ::std::string::String,
    /// <p>The natural language representation of the logical statement, providing a human-readable interpretation of the formal logic.</p>
    pub natural_language: ::std::option::Option<::std::string::String>,
}
impl AutomatedReasoningLogicStatement {
    /// <p>The formal logic representation of the statement using mathematical notation and logical operators.</p>
    pub fn logic(&self) -> &str {
        use std::ops::Deref;
        self.logic.deref()
    }
    /// <p>The natural language representation of the logical statement, providing a human-readable interpretation of the formal logic.</p>
    pub fn natural_language(&self) -> ::std::option::Option<&str> {
        self.natural_language.as_deref()
    }
}
impl ::std::fmt::Debug for AutomatedReasoningLogicStatement {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AutomatedReasoningLogicStatement");
        formatter.field("logic", &"*** Sensitive Data Redacted ***");
        formatter.field("natural_language", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl AutomatedReasoningLogicStatement {
    /// Creates a new builder-style object to manufacture [`AutomatedReasoningLogicStatement`](crate::types::AutomatedReasoningLogicStatement).
    pub fn builder() -> crate::types::builders::AutomatedReasoningLogicStatementBuilder {
        crate::types::builders::AutomatedReasoningLogicStatementBuilder::default()
    }
}

/// A builder for [`AutomatedReasoningLogicStatement`](crate::types::AutomatedReasoningLogicStatement).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct AutomatedReasoningLogicStatementBuilder {
    pub(crate) logic: ::std::option::Option<::std::string::String>,
    pub(crate) natural_language: ::std::option::Option<::std::string::String>,
}
impl AutomatedReasoningLogicStatementBuilder {
    /// <p>The formal logic representation of the statement using mathematical notation and logical operators.</p>
    /// This field is required.
    pub fn logic(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.logic = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The formal logic representation of the statement using mathematical notation and logical operators.</p>
    pub fn set_logic(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.logic = input;
        self
    }
    /// <p>The formal logic representation of the statement using mathematical notation and logical operators.</p>
    pub fn get_logic(&self) -> &::std::option::Option<::std::string::String> {
        &self.logic
    }
    /// <p>The natural language representation of the logical statement, providing a human-readable interpretation of the formal logic.</p>
    pub fn natural_language(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.natural_language = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The natural language representation of the logical statement, providing a human-readable interpretation of the formal logic.</p>
    pub fn set_natural_language(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.natural_language = input;
        self
    }
    /// <p>The natural language representation of the logical statement, providing a human-readable interpretation of the formal logic.</p>
    pub fn get_natural_language(&self) -> &::std::option::Option<::std::string::String> {
        &self.natural_language
    }
    /// Consumes the builder and constructs a [`AutomatedReasoningLogicStatement`](crate::types::AutomatedReasoningLogicStatement).
    /// This method will fail if any of the following fields are not set:
    /// - [`logic`](crate::types::builders::AutomatedReasoningLogicStatementBuilder::logic)
    pub fn build(self) -> ::std::result::Result<crate::types::AutomatedReasoningLogicStatement, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AutomatedReasoningLogicStatement {
            logic: self.logic.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "logic",
                    "logic was not specified but it is required when building AutomatedReasoningLogicStatement",
                )
            })?,
            natural_language: self.natural_language,
        })
    }
}
impl ::std::fmt::Debug for AutomatedReasoningLogicStatementBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AutomatedReasoningLogicStatementBuilder");
        formatter.field("logic", &"*** Sensitive Data Redacted ***");
        formatter.field("natural_language", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
