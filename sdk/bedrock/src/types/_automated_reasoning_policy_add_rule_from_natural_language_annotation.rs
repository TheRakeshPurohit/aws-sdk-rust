// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An annotation for adding a new rule to the policy by converting a natural language description into a formal logical expression.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct AutomatedReasoningPolicyAddRuleFromNaturalLanguageAnnotation {
    /// <p>The natural language description of the rule that should be converted into a formal logical expression.</p>
    pub natural_language: ::std::string::String,
}
impl AutomatedReasoningPolicyAddRuleFromNaturalLanguageAnnotation {
    /// <p>The natural language description of the rule that should be converted into a formal logical expression.</p>
    pub fn natural_language(&self) -> &str {
        use std::ops::Deref;
        self.natural_language.deref()
    }
}
impl ::std::fmt::Debug for AutomatedReasoningPolicyAddRuleFromNaturalLanguageAnnotation {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AutomatedReasoningPolicyAddRuleFromNaturalLanguageAnnotation");
        formatter.field("natural_language", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl AutomatedReasoningPolicyAddRuleFromNaturalLanguageAnnotation {
    /// Creates a new builder-style object to manufacture [`AutomatedReasoningPolicyAddRuleFromNaturalLanguageAnnotation`](crate::types::AutomatedReasoningPolicyAddRuleFromNaturalLanguageAnnotation).
    pub fn builder() -> crate::types::builders::AutomatedReasoningPolicyAddRuleFromNaturalLanguageAnnotationBuilder {
        crate::types::builders::AutomatedReasoningPolicyAddRuleFromNaturalLanguageAnnotationBuilder::default()
    }
}

/// A builder for [`AutomatedReasoningPolicyAddRuleFromNaturalLanguageAnnotation`](crate::types::AutomatedReasoningPolicyAddRuleFromNaturalLanguageAnnotation).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct AutomatedReasoningPolicyAddRuleFromNaturalLanguageAnnotationBuilder {
    pub(crate) natural_language: ::std::option::Option<::std::string::String>,
}
impl AutomatedReasoningPolicyAddRuleFromNaturalLanguageAnnotationBuilder {
    /// <p>The natural language description of the rule that should be converted into a formal logical expression.</p>
    /// This field is required.
    pub fn natural_language(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.natural_language = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The natural language description of the rule that should be converted into a formal logical expression.</p>
    pub fn set_natural_language(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.natural_language = input;
        self
    }
    /// <p>The natural language description of the rule that should be converted into a formal logical expression.</p>
    pub fn get_natural_language(&self) -> &::std::option::Option<::std::string::String> {
        &self.natural_language
    }
    /// Consumes the builder and constructs a [`AutomatedReasoningPolicyAddRuleFromNaturalLanguageAnnotation`](crate::types::AutomatedReasoningPolicyAddRuleFromNaturalLanguageAnnotation).
    /// This method will fail if any of the following fields are not set:
    /// - [`natural_language`](crate::types::builders::AutomatedReasoningPolicyAddRuleFromNaturalLanguageAnnotationBuilder::natural_language)
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::types::AutomatedReasoningPolicyAddRuleFromNaturalLanguageAnnotation,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::types::AutomatedReasoningPolicyAddRuleFromNaturalLanguageAnnotation {
                natural_language: self.natural_language
                    .ok_or_else(||
                        ::aws_smithy_types::error::operation::BuildError::missing_field("natural_language", "natural_language was not specified but it is required when building AutomatedReasoningPolicyAddRuleFromNaturalLanguageAnnotation")
                    )?
                ,
            }
        )
    }
}
impl ::std::fmt::Debug for AutomatedReasoningPolicyAddRuleFromNaturalLanguageAnnotationBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AutomatedReasoningPolicyAddRuleFromNaturalLanguageAnnotationBuilder");
        formatter.field("natural_language", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
