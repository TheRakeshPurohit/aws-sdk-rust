// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A mutation operation that adds a new variable to the policy definition during the build process.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AutomatedReasoningPolicyAddVariableMutation {
    /// <p>The variable definition that specifies the name, type, and description for the new variable being added to the policy.</p>
    pub variable: ::std::option::Option<crate::types::AutomatedReasoningPolicyDefinitionVariable>,
}
impl AutomatedReasoningPolicyAddVariableMutation {
    /// <p>The variable definition that specifies the name, type, and description for the new variable being added to the policy.</p>
    pub fn variable(&self) -> ::std::option::Option<&crate::types::AutomatedReasoningPolicyDefinitionVariable> {
        self.variable.as_ref()
    }
}
impl AutomatedReasoningPolicyAddVariableMutation {
    /// Creates a new builder-style object to manufacture [`AutomatedReasoningPolicyAddVariableMutation`](crate::types::AutomatedReasoningPolicyAddVariableMutation).
    pub fn builder() -> crate::types::builders::AutomatedReasoningPolicyAddVariableMutationBuilder {
        crate::types::builders::AutomatedReasoningPolicyAddVariableMutationBuilder::default()
    }
}

/// A builder for [`AutomatedReasoningPolicyAddVariableMutation`](crate::types::AutomatedReasoningPolicyAddVariableMutation).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AutomatedReasoningPolicyAddVariableMutationBuilder {
    pub(crate) variable: ::std::option::Option<crate::types::AutomatedReasoningPolicyDefinitionVariable>,
}
impl AutomatedReasoningPolicyAddVariableMutationBuilder {
    /// <p>The variable definition that specifies the name, type, and description for the new variable being added to the policy.</p>
    /// This field is required.
    pub fn variable(mut self, input: crate::types::AutomatedReasoningPolicyDefinitionVariable) -> Self {
        self.variable = ::std::option::Option::Some(input);
        self
    }
    /// <p>The variable definition that specifies the name, type, and description for the new variable being added to the policy.</p>
    pub fn set_variable(mut self, input: ::std::option::Option<crate::types::AutomatedReasoningPolicyDefinitionVariable>) -> Self {
        self.variable = input;
        self
    }
    /// <p>The variable definition that specifies the name, type, and description for the new variable being added to the policy.</p>
    pub fn get_variable(&self) -> &::std::option::Option<crate::types::AutomatedReasoningPolicyDefinitionVariable> {
        &self.variable
    }
    /// Consumes the builder and constructs a [`AutomatedReasoningPolicyAddVariableMutation`](crate::types::AutomatedReasoningPolicyAddVariableMutation).
    pub fn build(self) -> crate::types::AutomatedReasoningPolicyAddVariableMutation {
        crate::types::AutomatedReasoningPolicyAddVariableMutation { variable: self.variable }
    }
}
