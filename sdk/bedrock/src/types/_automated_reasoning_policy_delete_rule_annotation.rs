// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An annotation for removing a rule from an Automated Reasoning policy.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AutomatedReasoningPolicyDeleteRuleAnnotation {
    /// <p>The unique identifier of the rule to delete from the policy.</p>
    pub rule_id: ::std::string::String,
}
impl AutomatedReasoningPolicyDeleteRuleAnnotation {
    /// <p>The unique identifier of the rule to delete from the policy.</p>
    pub fn rule_id(&self) -> &str {
        use std::ops::Deref;
        self.rule_id.deref()
    }
}
impl AutomatedReasoningPolicyDeleteRuleAnnotation {
    /// Creates a new builder-style object to manufacture [`AutomatedReasoningPolicyDeleteRuleAnnotation`](crate::types::AutomatedReasoningPolicyDeleteRuleAnnotation).
    pub fn builder() -> crate::types::builders::AutomatedReasoningPolicyDeleteRuleAnnotationBuilder {
        crate::types::builders::AutomatedReasoningPolicyDeleteRuleAnnotationBuilder::default()
    }
}

/// A builder for [`AutomatedReasoningPolicyDeleteRuleAnnotation`](crate::types::AutomatedReasoningPolicyDeleteRuleAnnotation).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AutomatedReasoningPolicyDeleteRuleAnnotationBuilder {
    pub(crate) rule_id: ::std::option::Option<::std::string::String>,
}
impl AutomatedReasoningPolicyDeleteRuleAnnotationBuilder {
    /// <p>The unique identifier of the rule to delete from the policy.</p>
    /// This field is required.
    pub fn rule_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.rule_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the rule to delete from the policy.</p>
    pub fn set_rule_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.rule_id = input;
        self
    }
    /// <p>The unique identifier of the rule to delete from the policy.</p>
    pub fn get_rule_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.rule_id
    }
    /// Consumes the builder and constructs a [`AutomatedReasoningPolicyDeleteRuleAnnotation`](crate::types::AutomatedReasoningPolicyDeleteRuleAnnotation).
    /// This method will fail if any of the following fields are not set:
    /// - [`rule_id`](crate::types::builders::AutomatedReasoningPolicyDeleteRuleAnnotationBuilder::rule_id)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::AutomatedReasoningPolicyDeleteRuleAnnotation, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AutomatedReasoningPolicyDeleteRuleAnnotation {
            rule_id: self.rule_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "rule_id",
                    "rule_id was not specified but it is required when building AutomatedReasoningPolicyDeleteRuleAnnotation",
                )
            })?,
        })
    }
}
