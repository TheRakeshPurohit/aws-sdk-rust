// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A mutation operation that adds a new custom type to the policy definition during the build process.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AutomatedReasoningPolicyAddTypeMutation {
    /// <p>The type definition that specifies the name, description, and possible values for the new custom type being added to the policy.</p>
    pub r#type: ::std::option::Option<crate::types::AutomatedReasoningPolicyDefinitionType>,
}
impl AutomatedReasoningPolicyAddTypeMutation {
    /// <p>The type definition that specifies the name, description, and possible values for the new custom type being added to the policy.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::AutomatedReasoningPolicyDefinitionType> {
        self.r#type.as_ref()
    }
}
impl AutomatedReasoningPolicyAddTypeMutation {
    /// Creates a new builder-style object to manufacture [`AutomatedReasoningPolicyAddTypeMutation`](crate::types::AutomatedReasoningPolicyAddTypeMutation).
    pub fn builder() -> crate::types::builders::AutomatedReasoningPolicyAddTypeMutationBuilder {
        crate::types::builders::AutomatedReasoningPolicyAddTypeMutationBuilder::default()
    }
}

/// A builder for [`AutomatedReasoningPolicyAddTypeMutation`](crate::types::AutomatedReasoningPolicyAddTypeMutation).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AutomatedReasoningPolicyAddTypeMutationBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::AutomatedReasoningPolicyDefinitionType>,
}
impl AutomatedReasoningPolicyAddTypeMutationBuilder {
    /// <p>The type definition that specifies the name, description, and possible values for the new custom type being added to the policy.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::AutomatedReasoningPolicyDefinitionType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type definition that specifies the name, description, and possible values for the new custom type being added to the policy.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::AutomatedReasoningPolicyDefinitionType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type definition that specifies the name, description, and possible values for the new custom type being added to the policy.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::AutomatedReasoningPolicyDefinitionType> {
        &self.r#type
    }
    /// Consumes the builder and constructs a [`AutomatedReasoningPolicyAddTypeMutation`](crate::types::AutomatedReasoningPolicyAddTypeMutation).
    pub fn build(self) -> crate::types::AutomatedReasoningPolicyAddTypeMutation {
        crate::types::AutomatedReasoningPolicyAddTypeMutation { r#type: self.r#type }
    }
}
