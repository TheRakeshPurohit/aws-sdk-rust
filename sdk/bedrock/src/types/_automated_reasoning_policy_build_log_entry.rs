// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a single entry in the policy build log, containing information about a specific step or event in the build process.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AutomatedReasoningPolicyBuildLogEntry {
    /// <p>The annotation or operation that was being processed when this log entry was created.</p>
    pub annotation: ::std::option::Option<crate::types::AutomatedReasoningPolicyAnnotation>,
    /// <p>The status of the build step (e.g., SUCCESS, FAILED, IN_PROGRESS).</p>
    pub status: crate::types::AutomatedReasoningPolicyAnnotationStatus,
    /// <p>Detailed information about the specific build steps that were executed, including any sub-operations or transformations.</p>
    pub build_steps: ::std::vec::Vec<crate::types::AutomatedReasoningPolicyBuildStep>,
}
impl AutomatedReasoningPolicyBuildLogEntry {
    /// <p>The annotation or operation that was being processed when this log entry was created.</p>
    pub fn annotation(&self) -> ::std::option::Option<&crate::types::AutomatedReasoningPolicyAnnotation> {
        self.annotation.as_ref()
    }
    /// <p>The status of the build step (e.g., SUCCESS, FAILED, IN_PROGRESS).</p>
    pub fn status(&self) -> &crate::types::AutomatedReasoningPolicyAnnotationStatus {
        &self.status
    }
    /// <p>Detailed information about the specific build steps that were executed, including any sub-operations or transformations.</p>
    pub fn build_steps(&self) -> &[crate::types::AutomatedReasoningPolicyBuildStep] {
        use std::ops::Deref;
        self.build_steps.deref()
    }
}
impl AutomatedReasoningPolicyBuildLogEntry {
    /// Creates a new builder-style object to manufacture [`AutomatedReasoningPolicyBuildLogEntry`](crate::types::AutomatedReasoningPolicyBuildLogEntry).
    pub fn builder() -> crate::types::builders::AutomatedReasoningPolicyBuildLogEntryBuilder {
        crate::types::builders::AutomatedReasoningPolicyBuildLogEntryBuilder::default()
    }
}

/// A builder for [`AutomatedReasoningPolicyBuildLogEntry`](crate::types::AutomatedReasoningPolicyBuildLogEntry).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AutomatedReasoningPolicyBuildLogEntryBuilder {
    pub(crate) annotation: ::std::option::Option<crate::types::AutomatedReasoningPolicyAnnotation>,
    pub(crate) status: ::std::option::Option<crate::types::AutomatedReasoningPolicyAnnotationStatus>,
    pub(crate) build_steps: ::std::option::Option<::std::vec::Vec<crate::types::AutomatedReasoningPolicyBuildStep>>,
}
impl AutomatedReasoningPolicyBuildLogEntryBuilder {
    /// <p>The annotation or operation that was being processed when this log entry was created.</p>
    /// This field is required.
    pub fn annotation(mut self, input: crate::types::AutomatedReasoningPolicyAnnotation) -> Self {
        self.annotation = ::std::option::Option::Some(input);
        self
    }
    /// <p>The annotation or operation that was being processed when this log entry was created.</p>
    pub fn set_annotation(mut self, input: ::std::option::Option<crate::types::AutomatedReasoningPolicyAnnotation>) -> Self {
        self.annotation = input;
        self
    }
    /// <p>The annotation or operation that was being processed when this log entry was created.</p>
    pub fn get_annotation(&self) -> &::std::option::Option<crate::types::AutomatedReasoningPolicyAnnotation> {
        &self.annotation
    }
    /// <p>The status of the build step (e.g., SUCCESS, FAILED, IN_PROGRESS).</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::AutomatedReasoningPolicyAnnotationStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the build step (e.g., SUCCESS, FAILED, IN_PROGRESS).</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::AutomatedReasoningPolicyAnnotationStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the build step (e.g., SUCCESS, FAILED, IN_PROGRESS).</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::AutomatedReasoningPolicyAnnotationStatus> {
        &self.status
    }
    /// Appends an item to `build_steps`.
    ///
    /// To override the contents of this collection use [`set_build_steps`](Self::set_build_steps).
    ///
    /// <p>Detailed information about the specific build steps that were executed, including any sub-operations or transformations.</p>
    pub fn build_steps(mut self, input: crate::types::AutomatedReasoningPolicyBuildStep) -> Self {
        let mut v = self.build_steps.unwrap_or_default();
        v.push(input);
        self.build_steps = ::std::option::Option::Some(v);
        self
    }
    /// <p>Detailed information about the specific build steps that were executed, including any sub-operations or transformations.</p>
    pub fn set_build_steps(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AutomatedReasoningPolicyBuildStep>>) -> Self {
        self.build_steps = input;
        self
    }
    /// <p>Detailed information about the specific build steps that were executed, including any sub-operations or transformations.</p>
    pub fn get_build_steps(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AutomatedReasoningPolicyBuildStep>> {
        &self.build_steps
    }
    /// Consumes the builder and constructs a [`AutomatedReasoningPolicyBuildLogEntry`](crate::types::AutomatedReasoningPolicyBuildLogEntry).
    /// This method will fail if any of the following fields are not set:
    /// - [`status`](crate::types::builders::AutomatedReasoningPolicyBuildLogEntryBuilder::status)
    /// - [`build_steps`](crate::types::builders::AutomatedReasoningPolicyBuildLogEntryBuilder::build_steps)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::AutomatedReasoningPolicyBuildLogEntry, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AutomatedReasoningPolicyBuildLogEntry {
            annotation: self.annotation,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building AutomatedReasoningPolicyBuildLogEntry",
                )
            })?,
            build_steps: self.build_steps.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "build_steps",
                    "build_steps was not specified but it is required when building AutomatedReasoningPolicyBuildLogEntry",
                )
            })?,
        })
    }
}
