// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a test for validating an Automated Reasoning policy. tests contain sample inputs and expected outcomes to verify policy behavior.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct AutomatedReasoningPolicyTestCase {
    /// <p>The unique identifier of the test.</p>
    pub test_case_id: ::std::string::String,
    /// <p>The output content to be validated by the policy, typically representing a foundation model response.</p>
    pub guard_content: ::std::string::String,
    /// <p>The input query or prompt that generated the content. This provides context for the validation.</p>
    pub query_content: ::std::option::Option<::std::string::String>,
    /// <p>The expected result of the Automated Reasoning check for this test.</p>
    pub expected_aggregated_findings_result: ::std::option::Option<crate::types::AutomatedReasoningCheckResult>,
    /// <p>The timestamp when the test was created.</p>
    pub created_at: ::aws_smithy_types::DateTime,
    /// <p>The timestamp when the test was last updated.</p>
    pub updated_at: ::aws_smithy_types::DateTime,
    /// <p>The minimum confidence level for logic validation. Content meeting this threshold is considered high-confidence and can be validated.</p>
    pub confidence_threshold: ::std::option::Option<f64>,
}
impl AutomatedReasoningPolicyTestCase {
    /// <p>The unique identifier of the test.</p>
    pub fn test_case_id(&self) -> &str {
        use std::ops::Deref;
        self.test_case_id.deref()
    }
    /// <p>The output content to be validated by the policy, typically representing a foundation model response.</p>
    pub fn guard_content(&self) -> &str {
        use std::ops::Deref;
        self.guard_content.deref()
    }
    /// <p>The input query or prompt that generated the content. This provides context for the validation.</p>
    pub fn query_content(&self) -> ::std::option::Option<&str> {
        self.query_content.as_deref()
    }
    /// <p>The expected result of the Automated Reasoning check for this test.</p>
    pub fn expected_aggregated_findings_result(&self) -> ::std::option::Option<&crate::types::AutomatedReasoningCheckResult> {
        self.expected_aggregated_findings_result.as_ref()
    }
    /// <p>The timestamp when the test was created.</p>
    pub fn created_at(&self) -> &::aws_smithy_types::DateTime {
        &self.created_at
    }
    /// <p>The timestamp when the test was last updated.</p>
    pub fn updated_at(&self) -> &::aws_smithy_types::DateTime {
        &self.updated_at
    }
    /// <p>The minimum confidence level for logic validation. Content meeting this threshold is considered high-confidence and can be validated.</p>
    pub fn confidence_threshold(&self) -> ::std::option::Option<f64> {
        self.confidence_threshold
    }
}
impl ::std::fmt::Debug for AutomatedReasoningPolicyTestCase {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AutomatedReasoningPolicyTestCase");
        formatter.field("test_case_id", &self.test_case_id);
        formatter.field("guard_content", &"*** Sensitive Data Redacted ***");
        formatter.field("query_content", &"*** Sensitive Data Redacted ***");
        formatter.field("expected_aggregated_findings_result", &self.expected_aggregated_findings_result);
        formatter.field("created_at", &self.created_at);
        formatter.field("updated_at", &self.updated_at);
        formatter.field("confidence_threshold", &self.confidence_threshold);
        formatter.finish()
    }
}
impl AutomatedReasoningPolicyTestCase {
    /// Creates a new builder-style object to manufacture [`AutomatedReasoningPolicyTestCase`](crate::types::AutomatedReasoningPolicyTestCase).
    pub fn builder() -> crate::types::builders::AutomatedReasoningPolicyTestCaseBuilder {
        crate::types::builders::AutomatedReasoningPolicyTestCaseBuilder::default()
    }
}

/// A builder for [`AutomatedReasoningPolicyTestCase`](crate::types::AutomatedReasoningPolicyTestCase).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct AutomatedReasoningPolicyTestCaseBuilder {
    pub(crate) test_case_id: ::std::option::Option<::std::string::String>,
    pub(crate) guard_content: ::std::option::Option<::std::string::String>,
    pub(crate) query_content: ::std::option::Option<::std::string::String>,
    pub(crate) expected_aggregated_findings_result: ::std::option::Option<crate::types::AutomatedReasoningCheckResult>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) confidence_threshold: ::std::option::Option<f64>,
}
impl AutomatedReasoningPolicyTestCaseBuilder {
    /// <p>The unique identifier of the test.</p>
    /// This field is required.
    pub fn test_case_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.test_case_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the test.</p>
    pub fn set_test_case_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.test_case_id = input;
        self
    }
    /// <p>The unique identifier of the test.</p>
    pub fn get_test_case_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.test_case_id
    }
    /// <p>The output content to be validated by the policy, typically representing a foundation model response.</p>
    /// This field is required.
    pub fn guard_content(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.guard_content = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The output content to be validated by the policy, typically representing a foundation model response.</p>
    pub fn set_guard_content(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.guard_content = input;
        self
    }
    /// <p>The output content to be validated by the policy, typically representing a foundation model response.</p>
    pub fn get_guard_content(&self) -> &::std::option::Option<::std::string::String> {
        &self.guard_content
    }
    /// <p>The input query or prompt that generated the content. This provides context for the validation.</p>
    pub fn query_content(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.query_content = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The input query or prompt that generated the content. This provides context for the validation.</p>
    pub fn set_query_content(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.query_content = input;
        self
    }
    /// <p>The input query or prompt that generated the content. This provides context for the validation.</p>
    pub fn get_query_content(&self) -> &::std::option::Option<::std::string::String> {
        &self.query_content
    }
    /// <p>The expected result of the Automated Reasoning check for this test.</p>
    pub fn expected_aggregated_findings_result(mut self, input: crate::types::AutomatedReasoningCheckResult) -> Self {
        self.expected_aggregated_findings_result = ::std::option::Option::Some(input);
        self
    }
    /// <p>The expected result of the Automated Reasoning check for this test.</p>
    pub fn set_expected_aggregated_findings_result(mut self, input: ::std::option::Option<crate::types::AutomatedReasoningCheckResult>) -> Self {
        self.expected_aggregated_findings_result = input;
        self
    }
    /// <p>The expected result of the Automated Reasoning check for this test.</p>
    pub fn get_expected_aggregated_findings_result(&self) -> &::std::option::Option<crate::types::AutomatedReasoningCheckResult> {
        &self.expected_aggregated_findings_result
    }
    /// <p>The timestamp when the test was created.</p>
    /// This field is required.
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the test was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The timestamp when the test was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The timestamp when the test was last updated.</p>
    /// This field is required.
    pub fn updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the test was last updated.</p>
    pub fn set_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>The timestamp when the test was last updated.</p>
    pub fn get_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_at
    }
    /// <p>The minimum confidence level for logic validation. Content meeting this threshold is considered high-confidence and can be validated.</p>
    pub fn confidence_threshold(mut self, input: f64) -> Self {
        self.confidence_threshold = ::std::option::Option::Some(input);
        self
    }
    /// <p>The minimum confidence level for logic validation. Content meeting this threshold is considered high-confidence and can be validated.</p>
    pub fn set_confidence_threshold(mut self, input: ::std::option::Option<f64>) -> Self {
        self.confidence_threshold = input;
        self
    }
    /// <p>The minimum confidence level for logic validation. Content meeting this threshold is considered high-confidence and can be validated.</p>
    pub fn get_confidence_threshold(&self) -> &::std::option::Option<f64> {
        &self.confidence_threshold
    }
    /// Consumes the builder and constructs a [`AutomatedReasoningPolicyTestCase`](crate::types::AutomatedReasoningPolicyTestCase).
    /// This method will fail if any of the following fields are not set:
    /// - [`test_case_id`](crate::types::builders::AutomatedReasoningPolicyTestCaseBuilder::test_case_id)
    /// - [`guard_content`](crate::types::builders::AutomatedReasoningPolicyTestCaseBuilder::guard_content)
    /// - [`created_at`](crate::types::builders::AutomatedReasoningPolicyTestCaseBuilder::created_at)
    /// - [`updated_at`](crate::types::builders::AutomatedReasoningPolicyTestCaseBuilder::updated_at)
    pub fn build(self) -> ::std::result::Result<crate::types::AutomatedReasoningPolicyTestCase, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AutomatedReasoningPolicyTestCase {
            test_case_id: self.test_case_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "test_case_id",
                    "test_case_id was not specified but it is required when building AutomatedReasoningPolicyTestCase",
                )
            })?,
            guard_content: self.guard_content.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "guard_content",
                    "guard_content was not specified but it is required when building AutomatedReasoningPolicyTestCase",
                )
            })?,
            query_content: self.query_content,
            expected_aggregated_findings_result: self.expected_aggregated_findings_result,
            created_at: self.created_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_at",
                    "created_at was not specified but it is required when building AutomatedReasoningPolicyTestCase",
                )
            })?,
            updated_at: self.updated_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "updated_at",
                    "updated_at was not specified but it is required when building AutomatedReasoningPolicyTestCase",
                )
            })?,
            confidence_threshold: self.confidence_threshold,
        })
    }
}
impl ::std::fmt::Debug for AutomatedReasoningPolicyTestCaseBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AutomatedReasoningPolicyTestCaseBuilder");
        formatter.field("test_case_id", &self.test_case_id);
        formatter.field("guard_content", &"*** Sensitive Data Redacted ***");
        formatter.field("query_content", &"*** Sensitive Data Redacted ***");
        formatter.field("expected_aggregated_findings_result", &self.expected_aggregated_findings_result);
        formatter.field("created_at", &self.created_at);
        formatter.field("updated_at", &self.updated_at);
        formatter.field("confidence_threshold", &self.confidence_threshold);
        formatter.finish()
    }
}
