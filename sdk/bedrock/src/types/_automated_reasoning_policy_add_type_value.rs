// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a single value that can be added to an existing custom type in the policy.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct AutomatedReasoningPolicyAddTypeValue {
    /// <p>The identifier or name of the new value to add to the type.</p>
    pub value: ::std::string::String,
    /// <p>A description of what this new type value represents and when it should be used.</p>
    pub description: ::std::option::Option<::std::string::String>,
}
impl AutomatedReasoningPolicyAddTypeValue {
    /// <p>The identifier or name of the new value to add to the type.</p>
    pub fn value(&self) -> &str {
        use std::ops::Deref;
        self.value.deref()
    }
    /// <p>A description of what this new type value represents and when it should be used.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
}
impl ::std::fmt::Debug for AutomatedReasoningPolicyAddTypeValue {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AutomatedReasoningPolicyAddTypeValue");
        formatter.field("value", &self.value);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl AutomatedReasoningPolicyAddTypeValue {
    /// Creates a new builder-style object to manufacture [`AutomatedReasoningPolicyAddTypeValue`](crate::types::AutomatedReasoningPolicyAddTypeValue).
    pub fn builder() -> crate::types::builders::AutomatedReasoningPolicyAddTypeValueBuilder {
        crate::types::builders::AutomatedReasoningPolicyAddTypeValueBuilder::default()
    }
}

/// A builder for [`AutomatedReasoningPolicyAddTypeValue`](crate::types::AutomatedReasoningPolicyAddTypeValue).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct AutomatedReasoningPolicyAddTypeValueBuilder {
    pub(crate) value: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
}
impl AutomatedReasoningPolicyAddTypeValueBuilder {
    /// <p>The identifier or name of the new value to add to the type.</p>
    /// This field is required.
    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier or name of the new value to add to the type.</p>
    pub fn set_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// <p>The identifier or name of the new value to add to the type.</p>
    pub fn get_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.value
    }
    /// <p>A description of what this new type value represents and when it should be used.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of what this new type value represents and when it should be used.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description of what this new type value represents and when it should be used.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Consumes the builder and constructs a [`AutomatedReasoningPolicyAddTypeValue`](crate::types::AutomatedReasoningPolicyAddTypeValue).
    /// This method will fail if any of the following fields are not set:
    /// - [`value`](crate::types::builders::AutomatedReasoningPolicyAddTypeValueBuilder::value)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::AutomatedReasoningPolicyAddTypeValue, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AutomatedReasoningPolicyAddTypeValue {
            value: self.value.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "value",
                    "value was not specified but it is required when building AutomatedReasoningPolicyAddTypeValue",
                )
            })?,
            description: self.description,
        })
    }
}
impl ::std::fmt::Debug for AutomatedReasoningPolicyAddTypeValueBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AutomatedReasoningPolicyAddTypeValueBuilder");
        formatter.field("value", &self.value);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
