// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines the content and configuration for different types of policy build workflows.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum AutomatedReasoningPolicyWorkflowTypeContent {
    /// <p>The list of documents to be processed in a document ingestion workflow.</p>
    Documents(::std::vec::Vec<crate::types::AutomatedReasoningPolicyBuildWorkflowDocument>),
    /// <p>The assets and instructions needed for a policy repair workflow, including repair annotations and guidance.</p>
    PolicyRepairAssets(crate::types::AutomatedReasoningPolicyBuildWorkflowRepairContent),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl AutomatedReasoningPolicyWorkflowTypeContent {
    /// Tries to convert the enum instance into [`Documents`](crate::types::AutomatedReasoningPolicyWorkflowTypeContent::Documents), extracting the inner [`Vec`](::std::vec::Vec).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_documents(&self) -> ::std::result::Result<&::std::vec::Vec<crate::types::AutomatedReasoningPolicyBuildWorkflowDocument>, &Self> {
        if let AutomatedReasoningPolicyWorkflowTypeContent::Documents(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Documents`](crate::types::AutomatedReasoningPolicyWorkflowTypeContent::Documents).
    pub fn is_documents(&self) -> bool {
        self.as_documents().is_ok()
    }
    /// Tries to convert the enum instance into [`PolicyRepairAssets`](crate::types::AutomatedReasoningPolicyWorkflowTypeContent::PolicyRepairAssets), extracting the inner [`AutomatedReasoningPolicyBuildWorkflowRepairContent`](crate::types::AutomatedReasoningPolicyBuildWorkflowRepairContent).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_policy_repair_assets(&self) -> ::std::result::Result<&crate::types::AutomatedReasoningPolicyBuildWorkflowRepairContent, &Self> {
        if let AutomatedReasoningPolicyWorkflowTypeContent::PolicyRepairAssets(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`PolicyRepairAssets`](crate::types::AutomatedReasoningPolicyWorkflowTypeContent::PolicyRepairAssets).
    pub fn is_policy_repair_assets(&self) -> bool {
        self.as_policy_repair_assets().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
