// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a set of rules that operate on completely separate variables, indicating they address different concerns or domains within the policy.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AutomatedReasoningPolicyDisjointRuleSet {
    /// <p>The set of variables that are used by the rules in this disjoint set.</p>
    pub variables: ::std::vec::Vec<::std::string::String>,
    /// <p>The list of rules that form this disjoint set, all operating on the same set of variables.</p>
    pub rules: ::std::vec::Vec<::std::string::String>,
}
impl AutomatedReasoningPolicyDisjointRuleSet {
    /// <p>The set of variables that are used by the rules in this disjoint set.</p>
    pub fn variables(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.variables.deref()
    }
    /// <p>The list of rules that form this disjoint set, all operating on the same set of variables.</p>
    pub fn rules(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.rules.deref()
    }
}
impl AutomatedReasoningPolicyDisjointRuleSet {
    /// Creates a new builder-style object to manufacture [`AutomatedReasoningPolicyDisjointRuleSet`](crate::types::AutomatedReasoningPolicyDisjointRuleSet).
    pub fn builder() -> crate::types::builders::AutomatedReasoningPolicyDisjointRuleSetBuilder {
        crate::types::builders::AutomatedReasoningPolicyDisjointRuleSetBuilder::default()
    }
}

/// A builder for [`AutomatedReasoningPolicyDisjointRuleSet`](crate::types::AutomatedReasoningPolicyDisjointRuleSet).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AutomatedReasoningPolicyDisjointRuleSetBuilder {
    pub(crate) variables: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) rules: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl AutomatedReasoningPolicyDisjointRuleSetBuilder {
    /// Appends an item to `variables`.
    ///
    /// To override the contents of this collection use [`set_variables`](Self::set_variables).
    ///
    /// <p>The set of variables that are used by the rules in this disjoint set.</p>
    pub fn variables(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.variables.unwrap_or_default();
        v.push(input.into());
        self.variables = ::std::option::Option::Some(v);
        self
    }
    /// <p>The set of variables that are used by the rules in this disjoint set.</p>
    pub fn set_variables(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.variables = input;
        self
    }
    /// <p>The set of variables that are used by the rules in this disjoint set.</p>
    pub fn get_variables(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.variables
    }
    /// Appends an item to `rules`.
    ///
    /// To override the contents of this collection use [`set_rules`](Self::set_rules).
    ///
    /// <p>The list of rules that form this disjoint set, all operating on the same set of variables.</p>
    pub fn rules(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.rules.unwrap_or_default();
        v.push(input.into());
        self.rules = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of rules that form this disjoint set, all operating on the same set of variables.</p>
    pub fn set_rules(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.rules = input;
        self
    }
    /// <p>The list of rules that form this disjoint set, all operating on the same set of variables.</p>
    pub fn get_rules(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.rules
    }
    /// Consumes the builder and constructs a [`AutomatedReasoningPolicyDisjointRuleSet`](crate::types::AutomatedReasoningPolicyDisjointRuleSet).
    /// This method will fail if any of the following fields are not set:
    /// - [`variables`](crate::types::builders::AutomatedReasoningPolicyDisjointRuleSetBuilder::variables)
    /// - [`rules`](crate::types::builders::AutomatedReasoningPolicyDisjointRuleSetBuilder::rules)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::AutomatedReasoningPolicyDisjointRuleSet, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AutomatedReasoningPolicyDisjointRuleSet {
            variables: self.variables.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "variables",
                    "variables was not specified but it is required when building AutomatedReasoningPolicyDisjointRuleSet",
                )
            })?,
            rules: self.rules.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "rules",
                    "rules was not specified but it is required when building AutomatedReasoningPolicyDisjointRuleSet",
                )
            })?,
        })
    }
}
