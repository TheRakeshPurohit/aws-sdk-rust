// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines the source content for a policy build workflow, which can include documents, repair instructions, or other input materials.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AutomatedReasoningPolicyBuildWorkflowSource {
    /// <p>An existing policy definition that serves as the starting point for the build workflow, typically used in policy repair or update scenarios.</p>
    pub policy_definition: ::std::option::Option<crate::types::AutomatedReasoningPolicyDefinition>,
    /// <p>The actual content to be processed in the build workflow, such as documents to analyze or repair instructions to apply.</p>
    pub workflow_content: ::std::option::Option<crate::types::AutomatedReasoningPolicyWorkflowTypeContent>,
}
impl AutomatedReasoningPolicyBuildWorkflowSource {
    /// <p>An existing policy definition that serves as the starting point for the build workflow, typically used in policy repair or update scenarios.</p>
    pub fn policy_definition(&self) -> ::std::option::Option<&crate::types::AutomatedReasoningPolicyDefinition> {
        self.policy_definition.as_ref()
    }
    /// <p>The actual content to be processed in the build workflow, such as documents to analyze or repair instructions to apply.</p>
    pub fn workflow_content(&self) -> ::std::option::Option<&crate::types::AutomatedReasoningPolicyWorkflowTypeContent> {
        self.workflow_content.as_ref()
    }
}
impl AutomatedReasoningPolicyBuildWorkflowSource {
    /// Creates a new builder-style object to manufacture [`AutomatedReasoningPolicyBuildWorkflowSource`](crate::types::AutomatedReasoningPolicyBuildWorkflowSource).
    pub fn builder() -> crate::types::builders::AutomatedReasoningPolicyBuildWorkflowSourceBuilder {
        crate::types::builders::AutomatedReasoningPolicyBuildWorkflowSourceBuilder::default()
    }
}

/// A builder for [`AutomatedReasoningPolicyBuildWorkflowSource`](crate::types::AutomatedReasoningPolicyBuildWorkflowSource).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AutomatedReasoningPolicyBuildWorkflowSourceBuilder {
    pub(crate) policy_definition: ::std::option::Option<crate::types::AutomatedReasoningPolicyDefinition>,
    pub(crate) workflow_content: ::std::option::Option<crate::types::AutomatedReasoningPolicyWorkflowTypeContent>,
}
impl AutomatedReasoningPolicyBuildWorkflowSourceBuilder {
    /// <p>An existing policy definition that serves as the starting point for the build workflow, typically used in policy repair or update scenarios.</p>
    pub fn policy_definition(mut self, input: crate::types::AutomatedReasoningPolicyDefinition) -> Self {
        self.policy_definition = ::std::option::Option::Some(input);
        self
    }
    /// <p>An existing policy definition that serves as the starting point for the build workflow, typically used in policy repair or update scenarios.</p>
    pub fn set_policy_definition(mut self, input: ::std::option::Option<crate::types::AutomatedReasoningPolicyDefinition>) -> Self {
        self.policy_definition = input;
        self
    }
    /// <p>An existing policy definition that serves as the starting point for the build workflow, typically used in policy repair or update scenarios.</p>
    pub fn get_policy_definition(&self) -> &::std::option::Option<crate::types::AutomatedReasoningPolicyDefinition> {
        &self.policy_definition
    }
    /// <p>The actual content to be processed in the build workflow, such as documents to analyze or repair instructions to apply.</p>
    pub fn workflow_content(mut self, input: crate::types::AutomatedReasoningPolicyWorkflowTypeContent) -> Self {
        self.workflow_content = ::std::option::Option::Some(input);
        self
    }
    /// <p>The actual content to be processed in the build workflow, such as documents to analyze or repair instructions to apply.</p>
    pub fn set_workflow_content(mut self, input: ::std::option::Option<crate::types::AutomatedReasoningPolicyWorkflowTypeContent>) -> Self {
        self.workflow_content = input;
        self
    }
    /// <p>The actual content to be processed in the build workflow, such as documents to analyze or repair instructions to apply.</p>
    pub fn get_workflow_content(&self) -> &::std::option::Option<crate::types::AutomatedReasoningPolicyWorkflowTypeContent> {
        &self.workflow_content
    }
    /// Consumes the builder and constructs a [`AutomatedReasoningPolicyBuildWorkflowSource`](crate::types::AutomatedReasoningPolicyBuildWorkflowSource).
    pub fn build(self) -> crate::types::AutomatedReasoningPolicyBuildWorkflowSource {
        crate::types::AutomatedReasoningPolicyBuildWorkflowSource {
            policy_definition: self.policy_definition,
            workflow_content: self.workflow_content,
        }
    }
}
