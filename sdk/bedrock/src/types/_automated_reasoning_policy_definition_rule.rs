// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a formal logic rule in an Automated Reasoning policy. For example, rules can be expressed as if-then statements that define logical constraints.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct AutomatedReasoningPolicyDefinitionRule {
    /// <p>The unique identifier of the rule within the policy.</p>
    pub id: ::std::string::String,
    /// <p>The formal logic expression of the rule.</p>
    pub expression: ::std::string::String,
    /// <p>The human-readable form of the rule expression, often in natural language or simplified notation.</p>
    pub alternate_expression: ::std::option::Option<::std::string::String>,
}
impl AutomatedReasoningPolicyDefinitionRule {
    /// <p>The unique identifier of the rule within the policy.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>The formal logic expression of the rule.</p>
    pub fn expression(&self) -> &str {
        use std::ops::Deref;
        self.expression.deref()
    }
    /// <p>The human-readable form of the rule expression, often in natural language or simplified notation.</p>
    pub fn alternate_expression(&self) -> ::std::option::Option<&str> {
        self.alternate_expression.as_deref()
    }
}
impl ::std::fmt::Debug for AutomatedReasoningPolicyDefinitionRule {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AutomatedReasoningPolicyDefinitionRule");
        formatter.field("id", &self.id);
        formatter.field("expression", &"*** Sensitive Data Redacted ***");
        formatter.field("alternate_expression", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl AutomatedReasoningPolicyDefinitionRule {
    /// Creates a new builder-style object to manufacture [`AutomatedReasoningPolicyDefinitionRule`](crate::types::AutomatedReasoningPolicyDefinitionRule).
    pub fn builder() -> crate::types::builders::AutomatedReasoningPolicyDefinitionRuleBuilder {
        crate::types::builders::AutomatedReasoningPolicyDefinitionRuleBuilder::default()
    }
}

/// A builder for [`AutomatedReasoningPolicyDefinitionRule`](crate::types::AutomatedReasoningPolicyDefinitionRule).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct AutomatedReasoningPolicyDefinitionRuleBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) expression: ::std::option::Option<::std::string::String>,
    pub(crate) alternate_expression: ::std::option::Option<::std::string::String>,
}
impl AutomatedReasoningPolicyDefinitionRuleBuilder {
    /// <p>The unique identifier of the rule within the policy.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the rule within the policy.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The unique identifier of the rule within the policy.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The formal logic expression of the rule.</p>
    /// This field is required.
    pub fn expression(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.expression = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The formal logic expression of the rule.</p>
    pub fn set_expression(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.expression = input;
        self
    }
    /// <p>The formal logic expression of the rule.</p>
    pub fn get_expression(&self) -> &::std::option::Option<::std::string::String> {
        &self.expression
    }
    /// <p>The human-readable form of the rule expression, often in natural language or simplified notation.</p>
    pub fn alternate_expression(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.alternate_expression = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The human-readable form of the rule expression, often in natural language or simplified notation.</p>
    pub fn set_alternate_expression(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.alternate_expression = input;
        self
    }
    /// <p>The human-readable form of the rule expression, often in natural language or simplified notation.</p>
    pub fn get_alternate_expression(&self) -> &::std::option::Option<::std::string::String> {
        &self.alternate_expression
    }
    /// Consumes the builder and constructs a [`AutomatedReasoningPolicyDefinitionRule`](crate::types::AutomatedReasoningPolicyDefinitionRule).
    /// This method will fail if any of the following fields are not set:
    /// - [`id`](crate::types::builders::AutomatedReasoningPolicyDefinitionRuleBuilder::id)
    /// - [`expression`](crate::types::builders::AutomatedReasoningPolicyDefinitionRuleBuilder::expression)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::AutomatedReasoningPolicyDefinitionRule, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AutomatedReasoningPolicyDefinitionRule {
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building AutomatedReasoningPolicyDefinitionRule",
                )
            })?,
            expression: self.expression.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "expression",
                    "expression was not specified but it is required when building AutomatedReasoningPolicyDefinitionRule",
                )
            })?,
            alternate_expression: self.alternate_expression,
        })
    }
}
impl ::std::fmt::Debug for AutomatedReasoningPolicyDefinitionRuleBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AutomatedReasoningPolicyDefinitionRuleBuilder");
        formatter.field("id", &self.id);
        formatter.field("expression", &"*** Sensitive Data Redacted ***");
        formatter.field("alternate_expression", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
