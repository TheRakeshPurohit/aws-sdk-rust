// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a source document used in the policy build workflow, containing the content and metadata needed for policy generation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct AutomatedReasoningPolicyBuildWorkflowDocument {
    /// <p>The actual content of the source document that will be analyzed to extract policy rules and concepts.</p>
    pub document: ::aws_smithy_types::Blob,
    /// <p>The MIME type of the document content (e.g., text/plain, application/pdf, text/markdown).</p>
    pub document_content_type: crate::types::AutomatedReasoningPolicyBuildDocumentContentType,
    /// <p>A descriptive name for the document that helps identify its purpose and content.</p>
    pub document_name: ::std::string::String,
    /// <p>A detailed description of the document's content and how it should be used in the policy generation process.</p>
    pub document_description: ::std::option::Option<::std::string::String>,
}
impl AutomatedReasoningPolicyBuildWorkflowDocument {
    /// <p>The actual content of the source document that will be analyzed to extract policy rules and concepts.</p>
    pub fn document(&self) -> &::aws_smithy_types::Blob {
        &self.document
    }
    /// <p>The MIME type of the document content (e.g., text/plain, application/pdf, text/markdown).</p>
    pub fn document_content_type(&self) -> &crate::types::AutomatedReasoningPolicyBuildDocumentContentType {
        &self.document_content_type
    }
    /// <p>A descriptive name for the document that helps identify its purpose and content.</p>
    pub fn document_name(&self) -> &str {
        use std::ops::Deref;
        self.document_name.deref()
    }
    /// <p>A detailed description of the document's content and how it should be used in the policy generation process.</p>
    pub fn document_description(&self) -> ::std::option::Option<&str> {
        self.document_description.as_deref()
    }
}
impl ::std::fmt::Debug for AutomatedReasoningPolicyBuildWorkflowDocument {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AutomatedReasoningPolicyBuildWorkflowDocument");
        formatter.field("document", &self.document);
        formatter.field("document_content_type", &self.document_content_type);
        formatter.field("document_name", &"*** Sensitive Data Redacted ***");
        formatter.field("document_description", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl AutomatedReasoningPolicyBuildWorkflowDocument {
    /// Creates a new builder-style object to manufacture [`AutomatedReasoningPolicyBuildWorkflowDocument`](crate::types::AutomatedReasoningPolicyBuildWorkflowDocument).
    pub fn builder() -> crate::types::builders::AutomatedReasoningPolicyBuildWorkflowDocumentBuilder {
        crate::types::builders::AutomatedReasoningPolicyBuildWorkflowDocumentBuilder::default()
    }
}

/// A builder for [`AutomatedReasoningPolicyBuildWorkflowDocument`](crate::types::AutomatedReasoningPolicyBuildWorkflowDocument).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct AutomatedReasoningPolicyBuildWorkflowDocumentBuilder {
    pub(crate) document: ::std::option::Option<::aws_smithy_types::Blob>,
    pub(crate) document_content_type: ::std::option::Option<crate::types::AutomatedReasoningPolicyBuildDocumentContentType>,
    pub(crate) document_name: ::std::option::Option<::std::string::String>,
    pub(crate) document_description: ::std::option::Option<::std::string::String>,
}
impl AutomatedReasoningPolicyBuildWorkflowDocumentBuilder {
    /// <p>The actual content of the source document that will be analyzed to extract policy rules and concepts.</p>
    /// This field is required.
    pub fn document(mut self, input: ::aws_smithy_types::Blob) -> Self {
        self.document = ::std::option::Option::Some(input);
        self
    }
    /// <p>The actual content of the source document that will be analyzed to extract policy rules and concepts.</p>
    pub fn set_document(mut self, input: ::std::option::Option<::aws_smithy_types::Blob>) -> Self {
        self.document = input;
        self
    }
    /// <p>The actual content of the source document that will be analyzed to extract policy rules and concepts.</p>
    pub fn get_document(&self) -> &::std::option::Option<::aws_smithy_types::Blob> {
        &self.document
    }
    /// <p>The MIME type of the document content (e.g., text/plain, application/pdf, text/markdown).</p>
    /// This field is required.
    pub fn document_content_type(mut self, input: crate::types::AutomatedReasoningPolicyBuildDocumentContentType) -> Self {
        self.document_content_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The MIME type of the document content (e.g., text/plain, application/pdf, text/markdown).</p>
    pub fn set_document_content_type(mut self, input: ::std::option::Option<crate::types::AutomatedReasoningPolicyBuildDocumentContentType>) -> Self {
        self.document_content_type = input;
        self
    }
    /// <p>The MIME type of the document content (e.g., text/plain, application/pdf, text/markdown).</p>
    pub fn get_document_content_type(&self) -> &::std::option::Option<crate::types::AutomatedReasoningPolicyBuildDocumentContentType> {
        &self.document_content_type
    }
    /// <p>A descriptive name for the document that helps identify its purpose and content.</p>
    /// This field is required.
    pub fn document_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.document_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A descriptive name for the document that helps identify its purpose and content.</p>
    pub fn set_document_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.document_name = input;
        self
    }
    /// <p>A descriptive name for the document that helps identify its purpose and content.</p>
    pub fn get_document_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.document_name
    }
    /// <p>A detailed description of the document's content and how it should be used in the policy generation process.</p>
    pub fn document_description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.document_description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A detailed description of the document's content and how it should be used in the policy generation process.</p>
    pub fn set_document_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.document_description = input;
        self
    }
    /// <p>A detailed description of the document's content and how it should be used in the policy generation process.</p>
    pub fn get_document_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.document_description
    }
    /// Consumes the builder and constructs a [`AutomatedReasoningPolicyBuildWorkflowDocument`](crate::types::AutomatedReasoningPolicyBuildWorkflowDocument).
    /// This method will fail if any of the following fields are not set:
    /// - [`document`](crate::types::builders::AutomatedReasoningPolicyBuildWorkflowDocumentBuilder::document)
    /// - [`document_content_type`](crate::types::builders::AutomatedReasoningPolicyBuildWorkflowDocumentBuilder::document_content_type)
    /// - [`document_name`](crate::types::builders::AutomatedReasoningPolicyBuildWorkflowDocumentBuilder::document_name)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::AutomatedReasoningPolicyBuildWorkflowDocument, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AutomatedReasoningPolicyBuildWorkflowDocument {
            document: self.document.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "document",
                    "document was not specified but it is required when building AutomatedReasoningPolicyBuildWorkflowDocument",
                )
            })?,
            document_content_type: self.document_content_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "document_content_type",
                    "document_content_type was not specified but it is required when building AutomatedReasoningPolicyBuildWorkflowDocument",
                )
            })?,
            document_name: self.document_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "document_name",
                    "document_name was not specified but it is required when building AutomatedReasoningPolicyBuildWorkflowDocument",
                )
            })?,
            document_description: self.document_description,
        })
    }
}
impl ::std::fmt::Debug for AutomatedReasoningPolicyBuildWorkflowDocumentBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AutomatedReasoningPolicyBuildWorkflowDocumentBuilder");
        formatter.field("document", &self.document);
        formatter.field("document_content_type", &self.document_content_type);
        formatter.field("document_name", &"*** Sensitive Data Redacted ***");
        formatter.field("document_description", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
