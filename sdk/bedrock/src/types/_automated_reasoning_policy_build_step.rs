// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a single step in the policy build process, containing context about what was being processed and any messages or results.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AutomatedReasoningPolicyBuildStep {
    /// <p>Contextual information about what was being processed during this build step, such as the type of operation or the source material being analyzed.</p>
    pub context: ::std::option::Option<crate::types::AutomatedReasoningPolicyBuildStepContext>,
    /// <p>Reference to the previous element or step in the build process, helping to trace the sequence of operations.</p>
    pub prior_element: ::std::option::Option<crate::types::AutomatedReasoningPolicyDefinitionElement>,
    /// <p>A list of messages generated during this build step, including informational messages, warnings, and error details.</p>
    pub messages: ::std::vec::Vec<crate::types::AutomatedReasoningPolicyBuildStepMessage>,
}
impl AutomatedReasoningPolicyBuildStep {
    /// <p>Contextual information about what was being processed during this build step, such as the type of operation or the source material being analyzed.</p>
    pub fn context(&self) -> ::std::option::Option<&crate::types::AutomatedReasoningPolicyBuildStepContext> {
        self.context.as_ref()
    }
    /// <p>Reference to the previous element or step in the build process, helping to trace the sequence of operations.</p>
    pub fn prior_element(&self) -> ::std::option::Option<&crate::types::AutomatedReasoningPolicyDefinitionElement> {
        self.prior_element.as_ref()
    }
    /// <p>A list of messages generated during this build step, including informational messages, warnings, and error details.</p>
    pub fn messages(&self) -> &[crate::types::AutomatedReasoningPolicyBuildStepMessage] {
        use std::ops::Deref;
        self.messages.deref()
    }
}
impl AutomatedReasoningPolicyBuildStep {
    /// Creates a new builder-style object to manufacture [`AutomatedReasoningPolicyBuildStep`](crate::types::AutomatedReasoningPolicyBuildStep).
    pub fn builder() -> crate::types::builders::AutomatedReasoningPolicyBuildStepBuilder {
        crate::types::builders::AutomatedReasoningPolicyBuildStepBuilder::default()
    }
}

/// A builder for [`AutomatedReasoningPolicyBuildStep`](crate::types::AutomatedReasoningPolicyBuildStep).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AutomatedReasoningPolicyBuildStepBuilder {
    pub(crate) context: ::std::option::Option<crate::types::AutomatedReasoningPolicyBuildStepContext>,
    pub(crate) prior_element: ::std::option::Option<crate::types::AutomatedReasoningPolicyDefinitionElement>,
    pub(crate) messages: ::std::option::Option<::std::vec::Vec<crate::types::AutomatedReasoningPolicyBuildStepMessage>>,
}
impl AutomatedReasoningPolicyBuildStepBuilder {
    /// <p>Contextual information about what was being processed during this build step, such as the type of operation or the source material being analyzed.</p>
    /// This field is required.
    pub fn context(mut self, input: crate::types::AutomatedReasoningPolicyBuildStepContext) -> Self {
        self.context = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contextual information about what was being processed during this build step, such as the type of operation or the source material being analyzed.</p>
    pub fn set_context(mut self, input: ::std::option::Option<crate::types::AutomatedReasoningPolicyBuildStepContext>) -> Self {
        self.context = input;
        self
    }
    /// <p>Contextual information about what was being processed during this build step, such as the type of operation or the source material being analyzed.</p>
    pub fn get_context(&self) -> &::std::option::Option<crate::types::AutomatedReasoningPolicyBuildStepContext> {
        &self.context
    }
    /// <p>Reference to the previous element or step in the build process, helping to trace the sequence of operations.</p>
    pub fn prior_element(mut self, input: crate::types::AutomatedReasoningPolicyDefinitionElement) -> Self {
        self.prior_element = ::std::option::Option::Some(input);
        self
    }
    /// <p>Reference to the previous element or step in the build process, helping to trace the sequence of operations.</p>
    pub fn set_prior_element(mut self, input: ::std::option::Option<crate::types::AutomatedReasoningPolicyDefinitionElement>) -> Self {
        self.prior_element = input;
        self
    }
    /// <p>Reference to the previous element or step in the build process, helping to trace the sequence of operations.</p>
    pub fn get_prior_element(&self) -> &::std::option::Option<crate::types::AutomatedReasoningPolicyDefinitionElement> {
        &self.prior_element
    }
    /// Appends an item to `messages`.
    ///
    /// To override the contents of this collection use [`set_messages`](Self::set_messages).
    ///
    /// <p>A list of messages generated during this build step, including informational messages, warnings, and error details.</p>
    pub fn messages(mut self, input: crate::types::AutomatedReasoningPolicyBuildStepMessage) -> Self {
        let mut v = self.messages.unwrap_or_default();
        v.push(input);
        self.messages = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of messages generated during this build step, including informational messages, warnings, and error details.</p>
    pub fn set_messages(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AutomatedReasoningPolicyBuildStepMessage>>) -> Self {
        self.messages = input;
        self
    }
    /// <p>A list of messages generated during this build step, including informational messages, warnings, and error details.</p>
    pub fn get_messages(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AutomatedReasoningPolicyBuildStepMessage>> {
        &self.messages
    }
    /// Consumes the builder and constructs a [`AutomatedReasoningPolicyBuildStep`](crate::types::AutomatedReasoningPolicyBuildStep).
    /// This method will fail if any of the following fields are not set:
    /// - [`messages`](crate::types::builders::AutomatedReasoningPolicyBuildStepBuilder::messages)
    pub fn build(self) -> ::std::result::Result<crate::types::AutomatedReasoningPolicyBuildStep, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AutomatedReasoningPolicyBuildStep {
            context: self.context,
            prior_element: self.prior_element,
            messages: self.messages.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "messages",
                    "messages was not specified but it is required when building AutomatedReasoningPolicyBuildStep",
                )
            })?,
        })
    }
}
