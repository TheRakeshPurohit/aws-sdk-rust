// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An annotation for modifying an existing custom type in an Automated Reasoning policy.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct AutomatedReasoningPolicyUpdateTypeAnnotation {
    /// <p>The current name of the custom type to update.</p>
    pub name: ::std::string::String,
    /// <p>The new name for the custom type, if you want to rename it. If not provided, the name remains unchanged.</p>
    pub new_name: ::std::option::Option<::std::string::String>,
    /// <p>The new description for the custom type, replacing the previous description.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The updated list of values for the custom type, which can include additions, modifications, or removals.</p>
    pub values: ::std::vec::Vec<crate::types::AutomatedReasoningPolicyTypeValueAnnotation>,
}
impl AutomatedReasoningPolicyUpdateTypeAnnotation {
    /// <p>The current name of the custom type to update.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The new name for the custom type, if you want to rename it. If not provided, the name remains unchanged.</p>
    pub fn new_name(&self) -> ::std::option::Option<&str> {
        self.new_name.as_deref()
    }
    /// <p>The new description for the custom type, replacing the previous description.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The updated list of values for the custom type, which can include additions, modifications, or removals.</p>
    pub fn values(&self) -> &[crate::types::AutomatedReasoningPolicyTypeValueAnnotation] {
        use std::ops::Deref;
        self.values.deref()
    }
}
impl ::std::fmt::Debug for AutomatedReasoningPolicyUpdateTypeAnnotation {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AutomatedReasoningPolicyUpdateTypeAnnotation");
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("new_name", &"*** Sensitive Data Redacted ***");
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("values", &self.values);
        formatter.finish()
    }
}
impl AutomatedReasoningPolicyUpdateTypeAnnotation {
    /// Creates a new builder-style object to manufacture [`AutomatedReasoningPolicyUpdateTypeAnnotation`](crate::types::AutomatedReasoningPolicyUpdateTypeAnnotation).
    pub fn builder() -> crate::types::builders::AutomatedReasoningPolicyUpdateTypeAnnotationBuilder {
        crate::types::builders::AutomatedReasoningPolicyUpdateTypeAnnotationBuilder::default()
    }
}

/// A builder for [`AutomatedReasoningPolicyUpdateTypeAnnotation`](crate::types::AutomatedReasoningPolicyUpdateTypeAnnotation).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct AutomatedReasoningPolicyUpdateTypeAnnotationBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) new_name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) values: ::std::option::Option<::std::vec::Vec<crate::types::AutomatedReasoningPolicyTypeValueAnnotation>>,
}
impl AutomatedReasoningPolicyUpdateTypeAnnotationBuilder {
    /// <p>The current name of the custom type to update.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The current name of the custom type to update.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The current name of the custom type to update.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The new name for the custom type, if you want to rename it. If not provided, the name remains unchanged.</p>
    pub fn new_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.new_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The new name for the custom type, if you want to rename it. If not provided, the name remains unchanged.</p>
    pub fn set_new_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.new_name = input;
        self
    }
    /// <p>The new name for the custom type, if you want to rename it. If not provided, the name remains unchanged.</p>
    pub fn get_new_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.new_name
    }
    /// <p>The new description for the custom type, replacing the previous description.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The new description for the custom type, replacing the previous description.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The new description for the custom type, replacing the previous description.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Appends an item to `values`.
    ///
    /// To override the contents of this collection use [`set_values`](Self::set_values).
    ///
    /// <p>The updated list of values for the custom type, which can include additions, modifications, or removals.</p>
    pub fn values(mut self, input: crate::types::AutomatedReasoningPolicyTypeValueAnnotation) -> Self {
        let mut v = self.values.unwrap_or_default();
        v.push(input);
        self.values = ::std::option::Option::Some(v);
        self
    }
    /// <p>The updated list of values for the custom type, which can include additions, modifications, or removals.</p>
    pub fn set_values(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AutomatedReasoningPolicyTypeValueAnnotation>>) -> Self {
        self.values = input;
        self
    }
    /// <p>The updated list of values for the custom type, which can include additions, modifications, or removals.</p>
    pub fn get_values(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AutomatedReasoningPolicyTypeValueAnnotation>> {
        &self.values
    }
    /// Consumes the builder and constructs a [`AutomatedReasoningPolicyUpdateTypeAnnotation`](crate::types::AutomatedReasoningPolicyUpdateTypeAnnotation).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::AutomatedReasoningPolicyUpdateTypeAnnotationBuilder::name)
    /// - [`values`](crate::types::builders::AutomatedReasoningPolicyUpdateTypeAnnotationBuilder::values)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::AutomatedReasoningPolicyUpdateTypeAnnotation, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AutomatedReasoningPolicyUpdateTypeAnnotation {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building AutomatedReasoningPolicyUpdateTypeAnnotation",
                )
            })?,
            new_name: self.new_name,
            description: self.description,
            values: self.values.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "values",
                    "values was not specified but it is required when building AutomatedReasoningPolicyUpdateTypeAnnotation",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for AutomatedReasoningPolicyUpdateTypeAnnotationBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AutomatedReasoningPolicyUpdateTypeAnnotationBuilder");
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("new_name", &"*** Sensitive Data Redacted ***");
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("values", &self.values);
        formatter.finish()
    }
}
