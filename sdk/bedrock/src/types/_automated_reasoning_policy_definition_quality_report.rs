// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides a comprehensive analysis of the quality and completeness of an Automated Reasoning policy definition, highlighting potential issues and optimization opportunities.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AutomatedReasoningPolicyDefinitionQualityReport {
    /// <p>The total number of custom types defined in the policy.</p>
    pub type_count: i32,
    /// <p>The total number of variables defined in the policy.</p>
    pub variable_count: i32,
    /// <p>The total number of rules defined in the policy.</p>
    pub rule_count: i32,
    /// <p>A list of custom types that are defined but not referenced by any variables or rules, suggesting they may be unnecessary.</p>
    pub unused_types: ::std::vec::Vec<::std::string::String>,
    /// <p>A list of type values that are defined but never used in any rules, indicating potential cleanup opportunities.</p>
    pub unused_type_values: ::std::vec::Vec<crate::types::AutomatedReasoningPolicyDefinitionTypeValuePair>,
    /// <p>A list of variables that are defined but not referenced by any rules, suggesting they may be unnecessary.</p>
    pub unused_variables: ::std::vec::Vec<::std::string::String>,
    /// <p>A list of rules that may conflict with each other, potentially leading to inconsistent policy behavior.</p>
    pub conflicting_rules: ::std::vec::Vec<::std::string::String>,
    /// <p>Groups of rules that operate on completely separate sets of variables, indicating the policy may be addressing multiple unrelated concerns.</p>
    pub disjoint_rule_sets: ::std::vec::Vec<crate::types::AutomatedReasoningPolicyDisjointRuleSet>,
}
impl AutomatedReasoningPolicyDefinitionQualityReport {
    /// <p>The total number of custom types defined in the policy.</p>
    pub fn type_count(&self) -> i32 {
        self.type_count
    }
    /// <p>The total number of variables defined in the policy.</p>
    pub fn variable_count(&self) -> i32 {
        self.variable_count
    }
    /// <p>The total number of rules defined in the policy.</p>
    pub fn rule_count(&self) -> i32 {
        self.rule_count
    }
    /// <p>A list of custom types that are defined but not referenced by any variables or rules, suggesting they may be unnecessary.</p>
    pub fn unused_types(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.unused_types.deref()
    }
    /// <p>A list of type values that are defined but never used in any rules, indicating potential cleanup opportunities.</p>
    pub fn unused_type_values(&self) -> &[crate::types::AutomatedReasoningPolicyDefinitionTypeValuePair] {
        use std::ops::Deref;
        self.unused_type_values.deref()
    }
    /// <p>A list of variables that are defined but not referenced by any rules, suggesting they may be unnecessary.</p>
    pub fn unused_variables(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.unused_variables.deref()
    }
    /// <p>A list of rules that may conflict with each other, potentially leading to inconsistent policy behavior.</p>
    pub fn conflicting_rules(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.conflicting_rules.deref()
    }
    /// <p>Groups of rules that operate on completely separate sets of variables, indicating the policy may be addressing multiple unrelated concerns.</p>
    pub fn disjoint_rule_sets(&self) -> &[crate::types::AutomatedReasoningPolicyDisjointRuleSet] {
        use std::ops::Deref;
        self.disjoint_rule_sets.deref()
    }
}
impl AutomatedReasoningPolicyDefinitionQualityReport {
    /// Creates a new builder-style object to manufacture [`AutomatedReasoningPolicyDefinitionQualityReport`](crate::types::AutomatedReasoningPolicyDefinitionQualityReport).
    pub fn builder() -> crate::types::builders::AutomatedReasoningPolicyDefinitionQualityReportBuilder {
        crate::types::builders::AutomatedReasoningPolicyDefinitionQualityReportBuilder::default()
    }
}

/// A builder for [`AutomatedReasoningPolicyDefinitionQualityReport`](crate::types::AutomatedReasoningPolicyDefinitionQualityReport).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AutomatedReasoningPolicyDefinitionQualityReportBuilder {
    pub(crate) type_count: ::std::option::Option<i32>,
    pub(crate) variable_count: ::std::option::Option<i32>,
    pub(crate) rule_count: ::std::option::Option<i32>,
    pub(crate) unused_types: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) unused_type_values: ::std::option::Option<::std::vec::Vec<crate::types::AutomatedReasoningPolicyDefinitionTypeValuePair>>,
    pub(crate) unused_variables: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) conflicting_rules: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) disjoint_rule_sets: ::std::option::Option<::std::vec::Vec<crate::types::AutomatedReasoningPolicyDisjointRuleSet>>,
}
impl AutomatedReasoningPolicyDefinitionQualityReportBuilder {
    /// <p>The total number of custom types defined in the policy.</p>
    /// This field is required.
    pub fn type_count(mut self, input: i32) -> Self {
        self.type_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total number of custom types defined in the policy.</p>
    pub fn set_type_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.type_count = input;
        self
    }
    /// <p>The total number of custom types defined in the policy.</p>
    pub fn get_type_count(&self) -> &::std::option::Option<i32> {
        &self.type_count
    }
    /// <p>The total number of variables defined in the policy.</p>
    /// This field is required.
    pub fn variable_count(mut self, input: i32) -> Self {
        self.variable_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total number of variables defined in the policy.</p>
    pub fn set_variable_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.variable_count = input;
        self
    }
    /// <p>The total number of variables defined in the policy.</p>
    pub fn get_variable_count(&self) -> &::std::option::Option<i32> {
        &self.variable_count
    }
    /// <p>The total number of rules defined in the policy.</p>
    /// This field is required.
    pub fn rule_count(mut self, input: i32) -> Self {
        self.rule_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total number of rules defined in the policy.</p>
    pub fn set_rule_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.rule_count = input;
        self
    }
    /// <p>The total number of rules defined in the policy.</p>
    pub fn get_rule_count(&self) -> &::std::option::Option<i32> {
        &self.rule_count
    }
    /// Appends an item to `unused_types`.
    ///
    /// To override the contents of this collection use [`set_unused_types`](Self::set_unused_types).
    ///
    /// <p>A list of custom types that are defined but not referenced by any variables or rules, suggesting they may be unnecessary.</p>
    pub fn unused_types(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.unused_types.unwrap_or_default();
        v.push(input.into());
        self.unused_types = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of custom types that are defined but not referenced by any variables or rules, suggesting they may be unnecessary.</p>
    pub fn set_unused_types(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.unused_types = input;
        self
    }
    /// <p>A list of custom types that are defined but not referenced by any variables or rules, suggesting they may be unnecessary.</p>
    pub fn get_unused_types(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.unused_types
    }
    /// Appends an item to `unused_type_values`.
    ///
    /// To override the contents of this collection use [`set_unused_type_values`](Self::set_unused_type_values).
    ///
    /// <p>A list of type values that are defined but never used in any rules, indicating potential cleanup opportunities.</p>
    pub fn unused_type_values(mut self, input: crate::types::AutomatedReasoningPolicyDefinitionTypeValuePair) -> Self {
        let mut v = self.unused_type_values.unwrap_or_default();
        v.push(input);
        self.unused_type_values = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of type values that are defined but never used in any rules, indicating potential cleanup opportunities.</p>
    pub fn set_unused_type_values(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::AutomatedReasoningPolicyDefinitionTypeValuePair>>,
    ) -> Self {
        self.unused_type_values = input;
        self
    }
    /// <p>A list of type values that are defined but never used in any rules, indicating potential cleanup opportunities.</p>
    pub fn get_unused_type_values(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AutomatedReasoningPolicyDefinitionTypeValuePair>> {
        &self.unused_type_values
    }
    /// Appends an item to `unused_variables`.
    ///
    /// To override the contents of this collection use [`set_unused_variables`](Self::set_unused_variables).
    ///
    /// <p>A list of variables that are defined but not referenced by any rules, suggesting they may be unnecessary.</p>
    pub fn unused_variables(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.unused_variables.unwrap_or_default();
        v.push(input.into());
        self.unused_variables = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of variables that are defined but not referenced by any rules, suggesting they may be unnecessary.</p>
    pub fn set_unused_variables(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.unused_variables = input;
        self
    }
    /// <p>A list of variables that are defined but not referenced by any rules, suggesting they may be unnecessary.</p>
    pub fn get_unused_variables(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.unused_variables
    }
    /// Appends an item to `conflicting_rules`.
    ///
    /// To override the contents of this collection use [`set_conflicting_rules`](Self::set_conflicting_rules).
    ///
    /// <p>A list of rules that may conflict with each other, potentially leading to inconsistent policy behavior.</p>
    pub fn conflicting_rules(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.conflicting_rules.unwrap_or_default();
        v.push(input.into());
        self.conflicting_rules = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of rules that may conflict with each other, potentially leading to inconsistent policy behavior.</p>
    pub fn set_conflicting_rules(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.conflicting_rules = input;
        self
    }
    /// <p>A list of rules that may conflict with each other, potentially leading to inconsistent policy behavior.</p>
    pub fn get_conflicting_rules(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.conflicting_rules
    }
    /// Appends an item to `disjoint_rule_sets`.
    ///
    /// To override the contents of this collection use [`set_disjoint_rule_sets`](Self::set_disjoint_rule_sets).
    ///
    /// <p>Groups of rules that operate on completely separate sets of variables, indicating the policy may be addressing multiple unrelated concerns.</p>
    pub fn disjoint_rule_sets(mut self, input: crate::types::AutomatedReasoningPolicyDisjointRuleSet) -> Self {
        let mut v = self.disjoint_rule_sets.unwrap_or_default();
        v.push(input);
        self.disjoint_rule_sets = ::std::option::Option::Some(v);
        self
    }
    /// <p>Groups of rules that operate on completely separate sets of variables, indicating the policy may be addressing multiple unrelated concerns.</p>
    pub fn set_disjoint_rule_sets(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::AutomatedReasoningPolicyDisjointRuleSet>>,
    ) -> Self {
        self.disjoint_rule_sets = input;
        self
    }
    /// <p>Groups of rules that operate on completely separate sets of variables, indicating the policy may be addressing multiple unrelated concerns.</p>
    pub fn get_disjoint_rule_sets(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AutomatedReasoningPolicyDisjointRuleSet>> {
        &self.disjoint_rule_sets
    }
    /// Consumes the builder and constructs a [`AutomatedReasoningPolicyDefinitionQualityReport`](crate::types::AutomatedReasoningPolicyDefinitionQualityReport).
    /// This method will fail if any of the following fields are not set:
    /// - [`type_count`](crate::types::builders::AutomatedReasoningPolicyDefinitionQualityReportBuilder::type_count)
    /// - [`variable_count`](crate::types::builders::AutomatedReasoningPolicyDefinitionQualityReportBuilder::variable_count)
    /// - [`rule_count`](crate::types::builders::AutomatedReasoningPolicyDefinitionQualityReportBuilder::rule_count)
    /// - [`unused_types`](crate::types::builders::AutomatedReasoningPolicyDefinitionQualityReportBuilder::unused_types)
    /// - [`unused_type_values`](crate::types::builders::AutomatedReasoningPolicyDefinitionQualityReportBuilder::unused_type_values)
    /// - [`unused_variables`](crate::types::builders::AutomatedReasoningPolicyDefinitionQualityReportBuilder::unused_variables)
    /// - [`conflicting_rules`](crate::types::builders::AutomatedReasoningPolicyDefinitionQualityReportBuilder::conflicting_rules)
    /// - [`disjoint_rule_sets`](crate::types::builders::AutomatedReasoningPolicyDefinitionQualityReportBuilder::disjoint_rule_sets)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::AutomatedReasoningPolicyDefinitionQualityReport, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AutomatedReasoningPolicyDefinitionQualityReport {
            type_count: self.type_count.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "type_count",
                    "type_count was not specified but it is required when building AutomatedReasoningPolicyDefinitionQualityReport",
                )
            })?,
            variable_count: self.variable_count.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "variable_count",
                    "variable_count was not specified but it is required when building AutomatedReasoningPolicyDefinitionQualityReport",
                )
            })?,
            rule_count: self.rule_count.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "rule_count",
                    "rule_count was not specified but it is required when building AutomatedReasoningPolicyDefinitionQualityReport",
                )
            })?,
            unused_types: self.unused_types.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "unused_types",
                    "unused_types was not specified but it is required when building AutomatedReasoningPolicyDefinitionQualityReport",
                )
            })?,
            unused_type_values: self.unused_type_values.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "unused_type_values",
                    "unused_type_values was not specified but it is required when building AutomatedReasoningPolicyDefinitionQualityReport",
                )
            })?,
            unused_variables: self.unused_variables.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "unused_variables",
                    "unused_variables was not specified but it is required when building AutomatedReasoningPolicyDefinitionQualityReport",
                )
            })?,
            conflicting_rules: self.conflicting_rules.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "conflicting_rules",
                    "conflicting_rules was not specified but it is required when building AutomatedReasoningPolicyDefinitionQualityReport",
                )
            })?,
            disjoint_rule_sets: self.disjoint_rule_sets.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "disjoint_rule_sets",
                    "disjoint_rule_sets was not specified but it is required when building AutomatedReasoningPolicyDefinitionQualityReport",
                )
            })?,
        })
    }
}
