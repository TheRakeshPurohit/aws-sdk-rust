// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the various assets generated during a policy build workflow, including logs, quality reports, and the final policy definition.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum AutomatedReasoningPolicyBuildResultAssets {
    /// <p>The complete build log containing detailed information about each step in the policy generation process.</p>
    BuildLog(crate::types::AutomatedReasoningPolicyBuildLog),
    /// <p>Contains the formal logic rules, variables, and custom variable types that define an Automated Reasoning policy. The policy definition specifies the constraints used to validate foundation model responses for accuracy and logical consistency.</p>
    PolicyDefinition(crate::types::AutomatedReasoningPolicyDefinition),
    /// <p>A comprehensive report analyzing the quality of the generated policy, including metrics about rule coverage, potential conflicts, and unused elements.</p>
    QualityReport(crate::types::AutomatedReasoningPolicyDefinitionQualityReport),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl AutomatedReasoningPolicyBuildResultAssets {
    /// Tries to convert the enum instance into [`BuildLog`](crate::types::AutomatedReasoningPolicyBuildResultAssets::BuildLog), extracting the inner [`AutomatedReasoningPolicyBuildLog`](crate::types::AutomatedReasoningPolicyBuildLog).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_build_log(&self) -> ::std::result::Result<&crate::types::AutomatedReasoningPolicyBuildLog, &Self> {
        if let AutomatedReasoningPolicyBuildResultAssets::BuildLog(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`BuildLog`](crate::types::AutomatedReasoningPolicyBuildResultAssets::BuildLog).
    pub fn is_build_log(&self) -> bool {
        self.as_build_log().is_ok()
    }
    /// Tries to convert the enum instance into [`PolicyDefinition`](crate::types::AutomatedReasoningPolicyBuildResultAssets::PolicyDefinition), extracting the inner [`AutomatedReasoningPolicyDefinition`](crate::types::AutomatedReasoningPolicyDefinition).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_policy_definition(&self) -> ::std::result::Result<&crate::types::AutomatedReasoningPolicyDefinition, &Self> {
        if let AutomatedReasoningPolicyBuildResultAssets::PolicyDefinition(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`PolicyDefinition`](crate::types::AutomatedReasoningPolicyBuildResultAssets::PolicyDefinition).
    pub fn is_policy_definition(&self) -> bool {
        self.as_policy_definition().is_ok()
    }
    /// Tries to convert the enum instance into [`QualityReport`](crate::types::AutomatedReasoningPolicyBuildResultAssets::QualityReport), extracting the inner [`AutomatedReasoningPolicyDefinitionQualityReport`](crate::types::AutomatedReasoningPolicyDefinitionQualityReport).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_quality_report(&self) -> ::std::result::Result<&crate::types::AutomatedReasoningPolicyDefinitionQualityReport, &Self> {
        if let AutomatedReasoningPolicyBuildResultAssets::QualityReport(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`QualityReport`](crate::types::AutomatedReasoningPolicyBuildResultAssets::QualityReport).
    pub fn is_quality_report(&self) -> bool {
        self.as_quality_report().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
