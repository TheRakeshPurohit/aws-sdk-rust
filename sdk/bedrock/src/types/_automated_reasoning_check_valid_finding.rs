// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Indicates that the claims are definitively true and logically implied by the premises, with no possible alternative interpretations.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AutomatedReasoningCheckValidFinding {
    /// <p>The logical translation of the input that this finding validates.</p>
    pub translation: ::std::option::Option<crate::types::AutomatedReasoningCheckTranslation>,
    /// <p>An example scenario demonstrating how the claims are logically true.</p>
    pub claims_true_scenario: ::std::option::Option<crate::types::AutomatedReasoningCheckScenario>,
    /// <p>The automated reasoning policy rules that support why this result is considered valid.</p>
    pub supporting_rules: ::std::option::Option<::std::vec::Vec<crate::types::AutomatedReasoningCheckRule>>,
    /// <p>Indication of a logic issue with the translation without needing to consider the automated reasoning policy rules.</p>
    pub logic_warning: ::std::option::Option<crate::types::AutomatedReasoningCheckLogicWarning>,
}
impl AutomatedReasoningCheckValidFinding {
    /// <p>The logical translation of the input that this finding validates.</p>
    pub fn translation(&self) -> ::std::option::Option<&crate::types::AutomatedReasoningCheckTranslation> {
        self.translation.as_ref()
    }
    /// <p>An example scenario demonstrating how the claims are logically true.</p>
    pub fn claims_true_scenario(&self) -> ::std::option::Option<&crate::types::AutomatedReasoningCheckScenario> {
        self.claims_true_scenario.as_ref()
    }
    /// <p>The automated reasoning policy rules that support why this result is considered valid.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.supporting_rules.is_none()`.
    pub fn supporting_rules(&self) -> &[crate::types::AutomatedReasoningCheckRule] {
        self.supporting_rules.as_deref().unwrap_or_default()
    }
    /// <p>Indication of a logic issue with the translation without needing to consider the automated reasoning policy rules.</p>
    pub fn logic_warning(&self) -> ::std::option::Option<&crate::types::AutomatedReasoningCheckLogicWarning> {
        self.logic_warning.as_ref()
    }
}
impl AutomatedReasoningCheckValidFinding {
    /// Creates a new builder-style object to manufacture [`AutomatedReasoningCheckValidFinding`](crate::types::AutomatedReasoningCheckValidFinding).
    pub fn builder() -> crate::types::builders::AutomatedReasoningCheckValidFindingBuilder {
        crate::types::builders::AutomatedReasoningCheckValidFindingBuilder::default()
    }
}

/// A builder for [`AutomatedReasoningCheckValidFinding`](crate::types::AutomatedReasoningCheckValidFinding).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AutomatedReasoningCheckValidFindingBuilder {
    pub(crate) translation: ::std::option::Option<crate::types::AutomatedReasoningCheckTranslation>,
    pub(crate) claims_true_scenario: ::std::option::Option<crate::types::AutomatedReasoningCheckScenario>,
    pub(crate) supporting_rules: ::std::option::Option<::std::vec::Vec<crate::types::AutomatedReasoningCheckRule>>,
    pub(crate) logic_warning: ::std::option::Option<crate::types::AutomatedReasoningCheckLogicWarning>,
}
impl AutomatedReasoningCheckValidFindingBuilder {
    /// <p>The logical translation of the input that this finding validates.</p>
    pub fn translation(mut self, input: crate::types::AutomatedReasoningCheckTranslation) -> Self {
        self.translation = ::std::option::Option::Some(input);
        self
    }
    /// <p>The logical translation of the input that this finding validates.</p>
    pub fn set_translation(mut self, input: ::std::option::Option<crate::types::AutomatedReasoningCheckTranslation>) -> Self {
        self.translation = input;
        self
    }
    /// <p>The logical translation of the input that this finding validates.</p>
    pub fn get_translation(&self) -> &::std::option::Option<crate::types::AutomatedReasoningCheckTranslation> {
        &self.translation
    }
    /// <p>An example scenario demonstrating how the claims are logically true.</p>
    pub fn claims_true_scenario(mut self, input: crate::types::AutomatedReasoningCheckScenario) -> Self {
        self.claims_true_scenario = ::std::option::Option::Some(input);
        self
    }
    /// <p>An example scenario demonstrating how the claims are logically true.</p>
    pub fn set_claims_true_scenario(mut self, input: ::std::option::Option<crate::types::AutomatedReasoningCheckScenario>) -> Self {
        self.claims_true_scenario = input;
        self
    }
    /// <p>An example scenario demonstrating how the claims are logically true.</p>
    pub fn get_claims_true_scenario(&self) -> &::std::option::Option<crate::types::AutomatedReasoningCheckScenario> {
        &self.claims_true_scenario
    }
    /// Appends an item to `supporting_rules`.
    ///
    /// To override the contents of this collection use [`set_supporting_rules`](Self::set_supporting_rules).
    ///
    /// <p>The automated reasoning policy rules that support why this result is considered valid.</p>
    pub fn supporting_rules(mut self, input: crate::types::AutomatedReasoningCheckRule) -> Self {
        let mut v = self.supporting_rules.unwrap_or_default();
        v.push(input);
        self.supporting_rules = ::std::option::Option::Some(v);
        self
    }
    /// <p>The automated reasoning policy rules that support why this result is considered valid.</p>
    pub fn set_supporting_rules(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AutomatedReasoningCheckRule>>) -> Self {
        self.supporting_rules = input;
        self
    }
    /// <p>The automated reasoning policy rules that support why this result is considered valid.</p>
    pub fn get_supporting_rules(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AutomatedReasoningCheckRule>> {
        &self.supporting_rules
    }
    /// <p>Indication of a logic issue with the translation without needing to consider the automated reasoning policy rules.</p>
    pub fn logic_warning(mut self, input: crate::types::AutomatedReasoningCheckLogicWarning) -> Self {
        self.logic_warning = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indication of a logic issue with the translation without needing to consider the automated reasoning policy rules.</p>
    pub fn set_logic_warning(mut self, input: ::std::option::Option<crate::types::AutomatedReasoningCheckLogicWarning>) -> Self {
        self.logic_warning = input;
        self
    }
    /// <p>Indication of a logic issue with the translation without needing to consider the automated reasoning policy rules.</p>
    pub fn get_logic_warning(&self) -> &::std::option::Option<crate::types::AutomatedReasoningCheckLogicWarning> {
        &self.logic_warning
    }
    /// Consumes the builder and constructs a [`AutomatedReasoningCheckValidFinding`](crate::types::AutomatedReasoningCheckValidFinding).
    pub fn build(self) -> crate::types::AutomatedReasoningCheckValidFinding {
        crate::types::AutomatedReasoningCheckValidFinding {
            translation: self.translation,
            claims_true_scenario: self.claims_true_scenario,
            supporting_rules: self.supporting_rules,
            logic_warning: self.logic_warning,
        }
    }
}
