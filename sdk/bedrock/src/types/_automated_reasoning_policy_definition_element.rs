// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a single element in an Automated Reasoning policy definition, such as a rule, variable, or type definition.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum AutomatedReasoningPolicyDefinitionElement {
    /// <p>Represents a formal logic rule in an Automated Reasoning policy. For example, rules can be expressed as if-then statements that define logical constraints.</p>
    PolicyDefinitionRule(crate::types::AutomatedReasoningPolicyDefinitionRule),
    /// <p>Represents a custom user-defined viarble type in an Automated Reasoning policy. Types are enum-based and provide additional context beyond predefined variable types.</p>
    PolicyDefinitionType(crate::types::AutomatedReasoningPolicyDefinitionType),
    /// <p>Represents a variable in an Automated Reasoning policy. Variables represent concepts that can have values assigned during natural language translation.</p>
    PolicyDefinitionVariable(crate::types::AutomatedReasoningPolicyDefinitionVariable),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl AutomatedReasoningPolicyDefinitionElement {
    /// Tries to convert the enum instance into [`PolicyDefinitionRule`](crate::types::AutomatedReasoningPolicyDefinitionElement::PolicyDefinitionRule), extracting the inner [`AutomatedReasoningPolicyDefinitionRule`](crate::types::AutomatedReasoningPolicyDefinitionRule).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_policy_definition_rule(&self) -> ::std::result::Result<&crate::types::AutomatedReasoningPolicyDefinitionRule, &Self> {
        if let AutomatedReasoningPolicyDefinitionElement::PolicyDefinitionRule(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`PolicyDefinitionRule`](crate::types::AutomatedReasoningPolicyDefinitionElement::PolicyDefinitionRule).
    pub fn is_policy_definition_rule(&self) -> bool {
        self.as_policy_definition_rule().is_ok()
    }
    /// Tries to convert the enum instance into [`PolicyDefinitionType`](crate::types::AutomatedReasoningPolicyDefinitionElement::PolicyDefinitionType), extracting the inner [`AutomatedReasoningPolicyDefinitionType`](crate::types::AutomatedReasoningPolicyDefinitionType).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_policy_definition_type(&self) -> ::std::result::Result<&crate::types::AutomatedReasoningPolicyDefinitionType, &Self> {
        if let AutomatedReasoningPolicyDefinitionElement::PolicyDefinitionType(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`PolicyDefinitionType`](crate::types::AutomatedReasoningPolicyDefinitionElement::PolicyDefinitionType).
    pub fn is_policy_definition_type(&self) -> bool {
        self.as_policy_definition_type().is_ok()
    }
    /// Tries to convert the enum instance into [`PolicyDefinitionVariable`](crate::types::AutomatedReasoningPolicyDefinitionElement::PolicyDefinitionVariable), extracting the inner [`AutomatedReasoningPolicyDefinitionVariable`](crate::types::AutomatedReasoningPolicyDefinitionVariable).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_policy_definition_variable(&self) -> ::std::result::Result<&crate::types::AutomatedReasoningPolicyDefinitionVariable, &Self> {
        if let AutomatedReasoningPolicyDefinitionElement::PolicyDefinitionVariable(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`PolicyDefinitionVariable`](crate::types::AutomatedReasoningPolicyDefinitionElement::PolicyDefinitionVariable).
    pub fn is_policy_definition_variable(&self) -> bool {
        self.as_policy_definition_variable().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
