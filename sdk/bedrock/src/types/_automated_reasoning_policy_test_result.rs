// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the results of testing an Automated Reasoning policy against various scenarios and validation checks.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AutomatedReasoningPolicyTestResult {
    /// <p>Represents a test for validating an Automated Reasoning policy. tests contain sample inputs and expected outcomes to verify policy behavior.</p>
    pub test_case: ::std::option::Option<crate::types::AutomatedReasoningPolicyTestCase>,
    /// <p>The Amazon Resource Name (ARN) of the Automated Reasoning policy that was tested.</p>
    pub policy_arn: ::std::string::String,
    /// <p>The overall status of the test run (e.g., COMPLETED, FAILED, IN_PROGRESS).</p>
    pub test_run_status: crate::types::AutomatedReasoningPolicyTestRunStatus,
    /// <p>Detailed findings from the test run, including any issues, violations, or unexpected behaviors discovered.</p>
    pub test_findings: ::std::option::Option<::std::vec::Vec<crate::types::AutomatedReasoningCheckFinding>>,
    /// <p>The overall result of the test run, indicating whether the policy passed or failed validation.</p>
    pub test_run_result: ::std::option::Option<crate::types::AutomatedReasoningPolicyTestRunResult>,
    /// <p>A summary of all test findings, aggregated to provide an overall assessment of policy quality and correctness.</p>
    pub aggregated_test_findings_result: ::std::option::Option<crate::types::AutomatedReasoningCheckResult>,
    /// <p>The timestamp when the test results were last updated.</p>
    pub updated_at: ::aws_smithy_types::DateTime,
}
impl AutomatedReasoningPolicyTestResult {
    /// <p>Represents a test for validating an Automated Reasoning policy. tests contain sample inputs and expected outcomes to verify policy behavior.</p>
    pub fn test_case(&self) -> ::std::option::Option<&crate::types::AutomatedReasoningPolicyTestCase> {
        self.test_case.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the Automated Reasoning policy that was tested.</p>
    pub fn policy_arn(&self) -> &str {
        use std::ops::Deref;
        self.policy_arn.deref()
    }
    /// <p>The overall status of the test run (e.g., COMPLETED, FAILED, IN_PROGRESS).</p>
    pub fn test_run_status(&self) -> &crate::types::AutomatedReasoningPolicyTestRunStatus {
        &self.test_run_status
    }
    /// <p>Detailed findings from the test run, including any issues, violations, or unexpected behaviors discovered.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.test_findings.is_none()`.
    pub fn test_findings(&self) -> &[crate::types::AutomatedReasoningCheckFinding] {
        self.test_findings.as_deref().unwrap_or_default()
    }
    /// <p>The overall result of the test run, indicating whether the policy passed or failed validation.</p>
    pub fn test_run_result(&self) -> ::std::option::Option<&crate::types::AutomatedReasoningPolicyTestRunResult> {
        self.test_run_result.as_ref()
    }
    /// <p>A summary of all test findings, aggregated to provide an overall assessment of policy quality and correctness.</p>
    pub fn aggregated_test_findings_result(&self) -> ::std::option::Option<&crate::types::AutomatedReasoningCheckResult> {
        self.aggregated_test_findings_result.as_ref()
    }
    /// <p>The timestamp when the test results were last updated.</p>
    pub fn updated_at(&self) -> &::aws_smithy_types::DateTime {
        &self.updated_at
    }
}
impl AutomatedReasoningPolicyTestResult {
    /// Creates a new builder-style object to manufacture [`AutomatedReasoningPolicyTestResult`](crate::types::AutomatedReasoningPolicyTestResult).
    pub fn builder() -> crate::types::builders::AutomatedReasoningPolicyTestResultBuilder {
        crate::types::builders::AutomatedReasoningPolicyTestResultBuilder::default()
    }
}

/// A builder for [`AutomatedReasoningPolicyTestResult`](crate::types::AutomatedReasoningPolicyTestResult).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AutomatedReasoningPolicyTestResultBuilder {
    pub(crate) test_case: ::std::option::Option<crate::types::AutomatedReasoningPolicyTestCase>,
    pub(crate) policy_arn: ::std::option::Option<::std::string::String>,
    pub(crate) test_run_status: ::std::option::Option<crate::types::AutomatedReasoningPolicyTestRunStatus>,
    pub(crate) test_findings: ::std::option::Option<::std::vec::Vec<crate::types::AutomatedReasoningCheckFinding>>,
    pub(crate) test_run_result: ::std::option::Option<crate::types::AutomatedReasoningPolicyTestRunResult>,
    pub(crate) aggregated_test_findings_result: ::std::option::Option<crate::types::AutomatedReasoningCheckResult>,
    pub(crate) updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl AutomatedReasoningPolicyTestResultBuilder {
    /// <p>Represents a test for validating an Automated Reasoning policy. tests contain sample inputs and expected outcomes to verify policy behavior.</p>
    /// This field is required.
    pub fn test_case(mut self, input: crate::types::AutomatedReasoningPolicyTestCase) -> Self {
        self.test_case = ::std::option::Option::Some(input);
        self
    }
    /// <p>Represents a test for validating an Automated Reasoning policy. tests contain sample inputs and expected outcomes to verify policy behavior.</p>
    pub fn set_test_case(mut self, input: ::std::option::Option<crate::types::AutomatedReasoningPolicyTestCase>) -> Self {
        self.test_case = input;
        self
    }
    /// <p>Represents a test for validating an Automated Reasoning policy. tests contain sample inputs and expected outcomes to verify policy behavior.</p>
    pub fn get_test_case(&self) -> &::std::option::Option<crate::types::AutomatedReasoningPolicyTestCase> {
        &self.test_case
    }
    /// <p>The Amazon Resource Name (ARN) of the Automated Reasoning policy that was tested.</p>
    /// This field is required.
    pub fn policy_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.policy_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Automated Reasoning policy that was tested.</p>
    pub fn set_policy_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.policy_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Automated Reasoning policy that was tested.</p>
    pub fn get_policy_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.policy_arn
    }
    /// <p>The overall status of the test run (e.g., COMPLETED, FAILED, IN_PROGRESS).</p>
    /// This field is required.
    pub fn test_run_status(mut self, input: crate::types::AutomatedReasoningPolicyTestRunStatus) -> Self {
        self.test_run_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The overall status of the test run (e.g., COMPLETED, FAILED, IN_PROGRESS).</p>
    pub fn set_test_run_status(mut self, input: ::std::option::Option<crate::types::AutomatedReasoningPolicyTestRunStatus>) -> Self {
        self.test_run_status = input;
        self
    }
    /// <p>The overall status of the test run (e.g., COMPLETED, FAILED, IN_PROGRESS).</p>
    pub fn get_test_run_status(&self) -> &::std::option::Option<crate::types::AutomatedReasoningPolicyTestRunStatus> {
        &self.test_run_status
    }
    /// Appends an item to `test_findings`.
    ///
    /// To override the contents of this collection use [`set_test_findings`](Self::set_test_findings).
    ///
    /// <p>Detailed findings from the test run, including any issues, violations, or unexpected behaviors discovered.</p>
    pub fn test_findings(mut self, input: crate::types::AutomatedReasoningCheckFinding) -> Self {
        let mut v = self.test_findings.unwrap_or_default();
        v.push(input);
        self.test_findings = ::std::option::Option::Some(v);
        self
    }
    /// <p>Detailed findings from the test run, including any issues, violations, or unexpected behaviors discovered.</p>
    pub fn set_test_findings(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AutomatedReasoningCheckFinding>>) -> Self {
        self.test_findings = input;
        self
    }
    /// <p>Detailed findings from the test run, including any issues, violations, or unexpected behaviors discovered.</p>
    pub fn get_test_findings(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AutomatedReasoningCheckFinding>> {
        &self.test_findings
    }
    /// <p>The overall result of the test run, indicating whether the policy passed or failed validation.</p>
    pub fn test_run_result(mut self, input: crate::types::AutomatedReasoningPolicyTestRunResult) -> Self {
        self.test_run_result = ::std::option::Option::Some(input);
        self
    }
    /// <p>The overall result of the test run, indicating whether the policy passed or failed validation.</p>
    pub fn set_test_run_result(mut self, input: ::std::option::Option<crate::types::AutomatedReasoningPolicyTestRunResult>) -> Self {
        self.test_run_result = input;
        self
    }
    /// <p>The overall result of the test run, indicating whether the policy passed or failed validation.</p>
    pub fn get_test_run_result(&self) -> &::std::option::Option<crate::types::AutomatedReasoningPolicyTestRunResult> {
        &self.test_run_result
    }
    /// <p>A summary of all test findings, aggregated to provide an overall assessment of policy quality and correctness.</p>
    pub fn aggregated_test_findings_result(mut self, input: crate::types::AutomatedReasoningCheckResult) -> Self {
        self.aggregated_test_findings_result = ::std::option::Option::Some(input);
        self
    }
    /// <p>A summary of all test findings, aggregated to provide an overall assessment of policy quality and correctness.</p>
    pub fn set_aggregated_test_findings_result(mut self, input: ::std::option::Option<crate::types::AutomatedReasoningCheckResult>) -> Self {
        self.aggregated_test_findings_result = input;
        self
    }
    /// <p>A summary of all test findings, aggregated to provide an overall assessment of policy quality and correctness.</p>
    pub fn get_aggregated_test_findings_result(&self) -> &::std::option::Option<crate::types::AutomatedReasoningCheckResult> {
        &self.aggregated_test_findings_result
    }
    /// <p>The timestamp when the test results were last updated.</p>
    /// This field is required.
    pub fn updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the test results were last updated.</p>
    pub fn set_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>The timestamp when the test results were last updated.</p>
    pub fn get_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_at
    }
    /// Consumes the builder and constructs a [`AutomatedReasoningPolicyTestResult`](crate::types::AutomatedReasoningPolicyTestResult).
    /// This method will fail if any of the following fields are not set:
    /// - [`policy_arn`](crate::types::builders::AutomatedReasoningPolicyTestResultBuilder::policy_arn)
    /// - [`test_run_status`](crate::types::builders::AutomatedReasoningPolicyTestResultBuilder::test_run_status)
    /// - [`updated_at`](crate::types::builders::AutomatedReasoningPolicyTestResultBuilder::updated_at)
    pub fn build(self) -> ::std::result::Result<crate::types::AutomatedReasoningPolicyTestResult, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AutomatedReasoningPolicyTestResult {
            test_case: self.test_case,
            policy_arn: self.policy_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "policy_arn",
                    "policy_arn was not specified but it is required when building AutomatedReasoningPolicyTestResult",
                )
            })?,
            test_run_status: self.test_run_status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "test_run_status",
                    "test_run_status was not specified but it is required when building AutomatedReasoningPolicyTestResult",
                )
            })?,
            test_findings: self.test_findings,
            test_run_result: self.test_run_result,
            aggregated_test_findings_result: self.aggregated_test_findings_result,
            updated_at: self.updated_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "updated_at",
                    "updated_at was not specified but it is required when building AutomatedReasoningPolicyTestResult",
                )
            })?,
        })
    }
}
