// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Associates a type name with a specific value name, used for referencing type values in rules and other policy elements.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct AutomatedReasoningPolicyDefinitionTypeValuePair {
    /// <p>The name of the custom type that contains the referenced value.</p>
    pub type_name: ::std::string::String,
    /// <p>The name of the specific value within the type.</p>
    pub value_name: ::std::string::String,
}
impl AutomatedReasoningPolicyDefinitionTypeValuePair {
    /// <p>The name of the custom type that contains the referenced value.</p>
    pub fn type_name(&self) -> &str {
        use std::ops::Deref;
        self.type_name.deref()
    }
    /// <p>The name of the specific value within the type.</p>
    pub fn value_name(&self) -> &str {
        use std::ops::Deref;
        self.value_name.deref()
    }
}
impl ::std::fmt::Debug for AutomatedReasoningPolicyDefinitionTypeValuePair {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AutomatedReasoningPolicyDefinitionTypeValuePair");
        formatter.field("type_name", &"*** Sensitive Data Redacted ***");
        formatter.field("value_name", &self.value_name);
        formatter.finish()
    }
}
impl AutomatedReasoningPolicyDefinitionTypeValuePair {
    /// Creates a new builder-style object to manufacture [`AutomatedReasoningPolicyDefinitionTypeValuePair`](crate::types::AutomatedReasoningPolicyDefinitionTypeValuePair).
    pub fn builder() -> crate::types::builders::AutomatedReasoningPolicyDefinitionTypeValuePairBuilder {
        crate::types::builders::AutomatedReasoningPolicyDefinitionTypeValuePairBuilder::default()
    }
}

/// A builder for [`AutomatedReasoningPolicyDefinitionTypeValuePair`](crate::types::AutomatedReasoningPolicyDefinitionTypeValuePair).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct AutomatedReasoningPolicyDefinitionTypeValuePairBuilder {
    pub(crate) type_name: ::std::option::Option<::std::string::String>,
    pub(crate) value_name: ::std::option::Option<::std::string::String>,
}
impl AutomatedReasoningPolicyDefinitionTypeValuePairBuilder {
    /// <p>The name of the custom type that contains the referenced value.</p>
    /// This field is required.
    pub fn type_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.type_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the custom type that contains the referenced value.</p>
    pub fn set_type_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.type_name = input;
        self
    }
    /// <p>The name of the custom type that contains the referenced value.</p>
    pub fn get_type_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.type_name
    }
    /// <p>The name of the specific value within the type.</p>
    /// This field is required.
    pub fn value_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.value_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the specific value within the type.</p>
    pub fn set_value_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.value_name = input;
        self
    }
    /// <p>The name of the specific value within the type.</p>
    pub fn get_value_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.value_name
    }
    /// Consumes the builder and constructs a [`AutomatedReasoningPolicyDefinitionTypeValuePair`](crate::types::AutomatedReasoningPolicyDefinitionTypeValuePair).
    /// This method will fail if any of the following fields are not set:
    /// - [`type_name`](crate::types::builders::AutomatedReasoningPolicyDefinitionTypeValuePairBuilder::type_name)
    /// - [`value_name`](crate::types::builders::AutomatedReasoningPolicyDefinitionTypeValuePairBuilder::value_name)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::AutomatedReasoningPolicyDefinitionTypeValuePair, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AutomatedReasoningPolicyDefinitionTypeValuePair {
            type_name: self.type_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "type_name",
                    "type_name was not specified but it is required when building AutomatedReasoningPolicyDefinitionTypeValuePair",
                )
            })?,
            value_name: self.value_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "value_name",
                    "value_name was not specified but it is required when building AutomatedReasoningPolicyDefinitionTypeValuePair",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for AutomatedReasoningPolicyDefinitionTypeValuePairBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AutomatedReasoningPolicyDefinitionTypeValuePairBuilder");
        formatter.field("type_name", &"*** Sensitive Data Redacted ***");
        formatter.field("value_name", &self.value_name);
        formatter.finish()
    }
}
