// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a variable in an Automated Reasoning policy. Variables represent concepts that can have values assigned during natural language translation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct AutomatedReasoningPolicyDefinitionVariable {
    /// <p>The name of the variable. Use descriptive names that clearly indicate the concept being represented.</p>
    pub name: ::std::string::String,
    /// <p>The data type of the variable. Valid types include bool, int, real, enum, and custom types that you can provide.</p>
    pub r#type: ::std::string::String,
    /// <p>The description of the variable that explains what it represents and how users might refer to it. Clear and comprehensive descriptions are essential for accurate natural language translation.</p>
    pub description: ::std::string::String,
}
impl AutomatedReasoningPolicyDefinitionVariable {
    /// <p>The name of the variable. Use descriptive names that clearly indicate the concept being represented.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The data type of the variable. Valid types include bool, int, real, enum, and custom types that you can provide.</p>
    pub fn r#type(&self) -> &str {
        use std::ops::Deref;
        self.r#type.deref()
    }
    /// <p>The description of the variable that explains what it represents and how users might refer to it. Clear and comprehensive descriptions are essential for accurate natural language translation.</p>
    pub fn description(&self) -> &str {
        use std::ops::Deref;
        self.description.deref()
    }
}
impl ::std::fmt::Debug for AutomatedReasoningPolicyDefinitionVariable {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AutomatedReasoningPolicyDefinitionVariable");
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("r#type", &"*** Sensitive Data Redacted ***");
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl AutomatedReasoningPolicyDefinitionVariable {
    /// Creates a new builder-style object to manufacture [`AutomatedReasoningPolicyDefinitionVariable`](crate::types::AutomatedReasoningPolicyDefinitionVariable).
    pub fn builder() -> crate::types::builders::AutomatedReasoningPolicyDefinitionVariableBuilder {
        crate::types::builders::AutomatedReasoningPolicyDefinitionVariableBuilder::default()
    }
}

/// A builder for [`AutomatedReasoningPolicyDefinitionVariable`](crate::types::AutomatedReasoningPolicyDefinitionVariable).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct AutomatedReasoningPolicyDefinitionVariableBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
}
impl AutomatedReasoningPolicyDefinitionVariableBuilder {
    /// <p>The name of the variable. Use descriptive names that clearly indicate the concept being represented.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the variable. Use descriptive names that clearly indicate the concept being represented.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the variable. Use descriptive names that clearly indicate the concept being represented.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The data type of the variable. Valid types include bool, int, real, enum, and custom types that you can provide.</p>
    /// This field is required.
    pub fn r#type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.r#type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The data type of the variable. Valid types include bool, int, real, enum, and custom types that you can provide.</p>
    pub fn set_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The data type of the variable. Valid types include bool, int, real, enum, and custom types that you can provide.</p>
    pub fn get_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.r#type
    }
    /// <p>The description of the variable that explains what it represents and how users might refer to it. Clear and comprehensive descriptions are essential for accurate natural language translation.</p>
    /// This field is required.
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the variable that explains what it represents and how users might refer to it. Clear and comprehensive descriptions are essential for accurate natural language translation.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the variable that explains what it represents and how users might refer to it. Clear and comprehensive descriptions are essential for accurate natural language translation.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Consumes the builder and constructs a [`AutomatedReasoningPolicyDefinitionVariable`](crate::types::AutomatedReasoningPolicyDefinitionVariable).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::AutomatedReasoningPolicyDefinitionVariableBuilder::name)
    /// - [`r#type`](crate::types::builders::AutomatedReasoningPolicyDefinitionVariableBuilder::type)
    /// - [`description`](crate::types::builders::AutomatedReasoningPolicyDefinitionVariableBuilder::description)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::AutomatedReasoningPolicyDefinitionVariable, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AutomatedReasoningPolicyDefinitionVariable {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building AutomatedReasoningPolicyDefinitionVariable",
                )
            })?,
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building AutomatedReasoningPolicyDefinitionVariable",
                )
            })?,
            description: self.description.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "description",
                    "description was not specified but it is required when building AutomatedReasoningPolicyDefinitionVariable",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for AutomatedReasoningPolicyDefinitionVariableBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AutomatedReasoningPolicyDefinitionVariableBuilder");
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("r#type", &"*** Sensitive Data Redacted ***");
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
