// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An annotation for updating the policy based on feedback about how it performed on specific test scenarios.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct AutomatedReasoningPolicyUpdateFromScenarioFeedbackAnnotation {
    /// <p>The list of rule identifiers that were involved in the scenario being evaluated.</p>
    pub rule_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The logical expression that defines the test scenario that generated this feedback.</p>
    pub scenario_expression: ::std::string::String,
    /// <p>The feedback information about scenario performance, including any issues or improvements identified.</p>
    pub feedback: ::std::option::Option<::std::string::String>,
}
impl AutomatedReasoningPolicyUpdateFromScenarioFeedbackAnnotation {
    /// <p>The list of rule identifiers that were involved in the scenario being evaluated.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.rule_ids.is_none()`.
    pub fn rule_ids(&self) -> &[::std::string::String] {
        self.rule_ids.as_deref().unwrap_or_default()
    }
    /// <p>The logical expression that defines the test scenario that generated this feedback.</p>
    pub fn scenario_expression(&self) -> &str {
        use std::ops::Deref;
        self.scenario_expression.deref()
    }
    /// <p>The feedback information about scenario performance, including any issues or improvements identified.</p>
    pub fn feedback(&self) -> ::std::option::Option<&str> {
        self.feedback.as_deref()
    }
}
impl ::std::fmt::Debug for AutomatedReasoningPolicyUpdateFromScenarioFeedbackAnnotation {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AutomatedReasoningPolicyUpdateFromScenarioFeedbackAnnotation");
        formatter.field("rule_ids", &self.rule_ids);
        formatter.field("scenario_expression", &"*** Sensitive Data Redacted ***");
        formatter.field("feedback", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl AutomatedReasoningPolicyUpdateFromScenarioFeedbackAnnotation {
    /// Creates a new builder-style object to manufacture [`AutomatedReasoningPolicyUpdateFromScenarioFeedbackAnnotation`](crate::types::AutomatedReasoningPolicyUpdateFromScenarioFeedbackAnnotation).
    pub fn builder() -> crate::types::builders::AutomatedReasoningPolicyUpdateFromScenarioFeedbackAnnotationBuilder {
        crate::types::builders::AutomatedReasoningPolicyUpdateFromScenarioFeedbackAnnotationBuilder::default()
    }
}

/// A builder for [`AutomatedReasoningPolicyUpdateFromScenarioFeedbackAnnotation`](crate::types::AutomatedReasoningPolicyUpdateFromScenarioFeedbackAnnotation).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct AutomatedReasoningPolicyUpdateFromScenarioFeedbackAnnotationBuilder {
    pub(crate) rule_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) scenario_expression: ::std::option::Option<::std::string::String>,
    pub(crate) feedback: ::std::option::Option<::std::string::String>,
}
impl AutomatedReasoningPolicyUpdateFromScenarioFeedbackAnnotationBuilder {
    /// Appends an item to `rule_ids`.
    ///
    /// To override the contents of this collection use [`set_rule_ids`](Self::set_rule_ids).
    ///
    /// <p>The list of rule identifiers that were involved in the scenario being evaluated.</p>
    pub fn rule_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.rule_ids.unwrap_or_default();
        v.push(input.into());
        self.rule_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of rule identifiers that were involved in the scenario being evaluated.</p>
    pub fn set_rule_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.rule_ids = input;
        self
    }
    /// <p>The list of rule identifiers that were involved in the scenario being evaluated.</p>
    pub fn get_rule_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.rule_ids
    }
    /// <p>The logical expression that defines the test scenario that generated this feedback.</p>
    /// This field is required.
    pub fn scenario_expression(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.scenario_expression = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The logical expression that defines the test scenario that generated this feedback.</p>
    pub fn set_scenario_expression(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.scenario_expression = input;
        self
    }
    /// <p>The logical expression that defines the test scenario that generated this feedback.</p>
    pub fn get_scenario_expression(&self) -> &::std::option::Option<::std::string::String> {
        &self.scenario_expression
    }
    /// <p>The feedback information about scenario performance, including any issues or improvements identified.</p>
    pub fn feedback(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.feedback = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The feedback information about scenario performance, including any issues or improvements identified.</p>
    pub fn set_feedback(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.feedback = input;
        self
    }
    /// <p>The feedback information about scenario performance, including any issues or improvements identified.</p>
    pub fn get_feedback(&self) -> &::std::option::Option<::std::string::String> {
        &self.feedback
    }
    /// Consumes the builder and constructs a [`AutomatedReasoningPolicyUpdateFromScenarioFeedbackAnnotation`](crate::types::AutomatedReasoningPolicyUpdateFromScenarioFeedbackAnnotation).
    /// This method will fail if any of the following fields are not set:
    /// - [`scenario_expression`](crate::types::builders::AutomatedReasoningPolicyUpdateFromScenarioFeedbackAnnotationBuilder::scenario_expression)
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::types::AutomatedReasoningPolicyUpdateFromScenarioFeedbackAnnotation,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::types::AutomatedReasoningPolicyUpdateFromScenarioFeedbackAnnotation {
                rule_ids: self.rule_ids
                ,
                scenario_expression: self.scenario_expression
                    .ok_or_else(||
                        ::aws_smithy_types::error::operation::BuildError::missing_field("scenario_expression", "scenario_expression was not specified but it is required when building AutomatedReasoningPolicyUpdateFromScenarioFeedbackAnnotation")
                    )?
                ,
                feedback: self.feedback
                ,
            }
        )
    }
}
impl ::std::fmt::Debug for AutomatedReasoningPolicyUpdateFromScenarioFeedbackAnnotationBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AutomatedReasoningPolicyUpdateFromScenarioFeedbackAnnotationBuilder");
        formatter.field("rule_ids", &self.rule_ids);
        formatter.field("scenario_expression", &"*** Sensitive Data Redacted ***");
        formatter.field("feedback", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
