// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Indicates that the input has multiple valid logical interpretations, requiring additional context or clarification.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AutomatedReasoningCheckTranslationAmbiguousFinding {
    /// <p>Different logical interpretations that were detected during translation of the input.</p>
    pub options: ::std::option::Option<::std::vec::Vec<crate::types::AutomatedReasoningCheckTranslationOption>>,
    /// <p>Scenarios showing how the different translation options differ in meaning.</p>
    pub difference_scenarios: ::std::option::Option<::std::vec::Vec<crate::types::AutomatedReasoningCheckScenario>>,
}
impl AutomatedReasoningCheckTranslationAmbiguousFinding {
    /// <p>Different logical interpretations that were detected during translation of the input.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.options.is_none()`.
    pub fn options(&self) -> &[crate::types::AutomatedReasoningCheckTranslationOption] {
        self.options.as_deref().unwrap_or_default()
    }
    /// <p>Scenarios showing how the different translation options differ in meaning.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.difference_scenarios.is_none()`.
    pub fn difference_scenarios(&self) -> &[crate::types::AutomatedReasoningCheckScenario] {
        self.difference_scenarios.as_deref().unwrap_or_default()
    }
}
impl AutomatedReasoningCheckTranslationAmbiguousFinding {
    /// Creates a new builder-style object to manufacture [`AutomatedReasoningCheckTranslationAmbiguousFinding`](crate::types::AutomatedReasoningCheckTranslationAmbiguousFinding).
    pub fn builder() -> crate::types::builders::AutomatedReasoningCheckTranslationAmbiguousFindingBuilder {
        crate::types::builders::AutomatedReasoningCheckTranslationAmbiguousFindingBuilder::default()
    }
}

/// A builder for [`AutomatedReasoningCheckTranslationAmbiguousFinding`](crate::types::AutomatedReasoningCheckTranslationAmbiguousFinding).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AutomatedReasoningCheckTranslationAmbiguousFindingBuilder {
    pub(crate) options: ::std::option::Option<::std::vec::Vec<crate::types::AutomatedReasoningCheckTranslationOption>>,
    pub(crate) difference_scenarios: ::std::option::Option<::std::vec::Vec<crate::types::AutomatedReasoningCheckScenario>>,
}
impl AutomatedReasoningCheckTranslationAmbiguousFindingBuilder {
    /// Appends an item to `options`.
    ///
    /// To override the contents of this collection use [`set_options`](Self::set_options).
    ///
    /// <p>Different logical interpretations that were detected during translation of the input.</p>
    pub fn options(mut self, input: crate::types::AutomatedReasoningCheckTranslationOption) -> Self {
        let mut v = self.options.unwrap_or_default();
        v.push(input);
        self.options = ::std::option::Option::Some(v);
        self
    }
    /// <p>Different logical interpretations that were detected during translation of the input.</p>
    pub fn set_options(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AutomatedReasoningCheckTranslationOption>>) -> Self {
        self.options = input;
        self
    }
    /// <p>Different logical interpretations that were detected during translation of the input.</p>
    pub fn get_options(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AutomatedReasoningCheckTranslationOption>> {
        &self.options
    }
    /// Appends an item to `difference_scenarios`.
    ///
    /// To override the contents of this collection use [`set_difference_scenarios`](Self::set_difference_scenarios).
    ///
    /// <p>Scenarios showing how the different translation options differ in meaning.</p>
    pub fn difference_scenarios(mut self, input: crate::types::AutomatedReasoningCheckScenario) -> Self {
        let mut v = self.difference_scenarios.unwrap_or_default();
        v.push(input);
        self.difference_scenarios = ::std::option::Option::Some(v);
        self
    }
    /// <p>Scenarios showing how the different translation options differ in meaning.</p>
    pub fn set_difference_scenarios(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AutomatedReasoningCheckScenario>>) -> Self {
        self.difference_scenarios = input;
        self
    }
    /// <p>Scenarios showing how the different translation options differ in meaning.</p>
    pub fn get_difference_scenarios(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AutomatedReasoningCheckScenario>> {
        &self.difference_scenarios
    }
    /// Consumes the builder and constructs a [`AutomatedReasoningCheckTranslationAmbiguousFinding`](crate::types::AutomatedReasoningCheckTranslationAmbiguousFinding).
    pub fn build(self) -> crate::types::AutomatedReasoningCheckTranslationAmbiguousFinding {
        crate::types::AutomatedReasoningCheckTranslationAmbiguousFinding {
            options: self.options,
            difference_scenarios: self.difference_scenarios,
        }
    }
}
