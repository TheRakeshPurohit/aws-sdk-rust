// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Indicates that the claims could be either true or false depending on additional assumptions not provided in the input.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AutomatedReasoningCheckSatisfiableFinding {
    /// <p>The logical translation of the input that this finding evaluates.</p>
    pub translation: ::std::option::Option<crate::types::AutomatedReasoningCheckTranslation>,
    /// <p>An example scenario demonstrating how the claims could be logically true.</p>
    pub claims_true_scenario: ::std::option::Option<crate::types::AutomatedReasoningCheckScenario>,
    /// <p>An example scenario demonstrating how the claims could be logically false.</p>
    pub claims_false_scenario: ::std::option::Option<crate::types::AutomatedReasoningCheckScenario>,
    /// <p>Indication of a logic issue with the translation without needing to consider the automated reasoning policy rules.</p>
    pub logic_warning: ::std::option::Option<crate::types::AutomatedReasoningCheckLogicWarning>,
}
impl AutomatedReasoningCheckSatisfiableFinding {
    /// <p>The logical translation of the input that this finding evaluates.</p>
    pub fn translation(&self) -> ::std::option::Option<&crate::types::AutomatedReasoningCheckTranslation> {
        self.translation.as_ref()
    }
    /// <p>An example scenario demonstrating how the claims could be logically true.</p>
    pub fn claims_true_scenario(&self) -> ::std::option::Option<&crate::types::AutomatedReasoningCheckScenario> {
        self.claims_true_scenario.as_ref()
    }
    /// <p>An example scenario demonstrating how the claims could be logically false.</p>
    pub fn claims_false_scenario(&self) -> ::std::option::Option<&crate::types::AutomatedReasoningCheckScenario> {
        self.claims_false_scenario.as_ref()
    }
    /// <p>Indication of a logic issue with the translation without needing to consider the automated reasoning policy rules.</p>
    pub fn logic_warning(&self) -> ::std::option::Option<&crate::types::AutomatedReasoningCheckLogicWarning> {
        self.logic_warning.as_ref()
    }
}
impl AutomatedReasoningCheckSatisfiableFinding {
    /// Creates a new builder-style object to manufacture [`AutomatedReasoningCheckSatisfiableFinding`](crate::types::AutomatedReasoningCheckSatisfiableFinding).
    pub fn builder() -> crate::types::builders::AutomatedReasoningCheckSatisfiableFindingBuilder {
        crate::types::builders::AutomatedReasoningCheckSatisfiableFindingBuilder::default()
    }
}

/// A builder for [`AutomatedReasoningCheckSatisfiableFinding`](crate::types::AutomatedReasoningCheckSatisfiableFinding).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AutomatedReasoningCheckSatisfiableFindingBuilder {
    pub(crate) translation: ::std::option::Option<crate::types::AutomatedReasoningCheckTranslation>,
    pub(crate) claims_true_scenario: ::std::option::Option<crate::types::AutomatedReasoningCheckScenario>,
    pub(crate) claims_false_scenario: ::std::option::Option<crate::types::AutomatedReasoningCheckScenario>,
    pub(crate) logic_warning: ::std::option::Option<crate::types::AutomatedReasoningCheckLogicWarning>,
}
impl AutomatedReasoningCheckSatisfiableFindingBuilder {
    /// <p>The logical translation of the input that this finding evaluates.</p>
    pub fn translation(mut self, input: crate::types::AutomatedReasoningCheckTranslation) -> Self {
        self.translation = ::std::option::Option::Some(input);
        self
    }
    /// <p>The logical translation of the input that this finding evaluates.</p>
    pub fn set_translation(mut self, input: ::std::option::Option<crate::types::AutomatedReasoningCheckTranslation>) -> Self {
        self.translation = input;
        self
    }
    /// <p>The logical translation of the input that this finding evaluates.</p>
    pub fn get_translation(&self) -> &::std::option::Option<crate::types::AutomatedReasoningCheckTranslation> {
        &self.translation
    }
    /// <p>An example scenario demonstrating how the claims could be logically true.</p>
    pub fn claims_true_scenario(mut self, input: crate::types::AutomatedReasoningCheckScenario) -> Self {
        self.claims_true_scenario = ::std::option::Option::Some(input);
        self
    }
    /// <p>An example scenario demonstrating how the claims could be logically true.</p>
    pub fn set_claims_true_scenario(mut self, input: ::std::option::Option<crate::types::AutomatedReasoningCheckScenario>) -> Self {
        self.claims_true_scenario = input;
        self
    }
    /// <p>An example scenario demonstrating how the claims could be logically true.</p>
    pub fn get_claims_true_scenario(&self) -> &::std::option::Option<crate::types::AutomatedReasoningCheckScenario> {
        &self.claims_true_scenario
    }
    /// <p>An example scenario demonstrating how the claims could be logically false.</p>
    pub fn claims_false_scenario(mut self, input: crate::types::AutomatedReasoningCheckScenario) -> Self {
        self.claims_false_scenario = ::std::option::Option::Some(input);
        self
    }
    /// <p>An example scenario demonstrating how the claims could be logically false.</p>
    pub fn set_claims_false_scenario(mut self, input: ::std::option::Option<crate::types::AutomatedReasoningCheckScenario>) -> Self {
        self.claims_false_scenario = input;
        self
    }
    /// <p>An example scenario demonstrating how the claims could be logically false.</p>
    pub fn get_claims_false_scenario(&self) -> &::std::option::Option<crate::types::AutomatedReasoningCheckScenario> {
        &self.claims_false_scenario
    }
    /// <p>Indication of a logic issue with the translation without needing to consider the automated reasoning policy rules.</p>
    pub fn logic_warning(mut self, input: crate::types::AutomatedReasoningCheckLogicWarning) -> Self {
        self.logic_warning = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indication of a logic issue with the translation without needing to consider the automated reasoning policy rules.</p>
    pub fn set_logic_warning(mut self, input: ::std::option::Option<crate::types::AutomatedReasoningCheckLogicWarning>) -> Self {
        self.logic_warning = input;
        self
    }
    /// <p>Indication of a logic issue with the translation without needing to consider the automated reasoning policy rules.</p>
    pub fn get_logic_warning(&self) -> &::std::option::Option<crate::types::AutomatedReasoningCheckLogicWarning> {
        &self.logic_warning
    }
    /// Consumes the builder and constructs a [`AutomatedReasoningCheckSatisfiableFinding`](crate::types::AutomatedReasoningCheckSatisfiableFinding).
    pub fn build(self) -> crate::types::AutomatedReasoningCheckSatisfiableFinding {
        crate::types::AutomatedReasoningCheckSatisfiableFinding {
            translation: self.translation,
            claims_true_scenario: self.claims_true_scenario,
            claims_false_scenario: self.claims_false_scenario,
            logic_warning: self.logic_warning,
        }
    }
}
