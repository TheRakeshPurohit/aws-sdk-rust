// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An annotation for managing values within custom types, including adding, updating, or removing specific type values.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum AutomatedReasoningPolicyTypeValueAnnotation {
    /// <p>An operation to add a new value to an existing custom type.</p>
    AddTypeValue(crate::types::AutomatedReasoningPolicyAddTypeValue),
    /// <p>An operation to remove a value from an existing custom type.</p>
    DeleteTypeValue(crate::types::AutomatedReasoningPolicyDeleteTypeValue),
    /// <p>An operation to modify an existing value within a custom type.</p>
    UpdateTypeValue(crate::types::AutomatedReasoningPolicyUpdateTypeValue),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl AutomatedReasoningPolicyTypeValueAnnotation {
    /// Tries to convert the enum instance into [`AddTypeValue`](crate::types::AutomatedReasoningPolicyTypeValueAnnotation::AddTypeValue), extracting the inner [`AutomatedReasoningPolicyAddTypeValue`](crate::types::AutomatedReasoningPolicyAddTypeValue).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_add_type_value(&self) -> ::std::result::Result<&crate::types::AutomatedReasoningPolicyAddTypeValue, &Self> {
        if let AutomatedReasoningPolicyTypeValueAnnotation::AddTypeValue(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`AddTypeValue`](crate::types::AutomatedReasoningPolicyTypeValueAnnotation::AddTypeValue).
    pub fn is_add_type_value(&self) -> bool {
        self.as_add_type_value().is_ok()
    }
    /// Tries to convert the enum instance into [`DeleteTypeValue`](crate::types::AutomatedReasoningPolicyTypeValueAnnotation::DeleteTypeValue), extracting the inner [`AutomatedReasoningPolicyDeleteTypeValue`](crate::types::AutomatedReasoningPolicyDeleteTypeValue).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_delete_type_value(&self) -> ::std::result::Result<&crate::types::AutomatedReasoningPolicyDeleteTypeValue, &Self> {
        if let AutomatedReasoningPolicyTypeValueAnnotation::DeleteTypeValue(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`DeleteTypeValue`](crate::types::AutomatedReasoningPolicyTypeValueAnnotation::DeleteTypeValue).
    pub fn is_delete_type_value(&self) -> bool {
        self.as_delete_type_value().is_ok()
    }
    /// Tries to convert the enum instance into [`UpdateTypeValue`](crate::types::AutomatedReasoningPolicyTypeValueAnnotation::UpdateTypeValue), extracting the inner [`AutomatedReasoningPolicyUpdateTypeValue`](crate::types::AutomatedReasoningPolicyUpdateTypeValue).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_update_type_value(&self) -> ::std::result::Result<&crate::types::AutomatedReasoningPolicyUpdateTypeValue, &Self> {
        if let AutomatedReasoningPolicyTypeValueAnnotation::UpdateTypeValue(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`UpdateTypeValue`](crate::types::AutomatedReasoningPolicyTypeValueAnnotation::UpdateTypeValue).
    pub fn is_update_type_value(&self) -> bool {
        self.as_update_type_value().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
