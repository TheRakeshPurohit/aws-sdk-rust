// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides a summary of a policy build workflow, including its current status, timing information, and key identifiers.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AutomatedReasoningPolicyBuildWorkflowSummary {
    /// <p>The Amazon Resource Name (ARN) of the Automated Reasoning policy associated with this build workflow.</p>
    pub policy_arn: ::std::string::String,
    /// <p>The unique identifier of the build workflow.</p>
    pub build_workflow_id: ::std::string::String,
    /// <p>The current status of the build workflow (e.g., RUNNING, COMPLETED, FAILED, CANCELLED).</p>
    pub status: crate::types::AutomatedReasoningPolicyBuildWorkflowStatus,
    /// <p>The type of build workflow (e.g., DOCUMENT_INGESTION, POLICY_REPAIR).</p>
    pub build_workflow_type: crate::types::AutomatedReasoningPolicyBuildWorkflowType,
    /// <p>The timestamp when the build workflow was created.</p>
    pub created_at: ::aws_smithy_types::DateTime,
    /// <p>The timestamp when the build workflow was last updated.</p>
    pub updated_at: ::aws_smithy_types::DateTime,
}
impl AutomatedReasoningPolicyBuildWorkflowSummary {
    /// <p>The Amazon Resource Name (ARN) of the Automated Reasoning policy associated with this build workflow.</p>
    pub fn policy_arn(&self) -> &str {
        use std::ops::Deref;
        self.policy_arn.deref()
    }
    /// <p>The unique identifier of the build workflow.</p>
    pub fn build_workflow_id(&self) -> &str {
        use std::ops::Deref;
        self.build_workflow_id.deref()
    }
    /// <p>The current status of the build workflow (e.g., RUNNING, COMPLETED, FAILED, CANCELLED).</p>
    pub fn status(&self) -> &crate::types::AutomatedReasoningPolicyBuildWorkflowStatus {
        &self.status
    }
    /// <p>The type of build workflow (e.g., DOCUMENT_INGESTION, POLICY_REPAIR).</p>
    pub fn build_workflow_type(&self) -> &crate::types::AutomatedReasoningPolicyBuildWorkflowType {
        &self.build_workflow_type
    }
    /// <p>The timestamp when the build workflow was created.</p>
    pub fn created_at(&self) -> &::aws_smithy_types::DateTime {
        &self.created_at
    }
    /// <p>The timestamp when the build workflow was last updated.</p>
    pub fn updated_at(&self) -> &::aws_smithy_types::DateTime {
        &self.updated_at
    }
}
impl AutomatedReasoningPolicyBuildWorkflowSummary {
    /// Creates a new builder-style object to manufacture [`AutomatedReasoningPolicyBuildWorkflowSummary`](crate::types::AutomatedReasoningPolicyBuildWorkflowSummary).
    pub fn builder() -> crate::types::builders::AutomatedReasoningPolicyBuildWorkflowSummaryBuilder {
        crate::types::builders::AutomatedReasoningPolicyBuildWorkflowSummaryBuilder::default()
    }
}

/// A builder for [`AutomatedReasoningPolicyBuildWorkflowSummary`](crate::types::AutomatedReasoningPolicyBuildWorkflowSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AutomatedReasoningPolicyBuildWorkflowSummaryBuilder {
    pub(crate) policy_arn: ::std::option::Option<::std::string::String>,
    pub(crate) build_workflow_id: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::AutomatedReasoningPolicyBuildWorkflowStatus>,
    pub(crate) build_workflow_type: ::std::option::Option<crate::types::AutomatedReasoningPolicyBuildWorkflowType>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl AutomatedReasoningPolicyBuildWorkflowSummaryBuilder {
    /// <p>The Amazon Resource Name (ARN) of the Automated Reasoning policy associated with this build workflow.</p>
    /// This field is required.
    pub fn policy_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.policy_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Automated Reasoning policy associated with this build workflow.</p>
    pub fn set_policy_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.policy_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Automated Reasoning policy associated with this build workflow.</p>
    pub fn get_policy_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.policy_arn
    }
    /// <p>The unique identifier of the build workflow.</p>
    /// This field is required.
    pub fn build_workflow_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.build_workflow_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the build workflow.</p>
    pub fn set_build_workflow_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.build_workflow_id = input;
        self
    }
    /// <p>The unique identifier of the build workflow.</p>
    pub fn get_build_workflow_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.build_workflow_id
    }
    /// <p>The current status of the build workflow (e.g., RUNNING, COMPLETED, FAILED, CANCELLED).</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::AutomatedReasoningPolicyBuildWorkflowStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the build workflow (e.g., RUNNING, COMPLETED, FAILED, CANCELLED).</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::AutomatedReasoningPolicyBuildWorkflowStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status of the build workflow (e.g., RUNNING, COMPLETED, FAILED, CANCELLED).</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::AutomatedReasoningPolicyBuildWorkflowStatus> {
        &self.status
    }
    /// <p>The type of build workflow (e.g., DOCUMENT_INGESTION, POLICY_REPAIR).</p>
    /// This field is required.
    pub fn build_workflow_type(mut self, input: crate::types::AutomatedReasoningPolicyBuildWorkflowType) -> Self {
        self.build_workflow_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of build workflow (e.g., DOCUMENT_INGESTION, POLICY_REPAIR).</p>
    pub fn set_build_workflow_type(mut self, input: ::std::option::Option<crate::types::AutomatedReasoningPolicyBuildWorkflowType>) -> Self {
        self.build_workflow_type = input;
        self
    }
    /// <p>The type of build workflow (e.g., DOCUMENT_INGESTION, POLICY_REPAIR).</p>
    pub fn get_build_workflow_type(&self) -> &::std::option::Option<crate::types::AutomatedReasoningPolicyBuildWorkflowType> {
        &self.build_workflow_type
    }
    /// <p>The timestamp when the build workflow was created.</p>
    /// This field is required.
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the build workflow was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The timestamp when the build workflow was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The timestamp when the build workflow was last updated.</p>
    /// This field is required.
    pub fn updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the build workflow was last updated.</p>
    pub fn set_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>The timestamp when the build workflow was last updated.</p>
    pub fn get_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_at
    }
    /// Consumes the builder and constructs a [`AutomatedReasoningPolicyBuildWorkflowSummary`](crate::types::AutomatedReasoningPolicyBuildWorkflowSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`policy_arn`](crate::types::builders::AutomatedReasoningPolicyBuildWorkflowSummaryBuilder::policy_arn)
    /// - [`build_workflow_id`](crate::types::builders::AutomatedReasoningPolicyBuildWorkflowSummaryBuilder::build_workflow_id)
    /// - [`status`](crate::types::builders::AutomatedReasoningPolicyBuildWorkflowSummaryBuilder::status)
    /// - [`build_workflow_type`](crate::types::builders::AutomatedReasoningPolicyBuildWorkflowSummaryBuilder::build_workflow_type)
    /// - [`created_at`](crate::types::builders::AutomatedReasoningPolicyBuildWorkflowSummaryBuilder::created_at)
    /// - [`updated_at`](crate::types::builders::AutomatedReasoningPolicyBuildWorkflowSummaryBuilder::updated_at)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::AutomatedReasoningPolicyBuildWorkflowSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AutomatedReasoningPolicyBuildWorkflowSummary {
            policy_arn: self.policy_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "policy_arn",
                    "policy_arn was not specified but it is required when building AutomatedReasoningPolicyBuildWorkflowSummary",
                )
            })?,
            build_workflow_id: self.build_workflow_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "build_workflow_id",
                    "build_workflow_id was not specified but it is required when building AutomatedReasoningPolicyBuildWorkflowSummary",
                )
            })?,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building AutomatedReasoningPolicyBuildWorkflowSummary",
                )
            })?,
            build_workflow_type: self.build_workflow_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "build_workflow_type",
                    "build_workflow_type was not specified but it is required when building AutomatedReasoningPolicyBuildWorkflowSummary",
                )
            })?,
            created_at: self.created_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_at",
                    "created_at was not specified but it is required when building AutomatedReasoningPolicyBuildWorkflowSummary",
                )
            })?,
            updated_at: self.updated_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "updated_at",
                    "updated_at was not specified but it is required when building AutomatedReasoningPolicyBuildWorkflowSummary",
                )
            })?,
        })
    }
}
