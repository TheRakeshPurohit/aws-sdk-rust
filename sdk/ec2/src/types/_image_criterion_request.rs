// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The criteria that are evaluated to determine which AMIs are discoverable and usable in your account for the specified Amazon Web Services Region.</p>
/// <p>The <code>ImageCriteria</code> can include up to:</p>
/// <ul>
/// <li>
/// <p>10 <code>ImageCriterion</code></p></li>
/// </ul>
/// <p>Each <code>ImageCriterion</code> can include up to:</p>
/// <ul>
/// <li>
/// <p>200 values for <code>ImageProviders</code></p></li>
/// <li>
/// <p>50 values for <code>ImageNames</code></p></li>
/// <li>
/// <p>50 values for <code>MarketplaceProductCodes</code></p></li>
/// </ul>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-allowed-amis.html#how-allowed-amis-works">How Allowed AMIs works</a> in the <i>Amazon EC2 User Guide</i>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ImageCriterionRequest {
    /// <p>The image providers whose images are allowed.</p>
    /// <p>Possible values:</p>
    /// <ul>
    /// <li>
    /// <p><code>amazon</code>: Allow AMIs created by Amazon or verified providers.</p></li>
    /// <li>
    /// <p><code>aws-marketplace</code>: Allow AMIs created by verified providers in the Amazon Web Services Marketplace.</p></li>
    /// <li>
    /// <p><code>aws-backup-vault</code>: Allow AMIs created by Amazon Web Services Backup.</p></li>
    /// <li>
    /// <p>12-digit account ID: Allow AMIs created by the specified accounts. One or more account IDs can be specified.</p></li>
    /// <li>
    /// <p><code>none</code>: Allow AMIs created by your own account only. When <code>none</code> is specified, no other values can be specified.</p></li>
    /// </ul>
    /// <p>Maximum: 200 values</p>
    pub image_providers: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The Amazon Web Services Marketplace product codes for allowed images.</p>
    /// <p>Length: 1-25 characters</p>
    /// <p>Valid characters: Letters (<code>A–Z, a–z</code>) and numbers (<code>0–9</code>)</p>
    /// <p>Maximum: 50 values</p>
    pub marketplace_product_codes: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The names of allowed images. Names can include wildcards (<code>?</code> and <code>*</code>).</p>
    /// <p>Length: 1–128 characters. With <code>?</code>, the minimum is 3 characters.</p>
    /// <p>Valid characters:</p>
    /// <ul>
    /// <li>
    /// <p>Letters: <code>A–Z, a–z</code></p></li>
    /// <li>
    /// <p>Numbers: <code>0–9</code></p></li>
    /// <li>
    /// <p>Special characters: <code>( ) \[ \] . / - ' @ _ * ?</code></p></li>
    /// <li>
    /// <p>Spaces</p></li>
    /// </ul>
    /// <p>Maximum: 50 values</p>
    pub image_names: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The maximum period since deprecation for allowed images.</p>
    pub deprecation_time_condition: ::std::option::Option<crate::types::DeprecationTimeConditionRequest>,
    /// <p>The maximum age for allowed images.</p>
    pub creation_date_condition: ::std::option::Option<crate::types::CreationDateConditionRequest>,
}
impl ImageCriterionRequest {
    /// <p>The image providers whose images are allowed.</p>
    /// <p>Possible values:</p>
    /// <ul>
    /// <li>
    /// <p><code>amazon</code>: Allow AMIs created by Amazon or verified providers.</p></li>
    /// <li>
    /// <p><code>aws-marketplace</code>: Allow AMIs created by verified providers in the Amazon Web Services Marketplace.</p></li>
    /// <li>
    /// <p><code>aws-backup-vault</code>: Allow AMIs created by Amazon Web Services Backup.</p></li>
    /// <li>
    /// <p>12-digit account ID: Allow AMIs created by the specified accounts. One or more account IDs can be specified.</p></li>
    /// <li>
    /// <p><code>none</code>: Allow AMIs created by your own account only. When <code>none</code> is specified, no other values can be specified.</p></li>
    /// </ul>
    /// <p>Maximum: 200 values</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.image_providers.is_none()`.
    pub fn image_providers(&self) -> &[::std::string::String] {
        self.image_providers.as_deref().unwrap_or_default()
    }
    /// <p>The Amazon Web Services Marketplace product codes for allowed images.</p>
    /// <p>Length: 1-25 characters</p>
    /// <p>Valid characters: Letters (<code>A–Z, a–z</code>) and numbers (<code>0–9</code>)</p>
    /// <p>Maximum: 50 values</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.marketplace_product_codes.is_none()`.
    pub fn marketplace_product_codes(&self) -> &[::std::string::String] {
        self.marketplace_product_codes.as_deref().unwrap_or_default()
    }
    /// <p>The names of allowed images. Names can include wildcards (<code>?</code> and <code>*</code>).</p>
    /// <p>Length: 1–128 characters. With <code>?</code>, the minimum is 3 characters.</p>
    /// <p>Valid characters:</p>
    /// <ul>
    /// <li>
    /// <p>Letters: <code>A–Z, a–z</code></p></li>
    /// <li>
    /// <p>Numbers: <code>0–9</code></p></li>
    /// <li>
    /// <p>Special characters: <code>( ) \[ \] . / - ' @ _ * ?</code></p></li>
    /// <li>
    /// <p>Spaces</p></li>
    /// </ul>
    /// <p>Maximum: 50 values</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.image_names.is_none()`.
    pub fn image_names(&self) -> &[::std::string::String] {
        self.image_names.as_deref().unwrap_or_default()
    }
    /// <p>The maximum period since deprecation for allowed images.</p>
    pub fn deprecation_time_condition(&self) -> ::std::option::Option<&crate::types::DeprecationTimeConditionRequest> {
        self.deprecation_time_condition.as_ref()
    }
    /// <p>The maximum age for allowed images.</p>
    pub fn creation_date_condition(&self) -> ::std::option::Option<&crate::types::CreationDateConditionRequest> {
        self.creation_date_condition.as_ref()
    }
}
impl ImageCriterionRequest {
    /// Creates a new builder-style object to manufacture [`ImageCriterionRequest`](crate::types::ImageCriterionRequest).
    pub fn builder() -> crate::types::builders::ImageCriterionRequestBuilder {
        crate::types::builders::ImageCriterionRequestBuilder::default()
    }
}

/// A builder for [`ImageCriterionRequest`](crate::types::ImageCriterionRequest).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ImageCriterionRequestBuilder {
    pub(crate) image_providers: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) marketplace_product_codes: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) image_names: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) deprecation_time_condition: ::std::option::Option<crate::types::DeprecationTimeConditionRequest>,
    pub(crate) creation_date_condition: ::std::option::Option<crate::types::CreationDateConditionRequest>,
}
impl ImageCriterionRequestBuilder {
    /// Appends an item to `image_providers`.
    ///
    /// To override the contents of this collection use [`set_image_providers`](Self::set_image_providers).
    ///
    /// <p>The image providers whose images are allowed.</p>
    /// <p>Possible values:</p>
    /// <ul>
    /// <li>
    /// <p><code>amazon</code>: Allow AMIs created by Amazon or verified providers.</p></li>
    /// <li>
    /// <p><code>aws-marketplace</code>: Allow AMIs created by verified providers in the Amazon Web Services Marketplace.</p></li>
    /// <li>
    /// <p><code>aws-backup-vault</code>: Allow AMIs created by Amazon Web Services Backup.</p></li>
    /// <li>
    /// <p>12-digit account ID: Allow AMIs created by the specified accounts. One or more account IDs can be specified.</p></li>
    /// <li>
    /// <p><code>none</code>: Allow AMIs created by your own account only. When <code>none</code> is specified, no other values can be specified.</p></li>
    /// </ul>
    /// <p>Maximum: 200 values</p>
    pub fn image_providers(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.image_providers.unwrap_or_default();
        v.push(input.into());
        self.image_providers = ::std::option::Option::Some(v);
        self
    }
    /// <p>The image providers whose images are allowed.</p>
    /// <p>Possible values:</p>
    /// <ul>
    /// <li>
    /// <p><code>amazon</code>: Allow AMIs created by Amazon or verified providers.</p></li>
    /// <li>
    /// <p><code>aws-marketplace</code>: Allow AMIs created by verified providers in the Amazon Web Services Marketplace.</p></li>
    /// <li>
    /// <p><code>aws-backup-vault</code>: Allow AMIs created by Amazon Web Services Backup.</p></li>
    /// <li>
    /// <p>12-digit account ID: Allow AMIs created by the specified accounts. One or more account IDs can be specified.</p></li>
    /// <li>
    /// <p><code>none</code>: Allow AMIs created by your own account only. When <code>none</code> is specified, no other values can be specified.</p></li>
    /// </ul>
    /// <p>Maximum: 200 values</p>
    pub fn set_image_providers(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.image_providers = input;
        self
    }
    /// <p>The image providers whose images are allowed.</p>
    /// <p>Possible values:</p>
    /// <ul>
    /// <li>
    /// <p><code>amazon</code>: Allow AMIs created by Amazon or verified providers.</p></li>
    /// <li>
    /// <p><code>aws-marketplace</code>: Allow AMIs created by verified providers in the Amazon Web Services Marketplace.</p></li>
    /// <li>
    /// <p><code>aws-backup-vault</code>: Allow AMIs created by Amazon Web Services Backup.</p></li>
    /// <li>
    /// <p>12-digit account ID: Allow AMIs created by the specified accounts. One or more account IDs can be specified.</p></li>
    /// <li>
    /// <p><code>none</code>: Allow AMIs created by your own account only. When <code>none</code> is specified, no other values can be specified.</p></li>
    /// </ul>
    /// <p>Maximum: 200 values</p>
    pub fn get_image_providers(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.image_providers
    }
    /// Appends an item to `marketplace_product_codes`.
    ///
    /// To override the contents of this collection use [`set_marketplace_product_codes`](Self::set_marketplace_product_codes).
    ///
    /// <p>The Amazon Web Services Marketplace product codes for allowed images.</p>
    /// <p>Length: 1-25 characters</p>
    /// <p>Valid characters: Letters (<code>A–Z, a–z</code>) and numbers (<code>0–9</code>)</p>
    /// <p>Maximum: 50 values</p>
    pub fn marketplace_product_codes(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.marketplace_product_codes.unwrap_or_default();
        v.push(input.into());
        self.marketplace_product_codes = ::std::option::Option::Some(v);
        self
    }
    /// <p>The Amazon Web Services Marketplace product codes for allowed images.</p>
    /// <p>Length: 1-25 characters</p>
    /// <p>Valid characters: Letters (<code>A–Z, a–z</code>) and numbers (<code>0–9</code>)</p>
    /// <p>Maximum: 50 values</p>
    pub fn set_marketplace_product_codes(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.marketplace_product_codes = input;
        self
    }
    /// <p>The Amazon Web Services Marketplace product codes for allowed images.</p>
    /// <p>Length: 1-25 characters</p>
    /// <p>Valid characters: Letters (<code>A–Z, a–z</code>) and numbers (<code>0–9</code>)</p>
    /// <p>Maximum: 50 values</p>
    pub fn get_marketplace_product_codes(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.marketplace_product_codes
    }
    /// Appends an item to `image_names`.
    ///
    /// To override the contents of this collection use [`set_image_names`](Self::set_image_names).
    ///
    /// <p>The names of allowed images. Names can include wildcards (<code>?</code> and <code>*</code>).</p>
    /// <p>Length: 1–128 characters. With <code>?</code>, the minimum is 3 characters.</p>
    /// <p>Valid characters:</p>
    /// <ul>
    /// <li>
    /// <p>Letters: <code>A–Z, a–z</code></p></li>
    /// <li>
    /// <p>Numbers: <code>0–9</code></p></li>
    /// <li>
    /// <p>Special characters: <code>( ) \[ \] . / - ' @ _ * ?</code></p></li>
    /// <li>
    /// <p>Spaces</p></li>
    /// </ul>
    /// <p>Maximum: 50 values</p>
    pub fn image_names(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.image_names.unwrap_or_default();
        v.push(input.into());
        self.image_names = ::std::option::Option::Some(v);
        self
    }
    /// <p>The names of allowed images. Names can include wildcards (<code>?</code> and <code>*</code>).</p>
    /// <p>Length: 1–128 characters. With <code>?</code>, the minimum is 3 characters.</p>
    /// <p>Valid characters:</p>
    /// <ul>
    /// <li>
    /// <p>Letters: <code>A–Z, a–z</code></p></li>
    /// <li>
    /// <p>Numbers: <code>0–9</code></p></li>
    /// <li>
    /// <p>Special characters: <code>( ) \[ \] . / - ' @ _ * ?</code></p></li>
    /// <li>
    /// <p>Spaces</p></li>
    /// </ul>
    /// <p>Maximum: 50 values</p>
    pub fn set_image_names(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.image_names = input;
        self
    }
    /// <p>The names of allowed images. Names can include wildcards (<code>?</code> and <code>*</code>).</p>
    /// <p>Length: 1–128 characters. With <code>?</code>, the minimum is 3 characters.</p>
    /// <p>Valid characters:</p>
    /// <ul>
    /// <li>
    /// <p>Letters: <code>A–Z, a–z</code></p></li>
    /// <li>
    /// <p>Numbers: <code>0–9</code></p></li>
    /// <li>
    /// <p>Special characters: <code>( ) \[ \] . / - ' @ _ * ?</code></p></li>
    /// <li>
    /// <p>Spaces</p></li>
    /// </ul>
    /// <p>Maximum: 50 values</p>
    pub fn get_image_names(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.image_names
    }
    /// <p>The maximum period since deprecation for allowed images.</p>
    pub fn deprecation_time_condition(mut self, input: crate::types::DeprecationTimeConditionRequest) -> Self {
        self.deprecation_time_condition = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum period since deprecation for allowed images.</p>
    pub fn set_deprecation_time_condition(mut self, input: ::std::option::Option<crate::types::DeprecationTimeConditionRequest>) -> Self {
        self.deprecation_time_condition = input;
        self
    }
    /// <p>The maximum period since deprecation for allowed images.</p>
    pub fn get_deprecation_time_condition(&self) -> &::std::option::Option<crate::types::DeprecationTimeConditionRequest> {
        &self.deprecation_time_condition
    }
    /// <p>The maximum age for allowed images.</p>
    pub fn creation_date_condition(mut self, input: crate::types::CreationDateConditionRequest) -> Self {
        self.creation_date_condition = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum age for allowed images.</p>
    pub fn set_creation_date_condition(mut self, input: ::std::option::Option<crate::types::CreationDateConditionRequest>) -> Self {
        self.creation_date_condition = input;
        self
    }
    /// <p>The maximum age for allowed images.</p>
    pub fn get_creation_date_condition(&self) -> &::std::option::Option<crate::types::CreationDateConditionRequest> {
        &self.creation_date_condition
    }
    /// Consumes the builder and constructs a [`ImageCriterionRequest`](crate::types::ImageCriterionRequest).
    pub fn build(self) -> crate::types::ImageCriterionRequest {
        crate::types::ImageCriterionRequest {
            image_providers: self.image_providers,
            marketplace_product_codes: self.marketplace_product_codes,
            image_names: self.image_names,
            deprecation_time_condition: self.deprecation_time_condition,
            creation_date_condition: self.creation_date_condition,
        }
    }
}
