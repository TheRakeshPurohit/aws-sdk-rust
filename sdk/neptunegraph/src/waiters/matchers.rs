// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Matcher union: {"output":{"path":"status != 'CANCELLING' && status != 'CANCELLED'","expected":"true","comparator":"booleanEquals"}}
pub(crate) fn match_get_export_task_3f820f817a7d877c1(
    _result: ::std::result::Result<&crate::operation::get_export_task::GetExportTaskOutput, &crate::operation::get_export_task::GetExportTaskError>,
) -> bool {
    fn path_traversal<'a>(_output: &'a crate::operation::get_export_task::GetExportTaskOutput) -> ::std::option::Option<bool> {
        let _fld_1 = &_output.status;
        let _tmp_8 = _fld_1.as_str();
        const _LIT_2: &str = "CANCELLING";
        let _cmp_3 = _tmp_8 != _LIT_2;
        let _fld_4 = &_output.status;
        let _tmp_9 = _fld_4.as_str();
        const _LIT_5: &str = "CANCELLED";
        let _cmp_6 = _tmp_9 != _LIT_5;
        let _bo_7 = _cmp_3 && _cmp_6;
        ::std::option::Option::Some(_bo_7)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let right = true;
            let _cmp_1 = value == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"CANCELLED","comparator":"stringEquals"}}
pub(crate) fn match_get_export_task_4ddbeb25cc5547dc0(
    _result: ::std::result::Result<&crate::operation::get_export_task::GetExportTaskOutput, &crate::operation::get_export_task::GetExportTaskError>,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_export_task::GetExportTaskOutput,
    ) -> ::std::option::Option<&'a crate::types::ExportTaskStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "CANCELLED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"CANCELLING","comparator":"stringEquals"}}
pub(crate) fn match_get_export_task_0ae5c8c61ddb0b59e(
    _result: ::std::result::Result<&crate::operation::get_export_task::GetExportTaskOutput, &crate::operation::get_export_task::GetExportTaskError>,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_export_task::GetExportTaskOutput,
    ) -> ::std::option::Option<&'a crate::types::ExportTaskStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "CANCELLING";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"FAILED","comparator":"stringEquals"}}
pub(crate) fn match_get_export_task_f9c483f08ce8cb218(
    _result: ::std::result::Result<&crate::operation::get_export_task::GetExportTaskOutput, &crate::operation::get_export_task::GetExportTaskError>,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_export_task::GetExportTaskOutput,
    ) -> ::std::option::Option<&'a crate::types::ExportTaskStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "FAILED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"SUCCEEDED","comparator":"stringEquals"}}
pub(crate) fn match_get_export_task_e109320ae7bd9fe98(
    _result: ::std::result::Result<&crate::operation::get_export_task::GetExportTaskOutput, &crate::operation::get_export_task::GetExportTaskError>,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_export_task::GetExportTaskOutput,
    ) -> ::std::option::Option<&'a crate::types::ExportTaskStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "SUCCEEDED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"DELETING","comparator":"stringEquals"}}
pub(crate) fn match_get_graph_ac9cf40eec4f10ab5(
    _result: ::std::result::Result<&crate::operation::get_graph::GetGraphOutput, &crate::operation::get_graph::GetGraphError>,
) -> bool {
    fn path_traversal<'a>(_output: &'a crate::operation::get_graph::GetGraphOutput) -> ::std::option::Option<&'a crate::types::GraphStatus> {
        let _fld_1 = _output.status.as_ref()?;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "DELETING";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"FAILED","comparator":"stringEquals"}}
pub(crate) fn match_get_graph_f9c483f08ce8cb218(
    _result: ::std::result::Result<&crate::operation::get_graph::GetGraphOutput, &crate::operation::get_graph::GetGraphError>,
) -> bool {
    fn path_traversal<'a>(_output: &'a crate::operation::get_graph::GetGraphOutput) -> ::std::option::Option<&'a crate::types::GraphStatus> {
        let _fld_1 = _output.status.as_ref()?;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "FAILED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"AVAILABLE","comparator":"stringEquals"}}
pub(crate) fn match_get_graph_c07d78a200bcd8560(
    _result: ::std::result::Result<&crate::operation::get_graph::GetGraphOutput, &crate::operation::get_graph::GetGraphError>,
) -> bool {
    fn path_traversal<'a>(_output: &'a crate::operation::get_graph::GetGraphOutput) -> ::std::option::Option<&'a crate::types::GraphStatus> {
        let _fld_1 = _output.status.as_ref()?;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "AVAILABLE";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status != 'DELETING'","expected":"true","comparator":"booleanEquals"}}
pub(crate) fn match_get_graph_36cde75d8dc473dbc(
    _result: ::std::result::Result<&crate::operation::get_graph::GetGraphOutput, &crate::operation::get_graph::GetGraphError>,
) -> bool {
    fn path_traversal<'a>(_output: &'a crate::operation::get_graph::GetGraphOutput) -> ::std::option::Option<bool> {
        let _fld_1 = _output.status.as_ref()?;
        let _tmp_4 = _fld_1.as_str();
        const _LIT_2: &str = "DELETING";
        let _cmp_3 = _tmp_4 != _LIT_2;
        ::std::option::Option::Some(_cmp_3)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let right = true;
            let _cmp_1 = value == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"errorType":"ResourceNotFoundException"}
pub(crate) fn match_get_graph_1cce2c05524fb92d4(
    _result: ::std::result::Result<&crate::operation::get_graph::GetGraphOutput, &crate::operation::get_graph::GetGraphError>,
) -> bool {
    if let ::std::result::Result::Err(err) = _result {
        if let ::std::option::Option::Some(code) = ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(err) {
            return code == "ResourceNotFoundException";
        }
    }
    false
}

/// Matcher union: {"output":{"path":"status","expected":"DELETING","comparator":"stringEquals"}}
pub(crate) fn match_get_graph_snapshot_ac9cf40eec4f10ab5(
    _result: ::std::result::Result<
        &crate::operation::get_graph_snapshot::GetGraphSnapshotOutput,
        &crate::operation::get_graph_snapshot::GetGraphSnapshotError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_graph_snapshot::GetGraphSnapshotOutput,
    ) -> ::std::option::Option<&'a crate::types::SnapshotStatus> {
        let _fld_1 = _output.status.as_ref()?;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "DELETING";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"FAILED","comparator":"stringEquals"}}
pub(crate) fn match_get_graph_snapshot_f9c483f08ce8cb218(
    _result: ::std::result::Result<
        &crate::operation::get_graph_snapshot::GetGraphSnapshotOutput,
        &crate::operation::get_graph_snapshot::GetGraphSnapshotError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_graph_snapshot::GetGraphSnapshotOutput,
    ) -> ::std::option::Option<&'a crate::types::SnapshotStatus> {
        let _fld_1 = _output.status.as_ref()?;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "FAILED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"AVAILABLE","comparator":"stringEquals"}}
pub(crate) fn match_get_graph_snapshot_c07d78a200bcd8560(
    _result: ::std::result::Result<
        &crate::operation::get_graph_snapshot::GetGraphSnapshotOutput,
        &crate::operation::get_graph_snapshot::GetGraphSnapshotError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_graph_snapshot::GetGraphSnapshotOutput,
    ) -> ::std::option::Option<&'a crate::types::SnapshotStatus> {
        let _fld_1 = _output.status.as_ref()?;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "AVAILABLE";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status != 'DELETING'","expected":"true","comparator":"booleanEquals"}}
pub(crate) fn match_get_graph_snapshot_36cde75d8dc473dbc(
    _result: ::std::result::Result<
        &crate::operation::get_graph_snapshot::GetGraphSnapshotOutput,
        &crate::operation::get_graph_snapshot::GetGraphSnapshotError,
    >,
) -> bool {
    fn path_traversal<'a>(_output: &'a crate::operation::get_graph_snapshot::GetGraphSnapshotOutput) -> ::std::option::Option<bool> {
        let _fld_1 = _output.status.as_ref()?;
        let _tmp_4 = _fld_1.as_str();
        const _LIT_2: &str = "DELETING";
        let _cmp_3 = _tmp_4 != _LIT_2;
        ::std::option::Option::Some(_cmp_3)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let right = true;
            let _cmp_1 = value == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"errorType":"ResourceNotFoundException"}
pub(crate) fn match_get_graph_snapshot_1cce2c05524fb92d4(
    _result: ::std::result::Result<
        &crate::operation::get_graph_snapshot::GetGraphSnapshotOutput,
        &crate::operation::get_graph_snapshot::GetGraphSnapshotError,
    >,
) -> bool {
    if let ::std::result::Result::Err(err) = _result {
        if let ::std::option::Option::Some(code) = ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(err) {
            return code == "ResourceNotFoundException";
        }
    }
    false
}

/// Matcher union: {"output":{"path":"status","expected":"STOPPED","comparator":"stringEquals"}}
pub(crate) fn match_get_graph_752e7f99f3bc7dc47(
    _result: ::std::result::Result<&crate::operation::get_graph::GetGraphOutput, &crate::operation::get_graph::GetGraphError>,
) -> bool {
    fn path_traversal<'a>(_output: &'a crate::operation::get_graph::GetGraphOutput) -> ::std::option::Option<&'a crate::types::GraphStatus> {
        let _fld_1 = _output.status.as_ref()?;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "STOPPED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status != 'STOPPING'","expected":"true","comparator":"booleanEquals"}}
pub(crate) fn match_get_graph_51e3423ce4acc8538(
    _result: ::std::result::Result<&crate::operation::get_graph::GetGraphOutput, &crate::operation::get_graph::GetGraphError>,
) -> bool {
    fn path_traversal<'a>(_output: &'a crate::operation::get_graph::GetGraphOutput) -> ::std::option::Option<bool> {
        let _fld_1 = _output.status.as_ref()?;
        let _tmp_4 = _fld_1.as_str();
        const _LIT_2: &str = "STOPPING";
        let _cmp_3 = _tmp_4 != _LIT_2;
        ::std::option::Option::Some(_cmp_3)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let right = true;
            let _cmp_1 = value == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status != 'CANCELLING' && status != 'CANCELLED'","expected":"true","comparator":"booleanEquals"}}
pub(crate) fn match_get_import_task_3f820f817a7d877c1(
    _result: ::std::result::Result<&crate::operation::get_import_task::GetImportTaskOutput, &crate::operation::get_import_task::GetImportTaskError>,
) -> bool {
    fn path_traversal<'a>(_output: &'a crate::operation::get_import_task::GetImportTaskOutput) -> ::std::option::Option<bool> {
        let _fld_1 = &_output.status;
        let _tmp_8 = _fld_1.as_str();
        const _LIT_2: &str = "CANCELLING";
        let _cmp_3 = _tmp_8 != _LIT_2;
        let _fld_4 = &_output.status;
        let _tmp_9 = _fld_4.as_str();
        const _LIT_5: &str = "CANCELLED";
        let _cmp_6 = _tmp_9 != _LIT_5;
        let _bo_7 = _cmp_3 && _cmp_6;
        ::std::option::Option::Some(_bo_7)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let right = true;
            let _cmp_1 = value == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"CANCELLED","comparator":"stringEquals"}}
pub(crate) fn match_get_import_task_4ddbeb25cc5547dc0(
    _result: ::std::result::Result<&crate::operation::get_import_task::GetImportTaskOutput, &crate::operation::get_import_task::GetImportTaskError>,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_import_task::GetImportTaskOutput,
    ) -> ::std::option::Option<&'a crate::types::ImportTaskStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "CANCELLED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"CANCELLING","comparator":"stringEquals"}}
pub(crate) fn match_get_import_task_0ae5c8c61ddb0b59e(
    _result: ::std::result::Result<&crate::operation::get_import_task::GetImportTaskOutput, &crate::operation::get_import_task::GetImportTaskError>,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_import_task::GetImportTaskOutput,
    ) -> ::std::option::Option<&'a crate::types::ImportTaskStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "CANCELLING";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"ROLLING_BACK","comparator":"stringEquals"}}
pub(crate) fn match_get_import_task_ccf6617f1beb5de7c(
    _result: ::std::result::Result<&crate::operation::get_import_task::GetImportTaskOutput, &crate::operation::get_import_task::GetImportTaskError>,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_import_task::GetImportTaskOutput,
    ) -> ::std::option::Option<&'a crate::types::ImportTaskStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "ROLLING_BACK";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"FAILED","comparator":"stringEquals"}}
pub(crate) fn match_get_import_task_f9c483f08ce8cb218(
    _result: ::std::result::Result<&crate::operation::get_import_task::GetImportTaskOutput, &crate::operation::get_import_task::GetImportTaskError>,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_import_task::GetImportTaskOutput,
    ) -> ::std::option::Option<&'a crate::types::ImportTaskStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "FAILED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"SUCCEEDED","comparator":"stringEquals"}}
pub(crate) fn match_get_import_task_e109320ae7bd9fe98(
    _result: ::std::result::Result<&crate::operation::get_import_task::GetImportTaskOutput, &crate::operation::get_import_task::GetImportTaskError>,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_import_task::GetImportTaskOutput,
    ) -> ::std::option::Option<&'a crate::types::ImportTaskStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "SUCCEEDED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"DELETING","comparator":"stringEquals"}}
pub(crate) fn match_get_private_graph_endpoint_ac9cf40eec4f10ab5(
    _result: ::std::result::Result<
        &crate::operation::get_private_graph_endpoint::GetPrivateGraphEndpointOutput,
        &crate::operation::get_private_graph_endpoint::GetPrivateGraphEndpointError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_private_graph_endpoint::GetPrivateGraphEndpointOutput,
    ) -> ::std::option::Option<&'a crate::types::PrivateGraphEndpointStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "DELETING";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"FAILED","comparator":"stringEquals"}}
pub(crate) fn match_get_private_graph_endpoint_f9c483f08ce8cb218(
    _result: ::std::result::Result<
        &crate::operation::get_private_graph_endpoint::GetPrivateGraphEndpointOutput,
        &crate::operation::get_private_graph_endpoint::GetPrivateGraphEndpointError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_private_graph_endpoint::GetPrivateGraphEndpointOutput,
    ) -> ::std::option::Option<&'a crate::types::PrivateGraphEndpointStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "FAILED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"AVAILABLE","comparator":"stringEquals"}}
pub(crate) fn match_get_private_graph_endpoint_c07d78a200bcd8560(
    _result: ::std::result::Result<
        &crate::operation::get_private_graph_endpoint::GetPrivateGraphEndpointOutput,
        &crate::operation::get_private_graph_endpoint::GetPrivateGraphEndpointError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_private_graph_endpoint::GetPrivateGraphEndpointOutput,
    ) -> ::std::option::Option<&'a crate::types::PrivateGraphEndpointStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "AVAILABLE";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status != 'DELETING'","expected":"true","comparator":"booleanEquals"}}
pub(crate) fn match_get_private_graph_endpoint_36cde75d8dc473dbc(
    _result: ::std::result::Result<
        &crate::operation::get_private_graph_endpoint::GetPrivateGraphEndpointOutput,
        &crate::operation::get_private_graph_endpoint::GetPrivateGraphEndpointError,
    >,
) -> bool {
    fn path_traversal<'a>(_output: &'a crate::operation::get_private_graph_endpoint::GetPrivateGraphEndpointOutput) -> ::std::option::Option<bool> {
        let _fld_1 = &_output.status;
        let _tmp_4 = _fld_1.as_str();
        const _LIT_2: &str = "DELETING";
        let _cmp_3 = _tmp_4 != _LIT_2;
        ::std::option::Option::Some(_cmp_3)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let right = true;
            let _cmp_1 = value == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"errorType":"ResourceNotFoundException"}
pub(crate) fn match_get_private_graph_endpoint_1cce2c05524fb92d4(
    _result: ::std::result::Result<
        &crate::operation::get_private_graph_endpoint::GetPrivateGraphEndpointOutput,
        &crate::operation::get_private_graph_endpoint::GetPrivateGraphEndpointError,
    >,
) -> bool {
    if let ::std::result::Result::Err(err) = _result {
        if let ::std::option::Option::Some(code) = ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(err) {
            return code == "ResourceNotFoundException";
        }
    }
    false
}
