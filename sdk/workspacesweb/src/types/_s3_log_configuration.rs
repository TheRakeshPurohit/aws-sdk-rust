// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The S3 log configuration.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct S3LogConfiguration {
    /// <p>The S3 bucket name where logs are delivered.</p>
    pub bucket: ::std::string::String,
    /// <p>The S3 path prefix that determines where log files are stored.</p>
    pub key_prefix: ::std::option::Option<::std::string::String>,
    /// <p>The expected bucket owner of the target S3 bucket. The caller must have permissions to write to the target bucket.</p>
    pub bucket_owner: ::std::option::Option<::std::string::String>,
    /// <p>The format of the LogFile that is written to S3.</p>
    pub log_file_format: crate::types::LogFileFormat,
    /// <p>The folder structure that defines the organizational structure for log files in S3.</p>
    pub folder_structure: crate::types::FolderStructure,
}
impl S3LogConfiguration {
    /// <p>The S3 bucket name where logs are delivered.</p>
    pub fn bucket(&self) -> &str {
        use std::ops::Deref;
        self.bucket.deref()
    }
    /// <p>The S3 path prefix that determines where log files are stored.</p>
    pub fn key_prefix(&self) -> ::std::option::Option<&str> {
        self.key_prefix.as_deref()
    }
    /// <p>The expected bucket owner of the target S3 bucket. The caller must have permissions to write to the target bucket.</p>
    pub fn bucket_owner(&self) -> ::std::option::Option<&str> {
        self.bucket_owner.as_deref()
    }
    /// <p>The format of the LogFile that is written to S3.</p>
    pub fn log_file_format(&self) -> &crate::types::LogFileFormat {
        &self.log_file_format
    }
    /// <p>The folder structure that defines the organizational structure for log files in S3.</p>
    pub fn folder_structure(&self) -> &crate::types::FolderStructure {
        &self.folder_structure
    }
}
impl ::std::fmt::Debug for S3LogConfiguration {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("S3LogConfiguration");
        formatter.field("bucket", &"*** Sensitive Data Redacted ***");
        formatter.field("key_prefix", &"*** Sensitive Data Redacted ***");
        formatter.field("bucket_owner", &self.bucket_owner);
        formatter.field("log_file_format", &self.log_file_format);
        formatter.field("folder_structure", &self.folder_structure);
        formatter.finish()
    }
}
impl S3LogConfiguration {
    /// Creates a new builder-style object to manufacture [`S3LogConfiguration`](crate::types::S3LogConfiguration).
    pub fn builder() -> crate::types::builders::S3LogConfigurationBuilder {
        crate::types::builders::S3LogConfigurationBuilder::default()
    }
}

/// A builder for [`S3LogConfiguration`](crate::types::S3LogConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct S3LogConfigurationBuilder {
    pub(crate) bucket: ::std::option::Option<::std::string::String>,
    pub(crate) key_prefix: ::std::option::Option<::std::string::String>,
    pub(crate) bucket_owner: ::std::option::Option<::std::string::String>,
    pub(crate) log_file_format: ::std::option::Option<crate::types::LogFileFormat>,
    pub(crate) folder_structure: ::std::option::Option<crate::types::FolderStructure>,
}
impl S3LogConfigurationBuilder {
    /// <p>The S3 bucket name where logs are delivered.</p>
    /// This field is required.
    pub fn bucket(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bucket = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The S3 bucket name where logs are delivered.</p>
    pub fn set_bucket(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bucket = input;
        self
    }
    /// <p>The S3 bucket name where logs are delivered.</p>
    pub fn get_bucket(&self) -> &::std::option::Option<::std::string::String> {
        &self.bucket
    }
    /// <p>The S3 path prefix that determines where log files are stored.</p>
    pub fn key_prefix(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.key_prefix = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The S3 path prefix that determines where log files are stored.</p>
    pub fn set_key_prefix(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.key_prefix = input;
        self
    }
    /// <p>The S3 path prefix that determines where log files are stored.</p>
    pub fn get_key_prefix(&self) -> &::std::option::Option<::std::string::String> {
        &self.key_prefix
    }
    /// <p>The expected bucket owner of the target S3 bucket. The caller must have permissions to write to the target bucket.</p>
    pub fn bucket_owner(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bucket_owner = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The expected bucket owner of the target S3 bucket. The caller must have permissions to write to the target bucket.</p>
    pub fn set_bucket_owner(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bucket_owner = input;
        self
    }
    /// <p>The expected bucket owner of the target S3 bucket. The caller must have permissions to write to the target bucket.</p>
    pub fn get_bucket_owner(&self) -> &::std::option::Option<::std::string::String> {
        &self.bucket_owner
    }
    /// <p>The format of the LogFile that is written to S3.</p>
    /// This field is required.
    pub fn log_file_format(mut self, input: crate::types::LogFileFormat) -> Self {
        self.log_file_format = ::std::option::Option::Some(input);
        self
    }
    /// <p>The format of the LogFile that is written to S3.</p>
    pub fn set_log_file_format(mut self, input: ::std::option::Option<crate::types::LogFileFormat>) -> Self {
        self.log_file_format = input;
        self
    }
    /// <p>The format of the LogFile that is written to S3.</p>
    pub fn get_log_file_format(&self) -> &::std::option::Option<crate::types::LogFileFormat> {
        &self.log_file_format
    }
    /// <p>The folder structure that defines the organizational structure for log files in S3.</p>
    /// This field is required.
    pub fn folder_structure(mut self, input: crate::types::FolderStructure) -> Self {
        self.folder_structure = ::std::option::Option::Some(input);
        self
    }
    /// <p>The folder structure that defines the organizational structure for log files in S3.</p>
    pub fn set_folder_structure(mut self, input: ::std::option::Option<crate::types::FolderStructure>) -> Self {
        self.folder_structure = input;
        self
    }
    /// <p>The folder structure that defines the organizational structure for log files in S3.</p>
    pub fn get_folder_structure(&self) -> &::std::option::Option<crate::types::FolderStructure> {
        &self.folder_structure
    }
    /// Consumes the builder and constructs a [`S3LogConfiguration`](crate::types::S3LogConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`bucket`](crate::types::builders::S3LogConfigurationBuilder::bucket)
    /// - [`log_file_format`](crate::types::builders::S3LogConfigurationBuilder::log_file_format)
    /// - [`folder_structure`](crate::types::builders::S3LogConfigurationBuilder::folder_structure)
    pub fn build(self) -> ::std::result::Result<crate::types::S3LogConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::S3LogConfiguration {
            bucket: self.bucket.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "bucket",
                    "bucket was not specified but it is required when building S3LogConfiguration",
                )
            })?,
            key_prefix: self.key_prefix,
            bucket_owner: self.bucket_owner,
            log_file_format: self.log_file_format.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "log_file_format",
                    "log_file_format was not specified but it is required when building S3LogConfiguration",
                )
            })?,
            folder_structure: self.folder_structure.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "folder_structure",
                    "folder_structure was not specified but it is required when building S3LogConfiguration",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for S3LogConfigurationBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("S3LogConfigurationBuilder");
        formatter.field("bucket", &"*** Sensitive Data Redacted ***");
        formatter.field("key_prefix", &"*** Sensitive Data Redacted ***");
        formatter.field("bucket_owner", &self.bucket_owner);
        formatter.field("log_file_format", &self.log_file_format);
        formatter.field("folder_structure", &self.folder_structure);
        formatter.finish()
    }
}
