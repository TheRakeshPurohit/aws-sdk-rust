// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The session logger resource.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct SessionLogger {
    /// <p>The ARN of the session logger resource.</p>
    pub session_logger_arn: ::std::string::String,
    /// <p>The filter that specifies which events to monitor.</p>
    pub event_filter: ::std::option::Option<crate::types::EventFilter>,
    /// <p>The configuration that specifies where logs are fowarded.</p>
    pub log_configuration: ::std::option::Option<crate::types::LogConfiguration>,
    /// <p>The custom managed key of the session logger.</p>
    pub customer_managed_key: ::std::option::Option<::std::string::String>,
    /// <p>The additional encryption context of the session logger.</p>
    pub additional_encryption_context: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The associated portal ARN.</p>
    pub associated_portal_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The human-readable display name.</p>
    pub display_name: ::std::option::Option<::std::string::String>,
    /// <p>The date the session logger resource was created.</p>
    pub creation_date: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl SessionLogger {
    /// <p>The ARN of the session logger resource.</p>
    pub fn session_logger_arn(&self) -> &str {
        use std::ops::Deref;
        self.session_logger_arn.deref()
    }
    /// <p>The filter that specifies which events to monitor.</p>
    pub fn event_filter(&self) -> ::std::option::Option<&crate::types::EventFilter> {
        self.event_filter.as_ref()
    }
    /// <p>The configuration that specifies where logs are fowarded.</p>
    pub fn log_configuration(&self) -> ::std::option::Option<&crate::types::LogConfiguration> {
        self.log_configuration.as_ref()
    }
    /// <p>The custom managed key of the session logger.</p>
    pub fn customer_managed_key(&self) -> ::std::option::Option<&str> {
        self.customer_managed_key.as_deref()
    }
    /// <p>The additional encryption context of the session logger.</p>
    pub fn additional_encryption_context(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.additional_encryption_context.as_ref()
    }
    /// <p>The associated portal ARN.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.associated_portal_arns.is_none()`.
    pub fn associated_portal_arns(&self) -> &[::std::string::String] {
        self.associated_portal_arns.as_deref().unwrap_or_default()
    }
    /// <p>The human-readable display name.</p>
    pub fn display_name(&self) -> ::std::option::Option<&str> {
        self.display_name.as_deref()
    }
    /// <p>The date the session logger resource was created.</p>
    pub fn creation_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_date.as_ref()
    }
}
impl ::std::fmt::Debug for SessionLogger {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("SessionLogger");
        formatter.field("session_logger_arn", &self.session_logger_arn);
        formatter.field("event_filter", &self.event_filter);
        formatter.field("log_configuration", &self.log_configuration);
        formatter.field("customer_managed_key", &self.customer_managed_key);
        formatter.field("additional_encryption_context", &self.additional_encryption_context);
        formatter.field("associated_portal_arns", &self.associated_portal_arns);
        formatter.field("display_name", &"*** Sensitive Data Redacted ***");
        formatter.field("creation_date", &self.creation_date);
        formatter.finish()
    }
}
impl SessionLogger {
    /// Creates a new builder-style object to manufacture [`SessionLogger`](crate::types::SessionLogger).
    pub fn builder() -> crate::types::builders::SessionLoggerBuilder {
        crate::types::builders::SessionLoggerBuilder::default()
    }
}

/// A builder for [`SessionLogger`](crate::types::SessionLogger).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct SessionLoggerBuilder {
    pub(crate) session_logger_arn: ::std::option::Option<::std::string::String>,
    pub(crate) event_filter: ::std::option::Option<crate::types::EventFilter>,
    pub(crate) log_configuration: ::std::option::Option<crate::types::LogConfiguration>,
    pub(crate) customer_managed_key: ::std::option::Option<::std::string::String>,
    pub(crate) additional_encryption_context: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) associated_portal_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) display_name: ::std::option::Option<::std::string::String>,
    pub(crate) creation_date: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl SessionLoggerBuilder {
    /// <p>The ARN of the session logger resource.</p>
    /// This field is required.
    pub fn session_logger_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.session_logger_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the session logger resource.</p>
    pub fn set_session_logger_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.session_logger_arn = input;
        self
    }
    /// <p>The ARN of the session logger resource.</p>
    pub fn get_session_logger_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.session_logger_arn
    }
    /// <p>The filter that specifies which events to monitor.</p>
    pub fn event_filter(mut self, input: crate::types::EventFilter) -> Self {
        self.event_filter = ::std::option::Option::Some(input);
        self
    }
    /// <p>The filter that specifies which events to monitor.</p>
    pub fn set_event_filter(mut self, input: ::std::option::Option<crate::types::EventFilter>) -> Self {
        self.event_filter = input;
        self
    }
    /// <p>The filter that specifies which events to monitor.</p>
    pub fn get_event_filter(&self) -> &::std::option::Option<crate::types::EventFilter> {
        &self.event_filter
    }
    /// <p>The configuration that specifies where logs are fowarded.</p>
    pub fn log_configuration(mut self, input: crate::types::LogConfiguration) -> Self {
        self.log_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration that specifies where logs are fowarded.</p>
    pub fn set_log_configuration(mut self, input: ::std::option::Option<crate::types::LogConfiguration>) -> Self {
        self.log_configuration = input;
        self
    }
    /// <p>The configuration that specifies where logs are fowarded.</p>
    pub fn get_log_configuration(&self) -> &::std::option::Option<crate::types::LogConfiguration> {
        &self.log_configuration
    }
    /// <p>The custom managed key of the session logger.</p>
    pub fn customer_managed_key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.customer_managed_key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The custom managed key of the session logger.</p>
    pub fn set_customer_managed_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.customer_managed_key = input;
        self
    }
    /// <p>The custom managed key of the session logger.</p>
    pub fn get_customer_managed_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.customer_managed_key
    }
    /// Adds a key-value pair to `additional_encryption_context`.
    ///
    /// To override the contents of this collection use [`set_additional_encryption_context`](Self::set_additional_encryption_context).
    ///
    /// <p>The additional encryption context of the session logger.</p>
    pub fn additional_encryption_context(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.additional_encryption_context.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.additional_encryption_context = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The additional encryption context of the session logger.</p>
    pub fn set_additional_encryption_context(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.additional_encryption_context = input;
        self
    }
    /// <p>The additional encryption context of the session logger.</p>
    pub fn get_additional_encryption_context(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.additional_encryption_context
    }
    /// Appends an item to `associated_portal_arns`.
    ///
    /// To override the contents of this collection use [`set_associated_portal_arns`](Self::set_associated_portal_arns).
    ///
    /// <p>The associated portal ARN.</p>
    pub fn associated_portal_arns(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.associated_portal_arns.unwrap_or_default();
        v.push(input.into());
        self.associated_portal_arns = ::std::option::Option::Some(v);
        self
    }
    /// <p>The associated portal ARN.</p>
    pub fn set_associated_portal_arns(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.associated_portal_arns = input;
        self
    }
    /// <p>The associated portal ARN.</p>
    pub fn get_associated_portal_arns(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.associated_portal_arns
    }
    /// <p>The human-readable display name.</p>
    pub fn display_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.display_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The human-readable display name.</p>
    pub fn set_display_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.display_name = input;
        self
    }
    /// <p>The human-readable display name.</p>
    pub fn get_display_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.display_name
    }
    /// <p>The date the session logger resource was created.</p>
    pub fn creation_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date the session logger resource was created.</p>
    pub fn set_creation_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_date = input;
        self
    }
    /// <p>The date the session logger resource was created.</p>
    pub fn get_creation_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_date
    }
    /// Consumes the builder and constructs a [`SessionLogger`](crate::types::SessionLogger).
    /// This method will fail if any of the following fields are not set:
    /// - [`session_logger_arn`](crate::types::builders::SessionLoggerBuilder::session_logger_arn)
    pub fn build(self) -> ::std::result::Result<crate::types::SessionLogger, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SessionLogger {
            session_logger_arn: self.session_logger_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "session_logger_arn",
                    "session_logger_arn was not specified but it is required when building SessionLogger",
                )
            })?,
            event_filter: self.event_filter,
            log_configuration: self.log_configuration,
            customer_managed_key: self.customer_managed_key,
            additional_encryption_context: self.additional_encryption_context,
            associated_portal_arns: self.associated_portal_arns,
            display_name: self.display_name,
            creation_date: self.creation_date,
        })
    }
}
impl ::std::fmt::Debug for SessionLoggerBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("SessionLoggerBuilder");
        formatter.field("session_logger_arn", &self.session_logger_arn);
        formatter.field("event_filter", &self.event_filter);
        formatter.field("log_configuration", &self.log_configuration);
        formatter.field("customer_managed_key", &self.customer_managed_key);
        formatter.field("additional_encryption_context", &self.additional_encryption_context);
        formatter.field("associated_portal_arns", &self.associated_portal_arns);
        formatter.field("display_name", &"*** Sensitive Data Redacted ***");
        formatter.field("creation_date", &self.creation_date);
        formatter.finish()
    }
}
