// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration of the log.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LogConfiguration {
    /// <p>The configuration for delivering the logs to S3.</p>
    pub s3: ::std::option::Option<crate::types::S3LogConfiguration>,
}
impl LogConfiguration {
    /// <p>The configuration for delivering the logs to S3.</p>
    pub fn s3(&self) -> ::std::option::Option<&crate::types::S3LogConfiguration> {
        self.s3.as_ref()
    }
}
impl LogConfiguration {
    /// Creates a new builder-style object to manufacture [`LogConfiguration`](crate::types::LogConfiguration).
    pub fn builder() -> crate::types::builders::LogConfigurationBuilder {
        crate::types::builders::LogConfigurationBuilder::default()
    }
}

/// A builder for [`LogConfiguration`](crate::types::LogConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct LogConfigurationBuilder {
    pub(crate) s3: ::std::option::Option<crate::types::S3LogConfiguration>,
}
impl LogConfigurationBuilder {
    /// <p>The configuration for delivering the logs to S3.</p>
    pub fn s3(mut self, input: crate::types::S3LogConfiguration) -> Self {
        self.s3 = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration for delivering the logs to S3.</p>
    pub fn set_s3(mut self, input: ::std::option::Option<crate::types::S3LogConfiguration>) -> Self {
        self.s3 = input;
        self
    }
    /// <p>The configuration for delivering the logs to S3.</p>
    pub fn get_s3(&self) -> &::std::option::Option<crate::types::S3LogConfiguration> {
        &self.s3
    }
    /// Consumes the builder and constructs a [`LogConfiguration`](crate::types::LogConfiguration).
    pub fn build(self) -> crate::types::LogConfiguration {
        crate::types::LogConfiguration { s3: self.s3 }
    }
}
