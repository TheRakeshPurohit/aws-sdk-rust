// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The summary of the session logger resource.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct SessionLoggerSummary {
    /// <p>The ARN of the session logger resource.</p>
    pub session_logger_arn: ::std::string::String,
    /// <p>The configuration that specifies where the logs are fowarded.</p>
    pub log_configuration: ::std::option::Option<crate::types::LogConfiguration>,
    /// <p>The human-readable display name.</p>
    pub display_name: ::std::option::Option<::std::string::String>,
    /// <p>The date the session logger resource was created.</p>
    pub creation_date: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl SessionLoggerSummary {
    /// <p>The ARN of the session logger resource.</p>
    pub fn session_logger_arn(&self) -> &str {
        use std::ops::Deref;
        self.session_logger_arn.deref()
    }
    /// <p>The configuration that specifies where the logs are fowarded.</p>
    pub fn log_configuration(&self) -> ::std::option::Option<&crate::types::LogConfiguration> {
        self.log_configuration.as_ref()
    }
    /// <p>The human-readable display name.</p>
    pub fn display_name(&self) -> ::std::option::Option<&str> {
        self.display_name.as_deref()
    }
    /// <p>The date the session logger resource was created.</p>
    pub fn creation_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_date.as_ref()
    }
}
impl ::std::fmt::Debug for SessionLoggerSummary {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("SessionLoggerSummary");
        formatter.field("session_logger_arn", &self.session_logger_arn);
        formatter.field("log_configuration", &self.log_configuration);
        formatter.field("display_name", &"*** Sensitive Data Redacted ***");
        formatter.field("creation_date", &self.creation_date);
        formatter.finish()
    }
}
impl SessionLoggerSummary {
    /// Creates a new builder-style object to manufacture [`SessionLoggerSummary`](crate::types::SessionLoggerSummary).
    pub fn builder() -> crate::types::builders::SessionLoggerSummaryBuilder {
        crate::types::builders::SessionLoggerSummaryBuilder::default()
    }
}

/// A builder for [`SessionLoggerSummary`](crate::types::SessionLoggerSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct SessionLoggerSummaryBuilder {
    pub(crate) session_logger_arn: ::std::option::Option<::std::string::String>,
    pub(crate) log_configuration: ::std::option::Option<crate::types::LogConfiguration>,
    pub(crate) display_name: ::std::option::Option<::std::string::String>,
    pub(crate) creation_date: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl SessionLoggerSummaryBuilder {
    /// <p>The ARN of the session logger resource.</p>
    /// This field is required.
    pub fn session_logger_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.session_logger_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the session logger resource.</p>
    pub fn set_session_logger_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.session_logger_arn = input;
        self
    }
    /// <p>The ARN of the session logger resource.</p>
    pub fn get_session_logger_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.session_logger_arn
    }
    /// <p>The configuration that specifies where the logs are fowarded.</p>
    pub fn log_configuration(mut self, input: crate::types::LogConfiguration) -> Self {
        self.log_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration that specifies where the logs are fowarded.</p>
    pub fn set_log_configuration(mut self, input: ::std::option::Option<crate::types::LogConfiguration>) -> Self {
        self.log_configuration = input;
        self
    }
    /// <p>The configuration that specifies where the logs are fowarded.</p>
    pub fn get_log_configuration(&self) -> &::std::option::Option<crate::types::LogConfiguration> {
        &self.log_configuration
    }
    /// <p>The human-readable display name.</p>
    pub fn display_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.display_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The human-readable display name.</p>
    pub fn set_display_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.display_name = input;
        self
    }
    /// <p>The human-readable display name.</p>
    pub fn get_display_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.display_name
    }
    /// <p>The date the session logger resource was created.</p>
    pub fn creation_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date the session logger resource was created.</p>
    pub fn set_creation_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_date = input;
        self
    }
    /// <p>The date the session logger resource was created.</p>
    pub fn get_creation_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_date
    }
    /// Consumes the builder and constructs a [`SessionLoggerSummary`](crate::types::SessionLoggerSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`session_logger_arn`](crate::types::builders::SessionLoggerSummaryBuilder::session_logger_arn)
    pub fn build(self) -> ::std::result::Result<crate::types::SessionLoggerSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SessionLoggerSummary {
            session_logger_arn: self.session_logger_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "session_logger_arn",
                    "session_logger_arn was not specified but it is required when building SessionLoggerSummary",
                )
            })?,
            log_configuration: self.log_configuration,
            display_name: self.display_name,
            creation_date: self.creation_date,
        })
    }
}
impl ::std::fmt::Debug for SessionLoggerSummaryBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("SessionLoggerSummaryBuilder");
        formatter.field("session_logger_arn", &self.session_logger_arn);
        formatter.field("log_configuration", &self.log_configuration);
        formatter.field("display_name", &"*** Sensitive Data Redacted ***");
        formatter.field("creation_date", &self.creation_date);
        formatter.finish()
    }
}
