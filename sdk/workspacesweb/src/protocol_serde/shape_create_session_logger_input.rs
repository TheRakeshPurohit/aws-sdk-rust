// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_session_logger_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_session_logger::CreateSessionLoggerInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.additional_encryption_context {
        #[allow(unused_mut)]
        let mut object_2 = object.key("additionalEncryptionContext").start_object();
        for (key_3, value_4) in var_1 {
            {
                object_2.key(key_3.as_str()).string(value_4.as_str());
            }
        }
        object_2.finish();
    }
    if let Some(var_5) = &input.client_token {
        object.key("clientToken").string(var_5.as_str());
    }
    if let Some(var_6) = &input.customer_managed_key {
        object.key("customerManagedKey").string(var_6.as_str());
    }
    if let Some(var_7) = &input.display_name {
        object.key("displayName").string(var_7.as_str());
    }
    if let Some(var_8) = &input.event_filter {
        #[allow(unused_mut)]
        let mut object_9 = object.key("eventFilter").start_object();
        crate::protocol_serde::shape_event_filter::ser_event_filter(&mut object_9, var_8)?;
        object_9.finish();
    }
    if let Some(var_10) = &input.log_configuration {
        #[allow(unused_mut)]
        let mut object_11 = object.key("logConfiguration").start_object();
        crate::protocol_serde::shape_log_configuration::ser_log_configuration(&mut object_11, var_10)?;
        object_11.finish();
    }
    if let Some(var_12) = &input.tags {
        let mut array_13 = object.key("tags").start_array();
        for item_14 in var_12 {
            {
                #[allow(unused_mut)]
                let mut object_15 = array_13.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_15, item_14)?;
                object_15.finish();
            }
        }
        array_13.finish();
    }
    Ok(())
}
