// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CreateSessionLoggerInput {
    /// <p>The filter that specifies the events to monitor.</p>
    pub event_filter: ::std::option::Option<crate::types::EventFilter>,
    /// <p>The configuration that specifies where logs are delivered.</p>
    pub log_configuration: ::std::option::Option<crate::types::LogConfiguration>,
    /// <p>The human-readable display name for the session logger resource.</p>
    pub display_name: ::std::option::Option<::std::string::String>,
    /// <p>The custom managed key of the session logger.</p>
    pub customer_managed_key: ::std::option::Option<::std::string::String>,
    /// <p>The additional encryption context of the session logger.</p>
    pub additional_encryption_context: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The tags to add to the session logger.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, subsequent retries with the same client token returns the result from the original successful request. If you do not specify a client token, one is automatically generated by the AWS SDK.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
}
impl CreateSessionLoggerInput {
    /// <p>The filter that specifies the events to monitor.</p>
    pub fn event_filter(&self) -> ::std::option::Option<&crate::types::EventFilter> {
        self.event_filter.as_ref()
    }
    /// <p>The configuration that specifies where logs are delivered.</p>
    pub fn log_configuration(&self) -> ::std::option::Option<&crate::types::LogConfiguration> {
        self.log_configuration.as_ref()
    }
    /// <p>The human-readable display name for the session logger resource.</p>
    pub fn display_name(&self) -> ::std::option::Option<&str> {
        self.display_name.as_deref()
    }
    /// <p>The custom managed key of the session logger.</p>
    pub fn customer_managed_key(&self) -> ::std::option::Option<&str> {
        self.customer_managed_key.as_deref()
    }
    /// <p>The additional encryption context of the session logger.</p>
    pub fn additional_encryption_context(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.additional_encryption_context.as_ref()
    }
    /// <p>The tags to add to the session logger.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, subsequent retries with the same client token returns the result from the original successful request. If you do not specify a client token, one is automatically generated by the AWS SDK.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl ::std::fmt::Debug for CreateSessionLoggerInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateSessionLoggerInput");
        formatter.field("event_filter", &self.event_filter);
        formatter.field("log_configuration", &self.log_configuration);
        formatter.field("display_name", &"*** Sensitive Data Redacted ***");
        formatter.field("customer_managed_key", &self.customer_managed_key);
        formatter.field("additional_encryption_context", &self.additional_encryption_context);
        formatter.field("tags", &"*** Sensitive Data Redacted ***");
        formatter.field("client_token", &self.client_token);
        formatter.finish()
    }
}
impl CreateSessionLoggerInput {
    /// Creates a new builder-style object to manufacture [`CreateSessionLoggerInput`](crate::operation::create_session_logger::CreateSessionLoggerInput).
    pub fn builder() -> crate::operation::create_session_logger::builders::CreateSessionLoggerInputBuilder {
        crate::operation::create_session_logger::builders::CreateSessionLoggerInputBuilder::default()
    }
}

/// A builder for [`CreateSessionLoggerInput`](crate::operation::create_session_logger::CreateSessionLoggerInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct CreateSessionLoggerInputBuilder {
    pub(crate) event_filter: ::std::option::Option<crate::types::EventFilter>,
    pub(crate) log_configuration: ::std::option::Option<crate::types::LogConfiguration>,
    pub(crate) display_name: ::std::option::Option<::std::string::String>,
    pub(crate) customer_managed_key: ::std::option::Option<::std::string::String>,
    pub(crate) additional_encryption_context: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
}
impl CreateSessionLoggerInputBuilder {
    /// <p>The filter that specifies the events to monitor.</p>
    /// This field is required.
    pub fn event_filter(mut self, input: crate::types::EventFilter) -> Self {
        self.event_filter = ::std::option::Option::Some(input);
        self
    }
    /// <p>The filter that specifies the events to monitor.</p>
    pub fn set_event_filter(mut self, input: ::std::option::Option<crate::types::EventFilter>) -> Self {
        self.event_filter = input;
        self
    }
    /// <p>The filter that specifies the events to monitor.</p>
    pub fn get_event_filter(&self) -> &::std::option::Option<crate::types::EventFilter> {
        &self.event_filter
    }
    /// <p>The configuration that specifies where logs are delivered.</p>
    /// This field is required.
    pub fn log_configuration(mut self, input: crate::types::LogConfiguration) -> Self {
        self.log_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration that specifies where logs are delivered.</p>
    pub fn set_log_configuration(mut self, input: ::std::option::Option<crate::types::LogConfiguration>) -> Self {
        self.log_configuration = input;
        self
    }
    /// <p>The configuration that specifies where logs are delivered.</p>
    pub fn get_log_configuration(&self) -> &::std::option::Option<crate::types::LogConfiguration> {
        &self.log_configuration
    }
    /// <p>The human-readable display name for the session logger resource.</p>
    pub fn display_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.display_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The human-readable display name for the session logger resource.</p>
    pub fn set_display_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.display_name = input;
        self
    }
    /// <p>The human-readable display name for the session logger resource.</p>
    pub fn get_display_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.display_name
    }
    /// <p>The custom managed key of the session logger.</p>
    pub fn customer_managed_key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.customer_managed_key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The custom managed key of the session logger.</p>
    pub fn set_customer_managed_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.customer_managed_key = input;
        self
    }
    /// <p>The custom managed key of the session logger.</p>
    pub fn get_customer_managed_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.customer_managed_key
    }
    /// Adds a key-value pair to `additional_encryption_context`.
    ///
    /// To override the contents of this collection use [`set_additional_encryption_context`](Self::set_additional_encryption_context).
    ///
    /// <p>The additional encryption context of the session logger.</p>
    pub fn additional_encryption_context(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.additional_encryption_context.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.additional_encryption_context = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The additional encryption context of the session logger.</p>
    pub fn set_additional_encryption_context(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.additional_encryption_context = input;
        self
    }
    /// <p>The additional encryption context of the session logger.</p>
    pub fn get_additional_encryption_context(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.additional_encryption_context
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags to add to the session logger.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>The tags to add to the session logger.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags to add to the session logger.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, subsequent retries with the same client token returns the result from the original successful request. If you do not specify a client token, one is automatically generated by the AWS SDK.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, subsequent retries with the same client token returns the result from the original successful request. If you do not specify a client token, one is automatically generated by the AWS SDK.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, subsequent retries with the same client token returns the result from the original successful request. If you do not specify a client token, one is automatically generated by the AWS SDK.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Consumes the builder and constructs a [`CreateSessionLoggerInput`](crate::operation::create_session_logger::CreateSessionLoggerInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_session_logger::CreateSessionLoggerInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::create_session_logger::CreateSessionLoggerInput {
            event_filter: self.event_filter,
            log_configuration: self.log_configuration,
            display_name: self.display_name,
            customer_managed_key: self.customer_managed_key,
            additional_encryption_context: self.additional_encryption_context,
            tags: self.tags,
            client_token: self.client_token,
        })
    }
}
impl ::std::fmt::Debug for CreateSessionLoggerInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateSessionLoggerInputBuilder");
        formatter.field("event_filter", &self.event_filter);
        formatter.field("log_configuration", &self.log_configuration);
        formatter.field("display_name", &"*** Sensitive Data Redacted ***");
        formatter.field("customer_managed_key", &self.customer_managed_key);
        formatter.field("additional_encryption_context", &self.additional_encryption_context);
        formatter.field("tags", &"*** Sensitive Data Redacted ***");
        formatter.field("client_token", &self.client_token);
        formatter.finish()
    }
}
