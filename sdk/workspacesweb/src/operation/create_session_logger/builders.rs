// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_session_logger::_create_session_logger_output::CreateSessionLoggerOutputBuilder;

pub use crate::operation::create_session_logger::_create_session_logger_input::CreateSessionLoggerInputBuilder;

impl crate::operation::create_session_logger::builders::CreateSessionLoggerInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_session_logger::CreateSessionLoggerOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_session_logger::CreateSessionLoggerError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_session_logger();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateSessionLogger`.
///
/// <p>Creates a session logger.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateSessionLoggerFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_session_logger::builders::CreateSessionLoggerInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_session_logger::CreateSessionLoggerOutput,
        crate::operation::create_session_logger::CreateSessionLoggerError,
    > for CreateSessionLoggerFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_session_logger::CreateSessionLoggerOutput,
            crate::operation::create_session_logger::CreateSessionLoggerError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreateSessionLoggerFluentBuilder {
    /// Creates a new `CreateSessionLoggerFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateSessionLogger as a reference.
    pub fn as_input(&self) -> &crate::operation::create_session_logger::builders::CreateSessionLoggerInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_session_logger::CreateSessionLoggerOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_session_logger::CreateSessionLoggerError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_session_logger::CreateSessionLogger::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_session_logger::CreateSessionLogger::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_session_logger::CreateSessionLoggerOutput,
        crate::operation::create_session_logger::CreateSessionLoggerError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The filter that specifies the events to monitor.</p>
    pub fn event_filter(mut self, input: crate::types::EventFilter) -> Self {
        self.inner = self.inner.event_filter(input);
        self
    }
    /// <p>The filter that specifies the events to monitor.</p>
    pub fn set_event_filter(mut self, input: ::std::option::Option<crate::types::EventFilter>) -> Self {
        self.inner = self.inner.set_event_filter(input);
        self
    }
    /// <p>The filter that specifies the events to monitor.</p>
    pub fn get_event_filter(&self) -> &::std::option::Option<crate::types::EventFilter> {
        self.inner.get_event_filter()
    }
    /// <p>The configuration that specifies where logs are delivered.</p>
    pub fn log_configuration(mut self, input: crate::types::LogConfiguration) -> Self {
        self.inner = self.inner.log_configuration(input);
        self
    }
    /// <p>The configuration that specifies where logs are delivered.</p>
    pub fn set_log_configuration(mut self, input: ::std::option::Option<crate::types::LogConfiguration>) -> Self {
        self.inner = self.inner.set_log_configuration(input);
        self
    }
    /// <p>The configuration that specifies where logs are delivered.</p>
    pub fn get_log_configuration(&self) -> &::std::option::Option<crate::types::LogConfiguration> {
        self.inner.get_log_configuration()
    }
    /// <p>The human-readable display name for the session logger resource.</p>
    pub fn display_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.display_name(input.into());
        self
    }
    /// <p>The human-readable display name for the session logger resource.</p>
    pub fn set_display_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_display_name(input);
        self
    }
    /// <p>The human-readable display name for the session logger resource.</p>
    pub fn get_display_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_display_name()
    }
    /// <p>The custom managed key of the session logger.</p>
    pub fn customer_managed_key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.customer_managed_key(input.into());
        self
    }
    /// <p>The custom managed key of the session logger.</p>
    pub fn set_customer_managed_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_customer_managed_key(input);
        self
    }
    /// <p>The custom managed key of the session logger.</p>
    pub fn get_customer_managed_key(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_customer_managed_key()
    }
    ///
    /// Adds a key-value pair to `additionalEncryptionContext`.
    ///
    /// To override the contents of this collection use [`set_additional_encryption_context`](Self::set_additional_encryption_context).
    ///
    /// <p>The additional encryption context of the session logger.</p>
    pub fn additional_encryption_context(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        self.inner = self.inner.additional_encryption_context(k.into(), v.into());
        self
    }
    /// <p>The additional encryption context of the session logger.</p>
    pub fn set_additional_encryption_context(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_additional_encryption_context(input);
        self
    }
    /// <p>The additional encryption context of the session logger.</p>
    pub fn get_additional_encryption_context(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.inner.get_additional_encryption_context()
    }
    ///
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags to add to the session logger.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>The tags to add to the session logger.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>The tags to add to the session logger.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        self.inner.get_tags()
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, subsequent retries with the same client token returns the result from the original successful request. If you do not specify a client token, one is automatically generated by the AWS SDK.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, subsequent retries with the same client token returns the result from the original successful request. If you do not specify a client token, one is automatically generated by the AWS SDK.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, subsequent retries with the same client token returns the result from the original successful request. If you do not specify a client token, one is automatically generated by the AWS SDK.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_client_token()
    }
}
