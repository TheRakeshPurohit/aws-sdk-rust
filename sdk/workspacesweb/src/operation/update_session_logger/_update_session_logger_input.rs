// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct UpdateSessionLoggerInput {
    /// <p>The ARN of the session logger to update.</p>
    pub session_logger_arn: ::std::option::Option<::std::string::String>,
    /// <p>The updated eventFilter.</p>
    pub event_filter: ::std::option::Option<crate::types::EventFilter>,
    /// <p>The updated logConfiguration.</p>
    pub log_configuration: ::std::option::Option<crate::types::LogConfiguration>,
    /// <p>The updated display name.</p>
    pub display_name: ::std::option::Option<::std::string::String>,
}
impl UpdateSessionLoggerInput {
    /// <p>The ARN of the session logger to update.</p>
    pub fn session_logger_arn(&self) -> ::std::option::Option<&str> {
        self.session_logger_arn.as_deref()
    }
    /// <p>The updated eventFilter.</p>
    pub fn event_filter(&self) -> ::std::option::Option<&crate::types::EventFilter> {
        self.event_filter.as_ref()
    }
    /// <p>The updated logConfiguration.</p>
    pub fn log_configuration(&self) -> ::std::option::Option<&crate::types::LogConfiguration> {
        self.log_configuration.as_ref()
    }
    /// <p>The updated display name.</p>
    pub fn display_name(&self) -> ::std::option::Option<&str> {
        self.display_name.as_deref()
    }
}
impl ::std::fmt::Debug for UpdateSessionLoggerInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateSessionLoggerInput");
        formatter.field("session_logger_arn", &self.session_logger_arn);
        formatter.field("event_filter", &self.event_filter);
        formatter.field("log_configuration", &self.log_configuration);
        formatter.field("display_name", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl UpdateSessionLoggerInput {
    /// Creates a new builder-style object to manufacture [`UpdateSessionLoggerInput`](crate::operation::update_session_logger::UpdateSessionLoggerInput).
    pub fn builder() -> crate::operation::update_session_logger::builders::UpdateSessionLoggerInputBuilder {
        crate::operation::update_session_logger::builders::UpdateSessionLoggerInputBuilder::default()
    }
}

/// A builder for [`UpdateSessionLoggerInput`](crate::operation::update_session_logger::UpdateSessionLoggerInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct UpdateSessionLoggerInputBuilder {
    pub(crate) session_logger_arn: ::std::option::Option<::std::string::String>,
    pub(crate) event_filter: ::std::option::Option<crate::types::EventFilter>,
    pub(crate) log_configuration: ::std::option::Option<crate::types::LogConfiguration>,
    pub(crate) display_name: ::std::option::Option<::std::string::String>,
}
impl UpdateSessionLoggerInputBuilder {
    /// <p>The ARN of the session logger to update.</p>
    /// This field is required.
    pub fn session_logger_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.session_logger_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the session logger to update.</p>
    pub fn set_session_logger_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.session_logger_arn = input;
        self
    }
    /// <p>The ARN of the session logger to update.</p>
    pub fn get_session_logger_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.session_logger_arn
    }
    /// <p>The updated eventFilter.</p>
    pub fn event_filter(mut self, input: crate::types::EventFilter) -> Self {
        self.event_filter = ::std::option::Option::Some(input);
        self
    }
    /// <p>The updated eventFilter.</p>
    pub fn set_event_filter(mut self, input: ::std::option::Option<crate::types::EventFilter>) -> Self {
        self.event_filter = input;
        self
    }
    /// <p>The updated eventFilter.</p>
    pub fn get_event_filter(&self) -> &::std::option::Option<crate::types::EventFilter> {
        &self.event_filter
    }
    /// <p>The updated logConfiguration.</p>
    pub fn log_configuration(mut self, input: crate::types::LogConfiguration) -> Self {
        self.log_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The updated logConfiguration.</p>
    pub fn set_log_configuration(mut self, input: ::std::option::Option<crate::types::LogConfiguration>) -> Self {
        self.log_configuration = input;
        self
    }
    /// <p>The updated logConfiguration.</p>
    pub fn get_log_configuration(&self) -> &::std::option::Option<crate::types::LogConfiguration> {
        &self.log_configuration
    }
    /// <p>The updated display name.</p>
    pub fn display_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.display_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The updated display name.</p>
    pub fn set_display_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.display_name = input;
        self
    }
    /// <p>The updated display name.</p>
    pub fn get_display_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.display_name
    }
    /// Consumes the builder and constructs a [`UpdateSessionLoggerInput`](crate::operation::update_session_logger::UpdateSessionLoggerInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_session_logger::UpdateSessionLoggerInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::update_session_logger::UpdateSessionLoggerInput {
            session_logger_arn: self.session_logger_arn,
            event_filter: self.event_filter,
            log_configuration: self.log_configuration,
            display_name: self.display_name,
        })
    }
}
impl ::std::fmt::Debug for UpdateSessionLoggerInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateSessionLoggerInputBuilder");
        formatter.field("session_logger_arn", &self.session_logger_arn);
        formatter.field("event_filter", &self.event_filter);
        formatter.field("log_configuration", &self.log_configuration);
        formatter.field("display_name", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
