// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateSessionLogger`](crate::operation::create_session_logger::builders::CreateSessionLoggerFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`event_filter(EventFilter)`](crate::operation::create_session_logger::builders::CreateSessionLoggerFluentBuilder::event_filter) / [`set_event_filter(Option<EventFilter>)`](crate::operation::create_session_logger::builders::CreateSessionLoggerFluentBuilder::set_event_filter):<br>required: **true**<br><p>The filter that specifies the events to monitor.</p><br>
    ///   - [`log_configuration(LogConfiguration)`](crate::operation::create_session_logger::builders::CreateSessionLoggerFluentBuilder::log_configuration) / [`set_log_configuration(Option<LogConfiguration>)`](crate::operation::create_session_logger::builders::CreateSessionLoggerFluentBuilder::set_log_configuration):<br>required: **true**<br><p>The configuration that specifies where logs are delivered.</p><br>
    ///   - [`display_name(impl Into<String>)`](crate::operation::create_session_logger::builders::CreateSessionLoggerFluentBuilder::display_name) / [`set_display_name(Option<String>)`](crate::operation::create_session_logger::builders::CreateSessionLoggerFluentBuilder::set_display_name):<br>required: **false**<br><p>The human-readable display name for the session logger resource.</p><br>
    ///   - [`customer_managed_key(impl Into<String>)`](crate::operation::create_session_logger::builders::CreateSessionLoggerFluentBuilder::customer_managed_key) / [`set_customer_managed_key(Option<String>)`](crate::operation::create_session_logger::builders::CreateSessionLoggerFluentBuilder::set_customer_managed_key):<br>required: **false**<br><p>The custom managed key of the session logger.</p><br>
    ///   - [`additional_encryption_context(impl Into<String>, impl Into<String>)`](crate::operation::create_session_logger::builders::CreateSessionLoggerFluentBuilder::additional_encryption_context) / [`set_additional_encryption_context(Option<HashMap::<String, String>>)`](crate::operation::create_session_logger::builders::CreateSessionLoggerFluentBuilder::set_additional_encryption_context):<br>required: **false**<br><p>The additional encryption context of the session logger.</p><br>
    ///   - [`tags(Tag)`](crate::operation::create_session_logger::builders::CreateSessionLoggerFluentBuilder::tags) / [`set_tags(Option<Vec::<Tag>>)`](crate::operation::create_session_logger::builders::CreateSessionLoggerFluentBuilder::set_tags):<br>required: **false**<br><p>The tags to add to the session logger.</p><br>
    ///   - [`client_token(impl Into<String>)`](crate::operation::create_session_logger::builders::CreateSessionLoggerFluentBuilder::client_token) / [`set_client_token(Option<String>)`](crate::operation::create_session_logger::builders::CreateSessionLoggerFluentBuilder::set_client_token):<br>required: **false**<br><p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, subsequent retries with the same client token returns the result from the original successful request. If you do not specify a client token, one is automatically generated by the AWS SDK.</p><br>
    /// - On success, responds with [`CreateSessionLoggerOutput`](crate::operation::create_session_logger::CreateSessionLoggerOutput) with field(s):
    ///   - [`session_logger_arn(String)`](crate::operation::create_session_logger::CreateSessionLoggerOutput::session_logger_arn): <p>The ARN of the session logger.</p>
    /// - On failure, responds with [`SdkError<CreateSessionLoggerError>`](crate::operation::create_session_logger::CreateSessionLoggerError)
    pub fn create_session_logger(&self) -> crate::operation::create_session_logger::builders::CreateSessionLoggerFluentBuilder {
        crate::operation::create_session_logger::builders::CreateSessionLoggerFluentBuilder::new(self.handle.clone())
    }
}
