// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Matcher union: {"output":{"path":"DatastoreProperties.DatastoreStatus","expected":"ACTIVE","comparator":"stringEquals"}}
pub(crate) fn match_describe_fhir_datastore_88124acddb01b536f(
    _result: ::std::result::Result<
        &crate::operation::describe_fhir_datastore::DescribeFhirDatastoreOutput,
        &crate::operation::describe_fhir_datastore::DescribeFHIRDatastoreError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_fhir_datastore::DescribeFhirDatastoreOutput,
    ) -> ::std::option::Option<&'a crate::types::DatastoreStatus> {
        let _fld_1 = _output.datastore_properties.as_ref()?;
        let _fld_2 = &_fld_1.datastore_status;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "ACTIVE";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"DatastoreProperties.DatastoreStatus","expected":"CREATE_FAILED","comparator":"stringEquals"}}
pub(crate) fn match_describe_fhir_datastore_2d1b701287e6259e3(
    _result: ::std::result::Result<
        &crate::operation::describe_fhir_datastore::DescribeFhirDatastoreOutput,
        &crate::operation::describe_fhir_datastore::DescribeFHIRDatastoreError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_fhir_datastore::DescribeFhirDatastoreOutput,
    ) -> ::std::option::Option<&'a crate::types::DatastoreStatus> {
        let _fld_1 = _output.datastore_properties.as_ref()?;
        let _fld_2 = &_fld_1.datastore_status;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "CREATE_FAILED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"DatastoreProperties.DatastoreStatus","expected":"DELETED","comparator":"stringEquals"}}
pub(crate) fn match_describe_fhir_datastore_fef981521741ab9e9(
    _result: ::std::result::Result<
        &crate::operation::describe_fhir_datastore::DescribeFhirDatastoreOutput,
        &crate::operation::describe_fhir_datastore::DescribeFHIRDatastoreError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_fhir_datastore::DescribeFhirDatastoreOutput,
    ) -> ::std::option::Option<&'a crate::types::DatastoreStatus> {
        let _fld_1 = _output.datastore_properties.as_ref()?;
        let _fld_2 = &_fld_1.datastore_status;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "DELETED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"ExportJobProperties.JobStatus","expected":"COMPLETED","comparator":"stringEquals"}}
pub(crate) fn match_describe_fhir_export_job_223c91ad1e66a17c3(
    _result: ::std::result::Result<
        &crate::operation::describe_fhir_export_job::DescribeFhirExportJobOutput,
        &crate::operation::describe_fhir_export_job::DescribeFHIRExportJobError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_fhir_export_job::DescribeFhirExportJobOutput,
    ) -> ::std::option::Option<&'a crate::types::JobStatus> {
        let _fld_1 = _output.export_job_properties.as_ref()?;
        let _fld_2 = &_fld_1.job_status;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "COMPLETED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"ExportJobProperties.JobStatus","expected":"COMPLETED_WITH_ERRORS","comparator":"stringEquals"}}
pub(crate) fn match_describe_fhir_export_job_0303c0b1b9293e628(
    _result: ::std::result::Result<
        &crate::operation::describe_fhir_export_job::DescribeFhirExportJobOutput,
        &crate::operation::describe_fhir_export_job::DescribeFHIRExportJobError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_fhir_export_job::DescribeFhirExportJobOutput,
    ) -> ::std::option::Option<&'a crate::types::JobStatus> {
        let _fld_1 = _output.export_job_properties.as_ref()?;
        let _fld_2 = &_fld_1.job_status;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "COMPLETED_WITH_ERRORS";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"ExportJobProperties.JobStatus","expected":"CANCEL_COMPLETED","comparator":"stringEquals"}}
pub(crate) fn match_describe_fhir_export_job_fb5f416860125983b(
    _result: ::std::result::Result<
        &crate::operation::describe_fhir_export_job::DescribeFhirExportJobOutput,
        &crate::operation::describe_fhir_export_job::DescribeFHIRExportJobError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_fhir_export_job::DescribeFhirExportJobOutput,
    ) -> ::std::option::Option<&'a crate::types::JobStatus> {
        let _fld_1 = _output.export_job_properties.as_ref()?;
        let _fld_2 = &_fld_1.job_status;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "CANCEL_COMPLETED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"ExportJobProperties.JobStatus","expected":"FAILED","comparator":"stringEquals"}}
pub(crate) fn match_describe_fhir_export_job_8f2131a043684fa55(
    _result: ::std::result::Result<
        &crate::operation::describe_fhir_export_job::DescribeFhirExportJobOutput,
        &crate::operation::describe_fhir_export_job::DescribeFHIRExportJobError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_fhir_export_job::DescribeFhirExportJobOutput,
    ) -> ::std::option::Option<&'a crate::types::JobStatus> {
        let _fld_1 = _output.export_job_properties.as_ref()?;
        let _fld_2 = &_fld_1.job_status;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "FAILED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"ExportJobProperties.JobStatus","expected":"CANCEL_FAILED","comparator":"stringEquals"}}
pub(crate) fn match_describe_fhir_export_job_113b131c99fce3e4a(
    _result: ::std::result::Result<
        &crate::operation::describe_fhir_export_job::DescribeFhirExportJobOutput,
        &crate::operation::describe_fhir_export_job::DescribeFHIRExportJobError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_fhir_export_job::DescribeFhirExportJobOutput,
    ) -> ::std::option::Option<&'a crate::types::JobStatus> {
        let _fld_1 = _output.export_job_properties.as_ref()?;
        let _fld_2 = &_fld_1.job_status;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "CANCEL_FAILED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"ImportJobProperties.JobStatus","expected":"COMPLETED","comparator":"stringEquals"}}
pub(crate) fn match_describe_fhir_import_job_a0b504aba1144dfb5(
    _result: ::std::result::Result<
        &crate::operation::describe_fhir_import_job::DescribeFhirImportJobOutput,
        &crate::operation::describe_fhir_import_job::DescribeFHIRImportJobError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_fhir_import_job::DescribeFhirImportJobOutput,
    ) -> ::std::option::Option<&'a crate::types::JobStatus> {
        let _fld_1 = _output.import_job_properties.as_ref()?;
        let _fld_2 = &_fld_1.job_status;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "COMPLETED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"ImportJobProperties.JobStatus","expected":"COMPLETED_WITH_ERRORS","comparator":"stringEquals"}}
pub(crate) fn match_describe_fhir_import_job_2ca7ae056c0fad7f6(
    _result: ::std::result::Result<
        &crate::operation::describe_fhir_import_job::DescribeFhirImportJobOutput,
        &crate::operation::describe_fhir_import_job::DescribeFHIRImportJobError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_fhir_import_job::DescribeFhirImportJobOutput,
    ) -> ::std::option::Option<&'a crate::types::JobStatus> {
        let _fld_1 = _output.import_job_properties.as_ref()?;
        let _fld_2 = &_fld_1.job_status;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "COMPLETED_WITH_ERRORS";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"ImportJobProperties.JobStatus","expected":"FAILED","comparator":"stringEquals"}}
pub(crate) fn match_describe_fhir_import_job_5a4f8dc028c6369fd(
    _result: ::std::result::Result<
        &crate::operation::describe_fhir_import_job::DescribeFhirImportJobOutput,
        &crate::operation::describe_fhir_import_job::DescribeFHIRImportJobError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::describe_fhir_import_job::DescribeFhirImportJobOutput,
    ) -> ::std::option::Option<&'a crate::types::JobStatus> {
        let _fld_1 = _output.import_job_properties.as_ref()?;
        let _fld_2 = &_fld_1.job_status;
        ::std::option::Option::Some(_fld_2)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "FAILED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}
