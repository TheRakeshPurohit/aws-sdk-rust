// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains patient-specific information used to customize the clinical note generation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct MedicalScribePatientContext {
    /// <p>The patient's preferred pronouns that the user wants to provide as a context for clinical note generation.</p>
    pub pronouns: ::std::option::Option<crate::types::Pronouns>,
}
impl MedicalScribePatientContext {
    /// <p>The patient's preferred pronouns that the user wants to provide as a context for clinical note generation.</p>
    pub fn pronouns(&self) -> ::std::option::Option<&crate::types::Pronouns> {
        self.pronouns.as_ref()
    }
}
impl ::std::fmt::Debug for MedicalScribePatientContext {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("MedicalScribePatientContext");
        formatter.field("pronouns", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl MedicalScribePatientContext {
    /// Creates a new builder-style object to manufacture [`MedicalScribePatientContext`](crate::types::MedicalScribePatientContext).
    pub fn builder() -> crate::types::builders::MedicalScribePatientContextBuilder {
        crate::types::builders::MedicalScribePatientContextBuilder::default()
    }
}

/// A builder for [`MedicalScribePatientContext`](crate::types::MedicalScribePatientContext).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct MedicalScribePatientContextBuilder {
    pub(crate) pronouns: ::std::option::Option<crate::types::Pronouns>,
}
impl MedicalScribePatientContextBuilder {
    /// <p>The patient's preferred pronouns that the user wants to provide as a context for clinical note generation.</p>
    pub fn pronouns(mut self, input: crate::types::Pronouns) -> Self {
        self.pronouns = ::std::option::Option::Some(input);
        self
    }
    /// <p>The patient's preferred pronouns that the user wants to provide as a context for clinical note generation.</p>
    pub fn set_pronouns(mut self, input: ::std::option::Option<crate::types::Pronouns>) -> Self {
        self.pronouns = input;
        self
    }
    /// <p>The patient's preferred pronouns that the user wants to provide as a context for clinical note generation.</p>
    pub fn get_pronouns(&self) -> &::std::option::Option<crate::types::Pronouns> {
        &self.pronouns
    }
    /// Consumes the builder and constructs a [`MedicalScribePatientContext`](crate::types::MedicalScribePatientContext).
    pub fn build(self) -> crate::types::MedicalScribePatientContext {
        crate::types::MedicalScribePatientContext { pronouns: self.pronouns }
    }
}
impl ::std::fmt::Debug for MedicalScribePatientContextBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("MedicalScribePatientContextBuilder");
        formatter.field("pronouns", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
