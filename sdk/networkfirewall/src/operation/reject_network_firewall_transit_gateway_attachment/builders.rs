// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::reject_network_firewall_transit_gateway_attachment::_reject_network_firewall_transit_gateway_attachment_output::RejectNetworkFirewallTransitGatewayAttachmentOutputBuilder;

pub use crate::operation::reject_network_firewall_transit_gateway_attachment::_reject_network_firewall_transit_gateway_attachment_input::RejectNetworkFirewallTransitGatewayAttachmentInputBuilder;

impl crate::operation::reject_network_firewall_transit_gateway_attachment::builders::RejectNetworkFirewallTransitGatewayAttachmentInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::reject_network_firewall_transit_gateway_attachment::RejectNetworkFirewallTransitGatewayAttachmentOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::reject_network_firewall_transit_gateway_attachment::RejectNetworkFirewallTransitGatewayAttachmentError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.reject_network_firewall_transit_gateway_attachment();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `RejectNetworkFirewallTransitGatewayAttachment`.
///
/// <p>Rejects a transit gateway attachment request for Network Firewall. When you reject the attachment request, Network Firewall cancels the creation of routing components between the transit gateway and firewall endpoints.</p>
/// <p>Only the transit gateway owner can reject the attachment. After rejection, no traffic will flow through the firewall endpoints for this attachment.</p>
/// <p>Use <code>DescribeFirewall</code> to monitor the rejection status. To accept the attachment instead of rejecting it, use <code>AcceptNetworkFirewallTransitGatewayAttachment</code>.</p><note>
/// <p>Once rejected, you cannot reverse this action. To establish connectivity, you must create a new transit gateway-attached firewall.</p>
/// </note>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct RejectNetworkFirewallTransitGatewayAttachmentFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::reject_network_firewall_transit_gateway_attachment::builders::RejectNetworkFirewallTransitGatewayAttachmentInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::reject_network_firewall_transit_gateway_attachment::RejectNetworkFirewallTransitGatewayAttachmentOutput,
        crate::operation::reject_network_firewall_transit_gateway_attachment::RejectNetworkFirewallTransitGatewayAttachmentError,
    > for RejectNetworkFirewallTransitGatewayAttachmentFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::reject_network_firewall_transit_gateway_attachment::RejectNetworkFirewallTransitGatewayAttachmentOutput,
            crate::operation::reject_network_firewall_transit_gateway_attachment::RejectNetworkFirewallTransitGatewayAttachmentError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl RejectNetworkFirewallTransitGatewayAttachmentFluentBuilder {
    /// Creates a new `RejectNetworkFirewallTransitGatewayAttachmentFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the RejectNetworkFirewallTransitGatewayAttachment as a reference.
    pub fn as_input(
        &self,
    ) -> &crate::operation::reject_network_firewall_transit_gateway_attachment::builders::RejectNetworkFirewallTransitGatewayAttachmentInputBuilder
    {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::reject_network_firewall_transit_gateway_attachment::RejectNetworkFirewallTransitGatewayAttachmentOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::reject_network_firewall_transit_gateway_attachment::RejectNetworkFirewallTransitGatewayAttachmentError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::reject_network_firewall_transit_gateway_attachment::RejectNetworkFirewallTransitGatewayAttachment::operation_runtime_plugins(
                            self.handle.runtime_plugins.clone(),
                            &self.handle.conf,
                            self.config_override,
                        );
        crate::operation::reject_network_firewall_transit_gateway_attachment::RejectNetworkFirewallTransitGatewayAttachment::orchestrate(
            &runtime_plugins,
            input,
        )
        .await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::reject_network_firewall_transit_gateway_attachment::RejectNetworkFirewallTransitGatewayAttachmentOutput,
        crate::operation::reject_network_firewall_transit_gateway_attachment::RejectNetworkFirewallTransitGatewayAttachmentError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>Required. The unique identifier of the transit gateway attachment to reject. This ID is returned in the response when creating a transit gateway-attached firewall.</p>
    pub fn transit_gateway_attachment_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.transit_gateway_attachment_id(input.into());
        self
    }
    /// <p>Required. The unique identifier of the transit gateway attachment to reject. This ID is returned in the response when creating a transit gateway-attached firewall.</p>
    pub fn set_transit_gateway_attachment_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_transit_gateway_attachment_id(input);
        self
    }
    /// <p>Required. The unique identifier of the transit gateway attachment to reject. This ID is returned in the response when creating a transit gateway-attached firewall.</p>
    pub fn get_transit_gateway_attachment_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_transit_gateway_attachment_id()
    }
}
