// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Request anomaly stats for a single rule from a service. Results are for the last 10 seconds unless the service has been assigned a longer reporting interval after a previous call to <a href="https://docs.aws.amazon.com/xray/latest/api/API_GetSamplingTargets.html">GetSamplingTargets</a>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SamplingBoostStatisticsDocument {
    /// <p>The name of the sampling rule.</p>
    pub rule_name: ::std::string::String,
    /// <p>Matches the <code>name</code> that the service uses to identify itself in segments.</p>
    pub service_name: ::std::string::String,
    /// <p>The current time.</p>
    pub timestamp: ::aws_smithy_types::DateTime,
    /// <p>The number of requests with anomaly.</p>
    pub anomaly_count: i32,
    /// <p>The number of requests that associated to the rule.</p>
    pub total_count: i32,
    /// <p>The number of requests with anomaly recorded.</p>
    pub sampled_anomaly_count: i32,
}
impl SamplingBoostStatisticsDocument {
    /// <p>The name of the sampling rule.</p>
    pub fn rule_name(&self) -> &str {
        use std::ops::Deref;
        self.rule_name.deref()
    }
    /// <p>Matches the <code>name</code> that the service uses to identify itself in segments.</p>
    pub fn service_name(&self) -> &str {
        use std::ops::Deref;
        self.service_name.deref()
    }
    /// <p>The current time.</p>
    pub fn timestamp(&self) -> &::aws_smithy_types::DateTime {
        &self.timestamp
    }
    /// <p>The number of requests with anomaly.</p>
    pub fn anomaly_count(&self) -> i32 {
        self.anomaly_count
    }
    /// <p>The number of requests that associated to the rule.</p>
    pub fn total_count(&self) -> i32 {
        self.total_count
    }
    /// <p>The number of requests with anomaly recorded.</p>
    pub fn sampled_anomaly_count(&self) -> i32 {
        self.sampled_anomaly_count
    }
}
impl SamplingBoostStatisticsDocument {
    /// Creates a new builder-style object to manufacture [`SamplingBoostStatisticsDocument`](crate::types::SamplingBoostStatisticsDocument).
    pub fn builder() -> crate::types::builders::SamplingBoostStatisticsDocumentBuilder {
        crate::types::builders::SamplingBoostStatisticsDocumentBuilder::default()
    }
}

/// A builder for [`SamplingBoostStatisticsDocument`](crate::types::SamplingBoostStatisticsDocument).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SamplingBoostStatisticsDocumentBuilder {
    pub(crate) rule_name: ::std::option::Option<::std::string::String>,
    pub(crate) service_name: ::std::option::Option<::std::string::String>,
    pub(crate) timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) anomaly_count: ::std::option::Option<i32>,
    pub(crate) total_count: ::std::option::Option<i32>,
    pub(crate) sampled_anomaly_count: ::std::option::Option<i32>,
}
impl SamplingBoostStatisticsDocumentBuilder {
    /// <p>The name of the sampling rule.</p>
    /// This field is required.
    pub fn rule_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.rule_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the sampling rule.</p>
    pub fn set_rule_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.rule_name = input;
        self
    }
    /// <p>The name of the sampling rule.</p>
    pub fn get_rule_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.rule_name
    }
    /// <p>Matches the <code>name</code> that the service uses to identify itself in segments.</p>
    /// This field is required.
    pub fn service_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.service_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Matches the <code>name</code> that the service uses to identify itself in segments.</p>
    pub fn set_service_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.service_name = input;
        self
    }
    /// <p>Matches the <code>name</code> that the service uses to identify itself in segments.</p>
    pub fn get_service_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.service_name
    }
    /// <p>The current time.</p>
    /// This field is required.
    pub fn timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current time.</p>
    pub fn set_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.timestamp = input;
        self
    }
    /// <p>The current time.</p>
    pub fn get_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.timestamp
    }
    /// <p>The number of requests with anomaly.</p>
    /// This field is required.
    pub fn anomaly_count(mut self, input: i32) -> Self {
        self.anomaly_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of requests with anomaly.</p>
    pub fn set_anomaly_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.anomaly_count = input;
        self
    }
    /// <p>The number of requests with anomaly.</p>
    pub fn get_anomaly_count(&self) -> &::std::option::Option<i32> {
        &self.anomaly_count
    }
    /// <p>The number of requests that associated to the rule.</p>
    /// This field is required.
    pub fn total_count(mut self, input: i32) -> Self {
        self.total_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of requests that associated to the rule.</p>
    pub fn set_total_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.total_count = input;
        self
    }
    /// <p>The number of requests that associated to the rule.</p>
    pub fn get_total_count(&self) -> &::std::option::Option<i32> {
        &self.total_count
    }
    /// <p>The number of requests with anomaly recorded.</p>
    /// This field is required.
    pub fn sampled_anomaly_count(mut self, input: i32) -> Self {
        self.sampled_anomaly_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of requests with anomaly recorded.</p>
    pub fn set_sampled_anomaly_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.sampled_anomaly_count = input;
        self
    }
    /// <p>The number of requests with anomaly recorded.</p>
    pub fn get_sampled_anomaly_count(&self) -> &::std::option::Option<i32> {
        &self.sampled_anomaly_count
    }
    /// Consumes the builder and constructs a [`SamplingBoostStatisticsDocument`](crate::types::SamplingBoostStatisticsDocument).
    /// This method will fail if any of the following fields are not set:
    /// - [`rule_name`](crate::types::builders::SamplingBoostStatisticsDocumentBuilder::rule_name)
    /// - [`service_name`](crate::types::builders::SamplingBoostStatisticsDocumentBuilder::service_name)
    /// - [`timestamp`](crate::types::builders::SamplingBoostStatisticsDocumentBuilder::timestamp)
    pub fn build(self) -> ::std::result::Result<crate::types::SamplingBoostStatisticsDocument, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SamplingBoostStatisticsDocument {
            rule_name: self.rule_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "rule_name",
                    "rule_name was not specified but it is required when building SamplingBoostStatisticsDocument",
                )
            })?,
            service_name: self.service_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "service_name",
                    "service_name was not specified but it is required when building SamplingBoostStatisticsDocument",
                )
            })?,
            timestamp: self.timestamp.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "timestamp",
                    "timestamp was not specified but it is required when building SamplingBoostStatisticsDocument",
                )
            })?,
            anomaly_count: self.anomaly_count.unwrap_or_default(),
            total_count: self.total_count.unwrap_or_default(),
            sampled_anomaly_count: self.sampled_anomaly_count.unwrap_or_default(),
        })
    }
}
