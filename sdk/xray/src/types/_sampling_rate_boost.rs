// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Enable temporary sampling rate increases when you detect anomalies to improve visibility.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SamplingRateBoost {
    /// <p>Defines max temporary sampling rate to apply when a boost is triggered. Calculated boost rate by X-Ray will be less than or equal to this max rate.</p>
    pub max_rate: f64,
    /// <p>Sets the time window (in minutes) in which only one sampling rate boost can be triggered. After a boost occurs, no further boosts are allowed until the next window.</p>
    pub cooldown_window_minutes: i32,
}
impl SamplingRateBoost {
    /// <p>Defines max temporary sampling rate to apply when a boost is triggered. Calculated boost rate by X-Ray will be less than or equal to this max rate.</p>
    pub fn max_rate(&self) -> f64 {
        self.max_rate
    }
    /// <p>Sets the time window (in minutes) in which only one sampling rate boost can be triggered. After a boost occurs, no further boosts are allowed until the next window.</p>
    pub fn cooldown_window_minutes(&self) -> i32 {
        self.cooldown_window_minutes
    }
}
impl SamplingRateBoost {
    /// Creates a new builder-style object to manufacture [`SamplingRateBoost`](crate::types::SamplingRateBoost).
    pub fn builder() -> crate::types::builders::SamplingRateBoostBuilder {
        crate::types::builders::SamplingRateBoostBuilder::default()
    }
}

/// A builder for [`SamplingRateBoost`](crate::types::SamplingRateBoost).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SamplingRateBoostBuilder {
    pub(crate) max_rate: ::std::option::Option<f64>,
    pub(crate) cooldown_window_minutes: ::std::option::Option<i32>,
}
impl SamplingRateBoostBuilder {
    /// <p>Defines max temporary sampling rate to apply when a boost is triggered. Calculated boost rate by X-Ray will be less than or equal to this max rate.</p>
    /// This field is required.
    pub fn max_rate(mut self, input: f64) -> Self {
        self.max_rate = ::std::option::Option::Some(input);
        self
    }
    /// <p>Defines max temporary sampling rate to apply when a boost is triggered. Calculated boost rate by X-Ray will be less than or equal to this max rate.</p>
    pub fn set_max_rate(mut self, input: ::std::option::Option<f64>) -> Self {
        self.max_rate = input;
        self
    }
    /// <p>Defines max temporary sampling rate to apply when a boost is triggered. Calculated boost rate by X-Ray will be less than or equal to this max rate.</p>
    pub fn get_max_rate(&self) -> &::std::option::Option<f64> {
        &self.max_rate
    }
    /// <p>Sets the time window (in minutes) in which only one sampling rate boost can be triggered. After a boost occurs, no further boosts are allowed until the next window.</p>
    /// This field is required.
    pub fn cooldown_window_minutes(mut self, input: i32) -> Self {
        self.cooldown_window_minutes = ::std::option::Option::Some(input);
        self
    }
    /// <p>Sets the time window (in minutes) in which only one sampling rate boost can be triggered. After a boost occurs, no further boosts are allowed until the next window.</p>
    pub fn set_cooldown_window_minutes(mut self, input: ::std::option::Option<i32>) -> Self {
        self.cooldown_window_minutes = input;
        self
    }
    /// <p>Sets the time window (in minutes) in which only one sampling rate boost can be triggered. After a boost occurs, no further boosts are allowed until the next window.</p>
    pub fn get_cooldown_window_minutes(&self) -> &::std::option::Option<i32> {
        &self.cooldown_window_minutes
    }
    /// Consumes the builder and constructs a [`SamplingRateBoost`](crate::types::SamplingRateBoost).
    pub fn build(self) -> crate::types::SamplingRateBoost {
        crate::types::SamplingRateBoost {
            max_rate: self.max_rate.unwrap_or_default(),
            cooldown_window_minutes: self.cooldown_window_minutes.unwrap_or_default(),
        }
    }
}
