// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Temporary boost sampling rate. X-Ray calculates sampling boost for each service based on the recent sampling boost stats of all services that called <a href="https://docs.aws.amazon.com/xray/latest/api/API_GetSamplingTargets.html">GetSamplingTargets</a>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SamplingBoost {
    /// <p>The calculated sampling boost rate for this service</p>
    pub boost_rate: f64,
    /// <p>When the sampling boost expires.</p>
    pub boost_rate_ttl: ::aws_smithy_types::DateTime,
}
impl SamplingBoost {
    /// <p>The calculated sampling boost rate for this service</p>
    pub fn boost_rate(&self) -> f64 {
        self.boost_rate
    }
    /// <p>When the sampling boost expires.</p>
    pub fn boost_rate_ttl(&self) -> &::aws_smithy_types::DateTime {
        &self.boost_rate_ttl
    }
}
impl SamplingBoost {
    /// Creates a new builder-style object to manufacture [`SamplingBoost`](crate::types::SamplingBoost).
    pub fn builder() -> crate::types::builders::SamplingBoostBuilder {
        crate::types::builders::SamplingBoostBuilder::default()
    }
}

/// A builder for [`SamplingBoost`](crate::types::SamplingBoost).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SamplingBoostBuilder {
    pub(crate) boost_rate: ::std::option::Option<f64>,
    pub(crate) boost_rate_ttl: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl SamplingBoostBuilder {
    /// <p>The calculated sampling boost rate for this service</p>
    /// This field is required.
    pub fn boost_rate(mut self, input: f64) -> Self {
        self.boost_rate = ::std::option::Option::Some(input);
        self
    }
    /// <p>The calculated sampling boost rate for this service</p>
    pub fn set_boost_rate(mut self, input: ::std::option::Option<f64>) -> Self {
        self.boost_rate = input;
        self
    }
    /// <p>The calculated sampling boost rate for this service</p>
    pub fn get_boost_rate(&self) -> &::std::option::Option<f64> {
        &self.boost_rate
    }
    /// <p>When the sampling boost expires.</p>
    /// This field is required.
    pub fn boost_rate_ttl(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.boost_rate_ttl = ::std::option::Option::Some(input);
        self
    }
    /// <p>When the sampling boost expires.</p>
    pub fn set_boost_rate_ttl(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.boost_rate_ttl = input;
        self
    }
    /// <p>When the sampling boost expires.</p>
    pub fn get_boost_rate_ttl(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.boost_rate_ttl
    }
    /// Consumes the builder and constructs a [`SamplingBoost`](crate::types::SamplingBoost).
    /// This method will fail if any of the following fields are not set:
    /// - [`boost_rate_ttl`](crate::types::builders::SamplingBoostBuilder::boost_rate_ttl)
    pub fn build(self) -> ::std::result::Result<crate::types::SamplingBoost, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SamplingBoost {
            boost_rate: self.boost_rate.unwrap_or_default(),
            boost_rate_ttl: self.boost_rate_ttl.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "boost_rate_ttl",
                    "boost_rate_ttl was not specified but it is required when building SamplingBoost",
                )
            })?,
        })
    }
}
