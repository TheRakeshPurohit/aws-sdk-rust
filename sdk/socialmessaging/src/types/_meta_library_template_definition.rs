// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines the complete structure and content of a template in Meta's library.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MetaLibraryTemplateDefinition {
    /// <p>The name of the template.</p>
    pub template_name: ::std::option::Option<::std::string::String>,
    /// <p>The language code for the template (for example, en_US).</p>
    pub template_language: ::std::option::Option<::std::string::String>,
    /// <p>The category of the template (for example, UTILITY or MARKETING).</p>
    pub template_category: ::std::option::Option<::std::string::String>,
    /// <p>The topic or subject matter of the template.</p>
    pub template_topic: ::std::option::Option<::std::string::String>,
    /// <p>The intended use case for the template.</p>
    pub template_use_case: ::std::option::Option<::std::string::String>,
    /// <p>The industries the template is designed for.</p>
    pub template_industry: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The header text of the template.</p>
    pub template_header: ::std::option::Option<::std::string::String>,
    /// <p>The body text of the template.</p>
    pub template_body: ::std::option::Option<::std::string::String>,
    /// <p>The buttons included in the template.</p>
    pub template_buttons: ::std::option::Option<::std::vec::Vec<crate::types::LibraryTemplateButtonList>>,
    /// <p>The ID of the template in Meta's library.</p>
    pub template_id: ::std::option::Option<::std::string::String>,
}
impl MetaLibraryTemplateDefinition {
    /// <p>The name of the template.</p>
    pub fn template_name(&self) -> ::std::option::Option<&str> {
        self.template_name.as_deref()
    }
    /// <p>The language code for the template (for example, en_US).</p>
    pub fn template_language(&self) -> ::std::option::Option<&str> {
        self.template_language.as_deref()
    }
    /// <p>The category of the template (for example, UTILITY or MARKETING).</p>
    pub fn template_category(&self) -> ::std::option::Option<&str> {
        self.template_category.as_deref()
    }
    /// <p>The topic or subject matter of the template.</p>
    pub fn template_topic(&self) -> ::std::option::Option<&str> {
        self.template_topic.as_deref()
    }
    /// <p>The intended use case for the template.</p>
    pub fn template_use_case(&self) -> ::std::option::Option<&str> {
        self.template_use_case.as_deref()
    }
    /// <p>The industries the template is designed for.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.template_industry.is_none()`.
    pub fn template_industry(&self) -> &[::std::string::String] {
        self.template_industry.as_deref().unwrap_or_default()
    }
    /// <p>The header text of the template.</p>
    pub fn template_header(&self) -> ::std::option::Option<&str> {
        self.template_header.as_deref()
    }
    /// <p>The body text of the template.</p>
    pub fn template_body(&self) -> ::std::option::Option<&str> {
        self.template_body.as_deref()
    }
    /// <p>The buttons included in the template.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.template_buttons.is_none()`.
    pub fn template_buttons(&self) -> &[crate::types::LibraryTemplateButtonList] {
        self.template_buttons.as_deref().unwrap_or_default()
    }
    /// <p>The ID of the template in Meta's library.</p>
    pub fn template_id(&self) -> ::std::option::Option<&str> {
        self.template_id.as_deref()
    }
}
impl MetaLibraryTemplateDefinition {
    /// Creates a new builder-style object to manufacture [`MetaLibraryTemplateDefinition`](crate::types::MetaLibraryTemplateDefinition).
    pub fn builder() -> crate::types::builders::MetaLibraryTemplateDefinitionBuilder {
        crate::types::builders::MetaLibraryTemplateDefinitionBuilder::default()
    }
}

/// A builder for [`MetaLibraryTemplateDefinition`](crate::types::MetaLibraryTemplateDefinition).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct MetaLibraryTemplateDefinitionBuilder {
    pub(crate) template_name: ::std::option::Option<::std::string::String>,
    pub(crate) template_language: ::std::option::Option<::std::string::String>,
    pub(crate) template_category: ::std::option::Option<::std::string::String>,
    pub(crate) template_topic: ::std::option::Option<::std::string::String>,
    pub(crate) template_use_case: ::std::option::Option<::std::string::String>,
    pub(crate) template_industry: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) template_header: ::std::option::Option<::std::string::String>,
    pub(crate) template_body: ::std::option::Option<::std::string::String>,
    pub(crate) template_buttons: ::std::option::Option<::std::vec::Vec<crate::types::LibraryTemplateButtonList>>,
    pub(crate) template_id: ::std::option::Option<::std::string::String>,
}
impl MetaLibraryTemplateDefinitionBuilder {
    /// <p>The name of the template.</p>
    pub fn template_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.template_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the template.</p>
    pub fn set_template_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.template_name = input;
        self
    }
    /// <p>The name of the template.</p>
    pub fn get_template_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.template_name
    }
    /// <p>The language code for the template (for example, en_US).</p>
    pub fn template_language(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.template_language = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The language code for the template (for example, en_US).</p>
    pub fn set_template_language(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.template_language = input;
        self
    }
    /// <p>The language code for the template (for example, en_US).</p>
    pub fn get_template_language(&self) -> &::std::option::Option<::std::string::String> {
        &self.template_language
    }
    /// <p>The category of the template (for example, UTILITY or MARKETING).</p>
    pub fn template_category(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.template_category = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The category of the template (for example, UTILITY or MARKETING).</p>
    pub fn set_template_category(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.template_category = input;
        self
    }
    /// <p>The category of the template (for example, UTILITY or MARKETING).</p>
    pub fn get_template_category(&self) -> &::std::option::Option<::std::string::String> {
        &self.template_category
    }
    /// <p>The topic or subject matter of the template.</p>
    pub fn template_topic(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.template_topic = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The topic or subject matter of the template.</p>
    pub fn set_template_topic(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.template_topic = input;
        self
    }
    /// <p>The topic or subject matter of the template.</p>
    pub fn get_template_topic(&self) -> &::std::option::Option<::std::string::String> {
        &self.template_topic
    }
    /// <p>The intended use case for the template.</p>
    pub fn template_use_case(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.template_use_case = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The intended use case for the template.</p>
    pub fn set_template_use_case(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.template_use_case = input;
        self
    }
    /// <p>The intended use case for the template.</p>
    pub fn get_template_use_case(&self) -> &::std::option::Option<::std::string::String> {
        &self.template_use_case
    }
    /// Appends an item to `template_industry`.
    ///
    /// To override the contents of this collection use [`set_template_industry`](Self::set_template_industry).
    ///
    /// <p>The industries the template is designed for.</p>
    pub fn template_industry(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.template_industry.unwrap_or_default();
        v.push(input.into());
        self.template_industry = ::std::option::Option::Some(v);
        self
    }
    /// <p>The industries the template is designed for.</p>
    pub fn set_template_industry(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.template_industry = input;
        self
    }
    /// <p>The industries the template is designed for.</p>
    pub fn get_template_industry(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.template_industry
    }
    /// <p>The header text of the template.</p>
    pub fn template_header(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.template_header = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The header text of the template.</p>
    pub fn set_template_header(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.template_header = input;
        self
    }
    /// <p>The header text of the template.</p>
    pub fn get_template_header(&self) -> &::std::option::Option<::std::string::String> {
        &self.template_header
    }
    /// <p>The body text of the template.</p>
    pub fn template_body(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.template_body = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The body text of the template.</p>
    pub fn set_template_body(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.template_body = input;
        self
    }
    /// <p>The body text of the template.</p>
    pub fn get_template_body(&self) -> &::std::option::Option<::std::string::String> {
        &self.template_body
    }
    /// Appends an item to `template_buttons`.
    ///
    /// To override the contents of this collection use [`set_template_buttons`](Self::set_template_buttons).
    ///
    /// <p>The buttons included in the template.</p>
    pub fn template_buttons(mut self, input: crate::types::LibraryTemplateButtonList) -> Self {
        let mut v = self.template_buttons.unwrap_or_default();
        v.push(input);
        self.template_buttons = ::std::option::Option::Some(v);
        self
    }
    /// <p>The buttons included in the template.</p>
    pub fn set_template_buttons(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::LibraryTemplateButtonList>>) -> Self {
        self.template_buttons = input;
        self
    }
    /// <p>The buttons included in the template.</p>
    pub fn get_template_buttons(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::LibraryTemplateButtonList>> {
        &self.template_buttons
    }
    /// <p>The ID of the template in Meta's library.</p>
    pub fn template_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.template_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the template in Meta's library.</p>
    pub fn set_template_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.template_id = input;
        self
    }
    /// <p>The ID of the template in Meta's library.</p>
    pub fn get_template_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.template_id
    }
    /// Consumes the builder and constructs a [`MetaLibraryTemplateDefinition`](crate::types::MetaLibraryTemplateDefinition).
    pub fn build(self) -> crate::types::MetaLibraryTemplateDefinition {
        crate::types::MetaLibraryTemplateDefinition {
            template_name: self.template_name,
            template_language: self.template_language,
            template_category: self.template_category,
            template_topic: self.template_topic,
            template_use_case: self.template_use_case,
            template_industry: self.template_industry,
            template_header: self.template_header,
            template_body: self.template_body,
            template_buttons: self.template_buttons,
            template_id: self.template_id,
        }
    }
}
