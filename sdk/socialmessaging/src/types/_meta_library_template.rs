// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a template from Meta's library with customization options.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MetaLibraryTemplate {
    /// <p>The name to assign to the template.</p>
    pub template_name: ::std::string::String,
    /// <p>The name of the template in Meta's library.</p>
    pub library_template_name: ::std::string::String,
    /// <p>The category of the template (for example, UTILITY or MARKETING).</p>
    pub template_category: ::std::string::String,
    /// <p>The language code for the template (for example, en_US).</p>
    pub template_language: ::std::string::String,
    /// <p>Button customizations for the template.</p>
    pub library_template_button_inputs: ::std::option::Option<::std::vec::Vec<crate::types::LibraryTemplateButtonInput>>,
    /// <p>Body text customizations for the template.</p>
    pub library_template_body_inputs: ::std::option::Option<crate::types::LibraryTemplateBodyInputs>,
}
impl MetaLibraryTemplate {
    /// <p>The name to assign to the template.</p>
    pub fn template_name(&self) -> &str {
        use std::ops::Deref;
        self.template_name.deref()
    }
    /// <p>The name of the template in Meta's library.</p>
    pub fn library_template_name(&self) -> &str {
        use std::ops::Deref;
        self.library_template_name.deref()
    }
    /// <p>The category of the template (for example, UTILITY or MARKETING).</p>
    pub fn template_category(&self) -> &str {
        use std::ops::Deref;
        self.template_category.deref()
    }
    /// <p>The language code for the template (for example, en_US).</p>
    pub fn template_language(&self) -> &str {
        use std::ops::Deref;
        self.template_language.deref()
    }
    /// <p>Button customizations for the template.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.library_template_button_inputs.is_none()`.
    pub fn library_template_button_inputs(&self) -> &[crate::types::LibraryTemplateButtonInput] {
        self.library_template_button_inputs.as_deref().unwrap_or_default()
    }
    /// <p>Body text customizations for the template.</p>
    pub fn library_template_body_inputs(&self) -> ::std::option::Option<&crate::types::LibraryTemplateBodyInputs> {
        self.library_template_body_inputs.as_ref()
    }
}
impl MetaLibraryTemplate {
    /// Creates a new builder-style object to manufacture [`MetaLibraryTemplate`](crate::types::MetaLibraryTemplate).
    pub fn builder() -> crate::types::builders::MetaLibraryTemplateBuilder {
        crate::types::builders::MetaLibraryTemplateBuilder::default()
    }
}

/// A builder for [`MetaLibraryTemplate`](crate::types::MetaLibraryTemplate).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct MetaLibraryTemplateBuilder {
    pub(crate) template_name: ::std::option::Option<::std::string::String>,
    pub(crate) library_template_name: ::std::option::Option<::std::string::String>,
    pub(crate) template_category: ::std::option::Option<::std::string::String>,
    pub(crate) template_language: ::std::option::Option<::std::string::String>,
    pub(crate) library_template_button_inputs: ::std::option::Option<::std::vec::Vec<crate::types::LibraryTemplateButtonInput>>,
    pub(crate) library_template_body_inputs: ::std::option::Option<crate::types::LibraryTemplateBodyInputs>,
}
impl MetaLibraryTemplateBuilder {
    /// <p>The name to assign to the template.</p>
    /// This field is required.
    pub fn template_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.template_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name to assign to the template.</p>
    pub fn set_template_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.template_name = input;
        self
    }
    /// <p>The name to assign to the template.</p>
    pub fn get_template_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.template_name
    }
    /// <p>The name of the template in Meta's library.</p>
    /// This field is required.
    pub fn library_template_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.library_template_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the template in Meta's library.</p>
    pub fn set_library_template_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.library_template_name = input;
        self
    }
    /// <p>The name of the template in Meta's library.</p>
    pub fn get_library_template_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.library_template_name
    }
    /// <p>The category of the template (for example, UTILITY or MARKETING).</p>
    /// This field is required.
    pub fn template_category(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.template_category = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The category of the template (for example, UTILITY or MARKETING).</p>
    pub fn set_template_category(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.template_category = input;
        self
    }
    /// <p>The category of the template (for example, UTILITY or MARKETING).</p>
    pub fn get_template_category(&self) -> &::std::option::Option<::std::string::String> {
        &self.template_category
    }
    /// <p>The language code for the template (for example, en_US).</p>
    /// This field is required.
    pub fn template_language(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.template_language = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The language code for the template (for example, en_US).</p>
    pub fn set_template_language(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.template_language = input;
        self
    }
    /// <p>The language code for the template (for example, en_US).</p>
    pub fn get_template_language(&self) -> &::std::option::Option<::std::string::String> {
        &self.template_language
    }
    /// Appends an item to `library_template_button_inputs`.
    ///
    /// To override the contents of this collection use [`set_library_template_button_inputs`](Self::set_library_template_button_inputs).
    ///
    /// <p>Button customizations for the template.</p>
    pub fn library_template_button_inputs(mut self, input: crate::types::LibraryTemplateButtonInput) -> Self {
        let mut v = self.library_template_button_inputs.unwrap_or_default();
        v.push(input);
        self.library_template_button_inputs = ::std::option::Option::Some(v);
        self
    }
    /// <p>Button customizations for the template.</p>
    pub fn set_library_template_button_inputs(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::LibraryTemplateButtonInput>>,
    ) -> Self {
        self.library_template_button_inputs = input;
        self
    }
    /// <p>Button customizations for the template.</p>
    pub fn get_library_template_button_inputs(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::LibraryTemplateButtonInput>> {
        &self.library_template_button_inputs
    }
    /// <p>Body text customizations for the template.</p>
    pub fn library_template_body_inputs(mut self, input: crate::types::LibraryTemplateBodyInputs) -> Self {
        self.library_template_body_inputs = ::std::option::Option::Some(input);
        self
    }
    /// <p>Body text customizations for the template.</p>
    pub fn set_library_template_body_inputs(mut self, input: ::std::option::Option<crate::types::LibraryTemplateBodyInputs>) -> Self {
        self.library_template_body_inputs = input;
        self
    }
    /// <p>Body text customizations for the template.</p>
    pub fn get_library_template_body_inputs(&self) -> &::std::option::Option<crate::types::LibraryTemplateBodyInputs> {
        &self.library_template_body_inputs
    }
    /// Consumes the builder and constructs a [`MetaLibraryTemplate`](crate::types::MetaLibraryTemplate).
    /// This method will fail if any of the following fields are not set:
    /// - [`template_name`](crate::types::builders::MetaLibraryTemplateBuilder::template_name)
    /// - [`library_template_name`](crate::types::builders::MetaLibraryTemplateBuilder::library_template_name)
    /// - [`template_category`](crate::types::builders::MetaLibraryTemplateBuilder::template_category)
    /// - [`template_language`](crate::types::builders::MetaLibraryTemplateBuilder::template_language)
    pub fn build(self) -> ::std::result::Result<crate::types::MetaLibraryTemplate, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::MetaLibraryTemplate {
            template_name: self.template_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "template_name",
                    "template_name was not specified but it is required when building MetaLibraryTemplate",
                )
            })?,
            library_template_name: self.library_template_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "library_template_name",
                    "library_template_name was not specified but it is required when building MetaLibraryTemplate",
                )
            })?,
            template_category: self.template_category.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "template_category",
                    "template_category was not specified but it is required when building MetaLibraryTemplate",
                )
            })?,
            template_language: self.template_language.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "template_language",
                    "template_language was not specified but it is required when building MetaLibraryTemplate",
                )
            })?,
            library_template_button_inputs: self.library_template_button_inputs,
            library_template_body_inputs: self.library_template_body_inputs,
        })
    }
}
