// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration options for customizing the body content of a template from Meta's library.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LibraryTemplateBodyInputs {
    /// <p>When true, includes a contact number in the template body.</p>
    pub add_contact_number: ::std::option::Option<bool>,
    /// <p>When true, includes a "learn more" link in the template body.</p>
    pub add_learn_more_link: ::std::option::Option<bool>,
    /// <p>When true, includes security recommendations in the template body.</p>
    pub add_security_recommendation: ::std::option::Option<bool>,
    /// <p>When true, includes a package tracking link in the template body.</p>
    pub add_track_package_link: ::std::option::Option<bool>,
    /// <p>The number of minutes until a verification code or OTP expires.</p>
    pub code_expiration_minutes: ::std::option::Option<i32>,
}
impl LibraryTemplateBodyInputs {
    /// <p>When true, includes a contact number in the template body.</p>
    pub fn add_contact_number(&self) -> ::std::option::Option<bool> {
        self.add_contact_number
    }
    /// <p>When true, includes a "learn more" link in the template body.</p>
    pub fn add_learn_more_link(&self) -> ::std::option::Option<bool> {
        self.add_learn_more_link
    }
    /// <p>When true, includes security recommendations in the template body.</p>
    pub fn add_security_recommendation(&self) -> ::std::option::Option<bool> {
        self.add_security_recommendation
    }
    /// <p>When true, includes a package tracking link in the template body.</p>
    pub fn add_track_package_link(&self) -> ::std::option::Option<bool> {
        self.add_track_package_link
    }
    /// <p>The number of minutes until a verification code or OTP expires.</p>
    pub fn code_expiration_minutes(&self) -> ::std::option::Option<i32> {
        self.code_expiration_minutes
    }
}
impl LibraryTemplateBodyInputs {
    /// Creates a new builder-style object to manufacture [`LibraryTemplateBodyInputs`](crate::types::LibraryTemplateBodyInputs).
    pub fn builder() -> crate::types::builders::LibraryTemplateBodyInputsBuilder {
        crate::types::builders::LibraryTemplateBodyInputsBuilder::default()
    }
}

/// A builder for [`LibraryTemplateBodyInputs`](crate::types::LibraryTemplateBodyInputs).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct LibraryTemplateBodyInputsBuilder {
    pub(crate) add_contact_number: ::std::option::Option<bool>,
    pub(crate) add_learn_more_link: ::std::option::Option<bool>,
    pub(crate) add_security_recommendation: ::std::option::Option<bool>,
    pub(crate) add_track_package_link: ::std::option::Option<bool>,
    pub(crate) code_expiration_minutes: ::std::option::Option<i32>,
}
impl LibraryTemplateBodyInputsBuilder {
    /// <p>When true, includes a contact number in the template body.</p>
    pub fn add_contact_number(mut self, input: bool) -> Self {
        self.add_contact_number = ::std::option::Option::Some(input);
        self
    }
    /// <p>When true, includes a contact number in the template body.</p>
    pub fn set_add_contact_number(mut self, input: ::std::option::Option<bool>) -> Self {
        self.add_contact_number = input;
        self
    }
    /// <p>When true, includes a contact number in the template body.</p>
    pub fn get_add_contact_number(&self) -> &::std::option::Option<bool> {
        &self.add_contact_number
    }
    /// <p>When true, includes a "learn more" link in the template body.</p>
    pub fn add_learn_more_link(mut self, input: bool) -> Self {
        self.add_learn_more_link = ::std::option::Option::Some(input);
        self
    }
    /// <p>When true, includes a "learn more" link in the template body.</p>
    pub fn set_add_learn_more_link(mut self, input: ::std::option::Option<bool>) -> Self {
        self.add_learn_more_link = input;
        self
    }
    /// <p>When true, includes a "learn more" link in the template body.</p>
    pub fn get_add_learn_more_link(&self) -> &::std::option::Option<bool> {
        &self.add_learn_more_link
    }
    /// <p>When true, includes security recommendations in the template body.</p>
    pub fn add_security_recommendation(mut self, input: bool) -> Self {
        self.add_security_recommendation = ::std::option::Option::Some(input);
        self
    }
    /// <p>When true, includes security recommendations in the template body.</p>
    pub fn set_add_security_recommendation(mut self, input: ::std::option::Option<bool>) -> Self {
        self.add_security_recommendation = input;
        self
    }
    /// <p>When true, includes security recommendations in the template body.</p>
    pub fn get_add_security_recommendation(&self) -> &::std::option::Option<bool> {
        &self.add_security_recommendation
    }
    /// <p>When true, includes a package tracking link in the template body.</p>
    pub fn add_track_package_link(mut self, input: bool) -> Self {
        self.add_track_package_link = ::std::option::Option::Some(input);
        self
    }
    /// <p>When true, includes a package tracking link in the template body.</p>
    pub fn set_add_track_package_link(mut self, input: ::std::option::Option<bool>) -> Self {
        self.add_track_package_link = input;
        self
    }
    /// <p>When true, includes a package tracking link in the template body.</p>
    pub fn get_add_track_package_link(&self) -> &::std::option::Option<bool> {
        &self.add_track_package_link
    }
    /// <p>The number of minutes until a verification code or OTP expires.</p>
    pub fn code_expiration_minutes(mut self, input: i32) -> Self {
        self.code_expiration_minutes = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of minutes until a verification code or OTP expires.</p>
    pub fn set_code_expiration_minutes(mut self, input: ::std::option::Option<i32>) -> Self {
        self.code_expiration_minutes = input;
        self
    }
    /// <p>The number of minutes until a verification code or OTP expires.</p>
    pub fn get_code_expiration_minutes(&self) -> &::std::option::Option<i32> {
        &self.code_expiration_minutes
    }
    /// Consumes the builder and constructs a [`LibraryTemplateBodyInputs`](crate::types::LibraryTemplateBodyInputs).
    pub fn build(self) -> crate::types::LibraryTemplateBodyInputs {
        crate::types::LibraryTemplateBodyInputs {
            add_contact_number: self.add_contact_number,
            add_learn_more_link: self.add_learn_more_link,
            add_security_recommendation: self.add_security_recommendation,
            add_track_package_link: self.add_track_package_link,
            code_expiration_minutes: self.code_expiration_minutes,
        }
    }
}
