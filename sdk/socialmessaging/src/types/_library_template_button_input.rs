// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration options for customizing buttons in a template from Meta's library.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LibraryTemplateButtonInput {
    /// <p>The type of button (for example, QUICK_REPLY, CALL, or URL).</p>
    pub r#type: ::std::option::Option<::std::string::String>,
    /// <p>The phone number in E.164 format for CALL-type buttons.</p>
    pub phone_number: ::std::option::Option<::std::string::String>,
    /// <p>The URL with dynamic parameters for URL-type buttons.</p>
    pub url: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The type of one-time password for OTP buttons.</p>
    pub otp_type: ::std::option::Option<::std::string::String>,
    /// <p>When true, indicates acceptance of zero-tap terms for the button.</p>
    pub zero_tap_terms_accepted: ::std::option::Option<bool>,
    /// <p>List of supported applications for this button type.</p>
    pub supported_apps: ::std::option::Option<::std::vec::Vec<::std::collections::HashMap<::std::string::String, ::std::string::String>>>,
}
impl LibraryTemplateButtonInput {
    /// <p>The type of button (for example, QUICK_REPLY, CALL, or URL).</p>
    pub fn r#type(&self) -> ::std::option::Option<&str> {
        self.r#type.as_deref()
    }
    /// <p>The phone number in E.164 format for CALL-type buttons.</p>
    pub fn phone_number(&self) -> ::std::option::Option<&str> {
        self.phone_number.as_deref()
    }
    /// <p>The URL with dynamic parameters for URL-type buttons.</p>
    pub fn url(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.url.as_ref()
    }
    /// <p>The type of one-time password for OTP buttons.</p>
    pub fn otp_type(&self) -> ::std::option::Option<&str> {
        self.otp_type.as_deref()
    }
    /// <p>When true, indicates acceptance of zero-tap terms for the button.</p>
    pub fn zero_tap_terms_accepted(&self) -> ::std::option::Option<bool> {
        self.zero_tap_terms_accepted
    }
    /// <p>List of supported applications for this button type.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.supported_apps.is_none()`.
    pub fn supported_apps(&self) -> &[::std::collections::HashMap<::std::string::String, ::std::string::String>] {
        self.supported_apps.as_deref().unwrap_or_default()
    }
}
impl LibraryTemplateButtonInput {
    /// Creates a new builder-style object to manufacture [`LibraryTemplateButtonInput`](crate::types::LibraryTemplateButtonInput).
    pub fn builder() -> crate::types::builders::LibraryTemplateButtonInputBuilder {
        crate::types::builders::LibraryTemplateButtonInputBuilder::default()
    }
}

/// A builder for [`LibraryTemplateButtonInput`](crate::types::LibraryTemplateButtonInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct LibraryTemplateButtonInputBuilder {
    pub(crate) r#type: ::std::option::Option<::std::string::String>,
    pub(crate) phone_number: ::std::option::Option<::std::string::String>,
    pub(crate) url: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) otp_type: ::std::option::Option<::std::string::String>,
    pub(crate) zero_tap_terms_accepted: ::std::option::Option<bool>,
    pub(crate) supported_apps: ::std::option::Option<::std::vec::Vec<::std::collections::HashMap<::std::string::String, ::std::string::String>>>,
}
impl LibraryTemplateButtonInputBuilder {
    /// <p>The type of button (for example, QUICK_REPLY, CALL, or URL).</p>
    pub fn r#type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.r#type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of button (for example, QUICK_REPLY, CALL, or URL).</p>
    pub fn set_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of button (for example, QUICK_REPLY, CALL, or URL).</p>
    pub fn get_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.r#type
    }
    /// <p>The phone number in E.164 format for CALL-type buttons.</p>
    pub fn phone_number(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.phone_number = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The phone number in E.164 format for CALL-type buttons.</p>
    pub fn set_phone_number(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.phone_number = input;
        self
    }
    /// <p>The phone number in E.164 format for CALL-type buttons.</p>
    pub fn get_phone_number(&self) -> &::std::option::Option<::std::string::String> {
        &self.phone_number
    }
    /// Adds a key-value pair to `url`.
    ///
    /// To override the contents of this collection use [`set_url`](Self::set_url).
    ///
    /// <p>The URL with dynamic parameters for URL-type buttons.</p>
    pub fn url(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.url.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.url = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The URL with dynamic parameters for URL-type buttons.</p>
    pub fn set_url(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.url = input;
        self
    }
    /// <p>The URL with dynamic parameters for URL-type buttons.</p>
    pub fn get_url(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.url
    }
    /// <p>The type of one-time password for OTP buttons.</p>
    pub fn otp_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.otp_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of one-time password for OTP buttons.</p>
    pub fn set_otp_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.otp_type = input;
        self
    }
    /// <p>The type of one-time password for OTP buttons.</p>
    pub fn get_otp_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.otp_type
    }
    /// <p>When true, indicates acceptance of zero-tap terms for the button.</p>
    pub fn zero_tap_terms_accepted(mut self, input: bool) -> Self {
        self.zero_tap_terms_accepted = ::std::option::Option::Some(input);
        self
    }
    /// <p>When true, indicates acceptance of zero-tap terms for the button.</p>
    pub fn set_zero_tap_terms_accepted(mut self, input: ::std::option::Option<bool>) -> Self {
        self.zero_tap_terms_accepted = input;
        self
    }
    /// <p>When true, indicates acceptance of zero-tap terms for the button.</p>
    pub fn get_zero_tap_terms_accepted(&self) -> &::std::option::Option<bool> {
        &self.zero_tap_terms_accepted
    }
    /// Appends an item to `supported_apps`.
    ///
    /// To override the contents of this collection use [`set_supported_apps`](Self::set_supported_apps).
    ///
    /// <p>List of supported applications for this button type.</p>
    pub fn supported_apps(mut self, input: ::std::collections::HashMap<::std::string::String, ::std::string::String>) -> Self {
        let mut v = self.supported_apps.unwrap_or_default();
        v.push(input);
        self.supported_apps = ::std::option::Option::Some(v);
        self
    }
    /// <p>List of supported applications for this button type.</p>
    pub fn set_supported_apps(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<::std::collections::HashMap<::std::string::String, ::std::string::String>>>,
    ) -> Self {
        self.supported_apps = input;
        self
    }
    /// <p>List of supported applications for this button type.</p>
    pub fn get_supported_apps(
        &self,
    ) -> &::std::option::Option<::std::vec::Vec<::std::collections::HashMap<::std::string::String, ::std::string::String>>> {
        &self.supported_apps
    }
    /// Consumes the builder and constructs a [`LibraryTemplateButtonInput`](crate::types::LibraryTemplateButtonInput).
    pub fn build(self) -> crate::types::LibraryTemplateButtonInput {
        crate::types::LibraryTemplateButtonInput {
            r#type: self.r#type,
            phone_number: self.phone_number,
            url: self.url,
            otp_type: self.otp_type,
            zero_tap_terms_accepted: self.zero_tap_terms_accepted,
            supported_apps: self.supported_apps,
        }
    }
}
