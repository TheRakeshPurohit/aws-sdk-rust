// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides a summary of a WhatsApp message template's key attributes.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TemplateSummary {
    /// <p>The name of the template.</p>
    pub template_name: ::std::option::Option<::std::string::String>,
    /// <p>The numeric ID assigned to the template by Meta.</p>
    pub meta_template_id: ::std::option::Option<::std::string::String>,
    /// <p>The current status of the template (for example, APPROVED, PENDING, or REJECTED).</p>
    pub template_status: ::std::option::Option<::std::string::String>,
    /// <p>The quality score assigned to the template by Meta.</p>
    pub template_quality_score: ::std::option::Option<::std::string::String>,
    /// <p>The language code of the template (for example, en_US).</p>
    pub template_language: ::std::option::Option<::std::string::String>,
    /// <p>The category of the template (for example, UTILITY or MARKETING).</p>
    pub template_category: ::std::option::Option<::std::string::String>,
}
impl TemplateSummary {
    /// <p>The name of the template.</p>
    pub fn template_name(&self) -> ::std::option::Option<&str> {
        self.template_name.as_deref()
    }
    /// <p>The numeric ID assigned to the template by Meta.</p>
    pub fn meta_template_id(&self) -> ::std::option::Option<&str> {
        self.meta_template_id.as_deref()
    }
    /// <p>The current status of the template (for example, APPROVED, PENDING, or REJECTED).</p>
    pub fn template_status(&self) -> ::std::option::Option<&str> {
        self.template_status.as_deref()
    }
    /// <p>The quality score assigned to the template by Meta.</p>
    pub fn template_quality_score(&self) -> ::std::option::Option<&str> {
        self.template_quality_score.as_deref()
    }
    /// <p>The language code of the template (for example, en_US).</p>
    pub fn template_language(&self) -> ::std::option::Option<&str> {
        self.template_language.as_deref()
    }
    /// <p>The category of the template (for example, UTILITY or MARKETING).</p>
    pub fn template_category(&self) -> ::std::option::Option<&str> {
        self.template_category.as_deref()
    }
}
impl TemplateSummary {
    /// Creates a new builder-style object to manufacture [`TemplateSummary`](crate::types::TemplateSummary).
    pub fn builder() -> crate::types::builders::TemplateSummaryBuilder {
        crate::types::builders::TemplateSummaryBuilder::default()
    }
}

/// A builder for [`TemplateSummary`](crate::types::TemplateSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct TemplateSummaryBuilder {
    pub(crate) template_name: ::std::option::Option<::std::string::String>,
    pub(crate) meta_template_id: ::std::option::Option<::std::string::String>,
    pub(crate) template_status: ::std::option::Option<::std::string::String>,
    pub(crate) template_quality_score: ::std::option::Option<::std::string::String>,
    pub(crate) template_language: ::std::option::Option<::std::string::String>,
    pub(crate) template_category: ::std::option::Option<::std::string::String>,
}
impl TemplateSummaryBuilder {
    /// <p>The name of the template.</p>
    pub fn template_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.template_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the template.</p>
    pub fn set_template_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.template_name = input;
        self
    }
    /// <p>The name of the template.</p>
    pub fn get_template_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.template_name
    }
    /// <p>The numeric ID assigned to the template by Meta.</p>
    pub fn meta_template_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.meta_template_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The numeric ID assigned to the template by Meta.</p>
    pub fn set_meta_template_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.meta_template_id = input;
        self
    }
    /// <p>The numeric ID assigned to the template by Meta.</p>
    pub fn get_meta_template_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.meta_template_id
    }
    /// <p>The current status of the template (for example, APPROVED, PENDING, or REJECTED).</p>
    pub fn template_status(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.template_status = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The current status of the template (for example, APPROVED, PENDING, or REJECTED).</p>
    pub fn set_template_status(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.template_status = input;
        self
    }
    /// <p>The current status of the template (for example, APPROVED, PENDING, or REJECTED).</p>
    pub fn get_template_status(&self) -> &::std::option::Option<::std::string::String> {
        &self.template_status
    }
    /// <p>The quality score assigned to the template by Meta.</p>
    pub fn template_quality_score(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.template_quality_score = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The quality score assigned to the template by Meta.</p>
    pub fn set_template_quality_score(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.template_quality_score = input;
        self
    }
    /// <p>The quality score assigned to the template by Meta.</p>
    pub fn get_template_quality_score(&self) -> &::std::option::Option<::std::string::String> {
        &self.template_quality_score
    }
    /// <p>The language code of the template (for example, en_US).</p>
    pub fn template_language(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.template_language = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The language code of the template (for example, en_US).</p>
    pub fn set_template_language(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.template_language = input;
        self
    }
    /// <p>The language code of the template (for example, en_US).</p>
    pub fn get_template_language(&self) -> &::std::option::Option<::std::string::String> {
        &self.template_language
    }
    /// <p>The category of the template (for example, UTILITY or MARKETING).</p>
    pub fn template_category(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.template_category = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The category of the template (for example, UTILITY or MARKETING).</p>
    pub fn set_template_category(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.template_category = input;
        self
    }
    /// <p>The category of the template (for example, UTILITY or MARKETING).</p>
    pub fn get_template_category(&self) -> &::std::option::Option<::std::string::String> {
        &self.template_category
    }
    /// Consumes the builder and constructs a [`TemplateSummary`](crate::types::TemplateSummary).
    pub fn build(self) -> crate::types::TemplateSummary {
        crate::types::TemplateSummary {
            template_name: self.template_name,
            meta_template_id: self.meta_template_id,
            template_status: self.template_status,
            template_quality_score: self.template_quality_score,
            template_language: self.template_language,
            template_category: self.template_category,
        }
    }
}
