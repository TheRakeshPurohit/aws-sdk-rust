// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateWhatsAppMessageTemplateFromLibraryOutput {
    /// <p>The numeric ID assigned to the template by Meta.</p>
    pub meta_template_id: ::std::option::Option<::std::string::String>,
    /// <p>The status of the created template (for example, PENDING or APPROVED).</p>
    pub template_status: ::std::option::Option<::std::string::String>,
    /// <p>The category of the template (for example, UTILITY or MARKETING).</p>
    pub category: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl CreateWhatsAppMessageTemplateFromLibraryOutput {
    /// <p>The numeric ID assigned to the template by Meta.</p>
    pub fn meta_template_id(&self) -> ::std::option::Option<&str> {
        self.meta_template_id.as_deref()
    }
    /// <p>The status of the created template (for example, PENDING or APPROVED).</p>
    pub fn template_status(&self) -> ::std::option::Option<&str> {
        self.template_status.as_deref()
    }
    /// <p>The category of the template (for example, UTILITY or MARKETING).</p>
    pub fn category(&self) -> ::std::option::Option<&str> {
        self.category.as_deref()
    }
}
impl ::aws_types::request_id::RequestId for CreateWhatsAppMessageTemplateFromLibraryOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateWhatsAppMessageTemplateFromLibraryOutput {
    /// Creates a new builder-style object to manufacture [`CreateWhatsAppMessageTemplateFromLibraryOutput`](crate::operation::create_whats_app_message_template_from_library::CreateWhatsAppMessageTemplateFromLibraryOutput).
    pub fn builder(
    ) -> crate::operation::create_whats_app_message_template_from_library::builders::CreateWhatsAppMessageTemplateFromLibraryOutputBuilder {
        crate::operation::create_whats_app_message_template_from_library::builders::CreateWhatsAppMessageTemplateFromLibraryOutputBuilder::default()
    }
}

/// A builder for [`CreateWhatsAppMessageTemplateFromLibraryOutput`](crate::operation::create_whats_app_message_template_from_library::CreateWhatsAppMessageTemplateFromLibraryOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateWhatsAppMessageTemplateFromLibraryOutputBuilder {
    pub(crate) meta_template_id: ::std::option::Option<::std::string::String>,
    pub(crate) template_status: ::std::option::Option<::std::string::String>,
    pub(crate) category: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl CreateWhatsAppMessageTemplateFromLibraryOutputBuilder {
    /// <p>The numeric ID assigned to the template by Meta.</p>
    pub fn meta_template_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.meta_template_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The numeric ID assigned to the template by Meta.</p>
    pub fn set_meta_template_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.meta_template_id = input;
        self
    }
    /// <p>The numeric ID assigned to the template by Meta.</p>
    pub fn get_meta_template_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.meta_template_id
    }
    /// <p>The status of the created template (for example, PENDING or APPROVED).</p>
    pub fn template_status(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.template_status = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The status of the created template (for example, PENDING or APPROVED).</p>
    pub fn set_template_status(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.template_status = input;
        self
    }
    /// <p>The status of the created template (for example, PENDING or APPROVED).</p>
    pub fn get_template_status(&self) -> &::std::option::Option<::std::string::String> {
        &self.template_status
    }
    /// <p>The category of the template (for example, UTILITY or MARKETING).</p>
    pub fn category(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.category = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The category of the template (for example, UTILITY or MARKETING).</p>
    pub fn set_category(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.category = input;
        self
    }
    /// <p>The category of the template (for example, UTILITY or MARKETING).</p>
    pub fn get_category(&self) -> &::std::option::Option<::std::string::String> {
        &self.category
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CreateWhatsAppMessageTemplateFromLibraryOutput`](crate::operation::create_whats_app_message_template_from_library::CreateWhatsAppMessageTemplateFromLibraryOutput).
    pub fn build(self) -> crate::operation::create_whats_app_message_template_from_library::CreateWhatsAppMessageTemplateFromLibraryOutput {
        crate::operation::create_whats_app_message_template_from_library::CreateWhatsAppMessageTemplateFromLibraryOutput {
            meta_template_id: self.meta_template_id,
            template_status: self.template_status,
            category: self.category,
            _request_id: self._request_id,
        }
    }
}
