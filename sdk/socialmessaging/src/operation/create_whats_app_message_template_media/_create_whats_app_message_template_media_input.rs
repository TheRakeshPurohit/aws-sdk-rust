// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CreateWhatsAppMessageTemplateMediaInput {
    /// <p>The ID of the WhatsApp Business Account associated with this media upload.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>Contains information for the S3 bucket that contains media files.</p>
    pub source_s3_file: ::std::option::Option<crate::types::S3File>,
}
impl CreateWhatsAppMessageTemplateMediaInput {
    /// <p>The ID of the WhatsApp Business Account associated with this media upload.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>Contains information for the S3 bucket that contains media files.</p>
    pub fn source_s3_file(&self) -> ::std::option::Option<&crate::types::S3File> {
        self.source_s3_file.as_ref()
    }
}
impl ::std::fmt::Debug for CreateWhatsAppMessageTemplateMediaInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateWhatsAppMessageTemplateMediaInput");
        formatter.field("id", &self.id);
        formatter.field("source_s3_file", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl CreateWhatsAppMessageTemplateMediaInput {
    /// Creates a new builder-style object to manufacture [`CreateWhatsAppMessageTemplateMediaInput`](crate::operation::create_whats_app_message_template_media::CreateWhatsAppMessageTemplateMediaInput).
    pub fn builder() -> crate::operation::create_whats_app_message_template_media::builders::CreateWhatsAppMessageTemplateMediaInputBuilder {
        crate::operation::create_whats_app_message_template_media::builders::CreateWhatsAppMessageTemplateMediaInputBuilder::default()
    }
}

/// A builder for [`CreateWhatsAppMessageTemplateMediaInput`](crate::operation::create_whats_app_message_template_media::CreateWhatsAppMessageTemplateMediaInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct CreateWhatsAppMessageTemplateMediaInputBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) source_s3_file: ::std::option::Option<crate::types::S3File>,
}
impl CreateWhatsAppMessageTemplateMediaInputBuilder {
    /// <p>The ID of the WhatsApp Business Account associated with this media upload.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the WhatsApp Business Account associated with this media upload.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The ID of the WhatsApp Business Account associated with this media upload.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>Contains information for the S3 bucket that contains media files.</p>
    pub fn source_s3_file(mut self, input: crate::types::S3File) -> Self {
        self.source_s3_file = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains information for the S3 bucket that contains media files.</p>
    pub fn set_source_s3_file(mut self, input: ::std::option::Option<crate::types::S3File>) -> Self {
        self.source_s3_file = input;
        self
    }
    /// <p>Contains information for the S3 bucket that contains media files.</p>
    pub fn get_source_s3_file(&self) -> &::std::option::Option<crate::types::S3File> {
        &self.source_s3_file
    }
    /// Consumes the builder and constructs a [`CreateWhatsAppMessageTemplateMediaInput`](crate::operation::create_whats_app_message_template_media::CreateWhatsAppMessageTemplateMediaInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_whats_app_message_template_media::CreateWhatsAppMessageTemplateMediaInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::create_whats_app_message_template_media::CreateWhatsAppMessageTemplateMediaInput {
                id: self.id,
                source_s3_file: self.source_s3_file,
            },
        )
    }
}
impl ::std::fmt::Debug for CreateWhatsAppMessageTemplateMediaInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateWhatsAppMessageTemplateMediaInputBuilder");
        formatter.field("id", &self.id);
        formatter.field("source_s3_file", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
