// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateWhatsAppMessageTemplateMediaOutput {
    /// <p>The handle assigned to the uploaded media by Meta, used to reference the media in templates.</p>
    pub meta_header_handle: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl CreateWhatsAppMessageTemplateMediaOutput {
    /// <p>The handle assigned to the uploaded media by Meta, used to reference the media in templates.</p>
    pub fn meta_header_handle(&self) -> ::std::option::Option<&str> {
        self.meta_header_handle.as_deref()
    }
}
impl ::aws_types::request_id::RequestId for CreateWhatsAppMessageTemplateMediaOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateWhatsAppMessageTemplateMediaOutput {
    /// Creates a new builder-style object to manufacture [`CreateWhatsAppMessageTemplateMediaOutput`](crate::operation::create_whats_app_message_template_media::CreateWhatsAppMessageTemplateMediaOutput).
    pub fn builder() -> crate::operation::create_whats_app_message_template_media::builders::CreateWhatsAppMessageTemplateMediaOutputBuilder {
        crate::operation::create_whats_app_message_template_media::builders::CreateWhatsAppMessageTemplateMediaOutputBuilder::default()
    }
}

/// A builder for [`CreateWhatsAppMessageTemplateMediaOutput`](crate::operation::create_whats_app_message_template_media::CreateWhatsAppMessageTemplateMediaOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateWhatsAppMessageTemplateMediaOutputBuilder {
    pub(crate) meta_header_handle: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl CreateWhatsAppMessageTemplateMediaOutputBuilder {
    /// <p>The handle assigned to the uploaded media by Meta, used to reference the media in templates.</p>
    pub fn meta_header_handle(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.meta_header_handle = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The handle assigned to the uploaded media by Meta, used to reference the media in templates.</p>
    pub fn set_meta_header_handle(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.meta_header_handle = input;
        self
    }
    /// <p>The handle assigned to the uploaded media by Meta, used to reference the media in templates.</p>
    pub fn get_meta_header_handle(&self) -> &::std::option::Option<::std::string::String> {
        &self.meta_header_handle
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CreateWhatsAppMessageTemplateMediaOutput`](crate::operation::create_whats_app_message_template_media::CreateWhatsAppMessageTemplateMediaOutput).
    pub fn build(self) -> crate::operation::create_whats_app_message_template_media::CreateWhatsAppMessageTemplateMediaOutput {
        crate::operation::create_whats_app_message_template_media::CreateWhatsAppMessageTemplateMediaOutput {
            meta_header_handle: self.meta_header_handle,
            _request_id: self._request_id,
        }
    }
}
