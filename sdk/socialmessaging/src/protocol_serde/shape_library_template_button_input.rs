// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_library_template_button_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::LibraryTemplateButtonInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.r#type {
        object.key("type").string(var_1.as_str());
    }
    if let Some(var_2) = &input.phone_number {
        object.key("phoneNumber").string(var_2.as_str());
    }
    if let Some(var_3) = &input.url {
        #[allow(unused_mut)]
        let mut object_4 = object.key("url").start_object();
        for (key_5, value_6) in var_3 {
            {
                object_4.key(key_5.as_str()).string(value_6.as_str());
            }
        }
        object_4.finish();
    }
    if let Some(var_7) = &input.otp_type {
        object.key("otpType").string(var_7.as_str());
    }
    if let Some(var_8) = &input.zero_tap_terms_accepted {
        object.key("zeroTapTermsAccepted").boolean(*var_8);
    }
    if let Some(var_9) = &input.supported_apps {
        let mut array_10 = object.key("supportedApps").start_array();
        for item_11 in var_9 {
            {
                #[allow(unused_mut)]
                let mut object_12 = array_10.value().start_object();
                for (key_13, value_14) in item_11 {
                    {
                        object_12.key(key_13.as_str()).string(value_14.as_str());
                    }
                }
                object_12.finish();
            }
        }
        array_10.finish();
    }
    Ok(())
}
