// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum Error {
    /// <p>You do not have sufficient access to perform this action.</p>
    AccessDeniedByMetaException(crate::types::error::AccessDeniedByMetaException),
    /// <p>You do not have sufficient access to perform this action.</p>
    AccessDeniedException(crate::types::error::AccessDeniedException),
    /// <p>Thrown when performing an action because a dependency would be broken.</p>
    DependencyException(crate::types::error::DependencyException),
    /// <p>The request processing has failed because of an unknown error, exception, or failure.</p>
    InternalServiceException(crate::types::error::InternalServiceException),
    /// <p>One or more parameters provided to the action are not valid.</p>
    InvalidParametersException(crate::types::error::InvalidParametersException),
    /// <p>The request was denied because it would exceed one or more service quotas or limits.</p>
    LimitExceededException(crate::types::error::LimitExceededException),
    /// <p>The resource was not found.</p>
    ResourceNotFoundException(crate::types::error::ResourceNotFoundException),
    /// <p>The request was denied due to request throttling.</p>
    ThrottledRequestException(crate::types::error::ThrottledRequestException),
    /// <p>The request contains an invalid parameter value.</p>
    ValidationException(crate::types::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    #[deprecated(note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
    variable wildcard pattern and check `.code()`:
     \
    &nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
     \
    See [`ProvideErrorMetadata`](#impl-ProvideErrorMetadata-for-Error) for what information is available for the error.")]
    Unhandled(crate::error::sealed_unhandled::Unhandled),
}
impl ::std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedByMetaException(inner) => inner.fmt(f),
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::DependencyException(inner) => inner.fmt(f),
            Error::InternalServiceException(inner) => inner.fmt(f),
            Error::InvalidParametersException(inner) => inner.fmt(f),
            Error::LimitExceededException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ThrottledRequestException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(_) => {
                if let ::std::option::Option::Some(code) = ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self) {
                    write!(f, "unhandled error ({code})")
                } else {
                    f.write_str("unhandled error")
                }
            }
        }
    }
}
impl From<::aws_smithy_types::error::operation::BuildError> for Error {
    fn from(value: ::aws_smithy_types::error::operation::BuildError) -> Self {
        Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
            source: value.into(),
            meta: ::std::default::Default::default(),
        })
    }
}
impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for Error {
    fn meta(&self) -> &::aws_smithy_types::error::metadata::ErrorMetadata {
        match self {
            Self::AccessDeniedByMetaException(inner) => inner.meta(),
            Self::AccessDeniedException(inner) => inner.meta(),
            Self::DependencyException(inner) => inner.meta(),
            Self::InternalServiceException(inner) => inner.meta(),
            Self::InvalidParametersException(inner) => inner.meta(),
            Self::LimitExceededException(inner) => inner.meta(),
            Self::ResourceNotFoundException(inner) => inner.meta(),
            Self::ThrottledRequestException(inner) => inner.meta(),
            Self::ValidationException(inner) => inner.meta(),
            Self::Unhandled(inner) => &inner.meta,
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::associate_whats_app_business_account::AssociateWhatsAppBusinessAccountError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::associate_whats_app_business_account::AssociateWhatsAppBusinessAccountError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::associate_whats_app_business_account::AssociateWhatsAppBusinessAccountError> for Error {
    fn from(err: crate::operation::associate_whats_app_business_account::AssociateWhatsAppBusinessAccountError) -> Self {
        match err {
            crate::operation::associate_whats_app_business_account::AssociateWhatsAppBusinessAccountError::DependencyException(inner) => {
                Error::DependencyException(inner)
            }
            crate::operation::associate_whats_app_business_account::AssociateWhatsAppBusinessAccountError::InvalidParametersException(inner) => {
                Error::InvalidParametersException(inner)
            }
            crate::operation::associate_whats_app_business_account::AssociateWhatsAppBusinessAccountError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::associate_whats_app_business_account::AssociateWhatsAppBusinessAccountError::ThrottledRequestException(inner) => {
                Error::ThrottledRequestException(inner)
            }
            crate::operation::associate_whats_app_business_account::AssociateWhatsAppBusinessAccountError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::associate_whats_app_business_account::AssociateWhatsAppBusinessAccountError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::associate_whats_app_business_account::AssociateWhatsAppBusinessAccountError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_whats_app_message_template::CreateWhatsAppMessageTemplateError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_whats_app_message_template::CreateWhatsAppMessageTemplateError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_whats_app_message_template::CreateWhatsAppMessageTemplateError> for Error {
    fn from(err: crate::operation::create_whats_app_message_template::CreateWhatsAppMessageTemplateError) -> Self {
        match err {
            crate::operation::create_whats_app_message_template::CreateWhatsAppMessageTemplateError::DependencyException(inner) => {
                Error::DependencyException(inner)
            }
            crate::operation::create_whats_app_message_template::CreateWhatsAppMessageTemplateError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::operation::create_whats_app_message_template::CreateWhatsAppMessageTemplateError::InvalidParametersException(inner) => {
                Error::InvalidParametersException(inner)
            }
            crate::operation::create_whats_app_message_template::CreateWhatsAppMessageTemplateError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_whats_app_message_template::CreateWhatsAppMessageTemplateError::ThrottledRequestException(inner) => {
                Error::ThrottledRequestException(inner)
            }
            crate::operation::create_whats_app_message_template::CreateWhatsAppMessageTemplateError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_whats_app_message_template::CreateWhatsAppMessageTemplateError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_whats_app_message_template::CreateWhatsAppMessageTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_whats_app_message_template_from_library::CreateWhatsAppMessageTemplateFromLibraryError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_whats_app_message_template_from_library::CreateWhatsAppMessageTemplateFromLibraryError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_whats_app_message_template_from_library::CreateWhatsAppMessageTemplateFromLibraryError> for Error {
    fn from(err: crate::operation::create_whats_app_message_template_from_library::CreateWhatsAppMessageTemplateFromLibraryError) -> Self {
        match err {
            crate::operation::create_whats_app_message_template_from_library::CreateWhatsAppMessageTemplateFromLibraryError::DependencyException(inner) => Error::DependencyException(inner),
            crate::operation::create_whats_app_message_template_from_library::CreateWhatsAppMessageTemplateFromLibraryError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::create_whats_app_message_template_from_library::CreateWhatsAppMessageTemplateFromLibraryError::InvalidParametersException(inner) => Error::InvalidParametersException(inner),
            crate::operation::create_whats_app_message_template_from_library::CreateWhatsAppMessageTemplateFromLibraryError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_whats_app_message_template_from_library::CreateWhatsAppMessageTemplateFromLibraryError::ThrottledRequestException(inner) => Error::ThrottledRequestException(inner),
            crate::operation::create_whats_app_message_template_from_library::CreateWhatsAppMessageTemplateFromLibraryError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_whats_app_message_template_from_library::CreateWhatsAppMessageTemplateFromLibraryError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_whats_app_message_template_from_library::CreateWhatsAppMessageTemplateFromLibraryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_whats_app_message_template_media::CreateWhatsAppMessageTemplateMediaError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_whats_app_message_template_media::CreateWhatsAppMessageTemplateMediaError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_whats_app_message_template_media::CreateWhatsAppMessageTemplateMediaError> for Error {
    fn from(err: crate::operation::create_whats_app_message_template_media::CreateWhatsAppMessageTemplateMediaError) -> Self {
        match err {
            crate::operation::create_whats_app_message_template_media::CreateWhatsAppMessageTemplateMediaError::DependencyException(inner) => {
                Error::DependencyException(inner)
            }
            crate::operation::create_whats_app_message_template_media::CreateWhatsAppMessageTemplateMediaError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::operation::create_whats_app_message_template_media::CreateWhatsAppMessageTemplateMediaError::InvalidParametersException(inner) => {
                Error::InvalidParametersException(inner)
            }
            crate::operation::create_whats_app_message_template_media::CreateWhatsAppMessageTemplateMediaError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_whats_app_message_template_media::CreateWhatsAppMessageTemplateMediaError::ThrottledRequestException(inner) => {
                Error::ThrottledRequestException(inner)
            }
            crate::operation::create_whats_app_message_template_media::CreateWhatsAppMessageTemplateMediaError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_whats_app_message_template_media::CreateWhatsAppMessageTemplateMediaError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_whats_app_message_template_media::CreateWhatsAppMessageTemplateMediaError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_whats_app_message_media::DeleteWhatsAppMessageMediaError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_whats_app_message_media::DeleteWhatsAppMessageMediaError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_whats_app_message_media::DeleteWhatsAppMessageMediaError> for Error {
    fn from(err: crate::operation::delete_whats_app_message_media::DeleteWhatsAppMessageMediaError) -> Self {
        match err {
            crate::operation::delete_whats_app_message_media::DeleteWhatsAppMessageMediaError::AccessDeniedByMetaException(inner) => {
                Error::AccessDeniedByMetaException(inner)
            }
            crate::operation::delete_whats_app_message_media::DeleteWhatsAppMessageMediaError::DependencyException(inner) => {
                Error::DependencyException(inner)
            }
            crate::operation::delete_whats_app_message_media::DeleteWhatsAppMessageMediaError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::operation::delete_whats_app_message_media::DeleteWhatsAppMessageMediaError::InvalidParametersException(inner) => {
                Error::InvalidParametersException(inner)
            }
            crate::operation::delete_whats_app_message_media::DeleteWhatsAppMessageMediaError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_whats_app_message_media::DeleteWhatsAppMessageMediaError::ThrottledRequestException(inner) => {
                Error::ThrottledRequestException(inner)
            }
            crate::operation::delete_whats_app_message_media::DeleteWhatsAppMessageMediaError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_whats_app_message_media::DeleteWhatsAppMessageMediaError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_whats_app_message_media::DeleteWhatsAppMessageMediaError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_whats_app_message_template::DeleteWhatsAppMessageTemplateError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_whats_app_message_template::DeleteWhatsAppMessageTemplateError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_whats_app_message_template::DeleteWhatsAppMessageTemplateError> for Error {
    fn from(err: crate::operation::delete_whats_app_message_template::DeleteWhatsAppMessageTemplateError) -> Self {
        match err {
            crate::operation::delete_whats_app_message_template::DeleteWhatsAppMessageTemplateError::DependencyException(inner) => {
                Error::DependencyException(inner)
            }
            crate::operation::delete_whats_app_message_template::DeleteWhatsAppMessageTemplateError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::operation::delete_whats_app_message_template::DeleteWhatsAppMessageTemplateError::InvalidParametersException(inner) => {
                Error::InvalidParametersException(inner)
            }
            crate::operation::delete_whats_app_message_template::DeleteWhatsAppMessageTemplateError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_whats_app_message_template::DeleteWhatsAppMessageTemplateError::ThrottledRequestException(inner) => {
                Error::ThrottledRequestException(inner)
            }
            crate::operation::delete_whats_app_message_template::DeleteWhatsAppMessageTemplateError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_whats_app_message_template::DeleteWhatsAppMessageTemplateError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_whats_app_message_template::DeleteWhatsAppMessageTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::disassociate_whats_app_business_account::DisassociateWhatsAppBusinessAccountError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::disassociate_whats_app_business_account::DisassociateWhatsAppBusinessAccountError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::disassociate_whats_app_business_account::DisassociateWhatsAppBusinessAccountError> for Error {
    fn from(err: crate::operation::disassociate_whats_app_business_account::DisassociateWhatsAppBusinessAccountError) -> Self {
        match err {
            crate::operation::disassociate_whats_app_business_account::DisassociateWhatsAppBusinessAccountError::DependencyException(inner) => {
                Error::DependencyException(inner)
            }
            crate::operation::disassociate_whats_app_business_account::DisassociateWhatsAppBusinessAccountError::InvalidParametersException(
                inner,
            ) => Error::InvalidParametersException(inner),
            crate::operation::disassociate_whats_app_business_account::DisassociateWhatsAppBusinessAccountError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::disassociate_whats_app_business_account::DisassociateWhatsAppBusinessAccountError::ThrottledRequestException(inner) => {
                Error::ThrottledRequestException(inner)
            }
            crate::operation::disassociate_whats_app_business_account::DisassociateWhatsAppBusinessAccountError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::disassociate_whats_app_business_account::DisassociateWhatsAppBusinessAccountError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::disassociate_whats_app_business_account::DisassociateWhatsAppBusinessAccountError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_linked_whats_app_business_account::GetLinkedWhatsAppBusinessAccountError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_linked_whats_app_business_account::GetLinkedWhatsAppBusinessAccountError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_linked_whats_app_business_account::GetLinkedWhatsAppBusinessAccountError> for Error {
    fn from(err: crate::operation::get_linked_whats_app_business_account::GetLinkedWhatsAppBusinessAccountError) -> Self {
        match err {
            crate::operation::get_linked_whats_app_business_account::GetLinkedWhatsAppBusinessAccountError::DependencyException(inner) => {
                Error::DependencyException(inner)
            }
            crate::operation::get_linked_whats_app_business_account::GetLinkedWhatsAppBusinessAccountError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::operation::get_linked_whats_app_business_account::GetLinkedWhatsAppBusinessAccountError::InvalidParametersException(inner) => {
                Error::InvalidParametersException(inner)
            }
            crate::operation::get_linked_whats_app_business_account::GetLinkedWhatsAppBusinessAccountError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_linked_whats_app_business_account::GetLinkedWhatsAppBusinessAccountError::ThrottledRequestException(inner) => {
                Error::ThrottledRequestException(inner)
            }
            crate::operation::get_linked_whats_app_business_account::GetLinkedWhatsAppBusinessAccountError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_linked_whats_app_business_account::GetLinkedWhatsAppBusinessAccountError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_linked_whats_app_business_account::GetLinkedWhatsAppBusinessAccountError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_linked_whats_app_business_account_phone_number::GetLinkedWhatsAppBusinessAccountPhoneNumberError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_linked_whats_app_business_account_phone_number::GetLinkedWhatsAppBusinessAccountPhoneNumberError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_linked_whats_app_business_account_phone_number::GetLinkedWhatsAppBusinessAccountPhoneNumberError> for Error {
    fn from(err: crate::operation::get_linked_whats_app_business_account_phone_number::GetLinkedWhatsAppBusinessAccountPhoneNumberError) -> Self {
        match err {
            crate::operation::get_linked_whats_app_business_account_phone_number::GetLinkedWhatsAppBusinessAccountPhoneNumberError::DependencyException(inner) => Error::DependencyException(inner),
            crate::operation::get_linked_whats_app_business_account_phone_number::GetLinkedWhatsAppBusinessAccountPhoneNumberError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::get_linked_whats_app_business_account_phone_number::GetLinkedWhatsAppBusinessAccountPhoneNumberError::InvalidParametersException(inner) => Error::InvalidParametersException(inner),
            crate::operation::get_linked_whats_app_business_account_phone_number::GetLinkedWhatsAppBusinessAccountPhoneNumberError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_linked_whats_app_business_account_phone_number::GetLinkedWhatsAppBusinessAccountPhoneNumberError::ThrottledRequestException(inner) => Error::ThrottledRequestException(inner),
            crate::operation::get_linked_whats_app_business_account_phone_number::GetLinkedWhatsAppBusinessAccountPhoneNumberError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_linked_whats_app_business_account_phone_number::GetLinkedWhatsAppBusinessAccountPhoneNumberError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_linked_whats_app_business_account_phone_number::GetLinkedWhatsAppBusinessAccountPhoneNumberError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_whats_app_message_media::GetWhatsAppMessageMediaError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_whats_app_message_media::GetWhatsAppMessageMediaError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_whats_app_message_media::GetWhatsAppMessageMediaError> for Error {
    fn from(err: crate::operation::get_whats_app_message_media::GetWhatsAppMessageMediaError) -> Self {
        match err {
            crate::operation::get_whats_app_message_media::GetWhatsAppMessageMediaError::AccessDeniedByMetaException(inner) => {
                Error::AccessDeniedByMetaException(inner)
            }
            crate::operation::get_whats_app_message_media::GetWhatsAppMessageMediaError::DependencyException(inner) => {
                Error::DependencyException(inner)
            }
            crate::operation::get_whats_app_message_media::GetWhatsAppMessageMediaError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::operation::get_whats_app_message_media::GetWhatsAppMessageMediaError::InvalidParametersException(inner) => {
                Error::InvalidParametersException(inner)
            }
            crate::operation::get_whats_app_message_media::GetWhatsAppMessageMediaError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_whats_app_message_media::GetWhatsAppMessageMediaError::ThrottledRequestException(inner) => {
                Error::ThrottledRequestException(inner)
            }
            crate::operation::get_whats_app_message_media::GetWhatsAppMessageMediaError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_whats_app_message_media::GetWhatsAppMessageMediaError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_whats_app_message_media::GetWhatsAppMessageMediaError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_whats_app_message_template::GetWhatsAppMessageTemplateError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_whats_app_message_template::GetWhatsAppMessageTemplateError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_whats_app_message_template::GetWhatsAppMessageTemplateError> for Error {
    fn from(err: crate::operation::get_whats_app_message_template::GetWhatsAppMessageTemplateError) -> Self {
        match err {
            crate::operation::get_whats_app_message_template::GetWhatsAppMessageTemplateError::DependencyException(inner) => {
                Error::DependencyException(inner)
            }
            crate::operation::get_whats_app_message_template::GetWhatsAppMessageTemplateError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::operation::get_whats_app_message_template::GetWhatsAppMessageTemplateError::InvalidParametersException(inner) => {
                Error::InvalidParametersException(inner)
            }
            crate::operation::get_whats_app_message_template::GetWhatsAppMessageTemplateError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_whats_app_message_template::GetWhatsAppMessageTemplateError::ThrottledRequestException(inner) => {
                Error::ThrottledRequestException(inner)
            }
            crate::operation::get_whats_app_message_template::GetWhatsAppMessageTemplateError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_whats_app_message_template::GetWhatsAppMessageTemplateError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_whats_app_message_template::GetWhatsAppMessageTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_linked_whats_app_business_accounts::ListLinkedWhatsAppBusinessAccountsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_linked_whats_app_business_accounts::ListLinkedWhatsAppBusinessAccountsError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_linked_whats_app_business_accounts::ListLinkedWhatsAppBusinessAccountsError> for Error {
    fn from(err: crate::operation::list_linked_whats_app_business_accounts::ListLinkedWhatsAppBusinessAccountsError) -> Self {
        match err {
            crate::operation::list_linked_whats_app_business_accounts::ListLinkedWhatsAppBusinessAccountsError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::operation::list_linked_whats_app_business_accounts::ListLinkedWhatsAppBusinessAccountsError::InvalidParametersException(inner) => {
                Error::InvalidParametersException(inner)
            }
            crate::operation::list_linked_whats_app_business_accounts::ListLinkedWhatsAppBusinessAccountsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_linked_whats_app_business_accounts::ListLinkedWhatsAppBusinessAccountsError::ThrottledRequestException(inner) => {
                Error::ThrottledRequestException(inner)
            }
            crate::operation::list_linked_whats_app_business_accounts::ListLinkedWhatsAppBusinessAccountsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_linked_whats_app_business_accounts::ListLinkedWhatsAppBusinessAccountsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_linked_whats_app_business_accounts::ListLinkedWhatsAppBusinessAccountsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_tags_for_resource::ListTagsForResourceError> for Error {
    fn from(err: crate::operation::list_tags_for_resource::ListTagsForResourceError) -> Self {
        match err {
            crate::operation::list_tags_for_resource::ListTagsForResourceError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::InvalidParametersException(inner) => {
                Error::InvalidParametersException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ThrottledRequestException(inner) => {
                Error::ThrottledRequestException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_whats_app_message_templates::ListWhatsAppMessageTemplatesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_whats_app_message_templates::ListWhatsAppMessageTemplatesError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_whats_app_message_templates::ListWhatsAppMessageTemplatesError> for Error {
    fn from(err: crate::operation::list_whats_app_message_templates::ListWhatsAppMessageTemplatesError) -> Self {
        match err {
            crate::operation::list_whats_app_message_templates::ListWhatsAppMessageTemplatesError::DependencyException(inner) => {
                Error::DependencyException(inner)
            }
            crate::operation::list_whats_app_message_templates::ListWhatsAppMessageTemplatesError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::operation::list_whats_app_message_templates::ListWhatsAppMessageTemplatesError::InvalidParametersException(inner) => {
                Error::InvalidParametersException(inner)
            }
            crate::operation::list_whats_app_message_templates::ListWhatsAppMessageTemplatesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_whats_app_message_templates::ListWhatsAppMessageTemplatesError::ThrottledRequestException(inner) => {
                Error::ThrottledRequestException(inner)
            }
            crate::operation::list_whats_app_message_templates::ListWhatsAppMessageTemplatesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_whats_app_message_templates::ListWhatsAppMessageTemplatesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_whats_app_message_templates::ListWhatsAppMessageTemplatesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_whats_app_template_library::ListWhatsAppTemplateLibraryError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_whats_app_template_library::ListWhatsAppTemplateLibraryError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_whats_app_template_library::ListWhatsAppTemplateLibraryError> for Error {
    fn from(err: crate::operation::list_whats_app_template_library::ListWhatsAppTemplateLibraryError) -> Self {
        match err {
            crate::operation::list_whats_app_template_library::ListWhatsAppTemplateLibraryError::DependencyException(inner) => {
                Error::DependencyException(inner)
            }
            crate::operation::list_whats_app_template_library::ListWhatsAppTemplateLibraryError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::operation::list_whats_app_template_library::ListWhatsAppTemplateLibraryError::InvalidParametersException(inner) => {
                Error::InvalidParametersException(inner)
            }
            crate::operation::list_whats_app_template_library::ListWhatsAppTemplateLibraryError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_whats_app_template_library::ListWhatsAppTemplateLibraryError::ThrottledRequestException(inner) => {
                Error::ThrottledRequestException(inner)
            }
            crate::operation::list_whats_app_template_library::ListWhatsAppTemplateLibraryError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_whats_app_template_library::ListWhatsAppTemplateLibraryError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_whats_app_template_library::ListWhatsAppTemplateLibraryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::post_whats_app_message_media::PostWhatsAppMessageMediaError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::post_whats_app_message_media::PostWhatsAppMessageMediaError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::post_whats_app_message_media::PostWhatsAppMessageMediaError> for Error {
    fn from(err: crate::operation::post_whats_app_message_media::PostWhatsAppMessageMediaError) -> Self {
        match err {
            crate::operation::post_whats_app_message_media::PostWhatsAppMessageMediaError::AccessDeniedByMetaException(inner) => {
                Error::AccessDeniedByMetaException(inner)
            }
            crate::operation::post_whats_app_message_media::PostWhatsAppMessageMediaError::DependencyException(inner) => {
                Error::DependencyException(inner)
            }
            crate::operation::post_whats_app_message_media::PostWhatsAppMessageMediaError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::operation::post_whats_app_message_media::PostWhatsAppMessageMediaError::InvalidParametersException(inner) => {
                Error::InvalidParametersException(inner)
            }
            crate::operation::post_whats_app_message_media::PostWhatsAppMessageMediaError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::post_whats_app_message_media::PostWhatsAppMessageMediaError::ThrottledRequestException(inner) => {
                Error::ThrottledRequestException(inner)
            }
            crate::operation::post_whats_app_message_media::PostWhatsAppMessageMediaError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::post_whats_app_message_media::PostWhatsAppMessageMediaError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::post_whats_app_message_media::PostWhatsAppMessageMediaError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::put_whats_app_business_account_event_destinations::PutWhatsAppBusinessAccountEventDestinationsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::put_whats_app_business_account_event_destinations::PutWhatsAppBusinessAccountEventDestinationsError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::put_whats_app_business_account_event_destinations::PutWhatsAppBusinessAccountEventDestinationsError> for Error {
    fn from(err: crate::operation::put_whats_app_business_account_event_destinations::PutWhatsAppBusinessAccountEventDestinationsError) -> Self {
        match err {
            crate::operation::put_whats_app_business_account_event_destinations::PutWhatsAppBusinessAccountEventDestinationsError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::put_whats_app_business_account_event_destinations::PutWhatsAppBusinessAccountEventDestinationsError::InvalidParametersException(inner) => Error::InvalidParametersException(inner),
            crate::operation::put_whats_app_business_account_event_destinations::PutWhatsAppBusinessAccountEventDestinationsError::ThrottledRequestException(inner) => Error::ThrottledRequestException(inner),
            crate::operation::put_whats_app_business_account_event_destinations::PutWhatsAppBusinessAccountEventDestinationsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::put_whats_app_business_account_event_destinations::PutWhatsAppBusinessAccountEventDestinationsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::put_whats_app_business_account_event_destinations::PutWhatsAppBusinessAccountEventDestinationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::send_whats_app_message::SendWhatsAppMessageError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::send_whats_app_message::SendWhatsAppMessageError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::send_whats_app_message::SendWhatsAppMessageError> for Error {
    fn from(err: crate::operation::send_whats_app_message::SendWhatsAppMessageError) -> Self {
        match err {
            crate::operation::send_whats_app_message::SendWhatsAppMessageError::DependencyException(inner) => Error::DependencyException(inner),
            crate::operation::send_whats_app_message::SendWhatsAppMessageError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::operation::send_whats_app_message::SendWhatsAppMessageError::InvalidParametersException(inner) => {
                Error::InvalidParametersException(inner)
            }
            crate::operation::send_whats_app_message::SendWhatsAppMessageError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::send_whats_app_message::SendWhatsAppMessageError::ThrottledRequestException(inner) => {
                Error::ThrottledRequestException(inner)
            }
            crate::operation::send_whats_app_message::SendWhatsAppMessageError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::send_whats_app_message::SendWhatsAppMessageError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::send_whats_app_message::SendWhatsAppMessageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::tag_resource::TagResourceError> for Error {
    fn from(err: crate::operation::tag_resource::TagResourceError) -> Self {
        match err {
            crate::operation::tag_resource::TagResourceError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::tag_resource::TagResourceError::InvalidParametersException(inner) => Error::InvalidParametersException(inner),
            crate::operation::tag_resource::TagResourceError::ThrottledRequestException(inner) => Error::ThrottledRequestException(inner),
            crate::operation::tag_resource::TagResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::tag_resource::TagResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::tag_resource::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::untag_resource::UntagResourceError> for Error {
    fn from(err: crate::operation::untag_resource::UntagResourceError) -> Self {
        match err {
            crate::operation::untag_resource::UntagResourceError::InternalServiceException(inner) => Error::InternalServiceException(inner),
            crate::operation::untag_resource::UntagResourceError::InvalidParametersException(inner) => Error::InvalidParametersException(inner),
            crate::operation::untag_resource::UntagResourceError::ThrottledRequestException(inner) => Error::ThrottledRequestException(inner),
            crate::operation::untag_resource::UntagResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::untag_resource::UntagResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::untag_resource::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_whats_app_message_template::UpdateWhatsAppMessageTemplateError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_whats_app_message_template::UpdateWhatsAppMessageTemplateError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_whats_app_message_template::UpdateWhatsAppMessageTemplateError> for Error {
    fn from(err: crate::operation::update_whats_app_message_template::UpdateWhatsAppMessageTemplateError) -> Self {
        match err {
            crate::operation::update_whats_app_message_template::UpdateWhatsAppMessageTemplateError::DependencyException(inner) => {
                Error::DependencyException(inner)
            }
            crate::operation::update_whats_app_message_template::UpdateWhatsAppMessageTemplateError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::operation::update_whats_app_message_template::UpdateWhatsAppMessageTemplateError::InvalidParametersException(inner) => {
                Error::InvalidParametersException(inner)
            }
            crate::operation::update_whats_app_message_template::UpdateWhatsAppMessageTemplateError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_whats_app_message_template::UpdateWhatsAppMessageTemplateError::ThrottledRequestException(inner) => {
                Error::ThrottledRequestException(inner)
            }
            crate::operation::update_whats_app_message_template::UpdateWhatsAppMessageTemplateError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_whats_app_message_template::UpdateWhatsAppMessageTemplateError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::update_whats_app_message_template::UpdateWhatsAppMessageTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl ::std::error::Error for Error {
    fn source(&self) -> std::option::Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            Error::AccessDeniedByMetaException(inner) => inner.source(),
            Error::AccessDeniedException(inner) => inner.source(),
            Error::DependencyException(inner) => inner.source(),
            Error::InternalServiceException(inner) => inner.source(),
            Error::InvalidParametersException(inner) => inner.source(),
            Error::LimitExceededException(inner) => inner.source(),
            Error::ResourceNotFoundException(inner) => inner.source(),
            Error::ThrottledRequestException(inner) => inner.source(),
            Error::ValidationException(inner) => inner.source(),
            Error::Unhandled(inner) => ::std::option::Option::Some(&*inner.source),
        }
    }
}
impl ::aws_types::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedByMetaException(e) => e.request_id(),
            Self::AccessDeniedException(e) => e.request_id(),
            Self::DependencyException(e) => e.request_id(),
            Self::InternalServiceException(e) => e.request_id(),
            Self::InvalidParametersException(e) => e.request_id(),
            Self::LimitExceededException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ThrottledRequestException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.meta.request_id(),
        }
    }
}
