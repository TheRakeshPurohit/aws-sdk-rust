// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_resource_configuration::_create_resource_configuration_output::CreateResourceConfigurationOutputBuilder;

pub use crate::operation::create_resource_configuration::_create_resource_configuration_input::CreateResourceConfigurationInputBuilder;

impl crate::operation::create_resource_configuration::builders::CreateResourceConfigurationInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_resource_configuration::CreateResourceConfigurationOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_resource_configuration::CreateResourceConfigurationError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_resource_configuration();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateResourceConfiguration`.
///
/// <p>Creates a resource configuration. A resource configuration defines a specific resource. You can associate a resource configuration with a service network or a VPC endpoint.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateResourceConfigurationFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_resource_configuration::builders::CreateResourceConfigurationInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_resource_configuration::CreateResourceConfigurationOutput,
        crate::operation::create_resource_configuration::CreateResourceConfigurationError,
    > for CreateResourceConfigurationFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_resource_configuration::CreateResourceConfigurationOutput,
            crate::operation::create_resource_configuration::CreateResourceConfigurationError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreateResourceConfigurationFluentBuilder {
    /// Creates a new `CreateResourceConfigurationFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateResourceConfiguration as a reference.
    pub fn as_input(&self) -> &crate::operation::create_resource_configuration::builders::CreateResourceConfigurationInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_resource_configuration::CreateResourceConfigurationOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_resource_configuration::CreateResourceConfigurationError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_resource_configuration::CreateResourceConfiguration::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_resource_configuration::CreateResourceConfiguration::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_resource_configuration::CreateResourceConfigurationOutput,
        crate::operation::create_resource_configuration::CreateResourceConfigurationError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The name of the resource configuration. The name must be unique within the account. The valid characters are a-z, 0-9, and hyphens (-). You can't use a hyphen as the first or last character, or immediately after another hyphen.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>The name of the resource configuration. The name must be unique within the account. The valid characters are a-z, 0-9, and hyphens (-). You can't use a hyphen as the first or last character, or immediately after another hyphen.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>The name of the resource configuration. The name must be unique within the account. The valid characters are a-z, 0-9, and hyphens (-). You can't use a hyphen as the first or last character, or immediately after another hyphen.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_name()
    }
    /// <p>The type of resource configuration. A resource configuration can be one of the following types:</p>
    /// <ul>
    /// <li>
    /// <p><b>SINGLE</b> - A single resource.</p></li>
    /// <li>
    /// <p><b>GROUP</b> - A group of resources. You must create a group resource configuration before you create a child resource configuration.</p></li>
    /// <li>
    /// <p><b>CHILD</b> - A single resource that is part of a group resource configuration.</p></li>
    /// <li>
    /// <p><b>ARN</b> - An Amazon Web Services resource.</p></li>
    /// </ul>
    pub fn r#type(mut self, input: crate::types::ResourceConfigurationType) -> Self {
        self.inner = self.inner.r#type(input);
        self
    }
    /// <p>The type of resource configuration. A resource configuration can be one of the following types:</p>
    /// <ul>
    /// <li>
    /// <p><b>SINGLE</b> - A single resource.</p></li>
    /// <li>
    /// <p><b>GROUP</b> - A group of resources. You must create a group resource configuration before you create a child resource configuration.</p></li>
    /// <li>
    /// <p><b>CHILD</b> - A single resource that is part of a group resource configuration.</p></li>
    /// <li>
    /// <p><b>ARN</b> - An Amazon Web Services resource.</p></li>
    /// </ul>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::ResourceConfigurationType>) -> Self {
        self.inner = self.inner.set_type(input);
        self
    }
    /// <p>The type of resource configuration. A resource configuration can be one of the following types:</p>
    /// <ul>
    /// <li>
    /// <p><b>SINGLE</b> - A single resource.</p></li>
    /// <li>
    /// <p><b>GROUP</b> - A group of resources. You must create a group resource configuration before you create a child resource configuration.</p></li>
    /// <li>
    /// <p><b>CHILD</b> - A single resource that is part of a group resource configuration.</p></li>
    /// <li>
    /// <p><b>ARN</b> - An Amazon Web Services resource.</p></li>
    /// </ul>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::ResourceConfigurationType> {
        self.inner.get_type()
    }
    ///
    /// Appends an item to `portRanges`.
    ///
    /// To override the contents of this collection use [`set_port_ranges`](Self::set_port_ranges).
    ///
    /// <p>(SINGLE, GROUP, CHILD) The TCP port ranges that a consumer can use to access a resource configuration (for example: 1-65535). You can separate port ranges using commas (for example: 1,2,22-30).</p>
    pub fn port_ranges(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.port_ranges(input.into());
        self
    }
    /// <p>(SINGLE, GROUP, CHILD) The TCP port ranges that a consumer can use to access a resource configuration (for example: 1-65535). You can separate port ranges using commas (for example: 1,2,22-30).</p>
    pub fn set_port_ranges(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_port_ranges(input);
        self
    }
    /// <p>(SINGLE, GROUP, CHILD) The TCP port ranges that a consumer can use to access a resource configuration (for example: 1-65535). You can separate port ranges using commas (for example: 1,2,22-30).</p>
    pub fn get_port_ranges(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_port_ranges()
    }
    /// <p>(SINGLE, GROUP) The protocol accepted by the resource configuration.</p>
    pub fn protocol(mut self, input: crate::types::ProtocolType) -> Self {
        self.inner = self.inner.protocol(input);
        self
    }
    /// <p>(SINGLE, GROUP) The protocol accepted by the resource configuration.</p>
    pub fn set_protocol(mut self, input: ::std::option::Option<crate::types::ProtocolType>) -> Self {
        self.inner = self.inner.set_protocol(input);
        self
    }
    /// <p>(SINGLE, GROUP) The protocol accepted by the resource configuration.</p>
    pub fn get_protocol(&self) -> &::std::option::Option<crate::types::ProtocolType> {
        self.inner.get_protocol()
    }
    /// <p>(SINGLE, GROUP, ARN) The ID or ARN of the resource gateway used to connect to the resource configuration. For a child resource configuration, this value is inherited from the parent resource configuration.</p>
    pub fn resource_gateway_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.resource_gateway_identifier(input.into());
        self
    }
    /// <p>(SINGLE, GROUP, ARN) The ID or ARN of the resource gateway used to connect to the resource configuration. For a child resource configuration, this value is inherited from the parent resource configuration.</p>
    pub fn set_resource_gateway_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_resource_gateway_identifier(input);
        self
    }
    /// <p>(SINGLE, GROUP, ARN) The ID or ARN of the resource gateway used to connect to the resource configuration. For a child resource configuration, this value is inherited from the parent resource configuration.</p>
    pub fn get_resource_gateway_identifier(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_resource_gateway_identifier()
    }
    /// <p>(CHILD) The ID or ARN of the parent resource configuration of type <code>GROUP</code>. This is used to associate a child resource configuration with a group resource configuration.</p>
    pub fn resource_configuration_group_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.resource_configuration_group_identifier(input.into());
        self
    }
    /// <p>(CHILD) The ID or ARN of the parent resource configuration of type <code>GROUP</code>. This is used to associate a child resource configuration with a group resource configuration.</p>
    pub fn set_resource_configuration_group_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_resource_configuration_group_identifier(input);
        self
    }
    /// <p>(CHILD) The ID or ARN of the parent resource configuration of type <code>GROUP</code>. This is used to associate a child resource configuration with a group resource configuration.</p>
    pub fn get_resource_configuration_group_identifier(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_resource_configuration_group_identifier()
    }
    /// <p>Identifies the resource configuration in one of the following ways:</p>
    /// <ul>
    /// <li>
    /// <p><b>Amazon Resource Name (ARN)</b> - Supported resource-types that are provisioned by Amazon Web Services services, such as RDS databases, can be identified by their ARN.</p></li>
    /// <li>
    /// <p><b>Domain name</b> - Any domain name that is publicly resolvable.</p></li>
    /// <li>
    /// <p><b>IP address</b> - For IPv4 and IPv6, only IP addresses in the VPC are supported.</p></li>
    /// </ul>
    pub fn resource_configuration_definition(mut self, input: crate::types::ResourceConfigurationDefinition) -> Self {
        self.inner = self.inner.resource_configuration_definition(input);
        self
    }
    /// <p>Identifies the resource configuration in one of the following ways:</p>
    /// <ul>
    /// <li>
    /// <p><b>Amazon Resource Name (ARN)</b> - Supported resource-types that are provisioned by Amazon Web Services services, such as RDS databases, can be identified by their ARN.</p></li>
    /// <li>
    /// <p><b>Domain name</b> - Any domain name that is publicly resolvable.</p></li>
    /// <li>
    /// <p><b>IP address</b> - For IPv4 and IPv6, only IP addresses in the VPC are supported.</p></li>
    /// </ul>
    pub fn set_resource_configuration_definition(mut self, input: ::std::option::Option<crate::types::ResourceConfigurationDefinition>) -> Self {
        self.inner = self.inner.set_resource_configuration_definition(input);
        self
    }
    /// <p>Identifies the resource configuration in one of the following ways:</p>
    /// <ul>
    /// <li>
    /// <p><b>Amazon Resource Name (ARN)</b> - Supported resource-types that are provisioned by Amazon Web Services services, such as RDS databases, can be identified by their ARN.</p></li>
    /// <li>
    /// <p><b>Domain name</b> - Any domain name that is publicly resolvable.</p></li>
    /// <li>
    /// <p><b>IP address</b> - For IPv4 and IPv6, only IP addresses in the VPC are supported.</p></li>
    /// </ul>
    pub fn get_resource_configuration_definition(&self) -> &::std::option::Option<crate::types::ResourceConfigurationDefinition> {
        self.inner.get_resource_configuration_definition()
    }
    /// <p>(SINGLE, GROUP, ARN) Specifies whether the resource configuration can be associated with a sharable service network. The default is false.</p>
    pub fn allow_association_to_shareable_service_network(mut self, input: bool) -> Self {
        self.inner = self.inner.allow_association_to_shareable_service_network(input);
        self
    }
    /// <p>(SINGLE, GROUP, ARN) Specifies whether the resource configuration can be associated with a sharable service network. The default is false.</p>
    pub fn set_allow_association_to_shareable_service_network(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_allow_association_to_shareable_service_network(input);
        self
    }
    /// <p>(SINGLE, GROUP, ARN) Specifies whether the resource configuration can be associated with a sharable service network. The default is false.</p>
    pub fn get_allow_association_to_shareable_service_network(&self) -> &::std::option::Option<bool> {
        self.inner.get_allow_association_to_shareable_service_network()
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you retry a request that completed successfully using the same client token and parameters, the retry succeeds without performing any actions. If the parameters aren't identical, the retry fails.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you retry a request that completed successfully using the same client token and parameters, the retry succeeds without performing any actions. If the parameters aren't identical, the retry fails.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you retry a request that completed successfully using the same client token and parameters, the retry succeeds without performing any actions. If the parameters aren't identical, the retry fails.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_client_token()
    }
    ///
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags for the resource configuration.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.tags(k.into(), v.into());
        self
    }
    /// <p>The tags for the resource configuration.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>The tags for the resource configuration.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.inner.get_tags()
    }
}
