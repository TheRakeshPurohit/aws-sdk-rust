// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`GetDeployablePatchSnapshotForInstance`](crate::operation::get_deployable_patch_snapshot_for_instance::builders::GetDeployablePatchSnapshotForInstanceFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`instance_id(impl Into<String>)`](crate::operation::get_deployable_patch_snapshot_for_instance::builders::GetDeployablePatchSnapshotForInstanceFluentBuilder::instance_id) / [`set_instance_id(Option<String>)`](crate::operation::get_deployable_patch_snapshot_for_instance::builders::GetDeployablePatchSnapshotForInstanceFluentBuilder::set_instance_id):<br>required: **true**<br><p>The ID of the managed node for which the appropriate patch snapshot should be retrieved.</p><br>
    ///   - [`snapshot_id(impl Into<String>)`](crate::operation::get_deployable_patch_snapshot_for_instance::builders::GetDeployablePatchSnapshotForInstanceFluentBuilder::snapshot_id) / [`set_snapshot_id(Option<String>)`](crate::operation::get_deployable_patch_snapshot_for_instance::builders::GetDeployablePatchSnapshotForInstanceFluentBuilder::set_snapshot_id):<br>required: **true**<br><p>The snapshot ID provided by the user when running <code>AWS-RunPatchBaseline</code>.</p><br>
    ///   - [`baseline_override(BaselineOverride)`](crate::operation::get_deployable_patch_snapshot_for_instance::builders::GetDeployablePatchSnapshotForInstanceFluentBuilder::baseline_override) / [`set_baseline_override(Option<BaselineOverride>)`](crate::operation::get_deployable_patch_snapshot_for_instance::builders::GetDeployablePatchSnapshotForInstanceFluentBuilder::set_baseline_override):<br>required: **false**<br><p>Defines the basic information about a patch baseline override.</p><br>
    ///   - [`use_s3_dual_stack_endpoint(bool)`](crate::operation::get_deployable_patch_snapshot_for_instance::builders::GetDeployablePatchSnapshotForInstanceFluentBuilder::use_s3_dual_stack_endpoint) / [`set_use_s3_dual_stack_endpoint(Option<bool>)`](crate::operation::get_deployable_patch_snapshot_for_instance::builders::GetDeployablePatchSnapshotForInstanceFluentBuilder::set_use_s3_dual_stack_endpoint):<br>required: **false**<br><p>Specifies whether to use S3 dualstack endpoints for the patch snapshot download URL. Set to <code>true</code> to receive a presigned URL that supports both IPv4 and IPv6 connectivity. Set to <code>false</code> to use standard IPv4-only endpoints. Default is <code>false</code>. This parameter is required for managed nodes in IPv6-only environments.</p><br>
    /// - On success, responds with [`GetDeployablePatchSnapshotForInstanceOutput`](crate::operation::get_deployable_patch_snapshot_for_instance::GetDeployablePatchSnapshotForInstanceOutput) with field(s):
    ///   - [`instance_id(Option<String>)`](crate::operation::get_deployable_patch_snapshot_for_instance::GetDeployablePatchSnapshotForInstanceOutput::instance_id): <p>The managed node ID.</p>
    ///   - [`snapshot_id(Option<String>)`](crate::operation::get_deployable_patch_snapshot_for_instance::GetDeployablePatchSnapshotForInstanceOutput::snapshot_id): <p>The user-defined snapshot ID.</p>
    ///   - [`snapshot_download_url(Option<String>)`](crate::operation::get_deployable_patch_snapshot_for_instance::GetDeployablePatchSnapshotForInstanceOutput::snapshot_download_url): <p>A pre-signed Amazon Simple Storage Service (Amazon S3) URL that can be used to download the patch snapshot.</p>
    ///   - [`product(Option<String>)`](crate::operation::get_deployable_patch_snapshot_for_instance::GetDeployablePatchSnapshotForInstanceOutput::product): <p>Returns the specific operating system (for example Windows Server 2012 or Amazon Linux 2015.09) on the managed node for the specified patch snapshot.</p>
    /// - On failure, responds with [`SdkError<GetDeployablePatchSnapshotForInstanceError>`](crate::operation::get_deployable_patch_snapshot_for_instance::GetDeployablePatchSnapshotForInstanceError)
    pub fn get_deployable_patch_snapshot_for_instance(
        &self,
    ) -> crate::operation::get_deployable_patch_snapshot_for_instance::builders::GetDeployablePatchSnapshotForInstanceFluentBuilder {
        crate::operation::get_deployable_patch_snapshot_for_instance::builders::GetDeployablePatchSnapshotForInstanceFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
