// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetDeployablePatchSnapshotForInstanceInput {
    /// <p>The ID of the managed node for which the appropriate patch snapshot should be retrieved.</p>
    pub instance_id: ::std::option::Option<::std::string::String>,
    /// <p>The snapshot ID provided by the user when running <code>AWS-RunPatchBaseline</code>.</p>
    pub snapshot_id: ::std::option::Option<::std::string::String>,
    /// <p>Defines the basic information about a patch baseline override.</p>
    pub baseline_override: ::std::option::Option<crate::types::BaselineOverride>,
    /// <p>Specifies whether to use S3 dualstack endpoints for the patch snapshot download URL. Set to <code>true</code> to receive a presigned URL that supports both IPv4 and IPv6 connectivity. Set to <code>false</code> to use standard IPv4-only endpoints. Default is <code>false</code>. This parameter is required for managed nodes in IPv6-only environments.</p>
    pub use_s3_dual_stack_endpoint: ::std::option::Option<bool>,
}
impl GetDeployablePatchSnapshotForInstanceInput {
    /// <p>The ID of the managed node for which the appropriate patch snapshot should be retrieved.</p>
    pub fn instance_id(&self) -> ::std::option::Option<&str> {
        self.instance_id.as_deref()
    }
    /// <p>The snapshot ID provided by the user when running <code>AWS-RunPatchBaseline</code>.</p>
    pub fn snapshot_id(&self) -> ::std::option::Option<&str> {
        self.snapshot_id.as_deref()
    }
    /// <p>Defines the basic information about a patch baseline override.</p>
    pub fn baseline_override(&self) -> ::std::option::Option<&crate::types::BaselineOverride> {
        self.baseline_override.as_ref()
    }
    /// <p>Specifies whether to use S3 dualstack endpoints for the patch snapshot download URL. Set to <code>true</code> to receive a presigned URL that supports both IPv4 and IPv6 connectivity. Set to <code>false</code> to use standard IPv4-only endpoints. Default is <code>false</code>. This parameter is required for managed nodes in IPv6-only environments.</p>
    pub fn use_s3_dual_stack_endpoint(&self) -> ::std::option::Option<bool> {
        self.use_s3_dual_stack_endpoint
    }
}
impl GetDeployablePatchSnapshotForInstanceInput {
    /// Creates a new builder-style object to manufacture [`GetDeployablePatchSnapshotForInstanceInput`](crate::operation::get_deployable_patch_snapshot_for_instance::GetDeployablePatchSnapshotForInstanceInput).
    pub fn builder() -> crate::operation::get_deployable_patch_snapshot_for_instance::builders::GetDeployablePatchSnapshotForInstanceInputBuilder {
        crate::operation::get_deployable_patch_snapshot_for_instance::builders::GetDeployablePatchSnapshotForInstanceInputBuilder::default()
    }
}

/// A builder for [`GetDeployablePatchSnapshotForInstanceInput`](crate::operation::get_deployable_patch_snapshot_for_instance::GetDeployablePatchSnapshotForInstanceInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetDeployablePatchSnapshotForInstanceInputBuilder {
    pub(crate) instance_id: ::std::option::Option<::std::string::String>,
    pub(crate) snapshot_id: ::std::option::Option<::std::string::String>,
    pub(crate) baseline_override: ::std::option::Option<crate::types::BaselineOverride>,
    pub(crate) use_s3_dual_stack_endpoint: ::std::option::Option<bool>,
}
impl GetDeployablePatchSnapshotForInstanceInputBuilder {
    /// <p>The ID of the managed node for which the appropriate patch snapshot should be retrieved.</p>
    /// This field is required.
    pub fn instance_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instance_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the managed node for which the appropriate patch snapshot should be retrieved.</p>
    pub fn set_instance_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instance_id = input;
        self
    }
    /// <p>The ID of the managed node for which the appropriate patch snapshot should be retrieved.</p>
    pub fn get_instance_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.instance_id
    }
    /// <p>The snapshot ID provided by the user when running <code>AWS-RunPatchBaseline</code>.</p>
    /// This field is required.
    pub fn snapshot_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.snapshot_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The snapshot ID provided by the user when running <code>AWS-RunPatchBaseline</code>.</p>
    pub fn set_snapshot_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.snapshot_id = input;
        self
    }
    /// <p>The snapshot ID provided by the user when running <code>AWS-RunPatchBaseline</code>.</p>
    pub fn get_snapshot_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.snapshot_id
    }
    /// <p>Defines the basic information about a patch baseline override.</p>
    pub fn baseline_override(mut self, input: crate::types::BaselineOverride) -> Self {
        self.baseline_override = ::std::option::Option::Some(input);
        self
    }
    /// <p>Defines the basic information about a patch baseline override.</p>
    pub fn set_baseline_override(mut self, input: ::std::option::Option<crate::types::BaselineOverride>) -> Self {
        self.baseline_override = input;
        self
    }
    /// <p>Defines the basic information about a patch baseline override.</p>
    pub fn get_baseline_override(&self) -> &::std::option::Option<crate::types::BaselineOverride> {
        &self.baseline_override
    }
    /// <p>Specifies whether to use S3 dualstack endpoints for the patch snapshot download URL. Set to <code>true</code> to receive a presigned URL that supports both IPv4 and IPv6 connectivity. Set to <code>false</code> to use standard IPv4-only endpoints. Default is <code>false</code>. This parameter is required for managed nodes in IPv6-only environments.</p>
    pub fn use_s3_dual_stack_endpoint(mut self, input: bool) -> Self {
        self.use_s3_dual_stack_endpoint = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether to use S3 dualstack endpoints for the patch snapshot download URL. Set to <code>true</code> to receive a presigned URL that supports both IPv4 and IPv6 connectivity. Set to <code>false</code> to use standard IPv4-only endpoints. Default is <code>false</code>. This parameter is required for managed nodes in IPv6-only environments.</p>
    pub fn set_use_s3_dual_stack_endpoint(mut self, input: ::std::option::Option<bool>) -> Self {
        self.use_s3_dual_stack_endpoint = input;
        self
    }
    /// <p>Specifies whether to use S3 dualstack endpoints for the patch snapshot download URL. Set to <code>true</code> to receive a presigned URL that supports both IPv4 and IPv6 connectivity. Set to <code>false</code> to use standard IPv4-only endpoints. Default is <code>false</code>. This parameter is required for managed nodes in IPv6-only environments.</p>
    pub fn get_use_s3_dual_stack_endpoint(&self) -> &::std::option::Option<bool> {
        &self.use_s3_dual_stack_endpoint
    }
    /// Consumes the builder and constructs a [`GetDeployablePatchSnapshotForInstanceInput`](crate::operation::get_deployable_patch_snapshot_for_instance::GetDeployablePatchSnapshotForInstanceInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_deployable_patch_snapshot_for_instance::GetDeployablePatchSnapshotForInstanceInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::get_deployable_patch_snapshot_for_instance::GetDeployablePatchSnapshotForInstanceInput {
                instance_id: self.instance_id,
                snapshot_id: self.snapshot_id,
                baseline_override: self.baseline_override,
                use_s3_dual_stack_endpoint: self.use_s3_dual_stack_endpoint,
            },
        )
    }
}
