// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_get_resource_oauth2_token_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::get_resource_oauth2_token::GetResourceOauth2TokenInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.custom_parameters {
        #[allow(unused_mut)]
        let mut object_2 = object.key("customParameters").start_object();
        for (key_3, value_4) in var_1 {
            {
                object_2.key(key_3.as_str()).string(value_4.as_str());
            }
        }
        object_2.finish();
    }
    if let Some(var_5) = &input.force_authentication {
        object.key("forceAuthentication").boolean(*var_5);
    }
    if let Some(var_6) = &input.oauth2_flow {
        object.key("oauth2Flow").string(var_6.as_str());
    }
    if let Some(var_7) = &input.resource_credential_provider_name {
        object.key("resourceCredentialProviderName").string(var_7.as_str());
    }
    if let Some(var_8) = &input.resource_oauth2_return_url {
        object.key("resourceOauth2ReturnUrl").string(var_8.as_str());
    }
    if let Some(var_9) = &input.scopes {
        let mut array_10 = object.key("scopes").start_array();
        for item_11 in var_9 {
            {
                array_10.value().string(item_11.as_str());
            }
        }
        array_10.finish();
    }
    if let Some(var_12) = &input.user_id {
        object.key("userId").string(var_12.as_str());
    }
    if let Some(var_13) = &input.workload_identity_token {
        object.key("workloadIdentityToken").string(var_13.as_str());
    }
    Ok(())
}
