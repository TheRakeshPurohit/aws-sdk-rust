// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_tool_arguments(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::ToolArguments,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.code {
        object.key("code").string(var_1.as_str());
    }
    if let Some(var_2) = &input.language {
        object.key("language").string(var_2.as_str());
    }
    if let Some(var_3) = &input.clear_context {
        object.key("clearContext").boolean(*var_3);
    }
    if let Some(var_4) = &input.command {
        object.key("command").string(var_4.as_str());
    }
    if let Some(var_5) = &input.path {
        object.key("path").string(var_5.as_str());
    }
    if let Some(var_6) = &input.paths {
        let mut array_7 = object.key("paths").start_array();
        for item_8 in var_6 {
            {
                array_7.value().string(item_8.as_str());
            }
        }
        array_7.finish();
    }
    if let Some(var_9) = &input.content {
        let mut array_10 = object.key("content").start_array();
        for item_11 in var_9 {
            {
                #[allow(unused_mut)]
                let mut object_12 = array_10.value().start_object();
                crate::protocol_serde::shape_input_content_block::ser_input_content_block(&mut object_12, item_11)?;
                object_12.finish();
            }
        }
        array_10.finish();
    }
    if let Some(var_13) = &input.directory_path {
        object.key("directoryPath").string(var_13.as_str());
    }
    if let Some(var_14) = &input.task_id {
        object.key("taskId").string(var_14.as_str());
    }
    Ok(())
}
