// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_event_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_event::CreateEventInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.actor_id {
        object.key("actorId").string(var_1.as_str());
    }
    if let Some(var_2) = &input.branch {
        #[allow(unused_mut)]
        let mut object_3 = object.key("branch").start_object();
        crate::protocol_serde::shape_branch::ser_branch(&mut object_3, var_2)?;
        object_3.finish();
    }
    if let Some(var_4) = &input.client_token {
        object.key("clientToken").string(var_4.as_str());
    }
    if let Some(var_5) = &input.event_timestamp {
        object
            .key("eventTimestamp")
            .date_time(var_5, ::aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_6) = &input.metadata {
        #[allow(unused_mut)]
        let mut object_7 = object.key("metadata").start_object();
        for (key_8, value_9) in var_6 {
            {
                #[allow(unused_mut)]
                let mut object_10 = object_7.key(key_8.as_str()).start_object();
                crate::protocol_serde::shape_metadata_value::ser_metadata_value(&mut object_10, value_9)?;
                object_10.finish();
            }
        }
        object_7.finish();
    }
    if let Some(var_11) = &input.payload {
        let mut array_12 = object.key("payload").start_array();
        for item_13 in var_11 {
            {
                #[allow(unused_mut)]
                let mut object_14 = array_12.value().start_object();
                crate::protocol_serde::shape_payload_type::ser_payload_type(&mut object_14, item_13)?;
                object_14.finish();
            }
        }
        array_12.finish();
    }
    if let Some(var_15) = &input.session_id {
        object.key("sessionId").string(var_15.as_str());
    }
    Ok(())
}
