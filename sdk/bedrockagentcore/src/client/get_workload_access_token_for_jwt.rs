// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`GetWorkloadAccessTokenForJWT`](crate::operation::get_workload_access_token_for_jwt::builders::GetWorkloadAccessTokenForJWTFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`workload_name(impl Into<String>)`](crate::operation::get_workload_access_token_for_jwt::builders::GetWorkloadAccessTokenForJWTFluentBuilder::workload_name) / [`set_workload_name(Option<String>)`](crate::operation::get_workload_access_token_for_jwt::builders::GetWorkloadAccessTokenForJWTFluentBuilder::set_workload_name):<br>required: **true**<br><p>The unique identifier for the registered workload.</p><br>
    ///   - [`user_token(impl Into<String>)`](crate::operation::get_workload_access_token_for_jwt::builders::GetWorkloadAccessTokenForJWTFluentBuilder::user_token) / [`set_user_token(Option<String>)`](crate::operation::get_workload_access_token_for_jwt::builders::GetWorkloadAccessTokenForJWTFluentBuilder::set_user_token):<br>required: **true**<br><p>The OAuth 2.0 token issued by the user's identity provider.</p><br>
    /// - On success, responds with [`GetWorkloadAccessTokenForJwtOutput`](crate::operation::get_workload_access_token_for_jwt::GetWorkloadAccessTokenForJwtOutput) with field(s):
    ///   - [`workload_access_token(String)`](crate::operation::get_workload_access_token_for_jwt::GetWorkloadAccessTokenForJwtOutput::workload_access_token): <p>An opaque token representing the identity of both the workload and the user.</p>
    /// - On failure, responds with [`SdkError<GetWorkloadAccessTokenForJWTError>`](crate::operation::get_workload_access_token_for_jwt::GetWorkloadAccessTokenForJWTError)
    pub fn get_workload_access_token_for_jwt(
        &self,
    ) -> crate::operation::get_workload_access_token_for_jwt::builders::GetWorkloadAccessTokenForJWTFluentBuilder {
        crate::operation::get_workload_access_token_for_jwt::builders::GetWorkloadAccessTokenForJWTFluentBuilder::new(self.handle.clone())
    }
}
