// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateEvent`](crate::operation::create_event::builders::CreateEventFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`memory_id(impl Into<String>)`](crate::operation::create_event::builders::CreateEventFluentBuilder::memory_id) / [`set_memory_id(Option<String>)`](crate::operation::create_event::builders::CreateEventFluentBuilder::set_memory_id):<br>required: **true**<br><p>The identifier of the AgentCore Memory resource in which to create the event.</p><br>
    ///   - [`actor_id(impl Into<String>)`](crate::operation::create_event::builders::CreateEventFluentBuilder::actor_id) / [`set_actor_id(Option<String>)`](crate::operation::create_event::builders::CreateEventFluentBuilder::set_actor_id):<br>required: **true**<br><p>The identifier of the actor associated with this event. An actor represents an entity that participates in sessions and generates events.</p><br>
    ///   - [`session_id(impl Into<String>)`](crate::operation::create_event::builders::CreateEventFluentBuilder::session_id) / [`set_session_id(Option<String>)`](crate::operation::create_event::builders::CreateEventFluentBuilder::set_session_id):<br>required: **false**<br><p>The identifier of the session in which this event occurs. A session represents a sequence of related events.</p><br>
    ///   - [`event_timestamp(DateTime)`](crate::operation::create_event::builders::CreateEventFluentBuilder::event_timestamp) / [`set_event_timestamp(Option<DateTime>)`](crate::operation::create_event::builders::CreateEventFluentBuilder::set_event_timestamp):<br>required: **true**<br><p>The timestamp when the event occurred. If not specified, the current time is used.</p><br>
    ///   - [`payload(PayloadType)`](crate::operation::create_event::builders::CreateEventFluentBuilder::payload) / [`set_payload(Option<Vec::<PayloadType>>)`](crate::operation::create_event::builders::CreateEventFluentBuilder::set_payload):<br>required: **true**<br><p>The content payload of the event. This can include conversational data or binary content.</p><br>
    ///   - [`branch(Branch)`](crate::operation::create_event::builders::CreateEventFluentBuilder::branch) / [`set_branch(Option<Branch>)`](crate::operation::create_event::builders::CreateEventFluentBuilder::set_branch):<br>required: **false**<br><p>The branch information for this event. Branches allow for organizing events into different conversation threads or paths.</p><br>
    ///   - [`client_token(impl Into<String>)`](crate::operation::create_event::builders::CreateEventFluentBuilder::client_token) / [`set_client_token(Option<String>)`](crate::operation::create_event::builders::CreateEventFluentBuilder::set_client_token):<br>required: **false**<br><p>A unique, case-sensitive identifier to ensure that the operation completes no more than one time. If this token matches a previous request, AgentCore ignores the request, but does not return an error.</p><br>
    ///   - [`metadata(impl Into<String>, MetadataValue)`](crate::operation::create_event::builders::CreateEventFluentBuilder::metadata) / [`set_metadata(Option<HashMap::<String, MetadataValue>>)`](crate::operation::create_event::builders::CreateEventFluentBuilder::set_metadata):<br>required: **false**<br><p>The key-value metadata to attach to the event.</p><br>
    /// - On success, responds with [`CreateEventOutput`](crate::operation::create_event::CreateEventOutput) with field(s):
    ///   - [`event(Option<Event>)`](crate::operation::create_event::CreateEventOutput::event): <p>The event that was created.</p>
    /// - On failure, responds with [`SdkError<CreateEventError>`](crate::operation::create_event::CreateEventError)
    pub fn create_event(&self) -> crate::operation::create_event::builders::CreateEventFluentBuilder {
        crate::operation::create_event::builders::CreateEventFluentBuilder::new(self.handle.clone())
    }
}
