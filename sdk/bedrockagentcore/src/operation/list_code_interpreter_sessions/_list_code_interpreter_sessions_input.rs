// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListCodeInterpreterSessionsInput {
    /// <p>The unique identifier of the code interpreter to list sessions for. If specified, only sessions for this code interpreter are returned. If not specified, sessions for all code interpreters are returned.</p>
    pub code_interpreter_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of results to return in a single call. The default value is 10. Valid values range from 1 to 100. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results. If not specified, Amazon Bedrock returns the first page of results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The status of the code interpreter sessions to list. Valid values include ACTIVE, STOPPING, and STOPPED. If not specified, sessions with any status are returned.</p>
    pub status: ::std::option::Option<crate::types::CodeInterpreterSessionStatus>,
}
impl ListCodeInterpreterSessionsInput {
    /// <p>The unique identifier of the code interpreter to list sessions for. If specified, only sessions for this code interpreter are returned. If not specified, sessions for all code interpreters are returned.</p>
    pub fn code_interpreter_identifier(&self) -> ::std::option::Option<&str> {
        self.code_interpreter_identifier.as_deref()
    }
    /// <p>The maximum number of results to return in a single call. The default value is 10. Valid values range from 1 to 100. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results. If not specified, Amazon Bedrock returns the first page of results.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The status of the code interpreter sessions to list. Valid values include ACTIVE, STOPPING, and STOPPED. If not specified, sessions with any status are returned.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::CodeInterpreterSessionStatus> {
        self.status.as_ref()
    }
}
impl ListCodeInterpreterSessionsInput {
    /// Creates a new builder-style object to manufacture [`ListCodeInterpreterSessionsInput`](crate::operation::list_code_interpreter_sessions::ListCodeInterpreterSessionsInput).
    pub fn builder() -> crate::operation::list_code_interpreter_sessions::builders::ListCodeInterpreterSessionsInputBuilder {
        crate::operation::list_code_interpreter_sessions::builders::ListCodeInterpreterSessionsInputBuilder::default()
    }
}

/// A builder for [`ListCodeInterpreterSessionsInput`](crate::operation::list_code_interpreter_sessions::ListCodeInterpreterSessionsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListCodeInterpreterSessionsInputBuilder {
    pub(crate) code_interpreter_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::CodeInterpreterSessionStatus>,
}
impl ListCodeInterpreterSessionsInputBuilder {
    /// <p>The unique identifier of the code interpreter to list sessions for. If specified, only sessions for this code interpreter are returned. If not specified, sessions for all code interpreters are returned.</p>
    /// This field is required.
    pub fn code_interpreter_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.code_interpreter_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the code interpreter to list sessions for. If specified, only sessions for this code interpreter are returned. If not specified, sessions for all code interpreters are returned.</p>
    pub fn set_code_interpreter_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.code_interpreter_identifier = input;
        self
    }
    /// <p>The unique identifier of the code interpreter to list sessions for. If specified, only sessions for this code interpreter are returned. If not specified, sessions for all code interpreters are returned.</p>
    pub fn get_code_interpreter_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.code_interpreter_identifier
    }
    /// <p>The maximum number of results to return in a single call. The default value is 10. Valid values range from 1 to 100. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results to return in a single call. The default value is 10. Valid values range from 1 to 100. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of results to return in a single call. The default value is 10. Valid values range from 1 to 100. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results. If not specified, Amazon Bedrock returns the first page of results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results. If not specified, Amazon Bedrock returns the first page of results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results. If not specified, Amazon Bedrock returns the first page of results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The status of the code interpreter sessions to list. Valid values include ACTIVE, STOPPING, and STOPPED. If not specified, sessions with any status are returned.</p>
    pub fn status(mut self, input: crate::types::CodeInterpreterSessionStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the code interpreter sessions to list. Valid values include ACTIVE, STOPPING, and STOPPED. If not specified, sessions with any status are returned.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::CodeInterpreterSessionStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the code interpreter sessions to list. Valid values include ACTIVE, STOPPING, and STOPPED. If not specified, sessions with any status are returned.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::CodeInterpreterSessionStatus> {
        &self.status
    }
    /// Consumes the builder and constructs a [`ListCodeInterpreterSessionsInput`](crate::operation::list_code_interpreter_sessions::ListCodeInterpreterSessionsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_code_interpreter_sessions::ListCodeInterpreterSessionsInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::list_code_interpreter_sessions::ListCodeInterpreterSessionsInput {
            code_interpreter_identifier: self.code_interpreter_identifier,
            max_results: self.max_results,
            next_token: self.next_token,
            status: self.status,
        })
    }
}
