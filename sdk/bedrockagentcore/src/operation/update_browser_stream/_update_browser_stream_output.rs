// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateBrowserStreamOutput {
    /// <p>The identifier of the browser.</p>
    pub browser_identifier: ::std::string::String,
    /// <p>The identifier of the browser session.</p>
    pub session_id: ::std::string::String,
    /// <p>The collection of streams associated with a browser session in Amazon Bedrock. These streams provide different ways to interact with and observe the browser session, including programmatic control and visual representation of the browser content.</p>
    pub streams: ::std::option::Option<crate::types::BrowserSessionStream>,
    /// <p>The time at which the browser stream was updated.</p>
    pub updated_at: ::aws_smithy_types::DateTime,
    _request_id: Option<String>,
}
impl UpdateBrowserStreamOutput {
    /// <p>The identifier of the browser.</p>
    pub fn browser_identifier(&self) -> &str {
        use std::ops::Deref;
        self.browser_identifier.deref()
    }
    /// <p>The identifier of the browser session.</p>
    pub fn session_id(&self) -> &str {
        use std::ops::Deref;
        self.session_id.deref()
    }
    /// <p>The collection of streams associated with a browser session in Amazon Bedrock. These streams provide different ways to interact with and observe the browser session, including programmatic control and visual representation of the browser content.</p>
    pub fn streams(&self) -> ::std::option::Option<&crate::types::BrowserSessionStream> {
        self.streams.as_ref()
    }
    /// <p>The time at which the browser stream was updated.</p>
    pub fn updated_at(&self) -> &::aws_smithy_types::DateTime {
        &self.updated_at
    }
}
impl ::aws_types::request_id::RequestId for UpdateBrowserStreamOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateBrowserStreamOutput {
    /// Creates a new builder-style object to manufacture [`UpdateBrowserStreamOutput`](crate::operation::update_browser_stream::UpdateBrowserStreamOutput).
    pub fn builder() -> crate::operation::update_browser_stream::builders::UpdateBrowserStreamOutputBuilder {
        crate::operation::update_browser_stream::builders::UpdateBrowserStreamOutputBuilder::default()
    }
}

/// A builder for [`UpdateBrowserStreamOutput`](crate::operation::update_browser_stream::UpdateBrowserStreamOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateBrowserStreamOutputBuilder {
    pub(crate) browser_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) session_id: ::std::option::Option<::std::string::String>,
    pub(crate) streams: ::std::option::Option<crate::types::BrowserSessionStream>,
    pub(crate) updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl UpdateBrowserStreamOutputBuilder {
    /// <p>The identifier of the browser.</p>
    /// This field is required.
    pub fn browser_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.browser_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the browser.</p>
    pub fn set_browser_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.browser_identifier = input;
        self
    }
    /// <p>The identifier of the browser.</p>
    pub fn get_browser_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.browser_identifier
    }
    /// <p>The identifier of the browser session.</p>
    /// This field is required.
    pub fn session_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.session_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the browser session.</p>
    pub fn set_session_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.session_id = input;
        self
    }
    /// <p>The identifier of the browser session.</p>
    pub fn get_session_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.session_id
    }
    /// <p>The collection of streams associated with a browser session in Amazon Bedrock. These streams provide different ways to interact with and observe the browser session, including programmatic control and visual representation of the browser content.</p>
    /// This field is required.
    pub fn streams(mut self, input: crate::types::BrowserSessionStream) -> Self {
        self.streams = ::std::option::Option::Some(input);
        self
    }
    /// <p>The collection of streams associated with a browser session in Amazon Bedrock. These streams provide different ways to interact with and observe the browser session, including programmatic control and visual representation of the browser content.</p>
    pub fn set_streams(mut self, input: ::std::option::Option<crate::types::BrowserSessionStream>) -> Self {
        self.streams = input;
        self
    }
    /// <p>The collection of streams associated with a browser session in Amazon Bedrock. These streams provide different ways to interact with and observe the browser session, including programmatic control and visual representation of the browser content.</p>
    pub fn get_streams(&self) -> &::std::option::Option<crate::types::BrowserSessionStream> {
        &self.streams
    }
    /// <p>The time at which the browser stream was updated.</p>
    /// This field is required.
    pub fn updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time at which the browser stream was updated.</p>
    pub fn set_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>The time at which the browser stream was updated.</p>
    pub fn get_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_at
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`UpdateBrowserStreamOutput`](crate::operation::update_browser_stream::UpdateBrowserStreamOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`browser_identifier`](crate::operation::update_browser_stream::builders::UpdateBrowserStreamOutputBuilder::browser_identifier)
    /// - [`session_id`](crate::operation::update_browser_stream::builders::UpdateBrowserStreamOutputBuilder::session_id)
    /// - [`updated_at`](crate::operation::update_browser_stream::builders::UpdateBrowserStreamOutputBuilder::updated_at)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_browser_stream::UpdateBrowserStreamOutput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::update_browser_stream::UpdateBrowserStreamOutput {
            browser_identifier: self.browser_identifier.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "browser_identifier",
                    "browser_identifier was not specified but it is required when building UpdateBrowserStreamOutput",
                )
            })?,
            session_id: self.session_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "session_id",
                    "session_id was not specified but it is required when building UpdateBrowserStreamOutput",
                )
            })?,
            streams: self.streams,
            updated_at: self.updated_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "updated_at",
                    "updated_at was not specified but it is required when building UpdateBrowserStreamOutput",
                )
            })?,
            _request_id: self._request_id,
        })
    }
}
