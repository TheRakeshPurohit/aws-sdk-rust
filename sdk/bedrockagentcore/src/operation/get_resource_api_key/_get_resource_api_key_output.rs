// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GetResourceApiKeyOutput {
    /// <p>The API Key associated with the resource requested.</p>
    pub api_key: ::std::string::String,
    _request_id: Option<String>,
}
impl GetResourceApiKeyOutput {
    /// <p>The API Key associated with the resource requested.</p>
    pub fn api_key(&self) -> &str {
        use std::ops::Deref;
        self.api_key.deref()
    }
}
impl ::std::fmt::Debug for GetResourceApiKeyOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetResourceApiKeyOutput");
        formatter.field("api_key", &"*** Sensitive Data Redacted ***");
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_types::request_id::RequestId for GetResourceApiKeyOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetResourceApiKeyOutput {
    /// Creates a new builder-style object to manufacture [`GetResourceApiKeyOutput`](crate::operation::get_resource_api_key::GetResourceApiKeyOutput).
    pub fn builder() -> crate::operation::get_resource_api_key::builders::GetResourceApiKeyOutputBuilder {
        crate::operation::get_resource_api_key::builders::GetResourceApiKeyOutputBuilder::default()
    }
}

/// A builder for [`GetResourceApiKeyOutput`](crate::operation::get_resource_api_key::GetResourceApiKeyOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct GetResourceApiKeyOutputBuilder {
    pub(crate) api_key: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetResourceApiKeyOutputBuilder {
    /// <p>The API Key associated with the resource requested.</p>
    /// This field is required.
    pub fn api_key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.api_key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The API Key associated with the resource requested.</p>
    pub fn set_api_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.api_key = input;
        self
    }
    /// <p>The API Key associated with the resource requested.</p>
    pub fn get_api_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.api_key
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetResourceApiKeyOutput`](crate::operation::get_resource_api_key::GetResourceApiKeyOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`api_key`](crate::operation::get_resource_api_key::builders::GetResourceApiKeyOutputBuilder::api_key)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::get_resource_api_key::GetResourceApiKeyOutput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::get_resource_api_key::GetResourceApiKeyOutput {
            api_key: self.api_key.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "api_key",
                    "api_key was not specified but it is required when building GetResourceApiKeyOutput",
                )
            })?,
            _request_id: self._request_id,
        })
    }
}
impl ::std::fmt::Debug for GetResourceApiKeyOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetResourceApiKeyOutputBuilder");
        formatter.field("api_key", &"*** Sensitive Data Redacted ***");
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
