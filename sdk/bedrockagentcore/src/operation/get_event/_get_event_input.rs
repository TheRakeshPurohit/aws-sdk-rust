// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetEventInput {
    /// <p>The identifier of the memory store containing the event.</p>
    pub memory_id: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the session containing the event.</p>
    pub session_id: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the actor associated with the event.</p>
    pub actor_id: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the event to retrieve.</p>
    pub event_id: ::std::option::Option<::std::string::String>,
}
impl GetEventInput {
    /// <p>The identifier of the memory store containing the event.</p>
    pub fn memory_id(&self) -> ::std::option::Option<&str> {
        self.memory_id.as_deref()
    }
    /// <p>The identifier of the session containing the event.</p>
    pub fn session_id(&self) -> ::std::option::Option<&str> {
        self.session_id.as_deref()
    }
    /// <p>The identifier of the actor associated with the event.</p>
    pub fn actor_id(&self) -> ::std::option::Option<&str> {
        self.actor_id.as_deref()
    }
    /// <p>The identifier of the event to retrieve.</p>
    pub fn event_id(&self) -> ::std::option::Option<&str> {
        self.event_id.as_deref()
    }
}
impl GetEventInput {
    /// Creates a new builder-style object to manufacture [`GetEventInput`](crate::operation::get_event::GetEventInput).
    pub fn builder() -> crate::operation::get_event::builders::GetEventInputBuilder {
        crate::operation::get_event::builders::GetEventInputBuilder::default()
    }
}

/// A builder for [`GetEventInput`](crate::operation::get_event::GetEventInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetEventInputBuilder {
    pub(crate) memory_id: ::std::option::Option<::std::string::String>,
    pub(crate) session_id: ::std::option::Option<::std::string::String>,
    pub(crate) actor_id: ::std::option::Option<::std::string::String>,
    pub(crate) event_id: ::std::option::Option<::std::string::String>,
}
impl GetEventInputBuilder {
    /// <p>The identifier of the memory store containing the event.</p>
    /// This field is required.
    pub fn memory_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.memory_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the memory store containing the event.</p>
    pub fn set_memory_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.memory_id = input;
        self
    }
    /// <p>The identifier of the memory store containing the event.</p>
    pub fn get_memory_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.memory_id
    }
    /// <p>The identifier of the session containing the event.</p>
    /// This field is required.
    pub fn session_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.session_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the session containing the event.</p>
    pub fn set_session_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.session_id = input;
        self
    }
    /// <p>The identifier of the session containing the event.</p>
    pub fn get_session_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.session_id
    }
    /// <p>The identifier of the actor associated with the event.</p>
    /// This field is required.
    pub fn actor_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.actor_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the actor associated with the event.</p>
    pub fn set_actor_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.actor_id = input;
        self
    }
    /// <p>The identifier of the actor associated with the event.</p>
    pub fn get_actor_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.actor_id
    }
    /// <p>The identifier of the event to retrieve.</p>
    /// This field is required.
    pub fn event_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.event_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the event to retrieve.</p>
    pub fn set_event_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.event_id = input;
        self
    }
    /// <p>The identifier of the event to retrieve.</p>
    pub fn get_event_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.event_id
    }
    /// Consumes the builder and constructs a [`GetEventInput`](crate::operation::get_event::GetEventInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::get_event::GetEventInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::get_event::GetEventInput {
            memory_id: self.memory_id,
            session_id: self.session_id,
            actor_id: self.actor_id,
            event_id: self.event_id,
        })
    }
}
