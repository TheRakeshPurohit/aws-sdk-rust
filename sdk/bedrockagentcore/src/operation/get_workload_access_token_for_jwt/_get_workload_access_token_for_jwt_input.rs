// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GetWorkloadAccessTokenForJwtInput {
    /// <p>The unique identifier for the registered workload.</p>
    pub workload_name: ::std::option::Option<::std::string::String>,
    /// <p>The OAuth 2.0 token issued by the user's identity provider.</p>
    pub user_token: ::std::option::Option<::std::string::String>,
}
impl GetWorkloadAccessTokenForJwtInput {
    /// <p>The unique identifier for the registered workload.</p>
    pub fn workload_name(&self) -> ::std::option::Option<&str> {
        self.workload_name.as_deref()
    }
    /// <p>The OAuth 2.0 token issued by the user's identity provider.</p>
    pub fn user_token(&self) -> ::std::option::Option<&str> {
        self.user_token.as_deref()
    }
}
impl ::std::fmt::Debug for GetWorkloadAccessTokenForJwtInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetWorkloadAccessTokenForJwtInput");
        formatter.field("workload_name", &self.workload_name);
        formatter.field("user_token", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl GetWorkloadAccessTokenForJwtInput {
    /// Creates a new builder-style object to manufacture [`GetWorkloadAccessTokenForJwtInput`](crate::operation::get_workload_access_token_for_jwt::GetWorkloadAccessTokenForJwtInput).
    pub fn builder() -> crate::operation::get_workload_access_token_for_jwt::builders::GetWorkloadAccessTokenForJwtInputBuilder {
        crate::operation::get_workload_access_token_for_jwt::builders::GetWorkloadAccessTokenForJwtInputBuilder::default()
    }
}

/// A builder for [`GetWorkloadAccessTokenForJwtInput`](crate::operation::get_workload_access_token_for_jwt::GetWorkloadAccessTokenForJwtInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct GetWorkloadAccessTokenForJwtInputBuilder {
    pub(crate) workload_name: ::std::option::Option<::std::string::String>,
    pub(crate) user_token: ::std::option::Option<::std::string::String>,
}
impl GetWorkloadAccessTokenForJwtInputBuilder {
    /// <p>The unique identifier for the registered workload.</p>
    /// This field is required.
    pub fn workload_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.workload_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for the registered workload.</p>
    pub fn set_workload_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.workload_name = input;
        self
    }
    /// <p>The unique identifier for the registered workload.</p>
    pub fn get_workload_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.workload_name
    }
    /// <p>The OAuth 2.0 token issued by the user's identity provider.</p>
    /// This field is required.
    pub fn user_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The OAuth 2.0 token issued by the user's identity provider.</p>
    pub fn set_user_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_token = input;
        self
    }
    /// <p>The OAuth 2.0 token issued by the user's identity provider.</p>
    pub fn get_user_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_token
    }
    /// Consumes the builder and constructs a [`GetWorkloadAccessTokenForJwtInput`](crate::operation::get_workload_access_token_for_jwt::GetWorkloadAccessTokenForJwtInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_workload_access_token_for_jwt::GetWorkloadAccessTokenForJwtInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::get_workload_access_token_for_jwt::GetWorkloadAccessTokenForJwtInput {
            workload_name: self.workload_name,
            user_token: self.user_token,
        })
    }
}
impl ::std::fmt::Debug for GetWorkloadAccessTokenForJwtInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetWorkloadAccessTokenForJwtInputBuilder");
        formatter.field("workload_name", &self.workload_name);
        formatter.field("user_token", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
