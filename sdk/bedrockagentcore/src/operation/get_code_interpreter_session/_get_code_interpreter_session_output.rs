// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetCodeInterpreterSessionOutput {
    /// <p>The identifier of the code interpreter.</p>
    pub code_interpreter_identifier: ::std::string::String,
    /// <p>The identifier of the code interpreter session.</p>
    pub session_id: ::std::string::String,
    /// <p>The name of the code interpreter session.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The time at which the code interpreter session was created.</p>
    pub created_at: ::aws_smithy_types::DateTime,
    /// <p>The timeout period for the code interpreter session in seconds.</p>
    pub session_timeout_seconds: ::std::option::Option<i32>,
    /// <p>The current status of the code interpreter session. Possible values include ACTIVE, STOPPING, and STOPPED.</p>
    pub status: ::std::option::Option<crate::types::CodeInterpreterSessionStatus>,
    _request_id: Option<String>,
}
impl GetCodeInterpreterSessionOutput {
    /// <p>The identifier of the code interpreter.</p>
    pub fn code_interpreter_identifier(&self) -> &str {
        use std::ops::Deref;
        self.code_interpreter_identifier.deref()
    }
    /// <p>The identifier of the code interpreter session.</p>
    pub fn session_id(&self) -> &str {
        use std::ops::Deref;
        self.session_id.deref()
    }
    /// <p>The name of the code interpreter session.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The time at which the code interpreter session was created.</p>
    pub fn created_at(&self) -> &::aws_smithy_types::DateTime {
        &self.created_at
    }
    /// <p>The timeout period for the code interpreter session in seconds.</p>
    pub fn session_timeout_seconds(&self) -> ::std::option::Option<i32> {
        self.session_timeout_seconds
    }
    /// <p>The current status of the code interpreter session. Possible values include ACTIVE, STOPPING, and STOPPED.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::CodeInterpreterSessionStatus> {
        self.status.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for GetCodeInterpreterSessionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetCodeInterpreterSessionOutput {
    /// Creates a new builder-style object to manufacture [`GetCodeInterpreterSessionOutput`](crate::operation::get_code_interpreter_session::GetCodeInterpreterSessionOutput).
    pub fn builder() -> crate::operation::get_code_interpreter_session::builders::GetCodeInterpreterSessionOutputBuilder {
        crate::operation::get_code_interpreter_session::builders::GetCodeInterpreterSessionOutputBuilder::default()
    }
}

/// A builder for [`GetCodeInterpreterSessionOutput`](crate::operation::get_code_interpreter_session::GetCodeInterpreterSessionOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetCodeInterpreterSessionOutputBuilder {
    pub(crate) code_interpreter_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) session_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) session_timeout_seconds: ::std::option::Option<i32>,
    pub(crate) status: ::std::option::Option<crate::types::CodeInterpreterSessionStatus>,
    _request_id: Option<String>,
}
impl GetCodeInterpreterSessionOutputBuilder {
    /// <p>The identifier of the code interpreter.</p>
    /// This field is required.
    pub fn code_interpreter_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.code_interpreter_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the code interpreter.</p>
    pub fn set_code_interpreter_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.code_interpreter_identifier = input;
        self
    }
    /// <p>The identifier of the code interpreter.</p>
    pub fn get_code_interpreter_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.code_interpreter_identifier
    }
    /// <p>The identifier of the code interpreter session.</p>
    /// This field is required.
    pub fn session_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.session_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the code interpreter session.</p>
    pub fn set_session_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.session_id = input;
        self
    }
    /// <p>The identifier of the code interpreter session.</p>
    pub fn get_session_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.session_id
    }
    /// <p>The name of the code interpreter session.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the code interpreter session.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the code interpreter session.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The time at which the code interpreter session was created.</p>
    /// This field is required.
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time at which the code interpreter session was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The time at which the code interpreter session was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The timeout period for the code interpreter session in seconds.</p>
    pub fn session_timeout_seconds(mut self, input: i32) -> Self {
        self.session_timeout_seconds = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timeout period for the code interpreter session in seconds.</p>
    pub fn set_session_timeout_seconds(mut self, input: ::std::option::Option<i32>) -> Self {
        self.session_timeout_seconds = input;
        self
    }
    /// <p>The timeout period for the code interpreter session in seconds.</p>
    pub fn get_session_timeout_seconds(&self) -> &::std::option::Option<i32> {
        &self.session_timeout_seconds
    }
    /// <p>The current status of the code interpreter session. Possible values include ACTIVE, STOPPING, and STOPPED.</p>
    pub fn status(mut self, input: crate::types::CodeInterpreterSessionStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the code interpreter session. Possible values include ACTIVE, STOPPING, and STOPPED.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::CodeInterpreterSessionStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status of the code interpreter session. Possible values include ACTIVE, STOPPING, and STOPPED.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::CodeInterpreterSessionStatus> {
        &self.status
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetCodeInterpreterSessionOutput`](crate::operation::get_code_interpreter_session::GetCodeInterpreterSessionOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`code_interpreter_identifier`](crate::operation::get_code_interpreter_session::builders::GetCodeInterpreterSessionOutputBuilder::code_interpreter_identifier)
    /// - [`session_id`](crate::operation::get_code_interpreter_session::builders::GetCodeInterpreterSessionOutputBuilder::session_id)
    /// - [`created_at`](crate::operation::get_code_interpreter_session::builders::GetCodeInterpreterSessionOutputBuilder::created_at)
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_code_interpreter_session::GetCodeInterpreterSessionOutput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::get_code_interpreter_session::GetCodeInterpreterSessionOutput {
            code_interpreter_identifier: self.code_interpreter_identifier.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "code_interpreter_identifier",
                    "code_interpreter_identifier was not specified but it is required when building GetCodeInterpreterSessionOutput",
                )
            })?,
            session_id: self.session_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "session_id",
                    "session_id was not specified but it is required when building GetCodeInterpreterSessionOutput",
                )
            })?,
            name: self.name,
            created_at: self.created_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_at",
                    "created_at was not specified but it is required when building GetCodeInterpreterSessionOutput",
                )
            })?,
            session_timeout_seconds: self.session_timeout_seconds,
            status: self.status,
            _request_id: self._request_id,
        })
    }
}
