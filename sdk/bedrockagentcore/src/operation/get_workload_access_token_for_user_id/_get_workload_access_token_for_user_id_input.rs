// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetWorkloadAccessTokenForUserIdInput {
    /// <p>The name of the workload from which you want to retrieve the access token.</p>
    pub workload_name: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the user for whom you are retrieving the access token.</p>
    pub user_id: ::std::option::Option<::std::string::String>,
}
impl GetWorkloadAccessTokenForUserIdInput {
    /// <p>The name of the workload from which you want to retrieve the access token.</p>
    pub fn workload_name(&self) -> ::std::option::Option<&str> {
        self.workload_name.as_deref()
    }
    /// <p>The ID of the user for whom you are retrieving the access token.</p>
    pub fn user_id(&self) -> ::std::option::Option<&str> {
        self.user_id.as_deref()
    }
}
impl GetWorkloadAccessTokenForUserIdInput {
    /// Creates a new builder-style object to manufacture [`GetWorkloadAccessTokenForUserIdInput`](crate::operation::get_workload_access_token_for_user_id::GetWorkloadAccessTokenForUserIdInput).
    pub fn builder() -> crate::operation::get_workload_access_token_for_user_id::builders::GetWorkloadAccessTokenForUserIdInputBuilder {
        crate::operation::get_workload_access_token_for_user_id::builders::GetWorkloadAccessTokenForUserIdInputBuilder::default()
    }
}

/// A builder for [`GetWorkloadAccessTokenForUserIdInput`](crate::operation::get_workload_access_token_for_user_id::GetWorkloadAccessTokenForUserIdInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetWorkloadAccessTokenForUserIdInputBuilder {
    pub(crate) workload_name: ::std::option::Option<::std::string::String>,
    pub(crate) user_id: ::std::option::Option<::std::string::String>,
}
impl GetWorkloadAccessTokenForUserIdInputBuilder {
    /// <p>The name of the workload from which you want to retrieve the access token.</p>
    /// This field is required.
    pub fn workload_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.workload_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the workload from which you want to retrieve the access token.</p>
    pub fn set_workload_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.workload_name = input;
        self
    }
    /// <p>The name of the workload from which you want to retrieve the access token.</p>
    pub fn get_workload_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.workload_name
    }
    /// <p>The ID of the user for whom you are retrieving the access token.</p>
    /// This field is required.
    pub fn user_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the user for whom you are retrieving the access token.</p>
    pub fn set_user_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_id = input;
        self
    }
    /// <p>The ID of the user for whom you are retrieving the access token.</p>
    pub fn get_user_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_id
    }
    /// Consumes the builder and constructs a [`GetWorkloadAccessTokenForUserIdInput`](crate::operation::get_workload_access_token_for_user_id::GetWorkloadAccessTokenForUserIdInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_workload_access_token_for_user_id::GetWorkloadAccessTokenForUserIdInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::get_workload_access_token_for_user_id::GetWorkloadAccessTokenForUserIdInput {
                workload_name: self.workload_name,
                user_id: self.user_id,
            },
        )
    }
}
