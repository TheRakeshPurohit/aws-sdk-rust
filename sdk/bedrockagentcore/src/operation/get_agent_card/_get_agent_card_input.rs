// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetAgentCardInput {
    /// <p>The session ID that the AgentCore Runtime agent is using.</p>
    pub runtime_session_id: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the AgentCore Runtime agent for which you want to get the A2A agent card.</p>
    pub agent_runtime_arn: ::std::option::Option<::std::string::String>,
    /// <p>Optional qualifier to specify an agent alias, such as <code>prod</code>code&gt; or <code>dev</code>. If you don't provide a value, the DEFAULT alias is used.</p>
    pub qualifier: ::std::option::Option<::std::string::String>,
}
impl GetAgentCardInput {
    /// <p>The session ID that the AgentCore Runtime agent is using.</p>
    pub fn runtime_session_id(&self) -> ::std::option::Option<&str> {
        self.runtime_session_id.as_deref()
    }
    /// <p>The ARN of the AgentCore Runtime agent for which you want to get the A2A agent card.</p>
    pub fn agent_runtime_arn(&self) -> ::std::option::Option<&str> {
        self.agent_runtime_arn.as_deref()
    }
    /// <p>Optional qualifier to specify an agent alias, such as <code>prod</code>code&gt; or <code>dev</code>. If you don't provide a value, the DEFAULT alias is used.</p>
    pub fn qualifier(&self) -> ::std::option::Option<&str> {
        self.qualifier.as_deref()
    }
}
impl GetAgentCardInput {
    /// Creates a new builder-style object to manufacture [`GetAgentCardInput`](crate::operation::get_agent_card::GetAgentCardInput).
    pub fn builder() -> crate::operation::get_agent_card::builders::GetAgentCardInputBuilder {
        crate::operation::get_agent_card::builders::GetAgentCardInputBuilder::default()
    }
}

/// A builder for [`GetAgentCardInput`](crate::operation::get_agent_card::GetAgentCardInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetAgentCardInputBuilder {
    pub(crate) runtime_session_id: ::std::option::Option<::std::string::String>,
    pub(crate) agent_runtime_arn: ::std::option::Option<::std::string::String>,
    pub(crate) qualifier: ::std::option::Option<::std::string::String>,
}
impl GetAgentCardInputBuilder {
    /// <p>The session ID that the AgentCore Runtime agent is using.</p>
    pub fn runtime_session_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.runtime_session_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The session ID that the AgentCore Runtime agent is using.</p>
    pub fn set_runtime_session_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.runtime_session_id = input;
        self
    }
    /// <p>The session ID that the AgentCore Runtime agent is using.</p>
    pub fn get_runtime_session_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.runtime_session_id
    }
    /// <p>The ARN of the AgentCore Runtime agent for which you want to get the A2A agent card.</p>
    /// This field is required.
    pub fn agent_runtime_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.agent_runtime_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the AgentCore Runtime agent for which you want to get the A2A agent card.</p>
    pub fn set_agent_runtime_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.agent_runtime_arn = input;
        self
    }
    /// <p>The ARN of the AgentCore Runtime agent for which you want to get the A2A agent card.</p>
    pub fn get_agent_runtime_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.agent_runtime_arn
    }
    /// <p>Optional qualifier to specify an agent alias, such as <code>prod</code>code&gt; or <code>dev</code>. If you don't provide a value, the DEFAULT alias is used.</p>
    pub fn qualifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.qualifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Optional qualifier to specify an agent alias, such as <code>prod</code>code&gt; or <code>dev</code>. If you don't provide a value, the DEFAULT alias is used.</p>
    pub fn set_qualifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.qualifier = input;
        self
    }
    /// <p>Optional qualifier to specify an agent alias, such as <code>prod</code>code&gt; or <code>dev</code>. If you don't provide a value, the DEFAULT alias is used.</p>
    pub fn get_qualifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.qualifier
    }
    /// Consumes the builder and constructs a [`GetAgentCardInput`](crate::operation::get_agent_card::GetAgentCardInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::get_agent_card::GetAgentCardInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::get_agent_card::GetAgentCardInput {
            runtime_session_id: self.runtime_session_id,
            agent_runtime_arn: self.agent_runtime_arn,
            qualifier: self.qualifier,
        })
    }
}
