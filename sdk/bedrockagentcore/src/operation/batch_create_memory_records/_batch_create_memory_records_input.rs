// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchCreateMemoryRecordsInput {
    /// <p>The unique ID of the memory resource where records will be created.</p>
    pub memory_id: ::std::option::Option<::std::string::String>,
    /// <p>A list of memory record creation inputs to be processed in the batch operation.</p>
    pub records: ::std::option::Option<::std::vec::Vec<crate::types::MemoryRecordCreateInput>>,
    /// <p>A unique, case-sensitive identifier to ensure idempotent processing of the batch request.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
}
impl BatchCreateMemoryRecordsInput {
    /// <p>The unique ID of the memory resource where records will be created.</p>
    pub fn memory_id(&self) -> ::std::option::Option<&str> {
        self.memory_id.as_deref()
    }
    /// <p>A list of memory record creation inputs to be processed in the batch operation.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.records.is_none()`.
    pub fn records(&self) -> &[crate::types::MemoryRecordCreateInput] {
        self.records.as_deref().unwrap_or_default()
    }
    /// <p>A unique, case-sensitive identifier to ensure idempotent processing of the batch request.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl BatchCreateMemoryRecordsInput {
    /// Creates a new builder-style object to manufacture [`BatchCreateMemoryRecordsInput`](crate::operation::batch_create_memory_records::BatchCreateMemoryRecordsInput).
    pub fn builder() -> crate::operation::batch_create_memory_records::builders::BatchCreateMemoryRecordsInputBuilder {
        crate::operation::batch_create_memory_records::builders::BatchCreateMemoryRecordsInputBuilder::default()
    }
}

/// A builder for [`BatchCreateMemoryRecordsInput`](crate::operation::batch_create_memory_records::BatchCreateMemoryRecordsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct BatchCreateMemoryRecordsInputBuilder {
    pub(crate) memory_id: ::std::option::Option<::std::string::String>,
    pub(crate) records: ::std::option::Option<::std::vec::Vec<crate::types::MemoryRecordCreateInput>>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
}
impl BatchCreateMemoryRecordsInputBuilder {
    /// <p>The unique ID of the memory resource where records will be created.</p>
    /// This field is required.
    pub fn memory_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.memory_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique ID of the memory resource where records will be created.</p>
    pub fn set_memory_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.memory_id = input;
        self
    }
    /// <p>The unique ID of the memory resource where records will be created.</p>
    pub fn get_memory_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.memory_id
    }
    /// Appends an item to `records`.
    ///
    /// To override the contents of this collection use [`set_records`](Self::set_records).
    ///
    /// <p>A list of memory record creation inputs to be processed in the batch operation.</p>
    pub fn records(mut self, input: crate::types::MemoryRecordCreateInput) -> Self {
        let mut v = self.records.unwrap_or_default();
        v.push(input);
        self.records = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of memory record creation inputs to be processed in the batch operation.</p>
    pub fn set_records(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::MemoryRecordCreateInput>>) -> Self {
        self.records = input;
        self
    }
    /// <p>A list of memory record creation inputs to be processed in the batch operation.</p>
    pub fn get_records(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MemoryRecordCreateInput>> {
        &self.records
    }
    /// <p>A unique, case-sensitive identifier to ensure idempotent processing of the batch request.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier to ensure idempotent processing of the batch request.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A unique, case-sensitive identifier to ensure idempotent processing of the batch request.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Consumes the builder and constructs a [`BatchCreateMemoryRecordsInput`](crate::operation::batch_create_memory_records::BatchCreateMemoryRecordsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::batch_create_memory_records::BatchCreateMemoryRecordsInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::batch_create_memory_records::BatchCreateMemoryRecordsInput {
            memory_id: self.memory_id,
            records: self.records,
            client_token: self.client_token,
        })
    }
}
