// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetBrowserSessionOutput {
    /// <p>The identifier of the browser.</p>
    pub browser_identifier: ::std::string::String,
    /// <p>The identifier of the browser session.</p>
    pub session_id: ::std::string::String,
    /// <p>The name of the browser session.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The time at which the browser session was created.</p>
    pub created_at: ::aws_smithy_types::DateTime,
    /// <p>The configuration that defines the dimensions of a browser viewport in a browser session. The viewport determines the visible area of web content and affects how web pages are rendered and displayed. Proper viewport configuration ensures that web content is displayed correctly for the agent's browsing tasks.</p>
    pub view_port: ::std::option::Option<crate::types::ViewPort>,
    /// <p>The timeout period for the browser session in seconds.</p>
    pub session_timeout_seconds: ::std::option::Option<i32>,
    /// <p>The current status of the browser session. Possible values include ACTIVE, STOPPING, and STOPPED.</p>
    pub status: ::std::option::Option<crate::types::BrowserSessionStatus>,
    /// <p>The streams associated with this browser session. These include the automation stream and live view stream.</p>
    pub streams: ::std::option::Option<crate::types::BrowserSessionStream>,
    /// <p>The artifact containing the session replay information.</p>
    pub session_replay_artifact: ::std::option::Option<::std::string::String>,
    /// <p>The time at which the browser session was last updated.</p>
    pub last_updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl GetBrowserSessionOutput {
    /// <p>The identifier of the browser.</p>
    pub fn browser_identifier(&self) -> &str {
        use std::ops::Deref;
        self.browser_identifier.deref()
    }
    /// <p>The identifier of the browser session.</p>
    pub fn session_id(&self) -> &str {
        use std::ops::Deref;
        self.session_id.deref()
    }
    /// <p>The name of the browser session.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The time at which the browser session was created.</p>
    pub fn created_at(&self) -> &::aws_smithy_types::DateTime {
        &self.created_at
    }
    /// <p>The configuration that defines the dimensions of a browser viewport in a browser session. The viewport determines the visible area of web content and affects how web pages are rendered and displayed. Proper viewport configuration ensures that web content is displayed correctly for the agent's browsing tasks.</p>
    pub fn view_port(&self) -> ::std::option::Option<&crate::types::ViewPort> {
        self.view_port.as_ref()
    }
    /// <p>The timeout period for the browser session in seconds.</p>
    pub fn session_timeout_seconds(&self) -> ::std::option::Option<i32> {
        self.session_timeout_seconds
    }
    /// <p>The current status of the browser session. Possible values include ACTIVE, STOPPING, and STOPPED.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::BrowserSessionStatus> {
        self.status.as_ref()
    }
    /// <p>The streams associated with this browser session. These include the automation stream and live view stream.</p>
    pub fn streams(&self) -> ::std::option::Option<&crate::types::BrowserSessionStream> {
        self.streams.as_ref()
    }
    /// <p>The artifact containing the session replay information.</p>
    pub fn session_replay_artifact(&self) -> ::std::option::Option<&str> {
        self.session_replay_artifact.as_deref()
    }
    /// <p>The time at which the browser session was last updated.</p>
    pub fn last_updated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_updated_at.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for GetBrowserSessionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetBrowserSessionOutput {
    /// Creates a new builder-style object to manufacture [`GetBrowserSessionOutput`](crate::operation::get_browser_session::GetBrowserSessionOutput).
    pub fn builder() -> crate::operation::get_browser_session::builders::GetBrowserSessionOutputBuilder {
        crate::operation::get_browser_session::builders::GetBrowserSessionOutputBuilder::default()
    }
}

/// A builder for [`GetBrowserSessionOutput`](crate::operation::get_browser_session::GetBrowserSessionOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetBrowserSessionOutputBuilder {
    pub(crate) browser_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) session_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) view_port: ::std::option::Option<crate::types::ViewPort>,
    pub(crate) session_timeout_seconds: ::std::option::Option<i32>,
    pub(crate) status: ::std::option::Option<crate::types::BrowserSessionStatus>,
    pub(crate) streams: ::std::option::Option<crate::types::BrowserSessionStream>,
    pub(crate) session_replay_artifact: ::std::option::Option<::std::string::String>,
    pub(crate) last_updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl GetBrowserSessionOutputBuilder {
    /// <p>The identifier of the browser.</p>
    /// This field is required.
    pub fn browser_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.browser_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the browser.</p>
    pub fn set_browser_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.browser_identifier = input;
        self
    }
    /// <p>The identifier of the browser.</p>
    pub fn get_browser_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.browser_identifier
    }
    /// <p>The identifier of the browser session.</p>
    /// This field is required.
    pub fn session_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.session_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the browser session.</p>
    pub fn set_session_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.session_id = input;
        self
    }
    /// <p>The identifier of the browser session.</p>
    pub fn get_session_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.session_id
    }
    /// <p>The name of the browser session.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the browser session.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the browser session.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The time at which the browser session was created.</p>
    /// This field is required.
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time at which the browser session was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The time at which the browser session was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The configuration that defines the dimensions of a browser viewport in a browser session. The viewport determines the visible area of web content and affects how web pages are rendered and displayed. Proper viewport configuration ensures that web content is displayed correctly for the agent's browsing tasks.</p>
    pub fn view_port(mut self, input: crate::types::ViewPort) -> Self {
        self.view_port = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration that defines the dimensions of a browser viewport in a browser session. The viewport determines the visible area of web content and affects how web pages are rendered and displayed. Proper viewport configuration ensures that web content is displayed correctly for the agent's browsing tasks.</p>
    pub fn set_view_port(mut self, input: ::std::option::Option<crate::types::ViewPort>) -> Self {
        self.view_port = input;
        self
    }
    /// <p>The configuration that defines the dimensions of a browser viewport in a browser session. The viewport determines the visible area of web content and affects how web pages are rendered and displayed. Proper viewport configuration ensures that web content is displayed correctly for the agent's browsing tasks.</p>
    pub fn get_view_port(&self) -> &::std::option::Option<crate::types::ViewPort> {
        &self.view_port
    }
    /// <p>The timeout period for the browser session in seconds.</p>
    pub fn session_timeout_seconds(mut self, input: i32) -> Self {
        self.session_timeout_seconds = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timeout period for the browser session in seconds.</p>
    pub fn set_session_timeout_seconds(mut self, input: ::std::option::Option<i32>) -> Self {
        self.session_timeout_seconds = input;
        self
    }
    /// <p>The timeout period for the browser session in seconds.</p>
    pub fn get_session_timeout_seconds(&self) -> &::std::option::Option<i32> {
        &self.session_timeout_seconds
    }
    /// <p>The current status of the browser session. Possible values include ACTIVE, STOPPING, and STOPPED.</p>
    pub fn status(mut self, input: crate::types::BrowserSessionStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the browser session. Possible values include ACTIVE, STOPPING, and STOPPED.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::BrowserSessionStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status of the browser session. Possible values include ACTIVE, STOPPING, and STOPPED.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::BrowserSessionStatus> {
        &self.status
    }
    /// <p>The streams associated with this browser session. These include the automation stream and live view stream.</p>
    pub fn streams(mut self, input: crate::types::BrowserSessionStream) -> Self {
        self.streams = ::std::option::Option::Some(input);
        self
    }
    /// <p>The streams associated with this browser session. These include the automation stream and live view stream.</p>
    pub fn set_streams(mut self, input: ::std::option::Option<crate::types::BrowserSessionStream>) -> Self {
        self.streams = input;
        self
    }
    /// <p>The streams associated with this browser session. These include the automation stream and live view stream.</p>
    pub fn get_streams(&self) -> &::std::option::Option<crate::types::BrowserSessionStream> {
        &self.streams
    }
    /// <p>The artifact containing the session replay information.</p>
    pub fn session_replay_artifact(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.session_replay_artifact = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The artifact containing the session replay information.</p>
    pub fn set_session_replay_artifact(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.session_replay_artifact = input;
        self
    }
    /// <p>The artifact containing the session replay information.</p>
    pub fn get_session_replay_artifact(&self) -> &::std::option::Option<::std::string::String> {
        &self.session_replay_artifact
    }
    /// <p>The time at which the browser session was last updated.</p>
    pub fn last_updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time at which the browser session was last updated.</p>
    pub fn set_last_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated_at = input;
        self
    }
    /// <p>The time at which the browser session was last updated.</p>
    pub fn get_last_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated_at
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetBrowserSessionOutput`](crate::operation::get_browser_session::GetBrowserSessionOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`browser_identifier`](crate::operation::get_browser_session::builders::GetBrowserSessionOutputBuilder::browser_identifier)
    /// - [`session_id`](crate::operation::get_browser_session::builders::GetBrowserSessionOutputBuilder::session_id)
    /// - [`created_at`](crate::operation::get_browser_session::builders::GetBrowserSessionOutputBuilder::created_at)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::get_browser_session::GetBrowserSessionOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::get_browser_session::GetBrowserSessionOutput {
            browser_identifier: self.browser_identifier.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "browser_identifier",
                    "browser_identifier was not specified but it is required when building GetBrowserSessionOutput",
                )
            })?,
            session_id: self.session_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "session_id",
                    "session_id was not specified but it is required when building GetBrowserSessionOutput",
                )
            })?,
            name: self.name,
            created_at: self.created_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_at",
                    "created_at was not specified but it is required when building GetBrowserSessionOutput",
                )
            })?,
            view_port: self.view_port,
            session_timeout_seconds: self.session_timeout_seconds,
            status: self.status,
            streams: self.streams,
            session_replay_artifact: self.session_replay_artifact,
            last_updated_at: self.last_updated_at,
            _request_id: self._request_id,
        })
    }
}
