// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateEventInput {
    /// <p>The identifier of the memory store in which to create the event.</p>
    pub memory_id: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the actor associated with this event. An actor represents an entity that participates in sessions and generates events.</p>
    pub actor_id: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the session in which this event occurs. A session represents a sequence of related events.</p>
    pub session_id: ::std::option::Option<::std::string::String>,
    /// <p>The timestamp when the event occurred. If not specified, the current time is used.</p>
    pub event_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The content payload of the event. This can include conversational data or binary content.</p>
    pub payload: ::std::option::Option<::std::vec::Vec<crate::types::PayloadType>>,
    /// <p>The branch information for this event. Branches allow for organizing events into different conversation threads or paths.</p>
    pub branch: ::std::option::Option<crate::types::Branch>,
    /// <p>A unique, case-sensitive identifier to ensure that the operation completes no more than one time. If this token matches a previous request, AgentCore ignores the request, but does not return an error.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
}
impl CreateEventInput {
    /// <p>The identifier of the memory store in which to create the event.</p>
    pub fn memory_id(&self) -> ::std::option::Option<&str> {
        self.memory_id.as_deref()
    }
    /// <p>The identifier of the actor associated with this event. An actor represents an entity that participates in sessions and generates events.</p>
    pub fn actor_id(&self) -> ::std::option::Option<&str> {
        self.actor_id.as_deref()
    }
    /// <p>The identifier of the session in which this event occurs. A session represents a sequence of related events.</p>
    pub fn session_id(&self) -> ::std::option::Option<&str> {
        self.session_id.as_deref()
    }
    /// <p>The timestamp when the event occurred. If not specified, the current time is used.</p>
    pub fn event_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.event_timestamp.as_ref()
    }
    /// <p>The content payload of the event. This can include conversational data or binary content.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.payload.is_none()`.
    pub fn payload(&self) -> &[crate::types::PayloadType] {
        self.payload.as_deref().unwrap_or_default()
    }
    /// <p>The branch information for this event. Branches allow for organizing events into different conversation threads or paths.</p>
    pub fn branch(&self) -> ::std::option::Option<&crate::types::Branch> {
        self.branch.as_ref()
    }
    /// <p>A unique, case-sensitive identifier to ensure that the operation completes no more than one time. If this token matches a previous request, AgentCore ignores the request, but does not return an error.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl CreateEventInput {
    /// Creates a new builder-style object to manufacture [`CreateEventInput`](crate::operation::create_event::CreateEventInput).
    pub fn builder() -> crate::operation::create_event::builders::CreateEventInputBuilder {
        crate::operation::create_event::builders::CreateEventInputBuilder::default()
    }
}

/// A builder for [`CreateEventInput`](crate::operation::create_event::CreateEventInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateEventInputBuilder {
    pub(crate) memory_id: ::std::option::Option<::std::string::String>,
    pub(crate) actor_id: ::std::option::Option<::std::string::String>,
    pub(crate) session_id: ::std::option::Option<::std::string::String>,
    pub(crate) event_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) payload: ::std::option::Option<::std::vec::Vec<crate::types::PayloadType>>,
    pub(crate) branch: ::std::option::Option<crate::types::Branch>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
}
impl CreateEventInputBuilder {
    /// <p>The identifier of the memory store in which to create the event.</p>
    /// This field is required.
    pub fn memory_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.memory_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the memory store in which to create the event.</p>
    pub fn set_memory_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.memory_id = input;
        self
    }
    /// <p>The identifier of the memory store in which to create the event.</p>
    pub fn get_memory_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.memory_id
    }
    /// <p>The identifier of the actor associated with this event. An actor represents an entity that participates in sessions and generates events.</p>
    /// This field is required.
    pub fn actor_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.actor_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the actor associated with this event. An actor represents an entity that participates in sessions and generates events.</p>
    pub fn set_actor_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.actor_id = input;
        self
    }
    /// <p>The identifier of the actor associated with this event. An actor represents an entity that participates in sessions and generates events.</p>
    pub fn get_actor_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.actor_id
    }
    /// <p>The identifier of the session in which this event occurs. A session represents a sequence of related events.</p>
    pub fn session_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.session_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the session in which this event occurs. A session represents a sequence of related events.</p>
    pub fn set_session_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.session_id = input;
        self
    }
    /// <p>The identifier of the session in which this event occurs. A session represents a sequence of related events.</p>
    pub fn get_session_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.session_id
    }
    /// <p>The timestamp when the event occurred. If not specified, the current time is used.</p>
    /// This field is required.
    pub fn event_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.event_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the event occurred. If not specified, the current time is used.</p>
    pub fn set_event_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.event_timestamp = input;
        self
    }
    /// <p>The timestamp when the event occurred. If not specified, the current time is used.</p>
    pub fn get_event_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.event_timestamp
    }
    /// Appends an item to `payload`.
    ///
    /// To override the contents of this collection use [`set_payload`](Self::set_payload).
    ///
    /// <p>The content payload of the event. This can include conversational data or binary content.</p>
    pub fn payload(mut self, input: crate::types::PayloadType) -> Self {
        let mut v = self.payload.unwrap_or_default();
        v.push(input);
        self.payload = ::std::option::Option::Some(v);
        self
    }
    /// <p>The content payload of the event. This can include conversational data or binary content.</p>
    pub fn set_payload(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::PayloadType>>) -> Self {
        self.payload = input;
        self
    }
    /// <p>The content payload of the event. This can include conversational data or binary content.</p>
    pub fn get_payload(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PayloadType>> {
        &self.payload
    }
    /// <p>The branch information for this event. Branches allow for organizing events into different conversation threads or paths.</p>
    pub fn branch(mut self, input: crate::types::Branch) -> Self {
        self.branch = ::std::option::Option::Some(input);
        self
    }
    /// <p>The branch information for this event. Branches allow for organizing events into different conversation threads or paths.</p>
    pub fn set_branch(mut self, input: ::std::option::Option<crate::types::Branch>) -> Self {
        self.branch = input;
        self
    }
    /// <p>The branch information for this event. Branches allow for organizing events into different conversation threads or paths.</p>
    pub fn get_branch(&self) -> &::std::option::Option<crate::types::Branch> {
        &self.branch
    }
    /// <p>A unique, case-sensitive identifier to ensure that the operation completes no more than one time. If this token matches a previous request, AgentCore ignores the request, but does not return an error.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier to ensure that the operation completes no more than one time. If this token matches a previous request, AgentCore ignores the request, but does not return an error.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A unique, case-sensitive identifier to ensure that the operation completes no more than one time. If this token matches a previous request, AgentCore ignores the request, but does not return an error.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Consumes the builder and constructs a [`CreateEventInput`](crate::operation::create_event::CreateEventInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::create_event::CreateEventInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_event::CreateEventInput {
            memory_id: self.memory_id,
            actor_id: self.actor_id,
            session_id: self.session_id,
            event_timestamp: self.event_timestamp,
            payload: self.payload,
            branch: self.branch,
            client_token: self.client_token,
        })
    }
}
