// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_event::_create_event_output::CreateEventOutputBuilder;

pub use crate::operation::create_event::_create_event_input::CreateEventInputBuilder;

impl crate::operation::create_event::builders::CreateEventInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_event::CreateEventOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_event::CreateEventError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_event();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateEvent`.
///
/// <p>Creates an event in an AgentCore Memory resource. Events represent interactions or activities that occur within a session and are associated with specific actors.</p>
/// <p>To use this operation, you must have the <code>bedrock-agentcore:CreateEvent</code> permission.</p>
/// <p>This operation is subject to request rate limiting.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateEventFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_event::builders::CreateEventInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_event::CreateEventOutput,
        crate::operation::create_event::CreateEventError,
    > for CreateEventFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_event::CreateEventOutput,
            crate::operation::create_event::CreateEventError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreateEventFluentBuilder {
    /// Creates a new `CreateEventFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateEvent as a reference.
    pub fn as_input(&self) -> &crate::operation::create_event::builders::CreateEventInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_event::CreateEventOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_event::CreateEventError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_event::CreateEvent::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_event::CreateEvent::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_event::CreateEventOutput,
        crate::operation::create_event::CreateEventError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The identifier of the AgentCore Memory resource in which to create the event.</p>
    pub fn memory_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.memory_id(input.into());
        self
    }
    /// <p>The identifier of the AgentCore Memory resource in which to create the event.</p>
    pub fn set_memory_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_memory_id(input);
        self
    }
    /// <p>The identifier of the AgentCore Memory resource in which to create the event.</p>
    pub fn get_memory_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_memory_id()
    }
    /// <p>The identifier of the actor associated with this event. An actor represents an entity that participates in sessions and generates events.</p>
    pub fn actor_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.actor_id(input.into());
        self
    }
    /// <p>The identifier of the actor associated with this event. An actor represents an entity that participates in sessions and generates events.</p>
    pub fn set_actor_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_actor_id(input);
        self
    }
    /// <p>The identifier of the actor associated with this event. An actor represents an entity that participates in sessions and generates events.</p>
    pub fn get_actor_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_actor_id()
    }
    /// <p>The identifier of the session in which this event occurs. A session represents a sequence of related events.</p>
    pub fn session_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.session_id(input.into());
        self
    }
    /// <p>The identifier of the session in which this event occurs. A session represents a sequence of related events.</p>
    pub fn set_session_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_session_id(input);
        self
    }
    /// <p>The identifier of the session in which this event occurs. A session represents a sequence of related events.</p>
    pub fn get_session_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_session_id()
    }
    /// <p>The timestamp when the event occurred. If not specified, the current time is used.</p>
    pub fn event_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.event_timestamp(input);
        self
    }
    /// <p>The timestamp when the event occurred. If not specified, the current time is used.</p>
    pub fn set_event_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.inner = self.inner.set_event_timestamp(input);
        self
    }
    /// <p>The timestamp when the event occurred. If not specified, the current time is used.</p>
    pub fn get_event_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        self.inner.get_event_timestamp()
    }
    ///
    /// Appends an item to `payload`.
    ///
    /// To override the contents of this collection use [`set_payload`](Self::set_payload).
    ///
    /// <p>The content payload of the event. This can include conversational data or binary content.</p>
    pub fn payload(mut self, input: crate::types::PayloadType) -> Self {
        self.inner = self.inner.payload(input);
        self
    }
    /// <p>The content payload of the event. This can include conversational data or binary content.</p>
    pub fn set_payload(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::PayloadType>>) -> Self {
        self.inner = self.inner.set_payload(input);
        self
    }
    /// <p>The content payload of the event. This can include conversational data or binary content.</p>
    pub fn get_payload(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PayloadType>> {
        self.inner.get_payload()
    }
    /// <p>The branch information for this event. Branches allow for organizing events into different conversation threads or paths.</p>
    pub fn branch(mut self, input: crate::types::Branch) -> Self {
        self.inner = self.inner.branch(input);
        self
    }
    /// <p>The branch information for this event. Branches allow for organizing events into different conversation threads or paths.</p>
    pub fn set_branch(mut self, input: ::std::option::Option<crate::types::Branch>) -> Self {
        self.inner = self.inner.set_branch(input);
        self
    }
    /// <p>The branch information for this event. Branches allow for organizing events into different conversation threads or paths.</p>
    pub fn get_branch(&self) -> &::std::option::Option<crate::types::Branch> {
        self.inner.get_branch()
    }
    /// <p>A unique, case-sensitive identifier to ensure that the operation completes no more than one time. If this token matches a previous request, AgentCore ignores the request, but does not return an error.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier to ensure that the operation completes no more than one time. If this token matches a previous request, AgentCore ignores the request, but does not return an error.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
    /// <p>A unique, case-sensitive identifier to ensure that the operation completes no more than one time. If this token matches a previous request, AgentCore ignores the request, but does not return an error.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_client_token()
    }
    ///
    /// Adds a key-value pair to `metadata`.
    ///
    /// To override the contents of this collection use [`set_metadata`](Self::set_metadata).
    ///
    /// <p>The key-value metadata to attach to the event.</p>
    pub fn metadata(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::MetadataValue) -> Self {
        self.inner = self.inner.metadata(k.into(), v);
        self
    }
    /// <p>The key-value metadata to attach to the event.</p>
    pub fn set_metadata(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::MetadataValue>>,
    ) -> Self {
        self.inner = self.inner.set_metadata(input);
        self
    }
    /// <p>The key-value metadata to attach to the event.</p>
    pub fn get_metadata(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::MetadataValue>> {
        self.inner.get_metadata()
    }
}
