// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GetResourceOauth2TokenInput {
    /// <p>The identity token of the workload you want to retrive the Oauth2 Token of.</p>
    pub workload_identity_token: ::std::option::Option<::std::string::String>,
    /// <p>Reference to the credential provider</p>
    pub resource_credential_provider_name: ::std::option::Option<::std::string::String>,
    /// <p>The OAuth scopes requested</p>
    pub scopes: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The type of flow to be performed</p>
    pub oauth2_flow: ::std::option::Option<crate::types::Oauth2FlowType>,
    /// <p>Callback url to redirect after token retrieval completes. Should be one of the provideded urls during WorkloadIdentity creation</p>
    pub resource_oauth2_return_url: ::std::option::Option<::std::string::String>,
    /// <p>If true, always initiate a new 3LO flow</p>
    pub force_authentication: ::std::option::Option<bool>,
    /// <p>Gives the ability to send extra/custom parameters to the resource credentials provider during the authorization process. Standard OAuth2 flow parameters will not be overriden.</p>
    pub custom_parameters: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl GetResourceOauth2TokenInput {
    /// <p>The identity token of the workload you want to retrive the Oauth2 Token of.</p>
    pub fn workload_identity_token(&self) -> ::std::option::Option<&str> {
        self.workload_identity_token.as_deref()
    }
    /// <p>Reference to the credential provider</p>
    pub fn resource_credential_provider_name(&self) -> ::std::option::Option<&str> {
        self.resource_credential_provider_name.as_deref()
    }
    /// <p>The OAuth scopes requested</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.scopes.is_none()`.
    pub fn scopes(&self) -> &[::std::string::String] {
        self.scopes.as_deref().unwrap_or_default()
    }
    /// <p>The type of flow to be performed</p>
    pub fn oauth2_flow(&self) -> ::std::option::Option<&crate::types::Oauth2FlowType> {
        self.oauth2_flow.as_ref()
    }
    /// <p>Callback url to redirect after token retrieval completes. Should be one of the provideded urls during WorkloadIdentity creation</p>
    pub fn resource_oauth2_return_url(&self) -> ::std::option::Option<&str> {
        self.resource_oauth2_return_url.as_deref()
    }
    /// <p>If true, always initiate a new 3LO flow</p>
    pub fn force_authentication(&self) -> ::std::option::Option<bool> {
        self.force_authentication
    }
    /// <p>Gives the ability to send extra/custom parameters to the resource credentials provider during the authorization process. Standard OAuth2 flow parameters will not be overriden.</p>
    pub fn custom_parameters(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.custom_parameters.as_ref()
    }
}
impl ::std::fmt::Debug for GetResourceOauth2TokenInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetResourceOauth2TokenInput");
        formatter.field("workload_identity_token", &"*** Sensitive Data Redacted ***");
        formatter.field("resource_credential_provider_name", &self.resource_credential_provider_name);
        formatter.field("scopes", &self.scopes);
        formatter.field("oauth2_flow", &self.oauth2_flow);
        formatter.field("resource_oauth2_return_url", &self.resource_oauth2_return_url);
        formatter.field("force_authentication", &self.force_authentication);
        formatter.field("custom_parameters", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl GetResourceOauth2TokenInput {
    /// Creates a new builder-style object to manufacture [`GetResourceOauth2TokenInput`](crate::operation::get_resource_oauth2_token::GetResourceOauth2TokenInput).
    pub fn builder() -> crate::operation::get_resource_oauth2_token::builders::GetResourceOauth2TokenInputBuilder {
        crate::operation::get_resource_oauth2_token::builders::GetResourceOauth2TokenInputBuilder::default()
    }
}

/// A builder for [`GetResourceOauth2TokenInput`](crate::operation::get_resource_oauth2_token::GetResourceOauth2TokenInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct GetResourceOauth2TokenInputBuilder {
    pub(crate) workload_identity_token: ::std::option::Option<::std::string::String>,
    pub(crate) resource_credential_provider_name: ::std::option::Option<::std::string::String>,
    pub(crate) scopes: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) oauth2_flow: ::std::option::Option<crate::types::Oauth2FlowType>,
    pub(crate) resource_oauth2_return_url: ::std::option::Option<::std::string::String>,
    pub(crate) force_authentication: ::std::option::Option<bool>,
    pub(crate) custom_parameters: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl GetResourceOauth2TokenInputBuilder {
    /// <p>The identity token of the workload you want to retrive the Oauth2 Token of.</p>
    /// This field is required.
    pub fn workload_identity_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.workload_identity_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identity token of the workload you want to retrive the Oauth2 Token of.</p>
    pub fn set_workload_identity_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.workload_identity_token = input;
        self
    }
    /// <p>The identity token of the workload you want to retrive the Oauth2 Token of.</p>
    pub fn get_workload_identity_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.workload_identity_token
    }
    /// <p>Reference to the credential provider</p>
    /// This field is required.
    pub fn resource_credential_provider_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_credential_provider_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Reference to the credential provider</p>
    pub fn set_resource_credential_provider_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_credential_provider_name = input;
        self
    }
    /// <p>Reference to the credential provider</p>
    pub fn get_resource_credential_provider_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_credential_provider_name
    }
    /// Appends an item to `scopes`.
    ///
    /// To override the contents of this collection use [`set_scopes`](Self::set_scopes).
    ///
    /// <p>The OAuth scopes requested</p>
    pub fn scopes(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.scopes.unwrap_or_default();
        v.push(input.into());
        self.scopes = ::std::option::Option::Some(v);
        self
    }
    /// <p>The OAuth scopes requested</p>
    pub fn set_scopes(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.scopes = input;
        self
    }
    /// <p>The OAuth scopes requested</p>
    pub fn get_scopes(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.scopes
    }
    /// <p>The type of flow to be performed</p>
    /// This field is required.
    pub fn oauth2_flow(mut self, input: crate::types::Oauth2FlowType) -> Self {
        self.oauth2_flow = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of flow to be performed</p>
    pub fn set_oauth2_flow(mut self, input: ::std::option::Option<crate::types::Oauth2FlowType>) -> Self {
        self.oauth2_flow = input;
        self
    }
    /// <p>The type of flow to be performed</p>
    pub fn get_oauth2_flow(&self) -> &::std::option::Option<crate::types::Oauth2FlowType> {
        &self.oauth2_flow
    }
    /// <p>Callback url to redirect after token retrieval completes. Should be one of the provideded urls during WorkloadIdentity creation</p>
    pub fn resource_oauth2_return_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_oauth2_return_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Callback url to redirect after token retrieval completes. Should be one of the provideded urls during WorkloadIdentity creation</p>
    pub fn set_resource_oauth2_return_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_oauth2_return_url = input;
        self
    }
    /// <p>Callback url to redirect after token retrieval completes. Should be one of the provideded urls during WorkloadIdentity creation</p>
    pub fn get_resource_oauth2_return_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_oauth2_return_url
    }
    /// <p>If true, always initiate a new 3LO flow</p>
    pub fn force_authentication(mut self, input: bool) -> Self {
        self.force_authentication = ::std::option::Option::Some(input);
        self
    }
    /// <p>If true, always initiate a new 3LO flow</p>
    pub fn set_force_authentication(mut self, input: ::std::option::Option<bool>) -> Self {
        self.force_authentication = input;
        self
    }
    /// <p>If true, always initiate a new 3LO flow</p>
    pub fn get_force_authentication(&self) -> &::std::option::Option<bool> {
        &self.force_authentication
    }
    /// Adds a key-value pair to `custom_parameters`.
    ///
    /// To override the contents of this collection use [`set_custom_parameters`](Self::set_custom_parameters).
    ///
    /// <p>Gives the ability to send extra/custom parameters to the resource credentials provider during the authorization process. Standard OAuth2 flow parameters will not be overriden.</p>
    pub fn custom_parameters(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.custom_parameters.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.custom_parameters = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Gives the ability to send extra/custom parameters to the resource credentials provider during the authorization process. Standard OAuth2 flow parameters will not be overriden.</p>
    pub fn set_custom_parameters(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.custom_parameters = input;
        self
    }
    /// <p>Gives the ability to send extra/custom parameters to the resource credentials provider during the authorization process. Standard OAuth2 flow parameters will not be overriden.</p>
    pub fn get_custom_parameters(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.custom_parameters
    }
    /// Consumes the builder and constructs a [`GetResourceOauth2TokenInput`](crate::operation::get_resource_oauth2_token::GetResourceOauth2TokenInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_resource_oauth2_token::GetResourceOauth2TokenInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::get_resource_oauth2_token::GetResourceOauth2TokenInput {
            workload_identity_token: self.workload_identity_token,
            resource_credential_provider_name: self.resource_credential_provider_name,
            scopes: self.scopes,
            oauth2_flow: self.oauth2_flow,
            resource_oauth2_return_url: self.resource_oauth2_return_url,
            force_authentication: self.force_authentication,
            custom_parameters: self.custom_parameters,
        })
    }
}
impl ::std::fmt::Debug for GetResourceOauth2TokenInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetResourceOauth2TokenInputBuilder");
        formatter.field("workload_identity_token", &"*** Sensitive Data Redacted ***");
        formatter.field("resource_credential_provider_name", &self.resource_credential_provider_name);
        formatter.field("scopes", &self.scopes);
        formatter.field("oauth2_flow", &self.oauth2_flow);
        formatter.field("resource_oauth2_return_url", &self.resource_oauth2_return_url);
        formatter.field("force_authentication", &self.force_authentication);
        formatter.field("custom_parameters", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
