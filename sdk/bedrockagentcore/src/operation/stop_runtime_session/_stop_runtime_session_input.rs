// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StopRuntimeSessionInput {
    /// <p>The ID of the session that you want to stop.</p>
    pub runtime_session_id: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the agent that contains the session that you want to stop.</p>
    pub agent_runtime_arn: ::std::option::Option<::std::string::String>,
    /// <p>Optional qualifier to specify an agent alias, such as <code>prod</code>code&gt; or <code>dev</code>. If you don't provide a value, the DEFAULT alias is used.</p>
    pub qualifier: ::std::option::Option<::std::string::String>,
    /// <p>Idempotent token used to identify the request. If you use the same token with multiple requests, the same response is returned. Use ClientToken to prevent the same request from being processed more than once.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
}
impl StopRuntimeSessionInput {
    /// <p>The ID of the session that you want to stop.</p>
    pub fn runtime_session_id(&self) -> ::std::option::Option<&str> {
        self.runtime_session_id.as_deref()
    }
    /// <p>The ARN of the agent that contains the session that you want to stop.</p>
    pub fn agent_runtime_arn(&self) -> ::std::option::Option<&str> {
        self.agent_runtime_arn.as_deref()
    }
    /// <p>Optional qualifier to specify an agent alias, such as <code>prod</code>code&gt; or <code>dev</code>. If you don't provide a value, the DEFAULT alias is used.</p>
    pub fn qualifier(&self) -> ::std::option::Option<&str> {
        self.qualifier.as_deref()
    }
    /// <p>Idempotent token used to identify the request. If you use the same token with multiple requests, the same response is returned. Use ClientToken to prevent the same request from being processed more than once.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl StopRuntimeSessionInput {
    /// Creates a new builder-style object to manufacture [`StopRuntimeSessionInput`](crate::operation::stop_runtime_session::StopRuntimeSessionInput).
    pub fn builder() -> crate::operation::stop_runtime_session::builders::StopRuntimeSessionInputBuilder {
        crate::operation::stop_runtime_session::builders::StopRuntimeSessionInputBuilder::default()
    }
}

/// A builder for [`StopRuntimeSessionInput`](crate::operation::stop_runtime_session::StopRuntimeSessionInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct StopRuntimeSessionInputBuilder {
    pub(crate) runtime_session_id: ::std::option::Option<::std::string::String>,
    pub(crate) agent_runtime_arn: ::std::option::Option<::std::string::String>,
    pub(crate) qualifier: ::std::option::Option<::std::string::String>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
}
impl StopRuntimeSessionInputBuilder {
    /// <p>The ID of the session that you want to stop.</p>
    /// This field is required.
    pub fn runtime_session_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.runtime_session_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the session that you want to stop.</p>
    pub fn set_runtime_session_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.runtime_session_id = input;
        self
    }
    /// <p>The ID of the session that you want to stop.</p>
    pub fn get_runtime_session_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.runtime_session_id
    }
    /// <p>The ARN of the agent that contains the session that you want to stop.</p>
    /// This field is required.
    pub fn agent_runtime_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.agent_runtime_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the agent that contains the session that you want to stop.</p>
    pub fn set_agent_runtime_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.agent_runtime_arn = input;
        self
    }
    /// <p>The ARN of the agent that contains the session that you want to stop.</p>
    pub fn get_agent_runtime_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.agent_runtime_arn
    }
    /// <p>Optional qualifier to specify an agent alias, such as <code>prod</code>code&gt; or <code>dev</code>. If you don't provide a value, the DEFAULT alias is used.</p>
    pub fn qualifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.qualifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Optional qualifier to specify an agent alias, such as <code>prod</code>code&gt; or <code>dev</code>. If you don't provide a value, the DEFAULT alias is used.</p>
    pub fn set_qualifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.qualifier = input;
        self
    }
    /// <p>Optional qualifier to specify an agent alias, such as <code>prod</code>code&gt; or <code>dev</code>. If you don't provide a value, the DEFAULT alias is used.</p>
    pub fn get_qualifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.qualifier
    }
    /// <p>Idempotent token used to identify the request. If you use the same token with multiple requests, the same response is returned. Use ClientToken to prevent the same request from being processed more than once.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Idempotent token used to identify the request. If you use the same token with multiple requests, the same response is returned. Use ClientToken to prevent the same request from being processed more than once.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>Idempotent token used to identify the request. If you use the same token with multiple requests, the same response is returned. Use ClientToken to prevent the same request from being processed more than once.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Consumes the builder and constructs a [`StopRuntimeSessionInput`](crate::operation::stop_runtime_session::StopRuntimeSessionInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::stop_runtime_session::StopRuntimeSessionInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::stop_runtime_session::StopRuntimeSessionInput {
            runtime_session_id: self.runtime_session_id,
            agent_runtime_arn: self.agent_runtime_arn,
            qualifier: self.qualifier,
            client_token: self.client_token,
        })
    }
}
