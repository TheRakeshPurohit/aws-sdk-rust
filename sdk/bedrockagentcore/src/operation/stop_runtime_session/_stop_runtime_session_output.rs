// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StopRuntimeSessionOutput {
    /// <p>The ID of the session that you requested to stop.</p>
    pub runtime_session_id: ::std::option::Option<::std::string::String>,
    /// <p>The status code of the request to stop the session.</p>
    pub status_code: ::std::option::Option<i32>,
    _request_id: Option<String>,
}
impl StopRuntimeSessionOutput {
    /// <p>The ID of the session that you requested to stop.</p>
    pub fn runtime_session_id(&self) -> ::std::option::Option<&str> {
        self.runtime_session_id.as_deref()
    }
    /// <p>The status code of the request to stop the session.</p>
    pub fn status_code(&self) -> ::std::option::Option<i32> {
        self.status_code
    }
}
impl ::aws_types::request_id::RequestId for StopRuntimeSessionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl StopRuntimeSessionOutput {
    /// Creates a new builder-style object to manufacture [`StopRuntimeSessionOutput`](crate::operation::stop_runtime_session::StopRuntimeSessionOutput).
    pub fn builder() -> crate::operation::stop_runtime_session::builders::StopRuntimeSessionOutputBuilder {
        crate::operation::stop_runtime_session::builders::StopRuntimeSessionOutputBuilder::default()
    }
}

/// A builder for [`StopRuntimeSessionOutput`](crate::operation::stop_runtime_session::StopRuntimeSessionOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct StopRuntimeSessionOutputBuilder {
    pub(crate) runtime_session_id: ::std::option::Option<::std::string::String>,
    pub(crate) status_code: ::std::option::Option<i32>,
    _request_id: Option<String>,
}
impl StopRuntimeSessionOutputBuilder {
    /// <p>The ID of the session that you requested to stop.</p>
    pub fn runtime_session_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.runtime_session_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the session that you requested to stop.</p>
    pub fn set_runtime_session_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.runtime_session_id = input;
        self
    }
    /// <p>The ID of the session that you requested to stop.</p>
    pub fn get_runtime_session_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.runtime_session_id
    }
    /// <p>The status code of the request to stop the session.</p>
    pub fn status_code(mut self, input: i32) -> Self {
        self.status_code = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status code of the request to stop the session.</p>
    pub fn set_status_code(mut self, input: ::std::option::Option<i32>) -> Self {
        self.status_code = input;
        self
    }
    /// <p>The status code of the request to stop the session.</p>
    pub fn get_status_code(&self) -> &::std::option::Option<i32> {
        &self.status_code
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`StopRuntimeSessionOutput`](crate::operation::stop_runtime_session::StopRuntimeSessionOutput).
    pub fn build(self) -> crate::operation::stop_runtime_session::StopRuntimeSessionOutput {
        crate::operation::stop_runtime_session::StopRuntimeSessionOutput {
            runtime_session_id: self.runtime_session_id,
            status_code: self.status_code,
            _request_id: self._request_id,
        }
    }
}
