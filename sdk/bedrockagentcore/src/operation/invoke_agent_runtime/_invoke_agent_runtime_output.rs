// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
pub struct InvokeAgentRuntimeOutput {
    /// <p>The identifier of the runtime session.</p>
    pub runtime_session_id: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the MCP session.</p>
    pub mcp_session_id: ::std::option::Option<::std::string::String>,
    /// <p>The version of the MCP protocol being used.</p>
    pub mcp_protocol_version: ::std::option::Option<::std::string::String>,
    /// <p>The trace identifier for request tracking.</p>
    pub trace_id: ::std::option::Option<::std::string::String>,
    /// <p>The parent trace information for distributed tracing.</p>
    pub trace_parent: ::std::option::Option<::std::string::String>,
    /// <p>The trace state information for distributed tracing.</p>
    pub trace_state: ::std::option::Option<::std::string::String>,
    /// <p>Additional context information for distributed tracing.</p>
    pub baggage: ::std::option::Option<::std::string::String>,
    /// <p>The MIME type of the response data. This indicates how to interpret the response data. Common values include application/json for JSON data.</p>
    pub content_type: ::std::string::String,
    /// <p>The response data from the agent runtime. The format of this data depends on the specific agent configuration and the requested accept type. For most agents, this is a JSON object containing the agent's response to the user's request.</p>
    pub response: ::aws_smithy_types::byte_stream::ByteStream,
    /// <p>The HTTP status code of the response. A status code of 200 indicates a successful operation. Other status codes indicate various error conditions.</p>
    pub status_code: ::std::option::Option<i32>,
    _request_id: Option<String>,
}
impl InvokeAgentRuntimeOutput {
    /// <p>The identifier of the runtime session.</p>
    pub fn runtime_session_id(&self) -> ::std::option::Option<&str> {
        self.runtime_session_id.as_deref()
    }
    /// <p>The identifier of the MCP session.</p>
    pub fn mcp_session_id(&self) -> ::std::option::Option<&str> {
        self.mcp_session_id.as_deref()
    }
    /// <p>The version of the MCP protocol being used.</p>
    pub fn mcp_protocol_version(&self) -> ::std::option::Option<&str> {
        self.mcp_protocol_version.as_deref()
    }
    /// <p>The trace identifier for request tracking.</p>
    pub fn trace_id(&self) -> ::std::option::Option<&str> {
        self.trace_id.as_deref()
    }
    /// <p>The parent trace information for distributed tracing.</p>
    pub fn trace_parent(&self) -> ::std::option::Option<&str> {
        self.trace_parent.as_deref()
    }
    /// <p>The trace state information for distributed tracing.</p>
    pub fn trace_state(&self) -> ::std::option::Option<&str> {
        self.trace_state.as_deref()
    }
    /// <p>Additional context information for distributed tracing.</p>
    pub fn baggage(&self) -> ::std::option::Option<&str> {
        self.baggage.as_deref()
    }
    /// <p>The MIME type of the response data. This indicates how to interpret the response data. Common values include application/json for JSON data.</p>
    pub fn content_type(&self) -> &str {
        use std::ops::Deref;
        self.content_type.deref()
    }
    /// <p>The response data from the agent runtime. The format of this data depends on the specific agent configuration and the requested accept type. For most agents, this is a JSON object containing the agent's response to the user's request.</p>
    pub fn response(&self) -> &::aws_smithy_types::byte_stream::ByteStream {
        &self.response
    }
    /// <p>The HTTP status code of the response. A status code of 200 indicates a successful operation. Other status codes indicate various error conditions.</p>
    pub fn status_code(&self) -> ::std::option::Option<i32> {
        self.status_code
    }
}
impl ::std::fmt::Debug for InvokeAgentRuntimeOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("InvokeAgentRuntimeOutput");
        formatter.field("runtime_session_id", &self.runtime_session_id);
        formatter.field("mcp_session_id", &self.mcp_session_id);
        formatter.field("mcp_protocol_version", &self.mcp_protocol_version);
        formatter.field("trace_id", &self.trace_id);
        formatter.field("trace_parent", &self.trace_parent);
        formatter.field("trace_state", &self.trace_state);
        formatter.field("baggage", &self.baggage);
        formatter.field("content_type", &self.content_type);
        formatter.field("response", &"*** Sensitive Data Redacted ***");
        formatter.field("status_code", &self.status_code);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_types::request_id::RequestId for InvokeAgentRuntimeOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl InvokeAgentRuntimeOutput {
    /// Creates a new builder-style object to manufacture [`InvokeAgentRuntimeOutput`](crate::operation::invoke_agent_runtime::InvokeAgentRuntimeOutput).
    pub fn builder() -> crate::operation::invoke_agent_runtime::builders::InvokeAgentRuntimeOutputBuilder {
        crate::operation::invoke_agent_runtime::builders::InvokeAgentRuntimeOutputBuilder::default()
    }
}

/// A builder for [`InvokeAgentRuntimeOutput`](crate::operation::invoke_agent_runtime::InvokeAgentRuntimeOutput).
#[derive(::std::default::Default)]
#[non_exhaustive]
pub struct InvokeAgentRuntimeOutputBuilder {
    pub(crate) runtime_session_id: ::std::option::Option<::std::string::String>,
    pub(crate) mcp_session_id: ::std::option::Option<::std::string::String>,
    pub(crate) mcp_protocol_version: ::std::option::Option<::std::string::String>,
    pub(crate) trace_id: ::std::option::Option<::std::string::String>,
    pub(crate) trace_parent: ::std::option::Option<::std::string::String>,
    pub(crate) trace_state: ::std::option::Option<::std::string::String>,
    pub(crate) baggage: ::std::option::Option<::std::string::String>,
    pub(crate) content_type: ::std::option::Option<::std::string::String>,
    pub(crate) response: ::std::option::Option<::aws_smithy_types::byte_stream::ByteStream>,
    pub(crate) status_code: ::std::option::Option<i32>,
    _request_id: Option<String>,
}
impl InvokeAgentRuntimeOutputBuilder {
    /// <p>The identifier of the runtime session.</p>
    pub fn runtime_session_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.runtime_session_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the runtime session.</p>
    pub fn set_runtime_session_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.runtime_session_id = input;
        self
    }
    /// <p>The identifier of the runtime session.</p>
    pub fn get_runtime_session_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.runtime_session_id
    }
    /// <p>The identifier of the MCP session.</p>
    pub fn mcp_session_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.mcp_session_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the MCP session.</p>
    pub fn set_mcp_session_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.mcp_session_id = input;
        self
    }
    /// <p>The identifier of the MCP session.</p>
    pub fn get_mcp_session_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.mcp_session_id
    }
    /// <p>The version of the MCP protocol being used.</p>
    pub fn mcp_protocol_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.mcp_protocol_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version of the MCP protocol being used.</p>
    pub fn set_mcp_protocol_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.mcp_protocol_version = input;
        self
    }
    /// <p>The version of the MCP protocol being used.</p>
    pub fn get_mcp_protocol_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.mcp_protocol_version
    }
    /// <p>The trace identifier for request tracking.</p>
    pub fn trace_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.trace_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The trace identifier for request tracking.</p>
    pub fn set_trace_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.trace_id = input;
        self
    }
    /// <p>The trace identifier for request tracking.</p>
    pub fn get_trace_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.trace_id
    }
    /// <p>The parent trace information for distributed tracing.</p>
    pub fn trace_parent(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.trace_parent = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The parent trace information for distributed tracing.</p>
    pub fn set_trace_parent(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.trace_parent = input;
        self
    }
    /// <p>The parent trace information for distributed tracing.</p>
    pub fn get_trace_parent(&self) -> &::std::option::Option<::std::string::String> {
        &self.trace_parent
    }
    /// <p>The trace state information for distributed tracing.</p>
    pub fn trace_state(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.trace_state = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The trace state information for distributed tracing.</p>
    pub fn set_trace_state(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.trace_state = input;
        self
    }
    /// <p>The trace state information for distributed tracing.</p>
    pub fn get_trace_state(&self) -> &::std::option::Option<::std::string::String> {
        &self.trace_state
    }
    /// <p>Additional context information for distributed tracing.</p>
    pub fn baggage(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.baggage = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Additional context information for distributed tracing.</p>
    pub fn set_baggage(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.baggage = input;
        self
    }
    /// <p>Additional context information for distributed tracing.</p>
    pub fn get_baggage(&self) -> &::std::option::Option<::std::string::String> {
        &self.baggage
    }
    /// <p>The MIME type of the response data. This indicates how to interpret the response data. Common values include application/json for JSON data.</p>
    /// This field is required.
    pub fn content_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.content_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The MIME type of the response data. This indicates how to interpret the response data. Common values include application/json for JSON data.</p>
    pub fn set_content_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.content_type = input;
        self
    }
    /// <p>The MIME type of the response data. This indicates how to interpret the response data. Common values include application/json for JSON data.</p>
    pub fn get_content_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.content_type
    }
    /// <p>The response data from the agent runtime. The format of this data depends on the specific agent configuration and the requested accept type. For most agents, this is a JSON object containing the agent's response to the user's request.</p>
    pub fn response(mut self, input: ::aws_smithy_types::byte_stream::ByteStream) -> Self {
        self.response = ::std::option::Option::Some(input);
        self
    }
    /// <p>The response data from the agent runtime. The format of this data depends on the specific agent configuration and the requested accept type. For most agents, this is a JSON object containing the agent's response to the user's request.</p>
    pub fn set_response(mut self, input: ::std::option::Option<::aws_smithy_types::byte_stream::ByteStream>) -> Self {
        self.response = input;
        self
    }
    /// <p>The response data from the agent runtime. The format of this data depends on the specific agent configuration and the requested accept type. For most agents, this is a JSON object containing the agent's response to the user's request.</p>
    pub fn get_response(&self) -> &::std::option::Option<::aws_smithy_types::byte_stream::ByteStream> {
        &self.response
    }
    /// <p>The HTTP status code of the response. A status code of 200 indicates a successful operation. Other status codes indicate various error conditions.</p>
    pub fn status_code(mut self, input: i32) -> Self {
        self.status_code = ::std::option::Option::Some(input);
        self
    }
    /// <p>The HTTP status code of the response. A status code of 200 indicates a successful operation. Other status codes indicate various error conditions.</p>
    pub fn set_status_code(mut self, input: ::std::option::Option<i32>) -> Self {
        self.status_code = input;
        self
    }
    /// <p>The HTTP status code of the response. A status code of 200 indicates a successful operation. Other status codes indicate various error conditions.</p>
    pub fn get_status_code(&self) -> &::std::option::Option<i32> {
        &self.status_code
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`InvokeAgentRuntimeOutput`](crate::operation::invoke_agent_runtime::InvokeAgentRuntimeOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`content_type`](crate::operation::invoke_agent_runtime::builders::InvokeAgentRuntimeOutputBuilder::content_type)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::invoke_agent_runtime::InvokeAgentRuntimeOutput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::invoke_agent_runtime::InvokeAgentRuntimeOutput {
            runtime_session_id: self.runtime_session_id,
            mcp_session_id: self.mcp_session_id,
            mcp_protocol_version: self.mcp_protocol_version,
            trace_id: self.trace_id,
            trace_parent: self.trace_parent,
            trace_state: self.trace_state,
            baggage: self.baggage,
            content_type: self.content_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "content_type",
                    "content_type was not specified but it is required when building InvokeAgentRuntimeOutput",
                )
            })?,
            response: self.response.unwrap_or_default(),
            status_code: self.status_code,
            _request_id: self._request_id,
        })
    }
}
impl ::std::fmt::Debug for InvokeAgentRuntimeOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("InvokeAgentRuntimeOutputBuilder");
        formatter.field("runtime_session_id", &self.runtime_session_id);
        formatter.field("mcp_session_id", &self.mcp_session_id);
        formatter.field("mcp_protocol_version", &self.mcp_protocol_version);
        formatter.field("trace_id", &self.trace_id);
        formatter.field("trace_parent", &self.trace_parent);
        formatter.field("trace_state", &self.trace_state);
        formatter.field("baggage", &self.baggage);
        formatter.field("content_type", &self.content_type);
        formatter.field("response", &"*** Sensitive Data Redacted ***");
        formatter.field("status_code", &self.status_code);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
