// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub struct InvokeCodeInterpreterOutput {
    /// <p>The identifier of the code interpreter session.</p>
    pub session_id: ::std::option::Option<::std::string::String>,
    /// <p>The stream containing the results of the code execution. This includes output, errors, and execution status.</p>
    pub stream:
        crate::event_receiver::EventReceiver<crate::types::CodeInterpreterStreamOutput, crate::types::error::CodeInterpreterStreamOutputError>,
    _request_id: Option<String>,
}
impl InvokeCodeInterpreterOutput {
    /// <p>The identifier of the code interpreter session.</p>
    pub fn session_id(&self) -> ::std::option::Option<&str> {
        self.session_id.as_deref()
    }
    /// <p>The stream containing the results of the code execution. This includes output, errors, and execution status.</p>
    pub fn stream(
        &self,
    ) -> &crate::event_receiver::EventReceiver<crate::types::CodeInterpreterStreamOutput, crate::types::error::CodeInterpreterStreamOutputError> {
        &self.stream
    }
}
impl ::aws_types::request_id::RequestId for InvokeCodeInterpreterOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl InvokeCodeInterpreterOutput {
    /// Creates a new builder-style object to manufacture [`InvokeCodeInterpreterOutput`](crate::operation::invoke_code_interpreter::InvokeCodeInterpreterOutput).
    pub fn builder() -> crate::operation::invoke_code_interpreter::builders::InvokeCodeInterpreterOutputBuilder {
        crate::operation::invoke_code_interpreter::builders::InvokeCodeInterpreterOutputBuilder::default()
    }
}

/// A builder for [`InvokeCodeInterpreterOutput`](crate::operation::invoke_code_interpreter::InvokeCodeInterpreterOutput).
#[derive(::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct InvokeCodeInterpreterOutputBuilder {
    pub(crate) session_id: ::std::option::Option<::std::string::String>,
    pub(crate) stream: ::std::option::Option<
        crate::event_receiver::EventReceiver<crate::types::CodeInterpreterStreamOutput, crate::types::error::CodeInterpreterStreamOutputError>,
    >,
    _request_id: Option<String>,
}
impl InvokeCodeInterpreterOutputBuilder {
    /// <p>The identifier of the code interpreter session.</p>
    pub fn session_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.session_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the code interpreter session.</p>
    pub fn set_session_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.session_id = input;
        self
    }
    /// <p>The identifier of the code interpreter session.</p>
    pub fn get_session_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.session_id
    }
    /// <p>The stream containing the results of the code execution. This includes output, errors, and execution status.</p>
    /// This field is required.
    pub fn stream(
        mut self,
        input: crate::event_receiver::EventReceiver<crate::types::CodeInterpreterStreamOutput, crate::types::error::CodeInterpreterStreamOutputError>,
    ) -> Self {
        self.stream = ::std::option::Option::Some(input);
        self
    }
    /// <p>The stream containing the results of the code execution. This includes output, errors, and execution status.</p>
    pub fn set_stream(
        mut self,
        input: ::std::option::Option<
            crate::event_receiver::EventReceiver<crate::types::CodeInterpreterStreamOutput, crate::types::error::CodeInterpreterStreamOutputError>,
        >,
    ) -> Self {
        self.stream = input;
        self
    }
    /// <p>The stream containing the results of the code execution. This includes output, errors, and execution status.</p>
    pub fn get_stream(
        &self,
    ) -> &::std::option::Option<
        crate::event_receiver::EventReceiver<crate::types::CodeInterpreterStreamOutput, crate::types::error::CodeInterpreterStreamOutputError>,
    > {
        &self.stream
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`InvokeCodeInterpreterOutput`](crate::operation::invoke_code_interpreter::InvokeCodeInterpreterOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`stream`](crate::operation::invoke_code_interpreter::builders::InvokeCodeInterpreterOutputBuilder::stream)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::invoke_code_interpreter::InvokeCodeInterpreterOutput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::invoke_code_interpreter::InvokeCodeInterpreterOutput {
            session_id: self.session_id,
            stream: self.stream.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "stream",
                    "stream was not specified but it is required when building InvokeCodeInterpreterOutput",
                )
            })?,
            _request_id: self._request_id,
        })
    }
}
