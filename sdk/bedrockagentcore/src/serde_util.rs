// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn service_exception_correct_errors(
    mut builder: crate::types::error::builders::ServiceExceptionBuilder,
) -> crate::types::error::builders::ServiceExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn throttled_exception_correct_errors(
    mut builder: crate::types::error::builders::ThrottledExceptionBuilder,
) -> crate::types::error::builders::ThrottledExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_correct_errors(
    mut builder: crate::types::error::builders::ValidationExceptionBuilder,
) -> crate::types::error::builders::ValidationExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.reason.is_none() {
        builder.reason = "no value was set".parse::<crate::types::ValidationExceptionReason>().ok()
    }
    builder
}

pub(crate) fn batch_create_memory_records_output_output_correct_errors(
    mut builder: crate::operation::batch_create_memory_records::builders::BatchCreateMemoryRecordsOutputBuilder,
) -> crate::operation::batch_create_memory_records::builders::BatchCreateMemoryRecordsOutputBuilder {
    if builder.successful_records.is_none() {
        builder.successful_records = Some(Default::default())
    }
    if builder.failed_records.is_none() {
        builder.failed_records = Some(Default::default())
    }
    builder
}

pub(crate) fn batch_delete_memory_records_output_output_correct_errors(
    mut builder: crate::operation::batch_delete_memory_records::builders::BatchDeleteMemoryRecordsOutputBuilder,
) -> crate::operation::batch_delete_memory_records::builders::BatchDeleteMemoryRecordsOutputBuilder {
    if builder.successful_records.is_none() {
        builder.successful_records = Some(Default::default())
    }
    if builder.failed_records.is_none() {
        builder.failed_records = Some(Default::default())
    }
    builder
}

pub(crate) fn batch_update_memory_records_output_output_correct_errors(
    mut builder: crate::operation::batch_update_memory_records::builders::BatchUpdateMemoryRecordsOutputBuilder,
) -> crate::operation::batch_update_memory_records::builders::BatchUpdateMemoryRecordsOutputBuilder {
    if builder.successful_records.is_none() {
        builder.successful_records = Some(Default::default())
    }
    if builder.failed_records.is_none() {
        builder.failed_records = Some(Default::default())
    }
    builder
}

pub(crate) fn invalid_input_exception_correct_errors(
    mut builder: crate::types::error::builders::InvalidInputExceptionBuilder,
) -> crate::types::error::builders::InvalidInputExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn create_event_output_output_correct_errors(
    mut builder: crate::operation::create_event::builders::CreateEventOutputBuilder,
) -> crate::operation::create_event::builders::CreateEventOutputBuilder {
    if builder.event.is_none() {
        builder.event = {
            let builder = crate::types::builders::EventBuilder::default();
            crate::serde_util::event_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn delete_event_output_output_correct_errors(
    mut builder: crate::operation::delete_event::builders::DeleteEventOutputBuilder,
) -> crate::operation::delete_event::builders::DeleteEventOutputBuilder {
    if builder.event_id.is_none() {
        builder.event_id = Some(Default::default())
    }
    builder
}

pub(crate) fn delete_memory_record_output_output_correct_errors(
    mut builder: crate::operation::delete_memory_record::builders::DeleteMemoryRecordOutputBuilder,
) -> crate::operation::delete_memory_record::builders::DeleteMemoryRecordOutputBuilder {
    if builder.memory_record_id.is_none() {
        builder.memory_record_id = Some(Default::default())
    }
    builder
}

pub(crate) fn get_agent_card_output_output_correct_errors(
    mut builder: crate::operation::get_agent_card::builders::GetAgentCardOutputBuilder,
) -> crate::operation::get_agent_card::builders::GetAgentCardOutputBuilder {
    if builder.agent_card.is_none() {
        builder.agent_card = Some(Default::default())
    }
    builder
}

pub(crate) fn get_browser_session_output_output_correct_errors(
    mut builder: crate::operation::get_browser_session::builders::GetBrowserSessionOutputBuilder,
) -> crate::operation::get_browser_session::builders::GetBrowserSessionOutputBuilder {
    if builder.browser_identifier.is_none() {
        builder.browser_identifier = Some(Default::default())
    }
    if builder.session_id.is_none() {
        builder.session_id = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn get_code_interpreter_session_output_output_correct_errors(
    mut builder: crate::operation::get_code_interpreter_session::builders::GetCodeInterpreterSessionOutputBuilder,
) -> crate::operation::get_code_interpreter_session::builders::GetCodeInterpreterSessionOutputBuilder {
    if builder.code_interpreter_identifier.is_none() {
        builder.code_interpreter_identifier = Some(Default::default())
    }
    if builder.session_id.is_none() {
        builder.session_id = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn get_event_output_output_correct_errors(
    mut builder: crate::operation::get_event::builders::GetEventOutputBuilder,
) -> crate::operation::get_event::builders::GetEventOutputBuilder {
    if builder.event.is_none() {
        builder.event = {
            let builder = crate::types::builders::EventBuilder::default();
            crate::serde_util::event_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_memory_record_output_output_correct_errors(
    mut builder: crate::operation::get_memory_record::builders::GetMemoryRecordOutputBuilder,
) -> crate::operation::get_memory_record::builders::GetMemoryRecordOutputBuilder {
    if builder.memory_record.is_none() {
        builder.memory_record = {
            let builder = crate::types::builders::MemoryRecordBuilder::default();
            crate::serde_util::memory_record_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_resource_api_key_output_output_correct_errors(
    mut builder: crate::operation::get_resource_api_key::builders::GetResourceApiKeyOutputBuilder,
) -> crate::operation::get_resource_api_key::builders::GetResourceApiKeyOutputBuilder {
    if builder.api_key.is_none() {
        builder.api_key = Some(Default::default())
    }
    builder
}

pub(crate) fn get_workload_access_token_output_output_correct_errors(
    mut builder: crate::operation::get_workload_access_token::builders::GetWorkloadAccessTokenOutputBuilder,
) -> crate::operation::get_workload_access_token::builders::GetWorkloadAccessTokenOutputBuilder {
    if builder.workload_access_token.is_none() {
        builder.workload_access_token = Some(Default::default())
    }
    builder
}

pub(crate) fn get_workload_access_token_for_jwt_output_output_correct_errors(
    mut builder: crate::operation::get_workload_access_token_for_jwt::builders::GetWorkloadAccessTokenForJwtOutputBuilder,
) -> crate::operation::get_workload_access_token_for_jwt::builders::GetWorkloadAccessTokenForJwtOutputBuilder {
    if builder.workload_access_token.is_none() {
        builder.workload_access_token = Some(Default::default())
    }
    builder
}

pub(crate) fn get_workload_access_token_for_user_id_output_output_correct_errors(
    mut builder: crate::operation::get_workload_access_token_for_user_id::builders::GetWorkloadAccessTokenForUserIdOutputBuilder,
) -> crate::operation::get_workload_access_token_for_user_id::builders::GetWorkloadAccessTokenForUserIdOutputBuilder {
    if builder.workload_access_token.is_none() {
        builder.workload_access_token = Some(Default::default())
    }
    builder
}

pub(crate) fn invoke_agent_runtime_output_output_correct_errors(
    mut builder: crate::operation::invoke_agent_runtime::builders::InvokeAgentRuntimeOutputBuilder,
) -> crate::operation::invoke_agent_runtime::builders::InvokeAgentRuntimeOutputBuilder {
    if builder.content_type.is_none() {
        builder.content_type = Some(Default::default())
    }
    builder
}

pub(crate) fn list_actors_output_output_correct_errors(
    mut builder: crate::operation::list_actors::builders::ListActorsOutputBuilder,
) -> crate::operation::list_actors::builders::ListActorsOutputBuilder {
    if builder.actor_summaries.is_none() {
        builder.actor_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_browser_sessions_output_output_correct_errors(
    mut builder: crate::operation::list_browser_sessions::builders::ListBrowserSessionsOutputBuilder,
) -> crate::operation::list_browser_sessions::builders::ListBrowserSessionsOutputBuilder {
    if builder.items.is_none() {
        builder.items = Some(Default::default())
    }
    builder
}

pub(crate) fn list_code_interpreter_sessions_output_output_correct_errors(
    mut builder: crate::operation::list_code_interpreter_sessions::builders::ListCodeInterpreterSessionsOutputBuilder,
) -> crate::operation::list_code_interpreter_sessions::builders::ListCodeInterpreterSessionsOutputBuilder {
    if builder.items.is_none() {
        builder.items = Some(Default::default())
    }
    builder
}

pub(crate) fn list_events_output_output_correct_errors(
    mut builder: crate::operation::list_events::builders::ListEventsOutputBuilder,
) -> crate::operation::list_events::builders::ListEventsOutputBuilder {
    if builder.events.is_none() {
        builder.events = Some(Default::default())
    }
    builder
}

pub(crate) fn list_memory_records_output_output_correct_errors(
    mut builder: crate::operation::list_memory_records::builders::ListMemoryRecordsOutputBuilder,
) -> crate::operation::list_memory_records::builders::ListMemoryRecordsOutputBuilder {
    if builder.memory_record_summaries.is_none() {
        builder.memory_record_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_sessions_output_output_correct_errors(
    mut builder: crate::operation::list_sessions::builders::ListSessionsOutputBuilder,
) -> crate::operation::list_sessions::builders::ListSessionsOutputBuilder {
    if builder.session_summaries.is_none() {
        builder.session_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn retrieve_memory_records_output_output_correct_errors(
    mut builder: crate::operation::retrieve_memory_records::builders::RetrieveMemoryRecordsOutputBuilder,
) -> crate::operation::retrieve_memory_records::builders::RetrieveMemoryRecordsOutputBuilder {
    if builder.memory_record_summaries.is_none() {
        builder.memory_record_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn start_browser_session_output_output_correct_errors(
    mut builder: crate::operation::start_browser_session::builders::StartBrowserSessionOutputBuilder,
) -> crate::operation::start_browser_session::builders::StartBrowserSessionOutputBuilder {
    if builder.browser_identifier.is_none() {
        builder.browser_identifier = Some(Default::default())
    }
    if builder.session_id.is_none() {
        builder.session_id = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn start_code_interpreter_session_output_output_correct_errors(
    mut builder: crate::operation::start_code_interpreter_session::builders::StartCodeInterpreterSessionOutputBuilder,
) -> crate::operation::start_code_interpreter_session::builders::StartCodeInterpreterSessionOutputBuilder {
    if builder.code_interpreter_identifier.is_none() {
        builder.code_interpreter_identifier = Some(Default::default())
    }
    if builder.session_id.is_none() {
        builder.session_id = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn stop_browser_session_output_output_correct_errors(
    mut builder: crate::operation::stop_browser_session::builders::StopBrowserSessionOutputBuilder,
) -> crate::operation::stop_browser_session::builders::StopBrowserSessionOutputBuilder {
    if builder.browser_identifier.is_none() {
        builder.browser_identifier = Some(Default::default())
    }
    if builder.session_id.is_none() {
        builder.session_id = Some(Default::default())
    }
    if builder.last_updated_at.is_none() {
        builder.last_updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn stop_code_interpreter_session_output_output_correct_errors(
    mut builder: crate::operation::stop_code_interpreter_session::builders::StopCodeInterpreterSessionOutputBuilder,
) -> crate::operation::stop_code_interpreter_session::builders::StopCodeInterpreterSessionOutputBuilder {
    if builder.code_interpreter_identifier.is_none() {
        builder.code_interpreter_identifier = Some(Default::default())
    }
    if builder.session_id.is_none() {
        builder.session_id = Some(Default::default())
    }
    if builder.last_updated_at.is_none() {
        builder.last_updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn update_browser_stream_output_output_correct_errors(
    mut builder: crate::operation::update_browser_stream::builders::UpdateBrowserStreamOutputBuilder,
) -> crate::operation::update_browser_stream::builders::UpdateBrowserStreamOutputBuilder {
    if builder.browser_identifier.is_none() {
        builder.browser_identifier = Some(Default::default())
    }
    if builder.session_id.is_none() {
        builder.session_id = Some(Default::default())
    }
    if builder.streams.is_none() {
        builder.streams = {
            let builder = crate::types::builders::BrowserSessionStreamBuilder::default();
            Some(crate::serde_util::browser_session_stream_correct_errors(builder).build())
        }
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn event_correct_errors(mut builder: crate::types::builders::EventBuilder) -> crate::types::builders::EventBuilder {
    if builder.memory_id.is_none() {
        builder.memory_id = Some(Default::default())
    }
    if builder.actor_id.is_none() {
        builder.actor_id = Some(Default::default())
    }
    if builder.session_id.is_none() {
        builder.session_id = Some(Default::default())
    }
    if builder.event_id.is_none() {
        builder.event_id = Some(Default::default())
    }
    if builder.event_timestamp.is_none() {
        builder.event_timestamp = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.payload.is_none() {
        builder.payload = Some(Default::default())
    }
    builder
}

pub(crate) fn memory_record_correct_errors(mut builder: crate::types::builders::MemoryRecordBuilder) -> crate::types::builders::MemoryRecordBuilder {
    if builder.memory_record_id.is_none() {
        builder.memory_record_id = Some(Default::default())
    }
    if builder.content.is_none() {
        builder.content = Some(crate::types::MemoryContent::Unknown)
    }
    if builder.memory_strategy_id.is_none() {
        builder.memory_strategy_id = Some(Default::default())
    }
    if builder.namespaces.is_none() {
        builder.namespaces = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn browser_session_stream_correct_errors(
    mut builder: crate::types::builders::BrowserSessionStreamBuilder,
) -> crate::types::builders::BrowserSessionStreamBuilder {
    if builder.automation_stream.is_none() {
        builder.automation_stream = {
            let builder = crate::types::builders::AutomationStreamBuilder::default();
            crate::serde_util::automation_stream_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn view_port_correct_errors(mut builder: crate::types::builders::ViewPortBuilder) -> crate::types::builders::ViewPortBuilder {
    if builder.width.is_none() {
        builder.width = Some(Default::default())
    }
    if builder.height.is_none() {
        builder.height = Some(Default::default())
    }
    builder
}

pub(crate) fn automation_stream_correct_errors(
    mut builder: crate::types::builders::AutomationStreamBuilder,
) -> crate::types::builders::AutomationStreamBuilder {
    if builder.stream_endpoint.is_none() {
        builder.stream_endpoint = Some(Default::default())
    }
    if builder.stream_status.is_none() {
        builder.stream_status = "no value was set".parse::<crate::types::AutomationStreamStatus>().ok()
    }
    builder
}

pub(crate) fn actor_summary_correct_errors(mut builder: crate::types::builders::ActorSummaryBuilder) -> crate::types::builders::ActorSummaryBuilder {
    if builder.actor_id.is_none() {
        builder.actor_id = Some(Default::default())
    }
    builder
}

pub(crate) fn branch_correct_errors(mut builder: crate::types::builders::BranchBuilder) -> crate::types::builders::BranchBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn browser_session_summary_correct_errors(
    mut builder: crate::types::builders::BrowserSessionSummaryBuilder,
) -> crate::types::builders::BrowserSessionSummaryBuilder {
    if builder.browser_identifier.is_none() {
        builder.browser_identifier = Some(Default::default())
    }
    if builder.session_id.is_none() {
        builder.session_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::BrowserSessionStatus>().ok()
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn code_interpreter_session_summary_correct_errors(
    mut builder: crate::types::builders::CodeInterpreterSessionSummaryBuilder,
) -> crate::types::builders::CodeInterpreterSessionSummaryBuilder {
    if builder.code_interpreter_identifier.is_none() {
        builder.code_interpreter_identifier = Some(Default::default())
    }
    if builder.session_id.is_none() {
        builder.session_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::CodeInterpreterSessionStatus>().ok()
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn memory_record_output_correct_errors(
    mut builder: crate::types::builders::MemoryRecordOutputBuilder,
) -> crate::types::builders::MemoryRecordOutputBuilder {
    if builder.memory_record_id.is_none() {
        builder.memory_record_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::MemoryRecordStatus>().ok()
    }
    builder
}

pub(crate) fn memory_record_summary_correct_errors(
    mut builder: crate::types::builders::MemoryRecordSummaryBuilder,
) -> crate::types::builders::MemoryRecordSummaryBuilder {
    if builder.memory_record_id.is_none() {
        builder.memory_record_id = Some(Default::default())
    }
    if builder.content.is_none() {
        builder.content = Some(crate::types::MemoryContent::Unknown)
    }
    if builder.memory_strategy_id.is_none() {
        builder.memory_strategy_id = Some(Default::default())
    }
    if builder.namespaces.is_none() {
        builder.namespaces = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn session_summary_correct_errors(
    mut builder: crate::types::builders::SessionSummaryBuilder,
) -> crate::types::builders::SessionSummaryBuilder {
    if builder.session_id.is_none() {
        builder.session_id = Some(Default::default())
    }
    if builder.actor_id.is_none() {
        builder.actor_id = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn validation_exception_field_correct_errors(
    mut builder: crate::types::builders::ValidationExceptionFieldBuilder,
) -> crate::types::builders::ValidationExceptionFieldBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn code_interpreter_result_correct_errors(
    mut builder: crate::types::builders::CodeInterpreterResultBuilder,
) -> crate::types::builders::CodeInterpreterResultBuilder {
    if builder.content.is_none() {
        builder.content = Some(Default::default())
    }
    builder
}

pub(crate) fn conversational_correct_errors(
    mut builder: crate::types::builders::ConversationalBuilder,
) -> crate::types::builders::ConversationalBuilder {
    if builder.content.is_none() {
        builder.content = Some(crate::types::Content::Unknown)
    }
    if builder.role.is_none() {
        builder.role = "no value was set".parse::<crate::types::Role>().ok()
    }
    builder
}

pub(crate) fn content_block_correct_errors(mut builder: crate::types::builders::ContentBlockBuilder) -> crate::types::builders::ContentBlockBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::ContentBlockType>().ok()
    }
    builder
}

pub(crate) fn resource_content_correct_errors(
    mut builder: crate::types::builders::ResourceContentBuilder,
) -> crate::types::builders::ResourceContentBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::ResourceContentType>().ok()
    }
    builder
}
