// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration for a stream that provides a visual representation of a browser session in Amazon Bedrock. This stream enables agents to observe the current state of the browser, including rendered web pages, visual elements, and the results of interactions.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LiveViewStream {
    /// <p>The endpoint URL for the live view stream. This URL is used to establish a connection to receive visual updates from the browser session.</p>
    pub stream_endpoint: ::std::option::Option<::std::string::String>,
}
impl LiveViewStream {
    /// <p>The endpoint URL for the live view stream. This URL is used to establish a connection to receive visual updates from the browser session.</p>
    pub fn stream_endpoint(&self) -> ::std::option::Option<&str> {
        self.stream_endpoint.as_deref()
    }
}
impl LiveViewStream {
    /// Creates a new builder-style object to manufacture [`LiveViewStream`](crate::types::LiveViewStream).
    pub fn builder() -> crate::types::builders::LiveViewStreamBuilder {
        crate::types::builders::LiveViewStreamBuilder::default()
    }
}

/// A builder for [`LiveViewStream`](crate::types::LiveViewStream).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct LiveViewStreamBuilder {
    pub(crate) stream_endpoint: ::std::option::Option<::std::string::String>,
}
impl LiveViewStreamBuilder {
    /// <p>The endpoint URL for the live view stream. This URL is used to establish a connection to receive visual updates from the browser session.</p>
    pub fn stream_endpoint(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.stream_endpoint = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The endpoint URL for the live view stream. This URL is used to establish a connection to receive visual updates from the browser session.</p>
    pub fn set_stream_endpoint(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.stream_endpoint = input;
        self
    }
    /// <p>The endpoint URL for the live view stream. This URL is used to establish a connection to receive visual updates from the browser session.</p>
    pub fn get_stream_endpoint(&self) -> &::std::option::Option<::std::string::String> {
        &self.stream_endpoint
    }
    /// Consumes the builder and constructs a [`LiveViewStream`](crate::types::LiveViewStream).
    pub fn build(self) -> crate::types::LiveViewStream {
        crate::types::LiveViewStream {
            stream_endpoint: self.stream_endpoint,
        }
    }
}
