// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about an event in a memory store.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Event {
    /// <p>The identifier of the memory store containing the event.</p>
    pub memory_id: ::std::string::String,
    /// <p>The identifier of the actor associated with the event.</p>
    pub actor_id: ::std::string::String,
    /// <p>The identifier of the session containing the event.</p>
    pub session_id: ::std::string::String,
    /// <p>The unique identifier of the event.</p>
    pub event_id: ::std::string::String,
    /// <p>The timestamp when the event occurred.</p>
    pub event_timestamp: ::aws_smithy_types::DateTime,
    /// <p>The content payload of the event.</p>
    pub payload: ::std::vec::Vec<crate::types::PayloadType>,
    /// <p>The branch information for the event.</p>
    pub branch: ::std::option::Option<crate::types::Branch>,
}
impl Event {
    /// <p>The identifier of the memory store containing the event.</p>
    pub fn memory_id(&self) -> &str {
        use std::ops::Deref;
        self.memory_id.deref()
    }
    /// <p>The identifier of the actor associated with the event.</p>
    pub fn actor_id(&self) -> &str {
        use std::ops::Deref;
        self.actor_id.deref()
    }
    /// <p>The identifier of the session containing the event.</p>
    pub fn session_id(&self) -> &str {
        use std::ops::Deref;
        self.session_id.deref()
    }
    /// <p>The unique identifier of the event.</p>
    pub fn event_id(&self) -> &str {
        use std::ops::Deref;
        self.event_id.deref()
    }
    /// <p>The timestamp when the event occurred.</p>
    pub fn event_timestamp(&self) -> &::aws_smithy_types::DateTime {
        &self.event_timestamp
    }
    /// <p>The content payload of the event.</p>
    pub fn payload(&self) -> &[crate::types::PayloadType] {
        use std::ops::Deref;
        self.payload.deref()
    }
    /// <p>The branch information for the event.</p>
    pub fn branch(&self) -> ::std::option::Option<&crate::types::Branch> {
        self.branch.as_ref()
    }
}
impl Event {
    /// Creates a new builder-style object to manufacture [`Event`](crate::types::Event).
    pub fn builder() -> crate::types::builders::EventBuilder {
        crate::types::builders::EventBuilder::default()
    }
}

/// A builder for [`Event`](crate::types::Event).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct EventBuilder {
    pub(crate) memory_id: ::std::option::Option<::std::string::String>,
    pub(crate) actor_id: ::std::option::Option<::std::string::String>,
    pub(crate) session_id: ::std::option::Option<::std::string::String>,
    pub(crate) event_id: ::std::option::Option<::std::string::String>,
    pub(crate) event_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) payload: ::std::option::Option<::std::vec::Vec<crate::types::PayloadType>>,
    pub(crate) branch: ::std::option::Option<crate::types::Branch>,
}
impl EventBuilder {
    /// <p>The identifier of the memory store containing the event.</p>
    /// This field is required.
    pub fn memory_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.memory_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the memory store containing the event.</p>
    pub fn set_memory_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.memory_id = input;
        self
    }
    /// <p>The identifier of the memory store containing the event.</p>
    pub fn get_memory_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.memory_id
    }
    /// <p>The identifier of the actor associated with the event.</p>
    /// This field is required.
    pub fn actor_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.actor_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the actor associated with the event.</p>
    pub fn set_actor_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.actor_id = input;
        self
    }
    /// <p>The identifier of the actor associated with the event.</p>
    pub fn get_actor_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.actor_id
    }
    /// <p>The identifier of the session containing the event.</p>
    /// This field is required.
    pub fn session_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.session_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the session containing the event.</p>
    pub fn set_session_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.session_id = input;
        self
    }
    /// <p>The identifier of the session containing the event.</p>
    pub fn get_session_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.session_id
    }
    /// <p>The unique identifier of the event.</p>
    /// This field is required.
    pub fn event_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.event_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the event.</p>
    pub fn set_event_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.event_id = input;
        self
    }
    /// <p>The unique identifier of the event.</p>
    pub fn get_event_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.event_id
    }
    /// <p>The timestamp when the event occurred.</p>
    /// This field is required.
    pub fn event_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.event_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the event occurred.</p>
    pub fn set_event_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.event_timestamp = input;
        self
    }
    /// <p>The timestamp when the event occurred.</p>
    pub fn get_event_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.event_timestamp
    }
    /// Appends an item to `payload`.
    ///
    /// To override the contents of this collection use [`set_payload`](Self::set_payload).
    ///
    /// <p>The content payload of the event.</p>
    pub fn payload(mut self, input: crate::types::PayloadType) -> Self {
        let mut v = self.payload.unwrap_or_default();
        v.push(input);
        self.payload = ::std::option::Option::Some(v);
        self
    }
    /// <p>The content payload of the event.</p>
    pub fn set_payload(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::PayloadType>>) -> Self {
        self.payload = input;
        self
    }
    /// <p>The content payload of the event.</p>
    pub fn get_payload(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PayloadType>> {
        &self.payload
    }
    /// <p>The branch information for the event.</p>
    pub fn branch(mut self, input: crate::types::Branch) -> Self {
        self.branch = ::std::option::Option::Some(input);
        self
    }
    /// <p>The branch information for the event.</p>
    pub fn set_branch(mut self, input: ::std::option::Option<crate::types::Branch>) -> Self {
        self.branch = input;
        self
    }
    /// <p>The branch information for the event.</p>
    pub fn get_branch(&self) -> &::std::option::Option<crate::types::Branch> {
        &self.branch
    }
    /// Consumes the builder and constructs a [`Event`](crate::types::Event).
    /// This method will fail if any of the following fields are not set:
    /// - [`memory_id`](crate::types::builders::EventBuilder::memory_id)
    /// - [`actor_id`](crate::types::builders::EventBuilder::actor_id)
    /// - [`session_id`](crate::types::builders::EventBuilder::session_id)
    /// - [`event_id`](crate::types::builders::EventBuilder::event_id)
    /// - [`event_timestamp`](crate::types::builders::EventBuilder::event_timestamp)
    /// - [`payload`](crate::types::builders::EventBuilder::payload)
    pub fn build(self) -> ::std::result::Result<crate::types::Event, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::Event {
            memory_id: self.memory_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "memory_id",
                    "memory_id was not specified but it is required when building Event",
                )
            })?,
            actor_id: self.actor_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "actor_id",
                    "actor_id was not specified but it is required when building Event",
                )
            })?,
            session_id: self.session_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "session_id",
                    "session_id was not specified but it is required when building Event",
                )
            })?,
            event_id: self.event_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "event_id",
                    "event_id was not specified but it is required when building Event",
                )
            })?,
            event_timestamp: self.event_timestamp.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "event_timestamp",
                    "event_timestamp was not specified but it is required when building Event",
                )
            })?,
            payload: self.payload.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "payload",
                    "payload was not specified but it is required when building Event",
                )
            })?,
            branch: self.branch,
        })
    }
}
