// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The collection of arguments that specify the operation to perform and its parameters when invoking a tool in Amazon Bedrock. Different tools require different arguments, and this structure provides a flexible way to pass the appropriate arguments to each tool type.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ToolArguments {
    /// <p>The code to execute in a code interpreter session. This is the source code in the specified programming language that will be executed by the code interpreter.</p>
    pub code: ::std::option::Option<::std::string::String>,
    /// <p>The programming language of the code to execute. This tells the code interpreter which language runtime to use for execution. Common values include 'python', 'javascript', and 'r'.</p>
    pub language: ::std::option::Option<crate::types::ProgrammingLanguage>,
    /// <p>Whether to clear the context for the tool.</p>
    pub clear_context: ::std::option::Option<bool>,
    /// <p>The command to execute with the tool.</p>
    pub command: ::std::option::Option<::std::string::String>,
    /// <p>The path for the tool operation.</p>
    pub path: ::std::option::Option<::std::string::String>,
    /// <p>The paths for the tool operation.</p>
    pub paths: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The content for the tool operation.</p>
    pub content: ::std::option::Option<::std::vec::Vec<crate::types::InputContentBlock>>,
    /// <p>The directory path for the tool operation.</p>
    pub directory_path: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the task for the tool operation.</p>
    pub task_id: ::std::option::Option<::std::string::String>,
}
impl ToolArguments {
    /// <p>The code to execute in a code interpreter session. This is the source code in the specified programming language that will be executed by the code interpreter.</p>
    pub fn code(&self) -> ::std::option::Option<&str> {
        self.code.as_deref()
    }
    /// <p>The programming language of the code to execute. This tells the code interpreter which language runtime to use for execution. Common values include 'python', 'javascript', and 'r'.</p>
    pub fn language(&self) -> ::std::option::Option<&crate::types::ProgrammingLanguage> {
        self.language.as_ref()
    }
    /// <p>Whether to clear the context for the tool.</p>
    pub fn clear_context(&self) -> ::std::option::Option<bool> {
        self.clear_context
    }
    /// <p>The command to execute with the tool.</p>
    pub fn command(&self) -> ::std::option::Option<&str> {
        self.command.as_deref()
    }
    /// <p>The path for the tool operation.</p>
    pub fn path(&self) -> ::std::option::Option<&str> {
        self.path.as_deref()
    }
    /// <p>The paths for the tool operation.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.paths.is_none()`.
    pub fn paths(&self) -> &[::std::string::String] {
        self.paths.as_deref().unwrap_or_default()
    }
    /// <p>The content for the tool operation.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.content.is_none()`.
    pub fn content(&self) -> &[crate::types::InputContentBlock] {
        self.content.as_deref().unwrap_or_default()
    }
    /// <p>The directory path for the tool operation.</p>
    pub fn directory_path(&self) -> ::std::option::Option<&str> {
        self.directory_path.as_deref()
    }
    /// <p>The identifier of the task for the tool operation.</p>
    pub fn task_id(&self) -> ::std::option::Option<&str> {
        self.task_id.as_deref()
    }
}
impl ToolArguments {
    /// Creates a new builder-style object to manufacture [`ToolArguments`](crate::types::ToolArguments).
    pub fn builder() -> crate::types::builders::ToolArgumentsBuilder {
        crate::types::builders::ToolArgumentsBuilder::default()
    }
}

/// A builder for [`ToolArguments`](crate::types::ToolArguments).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ToolArgumentsBuilder {
    pub(crate) code: ::std::option::Option<::std::string::String>,
    pub(crate) language: ::std::option::Option<crate::types::ProgrammingLanguage>,
    pub(crate) clear_context: ::std::option::Option<bool>,
    pub(crate) command: ::std::option::Option<::std::string::String>,
    pub(crate) path: ::std::option::Option<::std::string::String>,
    pub(crate) paths: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) content: ::std::option::Option<::std::vec::Vec<crate::types::InputContentBlock>>,
    pub(crate) directory_path: ::std::option::Option<::std::string::String>,
    pub(crate) task_id: ::std::option::Option<::std::string::String>,
}
impl ToolArgumentsBuilder {
    /// <p>The code to execute in a code interpreter session. This is the source code in the specified programming language that will be executed by the code interpreter.</p>
    pub fn code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The code to execute in a code interpreter session. This is the source code in the specified programming language that will be executed by the code interpreter.</p>
    pub fn set_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.code = input;
        self
    }
    /// <p>The code to execute in a code interpreter session. This is the source code in the specified programming language that will be executed by the code interpreter.</p>
    pub fn get_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.code
    }
    /// <p>The programming language of the code to execute. This tells the code interpreter which language runtime to use for execution. Common values include 'python', 'javascript', and 'r'.</p>
    pub fn language(mut self, input: crate::types::ProgrammingLanguage) -> Self {
        self.language = ::std::option::Option::Some(input);
        self
    }
    /// <p>The programming language of the code to execute. This tells the code interpreter which language runtime to use for execution. Common values include 'python', 'javascript', and 'r'.</p>
    pub fn set_language(mut self, input: ::std::option::Option<crate::types::ProgrammingLanguage>) -> Self {
        self.language = input;
        self
    }
    /// <p>The programming language of the code to execute. This tells the code interpreter which language runtime to use for execution. Common values include 'python', 'javascript', and 'r'.</p>
    pub fn get_language(&self) -> &::std::option::Option<crate::types::ProgrammingLanguage> {
        &self.language
    }
    /// <p>Whether to clear the context for the tool.</p>
    pub fn clear_context(mut self, input: bool) -> Self {
        self.clear_context = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether to clear the context for the tool.</p>
    pub fn set_clear_context(mut self, input: ::std::option::Option<bool>) -> Self {
        self.clear_context = input;
        self
    }
    /// <p>Whether to clear the context for the tool.</p>
    pub fn get_clear_context(&self) -> &::std::option::Option<bool> {
        &self.clear_context
    }
    /// <p>The command to execute with the tool.</p>
    pub fn command(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.command = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The command to execute with the tool.</p>
    pub fn set_command(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.command = input;
        self
    }
    /// <p>The command to execute with the tool.</p>
    pub fn get_command(&self) -> &::std::option::Option<::std::string::String> {
        &self.command
    }
    /// <p>The path for the tool operation.</p>
    pub fn path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.path = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The path for the tool operation.</p>
    pub fn set_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.path = input;
        self
    }
    /// <p>The path for the tool operation.</p>
    pub fn get_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.path
    }
    /// Appends an item to `paths`.
    ///
    /// To override the contents of this collection use [`set_paths`](Self::set_paths).
    ///
    /// <p>The paths for the tool operation.</p>
    pub fn paths(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.paths.unwrap_or_default();
        v.push(input.into());
        self.paths = ::std::option::Option::Some(v);
        self
    }
    /// <p>The paths for the tool operation.</p>
    pub fn set_paths(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.paths = input;
        self
    }
    /// <p>The paths for the tool operation.</p>
    pub fn get_paths(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.paths
    }
    /// Appends an item to `content`.
    ///
    /// To override the contents of this collection use [`set_content`](Self::set_content).
    ///
    /// <p>The content for the tool operation.</p>
    pub fn content(mut self, input: crate::types::InputContentBlock) -> Self {
        let mut v = self.content.unwrap_or_default();
        v.push(input);
        self.content = ::std::option::Option::Some(v);
        self
    }
    /// <p>The content for the tool operation.</p>
    pub fn set_content(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::InputContentBlock>>) -> Self {
        self.content = input;
        self
    }
    /// <p>The content for the tool operation.</p>
    pub fn get_content(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::InputContentBlock>> {
        &self.content
    }
    /// <p>The directory path for the tool operation.</p>
    pub fn directory_path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.directory_path = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The directory path for the tool operation.</p>
    pub fn set_directory_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.directory_path = input;
        self
    }
    /// <p>The directory path for the tool operation.</p>
    pub fn get_directory_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.directory_path
    }
    /// <p>The identifier of the task for the tool operation.</p>
    pub fn task_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.task_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the task for the tool operation.</p>
    pub fn set_task_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.task_id = input;
        self
    }
    /// <p>The identifier of the task for the tool operation.</p>
    pub fn get_task_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.task_id
    }
    /// Consumes the builder and constructs a [`ToolArguments`](crate::types::ToolArguments).
    pub fn build(self) -> crate::types::ToolArguments {
        crate::types::ToolArguments {
            code: self.code,
            language: self.language,
            clear_context: self.clear_context,
            command: self.command,
            path: self.path,
            paths: self.paths,
            content: self.content,
            directory_path: self.directory_path,
            task_id: self.task_id,
        }
    }
}
