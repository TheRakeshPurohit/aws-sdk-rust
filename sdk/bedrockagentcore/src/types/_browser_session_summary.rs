// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A condensed representation of a browser session in Amazon Bedrock. This structure contains key information about a browser session, including identifiers, status, and timestamps, without the full details of the session configuration and streams.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BrowserSessionSummary {
    /// <p>The unique identifier of the browser associated with the session. This identifier specifies which browser environment is used for the session.</p>
    pub browser_identifier: ::std::string::String,
    /// <p>The unique identifier of the browser session. This identifier is used in operations that interact with the session.</p>
    pub session_id: ::std::string::String,
    /// <p>The name of the browser session. This name helps identify and manage the session.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The current status of the browser session. Possible values include ACTIVE, STOPPING, and STOPPED.</p>
    pub status: crate::types::BrowserSessionStatus,
    /// <p>The timestamp when the browser session was created. This value is in ISO 8601 format.</p>
    pub created_at: ::aws_smithy_types::DateTime,
    /// <p>The timestamp when the browser session was last updated. This value is in ISO 8601 format.</p>
    pub last_updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl BrowserSessionSummary {
    /// <p>The unique identifier of the browser associated with the session. This identifier specifies which browser environment is used for the session.</p>
    pub fn browser_identifier(&self) -> &str {
        use std::ops::Deref;
        self.browser_identifier.deref()
    }
    /// <p>The unique identifier of the browser session. This identifier is used in operations that interact with the session.</p>
    pub fn session_id(&self) -> &str {
        use std::ops::Deref;
        self.session_id.deref()
    }
    /// <p>The name of the browser session. This name helps identify and manage the session.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The current status of the browser session. Possible values include ACTIVE, STOPPING, and STOPPED.</p>
    pub fn status(&self) -> &crate::types::BrowserSessionStatus {
        &self.status
    }
    /// <p>The timestamp when the browser session was created. This value is in ISO 8601 format.</p>
    pub fn created_at(&self) -> &::aws_smithy_types::DateTime {
        &self.created_at
    }
    /// <p>The timestamp when the browser session was last updated. This value is in ISO 8601 format.</p>
    pub fn last_updated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_updated_at.as_ref()
    }
}
impl BrowserSessionSummary {
    /// Creates a new builder-style object to manufacture [`BrowserSessionSummary`](crate::types::BrowserSessionSummary).
    pub fn builder() -> crate::types::builders::BrowserSessionSummaryBuilder {
        crate::types::builders::BrowserSessionSummaryBuilder::default()
    }
}

/// A builder for [`BrowserSessionSummary`](crate::types::BrowserSessionSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct BrowserSessionSummaryBuilder {
    pub(crate) browser_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) session_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::BrowserSessionStatus>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl BrowserSessionSummaryBuilder {
    /// <p>The unique identifier of the browser associated with the session. This identifier specifies which browser environment is used for the session.</p>
    /// This field is required.
    pub fn browser_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.browser_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the browser associated with the session. This identifier specifies which browser environment is used for the session.</p>
    pub fn set_browser_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.browser_identifier = input;
        self
    }
    /// <p>The unique identifier of the browser associated with the session. This identifier specifies which browser environment is used for the session.</p>
    pub fn get_browser_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.browser_identifier
    }
    /// <p>The unique identifier of the browser session. This identifier is used in operations that interact with the session.</p>
    /// This field is required.
    pub fn session_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.session_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the browser session. This identifier is used in operations that interact with the session.</p>
    pub fn set_session_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.session_id = input;
        self
    }
    /// <p>The unique identifier of the browser session. This identifier is used in operations that interact with the session.</p>
    pub fn get_session_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.session_id
    }
    /// <p>The name of the browser session. This name helps identify and manage the session.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the browser session. This name helps identify and manage the session.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the browser session. This name helps identify and manage the session.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The current status of the browser session. Possible values include ACTIVE, STOPPING, and STOPPED.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::BrowserSessionStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the browser session. Possible values include ACTIVE, STOPPING, and STOPPED.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::BrowserSessionStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status of the browser session. Possible values include ACTIVE, STOPPING, and STOPPED.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::BrowserSessionStatus> {
        &self.status
    }
    /// <p>The timestamp when the browser session was created. This value is in ISO 8601 format.</p>
    /// This field is required.
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the browser session was created. This value is in ISO 8601 format.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The timestamp when the browser session was created. This value is in ISO 8601 format.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The timestamp when the browser session was last updated. This value is in ISO 8601 format.</p>
    pub fn last_updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the browser session was last updated. This value is in ISO 8601 format.</p>
    pub fn set_last_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated_at = input;
        self
    }
    /// <p>The timestamp when the browser session was last updated. This value is in ISO 8601 format.</p>
    pub fn get_last_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated_at
    }
    /// Consumes the builder and constructs a [`BrowserSessionSummary`](crate::types::BrowserSessionSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`browser_identifier`](crate::types::builders::BrowserSessionSummaryBuilder::browser_identifier)
    /// - [`session_id`](crate::types::builders::BrowserSessionSummaryBuilder::session_id)
    /// - [`status`](crate::types::builders::BrowserSessionSummaryBuilder::status)
    /// - [`created_at`](crate::types::builders::BrowserSessionSummaryBuilder::created_at)
    pub fn build(self) -> ::std::result::Result<crate::types::BrowserSessionSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::BrowserSessionSummary {
            browser_identifier: self.browser_identifier.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "browser_identifier",
                    "browser_identifier was not specified but it is required when building BrowserSessionSummary",
                )
            })?,
            session_id: self.session_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "session_id",
                    "session_id was not specified but it is required when building BrowserSessionSummary",
                )
            })?,
            name: self.name,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building BrowserSessionSummary",
                )
            })?,
            created_at: self.created_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_at",
                    "created_at was not specified but it is required when building BrowserSessionSummary",
                )
            })?,
            last_updated_at: self.last_updated_at,
        })
    }
}
