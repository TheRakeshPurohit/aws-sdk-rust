// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains output from a code interpreter stream.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum CodeInterpreterStreamOutput {
    /// <p>The output produced by executing code in a code interpreter session in Amazon Bedrock. This structure contains the results of code execution, including textual output, structured data, and error information. Agents use these results to generate responses that incorporate computation, data analysis, and visualization.</p>
    Result(crate::types::CodeInterpreterResult),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl CodeInterpreterStreamOutput {
    #[allow(irrefutable_let_patterns)]
    /// Tries to convert the enum instance into [`Result`](crate::types::CodeInterpreterStreamOutput::Result), extracting the inner [`CodeInterpreterResult`](crate::types::CodeInterpreterResult).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_result(&self) -> ::std::result::Result<&crate::types::CodeInterpreterResult, &Self> {
        if let CodeInterpreterStreamOutput::Result(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Result`](crate::types::CodeInterpreterStreamOutput::Result).
    pub fn is_result(&self) -> bool {
        self.as_result().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
