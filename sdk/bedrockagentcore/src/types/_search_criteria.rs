// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains search criteria for retrieving memory records.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct SearchCriteria {
    /// <p>The search query to use for finding relevant memory records.</p>
    pub search_query: ::std::string::String,
    /// <p>The memory strategy identifier to filter memory records by.</p>
    pub memory_strategy_id: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of top-scoring memory records to return. This value is used for semantic search ranking.</p>
    pub top_k: i32,
}
impl SearchCriteria {
    /// <p>The search query to use for finding relevant memory records.</p>
    pub fn search_query(&self) -> &str {
        use std::ops::Deref;
        self.search_query.deref()
    }
    /// <p>The memory strategy identifier to filter memory records by.</p>
    pub fn memory_strategy_id(&self) -> ::std::option::Option<&str> {
        self.memory_strategy_id.as_deref()
    }
    /// <p>The maximum number of top-scoring memory records to return. This value is used for semantic search ranking.</p>
    pub fn top_k(&self) -> i32 {
        self.top_k
    }
}
impl ::std::fmt::Debug for SearchCriteria {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("SearchCriteria");
        formatter.field("search_query", &"*** Sensitive Data Redacted ***");
        formatter.field("memory_strategy_id", &self.memory_strategy_id);
        formatter.field("top_k", &self.top_k);
        formatter.finish()
    }
}
impl SearchCriteria {
    /// Creates a new builder-style object to manufacture [`SearchCriteria`](crate::types::SearchCriteria).
    pub fn builder() -> crate::types::builders::SearchCriteriaBuilder {
        crate::types::builders::SearchCriteriaBuilder::default()
    }
}

/// A builder for [`SearchCriteria`](crate::types::SearchCriteria).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct SearchCriteriaBuilder {
    pub(crate) search_query: ::std::option::Option<::std::string::String>,
    pub(crate) memory_strategy_id: ::std::option::Option<::std::string::String>,
    pub(crate) top_k: ::std::option::Option<i32>,
}
impl SearchCriteriaBuilder {
    /// <p>The search query to use for finding relevant memory records.</p>
    /// This field is required.
    pub fn search_query(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.search_query = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The search query to use for finding relevant memory records.</p>
    pub fn set_search_query(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.search_query = input;
        self
    }
    /// <p>The search query to use for finding relevant memory records.</p>
    pub fn get_search_query(&self) -> &::std::option::Option<::std::string::String> {
        &self.search_query
    }
    /// <p>The memory strategy identifier to filter memory records by.</p>
    pub fn memory_strategy_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.memory_strategy_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The memory strategy identifier to filter memory records by.</p>
    pub fn set_memory_strategy_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.memory_strategy_id = input;
        self
    }
    /// <p>The memory strategy identifier to filter memory records by.</p>
    pub fn get_memory_strategy_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.memory_strategy_id
    }
    /// <p>The maximum number of top-scoring memory records to return. This value is used for semantic search ranking.</p>
    pub fn top_k(mut self, input: i32) -> Self {
        self.top_k = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of top-scoring memory records to return. This value is used for semantic search ranking.</p>
    pub fn set_top_k(mut self, input: ::std::option::Option<i32>) -> Self {
        self.top_k = input;
        self
    }
    /// <p>The maximum number of top-scoring memory records to return. This value is used for semantic search ranking.</p>
    pub fn get_top_k(&self) -> &::std::option::Option<i32> {
        &self.top_k
    }
    /// Consumes the builder and constructs a [`SearchCriteria`](crate::types::SearchCriteria).
    /// This method will fail if any of the following fields are not set:
    /// - [`search_query`](crate::types::builders::SearchCriteriaBuilder::search_query)
    pub fn build(self) -> ::std::result::Result<crate::types::SearchCriteria, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SearchCriteria {
            search_query: self.search_query.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "search_query",
                    "search_query was not specified but it is required when building SearchCriteria",
                )
            })?,
            memory_strategy_id: self.memory_strategy_id,
            top_k: self.top_k.unwrap_or(10),
        })
    }
}
impl ::std::fmt::Debug for SearchCriteriaBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("SearchCriteriaBuilder");
        formatter.field("search_query", &"*** Sensitive Data Redacted ***");
        formatter.field("memory_strategy_id", &self.memory_strategy_id);
        formatter.field("top_k", &self.top_k);
        formatter.finish()
    }
}
