// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Filter expression for retrieving events based on metadata associated with an event.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EventMetadataFilterExpression {
    /// <p>Left operand of the event metadata filter expression.</p>
    pub left: ::std::option::Option<crate::types::LeftExpression>,
    /// <p>Operator applied to the event metadata filter expression.</p>
    pub operator: crate::types::OperatorType,
    /// <p>Right operand of the event metadata filter expression.</p>
    pub right: ::std::option::Option<crate::types::RightExpression>,
}
impl EventMetadataFilterExpression {
    /// <p>Left operand of the event metadata filter expression.</p>
    pub fn left(&self) -> ::std::option::Option<&crate::types::LeftExpression> {
        self.left.as_ref()
    }
    /// <p>Operator applied to the event metadata filter expression.</p>
    pub fn operator(&self) -> &crate::types::OperatorType {
        &self.operator
    }
    /// <p>Right operand of the event metadata filter expression.</p>
    pub fn right(&self) -> ::std::option::Option<&crate::types::RightExpression> {
        self.right.as_ref()
    }
}
impl EventMetadataFilterExpression {
    /// Creates a new builder-style object to manufacture [`EventMetadataFilterExpression`](crate::types::EventMetadataFilterExpression).
    pub fn builder() -> crate::types::builders::EventMetadataFilterExpressionBuilder {
        crate::types::builders::EventMetadataFilterExpressionBuilder::default()
    }
}

/// A builder for [`EventMetadataFilterExpression`](crate::types::EventMetadataFilterExpression).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct EventMetadataFilterExpressionBuilder {
    pub(crate) left: ::std::option::Option<crate::types::LeftExpression>,
    pub(crate) operator: ::std::option::Option<crate::types::OperatorType>,
    pub(crate) right: ::std::option::Option<crate::types::RightExpression>,
}
impl EventMetadataFilterExpressionBuilder {
    /// <p>Left operand of the event metadata filter expression.</p>
    /// This field is required.
    pub fn left(mut self, input: crate::types::LeftExpression) -> Self {
        self.left = ::std::option::Option::Some(input);
        self
    }
    /// <p>Left operand of the event metadata filter expression.</p>
    pub fn set_left(mut self, input: ::std::option::Option<crate::types::LeftExpression>) -> Self {
        self.left = input;
        self
    }
    /// <p>Left operand of the event metadata filter expression.</p>
    pub fn get_left(&self) -> &::std::option::Option<crate::types::LeftExpression> {
        &self.left
    }
    /// <p>Operator applied to the event metadata filter expression.</p>
    /// This field is required.
    pub fn operator(mut self, input: crate::types::OperatorType) -> Self {
        self.operator = ::std::option::Option::Some(input);
        self
    }
    /// <p>Operator applied to the event metadata filter expression.</p>
    pub fn set_operator(mut self, input: ::std::option::Option<crate::types::OperatorType>) -> Self {
        self.operator = input;
        self
    }
    /// <p>Operator applied to the event metadata filter expression.</p>
    pub fn get_operator(&self) -> &::std::option::Option<crate::types::OperatorType> {
        &self.operator
    }
    /// <p>Right operand of the event metadata filter expression.</p>
    pub fn right(mut self, input: crate::types::RightExpression) -> Self {
        self.right = ::std::option::Option::Some(input);
        self
    }
    /// <p>Right operand of the event metadata filter expression.</p>
    pub fn set_right(mut self, input: ::std::option::Option<crate::types::RightExpression>) -> Self {
        self.right = input;
        self
    }
    /// <p>Right operand of the event metadata filter expression.</p>
    pub fn get_right(&self) -> &::std::option::Option<crate::types::RightExpression> {
        &self.right
    }
    /// Consumes the builder and constructs a [`EventMetadataFilterExpression`](crate::types::EventMetadataFilterExpression).
    /// This method will fail if any of the following fields are not set:
    /// - [`operator`](crate::types::builders::EventMetadataFilterExpressionBuilder::operator)
    pub fn build(self) -> ::std::result::Result<crate::types::EventMetadataFilterExpression, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::EventMetadataFilterExpression {
            left: self.left,
            operator: self.operator.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "operator",
                    "operator was not specified but it is required when building EventMetadataFilterExpression",
                )
            })?,
            right: self.right,
        })
    }
}
