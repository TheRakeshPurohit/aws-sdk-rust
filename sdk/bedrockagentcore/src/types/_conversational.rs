// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains conversational content for an event payload.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Conversational {
    /// <p>The content of the conversation message.</p>
    pub content: ::std::option::Option<crate::types::Content>,
    /// <p>The role of the participant in the conversation (for example, "user" or "assistant").</p>
    pub role: crate::types::Role,
}
impl Conversational {
    /// <p>The content of the conversation message.</p>
    pub fn content(&self) -> ::std::option::Option<&crate::types::Content> {
        self.content.as_ref()
    }
    /// <p>The role of the participant in the conversation (for example, "user" or "assistant").</p>
    pub fn role(&self) -> &crate::types::Role {
        &self.role
    }
}
impl Conversational {
    /// Creates a new builder-style object to manufacture [`Conversational`](crate::types::Conversational).
    pub fn builder() -> crate::types::builders::ConversationalBuilder {
        crate::types::builders::ConversationalBuilder::default()
    }
}

/// A builder for [`Conversational`](crate::types::Conversational).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ConversationalBuilder {
    pub(crate) content: ::std::option::Option<crate::types::Content>,
    pub(crate) role: ::std::option::Option<crate::types::Role>,
}
impl ConversationalBuilder {
    /// <p>The content of the conversation message.</p>
    /// This field is required.
    pub fn content(mut self, input: crate::types::Content) -> Self {
        self.content = ::std::option::Option::Some(input);
        self
    }
    /// <p>The content of the conversation message.</p>
    pub fn set_content(mut self, input: ::std::option::Option<crate::types::Content>) -> Self {
        self.content = input;
        self
    }
    /// <p>The content of the conversation message.</p>
    pub fn get_content(&self) -> &::std::option::Option<crate::types::Content> {
        &self.content
    }
    /// <p>The role of the participant in the conversation (for example, "user" or "assistant").</p>
    /// This field is required.
    pub fn role(mut self, input: crate::types::Role) -> Self {
        self.role = ::std::option::Option::Some(input);
        self
    }
    /// <p>The role of the participant in the conversation (for example, "user" or "assistant").</p>
    pub fn set_role(mut self, input: ::std::option::Option<crate::types::Role>) -> Self {
        self.role = input;
        self
    }
    /// <p>The role of the participant in the conversation (for example, "user" or "assistant").</p>
    pub fn get_role(&self) -> &::std::option::Option<crate::types::Role> {
        &self.role
    }
    /// Consumes the builder and constructs a [`Conversational`](crate::types::Conversational).
    /// This method will fail if any of the following fields are not set:
    /// - [`role`](crate::types::builders::ConversationalBuilder::role)
    pub fn build(self) -> ::std::result::Result<crate::types::Conversational, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::Conversational {
            content: self.content,
            role: self.role.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "role",
                    "role was not specified but it is required when building Conversational",
                )
            })?,
        })
    }
}
