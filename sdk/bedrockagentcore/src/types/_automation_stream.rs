// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration for a stream that enables programmatic control of a browser session in Amazon Bedrock. This stream provides a bidirectional communication channel for sending commands to the browser and receiving responses, allowing agents to automate web interactions such as navigation, form filling, and element clicking.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AutomationStream {
    /// <p>The endpoint URL for the automation stream. This URL is used to establish a WebSocket connection to the stream for sending commands and receiving responses.</p>
    pub stream_endpoint: ::std::string::String,
    /// <p>The current status of the automation stream. This indicates whether the stream is available for use. Possible values include ACTIVE, CONNECTING, and DISCONNECTED.</p>
    pub stream_status: crate::types::AutomationStreamStatus,
}
impl AutomationStream {
    /// <p>The endpoint URL for the automation stream. This URL is used to establish a WebSocket connection to the stream for sending commands and receiving responses.</p>
    pub fn stream_endpoint(&self) -> &str {
        use std::ops::Deref;
        self.stream_endpoint.deref()
    }
    /// <p>The current status of the automation stream. This indicates whether the stream is available for use. Possible values include ACTIVE, CONNECTING, and DISCONNECTED.</p>
    pub fn stream_status(&self) -> &crate::types::AutomationStreamStatus {
        &self.stream_status
    }
}
impl AutomationStream {
    /// Creates a new builder-style object to manufacture [`AutomationStream`](crate::types::AutomationStream).
    pub fn builder() -> crate::types::builders::AutomationStreamBuilder {
        crate::types::builders::AutomationStreamBuilder::default()
    }
}

/// A builder for [`AutomationStream`](crate::types::AutomationStream).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AutomationStreamBuilder {
    pub(crate) stream_endpoint: ::std::option::Option<::std::string::String>,
    pub(crate) stream_status: ::std::option::Option<crate::types::AutomationStreamStatus>,
}
impl AutomationStreamBuilder {
    /// <p>The endpoint URL for the automation stream. This URL is used to establish a WebSocket connection to the stream for sending commands and receiving responses.</p>
    /// This field is required.
    pub fn stream_endpoint(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.stream_endpoint = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The endpoint URL for the automation stream. This URL is used to establish a WebSocket connection to the stream for sending commands and receiving responses.</p>
    pub fn set_stream_endpoint(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.stream_endpoint = input;
        self
    }
    /// <p>The endpoint URL for the automation stream. This URL is used to establish a WebSocket connection to the stream for sending commands and receiving responses.</p>
    pub fn get_stream_endpoint(&self) -> &::std::option::Option<::std::string::String> {
        &self.stream_endpoint
    }
    /// <p>The current status of the automation stream. This indicates whether the stream is available for use. Possible values include ACTIVE, CONNECTING, and DISCONNECTED.</p>
    /// This field is required.
    pub fn stream_status(mut self, input: crate::types::AutomationStreamStatus) -> Self {
        self.stream_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the automation stream. This indicates whether the stream is available for use. Possible values include ACTIVE, CONNECTING, and DISCONNECTED.</p>
    pub fn set_stream_status(mut self, input: ::std::option::Option<crate::types::AutomationStreamStatus>) -> Self {
        self.stream_status = input;
        self
    }
    /// <p>The current status of the automation stream. This indicates whether the stream is available for use. Possible values include ACTIVE, CONNECTING, and DISCONNECTED.</p>
    pub fn get_stream_status(&self) -> &::std::option::Option<crate::types::AutomationStreamStatus> {
        &self.stream_status
    }
    /// Consumes the builder and constructs a [`AutomationStream`](crate::types::AutomationStream).
    /// This method will fail if any of the following fields are not set:
    /// - [`stream_endpoint`](crate::types::builders::AutomationStreamBuilder::stream_endpoint)
    /// - [`stream_status`](crate::types::builders::AutomationStreamBuilder::stream_status)
    pub fn build(self) -> ::std::result::Result<crate::types::AutomationStream, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AutomationStream {
            stream_endpoint: self.stream_endpoint.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "stream_endpoint",
                    "stream_endpoint was not specified but it is required when building AutomationStream",
                )
            })?,
            stream_status: self.stream_status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "stream_status",
                    "stream_status was not specified but it is required when building AutomationStream",
                )
            })?,
        })
    }
}
