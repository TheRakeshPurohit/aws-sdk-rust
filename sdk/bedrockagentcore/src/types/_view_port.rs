// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration that defines the dimensions of a browser viewport in a browser session. The viewport determines the visible area of web content and affects how web pages are rendered and displayed. Proper viewport configuration ensures that web content is displayed correctly for the agent's browsing tasks.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ViewPort {
    /// <p>The width of the viewport in pixels. This value determines the horizontal dimension of the visible area. Valid values range from 800 to 1920 pixels.</p>
    pub width: i32,
    /// <p>The height of the viewport in pixels. This value determines the vertical dimension of the visible area. Valid values range from 600 to 1080 pixels.</p>
    pub height: i32,
}
impl ViewPort {
    /// <p>The width of the viewport in pixels. This value determines the horizontal dimension of the visible area. Valid values range from 800 to 1920 pixels.</p>
    pub fn width(&self) -> i32 {
        self.width
    }
    /// <p>The height of the viewport in pixels. This value determines the vertical dimension of the visible area. Valid values range from 600 to 1080 pixels.</p>
    pub fn height(&self) -> i32 {
        self.height
    }
}
impl ViewPort {
    /// Creates a new builder-style object to manufacture [`ViewPort`](crate::types::ViewPort).
    pub fn builder() -> crate::types::builders::ViewPortBuilder {
        crate::types::builders::ViewPortBuilder::default()
    }
}

/// A builder for [`ViewPort`](crate::types::ViewPort).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ViewPortBuilder {
    pub(crate) width: ::std::option::Option<i32>,
    pub(crate) height: ::std::option::Option<i32>,
}
impl ViewPortBuilder {
    /// <p>The width of the viewport in pixels. This value determines the horizontal dimension of the visible area. Valid values range from 800 to 1920 pixels.</p>
    /// This field is required.
    pub fn width(mut self, input: i32) -> Self {
        self.width = ::std::option::Option::Some(input);
        self
    }
    /// <p>The width of the viewport in pixels. This value determines the horizontal dimension of the visible area. Valid values range from 800 to 1920 pixels.</p>
    pub fn set_width(mut self, input: ::std::option::Option<i32>) -> Self {
        self.width = input;
        self
    }
    /// <p>The width of the viewport in pixels. This value determines the horizontal dimension of the visible area. Valid values range from 800 to 1920 pixels.</p>
    pub fn get_width(&self) -> &::std::option::Option<i32> {
        &self.width
    }
    /// <p>The height of the viewport in pixels. This value determines the vertical dimension of the visible area. Valid values range from 600 to 1080 pixels.</p>
    /// This field is required.
    pub fn height(mut self, input: i32) -> Self {
        self.height = ::std::option::Option::Some(input);
        self
    }
    /// <p>The height of the viewport in pixels. This value determines the vertical dimension of the visible area. Valid values range from 600 to 1080 pixels.</p>
    pub fn set_height(mut self, input: ::std::option::Option<i32>) -> Self {
        self.height = input;
        self
    }
    /// <p>The height of the viewport in pixels. This value determines the vertical dimension of the visible area. Valid values range from 600 to 1080 pixels.</p>
    pub fn get_height(&self) -> &::std::option::Option<i32> {
        &self.height
    }
    /// Consumes the builder and constructs a [`ViewPort`](crate::types::ViewPort).
    /// This method will fail if any of the following fields are not set:
    /// - [`width`](crate::types::builders::ViewPortBuilder::width)
    /// - [`height`](crate::types::builders::ViewPortBuilder::height)
    pub fn build(self) -> ::std::result::Result<crate::types::ViewPort, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ViewPort {
            width: self.width.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "width",
                    "width was not specified but it is required when building ViewPort",
                )
            })?,
            height: self.height.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "height",
                    "height was not specified but it is required when building ViewPort",
                )
            })?,
        })
    }
}
