// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Input structure to update an existing memory record.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MemoryRecordUpdateInput {
    /// <p>The unique ID of the memory record to be updated.</p>
    pub memory_record_id: ::std::string::String,
    /// <p>Time at which the memory record was updated</p>
    pub timestamp: ::aws_smithy_types::DateTime,
    /// <p>The content to be stored within the memory record.</p>
    pub content: ::std::option::Option<crate::types::MemoryContent>,
    /// <p>The updated list of namespace identifiers for categorizing the memory record.</p>
    pub namespaces: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The updated ID of the memory strategy that defines how this memory record is grouped.</p>
    pub memory_strategy_id: ::std::option::Option<::std::string::String>,
}
impl MemoryRecordUpdateInput {
    /// <p>The unique ID of the memory record to be updated.</p>
    pub fn memory_record_id(&self) -> &str {
        use std::ops::Deref;
        self.memory_record_id.deref()
    }
    /// <p>Time at which the memory record was updated</p>
    pub fn timestamp(&self) -> &::aws_smithy_types::DateTime {
        &self.timestamp
    }
    /// <p>The content to be stored within the memory record.</p>
    pub fn content(&self) -> ::std::option::Option<&crate::types::MemoryContent> {
        self.content.as_ref()
    }
    /// <p>The updated list of namespace identifiers for categorizing the memory record.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.namespaces.is_none()`.
    pub fn namespaces(&self) -> &[::std::string::String] {
        self.namespaces.as_deref().unwrap_or_default()
    }
    /// <p>The updated ID of the memory strategy that defines how this memory record is grouped.</p>
    pub fn memory_strategy_id(&self) -> ::std::option::Option<&str> {
        self.memory_strategy_id.as_deref()
    }
}
impl MemoryRecordUpdateInput {
    /// Creates a new builder-style object to manufacture [`MemoryRecordUpdateInput`](crate::types::MemoryRecordUpdateInput).
    pub fn builder() -> crate::types::builders::MemoryRecordUpdateInputBuilder {
        crate::types::builders::MemoryRecordUpdateInputBuilder::default()
    }
}

/// A builder for [`MemoryRecordUpdateInput`](crate::types::MemoryRecordUpdateInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct MemoryRecordUpdateInputBuilder {
    pub(crate) memory_record_id: ::std::option::Option<::std::string::String>,
    pub(crate) timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) content: ::std::option::Option<crate::types::MemoryContent>,
    pub(crate) namespaces: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) memory_strategy_id: ::std::option::Option<::std::string::String>,
}
impl MemoryRecordUpdateInputBuilder {
    /// <p>The unique ID of the memory record to be updated.</p>
    /// This field is required.
    pub fn memory_record_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.memory_record_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique ID of the memory record to be updated.</p>
    pub fn set_memory_record_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.memory_record_id = input;
        self
    }
    /// <p>The unique ID of the memory record to be updated.</p>
    pub fn get_memory_record_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.memory_record_id
    }
    /// <p>Time at which the memory record was updated</p>
    /// This field is required.
    pub fn timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>Time at which the memory record was updated</p>
    pub fn set_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.timestamp = input;
        self
    }
    /// <p>Time at which the memory record was updated</p>
    pub fn get_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.timestamp
    }
    /// <p>The content to be stored within the memory record.</p>
    pub fn content(mut self, input: crate::types::MemoryContent) -> Self {
        self.content = ::std::option::Option::Some(input);
        self
    }
    /// <p>The content to be stored within the memory record.</p>
    pub fn set_content(mut self, input: ::std::option::Option<crate::types::MemoryContent>) -> Self {
        self.content = input;
        self
    }
    /// <p>The content to be stored within the memory record.</p>
    pub fn get_content(&self) -> &::std::option::Option<crate::types::MemoryContent> {
        &self.content
    }
    /// Appends an item to `namespaces`.
    ///
    /// To override the contents of this collection use [`set_namespaces`](Self::set_namespaces).
    ///
    /// <p>The updated list of namespace identifiers for categorizing the memory record.</p>
    pub fn namespaces(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.namespaces.unwrap_or_default();
        v.push(input.into());
        self.namespaces = ::std::option::Option::Some(v);
        self
    }
    /// <p>The updated list of namespace identifiers for categorizing the memory record.</p>
    pub fn set_namespaces(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.namespaces = input;
        self
    }
    /// <p>The updated list of namespace identifiers for categorizing the memory record.</p>
    pub fn get_namespaces(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.namespaces
    }
    /// <p>The updated ID of the memory strategy that defines how this memory record is grouped.</p>
    pub fn memory_strategy_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.memory_strategy_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The updated ID of the memory strategy that defines how this memory record is grouped.</p>
    pub fn set_memory_strategy_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.memory_strategy_id = input;
        self
    }
    /// <p>The updated ID of the memory strategy that defines how this memory record is grouped.</p>
    pub fn get_memory_strategy_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.memory_strategy_id
    }
    /// Consumes the builder and constructs a [`MemoryRecordUpdateInput`](crate::types::MemoryRecordUpdateInput).
    /// This method will fail if any of the following fields are not set:
    /// - [`memory_record_id`](crate::types::builders::MemoryRecordUpdateInputBuilder::memory_record_id)
    /// - [`timestamp`](crate::types::builders::MemoryRecordUpdateInputBuilder::timestamp)
    pub fn build(self) -> ::std::result::Result<crate::types::MemoryRecordUpdateInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::MemoryRecordUpdateInput {
            memory_record_id: self.memory_record_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "memory_record_id",
                    "memory_record_id was not specified but it is required when building MemoryRecordUpdateInput",
                )
            })?,
            timestamp: self.timestamp.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "timestamp",
                    "timestamp was not specified but it is required when building MemoryRecordUpdateInput",
                )
            })?,
            content: self.content,
            namespaces: self.namespaces,
            memory_strategy_id: self.memory_strategy_id,
        })
    }
}
