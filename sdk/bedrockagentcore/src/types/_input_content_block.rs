// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A block of input content.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct InputContentBlock {
    /// <p>The path to the input content.</p>
    pub path: ::std::string::String,
    /// <p>The text input content.</p>
    pub text: ::std::option::Option<::std::string::String>,
    /// <p>The binary input content.</p>
    pub blob: ::std::option::Option<::aws_smithy_types::Blob>,
}
impl InputContentBlock {
    /// <p>The path to the input content.</p>
    pub fn path(&self) -> &str {
        use std::ops::Deref;
        self.path.deref()
    }
    /// <p>The text input content.</p>
    pub fn text(&self) -> ::std::option::Option<&str> {
        self.text.as_deref()
    }
    /// <p>The binary input content.</p>
    pub fn blob(&self) -> ::std::option::Option<&::aws_smithy_types::Blob> {
        self.blob.as_ref()
    }
}
impl ::std::fmt::Debug for InputContentBlock {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("InputContentBlock");
        formatter.field("path", &self.path);
        formatter.field("text", &self.text);
        formatter.field("blob", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl InputContentBlock {
    /// Creates a new builder-style object to manufacture [`InputContentBlock`](crate::types::InputContentBlock).
    pub fn builder() -> crate::types::builders::InputContentBlockBuilder {
        crate::types::builders::InputContentBlockBuilder::default()
    }
}

/// A builder for [`InputContentBlock`](crate::types::InputContentBlock).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct InputContentBlockBuilder {
    pub(crate) path: ::std::option::Option<::std::string::String>,
    pub(crate) text: ::std::option::Option<::std::string::String>,
    pub(crate) blob: ::std::option::Option<::aws_smithy_types::Blob>,
}
impl InputContentBlockBuilder {
    /// <p>The path to the input content.</p>
    /// This field is required.
    pub fn path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.path = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The path to the input content.</p>
    pub fn set_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.path = input;
        self
    }
    /// <p>The path to the input content.</p>
    pub fn get_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.path
    }
    /// <p>The text input content.</p>
    pub fn text(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.text = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The text input content.</p>
    pub fn set_text(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.text = input;
        self
    }
    /// <p>The text input content.</p>
    pub fn get_text(&self) -> &::std::option::Option<::std::string::String> {
        &self.text
    }
    /// <p>The binary input content.</p>
    pub fn blob(mut self, input: ::aws_smithy_types::Blob) -> Self {
        self.blob = ::std::option::Option::Some(input);
        self
    }
    /// <p>The binary input content.</p>
    pub fn set_blob(mut self, input: ::std::option::Option<::aws_smithy_types::Blob>) -> Self {
        self.blob = input;
        self
    }
    /// <p>The binary input content.</p>
    pub fn get_blob(&self) -> &::std::option::Option<::aws_smithy_types::Blob> {
        &self.blob
    }
    /// Consumes the builder and constructs a [`InputContentBlock`](crate::types::InputContentBlock).
    /// This method will fail if any of the following fields are not set:
    /// - [`path`](crate::types::builders::InputContentBlockBuilder::path)
    pub fn build(self) -> ::std::result::Result<crate::types::InputContentBlock, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::InputContentBlock {
            path: self.path.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "path",
                    "path was not specified but it is required when building InputContentBlock",
                )
            })?,
            text: self.text,
            blob: self.blob,
        })
    }
}
impl ::std::fmt::Debug for InputContentBlockBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("InputContentBlockBuilder");
        formatter.field("path", &self.path);
        formatter.field("text", &self.text);
        formatter.field("blob", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
