// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The collection of streams associated with a browser session in Amazon Bedrock. These streams provide different ways to interact with and observe the browser session, including programmatic control and visual representation of the browser content.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BrowserSessionStream {
    /// <p>The stream that enables programmatic control of the browser. This stream allows agents to perform actions such as navigating to URLs, clicking elements, and filling forms.</p>
    pub automation_stream: ::std::option::Option<crate::types::AutomationStream>,
    /// <p>The stream that provides a visual representation of the browser content. This stream allows agents to observe the current state of the browser, including rendered web pages and visual elements.</p>
    pub live_view_stream: ::std::option::Option<crate::types::LiveViewStream>,
}
impl BrowserSessionStream {
    /// <p>The stream that enables programmatic control of the browser. This stream allows agents to perform actions such as navigating to URLs, clicking elements, and filling forms.</p>
    pub fn automation_stream(&self) -> ::std::option::Option<&crate::types::AutomationStream> {
        self.automation_stream.as_ref()
    }
    /// <p>The stream that provides a visual representation of the browser content. This stream allows agents to observe the current state of the browser, including rendered web pages and visual elements.</p>
    pub fn live_view_stream(&self) -> ::std::option::Option<&crate::types::LiveViewStream> {
        self.live_view_stream.as_ref()
    }
}
impl BrowserSessionStream {
    /// Creates a new builder-style object to manufacture [`BrowserSessionStream`](crate::types::BrowserSessionStream).
    pub fn builder() -> crate::types::builders::BrowserSessionStreamBuilder {
        crate::types::builders::BrowserSessionStreamBuilder::default()
    }
}

/// A builder for [`BrowserSessionStream`](crate::types::BrowserSessionStream).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct BrowserSessionStreamBuilder {
    pub(crate) automation_stream: ::std::option::Option<crate::types::AutomationStream>,
    pub(crate) live_view_stream: ::std::option::Option<crate::types::LiveViewStream>,
}
impl BrowserSessionStreamBuilder {
    /// <p>The stream that enables programmatic control of the browser. This stream allows agents to perform actions such as navigating to URLs, clicking elements, and filling forms.</p>
    /// This field is required.
    pub fn automation_stream(mut self, input: crate::types::AutomationStream) -> Self {
        self.automation_stream = ::std::option::Option::Some(input);
        self
    }
    /// <p>The stream that enables programmatic control of the browser. This stream allows agents to perform actions such as navigating to URLs, clicking elements, and filling forms.</p>
    pub fn set_automation_stream(mut self, input: ::std::option::Option<crate::types::AutomationStream>) -> Self {
        self.automation_stream = input;
        self
    }
    /// <p>The stream that enables programmatic control of the browser. This stream allows agents to perform actions such as navigating to URLs, clicking elements, and filling forms.</p>
    pub fn get_automation_stream(&self) -> &::std::option::Option<crate::types::AutomationStream> {
        &self.automation_stream
    }
    /// <p>The stream that provides a visual representation of the browser content. This stream allows agents to observe the current state of the browser, including rendered web pages and visual elements.</p>
    pub fn live_view_stream(mut self, input: crate::types::LiveViewStream) -> Self {
        self.live_view_stream = ::std::option::Option::Some(input);
        self
    }
    /// <p>The stream that provides a visual representation of the browser content. This stream allows agents to observe the current state of the browser, including rendered web pages and visual elements.</p>
    pub fn set_live_view_stream(mut self, input: ::std::option::Option<crate::types::LiveViewStream>) -> Self {
        self.live_view_stream = input;
        self
    }
    /// <p>The stream that provides a visual representation of the browser content. This stream allows agents to observe the current state of the browser, including rendered web pages and visual elements.</p>
    pub fn get_live_view_stream(&self) -> &::std::option::Option<crate::types::LiveViewStream> {
        &self.live_view_stream
    }
    /// Consumes the builder and constructs a [`BrowserSessionStream`](crate::types::BrowserSessionStream).
    pub fn build(self) -> crate::types::BrowserSessionStream {
        crate::types::BrowserSessionStream {
            automation_stream: self.automation_stream,
            live_view_stream: self.live_view_stream,
        }
    }
}
