// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Output information returned after processing a memory record operation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MemoryRecordOutput {
    /// <p>The unique ID associated to the memory record.</p>
    pub memory_record_id: ::std::string::String,
    /// <p>The status of the memory record operation (e.g., SUCCEEDED, FAILED).</p>
    pub status: crate::types::MemoryRecordStatus,
    /// <p>The client-provided identifier that was used to track this record operation.</p>
    pub request_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The error code returned when the memory record operation fails.</p>
    pub error_code: ::std::option::Option<i32>,
    /// <p>A human-readable error message describing why the memory record operation failed.</p>
    pub error_message: ::std::option::Option<::std::string::String>,
}
impl MemoryRecordOutput {
    /// <p>The unique ID associated to the memory record.</p>
    pub fn memory_record_id(&self) -> &str {
        use std::ops::Deref;
        self.memory_record_id.deref()
    }
    /// <p>The status of the memory record operation (e.g., SUCCEEDED, FAILED).</p>
    pub fn status(&self) -> &crate::types::MemoryRecordStatus {
        &self.status
    }
    /// <p>The client-provided identifier that was used to track this record operation.</p>
    pub fn request_identifier(&self) -> ::std::option::Option<&str> {
        self.request_identifier.as_deref()
    }
    /// <p>The error code returned when the memory record operation fails.</p>
    pub fn error_code(&self) -> ::std::option::Option<i32> {
        self.error_code
    }
    /// <p>A human-readable error message describing why the memory record operation failed.</p>
    pub fn error_message(&self) -> ::std::option::Option<&str> {
        self.error_message.as_deref()
    }
}
impl MemoryRecordOutput {
    /// Creates a new builder-style object to manufacture [`MemoryRecordOutput`](crate::types::MemoryRecordOutput).
    pub fn builder() -> crate::types::builders::MemoryRecordOutputBuilder {
        crate::types::builders::MemoryRecordOutputBuilder::default()
    }
}

/// A builder for [`MemoryRecordOutput`](crate::types::MemoryRecordOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct MemoryRecordOutputBuilder {
    pub(crate) memory_record_id: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::MemoryRecordStatus>,
    pub(crate) request_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) error_code: ::std::option::Option<i32>,
    pub(crate) error_message: ::std::option::Option<::std::string::String>,
}
impl MemoryRecordOutputBuilder {
    /// <p>The unique ID associated to the memory record.</p>
    /// This field is required.
    pub fn memory_record_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.memory_record_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique ID associated to the memory record.</p>
    pub fn set_memory_record_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.memory_record_id = input;
        self
    }
    /// <p>The unique ID associated to the memory record.</p>
    pub fn get_memory_record_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.memory_record_id
    }
    /// <p>The status of the memory record operation (e.g., SUCCEEDED, FAILED).</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::MemoryRecordStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the memory record operation (e.g., SUCCEEDED, FAILED).</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::MemoryRecordStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the memory record operation (e.g., SUCCEEDED, FAILED).</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::MemoryRecordStatus> {
        &self.status
    }
    /// <p>The client-provided identifier that was used to track this record operation.</p>
    pub fn request_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.request_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The client-provided identifier that was used to track this record operation.</p>
    pub fn set_request_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.request_identifier = input;
        self
    }
    /// <p>The client-provided identifier that was used to track this record operation.</p>
    pub fn get_request_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.request_identifier
    }
    /// <p>The error code returned when the memory record operation fails.</p>
    pub fn error_code(mut self, input: i32) -> Self {
        self.error_code = ::std::option::Option::Some(input);
        self
    }
    /// <p>The error code returned when the memory record operation fails.</p>
    pub fn set_error_code(mut self, input: ::std::option::Option<i32>) -> Self {
        self.error_code = input;
        self
    }
    /// <p>The error code returned when the memory record operation fails.</p>
    pub fn get_error_code(&self) -> &::std::option::Option<i32> {
        &self.error_code
    }
    /// <p>A human-readable error message describing why the memory record operation failed.</p>
    pub fn error_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.error_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A human-readable error message describing why the memory record operation failed.</p>
    pub fn set_error_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.error_message = input;
        self
    }
    /// <p>A human-readable error message describing why the memory record operation failed.</p>
    pub fn get_error_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.error_message
    }
    /// Consumes the builder and constructs a [`MemoryRecordOutput`](crate::types::MemoryRecordOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`memory_record_id`](crate::types::builders::MemoryRecordOutputBuilder::memory_record_id)
    /// - [`status`](crate::types::builders::MemoryRecordOutputBuilder::status)
    pub fn build(self) -> ::std::result::Result<crate::types::MemoryRecordOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::MemoryRecordOutput {
            memory_record_id: self.memory_record_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "memory_record_id",
                    "memory_record_id was not specified but it is required when building MemoryRecordOutput",
                )
            })?,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building MemoryRecordOutput",
                )
            })?,
            request_identifier: self.request_identifier,
            error_code: self.error_code,
            error_message: self.error_message,
        })
    }
}
