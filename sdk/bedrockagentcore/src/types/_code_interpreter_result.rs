// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The output produced by executing code in a code interpreter session in Amazon Bedrock. This structure contains the results of code execution, including textual output, structured data, and error information. Agents use these results to generate responses that incorporate computation, data analysis, and visualization.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CodeInterpreterResult {
    /// <p>The textual content of the execution result. This includes standard output from the code execution, such as print statements, console output, and text representations of results.</p>
    pub content: ::std::vec::Vec<crate::types::ContentBlock>,
    /// <p>The structured content of the execution result. This includes additional metadata about the execution, such as execution time, memory usage, and structured representations of output data. The format depends on the specific code interpreter and execution context.</p>
    pub structured_content: ::std::option::Option<crate::types::ToolResultStructuredContent>,
    /// <p>Indicates whether the result represents an error. If true, the content contains error messages or exception information. If false, the content contains successful execution results.</p>
    pub is_error: ::std::option::Option<bool>,
}
impl CodeInterpreterResult {
    /// <p>The textual content of the execution result. This includes standard output from the code execution, such as print statements, console output, and text representations of results.</p>
    pub fn content(&self) -> &[crate::types::ContentBlock] {
        use std::ops::Deref;
        self.content.deref()
    }
    /// <p>The structured content of the execution result. This includes additional metadata about the execution, such as execution time, memory usage, and structured representations of output data. The format depends on the specific code interpreter and execution context.</p>
    pub fn structured_content(&self) -> ::std::option::Option<&crate::types::ToolResultStructuredContent> {
        self.structured_content.as_ref()
    }
    /// <p>Indicates whether the result represents an error. If true, the content contains error messages or exception information. If false, the content contains successful execution results.</p>
    pub fn is_error(&self) -> ::std::option::Option<bool> {
        self.is_error
    }
}
impl CodeInterpreterResult {
    /// Creates a new builder-style object to manufacture [`CodeInterpreterResult`](crate::types::CodeInterpreterResult).
    pub fn builder() -> crate::types::builders::CodeInterpreterResultBuilder {
        crate::types::builders::CodeInterpreterResultBuilder::default()
    }
}

/// A builder for [`CodeInterpreterResult`](crate::types::CodeInterpreterResult).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CodeInterpreterResultBuilder {
    pub(crate) content: ::std::option::Option<::std::vec::Vec<crate::types::ContentBlock>>,
    pub(crate) structured_content: ::std::option::Option<crate::types::ToolResultStructuredContent>,
    pub(crate) is_error: ::std::option::Option<bool>,
}
impl CodeInterpreterResultBuilder {
    /// Appends an item to `content`.
    ///
    /// To override the contents of this collection use [`set_content`](Self::set_content).
    ///
    /// <p>The textual content of the execution result. This includes standard output from the code execution, such as print statements, console output, and text representations of results.</p>
    pub fn content(mut self, input: crate::types::ContentBlock) -> Self {
        let mut v = self.content.unwrap_or_default();
        v.push(input);
        self.content = ::std::option::Option::Some(v);
        self
    }
    /// <p>The textual content of the execution result. This includes standard output from the code execution, such as print statements, console output, and text representations of results.</p>
    pub fn set_content(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ContentBlock>>) -> Self {
        self.content = input;
        self
    }
    /// <p>The textual content of the execution result. This includes standard output from the code execution, such as print statements, console output, and text representations of results.</p>
    pub fn get_content(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ContentBlock>> {
        &self.content
    }
    /// <p>The structured content of the execution result. This includes additional metadata about the execution, such as execution time, memory usage, and structured representations of output data. The format depends on the specific code interpreter and execution context.</p>
    pub fn structured_content(mut self, input: crate::types::ToolResultStructuredContent) -> Self {
        self.structured_content = ::std::option::Option::Some(input);
        self
    }
    /// <p>The structured content of the execution result. This includes additional metadata about the execution, such as execution time, memory usage, and structured representations of output data. The format depends on the specific code interpreter and execution context.</p>
    pub fn set_structured_content(mut self, input: ::std::option::Option<crate::types::ToolResultStructuredContent>) -> Self {
        self.structured_content = input;
        self
    }
    /// <p>The structured content of the execution result. This includes additional metadata about the execution, such as execution time, memory usage, and structured representations of output data. The format depends on the specific code interpreter and execution context.</p>
    pub fn get_structured_content(&self) -> &::std::option::Option<crate::types::ToolResultStructuredContent> {
        &self.structured_content
    }
    /// <p>Indicates whether the result represents an error. If true, the content contains error messages or exception information. If false, the content contains successful execution results.</p>
    pub fn is_error(mut self, input: bool) -> Self {
        self.is_error = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether the result represents an error. If true, the content contains error messages or exception information. If false, the content contains successful execution results.</p>
    pub fn set_is_error(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_error = input;
        self
    }
    /// <p>Indicates whether the result represents an error. If true, the content contains error messages or exception information. If false, the content contains successful execution results.</p>
    pub fn get_is_error(&self) -> &::std::option::Option<bool> {
        &self.is_error
    }
    /// Consumes the builder and constructs a [`CodeInterpreterResult`](crate::types::CodeInterpreterResult).
    /// This method will fail if any of the following fields are not set:
    /// - [`content`](crate::types::builders::CodeInterpreterResultBuilder::content)
    pub fn build(self) -> ::std::result::Result<crate::types::CodeInterpreterResult, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CodeInterpreterResult {
            content: self.content.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "content",
                    "content was not specified but it is required when building CodeInterpreterResult",
                )
            })?,
            structured_content: self.structured_content,
            is_error: self.is_error,
        })
    }
}
