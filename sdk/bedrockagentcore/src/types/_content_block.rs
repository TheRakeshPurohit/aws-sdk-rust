// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A block of content in a response.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ContentBlock {
    /// <p>The type of content in the block.</p>
    pub r#type: crate::types::ContentBlockType,
    /// <p>The text content of the block.</p>
    pub text: ::std::option::Option<::std::string::String>,
    /// <p>The binary data content of the block.</p>
    pub data: ::std::option::Option<::aws_smithy_types::Blob>,
    /// <p>The MIME type of the content.</p>
    pub mime_type: ::std::option::Option<::std::string::String>,
    /// <p>The URI of the content.</p>
    pub uri: ::std::option::Option<::std::string::String>,
    /// <p>The name of the content block.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The description of the content block.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The size of the content in bytes.</p>
    pub size: ::std::option::Option<i64>,
    /// <p>The resource associated with the content block.</p>
    pub resource: ::std::option::Option<crate::types::ResourceContent>,
}
impl ContentBlock {
    /// <p>The type of content in the block.</p>
    pub fn r#type(&self) -> &crate::types::ContentBlockType {
        &self.r#type
    }
    /// <p>The text content of the block.</p>
    pub fn text(&self) -> ::std::option::Option<&str> {
        self.text.as_deref()
    }
    /// <p>The binary data content of the block.</p>
    pub fn data(&self) -> ::std::option::Option<&::aws_smithy_types::Blob> {
        self.data.as_ref()
    }
    /// <p>The MIME type of the content.</p>
    pub fn mime_type(&self) -> ::std::option::Option<&str> {
        self.mime_type.as_deref()
    }
    /// <p>The URI of the content.</p>
    pub fn uri(&self) -> ::std::option::Option<&str> {
        self.uri.as_deref()
    }
    /// <p>The name of the content block.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The description of the content block.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The size of the content in bytes.</p>
    pub fn size(&self) -> ::std::option::Option<i64> {
        self.size
    }
    /// <p>The resource associated with the content block.</p>
    pub fn resource(&self) -> ::std::option::Option<&crate::types::ResourceContent> {
        self.resource.as_ref()
    }
}
impl ContentBlock {
    /// Creates a new builder-style object to manufacture [`ContentBlock`](crate::types::ContentBlock).
    pub fn builder() -> crate::types::builders::ContentBlockBuilder {
        crate::types::builders::ContentBlockBuilder::default()
    }
}

/// A builder for [`ContentBlock`](crate::types::ContentBlock).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ContentBlockBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::ContentBlockType>,
    pub(crate) text: ::std::option::Option<::std::string::String>,
    pub(crate) data: ::std::option::Option<::aws_smithy_types::Blob>,
    pub(crate) mime_type: ::std::option::Option<::std::string::String>,
    pub(crate) uri: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) size: ::std::option::Option<i64>,
    pub(crate) resource: ::std::option::Option<crate::types::ResourceContent>,
}
impl ContentBlockBuilder {
    /// <p>The type of content in the block.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::ContentBlockType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of content in the block.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::ContentBlockType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of content in the block.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::ContentBlockType> {
        &self.r#type
    }
    /// <p>The text content of the block.</p>
    pub fn text(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.text = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The text content of the block.</p>
    pub fn set_text(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.text = input;
        self
    }
    /// <p>The text content of the block.</p>
    pub fn get_text(&self) -> &::std::option::Option<::std::string::String> {
        &self.text
    }
    /// <p>The binary data content of the block.</p>
    pub fn data(mut self, input: ::aws_smithy_types::Blob) -> Self {
        self.data = ::std::option::Option::Some(input);
        self
    }
    /// <p>The binary data content of the block.</p>
    pub fn set_data(mut self, input: ::std::option::Option<::aws_smithy_types::Blob>) -> Self {
        self.data = input;
        self
    }
    /// <p>The binary data content of the block.</p>
    pub fn get_data(&self) -> &::std::option::Option<::aws_smithy_types::Blob> {
        &self.data
    }
    /// <p>The MIME type of the content.</p>
    pub fn mime_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.mime_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The MIME type of the content.</p>
    pub fn set_mime_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.mime_type = input;
        self
    }
    /// <p>The MIME type of the content.</p>
    pub fn get_mime_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.mime_type
    }
    /// <p>The URI of the content.</p>
    pub fn uri(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.uri = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The URI of the content.</p>
    pub fn set_uri(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.uri = input;
        self
    }
    /// <p>The URI of the content.</p>
    pub fn get_uri(&self) -> &::std::option::Option<::std::string::String> {
        &self.uri
    }
    /// <p>The name of the content block.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the content block.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the content block.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The description of the content block.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the content block.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the content block.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The size of the content in bytes.</p>
    pub fn size(mut self, input: i64) -> Self {
        self.size = ::std::option::Option::Some(input);
        self
    }
    /// <p>The size of the content in bytes.</p>
    pub fn set_size(mut self, input: ::std::option::Option<i64>) -> Self {
        self.size = input;
        self
    }
    /// <p>The size of the content in bytes.</p>
    pub fn get_size(&self) -> &::std::option::Option<i64> {
        &self.size
    }
    /// <p>The resource associated with the content block.</p>
    pub fn resource(mut self, input: crate::types::ResourceContent) -> Self {
        self.resource = ::std::option::Option::Some(input);
        self
    }
    /// <p>The resource associated with the content block.</p>
    pub fn set_resource(mut self, input: ::std::option::Option<crate::types::ResourceContent>) -> Self {
        self.resource = input;
        self
    }
    /// <p>The resource associated with the content block.</p>
    pub fn get_resource(&self) -> &::std::option::Option<crate::types::ResourceContent> {
        &self.resource
    }
    /// Consumes the builder and constructs a [`ContentBlock`](crate::types::ContentBlock).
    /// This method will fail if any of the following fields are not set:
    /// - [`r#type`](crate::types::builders::ContentBlockBuilder::type)
    pub fn build(self) -> ::std::result::Result<crate::types::ContentBlock, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ContentBlock {
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building ContentBlock",
                )
            })?,
            text: self.text,
            data: self.data,
            mime_type: self.mime_type,
            uri: self.uri,
            name: self.name,
            description: self.description,
            size: self.size,
            resource: self.resource,
        })
    }
}
