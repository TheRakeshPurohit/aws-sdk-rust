// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains structured content from a tool result.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ToolResultStructuredContent {
    /// <p>The identifier of the task that produced the result.</p>
    pub task_id: ::std::option::Option<::std::string::String>,
    /// <p>The status of the task that produced the result.</p>
    pub task_status: ::std::option::Option<crate::types::TaskStatus>,
    /// <p>The standard output from the tool execution.</p>
    pub stdout: ::std::option::Option<::std::string::String>,
    /// <p>The standard error output from the tool execution.</p>
    pub stderr: ::std::option::Option<::std::string::String>,
    /// <p>The exit code from the tool execution.</p>
    pub exit_code: ::std::option::Option<i32>,
    /// <p>The execution time of the tool operation in milliseconds.</p>
    pub execution_time: ::std::option::Option<f64>,
}
impl ToolResultStructuredContent {
    /// <p>The identifier of the task that produced the result.</p>
    pub fn task_id(&self) -> ::std::option::Option<&str> {
        self.task_id.as_deref()
    }
    /// <p>The status of the task that produced the result.</p>
    pub fn task_status(&self) -> ::std::option::Option<&crate::types::TaskStatus> {
        self.task_status.as_ref()
    }
    /// <p>The standard output from the tool execution.</p>
    pub fn stdout(&self) -> ::std::option::Option<&str> {
        self.stdout.as_deref()
    }
    /// <p>The standard error output from the tool execution.</p>
    pub fn stderr(&self) -> ::std::option::Option<&str> {
        self.stderr.as_deref()
    }
    /// <p>The exit code from the tool execution.</p>
    pub fn exit_code(&self) -> ::std::option::Option<i32> {
        self.exit_code
    }
    /// <p>The execution time of the tool operation in milliseconds.</p>
    pub fn execution_time(&self) -> ::std::option::Option<f64> {
        self.execution_time
    }
}
impl ToolResultStructuredContent {
    /// Creates a new builder-style object to manufacture [`ToolResultStructuredContent`](crate::types::ToolResultStructuredContent).
    pub fn builder() -> crate::types::builders::ToolResultStructuredContentBuilder {
        crate::types::builders::ToolResultStructuredContentBuilder::default()
    }
}

/// A builder for [`ToolResultStructuredContent`](crate::types::ToolResultStructuredContent).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ToolResultStructuredContentBuilder {
    pub(crate) task_id: ::std::option::Option<::std::string::String>,
    pub(crate) task_status: ::std::option::Option<crate::types::TaskStatus>,
    pub(crate) stdout: ::std::option::Option<::std::string::String>,
    pub(crate) stderr: ::std::option::Option<::std::string::String>,
    pub(crate) exit_code: ::std::option::Option<i32>,
    pub(crate) execution_time: ::std::option::Option<f64>,
}
impl ToolResultStructuredContentBuilder {
    /// <p>The identifier of the task that produced the result.</p>
    pub fn task_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.task_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the task that produced the result.</p>
    pub fn set_task_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.task_id = input;
        self
    }
    /// <p>The identifier of the task that produced the result.</p>
    pub fn get_task_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.task_id
    }
    /// <p>The status of the task that produced the result.</p>
    pub fn task_status(mut self, input: crate::types::TaskStatus) -> Self {
        self.task_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the task that produced the result.</p>
    pub fn set_task_status(mut self, input: ::std::option::Option<crate::types::TaskStatus>) -> Self {
        self.task_status = input;
        self
    }
    /// <p>The status of the task that produced the result.</p>
    pub fn get_task_status(&self) -> &::std::option::Option<crate::types::TaskStatus> {
        &self.task_status
    }
    /// <p>The standard output from the tool execution.</p>
    pub fn stdout(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.stdout = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The standard output from the tool execution.</p>
    pub fn set_stdout(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.stdout = input;
        self
    }
    /// <p>The standard output from the tool execution.</p>
    pub fn get_stdout(&self) -> &::std::option::Option<::std::string::String> {
        &self.stdout
    }
    /// <p>The standard error output from the tool execution.</p>
    pub fn stderr(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.stderr = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The standard error output from the tool execution.</p>
    pub fn set_stderr(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.stderr = input;
        self
    }
    /// <p>The standard error output from the tool execution.</p>
    pub fn get_stderr(&self) -> &::std::option::Option<::std::string::String> {
        &self.stderr
    }
    /// <p>The exit code from the tool execution.</p>
    pub fn exit_code(mut self, input: i32) -> Self {
        self.exit_code = ::std::option::Option::Some(input);
        self
    }
    /// <p>The exit code from the tool execution.</p>
    pub fn set_exit_code(mut self, input: ::std::option::Option<i32>) -> Self {
        self.exit_code = input;
        self
    }
    /// <p>The exit code from the tool execution.</p>
    pub fn get_exit_code(&self) -> &::std::option::Option<i32> {
        &self.exit_code
    }
    /// <p>The execution time of the tool operation in milliseconds.</p>
    pub fn execution_time(mut self, input: f64) -> Self {
        self.execution_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The execution time of the tool operation in milliseconds.</p>
    pub fn set_execution_time(mut self, input: ::std::option::Option<f64>) -> Self {
        self.execution_time = input;
        self
    }
    /// <p>The execution time of the tool operation in milliseconds.</p>
    pub fn get_execution_time(&self) -> &::std::option::Option<f64> {
        &self.execution_time
    }
    /// Consumes the builder and constructs a [`ToolResultStructuredContent`](crate::types::ToolResultStructuredContent).
    pub fn build(self) -> crate::types::ToolResultStructuredContent {
        crate::types::ToolResultStructuredContent {
            task_id: self.task_id,
            task_status: self.task_status,
            stdout: self.stdout,
            stderr: self.stderr,
            exit_code: self.exit_code,
            execution_time: self.execution_time,
        }
    }
}
