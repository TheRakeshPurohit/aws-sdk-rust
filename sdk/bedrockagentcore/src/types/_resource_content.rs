// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about resource content.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ResourceContent {
    /// <p>The type of resource content.</p>
    pub r#type: crate::types::ResourceContentType,
    /// <p>The URI of the resource content.</p>
    pub uri: ::std::option::Option<::std::string::String>,
    /// <p>The MIME type of the resource content.</p>
    pub mime_type: ::std::option::Option<::std::string::String>,
    /// <p>The text resource content.</p>
    pub text: ::std::option::Option<::std::string::String>,
    /// <p>The binary resource content.</p>
    pub blob: ::std::option::Option<::aws_smithy_types::Blob>,
}
impl ResourceContent {
    /// <p>The type of resource content.</p>
    pub fn r#type(&self) -> &crate::types::ResourceContentType {
        &self.r#type
    }
    /// <p>The URI of the resource content.</p>
    pub fn uri(&self) -> ::std::option::Option<&str> {
        self.uri.as_deref()
    }
    /// <p>The MIME type of the resource content.</p>
    pub fn mime_type(&self) -> ::std::option::Option<&str> {
        self.mime_type.as_deref()
    }
    /// <p>The text resource content.</p>
    pub fn text(&self) -> ::std::option::Option<&str> {
        self.text.as_deref()
    }
    /// <p>The binary resource content.</p>
    pub fn blob(&self) -> ::std::option::Option<&::aws_smithy_types::Blob> {
        self.blob.as_ref()
    }
}
impl ResourceContent {
    /// Creates a new builder-style object to manufacture [`ResourceContent`](crate::types::ResourceContent).
    pub fn builder() -> crate::types::builders::ResourceContentBuilder {
        crate::types::builders::ResourceContentBuilder::default()
    }
}

/// A builder for [`ResourceContent`](crate::types::ResourceContent).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ResourceContentBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::ResourceContentType>,
    pub(crate) uri: ::std::option::Option<::std::string::String>,
    pub(crate) mime_type: ::std::option::Option<::std::string::String>,
    pub(crate) text: ::std::option::Option<::std::string::String>,
    pub(crate) blob: ::std::option::Option<::aws_smithy_types::Blob>,
}
impl ResourceContentBuilder {
    /// <p>The type of resource content.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::ResourceContentType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of resource content.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::ResourceContentType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of resource content.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::ResourceContentType> {
        &self.r#type
    }
    /// <p>The URI of the resource content.</p>
    pub fn uri(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.uri = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The URI of the resource content.</p>
    pub fn set_uri(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.uri = input;
        self
    }
    /// <p>The URI of the resource content.</p>
    pub fn get_uri(&self) -> &::std::option::Option<::std::string::String> {
        &self.uri
    }
    /// <p>The MIME type of the resource content.</p>
    pub fn mime_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.mime_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The MIME type of the resource content.</p>
    pub fn set_mime_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.mime_type = input;
        self
    }
    /// <p>The MIME type of the resource content.</p>
    pub fn get_mime_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.mime_type
    }
    /// <p>The text resource content.</p>
    pub fn text(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.text = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The text resource content.</p>
    pub fn set_text(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.text = input;
        self
    }
    /// <p>The text resource content.</p>
    pub fn get_text(&self) -> &::std::option::Option<::std::string::String> {
        &self.text
    }
    /// <p>The binary resource content.</p>
    pub fn blob(mut self, input: ::aws_smithy_types::Blob) -> Self {
        self.blob = ::std::option::Option::Some(input);
        self
    }
    /// <p>The binary resource content.</p>
    pub fn set_blob(mut self, input: ::std::option::Option<::aws_smithy_types::Blob>) -> Self {
        self.blob = input;
        self
    }
    /// <p>The binary resource content.</p>
    pub fn get_blob(&self) -> &::std::option::Option<::aws_smithy_types::Blob> {
        &self.blob
    }
    /// Consumes the builder and constructs a [`ResourceContent`](crate::types::ResourceContent).
    /// This method will fail if any of the following fields are not set:
    /// - [`r#type`](crate::types::builders::ResourceContentBuilder::type)
    pub fn build(self) -> ::std::result::Result<crate::types::ResourceContent, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ResourceContent {
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building ResourceContent",
                )
            })?,
            uri: self.uri,
            mime_type: self.mime_type,
            text: self.text,
            blob: self.blob,
        })
    }
}
