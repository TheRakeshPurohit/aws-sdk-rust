// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_list_indexes_output_output_next_token(
    input: &crate::operation::list_indexes::ListIndexesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_vector_buckets_output_output_next_token(
    input: &crate::operation::list_vector_buckets::ListVectorBucketsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_vectors_output_output_next_token(
    input: &crate::operation::list_vectors::ListVectorsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_indexes_output_output_indexes(
    input: crate::operation::list_indexes::ListIndexesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::IndexSummary>> {
    let input = input.indexes;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_vector_buckets_output_output_vector_buckets(
    input: crate::operation::list_vector_buckets::ListVectorBucketsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::VectorBucketSummary>> {
    let input = input.vector_buckets;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_vectors_output_output_vectors(
    input: crate::operation::list_vectors::ListVectorsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ListOutputVector>> {
    let input = input.vectors;
    ::std::option::Option::Some(input)
}
