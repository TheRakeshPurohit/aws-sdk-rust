// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::query_vectors::_query_vectors_output::QueryVectorsOutputBuilder;

pub use crate::operation::query_vectors::_query_vectors_input::QueryVectorsInputBuilder;

impl crate::operation::query_vectors::builders::QueryVectorsInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::query_vectors::QueryVectorsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::query_vectors::QueryVectorsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.query_vectors();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `QueryVectors`.
///
/// <note>
/// <p>Amazon S3 Vectors is in preview release for Amazon S3 and is subject to change.</p>
/// </note>
/// <p>Performs an approximate nearest neighbor search query in a vector index using a query vector. By default, it returns the keys of approximate nearest neighbors. You can optionally include the computed distance (between the query vector and each vector in the response), the vector data, and metadata of each vector in the response.</p>
/// <p>To specify the vector index, you can either use both the vector bucket name and the vector index name, or use the vector index Amazon Resource Name (ARN).</p>
/// <dl>
/// <dt>
/// Permissions
/// </dt>
/// <dd>
/// <p>You must have the <code>s3vectors:QueryVectors</code> permission to use this operation. Additional permissions are required based on the request parameters you specify:</p>
/// <ul>
/// <li>
/// <p>With only <code>s3vectors:QueryVectors</code> permission, you can retrieve vector keys of approximate nearest neighbors and computed distances between these vectors. This permission is sufficient only when you don't set any metadata filters and don't request vector data or metadata (by keeping the <code>returnMetadata</code> parameter set to <code>false</code> or not specified).</p></li>
/// <li>
/// <p>If you specify a metadata filter or set <code>returnMetadata</code> to true, you must have both <code>s3vectors:QueryVectors</code> and <code>s3vectors:GetVectors</code> permissions. The request fails with a <code>403 Forbidden error</code> if you request metadata filtering, vector data, or metadata without the <code>s3vectors:GetVectors</code> permission.</p></li>
/// </ul>
/// </dd>
/// </dl>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct QueryVectorsFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::query_vectors::builders::QueryVectorsInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::query_vectors::QueryVectorsOutput,
        crate::operation::query_vectors::QueryVectorsError,
    > for QueryVectorsFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::query_vectors::QueryVectorsOutput,
            crate::operation::query_vectors::QueryVectorsError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl QueryVectorsFluentBuilder {
    /// Creates a new `QueryVectorsFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the QueryVectors as a reference.
    pub fn as_input(&self) -> &crate::operation::query_vectors::builders::QueryVectorsInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::query_vectors::QueryVectorsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::query_vectors::QueryVectorsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::query_vectors::QueryVectors::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::query_vectors::QueryVectors::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::query_vectors::QueryVectorsOutput,
        crate::operation::query_vectors::QueryVectorsError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The name of the vector bucket that contains the vector index.</p>
    pub fn vector_bucket_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.vector_bucket_name(input.into());
        self
    }
    /// <p>The name of the vector bucket that contains the vector index.</p>
    pub fn set_vector_bucket_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_vector_bucket_name(input);
        self
    }
    /// <p>The name of the vector bucket that contains the vector index.</p>
    pub fn get_vector_bucket_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_vector_bucket_name()
    }
    /// <p>The name of the vector index that you want to query.</p>
    pub fn index_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.index_name(input.into());
        self
    }
    /// <p>The name of the vector index that you want to query.</p>
    pub fn set_index_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_index_name(input);
        self
    }
    /// <p>The name of the vector index that you want to query.</p>
    pub fn get_index_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_index_name()
    }
    /// <p>The ARN of the vector index that you want to query.</p>
    pub fn index_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.index_arn(input.into());
        self
    }
    /// <p>The ARN of the vector index that you want to query.</p>
    pub fn set_index_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_index_arn(input);
        self
    }
    /// <p>The ARN of the vector index that you want to query.</p>
    pub fn get_index_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_index_arn()
    }
    /// <p>The number of results to return for each query.</p>
    pub fn top_k(mut self, input: i32) -> Self {
        self.inner = self.inner.top_k(input);
        self
    }
    /// <p>The number of results to return for each query.</p>
    pub fn set_top_k(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_top_k(input);
        self
    }
    /// <p>The number of results to return for each query.</p>
    pub fn get_top_k(&self) -> &::std::option::Option<i32> {
        self.inner.get_top_k()
    }
    /// <p>The query vector. Ensure that the query vector has the same dimension as the dimension of the vector index that's being queried. For example, if your vector index contains vectors with 384 dimensions, your query vector must also have 384 dimensions.</p>
    pub fn query_vector(mut self, input: crate::types::VectorData) -> Self {
        self.inner = self.inner.query_vector(input);
        self
    }
    /// <p>The query vector. Ensure that the query vector has the same dimension as the dimension of the vector index that's being queried. For example, if your vector index contains vectors with 384 dimensions, your query vector must also have 384 dimensions.</p>
    pub fn set_query_vector(mut self, input: ::std::option::Option<crate::types::VectorData>) -> Self {
        self.inner = self.inner.set_query_vector(input);
        self
    }
    /// <p>The query vector. Ensure that the query vector has the same dimension as the dimension of the vector index that's being queried. For example, if your vector index contains vectors with 384 dimensions, your query vector must also have 384 dimensions.</p>
    pub fn get_query_vector(&self) -> &::std::option::Option<crate::types::VectorData> {
        self.inner.get_query_vector()
    }
    /// <p>Metadata filter to apply during the query. For more information about metadata keys, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-vectors-metadata-filtering.html">Metadata filtering</a> in the <i>Amazon S3 User Guide</i>.</p>
    pub fn filter(mut self, input: ::aws_smithy_types::Document) -> Self {
        self.inner = self.inner.filter(input);
        self
    }
    /// <p>Metadata filter to apply during the query. For more information about metadata keys, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-vectors-metadata-filtering.html">Metadata filtering</a> in the <i>Amazon S3 User Guide</i>.</p>
    pub fn set_filter(mut self, input: ::std::option::Option<::aws_smithy_types::Document>) -> Self {
        self.inner = self.inner.set_filter(input);
        self
    }
    /// <p>Metadata filter to apply during the query. For more information about metadata keys, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-vectors-metadata-filtering.html">Metadata filtering</a> in the <i>Amazon S3 User Guide</i>.</p>
    pub fn get_filter(&self) -> &::std::option::Option<::aws_smithy_types::Document> {
        self.inner.get_filter()
    }
    /// <p>Indicates whether to include metadata in the response. The default value is <code>false</code>.</p>
    pub fn return_metadata(mut self, input: bool) -> Self {
        self.inner = self.inner.return_metadata(input);
        self
    }
    /// <p>Indicates whether to include metadata in the response. The default value is <code>false</code>.</p>
    pub fn set_return_metadata(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_return_metadata(input);
        self
    }
    /// <p>Indicates whether to include metadata in the response. The default value is <code>false</code>.</p>
    pub fn get_return_metadata(&self) -> &::std::option::Option<bool> {
        self.inner.get_return_metadata()
    }
    /// <p>Indicates whether to include the computed distance in the response. The default value is <code>false</code>.</p>
    pub fn return_distance(mut self, input: bool) -> Self {
        self.inner = self.inner.return_distance(input);
        self
    }
    /// <p>Indicates whether to include the computed distance in the response. The default value is <code>false</code>.</p>
    pub fn set_return_distance(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_return_distance(input);
        self
    }
    /// <p>Indicates whether to include the computed distance in the response. The default value is <code>false</code>.</p>
    pub fn get_return_distance(&self) -> &::std::option::Option<bool> {
        self.inner.get_return_distance()
    }
}
