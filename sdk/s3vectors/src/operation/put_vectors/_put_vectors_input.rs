// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PutVectorsInput {
    /// <p>The name of the vector bucket that contains the vector index.</p>
    pub vector_bucket_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the vector index where you want to write vectors.</p>
    pub index_name: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the vector index where you want to write vectors.</p>
    pub index_arn: ::std::option::Option<::std::string::String>,
    /// <p>The vectors to add to a vector index. The number of vectors in a single request must not exceed the resource capacity, otherwise the request will be rejected with the error <code>ServiceUnavailableException</code> with the error message "Currently unable to handle the request".</p>
    pub vectors: ::std::option::Option<::std::vec::Vec<crate::types::PutInputVector>>,
}
impl PutVectorsInput {
    /// <p>The name of the vector bucket that contains the vector index.</p>
    pub fn vector_bucket_name(&self) -> ::std::option::Option<&str> {
        self.vector_bucket_name.as_deref()
    }
    /// <p>The name of the vector index where you want to write vectors.</p>
    pub fn index_name(&self) -> ::std::option::Option<&str> {
        self.index_name.as_deref()
    }
    /// <p>The ARN of the vector index where you want to write vectors.</p>
    pub fn index_arn(&self) -> ::std::option::Option<&str> {
        self.index_arn.as_deref()
    }
    /// <p>The vectors to add to a vector index. The number of vectors in a single request must not exceed the resource capacity, otherwise the request will be rejected with the error <code>ServiceUnavailableException</code> with the error message "Currently unable to handle the request".</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.vectors.is_none()`.
    pub fn vectors(&self) -> &[crate::types::PutInputVector] {
        self.vectors.as_deref().unwrap_or_default()
    }
}
impl PutVectorsInput {
    /// Creates a new builder-style object to manufacture [`PutVectorsInput`](crate::operation::put_vectors::PutVectorsInput).
    pub fn builder() -> crate::operation::put_vectors::builders::PutVectorsInputBuilder {
        crate::operation::put_vectors::builders::PutVectorsInputBuilder::default()
    }
}

/// A builder for [`PutVectorsInput`](crate::operation::put_vectors::PutVectorsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct PutVectorsInputBuilder {
    pub(crate) vector_bucket_name: ::std::option::Option<::std::string::String>,
    pub(crate) index_name: ::std::option::Option<::std::string::String>,
    pub(crate) index_arn: ::std::option::Option<::std::string::String>,
    pub(crate) vectors: ::std::option::Option<::std::vec::Vec<crate::types::PutInputVector>>,
}
impl PutVectorsInputBuilder {
    /// <p>The name of the vector bucket that contains the vector index.</p>
    pub fn vector_bucket_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vector_bucket_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the vector bucket that contains the vector index.</p>
    pub fn set_vector_bucket_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vector_bucket_name = input;
        self
    }
    /// <p>The name of the vector bucket that contains the vector index.</p>
    pub fn get_vector_bucket_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.vector_bucket_name
    }
    /// <p>The name of the vector index where you want to write vectors.</p>
    pub fn index_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.index_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the vector index where you want to write vectors.</p>
    pub fn set_index_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.index_name = input;
        self
    }
    /// <p>The name of the vector index where you want to write vectors.</p>
    pub fn get_index_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.index_name
    }
    /// <p>The ARN of the vector index where you want to write vectors.</p>
    pub fn index_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.index_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the vector index where you want to write vectors.</p>
    pub fn set_index_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.index_arn = input;
        self
    }
    /// <p>The ARN of the vector index where you want to write vectors.</p>
    pub fn get_index_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.index_arn
    }
    /// Appends an item to `vectors`.
    ///
    /// To override the contents of this collection use [`set_vectors`](Self::set_vectors).
    ///
    /// <p>The vectors to add to a vector index. The number of vectors in a single request must not exceed the resource capacity, otherwise the request will be rejected with the error <code>ServiceUnavailableException</code> with the error message "Currently unable to handle the request".</p>
    pub fn vectors(mut self, input: crate::types::PutInputVector) -> Self {
        let mut v = self.vectors.unwrap_or_default();
        v.push(input);
        self.vectors = ::std::option::Option::Some(v);
        self
    }
    /// <p>The vectors to add to a vector index. The number of vectors in a single request must not exceed the resource capacity, otherwise the request will be rejected with the error <code>ServiceUnavailableException</code> with the error message "Currently unable to handle the request".</p>
    pub fn set_vectors(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::PutInputVector>>) -> Self {
        self.vectors = input;
        self
    }
    /// <p>The vectors to add to a vector index. The number of vectors in a single request must not exceed the resource capacity, otherwise the request will be rejected with the error <code>ServiceUnavailableException</code> with the error message "Currently unable to handle the request".</p>
    pub fn get_vectors(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PutInputVector>> {
        &self.vectors
    }
    /// Consumes the builder and constructs a [`PutVectorsInput`](crate::operation::put_vectors::PutVectorsInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::put_vectors::PutVectorsInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::put_vectors::PutVectorsInput {
            vector_bucket_name: self.vector_bucket_name,
            index_name: self.index_name,
            index_arn: self.index_arn,
            vectors: self.vectors,
        })
    }
}
