// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateIndexInput {
    /// <p>The name of the vector bucket to create the vector index in.</p>
    pub vector_bucket_name: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the vector bucket to create the vector index in.</p>
    pub vector_bucket_arn: ::std::option::Option<::std::string::String>,
    /// <p>The name of the vector index to create.</p>
    pub index_name: ::std::option::Option<::std::string::String>,
    /// <p>The data type of the vectors to be inserted into the vector index.</p>
    pub data_type: ::std::option::Option<crate::types::DataType>,
    /// <p>The dimensions of the vectors to be inserted into the vector index.</p>
    pub dimension: ::std::option::Option<i32>,
    /// <p>The distance metric to be used for similarity search.</p>
    pub distance_metric: ::std::option::Option<crate::types::DistanceMetric>,
    /// <p>The metadata configuration for the vector index.</p>
    pub metadata_configuration: ::std::option::Option<crate::types::MetadataConfiguration>,
}
impl CreateIndexInput {
    /// <p>The name of the vector bucket to create the vector index in.</p>
    pub fn vector_bucket_name(&self) -> ::std::option::Option<&str> {
        self.vector_bucket_name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the vector bucket to create the vector index in.</p>
    pub fn vector_bucket_arn(&self) -> ::std::option::Option<&str> {
        self.vector_bucket_arn.as_deref()
    }
    /// <p>The name of the vector index to create.</p>
    pub fn index_name(&self) -> ::std::option::Option<&str> {
        self.index_name.as_deref()
    }
    /// <p>The data type of the vectors to be inserted into the vector index.</p>
    pub fn data_type(&self) -> ::std::option::Option<&crate::types::DataType> {
        self.data_type.as_ref()
    }
    /// <p>The dimensions of the vectors to be inserted into the vector index.</p>
    pub fn dimension(&self) -> ::std::option::Option<i32> {
        self.dimension
    }
    /// <p>The distance metric to be used for similarity search.</p>
    pub fn distance_metric(&self) -> ::std::option::Option<&crate::types::DistanceMetric> {
        self.distance_metric.as_ref()
    }
    /// <p>The metadata configuration for the vector index.</p>
    pub fn metadata_configuration(&self) -> ::std::option::Option<&crate::types::MetadataConfiguration> {
        self.metadata_configuration.as_ref()
    }
}
impl CreateIndexInput {
    /// Creates a new builder-style object to manufacture [`CreateIndexInput`](crate::operation::create_index::CreateIndexInput).
    pub fn builder() -> crate::operation::create_index::builders::CreateIndexInputBuilder {
        crate::operation::create_index::builders::CreateIndexInputBuilder::default()
    }
}

/// A builder for [`CreateIndexInput`](crate::operation::create_index::CreateIndexInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateIndexInputBuilder {
    pub(crate) vector_bucket_name: ::std::option::Option<::std::string::String>,
    pub(crate) vector_bucket_arn: ::std::option::Option<::std::string::String>,
    pub(crate) index_name: ::std::option::Option<::std::string::String>,
    pub(crate) data_type: ::std::option::Option<crate::types::DataType>,
    pub(crate) dimension: ::std::option::Option<i32>,
    pub(crate) distance_metric: ::std::option::Option<crate::types::DistanceMetric>,
    pub(crate) metadata_configuration: ::std::option::Option<crate::types::MetadataConfiguration>,
}
impl CreateIndexInputBuilder {
    /// <p>The name of the vector bucket to create the vector index in.</p>
    pub fn vector_bucket_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vector_bucket_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the vector bucket to create the vector index in.</p>
    pub fn set_vector_bucket_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vector_bucket_name = input;
        self
    }
    /// <p>The name of the vector bucket to create the vector index in.</p>
    pub fn get_vector_bucket_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.vector_bucket_name
    }
    /// <p>The Amazon Resource Name (ARN) of the vector bucket to create the vector index in.</p>
    pub fn vector_bucket_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vector_bucket_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the vector bucket to create the vector index in.</p>
    pub fn set_vector_bucket_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vector_bucket_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the vector bucket to create the vector index in.</p>
    pub fn get_vector_bucket_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.vector_bucket_arn
    }
    /// <p>The name of the vector index to create.</p>
    /// This field is required.
    pub fn index_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.index_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the vector index to create.</p>
    pub fn set_index_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.index_name = input;
        self
    }
    /// <p>The name of the vector index to create.</p>
    pub fn get_index_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.index_name
    }
    /// <p>The data type of the vectors to be inserted into the vector index.</p>
    /// This field is required.
    pub fn data_type(mut self, input: crate::types::DataType) -> Self {
        self.data_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The data type of the vectors to be inserted into the vector index.</p>
    pub fn set_data_type(mut self, input: ::std::option::Option<crate::types::DataType>) -> Self {
        self.data_type = input;
        self
    }
    /// <p>The data type of the vectors to be inserted into the vector index.</p>
    pub fn get_data_type(&self) -> &::std::option::Option<crate::types::DataType> {
        &self.data_type
    }
    /// <p>The dimensions of the vectors to be inserted into the vector index.</p>
    /// This field is required.
    pub fn dimension(mut self, input: i32) -> Self {
        self.dimension = ::std::option::Option::Some(input);
        self
    }
    /// <p>The dimensions of the vectors to be inserted into the vector index.</p>
    pub fn set_dimension(mut self, input: ::std::option::Option<i32>) -> Self {
        self.dimension = input;
        self
    }
    /// <p>The dimensions of the vectors to be inserted into the vector index.</p>
    pub fn get_dimension(&self) -> &::std::option::Option<i32> {
        &self.dimension
    }
    /// <p>The distance metric to be used for similarity search.</p>
    /// This field is required.
    pub fn distance_metric(mut self, input: crate::types::DistanceMetric) -> Self {
        self.distance_metric = ::std::option::Option::Some(input);
        self
    }
    /// <p>The distance metric to be used for similarity search.</p>
    pub fn set_distance_metric(mut self, input: ::std::option::Option<crate::types::DistanceMetric>) -> Self {
        self.distance_metric = input;
        self
    }
    /// <p>The distance metric to be used for similarity search.</p>
    pub fn get_distance_metric(&self) -> &::std::option::Option<crate::types::DistanceMetric> {
        &self.distance_metric
    }
    /// <p>The metadata configuration for the vector index.</p>
    pub fn metadata_configuration(mut self, input: crate::types::MetadataConfiguration) -> Self {
        self.metadata_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The metadata configuration for the vector index.</p>
    pub fn set_metadata_configuration(mut self, input: ::std::option::Option<crate::types::MetadataConfiguration>) -> Self {
        self.metadata_configuration = input;
        self
    }
    /// <p>The metadata configuration for the vector index.</p>
    pub fn get_metadata_configuration(&self) -> &::std::option::Option<crate::types::MetadataConfiguration> {
        &self.metadata_configuration
    }
    /// Consumes the builder and constructs a [`CreateIndexInput`](crate::operation::create_index::CreateIndexInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::create_index::CreateIndexInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_index::CreateIndexInput {
            vector_bucket_name: self.vector_bucket_name,
            vector_bucket_arn: self.vector_bucket_arn,
            index_name: self.index_name,
            data_type: self.data_type,
            dimension: self.dimension,
            distance_metric: self.distance_metric,
            metadata_configuration: self.metadata_configuration,
        })
    }
}
