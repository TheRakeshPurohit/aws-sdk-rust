// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DeleteVectorsInput {
    /// <p>The name of the vector bucket that contains the vector index.</p>
    pub vector_bucket_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the vector index that contains a vector you want to delete.</p>
    pub index_name: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the vector index that contains a vector you want to delete.</p>
    pub index_arn: ::std::option::Option<::std::string::String>,
    /// <p>The keys of the vectors to delete.</p>
    pub keys: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl DeleteVectorsInput {
    /// <p>The name of the vector bucket that contains the vector index.</p>
    pub fn vector_bucket_name(&self) -> ::std::option::Option<&str> {
        self.vector_bucket_name.as_deref()
    }
    /// <p>The name of the vector index that contains a vector you want to delete.</p>
    pub fn index_name(&self) -> ::std::option::Option<&str> {
        self.index_name.as_deref()
    }
    /// <p>The ARN of the vector index that contains a vector you want to delete.</p>
    pub fn index_arn(&self) -> ::std::option::Option<&str> {
        self.index_arn.as_deref()
    }
    /// <p>The keys of the vectors to delete.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.keys.is_none()`.
    pub fn keys(&self) -> &[::std::string::String] {
        self.keys.as_deref().unwrap_or_default()
    }
}
impl DeleteVectorsInput {
    /// Creates a new builder-style object to manufacture [`DeleteVectorsInput`](crate::operation::delete_vectors::DeleteVectorsInput).
    pub fn builder() -> crate::operation::delete_vectors::builders::DeleteVectorsInputBuilder {
        crate::operation::delete_vectors::builders::DeleteVectorsInputBuilder::default()
    }
}

/// A builder for [`DeleteVectorsInput`](crate::operation::delete_vectors::DeleteVectorsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DeleteVectorsInputBuilder {
    pub(crate) vector_bucket_name: ::std::option::Option<::std::string::String>,
    pub(crate) index_name: ::std::option::Option<::std::string::String>,
    pub(crate) index_arn: ::std::option::Option<::std::string::String>,
    pub(crate) keys: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl DeleteVectorsInputBuilder {
    /// <p>The name of the vector bucket that contains the vector index.</p>
    pub fn vector_bucket_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vector_bucket_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the vector bucket that contains the vector index.</p>
    pub fn set_vector_bucket_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vector_bucket_name = input;
        self
    }
    /// <p>The name of the vector bucket that contains the vector index.</p>
    pub fn get_vector_bucket_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.vector_bucket_name
    }
    /// <p>The name of the vector index that contains a vector you want to delete.</p>
    pub fn index_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.index_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the vector index that contains a vector you want to delete.</p>
    pub fn set_index_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.index_name = input;
        self
    }
    /// <p>The name of the vector index that contains a vector you want to delete.</p>
    pub fn get_index_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.index_name
    }
    /// <p>The ARN of the vector index that contains a vector you want to delete.</p>
    pub fn index_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.index_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the vector index that contains a vector you want to delete.</p>
    pub fn set_index_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.index_arn = input;
        self
    }
    /// <p>The ARN of the vector index that contains a vector you want to delete.</p>
    pub fn get_index_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.index_arn
    }
    /// Appends an item to `keys`.
    ///
    /// To override the contents of this collection use [`set_keys`](Self::set_keys).
    ///
    /// <p>The keys of the vectors to delete.</p>
    pub fn keys(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.keys.unwrap_or_default();
        v.push(input.into());
        self.keys = ::std::option::Option::Some(v);
        self
    }
    /// <p>The keys of the vectors to delete.</p>
    pub fn set_keys(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.keys = input;
        self
    }
    /// <p>The keys of the vectors to delete.</p>
    pub fn get_keys(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.keys
    }
    /// Consumes the builder and constructs a [`DeleteVectorsInput`](crate::operation::delete_vectors::DeleteVectorsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::delete_vectors::DeleteVectorsInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::delete_vectors::DeleteVectorsInput {
            vector_bucket_name: self.vector_bucket_name,
            index_name: self.index_name,
            index_arn: self.index_arn,
            keys: self.keys,
        })
    }
}
