// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::delete_vector_bucket::_delete_vector_bucket_output::DeleteVectorBucketOutputBuilder;

pub use crate::operation::delete_vector_bucket::_delete_vector_bucket_input::DeleteVectorBucketInputBuilder;

impl crate::operation::delete_vector_bucket::builders::DeleteVectorBucketInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::delete_vector_bucket::DeleteVectorBucketOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_vector_bucket::DeleteVectorBucketError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.delete_vector_bucket();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `DeleteVectorBucket`.
///
/// <note>
/// <p>Amazon S3 Vectors is in preview release for Amazon S3 and is subject to change.</p>
/// </note>
/// <p>Deletes a vector bucket. All vector indexes in the vector bucket must be deleted before the vector bucket can be deleted. To perform this operation, you must use either the vector bucket name or the vector bucket Amazon Resource Name (ARN).</p>
/// <dl>
/// <dt>
/// Permissions
/// </dt>
/// <dd>
/// <p>You must have the <code>s3vectors:DeleteVectorBucket</code> permission to use this operation.</p>
/// </dd>
/// </dl>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct DeleteVectorBucketFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::delete_vector_bucket::builders::DeleteVectorBucketInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::delete_vector_bucket::DeleteVectorBucketOutput,
        crate::operation::delete_vector_bucket::DeleteVectorBucketError,
    > for DeleteVectorBucketFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::delete_vector_bucket::DeleteVectorBucketOutput,
            crate::operation::delete_vector_bucket::DeleteVectorBucketError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl DeleteVectorBucketFluentBuilder {
    /// Creates a new `DeleteVectorBucketFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the DeleteVectorBucket as a reference.
    pub fn as_input(&self) -> &crate::operation::delete_vector_bucket::builders::DeleteVectorBucketInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::delete_vector_bucket::DeleteVectorBucketOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_vector_bucket::DeleteVectorBucketError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::delete_vector_bucket::DeleteVectorBucket::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::delete_vector_bucket::DeleteVectorBucket::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::delete_vector_bucket::DeleteVectorBucketOutput,
        crate::operation::delete_vector_bucket::DeleteVectorBucketError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The name of the vector bucket to delete.</p>
    pub fn vector_bucket_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.vector_bucket_name(input.into());
        self
    }
    /// <p>The name of the vector bucket to delete.</p>
    pub fn set_vector_bucket_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_vector_bucket_name(input);
        self
    }
    /// <p>The name of the vector bucket to delete.</p>
    pub fn get_vector_bucket_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_vector_bucket_name()
    }
    /// <p>The ARN of the vector bucket to delete.</p>
    pub fn vector_bucket_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.vector_bucket_arn(input.into());
        self
    }
    /// <p>The ARN of the vector bucket to delete.</p>
    pub fn set_vector_bucket_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_vector_bucket_arn(input);
        self
    }
    /// <p>The ARN of the vector bucket to delete.</p>
    pub fn get_vector_bucket_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_vector_bucket_arn()
    }
}
