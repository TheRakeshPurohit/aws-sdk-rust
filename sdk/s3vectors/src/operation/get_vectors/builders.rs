// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::get_vectors::_get_vectors_output::GetVectorsOutputBuilder;

pub use crate::operation::get_vectors::_get_vectors_input::GetVectorsInputBuilder;

impl crate::operation::get_vectors::builders::GetVectorsInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::get_vectors::GetVectorsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_vectors::GetVectorsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.get_vectors();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `GetVectors`.
///
/// <note>
/// <p>Amazon S3 Vectors is in preview release for Amazon S3 and is subject to change.</p>
/// </note>
/// <p>Returns vector attributes. To specify the vector index, you can either use both the vector bucket name and the vector index name, or use the vector index Amazon Resource Name (ARN).</p>
/// <dl>
/// <dt>
/// Permissions
/// </dt>
/// <dd>
/// <p>You must have the <code>s3vectors:GetVectors</code> permission to use this operation.</p>
/// </dd>
/// </dl>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct GetVectorsFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::get_vectors::builders::GetVectorsInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::get_vectors::GetVectorsOutput,
        crate::operation::get_vectors::GetVectorsError,
    > for GetVectorsFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::get_vectors::GetVectorsOutput,
            crate::operation::get_vectors::GetVectorsError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl GetVectorsFluentBuilder {
    /// Creates a new `GetVectorsFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the GetVectors as a reference.
    pub fn as_input(&self) -> &crate::operation::get_vectors::builders::GetVectorsInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_vectors::GetVectorsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_vectors::GetVectorsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::get_vectors::GetVectors::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::get_vectors::GetVectors::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::get_vectors::GetVectorsOutput,
        crate::operation::get_vectors::GetVectorsError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The name of the vector bucket that contains the vector index.</p>
    pub fn vector_bucket_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.vector_bucket_name(input.into());
        self
    }
    /// <p>The name of the vector bucket that contains the vector index.</p>
    pub fn set_vector_bucket_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_vector_bucket_name(input);
        self
    }
    /// <p>The name of the vector bucket that contains the vector index.</p>
    pub fn get_vector_bucket_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_vector_bucket_name()
    }
    /// <p>The name of the vector index.</p>
    pub fn index_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.index_name(input.into());
        self
    }
    /// <p>The name of the vector index.</p>
    pub fn set_index_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_index_name(input);
        self
    }
    /// <p>The name of the vector index.</p>
    pub fn get_index_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_index_name()
    }
    /// <p>The ARN of the vector index.</p>
    pub fn index_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.index_arn(input.into());
        self
    }
    /// <p>The ARN of the vector index.</p>
    pub fn set_index_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_index_arn(input);
        self
    }
    /// <p>The ARN of the vector index.</p>
    pub fn get_index_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_index_arn()
    }
    ///
    /// Appends an item to `keys`.
    ///
    /// To override the contents of this collection use [`set_keys`](Self::set_keys).
    ///
    /// <p>The names of the vectors you want to return attributes for.</p>
    pub fn keys(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.keys(input.into());
        self
    }
    /// <p>The names of the vectors you want to return attributes for.</p>
    pub fn set_keys(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_keys(input);
        self
    }
    /// <p>The names of the vectors you want to return attributes for.</p>
    pub fn get_keys(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_keys()
    }
    /// <p>Indicates whether to include the vector data in the response. The default value is <code>false</code>.</p>
    pub fn return_data(mut self, input: bool) -> Self {
        self.inner = self.inner.return_data(input);
        self
    }
    /// <p>Indicates whether to include the vector data in the response. The default value is <code>false</code>.</p>
    pub fn set_return_data(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_return_data(input);
        self
    }
    /// <p>Indicates whether to include the vector data in the response. The default value is <code>false</code>.</p>
    pub fn get_return_data(&self) -> &::std::option::Option<bool> {
        self.inner.get_return_data()
    }
    /// <p>Indicates whether to include metadata in the response. The default value is <code>false</code>.</p>
    pub fn return_metadata(mut self, input: bool) -> Self {
        self.inner = self.inner.return_metadata(input);
        self
    }
    /// <p>Indicates whether to include metadata in the response. The default value is <code>false</code>.</p>
    pub fn set_return_metadata(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_return_metadata(input);
        self
    }
    /// <p>Indicates whether to include metadata in the response. The default value is <code>false</code>.</p>
    pub fn get_return_metadata(&self) -> &::std::option::Option<bool> {
        self.inner.get_return_metadata()
    }
}
