// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <note>
/// <p>Amazon S3 Vectors is in preview release for Amazon S3 and is subject to change.</p>
/// </note>
/// <p>The attributes of a vector to add to a vector index.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PutInputVector {
    /// <p>The name of the vector. The key uniquely identifies the vector in a vector index.</p>
    pub key: ::std::string::String,
    /// <p>The vector data of the vector.</p>
    /// <p>Vector dimensions must match the dimension count that's configured for the vector index.</p>
    /// <ul>
    /// <li>
    /// <p>For the <code>cosine</code> distance metric, zero vectors (vectors containing all zeros) aren't allowed.</p></li>
    /// <li>
    /// <p>For both <code>cosine</code> and <code>euclidean</code> distance metrics, vector data must contain only valid floating-point values. Invalid values such as NaN (Not a Number) or Infinity aren't allowed.</p></li>
    /// </ul>
    pub data: ::std::option::Option<crate::types::VectorData>,
    /// <p>Metadata about the vector. All metadata entries undergo validation to ensure they meet the format requirements for size and data types.</p>
    pub metadata: ::aws_smithy_types::Document,
}
impl PutInputVector {
    /// <p>The name of the vector. The key uniquely identifies the vector in a vector index.</p>
    pub fn key(&self) -> &str {
        use std::ops::Deref;
        self.key.deref()
    }
    /// <p>The vector data of the vector.</p>
    /// <p>Vector dimensions must match the dimension count that's configured for the vector index.</p>
    /// <ul>
    /// <li>
    /// <p>For the <code>cosine</code> distance metric, zero vectors (vectors containing all zeros) aren't allowed.</p></li>
    /// <li>
    /// <p>For both <code>cosine</code> and <code>euclidean</code> distance metrics, vector data must contain only valid floating-point values. Invalid values such as NaN (Not a Number) or Infinity aren't allowed.</p></li>
    /// </ul>
    pub fn data(&self) -> ::std::option::Option<&crate::types::VectorData> {
        self.data.as_ref()
    }
    /// <p>Metadata about the vector. All metadata entries undergo validation to ensure they meet the format requirements for size and data types.</p>
    pub fn metadata(&self) -> &::aws_smithy_types::Document {
        &self.metadata
    }
}
impl PutInputVector {
    /// Creates a new builder-style object to manufacture [`PutInputVector`](crate::types::PutInputVector).
    pub fn builder() -> crate::types::builders::PutInputVectorBuilder {
        crate::types::builders::PutInputVectorBuilder::default()
    }
}

/// A builder for [`PutInputVector`](crate::types::PutInputVector).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct PutInputVectorBuilder {
    pub(crate) key: ::std::option::Option<::std::string::String>,
    pub(crate) data: ::std::option::Option<crate::types::VectorData>,
    pub(crate) metadata: ::std::option::Option<::aws_smithy_types::Document>,
}
impl PutInputVectorBuilder {
    /// <p>The name of the vector. The key uniquely identifies the vector in a vector index.</p>
    /// This field is required.
    pub fn key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the vector. The key uniquely identifies the vector in a vector index.</p>
    pub fn set_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.key = input;
        self
    }
    /// <p>The name of the vector. The key uniquely identifies the vector in a vector index.</p>
    pub fn get_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.key
    }
    /// <p>The vector data of the vector.</p>
    /// <p>Vector dimensions must match the dimension count that's configured for the vector index.</p>
    /// <ul>
    /// <li>
    /// <p>For the <code>cosine</code> distance metric, zero vectors (vectors containing all zeros) aren't allowed.</p></li>
    /// <li>
    /// <p>For both <code>cosine</code> and <code>euclidean</code> distance metrics, vector data must contain only valid floating-point values. Invalid values such as NaN (Not a Number) or Infinity aren't allowed.</p></li>
    /// </ul>
    /// This field is required.
    pub fn data(mut self, input: crate::types::VectorData) -> Self {
        self.data = ::std::option::Option::Some(input);
        self
    }
    /// <p>The vector data of the vector.</p>
    /// <p>Vector dimensions must match the dimension count that's configured for the vector index.</p>
    /// <ul>
    /// <li>
    /// <p>For the <code>cosine</code> distance metric, zero vectors (vectors containing all zeros) aren't allowed.</p></li>
    /// <li>
    /// <p>For both <code>cosine</code> and <code>euclidean</code> distance metrics, vector data must contain only valid floating-point values. Invalid values such as NaN (Not a Number) or Infinity aren't allowed.</p></li>
    /// </ul>
    pub fn set_data(mut self, input: ::std::option::Option<crate::types::VectorData>) -> Self {
        self.data = input;
        self
    }
    /// <p>The vector data of the vector.</p>
    /// <p>Vector dimensions must match the dimension count that's configured for the vector index.</p>
    /// <ul>
    /// <li>
    /// <p>For the <code>cosine</code> distance metric, zero vectors (vectors containing all zeros) aren't allowed.</p></li>
    /// <li>
    /// <p>For both <code>cosine</code> and <code>euclidean</code> distance metrics, vector data must contain only valid floating-point values. Invalid values such as NaN (Not a Number) or Infinity aren't allowed.</p></li>
    /// </ul>
    pub fn get_data(&self) -> &::std::option::Option<crate::types::VectorData> {
        &self.data
    }
    /// <p>Metadata about the vector. All metadata entries undergo validation to ensure they meet the format requirements for size and data types.</p>
    pub fn metadata(mut self, input: ::aws_smithy_types::Document) -> Self {
        self.metadata = ::std::option::Option::Some(input);
        self
    }
    /// <p>Metadata about the vector. All metadata entries undergo validation to ensure they meet the format requirements for size and data types.</p>
    pub fn set_metadata(mut self, input: ::std::option::Option<::aws_smithy_types::Document>) -> Self {
        self.metadata = input;
        self
    }
    /// <p>Metadata about the vector. All metadata entries undergo validation to ensure they meet the format requirements for size and data types.</p>
    pub fn get_metadata(&self) -> &::std::option::Option<::aws_smithy_types::Document> {
        &self.metadata
    }
    /// Consumes the builder and constructs a [`PutInputVector`](crate::types::PutInputVector).
    /// This method will fail if any of the following fields are not set:
    /// - [`key`](crate::types::builders::PutInputVectorBuilder::key)
    pub fn build(self) -> ::std::result::Result<crate::types::PutInputVector, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::PutInputVector {
            key: self.key.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "key",
                    "key was not specified but it is required when building PutInputVector",
                )
            })?,
            data: self.data,
            metadata: self.metadata.unwrap_or_else(|| {
                let json_bytes = br#"{}"#;
                let mut tokens = ::aws_smithy_json::deserialize::json_token_iter(json_bytes).peekable();
                ::aws_smithy_json::deserialize::token::expect_document(&mut tokens).expect("well formed json")
            }),
        })
    }
}
