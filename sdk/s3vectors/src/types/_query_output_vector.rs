// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <note>
/// <p>Amazon S3 Vectors is in preview release for Amazon S3 and is subject to change.</p>
/// </note>
/// <p>The attributes of a vector in the approximate nearest neighbor search.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct QueryOutputVector {
    /// <p>The key of the vector in the approximate nearest neighbor search.</p>
    pub key: ::std::string::String,
    /// <p>The vector data associated with the vector, if requested.</p>
    pub data: ::std::option::Option<crate::types::VectorData>,
    /// <p>The metadata associated with the vector, if requested.</p>
    pub metadata: ::std::option::Option<::aws_smithy_types::Document>,
    /// <p>The measure of similarity between the vector in the response and the query vector.</p>
    pub distance: ::std::option::Option<f32>,
}
impl QueryOutputVector {
    /// <p>The key of the vector in the approximate nearest neighbor search.</p>
    pub fn key(&self) -> &str {
        use std::ops::Deref;
        self.key.deref()
    }
    /// <p>The vector data associated with the vector, if requested.</p>
    pub fn data(&self) -> ::std::option::Option<&crate::types::VectorData> {
        self.data.as_ref()
    }
    /// <p>The metadata associated with the vector, if requested.</p>
    pub fn metadata(&self) -> ::std::option::Option<&::aws_smithy_types::Document> {
        self.metadata.as_ref()
    }
    /// <p>The measure of similarity between the vector in the response and the query vector.</p>
    pub fn distance(&self) -> ::std::option::Option<f32> {
        self.distance
    }
}
impl QueryOutputVector {
    /// Creates a new builder-style object to manufacture [`QueryOutputVector`](crate::types::QueryOutputVector).
    pub fn builder() -> crate::types::builders::QueryOutputVectorBuilder {
        crate::types::builders::QueryOutputVectorBuilder::default()
    }
}

/// A builder for [`QueryOutputVector`](crate::types::QueryOutputVector).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct QueryOutputVectorBuilder {
    pub(crate) key: ::std::option::Option<::std::string::String>,
    pub(crate) data: ::std::option::Option<crate::types::VectorData>,
    pub(crate) metadata: ::std::option::Option<::aws_smithy_types::Document>,
    pub(crate) distance: ::std::option::Option<f32>,
}
impl QueryOutputVectorBuilder {
    /// <p>The key of the vector in the approximate nearest neighbor search.</p>
    /// This field is required.
    pub fn key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The key of the vector in the approximate nearest neighbor search.</p>
    pub fn set_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.key = input;
        self
    }
    /// <p>The key of the vector in the approximate nearest neighbor search.</p>
    pub fn get_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.key
    }
    /// <p>The vector data associated with the vector, if requested.</p>
    pub fn data(mut self, input: crate::types::VectorData) -> Self {
        self.data = ::std::option::Option::Some(input);
        self
    }
    /// <p>The vector data associated with the vector, if requested.</p>
    pub fn set_data(mut self, input: ::std::option::Option<crate::types::VectorData>) -> Self {
        self.data = input;
        self
    }
    /// <p>The vector data associated with the vector, if requested.</p>
    pub fn get_data(&self) -> &::std::option::Option<crate::types::VectorData> {
        &self.data
    }
    /// <p>The metadata associated with the vector, if requested.</p>
    pub fn metadata(mut self, input: ::aws_smithy_types::Document) -> Self {
        self.metadata = ::std::option::Option::Some(input);
        self
    }
    /// <p>The metadata associated with the vector, if requested.</p>
    pub fn set_metadata(mut self, input: ::std::option::Option<::aws_smithy_types::Document>) -> Self {
        self.metadata = input;
        self
    }
    /// <p>The metadata associated with the vector, if requested.</p>
    pub fn get_metadata(&self) -> &::std::option::Option<::aws_smithy_types::Document> {
        &self.metadata
    }
    /// <p>The measure of similarity between the vector in the response and the query vector.</p>
    pub fn distance(mut self, input: f32) -> Self {
        self.distance = ::std::option::Option::Some(input);
        self
    }
    /// <p>The measure of similarity between the vector in the response and the query vector.</p>
    pub fn set_distance(mut self, input: ::std::option::Option<f32>) -> Self {
        self.distance = input;
        self
    }
    /// <p>The measure of similarity between the vector in the response and the query vector.</p>
    pub fn get_distance(&self) -> &::std::option::Option<f32> {
        &self.distance
    }
    /// Consumes the builder and constructs a [`QueryOutputVector`](crate::types::QueryOutputVector).
    /// This method will fail if any of the following fields are not set:
    /// - [`key`](crate::types::builders::QueryOutputVectorBuilder::key)
    pub fn build(self) -> ::std::result::Result<crate::types::QueryOutputVector, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::QueryOutputVector {
            key: self.key.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "key",
                    "key was not specified but it is required when building QueryOutputVector",
                )
            })?,
            data: self.data,
            metadata: self.metadata,
            distance: self.distance,
        })
    }
}
