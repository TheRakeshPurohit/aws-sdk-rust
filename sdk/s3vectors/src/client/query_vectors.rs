// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`QueryVectors`](crate::operation::query_vectors::builders::QueryVectorsFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`vector_bucket_name(impl Into<String>)`](crate::operation::query_vectors::builders::QueryVectorsFluentBuilder::vector_bucket_name) / [`set_vector_bucket_name(Option<String>)`](crate::operation::query_vectors::builders::QueryVectorsFluentBuilder::set_vector_bucket_name):<br>required: **false**<br><p>The name of the vector bucket that contains the vector index.</p><br>
    ///   - [`index_name(impl Into<String>)`](crate::operation::query_vectors::builders::QueryVectorsFluentBuilder::index_name) / [`set_index_name(Option<String>)`](crate::operation::query_vectors::builders::QueryVectorsFluentBuilder::set_index_name):<br>required: **false**<br><p>The name of the vector index that you want to query.</p><br>
    ///   - [`index_arn(impl Into<String>)`](crate::operation::query_vectors::builders::QueryVectorsFluentBuilder::index_arn) / [`set_index_arn(Option<String>)`](crate::operation::query_vectors::builders::QueryVectorsFluentBuilder::set_index_arn):<br>required: **false**<br><p>The ARN of the vector index that you want to query.</p><br>
    ///   - [`top_k(i32)`](crate::operation::query_vectors::builders::QueryVectorsFluentBuilder::top_k) / [`set_top_k(Option<i32>)`](crate::operation::query_vectors::builders::QueryVectorsFluentBuilder::set_top_k):<br>required: **true**<br><p>The number of results to return for each query.</p><br>
    ///   - [`query_vector(VectorData)`](crate::operation::query_vectors::builders::QueryVectorsFluentBuilder::query_vector) / [`set_query_vector(Option<VectorData>)`](crate::operation::query_vectors::builders::QueryVectorsFluentBuilder::set_query_vector):<br>required: **true**<br><p>The query vector. Ensure that the query vector has the same dimension as the dimension of the vector index that's being queried. For example, if your vector index contains vectors with 384 dimensions, your query vector must also have 384 dimensions.</p><br>
    ///   - [`filter(Document)`](crate::operation::query_vectors::builders::QueryVectorsFluentBuilder::filter) / [`set_filter(Option<Document>)`](crate::operation::query_vectors::builders::QueryVectorsFluentBuilder::set_filter):<br>required: **false**<br><p>Metadata filter to apply during the query. For more information about metadata keys, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-vectors-metadata-filtering.html">Metadata filtering</a> in the <i>Amazon S3 User Guide</i>.</p><br>
    ///   - [`return_metadata(bool)`](crate::operation::query_vectors::builders::QueryVectorsFluentBuilder::return_metadata) / [`set_return_metadata(Option<bool>)`](crate::operation::query_vectors::builders::QueryVectorsFluentBuilder::set_return_metadata):<br>required: **false**<br><p>Indicates whether to include metadata in the response. The default value is <code>false</code>.</p><br>
    ///   - [`return_distance(bool)`](crate::operation::query_vectors::builders::QueryVectorsFluentBuilder::return_distance) / [`set_return_distance(Option<bool>)`](crate::operation::query_vectors::builders::QueryVectorsFluentBuilder::set_return_distance):<br>required: **false**<br><p>Indicates whether to include the computed distance in the response. The default value is <code>false</code>.</p><br>
    /// - On success, responds with [`QueryVectorsOutput`](crate::operation::query_vectors::QueryVectorsOutput) with field(s):
    ///   - [`vectors(Vec::<QueryOutputVector>)`](crate::operation::query_vectors::QueryVectorsOutput::vectors): <p>The vectors in the approximate nearest neighbor search.</p>
    /// - On failure, responds with [`SdkError<QueryVectorsError>`](crate::operation::query_vectors::QueryVectorsError)
    pub fn query_vectors(&self) -> crate::operation::query_vectors::builders::QueryVectorsFluentBuilder {
        crate::operation::query_vectors::builders::QueryVectorsFluentBuilder::new(self.handle.clone())
    }
}
