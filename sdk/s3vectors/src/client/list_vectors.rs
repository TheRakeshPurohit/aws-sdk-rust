// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ListVectors`](crate::operation::list_vectors::builders::ListVectorsFluentBuilder) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::operation::list_vectors::builders::ListVectorsFluentBuilder::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`vector_bucket_name(impl Into<String>)`](crate::operation::list_vectors::builders::ListVectorsFluentBuilder::vector_bucket_name) / [`set_vector_bucket_name(Option<String>)`](crate::operation::list_vectors::builders::ListVectorsFluentBuilder::set_vector_bucket_name):<br>required: **false**<br><p>The name of the vector bucket.</p><br>
    ///   - [`index_name(impl Into<String>)`](crate::operation::list_vectors::builders::ListVectorsFluentBuilder::index_name) / [`set_index_name(Option<String>)`](crate::operation::list_vectors::builders::ListVectorsFluentBuilder::set_index_name):<br>required: **false**<br><p>The name of the vector index.</p><br>
    ///   - [`index_arn(impl Into<String>)`](crate::operation::list_vectors::builders::ListVectorsFluentBuilder::index_arn) / [`set_index_arn(Option<String>)`](crate::operation::list_vectors::builders::ListVectorsFluentBuilder::set_index_arn):<br>required: **false**<br><p>The Amazon resource Name (ARN) of the vector index.</p><br>
    ///   - [`max_results(i32)`](crate::operation::list_vectors::builders::ListVectorsFluentBuilder::max_results) / [`set_max_results(Option<i32>)`](crate::operation::list_vectors::builders::ListVectorsFluentBuilder::set_max_results):<br>required: **false**<br><p>The maximum number of vectors to return on a page.</p> <p>If you don't specify <code>maxResults</code>, the <code>ListVectors</code> operation uses a default value of 500.</p> <p>If the processed dataset size exceeds 1 MB before reaching the <code>maxResults</code> value, the operation stops and returns the vectors that are retrieved up to that point, along with a <code>nextToken</code> that you can use in a subsequent request to retrieve the next set of results.</p><br>
    ///   - [`next_token(impl Into<String>)`](crate::operation::list_vectors::builders::ListVectorsFluentBuilder::next_token) / [`set_next_token(Option<String>)`](crate::operation::list_vectors::builders::ListVectorsFluentBuilder::set_next_token):<br>required: **false**<br><p>Pagination token from a previous request. The value of this field is empty for an initial request.</p><br>
    ///   - [`segment_count(i32)`](crate::operation::list_vectors::builders::ListVectorsFluentBuilder::segment_count) / [`set_segment_count(Option<i32>)`](crate::operation::list_vectors::builders::ListVectorsFluentBuilder::set_segment_count):<br>required: **false**<br><p>For a parallel <code>ListVectors</code> request, <code>segmentCount</code> represents the total number of vector segments into which the <code>ListVectors</code> operation will be divided. The value of <code>segmentCount</code> corresponds to the number of application workers that will perform the parallel <code>ListVectors</code> operation. For example, if you want to use four application threads to list vectors in a vector index, specify a <code>segmentCount</code> value of 4.</p> <p>If you specify a <code>segmentCount</code> value of 1, the <code>ListVectors</code> operation will be sequential rather than parallel.</p> <p>If you specify <code>segmentCount</code>, you must also specify <code>segmentIndex</code>.</p><br>
    ///   - [`segment_index(i32)`](crate::operation::list_vectors::builders::ListVectorsFluentBuilder::segment_index) / [`set_segment_index(Option<i32>)`](crate::operation::list_vectors::builders::ListVectorsFluentBuilder::set_segment_index):<br>required: **false**<br><p>For a parallel <code>ListVectors</code> request, <code>segmentIndex</code> is the index of the segment from which to list vectors in the current request. It identifies an individual segment to be listed by an application worker.</p> <p>Segment IDs are zero-based, so the first segment is always 0. For example, if you want to use four application threads to list vectors in a vector index, then the first thread specifies a <code>segmentIndex</code> value of 0, the second thread specifies 1, and so on.</p> <p>The value of <code>segmentIndex</code> must be less than the value provided for <code>segmentCount</code>.</p> <p>If you provide <code>segmentIndex</code>, you must also provide <code>segmentCount</code>.</p><br>
    ///   - [`return_data(bool)`](crate::operation::list_vectors::builders::ListVectorsFluentBuilder::return_data) / [`set_return_data(Option<bool>)`](crate::operation::list_vectors::builders::ListVectorsFluentBuilder::set_return_data):<br>required: **false**<br><p>If true, the vector data of each vector will be included in the response. The default value is <code>false</code>.</p><br>
    ///   - [`return_metadata(bool)`](crate::operation::list_vectors::builders::ListVectorsFluentBuilder::return_metadata) / [`set_return_metadata(Option<bool>)`](crate::operation::list_vectors::builders::ListVectorsFluentBuilder::set_return_metadata):<br>required: **false**<br><p>If true, the metadata associated with each vector will be included in the response. The default value is <code>false</code>.</p><br>
    /// - On success, responds with [`ListVectorsOutput`](crate::operation::list_vectors::ListVectorsOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::operation::list_vectors::ListVectorsOutput::next_token): <p>Pagination token to be used in the subsequent request. The field is empty if no further pagination is required.</p>
    ///   - [`vectors(Vec::<ListOutputVector>)`](crate::operation::list_vectors::ListVectorsOutput::vectors): <p>Vectors in the current segment.</p>
    /// - On failure, responds with [`SdkError<ListVectorsError>`](crate::operation::list_vectors::ListVectorsError)
    pub fn list_vectors(&self) -> crate::operation::list_vectors::builders::ListVectorsFluentBuilder {
        crate::operation::list_vectors::builders::ListVectorsFluentBuilder::new(self.handle.clone())
    }
}
