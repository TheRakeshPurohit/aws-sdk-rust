// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn conflict_exception_correct_errors(
    mut builder: crate::types::error::builders::ConflictExceptionBuilder,
) -> crate::types::error::builders::ConflictExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn not_found_exception_correct_errors(
    mut builder: crate::types::error::builders::NotFoundExceptionBuilder,
) -> crate::types::error::builders::NotFoundExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn service_unavailable_exception_correct_errors(
    mut builder: crate::types::error::builders::ServiceUnavailableExceptionBuilder,
) -> crate::types::error::builders::ServiceUnavailableExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn access_denied_exception_correct_errors(
    mut builder: crate::types::error::builders::AccessDeniedExceptionBuilder,
) -> crate::types::error::builders::AccessDeniedExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn internal_server_exception_correct_errors(
    mut builder: crate::types::error::builders::InternalServerExceptionBuilder,
) -> crate::types::error::builders::InternalServerExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn service_quota_exceeded_exception_correct_errors(
    mut builder: crate::types::error::builders::ServiceQuotaExceededExceptionBuilder,
) -> crate::types::error::builders::ServiceQuotaExceededExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn too_many_requests_exception_correct_errors(
    mut builder: crate::types::error::builders::TooManyRequestsExceptionBuilder,
) -> crate::types::error::builders::TooManyRequestsExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_correct_errors(
    mut builder: crate::types::error::builders::ValidationExceptionBuilder,
) -> crate::types::error::builders::ValidationExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn kms_disabled_exception_correct_errors(
    mut builder: crate::types::error::builders::KmsDisabledExceptionBuilder,
) -> crate::types::error::builders::KmsDisabledExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn kms_invalid_key_usage_exception_correct_errors(
    mut builder: crate::types::error::builders::KmsInvalidKeyUsageExceptionBuilder,
) -> crate::types::error::builders::KmsInvalidKeyUsageExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn kms_invalid_state_exception_correct_errors(
    mut builder: crate::types::error::builders::KmsInvalidStateExceptionBuilder,
) -> crate::types::error::builders::KmsInvalidStateExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn kms_not_found_exception_correct_errors(
    mut builder: crate::types::error::builders::KmsNotFoundExceptionBuilder,
) -> crate::types::error::builders::KmsNotFoundExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn get_index_output_output_correct_errors(
    mut builder: crate::operation::get_index::builders::GetIndexOutputBuilder,
) -> crate::operation::get_index::builders::GetIndexOutputBuilder {
    if builder.index.is_none() {
        builder.index = {
            let builder = crate::types::builders::IndexBuilder::default();
            crate::serde_util::index_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_vector_bucket_output_output_correct_errors(
    mut builder: crate::operation::get_vector_bucket::builders::GetVectorBucketOutputBuilder,
) -> crate::operation::get_vector_bucket::builders::GetVectorBucketOutputBuilder {
    if builder.vector_bucket.is_none() {
        builder.vector_bucket = {
            let builder = crate::types::builders::VectorBucketBuilder::default();
            crate::serde_util::vector_bucket_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_vectors_output_output_correct_errors(
    mut builder: crate::operation::get_vectors::builders::GetVectorsOutputBuilder,
) -> crate::operation::get_vectors::builders::GetVectorsOutputBuilder {
    if builder.vectors.is_none() {
        builder.vectors = Some(Default::default())
    }
    builder
}

pub(crate) fn list_indexes_output_output_correct_errors(
    mut builder: crate::operation::list_indexes::builders::ListIndexesOutputBuilder,
) -> crate::operation::list_indexes::builders::ListIndexesOutputBuilder {
    if builder.indexes.is_none() {
        builder.indexes = Some(Default::default())
    }
    builder
}

pub(crate) fn list_vector_buckets_output_output_correct_errors(
    mut builder: crate::operation::list_vector_buckets::builders::ListVectorBucketsOutputBuilder,
) -> crate::operation::list_vector_buckets::builders::ListVectorBucketsOutputBuilder {
    if builder.vector_buckets.is_none() {
        builder.vector_buckets = Some(Default::default())
    }
    builder
}

pub(crate) fn list_vectors_output_output_correct_errors(
    mut builder: crate::operation::list_vectors::builders::ListVectorsOutputBuilder,
) -> crate::operation::list_vectors::builders::ListVectorsOutputBuilder {
    if builder.vectors.is_none() {
        builder.vectors = Some(Default::default())
    }
    builder
}

pub(crate) fn query_vectors_output_output_correct_errors(
    mut builder: crate::operation::query_vectors::builders::QueryVectorsOutputBuilder,
) -> crate::operation::query_vectors::builders::QueryVectorsOutputBuilder {
    if builder.vectors.is_none() {
        builder.vectors = Some(Default::default())
    }
    builder
}

pub(crate) fn index_correct_errors(mut builder: crate::types::builders::IndexBuilder) -> crate::types::builders::IndexBuilder {
    if builder.vector_bucket_name.is_none() {
        builder.vector_bucket_name = Some(Default::default())
    }
    if builder.index_name.is_none() {
        builder.index_name = Some(Default::default())
    }
    if builder.index_arn.is_none() {
        builder.index_arn = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.data_type.is_none() {
        builder.data_type = "no value was set".parse::<crate::types::DataType>().ok()
    }
    if builder.dimension.is_none() {
        builder.dimension = Some(Default::default())
    }
    if builder.distance_metric.is_none() {
        builder.distance_metric = "no value was set".parse::<crate::types::DistanceMetric>().ok()
    }
    builder
}

pub(crate) fn vector_bucket_correct_errors(mut builder: crate::types::builders::VectorBucketBuilder) -> crate::types::builders::VectorBucketBuilder {
    if builder.vector_bucket_name.is_none() {
        builder.vector_bucket_name = Some(Default::default())
    }
    if builder.vector_bucket_arn.is_none() {
        builder.vector_bucket_arn = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn get_output_vector_correct_errors(
    mut builder: crate::types::builders::GetOutputVectorBuilder,
) -> crate::types::builders::GetOutputVectorBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    builder
}

pub(crate) fn index_summary_correct_errors(mut builder: crate::types::builders::IndexSummaryBuilder) -> crate::types::builders::IndexSummaryBuilder {
    if builder.vector_bucket_name.is_none() {
        builder.vector_bucket_name = Some(Default::default())
    }
    if builder.index_name.is_none() {
        builder.index_name = Some(Default::default())
    }
    if builder.index_arn.is_none() {
        builder.index_arn = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn list_output_vector_correct_errors(
    mut builder: crate::types::builders::ListOutputVectorBuilder,
) -> crate::types::builders::ListOutputVectorBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    builder
}

pub(crate) fn metadata_configuration_correct_errors(
    mut builder: crate::types::builders::MetadataConfigurationBuilder,
) -> crate::types::builders::MetadataConfigurationBuilder {
    if builder.non_filterable_metadata_keys.is_none() {
        builder.non_filterable_metadata_keys = Some(Default::default())
    }
    builder
}

pub(crate) fn query_output_vector_correct_errors(
    mut builder: crate::types::builders::QueryOutputVectorBuilder,
) -> crate::types::builders::QueryOutputVectorBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_field_correct_errors(
    mut builder: crate::types::builders::ValidationExceptionFieldBuilder,
) -> crate::types::builders::ValidationExceptionFieldBuilder {
    if builder.path.is_none() {
        builder.path = Some(Default::default())
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn vector_bucket_summary_correct_errors(
    mut builder: crate::types::builders::VectorBucketSummaryBuilder,
) -> crate::types::builders::VectorBucketSummaryBuilder {
    if builder.vector_bucket_name.is_none() {
        builder.vector_bucket_name = Some(Default::default())
    }
    if builder.vector_bucket_arn.is_none() {
        builder.vector_bucket_arn = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}
