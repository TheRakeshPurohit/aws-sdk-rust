// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn de_put_vectors_http_error(
    _response_status: u16,
    _response_headers: &::aws_smithy_runtime_api::http::Headers,
    _response_body: &[u8],
) -> std::result::Result<crate::operation::put_vectors::PutVectorsOutput, crate::operation::put_vectors::PutVectorsError> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(_response_status, _response_headers, _response_body)
        .map_err(crate::operation::put_vectors::PutVectorsError::unhandled)?;
    generic_builder = ::aws_types::request_id::apply_request_id(generic_builder, _response_headers);
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::operation::put_vectors::PutVectorsError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "AccessDeniedException" => crate::operation::put_vectors::PutVectorsError::AccessDeniedException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::AccessDeniedExceptionBuilder::default();
                output = crate::protocol_serde::shape_access_denied_exception::de_access_denied_exception_json_err(_response_body, output)
                    .map_err(crate::operation::put_vectors::PutVectorsError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::access_denied_exception_correct_errors(output)
                    .build()
                    .map_err(crate::operation::put_vectors::PutVectorsError::unhandled)?
            };
            tmp
        }),
        "KmsDisabledException" => crate::operation::put_vectors::PutVectorsError::KmsDisabledException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::KmsDisabledExceptionBuilder::default();
                output = crate::protocol_serde::shape_kms_disabled_exception::de_kms_disabled_exception_json_err(_response_body, output)
                    .map_err(crate::operation::put_vectors::PutVectorsError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::kms_disabled_exception_correct_errors(output)
                    .build()
                    .map_err(crate::operation::put_vectors::PutVectorsError::unhandled)?
            };
            tmp
        }),
        "KmsInvalidKeyUsageException" => crate::operation::put_vectors::PutVectorsError::KmsInvalidKeyUsageException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::KmsInvalidKeyUsageExceptionBuilder::default();
                output =
                    crate::protocol_serde::shape_kms_invalid_key_usage_exception::de_kms_invalid_key_usage_exception_json_err(_response_body, output)
                        .map_err(crate::operation::put_vectors::PutVectorsError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::kms_invalid_key_usage_exception_correct_errors(output)
                    .build()
                    .map_err(crate::operation::put_vectors::PutVectorsError::unhandled)?
            };
            tmp
        }),
        "KmsInvalidStateException" => crate::operation::put_vectors::PutVectorsError::KmsInvalidStateException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::KmsInvalidStateExceptionBuilder::default();
                output = crate::protocol_serde::shape_kms_invalid_state_exception::de_kms_invalid_state_exception_json_err(_response_body, output)
                    .map_err(crate::operation::put_vectors::PutVectorsError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::kms_invalid_state_exception_correct_errors(output)
                    .build()
                    .map_err(crate::operation::put_vectors::PutVectorsError::unhandled)?
            };
            tmp
        }),
        "KmsNotFoundException" => crate::operation::put_vectors::PutVectorsError::KmsNotFoundException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::KmsNotFoundExceptionBuilder::default();
                output = crate::protocol_serde::shape_kms_not_found_exception::de_kms_not_found_exception_json_err(_response_body, output)
                    .map_err(crate::operation::put_vectors::PutVectorsError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::kms_not_found_exception_correct_errors(output)
                    .build()
                    .map_err(crate::operation::put_vectors::PutVectorsError::unhandled)?
            };
            tmp
        }),
        "NotFoundException" => crate::operation::put_vectors::PutVectorsError::NotFoundException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::NotFoundExceptionBuilder::default();
                output = crate::protocol_serde::shape_not_found_exception::de_not_found_exception_json_err(_response_body, output)
                    .map_err(crate::operation::put_vectors::PutVectorsError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::not_found_exception_correct_errors(output)
                    .build()
                    .map_err(crate::operation::put_vectors::PutVectorsError::unhandled)?
            };
            tmp
        }),
        "ServiceUnavailableException" => crate::operation::put_vectors::PutVectorsError::ServiceUnavailableException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::ServiceUnavailableExceptionBuilder::default();
                output =
                    crate::protocol_serde::shape_service_unavailable_exception::de_service_unavailable_exception_json_err(_response_body, output)
                        .map_err(crate::operation::put_vectors::PutVectorsError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::service_unavailable_exception_correct_errors(output)
                    .build()
                    .map_err(crate::operation::put_vectors::PutVectorsError::unhandled)?
            };
            tmp
        }),
        "InternalServerException" => crate::operation::put_vectors::PutVectorsError::InternalServerException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InternalServerExceptionBuilder::default();
                output = crate::protocol_serde::shape_internal_server_exception::de_internal_server_exception_json_err(_response_body, output)
                    .map_err(crate::operation::put_vectors::PutVectorsError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::internal_server_exception_correct_errors(output)
                    .build()
                    .map_err(crate::operation::put_vectors::PutVectorsError::unhandled)?
            };
            tmp
        }),
        "ServiceQuotaExceededException" => crate::operation::put_vectors::PutVectorsError::ServiceQuotaExceededException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::ServiceQuotaExceededExceptionBuilder::default();
                output = crate::protocol_serde::shape_service_quota_exceeded_exception::de_service_quota_exceeded_exception_json_err(
                    _response_body,
                    output,
                )
                .map_err(crate::operation::put_vectors::PutVectorsError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::service_quota_exceeded_exception_correct_errors(output)
                    .build()
                    .map_err(crate::operation::put_vectors::PutVectorsError::unhandled)?
            };
            tmp
        }),
        "TooManyRequestsException" => crate::operation::put_vectors::PutVectorsError::TooManyRequestsException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::TooManyRequestsExceptionBuilder::default();
                output = crate::protocol_serde::shape_too_many_requests_exception::de_too_many_requests_exception_json_err(_response_body, output)
                    .map_err(crate::operation::put_vectors::PutVectorsError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::too_many_requests_exception_correct_errors(output)
                    .build()
                    .map_err(crate::operation::put_vectors::PutVectorsError::unhandled)?
            };
            tmp
        }),
        "ValidationException" => crate::operation::put_vectors::PutVectorsError::ValidationException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::ValidationExceptionBuilder::default();
                output = crate::protocol_serde::shape_validation_exception::de_validation_exception_json_err(_response_body, output)
                    .map_err(crate::operation::put_vectors::PutVectorsError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::validation_exception_correct_errors(output)
                    .build()
                    .map_err(crate::operation::put_vectors::PutVectorsError::unhandled)?
            };
            tmp
        }),
        _ => crate::operation::put_vectors::PutVectorsError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_put_vectors_http_response(
    _response_status: u16,
    _response_headers: &::aws_smithy_runtime_api::http::Headers,
    _response_body: &[u8],
) -> std::result::Result<crate::operation::put_vectors::PutVectorsOutput, crate::operation::put_vectors::PutVectorsError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::operation::put_vectors::builders::PutVectorsOutputBuilder::default();
        output._set_request_id(::aws_types::request_id::RequestId::request_id(_response_headers).map(str::to_string));
        output.build()
    })
}

pub fn ser_put_vectors_input(
    input: &crate::operation::put_vectors::PutVectorsInput,
) -> ::std::result::Result<::aws_smithy_types::body::SdkBody, ::aws_smithy_types::error::operation::SerializationError> {
    let mut out = String::new();
    let mut object = ::aws_smithy_json::serialize::JsonObjectWriter::new(&mut out);
    crate::protocol_serde::shape_put_vectors_input::ser_put_vectors_input_input(&mut object, input)?;
    object.finish();
    Ok(::aws_smithy_types::body::SdkBody::from(out))
}
