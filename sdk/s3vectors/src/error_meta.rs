// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum Error {
    /// <p>Access denied.</p>
    AccessDeniedException(crate::types::error::AccessDeniedException),
    /// <p>The request failed because a vector bucket name or a vector index name already exists. Vector bucket names must be unique within your Amazon Web Services account for each Amazon Web Services Region. Vector index names must be unique within your vector bucket. Choose a different vector bucket name or vector index name, and try again.</p>
    ConflictException(crate::types::error::ConflictException),
    /// <p>The request failed due to an internal server error.</p>
    InternalServerException(crate::types::error::InternalServerException),
    /// <p>The specified Amazon Web Services KMS key isn't enabled.</p>
    KmsDisabledException(crate::types::error::KmsDisabledException),
    /// <p>The request was rejected for one of the following reasons:</p>
    /// <ul>
    /// <li>
    /// <p>The <code>KeyUsage</code> value of the KMS key is incompatible with the API operation.</p></li>
    /// <li>
    /// <p>The encryption algorithm or signing algorithm specified for the operation is incompatible with the type of key material in the KMS key (<code>KeySpec</code>).</p></li>
    /// </ul>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/kms/latest/APIReference/API_Encrypt.html#API_Encrypt_Errors">InvalidKeyUsageException</a> in the <i>Amazon Web Services Key Management Service API Reference</i>.</p>
    KmsInvalidKeyUsageException(crate::types::error::KmsInvalidKeyUsageException),
    /// <p>The key state of the KMS key isn't compatible with the operation.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/kms/latest/APIReference/API_Encrypt.html#API_Encrypt_Errors">KMSInvalidStateException</a> in the <i>Amazon Web Services Key Management Service API Reference</i>.</p>
    KmsInvalidStateException(crate::types::error::KmsInvalidStateException),
    /// <p>The KMS key can't be found.</p>
    KmsNotFoundException(crate::types::error::KmsNotFoundException),
    /// <p>The request was rejected because the specified resource can't be found.</p>
    NotFoundException(crate::types::error::NotFoundException),
    /// <p>Your request exceeds a service quota.</p>
    ServiceQuotaExceededException(crate::types::error::ServiceQuotaExceededException),
    /// <p>The service is unavailable. Wait briefly and retry your request. If it continues to fail, increase your waiting time between retries.</p>
    ServiceUnavailableException(crate::types::error::ServiceUnavailableException),
    /// <p>The request was denied due to request throttling.</p>
    TooManyRequestsException(crate::types::error::TooManyRequestsException),
    /// <p>The requested action isn't valid.</p>
    ValidationException(crate::types::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    #[deprecated(note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
    variable wildcard pattern and check `.code()`:
     \
    &nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
     \
    See [`ProvideErrorMetadata`](#impl-ProvideErrorMetadata-for-Error) for what information is available for the error.")]
    Unhandled(crate::error::sealed_unhandled::Unhandled),
}
impl ::std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::KmsDisabledException(inner) => inner.fmt(f),
            Error::KmsInvalidKeyUsageException(inner) => inner.fmt(f),
            Error::KmsInvalidStateException(inner) => inner.fmt(f),
            Error::KmsNotFoundException(inner) => inner.fmt(f),
            Error::NotFoundException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ServiceUnavailableException(inner) => inner.fmt(f),
            Error::TooManyRequestsException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(_) => {
                if let ::std::option::Option::Some(code) = ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self) {
                    write!(f, "unhandled error ({code})")
                } else {
                    f.write_str("unhandled error")
                }
            }
        }
    }
}
impl From<::aws_smithy_types::error::operation::BuildError> for Error {
    fn from(value: ::aws_smithy_types::error::operation::BuildError) -> Self {
        Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
            source: value.into(),
            meta: ::std::default::Default::default(),
        })
    }
}
impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for Error {
    fn meta(&self) -> &::aws_smithy_types::error::metadata::ErrorMetadata {
        match self {
            Self::AccessDeniedException(inner) => inner.meta(),
            Self::ConflictException(inner) => inner.meta(),
            Self::InternalServerException(inner) => inner.meta(),
            Self::KmsDisabledException(inner) => inner.meta(),
            Self::KmsInvalidKeyUsageException(inner) => inner.meta(),
            Self::KmsInvalidStateException(inner) => inner.meta(),
            Self::KmsNotFoundException(inner) => inner.meta(),
            Self::NotFoundException(inner) => inner.meta(),
            Self::ServiceQuotaExceededException(inner) => inner.meta(),
            Self::ServiceUnavailableException(inner) => inner.meta(),
            Self::TooManyRequestsException(inner) => inner.meta(),
            Self::ValidationException(inner) => inner.meta(),
            Self::Unhandled(inner) => &inner.meta,
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_index::CreateIndexError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_index::CreateIndexError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_index::CreateIndexError> for Error {
    fn from(err: crate::operation::create_index::CreateIndexError) -> Self {
        match err {
            crate::operation::create_index::CreateIndexError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_index::CreateIndexError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::create_index::CreateIndexError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::create_index::CreateIndexError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_index::CreateIndexError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_index::CreateIndexError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_index::CreateIndexError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::create_index::CreateIndexError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_index::CreateIndexError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_vector_bucket::CreateVectorBucketError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_vector_bucket::CreateVectorBucketError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_vector_bucket::CreateVectorBucketError> for Error {
    fn from(err: crate::operation::create_vector_bucket::CreateVectorBucketError) -> Self {
        match err {
            crate::operation::create_vector_bucket::CreateVectorBucketError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_vector_bucket::CreateVectorBucketError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::create_vector_bucket::CreateVectorBucketError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_vector_bucket::CreateVectorBucketError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_vector_bucket::CreateVectorBucketError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_vector_bucket::CreateVectorBucketError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::create_vector_bucket::CreateVectorBucketError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_vector_bucket::CreateVectorBucketError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_index::DeleteIndexError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_index::DeleteIndexError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_index::DeleteIndexError> for Error {
    fn from(err: crate::operation::delete_index::DeleteIndexError) -> Self {
        match err {
            crate::operation::delete_index::DeleteIndexError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::delete_index::DeleteIndexError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_index::DeleteIndexError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_index::DeleteIndexError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::delete_index::DeleteIndexError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::delete_index::DeleteIndexError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_index::DeleteIndexError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_vector_bucket::DeleteVectorBucketError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_vector_bucket::DeleteVectorBucketError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_vector_bucket::DeleteVectorBucketError> for Error {
    fn from(err: crate::operation::delete_vector_bucket::DeleteVectorBucketError) -> Self {
        match err {
            crate::operation::delete_vector_bucket::DeleteVectorBucketError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_vector_bucket::DeleteVectorBucketError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::delete_vector_bucket::DeleteVectorBucketError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_vector_bucket::DeleteVectorBucketError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_vector_bucket::DeleteVectorBucketError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::delete_vector_bucket::DeleteVectorBucketError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::delete_vector_bucket::DeleteVectorBucketError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_vector_bucket::DeleteVectorBucketError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_vector_bucket_policy::DeleteVectorBucketPolicyError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_vector_bucket_policy::DeleteVectorBucketPolicyError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_vector_bucket_policy::DeleteVectorBucketPolicyError> for Error {
    fn from(err: crate::operation::delete_vector_bucket_policy::DeleteVectorBucketPolicyError) -> Self {
        match err {
            crate::operation::delete_vector_bucket_policy::DeleteVectorBucketPolicyError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_vector_bucket_policy::DeleteVectorBucketPolicyError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::delete_vector_bucket_policy::DeleteVectorBucketPolicyError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_vector_bucket_policy::DeleteVectorBucketPolicyError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_vector_bucket_policy::DeleteVectorBucketPolicyError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::delete_vector_bucket_policy::DeleteVectorBucketPolicyError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::delete_vector_bucket_policy::DeleteVectorBucketPolicyError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_vector_bucket_policy::DeleteVectorBucketPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_vectors::DeleteVectorsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_vectors::DeleteVectorsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_vectors::DeleteVectorsError> for Error {
    fn from(err: crate::operation::delete_vectors::DeleteVectorsError) -> Self {
        match err {
            crate::operation::delete_vectors::DeleteVectorsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_vectors::DeleteVectorsError::KmsDisabledException(inner) => Error::KmsDisabledException(inner),
            crate::operation::delete_vectors::DeleteVectorsError::KmsInvalidKeyUsageException(inner) => Error::KmsInvalidKeyUsageException(inner),
            crate::operation::delete_vectors::DeleteVectorsError::KmsInvalidStateException(inner) => Error::KmsInvalidStateException(inner),
            crate::operation::delete_vectors::DeleteVectorsError::KmsNotFoundException(inner) => Error::KmsNotFoundException(inner),
            crate::operation::delete_vectors::DeleteVectorsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_vectors::DeleteVectorsError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::delete_vectors::DeleteVectorsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_vectors::DeleteVectorsError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::delete_vectors::DeleteVectorsError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::delete_vectors::DeleteVectorsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_vectors::DeleteVectorsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_index::GetIndexError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_index::GetIndexError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_index::GetIndexError> for Error {
    fn from(err: crate::operation::get_index::GetIndexError) -> Self {
        match err {
            crate::operation::get_index::GetIndexError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_index::GetIndexError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::get_index::GetIndexError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_index::GetIndexError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_index::GetIndexError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::get_index::GetIndexError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::get_index::GetIndexError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_index::GetIndexError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_vector_bucket::GetVectorBucketError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_vector_bucket::GetVectorBucketError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_vector_bucket::GetVectorBucketError> for Error {
    fn from(err: crate::operation::get_vector_bucket::GetVectorBucketError) -> Self {
        match err {
            crate::operation::get_vector_bucket::GetVectorBucketError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_vector_bucket::GetVectorBucketError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::get_vector_bucket::GetVectorBucketError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_vector_bucket::GetVectorBucketError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_vector_bucket::GetVectorBucketError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::get_vector_bucket::GetVectorBucketError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::get_vector_bucket::GetVectorBucketError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_vector_bucket::GetVectorBucketError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_vector_bucket_policy::GetVectorBucketPolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_vector_bucket_policy::GetVectorBucketPolicyError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_vector_bucket_policy::GetVectorBucketPolicyError> for Error {
    fn from(err: crate::operation::get_vector_bucket_policy::GetVectorBucketPolicyError) -> Self {
        match err {
            crate::operation::get_vector_bucket_policy::GetVectorBucketPolicyError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_vector_bucket_policy::GetVectorBucketPolicyError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::get_vector_bucket_policy::GetVectorBucketPolicyError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_vector_bucket_policy::GetVectorBucketPolicyError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_vector_bucket_policy::GetVectorBucketPolicyError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::get_vector_bucket_policy::GetVectorBucketPolicyError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::get_vector_bucket_policy::GetVectorBucketPolicyError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_vector_bucket_policy::GetVectorBucketPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_vectors::GetVectorsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_vectors::GetVectorsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_vectors::GetVectorsError> for Error {
    fn from(err: crate::operation::get_vectors::GetVectorsError) -> Self {
        match err {
            crate::operation::get_vectors::GetVectorsError::KmsDisabledException(inner) => Error::KmsDisabledException(inner),
            crate::operation::get_vectors::GetVectorsError::KmsInvalidKeyUsageException(inner) => Error::KmsInvalidKeyUsageException(inner),
            crate::operation::get_vectors::GetVectorsError::KmsInvalidStateException(inner) => Error::KmsInvalidStateException(inner),
            crate::operation::get_vectors::GetVectorsError::KmsNotFoundException(inner) => Error::KmsNotFoundException(inner),
            crate::operation::get_vectors::GetVectorsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_vectors::GetVectorsError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::get_vectors::GetVectorsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_vectors::GetVectorsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_vectors::GetVectorsError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::get_vectors::GetVectorsError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::get_vectors::GetVectorsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_vectors::GetVectorsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_indexes::ListIndexesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_indexes::ListIndexesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_indexes::ListIndexesError> for Error {
    fn from(err: crate::operation::list_indexes::ListIndexesError) -> Self {
        match err {
            crate::operation::list_indexes::ListIndexesError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::list_indexes::ListIndexesError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::list_indexes::ListIndexesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_indexes::ListIndexesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_indexes::ListIndexesError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::list_indexes::ListIndexesError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::list_indexes::ListIndexesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_indexes::ListIndexesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_vector_buckets::ListVectorBucketsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_vector_buckets::ListVectorBucketsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_vector_buckets::ListVectorBucketsError> for Error {
    fn from(err: crate::operation::list_vector_buckets::ListVectorBucketsError) -> Self {
        match err {
            crate::operation::list_vector_buckets::ListVectorBucketsError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::list_vector_buckets::ListVectorBucketsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_vector_buckets::ListVectorBucketsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_vector_buckets::ListVectorBucketsError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::list_vector_buckets::ListVectorBucketsError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::list_vector_buckets::ListVectorBucketsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_vector_buckets::ListVectorBucketsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_vectors::ListVectorsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_vectors::ListVectorsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_vectors::ListVectorsError> for Error {
    fn from(err: crate::operation::list_vectors::ListVectorsError) -> Self {
        match err {
            crate::operation::list_vectors::ListVectorsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_vectors::ListVectorsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::list_vectors::ListVectorsError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::list_vectors::ListVectorsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_vectors::ListVectorsError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::list_vectors::ListVectorsError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::list_vectors::ListVectorsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_vectors::ListVectorsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_vector_bucket_policy::PutVectorBucketPolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_vector_bucket_policy::PutVectorBucketPolicyError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::put_vector_bucket_policy::PutVectorBucketPolicyError> for Error {
    fn from(err: crate::operation::put_vector_bucket_policy::PutVectorBucketPolicyError) -> Self {
        match err {
            crate::operation::put_vector_bucket_policy::PutVectorBucketPolicyError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::put_vector_bucket_policy::PutVectorBucketPolicyError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::put_vector_bucket_policy::PutVectorBucketPolicyError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::put_vector_bucket_policy::PutVectorBucketPolicyError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::put_vector_bucket_policy::PutVectorBucketPolicyError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::put_vector_bucket_policy::PutVectorBucketPolicyError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::put_vector_bucket_policy::PutVectorBucketPolicyError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::put_vector_bucket_policy::PutVectorBucketPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_vectors::PutVectorsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_vectors::PutVectorsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::put_vectors::PutVectorsError> for Error {
    fn from(err: crate::operation::put_vectors::PutVectorsError) -> Self {
        match err {
            crate::operation::put_vectors::PutVectorsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::put_vectors::PutVectorsError::KmsDisabledException(inner) => Error::KmsDisabledException(inner),
            crate::operation::put_vectors::PutVectorsError::KmsInvalidKeyUsageException(inner) => Error::KmsInvalidKeyUsageException(inner),
            crate::operation::put_vectors::PutVectorsError::KmsInvalidStateException(inner) => Error::KmsInvalidStateException(inner),
            crate::operation::put_vectors::PutVectorsError::KmsNotFoundException(inner) => Error::KmsNotFoundException(inner),
            crate::operation::put_vectors::PutVectorsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::put_vectors::PutVectorsError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::put_vectors::PutVectorsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::put_vectors::PutVectorsError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::put_vectors::PutVectorsError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::put_vectors::PutVectorsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::put_vectors::PutVectorsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::query_vectors::QueryVectorsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::query_vectors::QueryVectorsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::query_vectors::QueryVectorsError> for Error {
    fn from(err: crate::operation::query_vectors::QueryVectorsError) -> Self {
        match err {
            crate::operation::query_vectors::QueryVectorsError::KmsDisabledException(inner) => Error::KmsDisabledException(inner),
            crate::operation::query_vectors::QueryVectorsError::KmsInvalidKeyUsageException(inner) => Error::KmsInvalidKeyUsageException(inner),
            crate::operation::query_vectors::QueryVectorsError::KmsInvalidStateException(inner) => Error::KmsInvalidStateException(inner),
            crate::operation::query_vectors::QueryVectorsError::KmsNotFoundException(inner) => Error::KmsNotFoundException(inner),
            crate::operation::query_vectors::QueryVectorsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::query_vectors::QueryVectorsError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::query_vectors::QueryVectorsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::query_vectors::QueryVectorsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::query_vectors::QueryVectorsError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::query_vectors::QueryVectorsError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::query_vectors::QueryVectorsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::query_vectors::QueryVectorsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl ::std::error::Error for Error {
    fn source(&self) -> std::option::Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            Error::AccessDeniedException(inner) => inner.source(),
            Error::ConflictException(inner) => inner.source(),
            Error::InternalServerException(inner) => inner.source(),
            Error::KmsDisabledException(inner) => inner.source(),
            Error::KmsInvalidKeyUsageException(inner) => inner.source(),
            Error::KmsInvalidStateException(inner) => inner.source(),
            Error::KmsNotFoundException(inner) => inner.source(),
            Error::NotFoundException(inner) => inner.source(),
            Error::ServiceQuotaExceededException(inner) => inner.source(),
            Error::ServiceUnavailableException(inner) => inner.source(),
            Error::TooManyRequestsException(inner) => inner.source(),
            Error::ValidationException(inner) => inner.source(),
            Error::Unhandled(inner) => ::std::option::Option::Some(&*inner.source),
        }
    }
}
impl ::aws_types::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::KmsDisabledException(e) => e.request_id(),
            Self::KmsInvalidKeyUsageException(e) => e.request_id(),
            Self::KmsInvalidStateException(e) => e.request_id(),
            Self::KmsNotFoundException(e) => e.request_id(),
            Self::NotFoundException(e) => e.request_id(),
            Self::ServiceQuotaExceededException(e) => e.request_id(),
            Self::ServiceUnavailableException(e) => e.request_id(),
            Self::TooManyRequestsException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.meta.request_id(),
        }
    }
}
