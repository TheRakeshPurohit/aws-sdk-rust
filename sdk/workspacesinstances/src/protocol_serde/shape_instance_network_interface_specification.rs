// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_instance_network_interface_specification(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::InstanceNetworkInterfaceSpecification,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.associate_carrier_ip_address {
        object.key("AssociateCarrierIpAddress").boolean(*var_1);
    }
    if let Some(var_2) = &input.associate_public_ip_address {
        object.key("AssociatePublicIpAddress").boolean(*var_2);
    }
    if let Some(var_3) = &input.connection_tracking_specification {
        #[allow(unused_mut)]
        let mut object_4 = object.key("ConnectionTrackingSpecification").start_object();
        crate::protocol_serde::shape_connection_tracking_specification_request::ser_connection_tracking_specification_request(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.description {
        object.key("Description").string(var_5.as_str());
    }
    if let Some(var_6) = &input.device_index {
        object.key("DeviceIndex").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_6).into()),
        );
    }
    if let Some(var_7) = &input.ena_srd_specification {
        #[allow(unused_mut)]
        let mut object_8 = object.key("EnaSrdSpecification").start_object();
        crate::protocol_serde::shape_ena_srd_specification_request::ser_ena_srd_specification_request(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.interface_type {
        object.key("InterfaceType").string(var_9.as_str());
    }
    if let Some(var_10) = &input.ipv4_prefixes {
        let mut array_11 = object.key("Ipv4Prefixes").start_array();
        for item_12 in var_10 {
            {
                #[allow(unused_mut)]
                let mut object_13 = array_11.value().start_object();
                crate::protocol_serde::shape_ipv4_prefix_specification_request::ser_ipv4_prefix_specification_request(&mut object_13, item_12)?;
                object_13.finish();
            }
        }
        array_11.finish();
    }
    if let Some(var_14) = &input.ipv4_prefix_count {
        object.key("Ipv4PrefixCount").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_14).into()),
        );
    }
    if let Some(var_15) = &input.ipv6_address_count {
        object.key("Ipv6AddressCount").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_15).into()),
        );
    }
    if let Some(var_16) = &input.ipv6_addresses {
        let mut array_17 = object.key("Ipv6Addresses").start_array();
        for item_18 in var_16 {
            {
                #[allow(unused_mut)]
                let mut object_19 = array_17.value().start_object();
                crate::protocol_serde::shape_instance_ipv6_address::ser_instance_ipv6_address(&mut object_19, item_18)?;
                object_19.finish();
            }
        }
        array_17.finish();
    }
    if let Some(var_20) = &input.ipv6_prefixes {
        let mut array_21 = object.key("Ipv6Prefixes").start_array();
        for item_22 in var_20 {
            {
                #[allow(unused_mut)]
                let mut object_23 = array_21.value().start_object();
                crate::protocol_serde::shape_ipv6_prefix_specification_request::ser_ipv6_prefix_specification_request(&mut object_23, item_22)?;
                object_23.finish();
            }
        }
        array_21.finish();
    }
    if let Some(var_24) = &input.ipv6_prefix_count {
        object.key("Ipv6PrefixCount").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_24).into()),
        );
    }
    if let Some(var_25) = &input.network_card_index {
        object.key("NetworkCardIndex").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_25).into()),
        );
    }
    if let Some(var_26) = &input.network_interface_id {
        object.key("NetworkInterfaceId").string(var_26.as_str());
    }
    if let Some(var_27) = &input.primary_ipv6 {
        object.key("PrimaryIpv6").boolean(*var_27);
    }
    if let Some(var_28) = &input.private_ip_address {
        object.key("PrivateIpAddress").string(var_28.as_str());
    }
    if let Some(var_29) = &input.private_ip_addresses {
        let mut array_30 = object.key("PrivateIpAddresses").start_array();
        for item_31 in var_29 {
            {
                #[allow(unused_mut)]
                let mut object_32 = array_30.value().start_object();
                crate::protocol_serde::shape_private_ip_address_specification::ser_private_ip_address_specification(&mut object_32, item_31)?;
                object_32.finish();
            }
        }
        array_30.finish();
    }
    if let Some(var_33) = &input.secondary_private_ip_address_count {
        object.key("SecondaryPrivateIpAddressCount").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_33).into()),
        );
    }
    if let Some(var_34) = &input.groups {
        let mut array_35 = object.key("Groups").start_array();
        for item_36 in var_34 {
            {
                array_35.value().string(item_36.as_str());
            }
        }
        array_35.finish();
    }
    if let Some(var_37) = &input.subnet_id {
        object.key("SubnetId").string(var_37.as_str());
    }
    Ok(())
}
