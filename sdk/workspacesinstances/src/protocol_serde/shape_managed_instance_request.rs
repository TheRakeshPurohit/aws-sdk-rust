// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_managed_instance_request(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::ManagedInstanceRequest,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.block_device_mappings {
        let mut array_2 = object.key("BlockDeviceMappings").start_array();
        for item_3 in var_1 {
            {
                #[allow(unused_mut)]
                let mut object_4 = array_2.value().start_object();
                crate::protocol_serde::shape_block_device_mapping_request::ser_block_device_mapping_request(&mut object_4, item_3)?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    if let Some(var_5) = &input.capacity_reservation_specification {
        #[allow(unused_mut)]
        let mut object_6 = object.key("CapacityReservationSpecification").start_object();
        crate::protocol_serde::shape_capacity_reservation_specification::ser_capacity_reservation_specification(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.cpu_options {
        #[allow(unused_mut)]
        let mut object_8 = object.key("CpuOptions").start_object();
        crate::protocol_serde::shape_cpu_options_request::ser_cpu_options_request(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.credit_specification {
        #[allow(unused_mut)]
        let mut object_10 = object.key("CreditSpecification").start_object();
        crate::protocol_serde::shape_credit_specification_request::ser_credit_specification_request(&mut object_10, var_9)?;
        object_10.finish();
    }
    if let Some(var_11) = &input.disable_api_stop {
        object.key("DisableApiStop").boolean(*var_11);
    }
    if let Some(var_12) = &input.ebs_optimized {
        object.key("EbsOptimized").boolean(*var_12);
    }
    if let Some(var_13) = &input.enable_primary_ipv6 {
        object.key("EnablePrimaryIpv6").boolean(*var_13);
    }
    if let Some(var_14) = &input.enclave_options {
        #[allow(unused_mut)]
        let mut object_15 = object.key("EnclaveOptions").start_object();
        crate::protocol_serde::shape_enclave_options_request::ser_enclave_options_request(&mut object_15, var_14)?;
        object_15.finish();
    }
    if let Some(var_16) = &input.hibernation_options {
        #[allow(unused_mut)]
        let mut object_17 = object.key("HibernationOptions").start_object();
        crate::protocol_serde::shape_hibernation_options_request::ser_hibernation_options_request(&mut object_17, var_16)?;
        object_17.finish();
    }
    if let Some(var_18) = &input.iam_instance_profile {
        #[allow(unused_mut)]
        let mut object_19 = object.key("IamInstanceProfile").start_object();
        crate::protocol_serde::shape_iam_instance_profile_specification::ser_iam_instance_profile_specification(&mut object_19, var_18)?;
        object_19.finish();
    }
    if let Some(var_20) = &input.image_id {
        object.key("ImageId").string(var_20.as_str());
    }
    if let Some(var_21) = &input.instance_market_options {
        #[allow(unused_mut)]
        let mut object_22 = object.key("InstanceMarketOptions").start_object();
        crate::protocol_serde::shape_instance_market_options_request::ser_instance_market_options_request(&mut object_22, var_21)?;
        object_22.finish();
    }
    if let Some(var_23) = &input.instance_type {
        object.key("InstanceType").string(var_23.as_str());
    }
    if let Some(var_24) = &input.ipv6_addresses {
        let mut array_25 = object.key("Ipv6Addresses").start_array();
        for item_26 in var_24 {
            {
                #[allow(unused_mut)]
                let mut object_27 = array_25.value().start_object();
                crate::protocol_serde::shape_instance_ipv6_address::ser_instance_ipv6_address(&mut object_27, item_26)?;
                object_27.finish();
            }
        }
        array_25.finish();
    }
    if let Some(var_28) = &input.ipv6_address_count {
        object.key("Ipv6AddressCount").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_28).into()),
        );
    }
    if let Some(var_29) = &input.kernel_id {
        object.key("KernelId").string(var_29.as_str());
    }
    if let Some(var_30) = &input.key_name {
        object.key("KeyName").string(var_30.as_str());
    }
    if let Some(var_31) = &input.license_specifications {
        let mut array_32 = object.key("LicenseSpecifications").start_array();
        for item_33 in var_31 {
            {
                #[allow(unused_mut)]
                let mut object_34 = array_32.value().start_object();
                crate::protocol_serde::shape_license_configuration_request::ser_license_configuration_request(&mut object_34, item_33)?;
                object_34.finish();
            }
        }
        array_32.finish();
    }
    if let Some(var_35) = &input.maintenance_options {
        #[allow(unused_mut)]
        let mut object_36 = object.key("MaintenanceOptions").start_object();
        crate::protocol_serde::shape_instance_maintenance_options_request::ser_instance_maintenance_options_request(&mut object_36, var_35)?;
        object_36.finish();
    }
    if let Some(var_37) = &input.metadata_options {
        #[allow(unused_mut)]
        let mut object_38 = object.key("MetadataOptions").start_object();
        crate::protocol_serde::shape_instance_metadata_options_request::ser_instance_metadata_options_request(&mut object_38, var_37)?;
        object_38.finish();
    }
    if let Some(var_39) = &input.monitoring {
        #[allow(unused_mut)]
        let mut object_40 = object.key("Monitoring").start_object();
        crate::protocol_serde::shape_run_instances_monitoring_enabled::ser_run_instances_monitoring_enabled(&mut object_40, var_39)?;
        object_40.finish();
    }
    if let Some(var_41) = &input.network_interfaces {
        let mut array_42 = object.key("NetworkInterfaces").start_array();
        for item_43 in var_41 {
            {
                #[allow(unused_mut)]
                let mut object_44 = array_42.value().start_object();
                crate::protocol_serde::shape_instance_network_interface_specification::ser_instance_network_interface_specification(
                    &mut object_44,
                    item_43,
                )?;
                object_44.finish();
            }
        }
        array_42.finish();
    }
    if let Some(var_45) = &input.network_performance_options {
        #[allow(unused_mut)]
        let mut object_46 = object.key("NetworkPerformanceOptions").start_object();
        crate::protocol_serde::shape_instance_network_performance_options_request::ser_instance_network_performance_options_request(
            &mut object_46,
            var_45,
        )?;
        object_46.finish();
    }
    if let Some(var_47) = &input.placement {
        #[allow(unused_mut)]
        let mut object_48 = object.key("Placement").start_object();
        crate::protocol_serde::shape_placement::ser_placement(&mut object_48, var_47)?;
        object_48.finish();
    }
    if let Some(var_49) = &input.private_dns_name_options {
        #[allow(unused_mut)]
        let mut object_50 = object.key("PrivateDnsNameOptions").start_object();
        crate::protocol_serde::shape_private_dns_name_options_request::ser_private_dns_name_options_request(&mut object_50, var_49)?;
        object_50.finish();
    }
    if let Some(var_51) = &input.private_ip_address {
        object.key("PrivateIpAddress").string(var_51.as_str());
    }
    if let Some(var_52) = &input.ramdisk_id {
        object.key("RamdiskId").string(var_52.as_str());
    }
    if let Some(var_53) = &input.security_group_ids {
        let mut array_54 = object.key("SecurityGroupIds").start_array();
        for item_55 in var_53 {
            {
                array_54.value().string(item_55.as_str());
            }
        }
        array_54.finish();
    }
    if let Some(var_56) = &input.security_groups {
        let mut array_57 = object.key("SecurityGroups").start_array();
        for item_58 in var_56 {
            {
                array_57.value().string(item_58.as_str());
            }
        }
        array_57.finish();
    }
    if let Some(var_59) = &input.subnet_id {
        object.key("SubnetId").string(var_59.as_str());
    }
    if let Some(var_60) = &input.tag_specifications {
        let mut array_61 = object.key("TagSpecifications").start_array();
        for item_62 in var_60 {
            {
                #[allow(unused_mut)]
                let mut object_63 = array_61.value().start_object();
                crate::protocol_serde::shape_tag_specification::ser_tag_specification(&mut object_63, item_62)?;
                object_63.finish();
            }
        }
        array_61.finish();
    }
    if let Some(var_64) = &input.user_data {
        object.key("UserData").string(var_64.as_str());
    }
    Ok(())
}
