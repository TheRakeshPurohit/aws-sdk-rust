// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_volume_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_volume::CreateVolumeInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.availability_zone {
        object.key("AvailabilityZone").string(var_1.as_str());
    }
    if let Some(var_2) = &input.client_token {
        object.key("ClientToken").string(var_2.as_str());
    }
    if let Some(var_3) = &input.encrypted {
        object.key("Encrypted").boolean(*var_3);
    }
    if let Some(var_4) = &input.iops {
        object.key("Iops").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_4).into()),
        );
    }
    if let Some(var_5) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_5.as_str());
    }
    if let Some(var_6) = &input.size_in_gb {
        object.key("SizeInGB").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_6).into()),
        );
    }
    if let Some(var_7) = &input.snapshot_id {
        object.key("SnapshotId").string(var_7.as_str());
    }
    if let Some(var_8) = &input.tag_specifications {
        let mut array_9 = object.key("TagSpecifications").start_array();
        for item_10 in var_8 {
            {
                #[allow(unused_mut)]
                let mut object_11 = array_9.value().start_object();
                crate::protocol_serde::shape_tag_specification::ser_tag_specification(&mut object_11, item_10)?;
                object_11.finish();
            }
        }
        array_9.finish();
    }
    if let Some(var_12) = &input.throughput {
        object.key("Throughput").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_12).into()),
        );
    }
    if let Some(var_13) = &input.volume_type {
        object.key("VolumeType").string(var_13.as_str());
    }
    Ok(())
}
