// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateVolume`](crate::operation::create_volume::builders::CreateVolumeFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`availability_zone(impl Into<String>)`](crate::operation::create_volume::builders::CreateVolumeFluentBuilder::availability_zone) / [`set_availability_zone(Option<String>)`](crate::operation::create_volume::builders::CreateVolumeFluentBuilder::set_availability_zone):<br>required: **true**<br><p>Availability zone for the volume.</p><br>
    ///   - [`client_token(impl Into<String>)`](crate::operation::create_volume::builders::CreateVolumeFluentBuilder::client_token) / [`set_client_token(Option<String>)`](crate::operation::create_volume::builders::CreateVolumeFluentBuilder::set_client_token):<br>required: **false**<br><p>Unique token to prevent duplicate volume creation.</p><br>
    ///   - [`encrypted(bool)`](crate::operation::create_volume::builders::CreateVolumeFluentBuilder::encrypted) / [`set_encrypted(Option<bool>)`](crate::operation::create_volume::builders::CreateVolumeFluentBuilder::set_encrypted):<br>required: **false**<br><p>Indicates if the volume should be encrypted.</p><br>
    ///   - [`iops(i32)`](crate::operation::create_volume::builders::CreateVolumeFluentBuilder::iops) / [`set_iops(Option<i32>)`](crate::operation::create_volume::builders::CreateVolumeFluentBuilder::set_iops):<br>required: **false**<br><p>Input/output operations per second for the volume.</p><br>
    ///   - [`kms_key_id(impl Into<String>)`](crate::operation::create_volume::builders::CreateVolumeFluentBuilder::kms_key_id) / [`set_kms_key_id(Option<String>)`](crate::operation::create_volume::builders::CreateVolumeFluentBuilder::set_kms_key_id):<br>required: **false**<br><p>KMS key for volume encryption.</p><br>
    ///   - [`size_in_gb(i32)`](crate::operation::create_volume::builders::CreateVolumeFluentBuilder::size_in_gb) / [`set_size_in_gb(Option<i32>)`](crate::operation::create_volume::builders::CreateVolumeFluentBuilder::set_size_in_gb):<br>required: **false**<br><p>Volume size in gigabytes.</p><br>
    ///   - [`snapshot_id(impl Into<String>)`](crate::operation::create_volume::builders::CreateVolumeFluentBuilder::snapshot_id) / [`set_snapshot_id(Option<String>)`](crate::operation::create_volume::builders::CreateVolumeFluentBuilder::set_snapshot_id):<br>required: **false**<br><p>Source snapshot for volume creation.</p><br>
    ///   - [`tag_specifications(TagSpecification)`](crate::operation::create_volume::builders::CreateVolumeFluentBuilder::tag_specifications) / [`set_tag_specifications(Option<Vec::<TagSpecification>>)`](crate::operation::create_volume::builders::CreateVolumeFluentBuilder::set_tag_specifications):<br>required: **false**<br><p>Metadata tags for the volume.</p><br>
    ///   - [`throughput(i32)`](crate::operation::create_volume::builders::CreateVolumeFluentBuilder::throughput) / [`set_throughput(Option<i32>)`](crate::operation::create_volume::builders::CreateVolumeFluentBuilder::set_throughput):<br>required: **false**<br><p>Volume throughput performance.</p><br>
    ///   - [`volume_type(VolumeTypeEnum)`](crate::operation::create_volume::builders::CreateVolumeFluentBuilder::volume_type) / [`set_volume_type(Option<VolumeTypeEnum>)`](crate::operation::create_volume::builders::CreateVolumeFluentBuilder::set_volume_type):<br>required: **false**<br><p>Type of EBS volume.</p><br>
    /// - On success, responds with [`CreateVolumeOutput`](crate::operation::create_volume::CreateVolumeOutput) with field(s):
    ///   - [`volume_id(Option<String>)`](crate::operation::create_volume::CreateVolumeOutput::volume_id): <p>Unique identifier for the new volume.</p>
    /// - On failure, responds with [`SdkError<CreateVolumeError>`](crate::operation::create_volume::CreateVolumeError)
    pub fn create_volume(&self) -> crate::operation::create_volume::builders::CreateVolumeFluentBuilder {
        crate::operation::create_volume::builders::CreateVolumeFluentBuilder::new(self.handle.clone())
    }
}
