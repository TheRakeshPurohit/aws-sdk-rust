// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_list_instance_types_output_output_next_token(
    input: &crate::operation::list_instance_types::ListInstanceTypesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_regions_output_output_next_token(
    input: &crate::operation::list_regions::ListRegionsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_workspace_instances_output_output_next_token(
    input: &crate::operation::list_workspace_instances::ListWorkspaceInstancesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_instance_types_output_output_instance_types(
    input: crate::operation::list_instance_types::ListInstanceTypesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::InstanceTypeInfo>> {
    let input = input.instance_types;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_regions_output_output_regions(
    input: crate::operation::list_regions::ListRegionsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Region>> {
    let input = input.regions;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_workspace_instances_output_output_workspace_instances(
    input: crate::operation::list_workspace_instances::ListWorkspaceInstancesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::WorkspaceInstance>> {
    let input = input.workspace_instances;
    ::std::option::Option::Some(input)
}
