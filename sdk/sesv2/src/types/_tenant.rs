// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure that contains details about a tenant.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Tenant {
    /// <p>The name of the tenant.</p>
    pub tenant_name: ::std::option::Option<::std::string::String>,
    /// <p>A unique identifier for the tenant.</p>
    pub tenant_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the tenant.</p>
    pub tenant_arn: ::std::option::Option<::std::string::String>,
    /// <p>The date and time when the tenant was created.</p>
    pub created_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>An array of objects that define the tags (keys and values) associated with the tenant.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    /// <p>The status of sending capability for the tenant.</p>
    pub sending_status: ::std::option::Option<crate::types::SendingStatus>,
}
impl Tenant {
    /// <p>The name of the tenant.</p>
    pub fn tenant_name(&self) -> ::std::option::Option<&str> {
        self.tenant_name.as_deref()
    }
    /// <p>A unique identifier for the tenant.</p>
    pub fn tenant_id(&self) -> ::std::option::Option<&str> {
        self.tenant_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the tenant.</p>
    pub fn tenant_arn(&self) -> ::std::option::Option<&str> {
        self.tenant_arn.as_deref()
    }
    /// <p>The date and time when the tenant was created.</p>
    pub fn created_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_timestamp.as_ref()
    }
    /// <p>An array of objects that define the tags (keys and values) associated with the tenant.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
    /// <p>The status of sending capability for the tenant.</p>
    pub fn sending_status(&self) -> ::std::option::Option<&crate::types::SendingStatus> {
        self.sending_status.as_ref()
    }
}
impl Tenant {
    /// Creates a new builder-style object to manufacture [`Tenant`](crate::types::Tenant).
    pub fn builder() -> crate::types::builders::TenantBuilder {
        crate::types::builders::TenantBuilder::default()
    }
}

/// A builder for [`Tenant`](crate::types::Tenant).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct TenantBuilder {
    pub(crate) tenant_name: ::std::option::Option<::std::string::String>,
    pub(crate) tenant_id: ::std::option::Option<::std::string::String>,
    pub(crate) tenant_arn: ::std::option::Option<::std::string::String>,
    pub(crate) created_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    pub(crate) sending_status: ::std::option::Option<crate::types::SendingStatus>,
}
impl TenantBuilder {
    /// <p>The name of the tenant.</p>
    pub fn tenant_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.tenant_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the tenant.</p>
    pub fn set_tenant_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.tenant_name = input;
        self
    }
    /// <p>The name of the tenant.</p>
    pub fn get_tenant_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.tenant_name
    }
    /// <p>A unique identifier for the tenant.</p>
    pub fn tenant_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.tenant_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier for the tenant.</p>
    pub fn set_tenant_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.tenant_id = input;
        self
    }
    /// <p>A unique identifier for the tenant.</p>
    pub fn get_tenant_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.tenant_id
    }
    /// <p>The Amazon Resource Name (ARN) of the tenant.</p>
    pub fn tenant_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.tenant_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the tenant.</p>
    pub fn set_tenant_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.tenant_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the tenant.</p>
    pub fn get_tenant_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.tenant_arn
    }
    /// <p>The date and time when the tenant was created.</p>
    pub fn created_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time when the tenant was created.</p>
    pub fn set_created_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_timestamp = input;
        self
    }
    /// <p>The date and time when the tenant was created.</p>
    pub fn get_created_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_timestamp
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>An array of objects that define the tags (keys and values) associated with the tenant.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of objects that define the tags (keys and values) associated with the tenant.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>An array of objects that define the tags (keys and values) associated with the tenant.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// <p>The status of sending capability for the tenant.</p>
    pub fn sending_status(mut self, input: crate::types::SendingStatus) -> Self {
        self.sending_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of sending capability for the tenant.</p>
    pub fn set_sending_status(mut self, input: ::std::option::Option<crate::types::SendingStatus>) -> Self {
        self.sending_status = input;
        self
    }
    /// <p>The status of sending capability for the tenant.</p>
    pub fn get_sending_status(&self) -> &::std::option::Option<crate::types::SendingStatus> {
        &self.sending_status
    }
    /// Consumes the builder and constructs a [`Tenant`](crate::types::Tenant).
    pub fn build(self) -> crate::types::Tenant {
        crate::types::Tenant {
            tenant_name: self.tenant_name,
            tenant_id: self.tenant_id,
            tenant_arn: self.tenant_arn,
            created_timestamp: self.created_timestamp,
            tags: self.tags,
            sending_status: self.sending_status,
        }
    }
}
