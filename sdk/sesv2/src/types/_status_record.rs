// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that contains status information for a reputation entity, including the current status, cause description, and timestamp.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StatusRecord {
    /// <p>The current sending status. This can be one of the following:</p>
    /// <ul>
    /// <li>
    /// <p><code>ENABLED</code> – Sending is allowed.</p></li>
    /// <li>
    /// <p><code>DISABLED</code> – Sending is prevented.</p></li>
    /// <li>
    /// <p><code>REINSTATED</code> – Sending is allowed even with active reputation findings.</p></li>
    /// </ul>
    pub status: ::std::option::Option<crate::types::SendingStatus>,
    /// <p>A description of the reason for the current status, or null if no specific cause is available.</p>
    pub cause: ::std::option::Option<::std::string::String>,
    /// <p>The timestamp when this status was last updated.</p>
    pub last_updated_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl StatusRecord {
    /// <p>The current sending status. This can be one of the following:</p>
    /// <ul>
    /// <li>
    /// <p><code>ENABLED</code> – Sending is allowed.</p></li>
    /// <li>
    /// <p><code>DISABLED</code> – Sending is prevented.</p></li>
    /// <li>
    /// <p><code>REINSTATED</code> – Sending is allowed even with active reputation findings.</p></li>
    /// </ul>
    pub fn status(&self) -> ::std::option::Option<&crate::types::SendingStatus> {
        self.status.as_ref()
    }
    /// <p>A description of the reason for the current status, or null if no specific cause is available.</p>
    pub fn cause(&self) -> ::std::option::Option<&str> {
        self.cause.as_deref()
    }
    /// <p>The timestamp when this status was last updated.</p>
    pub fn last_updated_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_updated_timestamp.as_ref()
    }
}
impl StatusRecord {
    /// Creates a new builder-style object to manufacture [`StatusRecord`](crate::types::StatusRecord).
    pub fn builder() -> crate::types::builders::StatusRecordBuilder {
        crate::types::builders::StatusRecordBuilder::default()
    }
}

/// A builder for [`StatusRecord`](crate::types::StatusRecord).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct StatusRecordBuilder {
    pub(crate) status: ::std::option::Option<crate::types::SendingStatus>,
    pub(crate) cause: ::std::option::Option<::std::string::String>,
    pub(crate) last_updated_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl StatusRecordBuilder {
    /// <p>The current sending status. This can be one of the following:</p>
    /// <ul>
    /// <li>
    /// <p><code>ENABLED</code> – Sending is allowed.</p></li>
    /// <li>
    /// <p><code>DISABLED</code> – Sending is prevented.</p></li>
    /// <li>
    /// <p><code>REINSTATED</code> – Sending is allowed even with active reputation findings.</p></li>
    /// </ul>
    pub fn status(mut self, input: crate::types::SendingStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current sending status. This can be one of the following:</p>
    /// <ul>
    /// <li>
    /// <p><code>ENABLED</code> – Sending is allowed.</p></li>
    /// <li>
    /// <p><code>DISABLED</code> – Sending is prevented.</p></li>
    /// <li>
    /// <p><code>REINSTATED</code> – Sending is allowed even with active reputation findings.</p></li>
    /// </ul>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::SendingStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current sending status. This can be one of the following:</p>
    /// <ul>
    /// <li>
    /// <p><code>ENABLED</code> – Sending is allowed.</p></li>
    /// <li>
    /// <p><code>DISABLED</code> – Sending is prevented.</p></li>
    /// <li>
    /// <p><code>REINSTATED</code> – Sending is allowed even with active reputation findings.</p></li>
    /// </ul>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::SendingStatus> {
        &self.status
    }
    /// <p>A description of the reason for the current status, or null if no specific cause is available.</p>
    pub fn cause(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cause = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of the reason for the current status, or null if no specific cause is available.</p>
    pub fn set_cause(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cause = input;
        self
    }
    /// <p>A description of the reason for the current status, or null if no specific cause is available.</p>
    pub fn get_cause(&self) -> &::std::option::Option<::std::string::String> {
        &self.cause
    }
    /// <p>The timestamp when this status was last updated.</p>
    pub fn last_updated_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when this status was last updated.</p>
    pub fn set_last_updated_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated_timestamp = input;
        self
    }
    /// <p>The timestamp when this status was last updated.</p>
    pub fn get_last_updated_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated_timestamp
    }
    /// Consumes the builder and constructs a [`StatusRecord`](crate::types::StatusRecord).
    pub fn build(self) -> crate::types::StatusRecord {
        crate::types::StatusRecord {
            status: self.status,
            cause: self.cause,
            last_updated_timestamp: self.last_updated_timestamp,
        }
    }
}
