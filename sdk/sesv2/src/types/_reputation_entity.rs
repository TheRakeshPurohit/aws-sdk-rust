// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that contains information about a reputation entity, including its reference, type, policy, status records, and reputation impact.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ReputationEntity {
    /// <p>The unique identifier for the reputation entity. For resource-type entities, this is the Amazon Resource Name (ARN) of the resource.</p>
    pub reputation_entity_reference: ::std::option::Option<::std::string::String>,
    /// <p>The type of reputation entity. Currently, only <code>RESOURCE</code> type entities are supported.</p>
    pub reputation_entity_type: ::std::option::Option<crate::types::ReputationEntityType>,
    /// <p>The Amazon Resource Name (ARN) of the reputation management policy applied to this entity. This is an Amazon Web Services Amazon SES-managed policy.</p>
    pub reputation_management_policy: ::std::option::Option<::std::string::String>,
    /// <p>The customer-managed status record for this reputation entity, including the current status, cause description, and last updated timestamp.</p>
    pub customer_managed_status: ::std::option::Option<crate::types::StatusRecord>,
    /// <p>The Amazon Web Services Amazon SES-managed status record for this reputation entity, including the current status, cause description, and last updated timestamp.</p>
    pub aws_ses_managed_status: ::std::option::Option<crate::types::StatusRecord>,
    /// <p>The aggregate sending status that determines whether the entity is allowed to send emails. This status is derived from both the customer-managed and Amazon Web Services Amazon SES-managed statuses. If either the customer-managed status or the Amazon Web Services Amazon SES-managed status is <code>DISABLED</code>, the aggregate status will be <code>DISABLED</code> and the entity will not be allowed to send emails. When the customer-managed status is set to <code>REINSTATED</code>, the entity can continue sending even if there are active reputation findings, provided the Amazon Web Services Amazon SES-managed status also permits sending. The entity can only send emails when both statuses permit sending.</p>
    pub sending_status_aggregate: ::std::option::Option<crate::types::SendingStatus>,
    /// <p>The reputation impact level for this entity, representing the highest impact reputation finding currently active. Reputation findings can be retrieved using the <code>ListRecommendations</code> operation.</p>
    pub reputation_impact: ::std::option::Option<crate::types::RecommendationImpact>,
}
impl ReputationEntity {
    /// <p>The unique identifier for the reputation entity. For resource-type entities, this is the Amazon Resource Name (ARN) of the resource.</p>
    pub fn reputation_entity_reference(&self) -> ::std::option::Option<&str> {
        self.reputation_entity_reference.as_deref()
    }
    /// <p>The type of reputation entity. Currently, only <code>RESOURCE</code> type entities are supported.</p>
    pub fn reputation_entity_type(&self) -> ::std::option::Option<&crate::types::ReputationEntityType> {
        self.reputation_entity_type.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the reputation management policy applied to this entity. This is an Amazon Web Services Amazon SES-managed policy.</p>
    pub fn reputation_management_policy(&self) -> ::std::option::Option<&str> {
        self.reputation_management_policy.as_deref()
    }
    /// <p>The customer-managed status record for this reputation entity, including the current status, cause description, and last updated timestamp.</p>
    pub fn customer_managed_status(&self) -> ::std::option::Option<&crate::types::StatusRecord> {
        self.customer_managed_status.as_ref()
    }
    /// <p>The Amazon Web Services Amazon SES-managed status record for this reputation entity, including the current status, cause description, and last updated timestamp.</p>
    pub fn aws_ses_managed_status(&self) -> ::std::option::Option<&crate::types::StatusRecord> {
        self.aws_ses_managed_status.as_ref()
    }
    /// <p>The aggregate sending status that determines whether the entity is allowed to send emails. This status is derived from both the customer-managed and Amazon Web Services Amazon SES-managed statuses. If either the customer-managed status or the Amazon Web Services Amazon SES-managed status is <code>DISABLED</code>, the aggregate status will be <code>DISABLED</code> and the entity will not be allowed to send emails. When the customer-managed status is set to <code>REINSTATED</code>, the entity can continue sending even if there are active reputation findings, provided the Amazon Web Services Amazon SES-managed status also permits sending. The entity can only send emails when both statuses permit sending.</p>
    pub fn sending_status_aggregate(&self) -> ::std::option::Option<&crate::types::SendingStatus> {
        self.sending_status_aggregate.as_ref()
    }
    /// <p>The reputation impact level for this entity, representing the highest impact reputation finding currently active. Reputation findings can be retrieved using the <code>ListRecommendations</code> operation.</p>
    pub fn reputation_impact(&self) -> ::std::option::Option<&crate::types::RecommendationImpact> {
        self.reputation_impact.as_ref()
    }
}
impl ReputationEntity {
    /// Creates a new builder-style object to manufacture [`ReputationEntity`](crate::types::ReputationEntity).
    pub fn builder() -> crate::types::builders::ReputationEntityBuilder {
        crate::types::builders::ReputationEntityBuilder::default()
    }
}

/// A builder for [`ReputationEntity`](crate::types::ReputationEntity).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ReputationEntityBuilder {
    pub(crate) reputation_entity_reference: ::std::option::Option<::std::string::String>,
    pub(crate) reputation_entity_type: ::std::option::Option<crate::types::ReputationEntityType>,
    pub(crate) reputation_management_policy: ::std::option::Option<::std::string::String>,
    pub(crate) customer_managed_status: ::std::option::Option<crate::types::StatusRecord>,
    pub(crate) aws_ses_managed_status: ::std::option::Option<crate::types::StatusRecord>,
    pub(crate) sending_status_aggregate: ::std::option::Option<crate::types::SendingStatus>,
    pub(crate) reputation_impact: ::std::option::Option<crate::types::RecommendationImpact>,
}
impl ReputationEntityBuilder {
    /// <p>The unique identifier for the reputation entity. For resource-type entities, this is the Amazon Resource Name (ARN) of the resource.</p>
    pub fn reputation_entity_reference(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.reputation_entity_reference = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for the reputation entity. For resource-type entities, this is the Amazon Resource Name (ARN) of the resource.</p>
    pub fn set_reputation_entity_reference(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.reputation_entity_reference = input;
        self
    }
    /// <p>The unique identifier for the reputation entity. For resource-type entities, this is the Amazon Resource Name (ARN) of the resource.</p>
    pub fn get_reputation_entity_reference(&self) -> &::std::option::Option<::std::string::String> {
        &self.reputation_entity_reference
    }
    /// <p>The type of reputation entity. Currently, only <code>RESOURCE</code> type entities are supported.</p>
    pub fn reputation_entity_type(mut self, input: crate::types::ReputationEntityType) -> Self {
        self.reputation_entity_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of reputation entity. Currently, only <code>RESOURCE</code> type entities are supported.</p>
    pub fn set_reputation_entity_type(mut self, input: ::std::option::Option<crate::types::ReputationEntityType>) -> Self {
        self.reputation_entity_type = input;
        self
    }
    /// <p>The type of reputation entity. Currently, only <code>RESOURCE</code> type entities are supported.</p>
    pub fn get_reputation_entity_type(&self) -> &::std::option::Option<crate::types::ReputationEntityType> {
        &self.reputation_entity_type
    }
    /// <p>The Amazon Resource Name (ARN) of the reputation management policy applied to this entity. This is an Amazon Web Services Amazon SES-managed policy.</p>
    pub fn reputation_management_policy(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.reputation_management_policy = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the reputation management policy applied to this entity. This is an Amazon Web Services Amazon SES-managed policy.</p>
    pub fn set_reputation_management_policy(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.reputation_management_policy = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the reputation management policy applied to this entity. This is an Amazon Web Services Amazon SES-managed policy.</p>
    pub fn get_reputation_management_policy(&self) -> &::std::option::Option<::std::string::String> {
        &self.reputation_management_policy
    }
    /// <p>The customer-managed status record for this reputation entity, including the current status, cause description, and last updated timestamp.</p>
    pub fn customer_managed_status(mut self, input: crate::types::StatusRecord) -> Self {
        self.customer_managed_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The customer-managed status record for this reputation entity, including the current status, cause description, and last updated timestamp.</p>
    pub fn set_customer_managed_status(mut self, input: ::std::option::Option<crate::types::StatusRecord>) -> Self {
        self.customer_managed_status = input;
        self
    }
    /// <p>The customer-managed status record for this reputation entity, including the current status, cause description, and last updated timestamp.</p>
    pub fn get_customer_managed_status(&self) -> &::std::option::Option<crate::types::StatusRecord> {
        &self.customer_managed_status
    }
    /// <p>The Amazon Web Services Amazon SES-managed status record for this reputation entity, including the current status, cause description, and last updated timestamp.</p>
    pub fn aws_ses_managed_status(mut self, input: crate::types::StatusRecord) -> Self {
        self.aws_ses_managed_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Amazon Web Services Amazon SES-managed status record for this reputation entity, including the current status, cause description, and last updated timestamp.</p>
    pub fn set_aws_ses_managed_status(mut self, input: ::std::option::Option<crate::types::StatusRecord>) -> Self {
        self.aws_ses_managed_status = input;
        self
    }
    /// <p>The Amazon Web Services Amazon SES-managed status record for this reputation entity, including the current status, cause description, and last updated timestamp.</p>
    pub fn get_aws_ses_managed_status(&self) -> &::std::option::Option<crate::types::StatusRecord> {
        &self.aws_ses_managed_status
    }
    /// <p>The aggregate sending status that determines whether the entity is allowed to send emails. This status is derived from both the customer-managed and Amazon Web Services Amazon SES-managed statuses. If either the customer-managed status or the Amazon Web Services Amazon SES-managed status is <code>DISABLED</code>, the aggregate status will be <code>DISABLED</code> and the entity will not be allowed to send emails. When the customer-managed status is set to <code>REINSTATED</code>, the entity can continue sending even if there are active reputation findings, provided the Amazon Web Services Amazon SES-managed status also permits sending. The entity can only send emails when both statuses permit sending.</p>
    pub fn sending_status_aggregate(mut self, input: crate::types::SendingStatus) -> Self {
        self.sending_status_aggregate = ::std::option::Option::Some(input);
        self
    }
    /// <p>The aggregate sending status that determines whether the entity is allowed to send emails. This status is derived from both the customer-managed and Amazon Web Services Amazon SES-managed statuses. If either the customer-managed status or the Amazon Web Services Amazon SES-managed status is <code>DISABLED</code>, the aggregate status will be <code>DISABLED</code> and the entity will not be allowed to send emails. When the customer-managed status is set to <code>REINSTATED</code>, the entity can continue sending even if there are active reputation findings, provided the Amazon Web Services Amazon SES-managed status also permits sending. The entity can only send emails when both statuses permit sending.</p>
    pub fn set_sending_status_aggregate(mut self, input: ::std::option::Option<crate::types::SendingStatus>) -> Self {
        self.sending_status_aggregate = input;
        self
    }
    /// <p>The aggregate sending status that determines whether the entity is allowed to send emails. This status is derived from both the customer-managed and Amazon Web Services Amazon SES-managed statuses. If either the customer-managed status or the Amazon Web Services Amazon SES-managed status is <code>DISABLED</code>, the aggregate status will be <code>DISABLED</code> and the entity will not be allowed to send emails. When the customer-managed status is set to <code>REINSTATED</code>, the entity can continue sending even if there are active reputation findings, provided the Amazon Web Services Amazon SES-managed status also permits sending. The entity can only send emails when both statuses permit sending.</p>
    pub fn get_sending_status_aggregate(&self) -> &::std::option::Option<crate::types::SendingStatus> {
        &self.sending_status_aggregate
    }
    /// <p>The reputation impact level for this entity, representing the highest impact reputation finding currently active. Reputation findings can be retrieved using the <code>ListRecommendations</code> operation.</p>
    pub fn reputation_impact(mut self, input: crate::types::RecommendationImpact) -> Self {
        self.reputation_impact = ::std::option::Option::Some(input);
        self
    }
    /// <p>The reputation impact level for this entity, representing the highest impact reputation finding currently active. Reputation findings can be retrieved using the <code>ListRecommendations</code> operation.</p>
    pub fn set_reputation_impact(mut self, input: ::std::option::Option<crate::types::RecommendationImpact>) -> Self {
        self.reputation_impact = input;
        self
    }
    /// <p>The reputation impact level for this entity, representing the highest impact reputation finding currently active. Reputation findings can be retrieved using the <code>ListRecommendations</code> operation.</p>
    pub fn get_reputation_impact(&self) -> &::std::option::Option<crate::types::RecommendationImpact> {
        &self.reputation_impact
    }
    /// Consumes the builder and constructs a [`ReputationEntity`](crate::types::ReputationEntity).
    pub fn build(self) -> crate::types::ReputationEntity {
        crate::types::ReputationEntity {
            reputation_entity_reference: self.reputation_entity_reference,
            reputation_entity_type: self.reputation_entity_type,
            reputation_management_policy: self.reputation_management_policy,
            customer_managed_status: self.customer_managed_status,
            aws_ses_managed_status: self.aws_ses_managed_status,
            sending_status_aggregate: self.sending_status_aggregate,
            reputation_impact: self.reputation_impact,
        }
    }
}
