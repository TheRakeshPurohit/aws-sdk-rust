// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_get_dedicated_ips_output_output_next_token(
    input: &crate::operation::get_dedicated_ips::GetDedicatedIpsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_configuration_sets_output_output_next_token(
    input: &crate::operation::list_configuration_sets::ListConfigurationSetsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_contact_lists_output_output_next_token(
    input: &crate::operation::list_contact_lists::ListContactListsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_contacts_output_output_next_token(
    input: &crate::operation::list_contacts::ListContactsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_custom_verification_email_templates_output_output_next_token(
    input: &crate::operation::list_custom_verification_email_templates::ListCustomVerificationEmailTemplatesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_dedicated_ip_pools_output_output_next_token(
    input: &crate::operation::list_dedicated_ip_pools::ListDedicatedIpPoolsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_deliverability_test_reports_output_output_next_token(
    input: &crate::operation::list_deliverability_test_reports::ListDeliverabilityTestReportsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_domain_deliverability_campaigns_output_output_next_token(
    input: &crate::operation::list_domain_deliverability_campaigns::ListDomainDeliverabilityCampaignsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_email_identities_output_output_next_token(
    input: &crate::operation::list_email_identities::ListEmailIdentitiesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_email_templates_output_output_next_token(
    input: &crate::operation::list_email_templates::ListEmailTemplatesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_export_jobs_output_output_next_token(
    input: &crate::operation::list_export_jobs::ListExportJobsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_import_jobs_output_output_next_token(
    input: &crate::operation::list_import_jobs::ListImportJobsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_multi_region_endpoints_output_output_next_token(
    input: &crate::operation::list_multi_region_endpoints::ListMultiRegionEndpointsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_recommendations_output_output_next_token(
    input: &crate::operation::list_recommendations::ListRecommendationsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_reputation_entities_output_output_next_token(
    input: &crate::operation::list_reputation_entities::ListReputationEntitiesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_resource_tenants_output_output_next_token(
    input: &crate::operation::list_resource_tenants::ListResourceTenantsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_suppressed_destinations_output_output_next_token(
    input: &crate::operation::list_suppressed_destinations::ListSuppressedDestinationsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_tenant_resources_output_output_next_token(
    input: &crate::operation::list_tenant_resources::ListTenantResourcesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_tenants_output_output_next_token(
    input: &crate::operation::list_tenants::ListTenantsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_multi_region_endpoints_output_output_multi_region_endpoints(
    input: crate::operation::list_multi_region_endpoints::ListMultiRegionEndpointsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::MultiRegionEndpoint>> {
    let input = input.multi_region_endpoints?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_reputation_entities_output_output_reputation_entities(
    input: crate::operation::list_reputation_entities::ListReputationEntitiesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ReputationEntity>> {
    let input = input.reputation_entities?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_resource_tenants_output_output_resource_tenants(
    input: crate::operation::list_resource_tenants::ListResourceTenantsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ResourceTenantMetadata>> {
    let input = input.resource_tenants?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_tenant_resources_output_output_tenant_resources(
    input: crate::operation::list_tenant_resources::ListTenantResourcesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::TenantResource>> {
    let input = input.tenant_resources?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_tenants_output_output_tenants(
    input: crate::operation::list_tenants::ListTenantsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::TenantInfo>> {
    let input = input.tenants?;
    ::std::option::Option::Some(input)
}
