// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::delete_tenant_resource_association::_delete_tenant_resource_association_output::DeleteTenantResourceAssociationOutputBuilder;

pub use crate::operation::delete_tenant_resource_association::_delete_tenant_resource_association_input::DeleteTenantResourceAssociationInputBuilder;

impl crate::operation::delete_tenant_resource_association::builders::DeleteTenantResourceAssociationInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::delete_tenant_resource_association::DeleteTenantResourceAssociationOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_tenant_resource_association::DeleteTenantResourceAssociationError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.delete_tenant_resource_association();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `DeleteTenantResourceAssociation`.
///
/// <p>Delete an association between a tenant and a resource.</p>
/// <p>When you delete a tenant-resource association, the resource itself is not deleted, only its association with the specific tenant is removed. After removal, the resource will no longer be available for use with that tenant's email sending operations.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct DeleteTenantResourceAssociationFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::delete_tenant_resource_association::builders::DeleteTenantResourceAssociationInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::delete_tenant_resource_association::DeleteTenantResourceAssociationOutput,
        crate::operation::delete_tenant_resource_association::DeleteTenantResourceAssociationError,
    > for DeleteTenantResourceAssociationFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::delete_tenant_resource_association::DeleteTenantResourceAssociationOutput,
            crate::operation::delete_tenant_resource_association::DeleteTenantResourceAssociationError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl DeleteTenantResourceAssociationFluentBuilder {
    /// Creates a new `DeleteTenantResourceAssociationFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the DeleteTenantResourceAssociation as a reference.
    pub fn as_input(&self) -> &crate::operation::delete_tenant_resource_association::builders::DeleteTenantResourceAssociationInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::delete_tenant_resource_association::DeleteTenantResourceAssociationOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_tenant_resource_association::DeleteTenantResourceAssociationError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::delete_tenant_resource_association::DeleteTenantResourceAssociation::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::delete_tenant_resource_association::DeleteTenantResourceAssociation::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::delete_tenant_resource_association::DeleteTenantResourceAssociationOutput,
        crate::operation::delete_tenant_resource_association::DeleteTenantResourceAssociationError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The name of the tenant to remove the resource association from.</p>
    pub fn tenant_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.tenant_name(input.into());
        self
    }
    /// <p>The name of the tenant to remove the resource association from.</p>
    pub fn set_tenant_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_tenant_name(input);
        self
    }
    /// <p>The name of the tenant to remove the resource association from.</p>
    pub fn get_tenant_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_tenant_name()
    }
    /// <p>The Amazon Resource Name (ARN) of the resource to remove from the tenant association.</p>
    pub fn resource_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.resource_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the resource to remove from the tenant association.</p>
    pub fn set_resource_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_resource_arn(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the resource to remove from the tenant association.</p>
    pub fn get_resource_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_resource_arn()
    }
}
