// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a request to update the customer-managed sending status for a reputation entity.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateReputationEntityCustomerManagedStatusInput {
    /// <p>The type of reputation entity. Currently, only <code>RESOURCE</code> type entities are supported.</p>
    pub reputation_entity_type: ::std::option::Option<crate::types::ReputationEntityType>,
    /// <p>The unique identifier for the reputation entity. For resource-type entities, this is the Amazon Resource Name (ARN) of the resource.</p>
    pub reputation_entity_reference: ::std::option::Option<::std::string::String>,
    /// <p>The new customer-managed sending status for the reputation entity. This can be one of the following:</p>
    /// <ul>
    /// <li>
    /// <p><code>ENABLED</code> – Allow sending for this entity.</p></li>
    /// <li>
    /// <p><code>DISABLED</code> – Prevent sending for this entity.</p></li>
    /// <li>
    /// <p><code>REINSTATED</code> – Allow sending even if there are active reputation findings.</p></li>
    /// </ul>
    pub sending_status: ::std::option::Option<crate::types::SendingStatus>,
}
impl UpdateReputationEntityCustomerManagedStatusInput {
    /// <p>The type of reputation entity. Currently, only <code>RESOURCE</code> type entities are supported.</p>
    pub fn reputation_entity_type(&self) -> ::std::option::Option<&crate::types::ReputationEntityType> {
        self.reputation_entity_type.as_ref()
    }
    /// <p>The unique identifier for the reputation entity. For resource-type entities, this is the Amazon Resource Name (ARN) of the resource.</p>
    pub fn reputation_entity_reference(&self) -> ::std::option::Option<&str> {
        self.reputation_entity_reference.as_deref()
    }
    /// <p>The new customer-managed sending status for the reputation entity. This can be one of the following:</p>
    /// <ul>
    /// <li>
    /// <p><code>ENABLED</code> – Allow sending for this entity.</p></li>
    /// <li>
    /// <p><code>DISABLED</code> – Prevent sending for this entity.</p></li>
    /// <li>
    /// <p><code>REINSTATED</code> – Allow sending even if there are active reputation findings.</p></li>
    /// </ul>
    pub fn sending_status(&self) -> ::std::option::Option<&crate::types::SendingStatus> {
        self.sending_status.as_ref()
    }
}
impl UpdateReputationEntityCustomerManagedStatusInput {
    /// Creates a new builder-style object to manufacture [`UpdateReputationEntityCustomerManagedStatusInput`](crate::operation::update_reputation_entity_customer_managed_status::UpdateReputationEntityCustomerManagedStatusInput).
    pub fn builder(
    ) -> crate::operation::update_reputation_entity_customer_managed_status::builders::UpdateReputationEntityCustomerManagedStatusInputBuilder {
        crate::operation::update_reputation_entity_customer_managed_status::builders::UpdateReputationEntityCustomerManagedStatusInputBuilder::default(
        )
    }
}

/// A builder for [`UpdateReputationEntityCustomerManagedStatusInput`](crate::operation::update_reputation_entity_customer_managed_status::UpdateReputationEntityCustomerManagedStatusInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateReputationEntityCustomerManagedStatusInputBuilder {
    pub(crate) reputation_entity_type: ::std::option::Option<crate::types::ReputationEntityType>,
    pub(crate) reputation_entity_reference: ::std::option::Option<::std::string::String>,
    pub(crate) sending_status: ::std::option::Option<crate::types::SendingStatus>,
}
impl UpdateReputationEntityCustomerManagedStatusInputBuilder {
    /// <p>The type of reputation entity. Currently, only <code>RESOURCE</code> type entities are supported.</p>
    /// This field is required.
    pub fn reputation_entity_type(mut self, input: crate::types::ReputationEntityType) -> Self {
        self.reputation_entity_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of reputation entity. Currently, only <code>RESOURCE</code> type entities are supported.</p>
    pub fn set_reputation_entity_type(mut self, input: ::std::option::Option<crate::types::ReputationEntityType>) -> Self {
        self.reputation_entity_type = input;
        self
    }
    /// <p>The type of reputation entity. Currently, only <code>RESOURCE</code> type entities are supported.</p>
    pub fn get_reputation_entity_type(&self) -> &::std::option::Option<crate::types::ReputationEntityType> {
        &self.reputation_entity_type
    }
    /// <p>The unique identifier for the reputation entity. For resource-type entities, this is the Amazon Resource Name (ARN) of the resource.</p>
    /// This field is required.
    pub fn reputation_entity_reference(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.reputation_entity_reference = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for the reputation entity. For resource-type entities, this is the Amazon Resource Name (ARN) of the resource.</p>
    pub fn set_reputation_entity_reference(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.reputation_entity_reference = input;
        self
    }
    /// <p>The unique identifier for the reputation entity. For resource-type entities, this is the Amazon Resource Name (ARN) of the resource.</p>
    pub fn get_reputation_entity_reference(&self) -> &::std::option::Option<::std::string::String> {
        &self.reputation_entity_reference
    }
    /// <p>The new customer-managed sending status for the reputation entity. This can be one of the following:</p>
    /// <ul>
    /// <li>
    /// <p><code>ENABLED</code> – Allow sending for this entity.</p></li>
    /// <li>
    /// <p><code>DISABLED</code> – Prevent sending for this entity.</p></li>
    /// <li>
    /// <p><code>REINSTATED</code> – Allow sending even if there are active reputation findings.</p></li>
    /// </ul>
    /// This field is required.
    pub fn sending_status(mut self, input: crate::types::SendingStatus) -> Self {
        self.sending_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The new customer-managed sending status for the reputation entity. This can be one of the following:</p>
    /// <ul>
    /// <li>
    /// <p><code>ENABLED</code> – Allow sending for this entity.</p></li>
    /// <li>
    /// <p><code>DISABLED</code> – Prevent sending for this entity.</p></li>
    /// <li>
    /// <p><code>REINSTATED</code> – Allow sending even if there are active reputation findings.</p></li>
    /// </ul>
    pub fn set_sending_status(mut self, input: ::std::option::Option<crate::types::SendingStatus>) -> Self {
        self.sending_status = input;
        self
    }
    /// <p>The new customer-managed sending status for the reputation entity. This can be one of the following:</p>
    /// <ul>
    /// <li>
    /// <p><code>ENABLED</code> – Allow sending for this entity.</p></li>
    /// <li>
    /// <p><code>DISABLED</code> – Prevent sending for this entity.</p></li>
    /// <li>
    /// <p><code>REINSTATED</code> – Allow sending even if there are active reputation findings.</p></li>
    /// </ul>
    pub fn get_sending_status(&self) -> &::std::option::Option<crate::types::SendingStatus> {
        &self.sending_status
    }
    /// Consumes the builder and constructs a [`UpdateReputationEntityCustomerManagedStatusInput`](crate::operation::update_reputation_entity_customer_managed_status::UpdateReputationEntityCustomerManagedStatusInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_reputation_entity_customer_managed_status::UpdateReputationEntityCustomerManagedStatusInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::update_reputation_entity_customer_managed_status::UpdateReputationEntityCustomerManagedStatusInput {
                reputation_entity_type: self.reputation_entity_type,
                reputation_entity_reference: self.reputation_entity_reference,
                sending_status: self.sending_status,
            },
        )
    }
}
