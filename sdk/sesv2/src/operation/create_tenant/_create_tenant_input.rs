// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a request to create a tenant.</p>
/// <p><i>Tenants</i> are logical containers that group related SES resources together. Each tenant can have its own set of resources like email identities, configuration sets, and templates, along with reputation metrics and sending status. This helps isolate and manage email sending for different customers or business units within your Amazon SES API v2 account.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateTenantInput {
    /// <p>The name of the tenant to create. The name can contain up to 64 alphanumeric characters, including letters, numbers, hyphens (-) and underscores (_) only.</p>
    pub tenant_name: ::std::option::Option<::std::string::String>,
    /// <p>An array of objects that define the tags (keys and values) to associate with the tenant</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CreateTenantInput {
    /// <p>The name of the tenant to create. The name can contain up to 64 alphanumeric characters, including letters, numbers, hyphens (-) and underscores (_) only.</p>
    pub fn tenant_name(&self) -> ::std::option::Option<&str> {
        self.tenant_name.as_deref()
    }
    /// <p>An array of objects that define the tags (keys and values) to associate with the tenant</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl CreateTenantInput {
    /// Creates a new builder-style object to manufacture [`CreateTenantInput`](crate::operation::create_tenant::CreateTenantInput).
    pub fn builder() -> crate::operation::create_tenant::builders::CreateTenantInputBuilder {
        crate::operation::create_tenant::builders::CreateTenantInputBuilder::default()
    }
}

/// A builder for [`CreateTenantInput`](crate::operation::create_tenant::CreateTenantInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateTenantInputBuilder {
    pub(crate) tenant_name: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CreateTenantInputBuilder {
    /// <p>The name of the tenant to create. The name can contain up to 64 alphanumeric characters, including letters, numbers, hyphens (-) and underscores (_) only.</p>
    /// This field is required.
    pub fn tenant_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.tenant_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the tenant to create. The name can contain up to 64 alphanumeric characters, including letters, numbers, hyphens (-) and underscores (_) only.</p>
    pub fn set_tenant_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.tenant_name = input;
        self
    }
    /// <p>The name of the tenant to create. The name can contain up to 64 alphanumeric characters, including letters, numbers, hyphens (-) and underscores (_) only.</p>
    pub fn get_tenant_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.tenant_name
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>An array of objects that define the tags (keys and values) to associate with the tenant</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of objects that define the tags (keys and values) to associate with the tenant</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>An array of objects that define the tags (keys and values) to associate with the tenant</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateTenantInput`](crate::operation::create_tenant::CreateTenantInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_tenant::CreateTenantInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_tenant::CreateTenantInput {
            tenant_name: self.tenant_name,
            tags: self.tags,
        })
    }
}
