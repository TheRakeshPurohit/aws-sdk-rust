// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A list of reputation entities in your account.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListReputationEntitiesOutput {
    /// <p>An array that contains information about the reputation entities in your account.</p>
    pub reputation_entities: ::std::option::Option<::std::vec::Vec<crate::types::ReputationEntity>>,
    /// <p>A token that indicates that there are additional reputation entities to list. To view additional reputation entities, issue another request to <code>ListReputationEntities</code>, and pass this token in the <code>NextToken</code> parameter.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListReputationEntitiesOutput {
    /// <p>An array that contains information about the reputation entities in your account.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.reputation_entities.is_none()`.
    pub fn reputation_entities(&self) -> &[crate::types::ReputationEntity] {
        self.reputation_entities.as_deref().unwrap_or_default()
    }
    /// <p>A token that indicates that there are additional reputation entities to list. To view additional reputation entities, issue another request to <code>ListReputationEntities</code>, and pass this token in the <code>NextToken</code> parameter.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ::aws_types::request_id::RequestId for ListReputationEntitiesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListReputationEntitiesOutput {
    /// Creates a new builder-style object to manufacture [`ListReputationEntitiesOutput`](crate::operation::list_reputation_entities::ListReputationEntitiesOutput).
    pub fn builder() -> crate::operation::list_reputation_entities::builders::ListReputationEntitiesOutputBuilder {
        crate::operation::list_reputation_entities::builders::ListReputationEntitiesOutputBuilder::default()
    }
}

/// A builder for [`ListReputationEntitiesOutput`](crate::operation::list_reputation_entities::ListReputationEntitiesOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListReputationEntitiesOutputBuilder {
    pub(crate) reputation_entities: ::std::option::Option<::std::vec::Vec<crate::types::ReputationEntity>>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListReputationEntitiesOutputBuilder {
    /// Appends an item to `reputation_entities`.
    ///
    /// To override the contents of this collection use [`set_reputation_entities`](Self::set_reputation_entities).
    ///
    /// <p>An array that contains information about the reputation entities in your account.</p>
    pub fn reputation_entities(mut self, input: crate::types::ReputationEntity) -> Self {
        let mut v = self.reputation_entities.unwrap_or_default();
        v.push(input);
        self.reputation_entities = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array that contains information about the reputation entities in your account.</p>
    pub fn set_reputation_entities(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ReputationEntity>>) -> Self {
        self.reputation_entities = input;
        self
    }
    /// <p>An array that contains information about the reputation entities in your account.</p>
    pub fn get_reputation_entities(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ReputationEntity>> {
        &self.reputation_entities
    }
    /// <p>A token that indicates that there are additional reputation entities to list. To view additional reputation entities, issue another request to <code>ListReputationEntities</code>, and pass this token in the <code>NextToken</code> parameter.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A token that indicates that there are additional reputation entities to list. To view additional reputation entities, issue another request to <code>ListReputationEntities</code>, and pass this token in the <code>NextToken</code> parameter.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>A token that indicates that there are additional reputation entities to list. To view additional reputation entities, issue another request to <code>ListReputationEntities</code>, and pass this token in the <code>NextToken</code> parameter.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListReputationEntitiesOutput`](crate::operation::list_reputation_entities::ListReputationEntitiesOutput).
    pub fn build(self) -> crate::operation::list_reputation_entities::ListReputationEntitiesOutput {
        crate::operation::list_reputation_entities::ListReputationEntitiesOutput {
            reputation_entities: self.reputation_entities,
            next_token: self.next_token,
            _request_id: self._request_id,
        }
    }
}
