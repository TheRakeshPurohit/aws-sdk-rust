// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a request to list reputation entities with optional filtering.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListReputationEntitiesInput {
    /// <p>An object that contains filters to apply when listing reputation entities. You can filter by entity type, reputation impact, sending status, or entity reference prefix.</p>
    pub filter: ::std::option::Option<::std::collections::HashMap<crate::types::ReputationEntityFilterKey, ::std::string::String>>,
    /// <p>A token returned from a previous call to <code>ListReputationEntities</code> to indicate the position in the list of reputation entities.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The number of results to show in a single call to <code>ListReputationEntities</code>. If the number of results is larger than the number you specified in this parameter, then the response includes a <code>NextToken</code> element, which you can use to obtain additional results.</p>
    pub page_size: ::std::option::Option<i32>,
}
impl ListReputationEntitiesInput {
    /// <p>An object that contains filters to apply when listing reputation entities. You can filter by entity type, reputation impact, sending status, or entity reference prefix.</p>
    pub fn filter(&self) -> ::std::option::Option<&::std::collections::HashMap<crate::types::ReputationEntityFilterKey, ::std::string::String>> {
        self.filter.as_ref()
    }
    /// <p>A token returned from a previous call to <code>ListReputationEntities</code> to indicate the position in the list of reputation entities.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The number of results to show in a single call to <code>ListReputationEntities</code>. If the number of results is larger than the number you specified in this parameter, then the response includes a <code>NextToken</code> element, which you can use to obtain additional results.</p>
    pub fn page_size(&self) -> ::std::option::Option<i32> {
        self.page_size
    }
}
impl ListReputationEntitiesInput {
    /// Creates a new builder-style object to manufacture [`ListReputationEntitiesInput`](crate::operation::list_reputation_entities::ListReputationEntitiesInput).
    pub fn builder() -> crate::operation::list_reputation_entities::builders::ListReputationEntitiesInputBuilder {
        crate::operation::list_reputation_entities::builders::ListReputationEntitiesInputBuilder::default()
    }
}

/// A builder for [`ListReputationEntitiesInput`](crate::operation::list_reputation_entities::ListReputationEntitiesInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListReputationEntitiesInputBuilder {
    pub(crate) filter: ::std::option::Option<::std::collections::HashMap<crate::types::ReputationEntityFilterKey, ::std::string::String>>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) page_size: ::std::option::Option<i32>,
}
impl ListReputationEntitiesInputBuilder {
    /// Adds a key-value pair to `filter`.
    ///
    /// To override the contents of this collection use [`set_filter`](Self::set_filter).
    ///
    /// <p>An object that contains filters to apply when listing reputation entities. You can filter by entity type, reputation impact, sending status, or entity reference prefix.</p>
    pub fn filter(mut self, k: crate::types::ReputationEntityFilterKey, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.filter.unwrap_or_default();
        hash_map.insert(k, v.into());
        self.filter = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>An object that contains filters to apply when listing reputation entities. You can filter by entity type, reputation impact, sending status, or entity reference prefix.</p>
    pub fn set_filter(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<crate::types::ReputationEntityFilterKey, ::std::string::String>>,
    ) -> Self {
        self.filter = input;
        self
    }
    /// <p>An object that contains filters to apply when listing reputation entities. You can filter by entity type, reputation impact, sending status, or entity reference prefix.</p>
    pub fn get_filter(&self) -> &::std::option::Option<::std::collections::HashMap<crate::types::ReputationEntityFilterKey, ::std::string::String>> {
        &self.filter
    }
    /// <p>A token returned from a previous call to <code>ListReputationEntities</code> to indicate the position in the list of reputation entities.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A token returned from a previous call to <code>ListReputationEntities</code> to indicate the position in the list of reputation entities.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>A token returned from a previous call to <code>ListReputationEntities</code> to indicate the position in the list of reputation entities.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The number of results to show in a single call to <code>ListReputationEntities</code>. If the number of results is larger than the number you specified in this parameter, then the response includes a <code>NextToken</code> element, which you can use to obtain additional results.</p>
    pub fn page_size(mut self, input: i32) -> Self {
        self.page_size = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of results to show in a single call to <code>ListReputationEntities</code>. If the number of results is larger than the number you specified in this parameter, then the response includes a <code>NextToken</code> element, which you can use to obtain additional results.</p>
    pub fn set_page_size(mut self, input: ::std::option::Option<i32>) -> Self {
        self.page_size = input;
        self
    }
    /// <p>The number of results to show in a single call to <code>ListReputationEntities</code>. If the number of results is larger than the number you specified in this parameter, then the response includes a <code>NextToken</code> element, which you can use to obtain additional results.</p>
    pub fn get_page_size(&self) -> &::std::option::Option<i32> {
        &self.page_size
    }
    /// Consumes the builder and constructs a [`ListReputationEntitiesInput`](crate::operation::list_reputation_entities::ListReputationEntitiesInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_reputation_entities::ListReputationEntitiesInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::list_reputation_entities::ListReputationEntitiesInput {
            filter: self.filter,
            next_token: self.next_token,
            page_size: self.page_size,
        })
    }
}
