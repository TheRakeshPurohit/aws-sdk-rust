// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about an external code repository with which you can connect your Amazon Web Services resources. The connection is established through Amazon Inspector.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CodeRepositoryDetails {
    /// <p>The type of repository provider.</p>
    pub provider_type: ::std::option::Option<::std::string::String>,
    /// <p>The name of the project in the code repository.</p>
    pub project_name: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the code security integration associated with the repository.</p>
    pub code_security_integration_arn: ::std::option::Option<::std::string::String>,
}
impl CodeRepositoryDetails {
    /// <p>The type of repository provider.</p>
    pub fn provider_type(&self) -> ::std::option::Option<&str> {
        self.provider_type.as_deref()
    }
    /// <p>The name of the project in the code repository.</p>
    pub fn project_name(&self) -> ::std::option::Option<&str> {
        self.project_name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the code security integration associated with the repository.</p>
    pub fn code_security_integration_arn(&self) -> ::std::option::Option<&str> {
        self.code_security_integration_arn.as_deref()
    }
}
impl CodeRepositoryDetails {
    /// Creates a new builder-style object to manufacture [`CodeRepositoryDetails`](crate::types::CodeRepositoryDetails).
    pub fn builder() -> crate::types::builders::CodeRepositoryDetailsBuilder {
        crate::types::builders::CodeRepositoryDetailsBuilder::default()
    }
}

/// A builder for [`CodeRepositoryDetails`](crate::types::CodeRepositoryDetails).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CodeRepositoryDetailsBuilder {
    pub(crate) provider_type: ::std::option::Option<::std::string::String>,
    pub(crate) project_name: ::std::option::Option<::std::string::String>,
    pub(crate) code_security_integration_arn: ::std::option::Option<::std::string::String>,
}
impl CodeRepositoryDetailsBuilder {
    /// <p>The type of repository provider.</p>
    pub fn provider_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.provider_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of repository provider.</p>
    pub fn set_provider_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.provider_type = input;
        self
    }
    /// <p>The type of repository provider.</p>
    pub fn get_provider_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.provider_type
    }
    /// <p>The name of the project in the code repository.</p>
    pub fn project_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.project_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the project in the code repository.</p>
    pub fn set_project_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.project_name = input;
        self
    }
    /// <p>The name of the project in the code repository.</p>
    pub fn get_project_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.project_name
    }
    /// <p>The Amazon Resource Name (ARN) of the code security integration associated with the repository.</p>
    pub fn code_security_integration_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.code_security_integration_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the code security integration associated with the repository.</p>
    pub fn set_code_security_integration_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.code_security_integration_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the code security integration associated with the repository.</p>
    pub fn get_code_security_integration_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.code_security_integration_arn
    }
    /// Consumes the builder and constructs a [`CodeRepositoryDetails`](crate::types::CodeRepositoryDetails).
    pub fn build(self) -> crate::types::CodeRepositoryDetails {
        crate::types::CodeRepositoryDetails {
            provider_type: self.provider_type,
            project_name: self.project_name,
            code_security_integration_arn: self.code_security_integration_arn,
        }
    }
}
