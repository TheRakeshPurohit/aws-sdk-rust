// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_monitor::_create_monitor_output::CreateMonitorOutputBuilder;

pub use crate::operation::create_monitor::_create_monitor_input::CreateMonitorInputBuilder;

impl crate::operation::create_monitor::builders::CreateMonitorInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_monitor::CreateMonitorOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_monitor::CreateMonitorError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_monitor();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateMonitor`.
///
/// <p>Create a monitor for specific network flows between local and remote resources, so that you can monitor network performance for one or several of your workloads. For each monitor, Network Flow Monitor publishes detailed end-to-end performance metrics and a network health indicator (NHI) that informs you whether there were Amazon Web Services network issues for one or more of the network flows tracked by a monitor, during a time period that you choose.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateMonitorFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_monitor::builders::CreateMonitorInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_monitor::CreateMonitorOutput,
        crate::operation::create_monitor::CreateMonitorError,
    > for CreateMonitorFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_monitor::CreateMonitorOutput,
            crate::operation::create_monitor::CreateMonitorError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreateMonitorFluentBuilder {
    /// Creates a new `CreateMonitorFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateMonitor as a reference.
    pub fn as_input(&self) -> &crate::operation::create_monitor::builders::CreateMonitorInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_monitor::CreateMonitorOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_monitor::CreateMonitorError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_monitor::CreateMonitor::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_monitor::CreateMonitor::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_monitor::CreateMonitorOutput,
        crate::operation::create_monitor::CreateMonitorError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The name of the monitor.</p>
    pub fn monitor_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.monitor_name(input.into());
        self
    }
    /// <p>The name of the monitor.</p>
    pub fn set_monitor_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_monitor_name(input);
        self
    }
    /// <p>The name of the monitor.</p>
    pub fn get_monitor_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_monitor_name()
    }
    ///
    /// Appends an item to `localResources`.
    ///
    /// To override the contents of this collection use [`set_local_resources`](Self::set_local_resources).
    ///
    /// <p>The local resources to monitor. A local resource in a workload is the location of the host, or hosts, where the Network Flow Monitor agent is installed. For example, if a workload consists of an interaction between a web service and a backend database (for example, Amazon Dynamo DB), the subnet with the EC2 instance that hosts the web service, which also runs the agent, is the local resource.</p>
    /// <p>Be aware that all local resources must belong to the current Region.</p>
    pub fn local_resources(mut self, input: crate::types::MonitorLocalResource) -> Self {
        self.inner = self.inner.local_resources(input);
        self
    }
    /// <p>The local resources to monitor. A local resource in a workload is the location of the host, or hosts, where the Network Flow Monitor agent is installed. For example, if a workload consists of an interaction between a web service and a backend database (for example, Amazon Dynamo DB), the subnet with the EC2 instance that hosts the web service, which also runs the agent, is the local resource.</p>
    /// <p>Be aware that all local resources must belong to the current Region.</p>
    pub fn set_local_resources(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::MonitorLocalResource>>) -> Self {
        self.inner = self.inner.set_local_resources(input);
        self
    }
    /// <p>The local resources to monitor. A local resource in a workload is the location of the host, or hosts, where the Network Flow Monitor agent is installed. For example, if a workload consists of an interaction between a web service and a backend database (for example, Amazon Dynamo DB), the subnet with the EC2 instance that hosts the web service, which also runs the agent, is the local resource.</p>
    /// <p>Be aware that all local resources must belong to the current Region.</p>
    pub fn get_local_resources(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MonitorLocalResource>> {
        self.inner.get_local_resources()
    }
    ///
    /// Appends an item to `remoteResources`.
    ///
    /// To override the contents of this collection use [`set_remote_resources`](Self::set_remote_resources).
    ///
    /// <p>The remote resources to monitor. A remote resource is the other endpoint in the bi-directional flow of a workload, with a local resource. For example, Amazon Dynamo DB can be a remote resource.</p>
    /// <p>When you specify remote resources, be aware that specific combinations of resources are allowed and others are not, including the following constraints:</p>
    /// <ul>
    /// <li>
    /// <p>All remote resources that you specify must all belong to a single Region.</p></li>
    /// <li>
    /// <p>If you specify Amazon Web Services services as remote resources, any other remote resources that you specify must be in the current Region.</p></li>
    /// <li>
    /// <p>When you specify a remote resource for another Region, you can only specify the <code>Region</code> resource type. You cannot specify a subnet, VPC, or Availability Zone in another Region.</p></li>
    /// <li>
    /// <p>If you leave the <code>RemoteResources</code> parameter empty, the monitor will include all network flows that terminate in the current Region.</p></li>
    /// </ul>
    pub fn remote_resources(mut self, input: crate::types::MonitorRemoteResource) -> Self {
        self.inner = self.inner.remote_resources(input);
        self
    }
    /// <p>The remote resources to monitor. A remote resource is the other endpoint in the bi-directional flow of a workload, with a local resource. For example, Amazon Dynamo DB can be a remote resource.</p>
    /// <p>When you specify remote resources, be aware that specific combinations of resources are allowed and others are not, including the following constraints:</p>
    /// <ul>
    /// <li>
    /// <p>All remote resources that you specify must all belong to a single Region.</p></li>
    /// <li>
    /// <p>If you specify Amazon Web Services services as remote resources, any other remote resources that you specify must be in the current Region.</p></li>
    /// <li>
    /// <p>When you specify a remote resource for another Region, you can only specify the <code>Region</code> resource type. You cannot specify a subnet, VPC, or Availability Zone in another Region.</p></li>
    /// <li>
    /// <p>If you leave the <code>RemoteResources</code> parameter empty, the monitor will include all network flows that terminate in the current Region.</p></li>
    /// </ul>
    pub fn set_remote_resources(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::MonitorRemoteResource>>) -> Self {
        self.inner = self.inner.set_remote_resources(input);
        self
    }
    /// <p>The remote resources to monitor. A remote resource is the other endpoint in the bi-directional flow of a workload, with a local resource. For example, Amazon Dynamo DB can be a remote resource.</p>
    /// <p>When you specify remote resources, be aware that specific combinations of resources are allowed and others are not, including the following constraints:</p>
    /// <ul>
    /// <li>
    /// <p>All remote resources that you specify must all belong to a single Region.</p></li>
    /// <li>
    /// <p>If you specify Amazon Web Services services as remote resources, any other remote resources that you specify must be in the current Region.</p></li>
    /// <li>
    /// <p>When you specify a remote resource for another Region, you can only specify the <code>Region</code> resource type. You cannot specify a subnet, VPC, or Availability Zone in another Region.</p></li>
    /// <li>
    /// <p>If you leave the <code>RemoteResources</code> parameter empty, the monitor will include all network flows that terminate in the current Region.</p></li>
    /// </ul>
    pub fn get_remote_resources(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MonitorRemoteResource>> {
        self.inner.get_remote_resources()
    }
    /// <p>The Amazon Resource Name (ARN) of the scope for the monitor.</p>
    pub fn scope_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.scope_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the scope for the monitor.</p>
    pub fn set_scope_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_scope_arn(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the scope for the monitor.</p>
    pub fn get_scope_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_scope_arn()
    }
    /// <p>A unique, case-sensitive string of up to 64 ASCII characters that you specify to make an idempotent API request. Don't reuse the same client token for other API requests.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>A unique, case-sensitive string of up to 64 ASCII characters that you specify to make an idempotent API request. Don't reuse the same client token for other API requests.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
    /// <p>A unique, case-sensitive string of up to 64 ASCII characters that you specify to make an idempotent API request. Don't reuse the same client token for other API requests.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_client_token()
    }
    ///
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags for a monitor. You can add a maximum of 200 tags.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.tags(k.into(), v.into());
        self
    }
    /// <p>The tags for a monitor. You can add a maximum of 200 tags.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>The tags for a monitor. You can add a maximum of 200 tags.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.inner.get_tags()
    }
}
