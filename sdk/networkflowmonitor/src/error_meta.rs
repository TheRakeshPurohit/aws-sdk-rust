// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum Error {
    /// <p>You don't have sufficient permission to perform this action.</p>
    AccessDeniedException(crate::types::error::AccessDeniedException),
    /// <p>The requested resource is in use.</p>
    ConflictException(crate::types::error::ConflictException),
    /// <p>An internal error occurred.</p>
    InternalServerException(crate::types::error::InternalServerException),
    /// <p>The request specifies a resource that doesn't exist.</p>
    ResourceNotFoundException(crate::types::error::ResourceNotFoundException),
    /// <p>The request exceeded a service quota.</p>
    ServiceQuotaExceededException(crate::types::error::ServiceQuotaExceededException),
    /// <p>The request was denied due to request throttling.</p>
    ThrottlingException(crate::types::error::ThrottlingException),
    /// <p>Invalid request.</p>
    ValidationException(crate::types::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    #[deprecated(note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
    variable wildcard pattern and check `.code()`:
     \
    &nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
     \
    See [`ProvideErrorMetadata`](#impl-ProvideErrorMetadata-for-Error) for what information is available for the error.")]
    Unhandled(crate::error::sealed_unhandled::Unhandled),
}
impl ::std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(_) => {
                if let ::std::option::Option::Some(code) = ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self) {
                    write!(f, "unhandled error ({code})")
                } else {
                    f.write_str("unhandled error")
                }
            }
        }
    }
}
impl From<::aws_smithy_types::error::operation::BuildError> for Error {
    fn from(value: ::aws_smithy_types::error::operation::BuildError) -> Self {
        Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
            source: value.into(),
            meta: ::std::default::Default::default(),
        })
    }
}
impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for Error {
    fn meta(&self) -> &::aws_smithy_types::error::metadata::ErrorMetadata {
        match self {
            Self::AccessDeniedException(inner) => inner.meta(),
            Self::ConflictException(inner) => inner.meta(),
            Self::InternalServerException(inner) => inner.meta(),
            Self::ResourceNotFoundException(inner) => inner.meta(),
            Self::ServiceQuotaExceededException(inner) => inner.meta(),
            Self::ThrottlingException(inner) => inner.meta(),
            Self::ValidationException(inner) => inner.meta(),
            Self::Unhandled(inner) => &inner.meta,
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_monitor::CreateMonitorError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_monitor::CreateMonitorError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_monitor::CreateMonitorError> for Error {
    fn from(err: crate::operation::create_monitor::CreateMonitorError) -> Self {
        match err {
            crate::operation::create_monitor::CreateMonitorError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_monitor::CreateMonitorError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_monitor::CreateMonitorError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_monitor::CreateMonitorError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_monitor::CreateMonitorError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_monitor::CreateMonitorError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_monitor::CreateMonitorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_scope::CreateScopeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_scope::CreateScopeError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_scope::CreateScopeError> for Error {
    fn from(err: crate::operation::create_scope::CreateScopeError) -> Self {
        match err {
            crate::operation::create_scope::CreateScopeError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_scope::CreateScopeError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_scope::CreateScopeError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_scope::CreateScopeError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_scope::CreateScopeError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_scope::CreateScopeError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_scope::CreateScopeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_monitor::DeleteMonitorError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_monitor::DeleteMonitorError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_monitor::DeleteMonitorError> for Error {
    fn from(err: crate::operation::delete_monitor::DeleteMonitorError) -> Self {
        match err {
            crate::operation::delete_monitor::DeleteMonitorError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_monitor::DeleteMonitorError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_monitor::DeleteMonitorError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_monitor::DeleteMonitorError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_monitor::DeleteMonitorError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_monitor::DeleteMonitorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_scope::DeleteScopeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_scope::DeleteScopeError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_scope::DeleteScopeError> for Error {
    fn from(err: crate::operation::delete_scope::DeleteScopeError) -> Self {
        match err {
            crate::operation::delete_scope::DeleteScopeError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_scope::DeleteScopeError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_scope::DeleteScopeError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_scope::DeleteScopeError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_scope::DeleteScopeError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::delete_scope::DeleteScopeError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_scope::DeleteScopeError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_scope::DeleteScopeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_monitor::GetMonitorError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_monitor::GetMonitorError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_monitor::GetMonitorError> for Error {
    fn from(err: crate::operation::get_monitor::GetMonitorError) -> Self {
        match err {
            crate::operation::get_monitor::GetMonitorError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_monitor::GetMonitorError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_monitor::GetMonitorError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_monitor::GetMonitorError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_monitor::GetMonitorError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_monitor::GetMonitorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_query_results_monitor_top_contributors::GetQueryResultsMonitorTopContributorsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_query_results_monitor_top_contributors::GetQueryResultsMonitorTopContributorsError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_query_results_monitor_top_contributors::GetQueryResultsMonitorTopContributorsError> for Error {
    fn from(err: crate::operation::get_query_results_monitor_top_contributors::GetQueryResultsMonitorTopContributorsError) -> Self {
        match err {
            crate::operation::get_query_results_monitor_top_contributors::GetQueryResultsMonitorTopContributorsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_query_results_monitor_top_contributors::GetQueryResultsMonitorTopContributorsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_query_results_monitor_top_contributors::GetQueryResultsMonitorTopContributorsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_query_results_monitor_top_contributors::GetQueryResultsMonitorTopContributorsError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::get_query_results_monitor_top_contributors::GetQueryResultsMonitorTopContributorsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_query_results_monitor_top_contributors::GetQueryResultsMonitorTopContributorsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_query_results_monitor_top_contributors::GetQueryResultsMonitorTopContributorsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_query_results_workload_insights_top_contributors::GetQueryResultsWorkloadInsightsTopContributorsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_query_results_workload_insights_top_contributors::GetQueryResultsWorkloadInsightsTopContributorsError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_query_results_workload_insights_top_contributors::GetQueryResultsWorkloadInsightsTopContributorsError> for Error {
    fn from(
        err: crate::operation::get_query_results_workload_insights_top_contributors::GetQueryResultsWorkloadInsightsTopContributorsError,
    ) -> Self {
        match err {
            crate::operation::get_query_results_workload_insights_top_contributors::GetQueryResultsWorkloadInsightsTopContributorsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_query_results_workload_insights_top_contributors::GetQueryResultsWorkloadInsightsTopContributorsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_query_results_workload_insights_top_contributors::GetQueryResultsWorkloadInsightsTopContributorsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_query_results_workload_insights_top_contributors::GetQueryResultsWorkloadInsightsTopContributorsError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::get_query_results_workload_insights_top_contributors::GetQueryResultsWorkloadInsightsTopContributorsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_query_results_workload_insights_top_contributors::GetQueryResultsWorkloadInsightsTopContributorsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_query_results_workload_insights_top_contributors::GetQueryResultsWorkloadInsightsTopContributorsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_query_results_workload_insights_top_contributors_data::GetQueryResultsWorkloadInsightsTopContributorsDataError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_query_results_workload_insights_top_contributors_data::GetQueryResultsWorkloadInsightsTopContributorsDataError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_query_results_workload_insights_top_contributors_data::GetQueryResultsWorkloadInsightsTopContributorsDataError>
    for Error
{
    fn from(
        err: crate::operation::get_query_results_workload_insights_top_contributors_data::GetQueryResultsWorkloadInsightsTopContributorsDataError,
    ) -> Self {
        match err {
            crate::operation::get_query_results_workload_insights_top_contributors_data::GetQueryResultsWorkloadInsightsTopContributorsDataError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_query_results_workload_insights_top_contributors_data::GetQueryResultsWorkloadInsightsTopContributorsDataError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_query_results_workload_insights_top_contributors_data::GetQueryResultsWorkloadInsightsTopContributorsDataError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_query_results_workload_insights_top_contributors_data::GetQueryResultsWorkloadInsightsTopContributorsDataError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::get_query_results_workload_insights_top_contributors_data::GetQueryResultsWorkloadInsightsTopContributorsDataError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_query_results_workload_insights_top_contributors_data::GetQueryResultsWorkloadInsightsTopContributorsDataError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_query_results_workload_insights_top_contributors_data::GetQueryResultsWorkloadInsightsTopContributorsDataError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_query_status_monitor_top_contributors::GetQueryStatusMonitorTopContributorsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_query_status_monitor_top_contributors::GetQueryStatusMonitorTopContributorsError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_query_status_monitor_top_contributors::GetQueryStatusMonitorTopContributorsError> for Error {
    fn from(err: crate::operation::get_query_status_monitor_top_contributors::GetQueryStatusMonitorTopContributorsError) -> Self {
        match err {
            crate::operation::get_query_status_monitor_top_contributors::GetQueryStatusMonitorTopContributorsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_query_status_monitor_top_contributors::GetQueryStatusMonitorTopContributorsError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::get_query_status_monitor_top_contributors::GetQueryStatusMonitorTopContributorsError::ServiceQuotaExceededException(
                inner,
            ) => Error::ServiceQuotaExceededException(inner),
            crate::operation::get_query_status_monitor_top_contributors::GetQueryStatusMonitorTopContributorsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_query_status_monitor_top_contributors::GetQueryStatusMonitorTopContributorsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_query_status_monitor_top_contributors::GetQueryStatusMonitorTopContributorsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_query_status_workload_insights_top_contributors::GetQueryStatusWorkloadInsightsTopContributorsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_query_status_workload_insights_top_contributors::GetQueryStatusWorkloadInsightsTopContributorsError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_query_status_workload_insights_top_contributors::GetQueryStatusWorkloadInsightsTopContributorsError> for Error {
    fn from(err: crate::operation::get_query_status_workload_insights_top_contributors::GetQueryStatusWorkloadInsightsTopContributorsError) -> Self {
        match err {
            crate::operation::get_query_status_workload_insights_top_contributors::GetQueryStatusWorkloadInsightsTopContributorsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_query_status_workload_insights_top_contributors::GetQueryStatusWorkloadInsightsTopContributorsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_query_status_workload_insights_top_contributors::GetQueryStatusWorkloadInsightsTopContributorsError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::get_query_status_workload_insights_top_contributors::GetQueryStatusWorkloadInsightsTopContributorsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_query_status_workload_insights_top_contributors::GetQueryStatusWorkloadInsightsTopContributorsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_query_status_workload_insights_top_contributors::GetQueryStatusWorkloadInsightsTopContributorsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_query_status_workload_insights_top_contributors_data::GetQueryStatusWorkloadInsightsTopContributorsDataError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_query_status_workload_insights_top_contributors_data::GetQueryStatusWorkloadInsightsTopContributorsDataError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_query_status_workload_insights_top_contributors_data::GetQueryStatusWorkloadInsightsTopContributorsDataError>
    for Error
{
    fn from(
        err: crate::operation::get_query_status_workload_insights_top_contributors_data::GetQueryStatusWorkloadInsightsTopContributorsDataError,
    ) -> Self {
        match err {
            crate::operation::get_query_status_workload_insights_top_contributors_data::GetQueryStatusWorkloadInsightsTopContributorsDataError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_query_status_workload_insights_top_contributors_data::GetQueryStatusWorkloadInsightsTopContributorsDataError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_query_status_workload_insights_top_contributors_data::GetQueryStatusWorkloadInsightsTopContributorsDataError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::get_query_status_workload_insights_top_contributors_data::GetQueryStatusWorkloadInsightsTopContributorsDataError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_query_status_workload_insights_top_contributors_data::GetQueryStatusWorkloadInsightsTopContributorsDataError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_query_status_workload_insights_top_contributors_data::GetQueryStatusWorkloadInsightsTopContributorsDataError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_scope::GetScopeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_scope::GetScopeError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_scope::GetScopeError> for Error {
    fn from(err: crate::operation::get_scope::GetScopeError) -> Self {
        match err {
            crate::operation::get_scope::GetScopeError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_scope::GetScopeError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_scope::GetScopeError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_scope::GetScopeError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::get_scope::GetScopeError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_scope::GetScopeError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_scope::GetScopeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_monitors::ListMonitorsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_monitors::ListMonitorsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_monitors::ListMonitorsError> for Error {
    fn from(err: crate::operation::list_monitors::ListMonitorsError) -> Self {
        match err {
            crate::operation::list_monitors::ListMonitorsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_monitors::ListMonitorsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_monitors::ListMonitorsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_monitors::ListMonitorsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_monitors::ListMonitorsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_scopes::ListScopesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_scopes::ListScopesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_scopes::ListScopesError> for Error {
    fn from(err: crate::operation::list_scopes::ListScopesError) -> Self {
        match err {
            crate::operation::list_scopes::ListScopesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_scopes::ListScopesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_scopes::ListScopesError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::list_scopes::ListScopesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_scopes::ListScopesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_scopes::ListScopesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_tags_for_resource::ListTagsForResourceError> for Error {
    fn from(err: crate::operation::list_tags_for_resource::ListTagsForResourceError) -> Self {
        match err {
            crate::operation::list_tags_for_resource::ListTagsForResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::start_query_monitor_top_contributors::StartQueryMonitorTopContributorsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::start_query_monitor_top_contributors::StartQueryMonitorTopContributorsError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::start_query_monitor_top_contributors::StartQueryMonitorTopContributorsError> for Error {
    fn from(err: crate::operation::start_query_monitor_top_contributors::StartQueryMonitorTopContributorsError) -> Self {
        match err {
            crate::operation::start_query_monitor_top_contributors::StartQueryMonitorTopContributorsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::start_query_monitor_top_contributors::StartQueryMonitorTopContributorsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::start_query_monitor_top_contributors::StartQueryMonitorTopContributorsError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::start_query_monitor_top_contributors::StartQueryMonitorTopContributorsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::start_query_monitor_top_contributors::StartQueryMonitorTopContributorsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::start_query_monitor_top_contributors::StartQueryMonitorTopContributorsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::start_query_workload_insights_top_contributors::StartQueryWorkloadInsightsTopContributorsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::start_query_workload_insights_top_contributors::StartQueryWorkloadInsightsTopContributorsError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::start_query_workload_insights_top_contributors::StartQueryWorkloadInsightsTopContributorsError> for Error {
    fn from(err: crate::operation::start_query_workload_insights_top_contributors::StartQueryWorkloadInsightsTopContributorsError) -> Self {
        match err {
            crate::operation::start_query_workload_insights_top_contributors::StartQueryWorkloadInsightsTopContributorsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::start_query_workload_insights_top_contributors::StartQueryWorkloadInsightsTopContributorsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::start_query_workload_insights_top_contributors::StartQueryWorkloadInsightsTopContributorsError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::start_query_workload_insights_top_contributors::StartQueryWorkloadInsightsTopContributorsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::start_query_workload_insights_top_contributors::StartQueryWorkloadInsightsTopContributorsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::start_query_workload_insights_top_contributors::StartQueryWorkloadInsightsTopContributorsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::start_query_workload_insights_top_contributors_data::StartQueryWorkloadInsightsTopContributorsDataError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::start_query_workload_insights_top_contributors_data::StartQueryWorkloadInsightsTopContributorsDataError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::start_query_workload_insights_top_contributors_data::StartQueryWorkloadInsightsTopContributorsDataError> for Error {
    fn from(err: crate::operation::start_query_workload_insights_top_contributors_data::StartQueryWorkloadInsightsTopContributorsDataError) -> Self {
        match err {
            crate::operation::start_query_workload_insights_top_contributors_data::StartQueryWorkloadInsightsTopContributorsDataError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::start_query_workload_insights_top_contributors_data::StartQueryWorkloadInsightsTopContributorsDataError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::start_query_workload_insights_top_contributors_data::StartQueryWorkloadInsightsTopContributorsDataError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::start_query_workload_insights_top_contributors_data::StartQueryWorkloadInsightsTopContributorsDataError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::start_query_workload_insights_top_contributors_data::StartQueryWorkloadInsightsTopContributorsDataError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::start_query_workload_insights_top_contributors_data::StartQueryWorkloadInsightsTopContributorsDataError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::stop_query_monitor_top_contributors::StopQueryMonitorTopContributorsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::stop_query_monitor_top_contributors::StopQueryMonitorTopContributorsError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::stop_query_monitor_top_contributors::StopQueryMonitorTopContributorsError> for Error {
    fn from(err: crate::operation::stop_query_monitor_top_contributors::StopQueryMonitorTopContributorsError) -> Self {
        match err {
            crate::operation::stop_query_monitor_top_contributors::StopQueryMonitorTopContributorsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::stop_query_monitor_top_contributors::StopQueryMonitorTopContributorsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::stop_query_monitor_top_contributors::StopQueryMonitorTopContributorsError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::stop_query_monitor_top_contributors::StopQueryMonitorTopContributorsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::stop_query_monitor_top_contributors::StopQueryMonitorTopContributorsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::stop_query_monitor_top_contributors::StopQueryMonitorTopContributorsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::stop_query_workload_insights_top_contributors::StopQueryWorkloadInsightsTopContributorsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::stop_query_workload_insights_top_contributors::StopQueryWorkloadInsightsTopContributorsError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::stop_query_workload_insights_top_contributors::StopQueryWorkloadInsightsTopContributorsError> for Error {
    fn from(err: crate::operation::stop_query_workload_insights_top_contributors::StopQueryWorkloadInsightsTopContributorsError) -> Self {
        match err {
            crate::operation::stop_query_workload_insights_top_contributors::StopQueryWorkloadInsightsTopContributorsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::stop_query_workload_insights_top_contributors::StopQueryWorkloadInsightsTopContributorsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::stop_query_workload_insights_top_contributors::StopQueryWorkloadInsightsTopContributorsError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::stop_query_workload_insights_top_contributors::StopQueryWorkloadInsightsTopContributorsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::stop_query_workload_insights_top_contributors::StopQueryWorkloadInsightsTopContributorsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::stop_query_workload_insights_top_contributors::StopQueryWorkloadInsightsTopContributorsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::stop_query_workload_insights_top_contributors_data::StopQueryWorkloadInsightsTopContributorsDataError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::stop_query_workload_insights_top_contributors_data::StopQueryWorkloadInsightsTopContributorsDataError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::stop_query_workload_insights_top_contributors_data::StopQueryWorkloadInsightsTopContributorsDataError> for Error {
    fn from(err: crate::operation::stop_query_workload_insights_top_contributors_data::StopQueryWorkloadInsightsTopContributorsDataError) -> Self {
        match err {
            crate::operation::stop_query_workload_insights_top_contributors_data::StopQueryWorkloadInsightsTopContributorsDataError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::stop_query_workload_insights_top_contributors_data::StopQueryWorkloadInsightsTopContributorsDataError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::stop_query_workload_insights_top_contributors_data::StopQueryWorkloadInsightsTopContributorsDataError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::stop_query_workload_insights_top_contributors_data::StopQueryWorkloadInsightsTopContributorsDataError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::stop_query_workload_insights_top_contributors_data::StopQueryWorkloadInsightsTopContributorsDataError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::stop_query_workload_insights_top_contributors_data::StopQueryWorkloadInsightsTopContributorsDataError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::tag_resource::TagResourceError> for Error {
    fn from(err: crate::operation::tag_resource::TagResourceError) -> Self {
        match err {
            crate::operation::tag_resource::TagResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::tag_resource::TagResourceError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::tag_resource::TagResourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::tag_resource::TagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::tag_resource::TagResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::tag_resource::TagResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::tag_resource::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::untag_resource::UntagResourceError> for Error {
    fn from(err: crate::operation::untag_resource::UntagResourceError) -> Self {
        match err {
            crate::operation::untag_resource::UntagResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::untag_resource::UntagResourceError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::untag_resource::UntagResourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::untag_resource::UntagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::untag_resource::UntagResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::untag_resource::UntagResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::untag_resource::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_monitor::UpdateMonitorError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_monitor::UpdateMonitorError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_monitor::UpdateMonitorError> for Error {
    fn from(err: crate::operation::update_monitor::UpdateMonitorError) -> Self {
        match err {
            crate::operation::update_monitor::UpdateMonitorError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_monitor::UpdateMonitorError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_monitor::UpdateMonitorError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_monitor::UpdateMonitorError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_monitor::UpdateMonitorError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_monitor::UpdateMonitorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_scope::UpdateScopeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_scope::UpdateScopeError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_scope::UpdateScopeError> for Error {
    fn from(err: crate::operation::update_scope::UpdateScopeError) -> Self {
        match err {
            crate::operation::update_scope::UpdateScopeError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_scope::UpdateScopeError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_scope::UpdateScopeError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_scope::UpdateScopeError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_scope::UpdateScopeError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::update_scope::UpdateScopeError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_scope::UpdateScopeError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_scope::UpdateScopeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl ::std::error::Error for Error {
    fn source(&self) -> std::option::Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            Error::AccessDeniedException(inner) => inner.source(),
            Error::ConflictException(inner) => inner.source(),
            Error::InternalServerException(inner) => inner.source(),
            Error::ResourceNotFoundException(inner) => inner.source(),
            Error::ServiceQuotaExceededException(inner) => inner.source(),
            Error::ThrottlingException(inner) => inner.source(),
            Error::ValidationException(inner) => inner.source(),
            Error::Unhandled(inner) => ::std::option::Option::Some(&*inner.source),
        }
    }
}
impl ::aws_types::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ServiceQuotaExceededException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.meta.request_id(),
        }
    }
}
