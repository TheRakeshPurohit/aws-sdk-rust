// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`GetMonitor`](crate::operation::get_monitor::builders::GetMonitorFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`monitor_name(impl Into<String>)`](crate::operation::get_monitor::builders::GetMonitorFluentBuilder::monitor_name) / [`set_monitor_name(Option<String>)`](crate::operation::get_monitor::builders::GetMonitorFluentBuilder::set_monitor_name):<br>required: **true**<br><p>The name of the monitor.</p><br>
    /// - On success, responds with [`GetMonitorOutput`](crate::operation::get_monitor::GetMonitorOutput) with field(s):
    ///   - [`monitor_arn(String)`](crate::operation::get_monitor::GetMonitorOutput::monitor_arn): <p>The Amazon Resource Name (ARN) of the monitor.</p>
    ///   - [`monitor_name(String)`](crate::operation::get_monitor::GetMonitorOutput::monitor_name): <p>The name of the monitor.</p>
    ///   - [`monitor_status(MonitorStatus)`](crate::operation::get_monitor::GetMonitorOutput::monitor_status): <p>The status of a monitor. The status can be one of the following</p> <ul>  <li>   <p><code>PENDING</code>: The monitor is in the process of being created.</p></li>  <li>   <p><code>ACTIVE</code>: The monitor is active.</p></li>  <li>   <p><code>INACTIVE</code>: The monitor is inactive.</p></li>  <li>   <p><code>ERROR</code>: Monitor creation failed due to an error.</p></li>  <li>   <p><code>DELETING</code>: The monitor is in the process of being deleted.</p></li> </ul>
    ///   - [`local_resources(Vec::<MonitorLocalResource>)`](crate::operation::get_monitor::GetMonitorOutput::local_resources): <p>The local resources to monitor. A local resource in a workload is the location of the hosts where the Network Flow Monitor agent is installed.</p>
    ///   - [`remote_resources(Vec::<MonitorRemoteResource>)`](crate::operation::get_monitor::GetMonitorOutput::remote_resources): <p>The remote resources to monitor. A remote resource is the other endpoint specified for the network flow of a workload, with a local resource. For example, Amazon Dynamo DB can be a remote resource.</p>
    ///   - [`created_at(DateTime)`](crate::operation::get_monitor::GetMonitorOutput::created_at): <p>The date and time when the monitor was created.</p>
    ///   - [`modified_at(DateTime)`](crate::operation::get_monitor::GetMonitorOutput::modified_at): <p>The date and time when the monitor was last modified.</p>
    ///   - [`tags(Option<HashMap::<String, String>>)`](crate::operation::get_monitor::GetMonitorOutput::tags): <p>The tags for a monitor.</p>
    /// - On failure, responds with [`SdkError<GetMonitorError>`](crate::operation::get_monitor::GetMonitorError)
    pub fn get_monitor(&self) -> crate::operation::get_monitor::builders::GetMonitorFluentBuilder {
        crate::operation::get_monitor::builders::GetMonitorFluentBuilder::new(self.handle.clone())
    }
}
