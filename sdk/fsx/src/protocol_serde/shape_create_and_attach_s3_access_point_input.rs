// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_and_attach_s3_access_point_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_and_attach_s3_access_point::CreateAndAttachS3AccessPointInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_1.as_str());
    }
    if let Some(var_2) = &input.name {
        object.key("Name").string(var_2.as_str());
    }
    if let Some(var_3) = &input.r#type {
        object.key("Type").string(var_3.as_str());
    }
    if let Some(var_4) = &input.open_zfs_configuration {
        #[allow(unused_mut)]
        let mut object_5 = object.key("OpenZFSConfiguration").start_object();
        crate::protocol_serde::shape_create_and_attach_s3_access_point_open_zfs_configuration::ser_create_and_attach_s3_access_point_open_zfs_configuration(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.s3_access_point {
        #[allow(unused_mut)]
        let mut object_7 = object.key("S3AccessPoint").start_object();
        crate::protocol_serde::shape_create_and_attach_s3_access_point_s3_configuration::ser_create_and_attach_s3_access_point_s3_configuration(
            &mut object_7,
            var_6,
        )?;
        object_7.finish();
    }
    Ok(())
}
