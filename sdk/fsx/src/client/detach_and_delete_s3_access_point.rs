// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DetachAndDeleteS3AccessPoint`](crate::operation::detach_and_delete_s3_access_point::builders::DetachAndDeleteS3AccessPointFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`client_request_token(impl Into<String>)`](crate::operation::detach_and_delete_s3_access_point::builders::DetachAndDeleteS3AccessPointFluentBuilder::client_request_token) / [`set_client_request_token(Option<String>)`](crate::operation::detach_and_delete_s3_access_point::builders::DetachAndDeleteS3AccessPointFluentBuilder::set_client_request_token):<br>required: **false**<br><p>(Optional) An idempotency token for resource creation, in a string of up to 63 ASCII characters. This token is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK.</p><br>
    ///   - [`name(impl Into<String>)`](crate::operation::detach_and_delete_s3_access_point::builders::DetachAndDeleteS3AccessPointFluentBuilder::name) / [`set_name(Option<String>)`](crate::operation::detach_and_delete_s3_access_point::builders::DetachAndDeleteS3AccessPointFluentBuilder::set_name):<br>required: **true**<br><p>The name of the S3 access point attachment that you want to delete.</p><br>
    /// - On success, responds with [`DetachAndDeleteS3AccessPointOutput`](crate::operation::detach_and_delete_s3_access_point::DetachAndDeleteS3AccessPointOutput) with field(s):
    ///   - [`lifecycle(Option<S3AccessPointAttachmentLifecycle>)`](crate::operation::detach_and_delete_s3_access_point::DetachAndDeleteS3AccessPointOutput::lifecycle): <p>The lifecycle status of the S3 access point attachment.</p>
    ///   - [`name(Option<String>)`](crate::operation::detach_and_delete_s3_access_point::DetachAndDeleteS3AccessPointOutput::name): <p>The name of the S3 access point attachment being deleted.</p>
    /// - On failure, responds with [`SdkError<DetachAndDeleteS3AccessPointError>`](crate::operation::detach_and_delete_s3_access_point::DetachAndDeleteS3AccessPointError)
    pub fn detach_and_delete_s3_access_point(
        &self,
    ) -> crate::operation::detach_and_delete_s3_access_point::builders::DetachAndDeleteS3AccessPointFluentBuilder {
        crate::operation::detach_and_delete_s3_access_point::builders::DetachAndDeleteS3AccessPointFluentBuilder::new(self.handle.clone())
    }
}
