// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ListTrainedModelInferenceJobs`](crate::operation::list_trained_model_inference_jobs::builders::ListTrainedModelInferenceJobsFluentBuilder) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::operation::list_trained_model_inference_jobs::builders::ListTrainedModelInferenceJobsFluentBuilder::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_token(impl Into<String>)`](crate::operation::list_trained_model_inference_jobs::builders::ListTrainedModelInferenceJobsFluentBuilder::next_token) / [`set_next_token(Option<String>)`](crate::operation::list_trained_model_inference_jobs::builders::ListTrainedModelInferenceJobsFluentBuilder::set_next_token):<br>required: **false**<br><p>The token value retrieved from a previous call to access the next page of results.</p><br>
    ///   - [`max_results(i32)`](crate::operation::list_trained_model_inference_jobs::builders::ListTrainedModelInferenceJobsFluentBuilder::max_results) / [`set_max_results(Option<i32>)`](crate::operation::list_trained_model_inference_jobs::builders::ListTrainedModelInferenceJobsFluentBuilder::set_max_results):<br>required: **false**<br><p>The maximum size of the results that is returned per call.</p><br>
    ///   - [`membership_identifier(impl Into<String>)`](crate::operation::list_trained_model_inference_jobs::builders::ListTrainedModelInferenceJobsFluentBuilder::membership_identifier) / [`set_membership_identifier(Option<String>)`](crate::operation::list_trained_model_inference_jobs::builders::ListTrainedModelInferenceJobsFluentBuilder::set_membership_identifier):<br>required: **true**<br><p>The membership</p><br>
    ///   - [`trained_model_arn(impl Into<String>)`](crate::operation::list_trained_model_inference_jobs::builders::ListTrainedModelInferenceJobsFluentBuilder::trained_model_arn) / [`set_trained_model_arn(Option<String>)`](crate::operation::list_trained_model_inference_jobs::builders::ListTrainedModelInferenceJobsFluentBuilder::set_trained_model_arn):<br>required: **false**<br><p>The Amazon Resource Name (ARN) of a trained model that was used to create the trained model inference jobs that you are interested in.</p><br>
    ///   - [`trained_model_version_identifier(impl Into<String>)`](crate::operation::list_trained_model_inference_jobs::builders::ListTrainedModelInferenceJobsFluentBuilder::trained_model_version_identifier) / [`set_trained_model_version_identifier(Option<String>)`](crate::operation::list_trained_model_inference_jobs::builders::ListTrainedModelInferenceJobsFluentBuilder::set_trained_model_version_identifier):<br>required: **false**<br><p>The version identifier of the trained model to filter inference jobs by. When specified, only inference jobs that used this specific version of the trained model are returned.</p><br>
    /// - On success, responds with [`ListTrainedModelInferenceJobsOutput`](crate::operation::list_trained_model_inference_jobs::ListTrainedModelInferenceJobsOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::operation::list_trained_model_inference_jobs::ListTrainedModelInferenceJobsOutput::next_token): <p>The token value used to access the next page of results.</p>
    ///   - [`trained_model_inference_jobs(Vec::<TrainedModelInferenceJobSummary>)`](crate::operation::list_trained_model_inference_jobs::ListTrainedModelInferenceJobsOutput::trained_model_inference_jobs): <p>Returns the requested trained model inference jobs.</p>
    /// - On failure, responds with [`SdkError<ListTrainedModelInferenceJobsError>`](crate::operation::list_trained_model_inference_jobs::ListTrainedModelInferenceJobsError)
    pub fn list_trained_model_inference_jobs(
        &self,
    ) -> crate::operation::list_trained_model_inference_jobs::builders::ListTrainedModelInferenceJobsFluentBuilder {
        crate::operation::list_trained_model_inference_jobs::builders::ListTrainedModelInferenceJobsFluentBuilder::new(self.handle.clone())
    }
}
