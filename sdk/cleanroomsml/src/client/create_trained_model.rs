// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateTrainedModel`](crate::operation::create_trained_model::builders::CreateTrainedModelFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`membership_identifier(impl Into<String>)`](crate::operation::create_trained_model::builders::CreateTrainedModelFluentBuilder::membership_identifier) / [`set_membership_identifier(Option<String>)`](crate::operation::create_trained_model::builders::CreateTrainedModelFluentBuilder::set_membership_identifier):<br>required: **true**<br><p>The membership ID of the member that is creating the trained model.</p><br>
    ///   - [`name(impl Into<String>)`](crate::operation::create_trained_model::builders::CreateTrainedModelFluentBuilder::name) / [`set_name(Option<String>)`](crate::operation::create_trained_model::builders::CreateTrainedModelFluentBuilder::set_name):<br>required: **true**<br><p>The name of the trained model.</p><br>
    ///   - [`configured_model_algorithm_association_arn(impl Into<String>)`](crate::operation::create_trained_model::builders::CreateTrainedModelFluentBuilder::configured_model_algorithm_association_arn) / [`set_configured_model_algorithm_association_arn(Option<String>)`](crate::operation::create_trained_model::builders::CreateTrainedModelFluentBuilder::set_configured_model_algorithm_association_arn):<br>required: **true**<br><p>The associated configured model algorithm used to train this model.</p><br>
    ///   - [`hyperparameters(impl Into<String>, impl Into<String>)`](crate::operation::create_trained_model::builders::CreateTrainedModelFluentBuilder::hyperparameters) / [`set_hyperparameters(Option<HashMap::<String, String>>)`](crate::operation::create_trained_model::builders::CreateTrainedModelFluentBuilder::set_hyperparameters):<br>required: **false**<br><p>Algorithm-specific parameters that influence the quality of the model. You set hyperparameters before you start the learning process.</p><br>
    ///   - [`environment(impl Into<String>, impl Into<String>)`](crate::operation::create_trained_model::builders::CreateTrainedModelFluentBuilder::environment) / [`set_environment(Option<HashMap::<String, String>>)`](crate::operation::create_trained_model::builders::CreateTrainedModelFluentBuilder::set_environment):<br>required: **false**<br><p>The environment variables to set in the Docker container.</p><br>
    ///   - [`resource_config(ResourceConfig)`](crate::operation::create_trained_model::builders::CreateTrainedModelFluentBuilder::resource_config) / [`set_resource_config(Option<ResourceConfig>)`](crate::operation::create_trained_model::builders::CreateTrainedModelFluentBuilder::set_resource_config):<br>required: **true**<br><p>Information about the EC2 resources that are used to train this model.</p><br>
    ///   - [`stopping_condition(StoppingCondition)`](crate::operation::create_trained_model::builders::CreateTrainedModelFluentBuilder::stopping_condition) / [`set_stopping_condition(Option<StoppingCondition>)`](crate::operation::create_trained_model::builders::CreateTrainedModelFluentBuilder::set_stopping_condition):<br>required: **false**<br><p>The criteria that is used to stop model training.</p><br>
    ///   - [`incremental_training_data_channels(IncrementalTrainingDataChannel)`](crate::operation::create_trained_model::builders::CreateTrainedModelFluentBuilder::incremental_training_data_channels) / [`set_incremental_training_data_channels(Option<Vec::<IncrementalTrainingDataChannel>>)`](crate::operation::create_trained_model::builders::CreateTrainedModelFluentBuilder::set_incremental_training_data_channels):<br>required: **false**<br><p>Specifies the incremental training data channels for the trained model.</p> <p>Incremental training allows you to create a new trained model with updates without retraining from scratch. You can specify up to one incremental training data channel that references a previously trained model and its version.</p> <p>Limit: Maximum of 20 channels total (including both <code>incrementalTrainingDataChannels</code> and <code>dataChannels</code>).</p><br>
    ///   - [`data_channels(ModelTrainingDataChannel)`](crate::operation::create_trained_model::builders::CreateTrainedModelFluentBuilder::data_channels) / [`set_data_channels(Option<Vec::<ModelTrainingDataChannel>>)`](crate::operation::create_trained_model::builders::CreateTrainedModelFluentBuilder::set_data_channels):<br>required: **true**<br><p>Defines the data channels that are used as input for the trained model request.</p> <p>Limit: Maximum of 20 channels total (including both <code>dataChannels</code> and <code>incrementalTrainingDataChannels</code>).</p><br>
    ///   - [`training_input_mode(TrainingInputMode)`](crate::operation::create_trained_model::builders::CreateTrainedModelFluentBuilder::training_input_mode) / [`set_training_input_mode(Option<TrainingInputMode>)`](crate::operation::create_trained_model::builders::CreateTrainedModelFluentBuilder::set_training_input_mode):<br>required: **false**<br><p>The input mode for accessing the training data. This parameter determines how the training data is made available to the training algorithm. Valid values are:</p> <ul>  <li>   <p><code>File</code> - The training data is downloaded to the training instance and made available as files.</p></li>  <li>   <p><code>FastFile</code> - The training data is streamed directly from Amazon S3 to the training algorithm, providing faster access for large datasets.</p></li>  <li>   <p><code>Pipe</code> - The training data is streamed to the training algorithm using named pipes, which can improve performance for certain algorithms.</p></li> </ul><br>
    ///   - [`description(impl Into<String>)`](crate::operation::create_trained_model::builders::CreateTrainedModelFluentBuilder::description) / [`set_description(Option<String>)`](crate::operation::create_trained_model::builders::CreateTrainedModelFluentBuilder::set_description):<br>required: **false**<br><p>The description of the trained model.</p><br>
    ///   - [`kms_key_arn(impl Into<String>)`](crate::operation::create_trained_model::builders::CreateTrainedModelFluentBuilder::kms_key_arn) / [`set_kms_key_arn(Option<String>)`](crate::operation::create_trained_model::builders::CreateTrainedModelFluentBuilder::set_kms_key_arn):<br>required: **false**<br><p>The Amazon Resource Name (ARN) of the KMS key. This key is used to encrypt and decrypt customer-owned data in the trained ML model and the associated data.</p><br>
    ///   - [`tags(impl Into<String>, impl Into<String>)`](crate::operation::create_trained_model::builders::CreateTrainedModelFluentBuilder::tags) / [`set_tags(Option<HashMap::<String, String>>)`](crate::operation::create_trained_model::builders::CreateTrainedModelFluentBuilder::set_tags):<br>required: **false**<br><p>The optional metadata that you apply to the resource to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define.</p> <p>The following basic restrictions apply to tags:</p> <ul>  <li>   <p>Maximum number of tags per resource - 50.</p></li>  <li>   <p>For each resource, each tag key must be unique, and each tag key can have only one value.</p></li>  <li>   <p>Maximum key length - 128 Unicode characters in UTF-8.</p></li>  <li>   <p>Maximum value length - 256 Unicode characters in UTF-8.</p></li>  <li>   <p>If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.</p></li>  <li>   <p>Tag keys and values are case sensitive.</p></li>  <li>   <p>Do not use aws:, AWS:, or any upper or lowercase combination of such as a prefix for keys as it is reserved for AWS use. You cannot edit or delete tag keys with this prefix. Values can have this prefix. If a tag value has aws as its prefix but the key does not, then Clean Rooms ML considers it to be a user tag and will count against the limit of 50 tags. Tags with only the key prefix of aws do not count against your tags per resource limit.</p></li> </ul><br>
    /// - On success, responds with [`CreateTrainedModelOutput`](crate::operation::create_trained_model::CreateTrainedModelOutput) with field(s):
    ///   - [`trained_model_arn(String)`](crate::operation::create_trained_model::CreateTrainedModelOutput::trained_model_arn): <p>The Amazon Resource Name (ARN) of the trained model.</p>
    ///   - [`version_identifier(Option<String>)`](crate::operation::create_trained_model::CreateTrainedModelOutput::version_identifier): <p>The unique version identifier assigned to the newly created trained model. This identifier can be used to reference this specific version of the trained model in subsequent operations such as inference jobs or incremental training.</p> <p>The initial version identifier for the base version of the trained model is "NULL".</p>
    /// - On failure, responds with [`SdkError<CreateTrainedModelError>`](crate::operation::create_trained_model::CreateTrainedModelError)
    pub fn create_trained_model(&self) -> crate::operation::create_trained_model::builders::CreateTrainedModelFluentBuilder {
        crate::operation::create_trained_model::builders::CreateTrainedModelFluentBuilder::new(self.handle.clone())
    }
}
