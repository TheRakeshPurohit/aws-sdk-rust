// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`GetTrainedModel`](crate::operation::get_trained_model::builders::GetTrainedModelFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`trained_model_arn(impl Into<String>)`](crate::operation::get_trained_model::builders::GetTrainedModelFluentBuilder::trained_model_arn) / [`set_trained_model_arn(Option<String>)`](crate::operation::get_trained_model::builders::GetTrainedModelFluentBuilder::set_trained_model_arn):<br>required: **true**<br><p>The Amazon Resource Name (ARN) of the trained model that you are interested in.</p><br>
    ///   - [`membership_identifier(impl Into<String>)`](crate::operation::get_trained_model::builders::GetTrainedModelFluentBuilder::membership_identifier) / [`set_membership_identifier(Option<String>)`](crate::operation::get_trained_model::builders::GetTrainedModelFluentBuilder::set_membership_identifier):<br>required: **true**<br><p>The membership ID of the member that created the trained model that you are interested in.</p><br>
    ///   - [`version_identifier(impl Into<String>)`](crate::operation::get_trained_model::builders::GetTrainedModelFluentBuilder::version_identifier) / [`set_version_identifier(Option<String>)`](crate::operation::get_trained_model::builders::GetTrainedModelFluentBuilder::set_version_identifier):<br>required: **false**<br><p>The version identifier of the trained model to retrieve. If not specified, the operation returns information about the latest version of the trained model.</p><br>
    /// - On success, responds with [`GetTrainedModelOutput`](crate::operation::get_trained_model::GetTrainedModelOutput) with field(s):
    ///   - [`membership_identifier(String)`](crate::operation::get_trained_model::GetTrainedModelOutput::membership_identifier): <p>The membership ID of the member that created the trained model.</p>
    ///   - [`collaboration_identifier(String)`](crate::operation::get_trained_model::GetTrainedModelOutput::collaboration_identifier): <p>The collaboration ID of the collaboration that contains the trained model.</p>
    ///   - [`trained_model_arn(String)`](crate::operation::get_trained_model::GetTrainedModelOutput::trained_model_arn): <p>The Amazon Resource Name (ARN) of the trained model.</p>
    ///   - [`version_identifier(Option<String>)`](crate::operation::get_trained_model::GetTrainedModelOutput::version_identifier): <p>The version identifier of the trained model. This unique identifier distinguishes this version from other versions of the same trained model.</p>
    ///   - [`incremental_training_data_channels(Option<Vec::<IncrementalTrainingDataChannelOutput>>)`](crate::operation::get_trained_model::GetTrainedModelOutput::incremental_training_data_channels): <p>Information about the incremental training data channels used to create this version of the trained model. This includes details about the base model that was used for incremental training and the channel configuration.</p>
    ///   - [`name(String)`](crate::operation::get_trained_model::GetTrainedModelOutput::name): <p>The name of the trained model.</p>
    ///   - [`description(Option<String>)`](crate::operation::get_trained_model::GetTrainedModelOutput::description): <p>The description of the trained model.</p>
    ///   - [`status(TrainedModelStatus)`](crate::operation::get_trained_model::GetTrainedModelOutput::status): <p>The status of the trained model.</p>
    ///   - [`status_details(Option<StatusDetails>)`](crate::operation::get_trained_model::GetTrainedModelOutput::status_details): <p>Details about the status of a resource.</p>
    ///   - [`configured_model_algorithm_association_arn(String)`](crate::operation::get_trained_model::GetTrainedModelOutput::configured_model_algorithm_association_arn): <p>The Amazon Resource Name (ARN) of the configured model algorithm association that was used to create the trained model.</p>
    ///   - [`resource_config(Option<ResourceConfig>)`](crate::operation::get_trained_model::GetTrainedModelOutput::resource_config): <p>The EC2 resource configuration that was used to create the trained model.</p>
    ///   - [`training_input_mode(Option<TrainingInputMode>)`](crate::operation::get_trained_model::GetTrainedModelOutput::training_input_mode): <p>The input mode that was used for accessing the training data when this trained model was created. This indicates how the training data was made available to the training algorithm.</p>
    ///   - [`stopping_condition(Option<StoppingCondition>)`](crate::operation::get_trained_model::GetTrainedModelOutput::stopping_condition): <p>The stopping condition that was used to terminate model training.</p>
    ///   - [`metrics_status(Option<MetricsStatus>)`](crate::operation::get_trained_model::GetTrainedModelOutput::metrics_status): <p>The status of the model metrics.</p>
    ///   - [`metrics_status_details(Option<String>)`](crate::operation::get_trained_model::GetTrainedModelOutput::metrics_status_details): <p>Details about the metrics status for the trained model.</p>
    ///   - [`logs_status(Option<LogsStatus>)`](crate::operation::get_trained_model::GetTrainedModelOutput::logs_status): <p>The logs status for the trained model.</p>
    ///   - [`logs_status_details(Option<String>)`](crate::operation::get_trained_model::GetTrainedModelOutput::logs_status_details): <p>Details about the logs status for the trained model.</p>
    ///   - [`training_container_image_digest(Option<String>)`](crate::operation::get_trained_model::GetTrainedModelOutput::training_container_image_digest): <p>Information about the training image container.</p>
    ///   - [`create_time(DateTime)`](crate::operation::get_trained_model::GetTrainedModelOutput::create_time): <p>The time at which the trained model was created.</p>
    ///   - [`update_time(DateTime)`](crate::operation::get_trained_model::GetTrainedModelOutput::update_time): <p>The most recent time at which the trained model was updated.</p>
    ///   - [`hyperparameters(Option<HashMap::<String, String>>)`](crate::operation::get_trained_model::GetTrainedModelOutput::hyperparameters): <p>The hyperparameters that were used to create the trained model.</p>
    ///   - [`environment(Option<HashMap::<String, String>>)`](crate::operation::get_trained_model::GetTrainedModelOutput::environment): <p>The EC2 environment that was used to create the trained model.</p>
    ///   - [`kms_key_arn(Option<String>)`](crate::operation::get_trained_model::GetTrainedModelOutput::kms_key_arn): <p>The Amazon Resource Name (ARN) of the KMS key. This key is used to encrypt and decrypt customer-owned data in the trained ML model and associated data.</p>
    ///   - [`tags(Option<HashMap::<String, String>>)`](crate::operation::get_trained_model::GetTrainedModelOutput::tags): <p>The optional metadata that you applied to the resource to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define.</p> <p>The following basic restrictions apply to tags:</p> <ul>  <li>   <p>Maximum number of tags per resource - 50.</p></li>  <li>   <p>For each resource, each tag key must be unique, and each tag key can have only one value.</p></li>  <li>   <p>Maximum key length - 128 Unicode characters in UTF-8.</p></li>  <li>   <p>Maximum value length - 256 Unicode characters in UTF-8.</p></li>  <li>   <p>If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.</p></li>  <li>   <p>Tag keys and values are case sensitive.</p></li>  <li>   <p>Do not use aws:, AWS:, or any upper or lowercase combination of such as a prefix for keys as it is reserved for AWS use. You cannot edit or delete tag keys with this prefix. Values can have this prefix. If a tag value has aws as its prefix but the key does not, then Clean Rooms ML considers it to be a user tag and will count against the limit of 50 tags. Tags with only the key prefix of aws do not count against your tags per resource limit.</p></li> </ul>
    ///   - [`data_channels(Vec::<ModelTrainingDataChannel>)`](crate::operation::get_trained_model::GetTrainedModelOutput::data_channels): <p>The data channels that were used for the trained model.</p>
    /// - On failure, responds with [`SdkError<GetTrainedModelError>`](crate::operation::get_trained_model::GetTrainedModelError)
    pub fn get_trained_model(&self) -> crate::operation::get_trained_model::builders::GetTrainedModelFluentBuilder {
        crate::operation::get_trained_model::builders::GetTrainedModelFluentBuilder::new(self.handle.clone())
    }
}
