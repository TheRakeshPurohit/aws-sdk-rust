// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration for log redaction.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LogRedactionConfiguration {
    /// <p>Specifies the entities to be redacted from logs. Entities to redact are "ALL_PERSONALLY_IDENTIFIABLE_INFORMATION", "NUMBERS","CUSTOM". If CUSTOM is supplied or configured, custom patterns (customDataIdentifiers) should be provided, and the patterns will be redacted in logs or error messages.</p>
    pub entities_to_redact: ::std::vec::Vec<crate::types::EntityType>,
    /// <p>Specifies the configuration for custom entities in the context of log redaction.</p>
    pub custom_entity_config: ::std::option::Option<crate::types::CustomEntityConfig>,
}
impl LogRedactionConfiguration {
    /// <p>Specifies the entities to be redacted from logs. Entities to redact are "ALL_PERSONALLY_IDENTIFIABLE_INFORMATION", "NUMBERS","CUSTOM". If CUSTOM is supplied or configured, custom patterns (customDataIdentifiers) should be provided, and the patterns will be redacted in logs or error messages.</p>
    pub fn entities_to_redact(&self) -> &[crate::types::EntityType] {
        use std::ops::Deref;
        self.entities_to_redact.deref()
    }
    /// <p>Specifies the configuration for custom entities in the context of log redaction.</p>
    pub fn custom_entity_config(&self) -> ::std::option::Option<&crate::types::CustomEntityConfig> {
        self.custom_entity_config.as_ref()
    }
}
impl LogRedactionConfiguration {
    /// Creates a new builder-style object to manufacture [`LogRedactionConfiguration`](crate::types::LogRedactionConfiguration).
    pub fn builder() -> crate::types::builders::LogRedactionConfigurationBuilder {
        crate::types::builders::LogRedactionConfigurationBuilder::default()
    }
}

/// A builder for [`LogRedactionConfiguration`](crate::types::LogRedactionConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct LogRedactionConfigurationBuilder {
    pub(crate) entities_to_redact: ::std::option::Option<::std::vec::Vec<crate::types::EntityType>>,
    pub(crate) custom_entity_config: ::std::option::Option<crate::types::CustomEntityConfig>,
}
impl LogRedactionConfigurationBuilder {
    /// Appends an item to `entities_to_redact`.
    ///
    /// To override the contents of this collection use [`set_entities_to_redact`](Self::set_entities_to_redact).
    ///
    /// <p>Specifies the entities to be redacted from logs. Entities to redact are "ALL_PERSONALLY_IDENTIFIABLE_INFORMATION", "NUMBERS","CUSTOM". If CUSTOM is supplied or configured, custom patterns (customDataIdentifiers) should be provided, and the patterns will be redacted in logs or error messages.</p>
    pub fn entities_to_redact(mut self, input: crate::types::EntityType) -> Self {
        let mut v = self.entities_to_redact.unwrap_or_default();
        v.push(input);
        self.entities_to_redact = ::std::option::Option::Some(v);
        self
    }
    /// <p>Specifies the entities to be redacted from logs. Entities to redact are "ALL_PERSONALLY_IDENTIFIABLE_INFORMATION", "NUMBERS","CUSTOM". If CUSTOM is supplied or configured, custom patterns (customDataIdentifiers) should be provided, and the patterns will be redacted in logs or error messages.</p>
    pub fn set_entities_to_redact(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::EntityType>>) -> Self {
        self.entities_to_redact = input;
        self
    }
    /// <p>Specifies the entities to be redacted from logs. Entities to redact are "ALL_PERSONALLY_IDENTIFIABLE_INFORMATION", "NUMBERS","CUSTOM". If CUSTOM is supplied or configured, custom patterns (customDataIdentifiers) should be provided, and the patterns will be redacted in logs or error messages.</p>
    pub fn get_entities_to_redact(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::EntityType>> {
        &self.entities_to_redact
    }
    /// <p>Specifies the configuration for custom entities in the context of log redaction.</p>
    pub fn custom_entity_config(mut self, input: crate::types::CustomEntityConfig) -> Self {
        self.custom_entity_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the configuration for custom entities in the context of log redaction.</p>
    pub fn set_custom_entity_config(mut self, input: ::std::option::Option<crate::types::CustomEntityConfig>) -> Self {
        self.custom_entity_config = input;
        self
    }
    /// <p>Specifies the configuration for custom entities in the context of log redaction.</p>
    pub fn get_custom_entity_config(&self) -> &::std::option::Option<crate::types::CustomEntityConfig> {
        &self.custom_entity_config
    }
    /// Consumes the builder and constructs a [`LogRedactionConfiguration`](crate::types::LogRedactionConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`entities_to_redact`](crate::types::builders::LogRedactionConfigurationBuilder::entities_to_redact)
    pub fn build(self) -> ::std::result::Result<crate::types::LogRedactionConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::LogRedactionConfiguration {
            entities_to_redact: self.entities_to_redact.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "entities_to_redact",
                    "entities_to_redact was not specified but it is required when building LogRedactionConfiguration",
                )
            })?,
            custom_entity_config: self.custom_entity_config,
        })
    }
}
