// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::list_trained_model_versions::_list_trained_model_versions_output::ListTrainedModelVersionsOutputBuilder;

pub use crate::operation::list_trained_model_versions::_list_trained_model_versions_input::ListTrainedModelVersionsInputBuilder;

impl crate::operation::list_trained_model_versions::builders::ListTrainedModelVersionsInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::list_trained_model_versions::ListTrainedModelVersionsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_trained_model_versions::ListTrainedModelVersionsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.list_trained_model_versions();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `ListTrainedModelVersions`.
///
/// <p>Returns a list of trained model versions for a specified trained model. This operation allows you to view all versions of a trained model, including information about their status and creation details. You can use this to track the evolution of your trained models and select specific versions for inference or further training.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct ListTrainedModelVersionsFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::list_trained_model_versions::builders::ListTrainedModelVersionsInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::list_trained_model_versions::ListTrainedModelVersionsOutput,
        crate::operation::list_trained_model_versions::ListTrainedModelVersionsError,
    > for ListTrainedModelVersionsFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::list_trained_model_versions::ListTrainedModelVersionsOutput,
            crate::operation::list_trained_model_versions::ListTrainedModelVersionsError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl ListTrainedModelVersionsFluentBuilder {
    /// Creates a new `ListTrainedModelVersionsFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the ListTrainedModelVersions as a reference.
    pub fn as_input(&self) -> &crate::operation::list_trained_model_versions::builders::ListTrainedModelVersionsInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_trained_model_versions::ListTrainedModelVersionsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_trained_model_versions::ListTrainedModelVersionsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::list_trained_model_versions::ListTrainedModelVersions::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::list_trained_model_versions::ListTrainedModelVersions::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::list_trained_model_versions::ListTrainedModelVersionsOutput,
        crate::operation::list_trained_model_versions::ListTrainedModelVersionsError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::list_trained_model_versions::paginator::ListTrainedModelVersionsPaginator::send) which returns a [`PaginationStream`](aws_smithy_async::future::pagination_stream::PaginationStream).
    pub fn into_paginator(self) -> crate::operation::list_trained_model_versions::paginator::ListTrainedModelVersionsPaginator {
        crate::operation::list_trained_model_versions::paginator::ListTrainedModelVersionsPaginator::new(self.handle, self.inner)
    }
    /// <p>The pagination token from a previous <code>ListTrainedModelVersions</code> request. Use this token to retrieve the next page of results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>The pagination token from a previous <code>ListTrainedModelVersions</code> request. Use this token to retrieve the next page of results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The pagination token from a previous <code>ListTrainedModelVersions</code> request. Use this token to retrieve the next page of results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_next_token()
    }
    /// <p>The maximum number of trained model versions to return in a single page. The default value is 10, and the maximum value is 100.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of trained model versions to return in a single page. The default value is 10, and the maximum value is 100.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>The maximum number of trained model versions to return in a single page. The default value is 10, and the maximum value is 100.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        self.inner.get_max_results()
    }
    /// <p>The membership identifier for the collaboration that contains the trained model.</p>
    pub fn membership_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.membership_identifier(input.into());
        self
    }
    /// <p>The membership identifier for the collaboration that contains the trained model.</p>
    pub fn set_membership_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_membership_identifier(input);
        self
    }
    /// <p>The membership identifier for the collaboration that contains the trained model.</p>
    pub fn get_membership_identifier(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_membership_identifier()
    }
    /// <p>The Amazon Resource Name (ARN) of the trained model for which to list versions.</p>
    pub fn trained_model_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.trained_model_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the trained model for which to list versions.</p>
    pub fn set_trained_model_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_trained_model_arn(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the trained model for which to list versions.</p>
    pub fn get_trained_model_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_trained_model_arn()
    }
    /// <p>Filter the results to only include trained model versions with the specified status. Valid values include <code>CREATE_PENDING</code>, <code>CREATE_IN_PROGRESS</code>, <code>ACTIVE</code>, <code>CREATE_FAILED</code>, and others.</p>
    pub fn status(mut self, input: crate::types::TrainedModelStatus) -> Self {
        self.inner = self.inner.status(input);
        self
    }
    /// <p>Filter the results to only include trained model versions with the specified status. Valid values include <code>CREATE_PENDING</code>, <code>CREATE_IN_PROGRESS</code>, <code>ACTIVE</code>, <code>CREATE_FAILED</code>, and others.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::TrainedModelStatus>) -> Self {
        self.inner = self.inner.set_status(input);
        self
    }
    /// <p>Filter the results to only include trained model versions with the specified status. Valid values include <code>CREATE_PENDING</code>, <code>CREATE_IN_PROGRESS</code>, <code>ACTIVE</code>, <code>CREATE_FAILED</code>, and others.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::TrainedModelStatus> {
        self.inner.get_status()
    }
}
