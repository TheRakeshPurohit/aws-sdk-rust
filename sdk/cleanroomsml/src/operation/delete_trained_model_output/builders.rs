// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::delete_trained_model_output::_delete_trained_model_output_output::DeleteTrainedModelOutputOutputBuilder;

pub use crate::operation::delete_trained_model_output::_delete_trained_model_output_input::DeleteTrainedModelOutputInputBuilder;

impl crate::operation::delete_trained_model_output::builders::DeleteTrainedModelOutputInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::delete_trained_model_output::DeleteTrainedModelOutputOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_trained_model_output::DeleteTrainedModelOutputError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.delete_trained_model_output();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `DeleteTrainedModelOutput`.
///
/// <p>Deletes the model artifacts stored by the service.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct DeleteTrainedModelOutputFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::delete_trained_model_output::builders::DeleteTrainedModelOutputInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::delete_trained_model_output::DeleteTrainedModelOutputOutput,
        crate::operation::delete_trained_model_output::DeleteTrainedModelOutputError,
    > for DeleteTrainedModelOutputFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::delete_trained_model_output::DeleteTrainedModelOutputOutput,
            crate::operation::delete_trained_model_output::DeleteTrainedModelOutputError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl DeleteTrainedModelOutputFluentBuilder {
    /// Creates a new `DeleteTrainedModelOutputFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the DeleteTrainedModelOutput as a reference.
    pub fn as_input(&self) -> &crate::operation::delete_trained_model_output::builders::DeleteTrainedModelOutputInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::delete_trained_model_output::DeleteTrainedModelOutputOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_trained_model_output::DeleteTrainedModelOutputError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::delete_trained_model_output::DeleteTrainedModelOutput::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::delete_trained_model_output::DeleteTrainedModelOutput::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::delete_trained_model_output::DeleteTrainedModelOutputOutput,
        crate::operation::delete_trained_model_output::DeleteTrainedModelOutputError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the trained model whose output you want to delete.</p>
    pub fn trained_model_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.trained_model_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the trained model whose output you want to delete.</p>
    pub fn set_trained_model_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_trained_model_arn(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the trained model whose output you want to delete.</p>
    pub fn get_trained_model_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_trained_model_arn()
    }
    /// <p>The membership ID of the member that is deleting the trained model output.</p>
    pub fn membership_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.membership_identifier(input.into());
        self
    }
    /// <p>The membership ID of the member that is deleting the trained model output.</p>
    pub fn set_membership_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_membership_identifier(input);
        self
    }
    /// <p>The membership ID of the member that is deleting the trained model output.</p>
    pub fn get_membership_identifier(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_membership_identifier()
    }
    /// <p>The version identifier of the trained model to delete. If not specified, the operation will delete the base version of the trained model. When specified, only the particular version will be deleted.</p>
    pub fn version_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.version_identifier(input.into());
        self
    }
    /// <p>The version identifier of the trained model to delete. If not specified, the operation will delete the base version of the trained model. When specified, only the particular version will be deleted.</p>
    pub fn set_version_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_version_identifier(input);
        self
    }
    /// <p>The version identifier of the trained model to delete. If not specified, the operation will delete the base version of the trained model. When specified, only the particular version will be deleted.</p>
    pub fn get_version_identifier(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_version_identifier()
    }
}
