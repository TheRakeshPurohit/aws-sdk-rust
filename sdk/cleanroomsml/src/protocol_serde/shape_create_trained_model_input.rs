// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_trained_model_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_trained_model::CreateTrainedModelInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.configured_model_algorithm_association_arn {
        object.key("configuredModelAlgorithmAssociationArn").string(var_1.as_str());
    }
    if let Some(var_2) = &input.data_channels {
        let mut array_3 = object.key("dataChannels").start_array();
        for item_4 in var_2 {
            {
                #[allow(unused_mut)]
                let mut object_5 = array_3.value().start_object();
                crate::protocol_serde::shape_model_training_data_channel::ser_model_training_data_channel(&mut object_5, item_4)?;
                object_5.finish();
            }
        }
        array_3.finish();
    }
    if let Some(var_6) = &input.description {
        object.key("description").string(var_6.as_str());
    }
    if let Some(var_7) = &input.environment {
        #[allow(unused_mut)]
        let mut object_8 = object.key("environment").start_object();
        for (key_9, value_10) in var_7 {
            {
                object_8.key(key_9.as_str()).string(value_10.as_str());
            }
        }
        object_8.finish();
    }
    if let Some(var_11) = &input.hyperparameters {
        #[allow(unused_mut)]
        let mut object_12 = object.key("hyperparameters").start_object();
        for (key_13, value_14) in var_11 {
            {
                object_12.key(key_13.as_str()).string(value_14.as_str());
            }
        }
        object_12.finish();
    }
    if let Some(var_15) = &input.incremental_training_data_channels {
        let mut array_16 = object.key("incrementalTrainingDataChannels").start_array();
        for item_17 in var_15 {
            {
                #[allow(unused_mut)]
                let mut object_18 = array_16.value().start_object();
                crate::protocol_serde::shape_incremental_training_data_channel::ser_incremental_training_data_channel(&mut object_18, item_17)?;
                object_18.finish();
            }
        }
        array_16.finish();
    }
    if let Some(var_19) = &input.kms_key_arn {
        object.key("kmsKeyArn").string(var_19.as_str());
    }
    if let Some(var_20) = &input.name {
        object.key("name").string(var_20.as_str());
    }
    if let Some(var_21) = &input.resource_config {
        #[allow(unused_mut)]
        let mut object_22 = object.key("resourceConfig").start_object();
        crate::protocol_serde::shape_resource_config::ser_resource_config(&mut object_22, var_21)?;
        object_22.finish();
    }
    if let Some(var_23) = &input.stopping_condition {
        #[allow(unused_mut)]
        let mut object_24 = object.key("stoppingCondition").start_object();
        crate::protocol_serde::shape_stopping_condition::ser_stopping_condition(&mut object_24, var_23)?;
        object_24.finish();
    }
    if let Some(var_25) = &input.tags {
        #[allow(unused_mut)]
        let mut object_26 = object.key("tags").start_object();
        for (key_27, value_28) in var_25 {
            {
                object_26.key(key_27.as_str()).string(value_28.as_str());
            }
        }
        object_26.finish();
    }
    if let Some(var_29) = &input.training_input_mode {
        object.key("trainingInputMode").string(var_29.as_str());
    }
    Ok(())
}
