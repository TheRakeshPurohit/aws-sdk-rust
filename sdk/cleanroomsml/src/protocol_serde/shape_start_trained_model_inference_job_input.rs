// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_start_trained_model_inference_job_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::start_trained_model_inference_job::StartTrainedModelInferenceJobInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.configured_model_algorithm_association_arn {
        object.key("configuredModelAlgorithmAssociationArn").string(var_1.as_str());
    }
    if let Some(var_2) = &input.container_execution_parameters {
        #[allow(unused_mut)]
        let mut object_3 = object.key("containerExecutionParameters").start_object();
        crate::protocol_serde::shape_inference_container_execution_parameters::ser_inference_container_execution_parameters(&mut object_3, var_2)?;
        object_3.finish();
    }
    if let Some(var_4) = &input.data_source {
        #[allow(unused_mut)]
        let mut object_5 = object.key("dataSource").start_object();
        crate::protocol_serde::shape_model_inference_data_source::ser_model_inference_data_source(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.description {
        object.key("description").string(var_6.as_str());
    }
    if let Some(var_7) = &input.environment {
        #[allow(unused_mut)]
        let mut object_8 = object.key("environment").start_object();
        for (key_9, value_10) in var_7 {
            {
                object_8.key(key_9.as_str()).string(value_10.as_str());
            }
        }
        object_8.finish();
    }
    if let Some(var_11) = &input.kms_key_arn {
        object.key("kmsKeyArn").string(var_11.as_str());
    }
    if let Some(var_12) = &input.name {
        object.key("name").string(var_12.as_str());
    }
    if let Some(var_13) = &input.output_configuration {
        #[allow(unused_mut)]
        let mut object_14 = object.key("outputConfiguration").start_object();
        crate::protocol_serde::shape_inference_output_configuration::ser_inference_output_configuration(&mut object_14, var_13)?;
        object_14.finish();
    }
    if let Some(var_15) = &input.resource_config {
        #[allow(unused_mut)]
        let mut object_16 = object.key("resourceConfig").start_object();
        crate::protocol_serde::shape_inference_resource_config::ser_inference_resource_config(&mut object_16, var_15)?;
        object_16.finish();
    }
    if let Some(var_17) = &input.tags {
        #[allow(unused_mut)]
        let mut object_18 = object.key("tags").start_object();
        for (key_19, value_20) in var_17 {
            {
                object_18.key(key_19.as_str()).string(value_20.as_str());
            }
        }
        object_18.finish();
    }
    if let Some(var_21) = &input.trained_model_arn {
        object.key("trainedModelArn").string(var_21.as_str());
    }
    if let Some(var_22) = &input.trained_model_version_identifier {
        object.key("trainedModelVersionIdentifier").string(var_22.as_str());
    }
    Ok(())
}
