// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_cloud_exadata_infrastructure_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_cloud_exadata_infrastructure::CreateCloudExadataInfrastructureInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.display_name {
        object.key("displayName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.shape {
        object.key("shape").string(var_2.as_str());
    }
    if let Some(var_3) = &input.availability_zone {
        object.key("availabilityZone").string(var_3.as_str());
    }
    if let Some(var_4) = &input.availability_zone_id {
        object.key("availabilityZoneId").string(var_4.as_str());
    }
    if let Some(var_5) = &input.tags {
        #[allow(unused_mut)]
        let mut object_6 = object.key("tags").start_object();
        for (key_7, value_8) in var_5 {
            {
                object_6.key(key_7.as_str()).string(value_8.as_str());
            }
        }
        object_6.finish();
    }
    if let Some(var_9) = &input.compute_count {
        object.key("computeCount").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_9).into()),
        );
    }
    if let Some(var_10) = &input.customer_contacts_to_send_to_oci {
        let mut array_11 = object.key("customerContactsToSendToOCI").start_array();
        for item_12 in var_10 {
            {
                #[allow(unused_mut)]
                let mut object_13 = array_11.value().start_object();
                crate::protocol_serde::shape_customer_contact::ser_customer_contact(&mut object_13, item_12)?;
                object_13.finish();
            }
        }
        array_11.finish();
    }
    if let Some(var_14) = &input.maintenance_window {
        #[allow(unused_mut)]
        let mut object_15 = object.key("maintenanceWindow").start_object();
        crate::protocol_serde::shape_maintenance_window::ser_maintenance_window(&mut object_15, var_14)?;
        object_15.finish();
    }
    if let Some(var_16) = &input.storage_count {
        object.key("storageCount").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_16).into()),
        );
    }
    if let Some(var_17) = &input.client_token {
        object.key("clientToken").string(var_17.as_str());
    }
    if let Some(var_18) = &input.database_server_type {
        object.key("databaseServerType").string(var_18.as_str());
    }
    if let Some(var_19) = &input.storage_server_type {
        object.key("storageServerType").string(var_19.as_str());
    }
    Ok(())
}
