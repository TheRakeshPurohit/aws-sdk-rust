// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_odb_network_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_odb_network::CreateOdbNetworkInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.display_name {
        object.key("displayName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.availability_zone {
        object.key("availabilityZone").string(var_2.as_str());
    }
    if let Some(var_3) = &input.availability_zone_id {
        object.key("availabilityZoneId").string(var_3.as_str());
    }
    if let Some(var_4) = &input.client_subnet_cidr {
        object.key("clientSubnetCidr").string(var_4.as_str());
    }
    if let Some(var_5) = &input.backup_subnet_cidr {
        object.key("backupSubnetCidr").string(var_5.as_str());
    }
    if let Some(var_6) = &input.custom_domain_name {
        object.key("customDomainName").string(var_6.as_str());
    }
    if let Some(var_7) = &input.default_dns_prefix {
        object.key("defaultDnsPrefix").string(var_7.as_str());
    }
    if let Some(var_8) = &input.client_token {
        object.key("clientToken").string(var_8.as_str());
    }
    if let Some(var_9) = &input.s3_access {
        object.key("s3Access").string(var_9.as_str());
    }
    if let Some(var_10) = &input.zero_etl_access {
        object.key("zeroEtlAccess").string(var_10.as_str());
    }
    if let Some(var_11) = &input.s3_policy_document {
        object.key("s3PolicyDocument").string(var_11.as_str());
    }
    if let Some(var_12) = &input.tags {
        #[allow(unused_mut)]
        let mut object_13 = object.key("tags").start_object();
        for (key_14, value_15) in var_12 {
            {
                object_13.key(key_14.as_str()).string(value_15.as_str());
            }
        }
        object_13.finish();
    }
    Ok(())
}
