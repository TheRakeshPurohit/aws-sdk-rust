// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_cloud_exadata_infrastructure::_create_cloud_exadata_infrastructure_output::CreateCloudExadataInfrastructureOutputBuilder;

pub use crate::operation::create_cloud_exadata_infrastructure::_create_cloud_exadata_infrastructure_input::CreateCloudExadataInfrastructureInputBuilder;

impl crate::operation::create_cloud_exadata_infrastructure::builders::CreateCloudExadataInfrastructureInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_cloud_exadata_infrastructure::CreateCloudExadataInfrastructureOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_cloud_exadata_infrastructure::CreateCloudExadataInfrastructureError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_cloud_exadata_infrastructure();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateCloudExadataInfrastructure`.
///
/// <p>Creates an Exadata infrastructure.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateCloudExadataInfrastructureFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_cloud_exadata_infrastructure::builders::CreateCloudExadataInfrastructureInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_cloud_exadata_infrastructure::CreateCloudExadataInfrastructureOutput,
        crate::operation::create_cloud_exadata_infrastructure::CreateCloudExadataInfrastructureError,
    > for CreateCloudExadataInfrastructureFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_cloud_exadata_infrastructure::CreateCloudExadataInfrastructureOutput,
            crate::operation::create_cloud_exadata_infrastructure::CreateCloudExadataInfrastructureError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreateCloudExadataInfrastructureFluentBuilder {
    /// Creates a new `CreateCloudExadataInfrastructureFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateCloudExadataInfrastructure as a reference.
    pub fn as_input(&self) -> &crate::operation::create_cloud_exadata_infrastructure::builders::CreateCloudExadataInfrastructureInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_cloud_exadata_infrastructure::CreateCloudExadataInfrastructureOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_cloud_exadata_infrastructure::CreateCloudExadataInfrastructureError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_cloud_exadata_infrastructure::CreateCloudExadataInfrastructure::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_cloud_exadata_infrastructure::CreateCloudExadataInfrastructure::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_cloud_exadata_infrastructure::CreateCloudExadataInfrastructureOutput,
        crate::operation::create_cloud_exadata_infrastructure::CreateCloudExadataInfrastructureError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>A user-friendly name for the Exadata infrastructure.</p>
    pub fn display_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.display_name(input.into());
        self
    }
    /// <p>A user-friendly name for the Exadata infrastructure.</p>
    pub fn set_display_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_display_name(input);
        self
    }
    /// <p>A user-friendly name for the Exadata infrastructure.</p>
    pub fn get_display_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_display_name()
    }
    /// <p>The model name of the Exadata infrastructure. For the list of valid model names, use the <code>ListDbSystemShapes</code> operation.</p>
    pub fn shape(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.shape(input.into());
        self
    }
    /// <p>The model name of the Exadata infrastructure. For the list of valid model names, use the <code>ListDbSystemShapes</code> operation.</p>
    pub fn set_shape(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_shape(input);
        self
    }
    /// <p>The model name of the Exadata infrastructure. For the list of valid model names, use the <code>ListDbSystemShapes</code> operation.</p>
    pub fn get_shape(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_shape()
    }
    /// <p>The name of the Availability Zone (AZ) where the Exadata infrastructure is located.</p>
    /// <p>This operation requires that you specify a value for either <code>availabilityZone</code> or <code>availabilityZoneId</code>.</p>
    /// <p>Example: <code>us-east-1a</code></p>
    pub fn availability_zone(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.availability_zone(input.into());
        self
    }
    /// <p>The name of the Availability Zone (AZ) where the Exadata infrastructure is located.</p>
    /// <p>This operation requires that you specify a value for either <code>availabilityZone</code> or <code>availabilityZoneId</code>.</p>
    /// <p>Example: <code>us-east-1a</code></p>
    pub fn set_availability_zone(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_availability_zone(input);
        self
    }
    /// <p>The name of the Availability Zone (AZ) where the Exadata infrastructure is located.</p>
    /// <p>This operation requires that you specify a value for either <code>availabilityZone</code> or <code>availabilityZoneId</code>.</p>
    /// <p>Example: <code>us-east-1a</code></p>
    pub fn get_availability_zone(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_availability_zone()
    }
    /// <p>The AZ ID of the AZ where the Exadata infrastructure is located.</p>
    /// <p>This operation requires that you specify a value for either <code>availabilityZone</code> or <code>availabilityZoneId</code>.</p>
    /// <p>Example: <code>use1-az1</code></p>
    pub fn availability_zone_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.availability_zone_id(input.into());
        self
    }
    /// <p>The AZ ID of the AZ where the Exadata infrastructure is located.</p>
    /// <p>This operation requires that you specify a value for either <code>availabilityZone</code> or <code>availabilityZoneId</code>.</p>
    /// <p>Example: <code>use1-az1</code></p>
    pub fn set_availability_zone_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_availability_zone_id(input);
        self
    }
    /// <p>The AZ ID of the AZ where the Exadata infrastructure is located.</p>
    /// <p>This operation requires that you specify a value for either <code>availabilityZone</code> or <code>availabilityZoneId</code>.</p>
    /// <p>Example: <code>use1-az1</code></p>
    pub fn get_availability_zone_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_availability_zone_id()
    }
    ///
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The list of resource tags to apply to the Exadata infrastructure.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.tags(k.into(), v.into());
        self
    }
    /// <p>The list of resource tags to apply to the Exadata infrastructure.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>The list of resource tags to apply to the Exadata infrastructure.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.inner.get_tags()
    }
    /// <p>The number of database servers for the Exadata infrastructure. Valid values for this parameter depend on the shape. To get information about the minimum and maximum values, use the <code>ListDbSystemShapes</code> operation.</p>
    pub fn compute_count(mut self, input: i32) -> Self {
        self.inner = self.inner.compute_count(input);
        self
    }
    /// <p>The number of database servers for the Exadata infrastructure. Valid values for this parameter depend on the shape. To get information about the minimum and maximum values, use the <code>ListDbSystemShapes</code> operation.</p>
    pub fn set_compute_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_compute_count(input);
        self
    }
    /// <p>The number of database servers for the Exadata infrastructure. Valid values for this parameter depend on the shape. To get information about the minimum and maximum values, use the <code>ListDbSystemShapes</code> operation.</p>
    pub fn get_compute_count(&self) -> &::std::option::Option<i32> {
        self.inner.get_compute_count()
    }
    ///
    /// Appends an item to `customerContactsToSendToOCI`.
    ///
    /// To override the contents of this collection use [`set_customer_contacts_to_send_to_oci`](Self::set_customer_contacts_to_send_to_oci).
    ///
    /// <p>The email addresses of contacts to receive notification from Oracle about maintenance updates for the Exadata infrastructure.</p>
    pub fn customer_contacts_to_send_to_oci(mut self, input: crate::types::CustomerContact) -> Self {
        self.inner = self.inner.customer_contacts_to_send_to_oci(input);
        self
    }
    /// <p>The email addresses of contacts to receive notification from Oracle about maintenance updates for the Exadata infrastructure.</p>
    pub fn set_customer_contacts_to_send_to_oci(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::CustomerContact>>) -> Self {
        self.inner = self.inner.set_customer_contacts_to_send_to_oci(input);
        self
    }
    /// <p>The email addresses of contacts to receive notification from Oracle about maintenance updates for the Exadata infrastructure.</p>
    pub fn get_customer_contacts_to_send_to_oci(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CustomerContact>> {
        self.inner.get_customer_contacts_to_send_to_oci()
    }
    /// <p>The maintenance window configuration for the Exadata Cloud infrastructure.</p>
    /// <p>This allows you to define when maintenance operations such as patching and updates can be performed on the infrastructure.</p>
    pub fn maintenance_window(mut self, input: crate::types::MaintenanceWindow) -> Self {
        self.inner = self.inner.maintenance_window(input);
        self
    }
    /// <p>The maintenance window configuration for the Exadata Cloud infrastructure.</p>
    /// <p>This allows you to define when maintenance operations such as patching and updates can be performed on the infrastructure.</p>
    pub fn set_maintenance_window(mut self, input: ::std::option::Option<crate::types::MaintenanceWindow>) -> Self {
        self.inner = self.inner.set_maintenance_window(input);
        self
    }
    /// <p>The maintenance window configuration for the Exadata Cloud infrastructure.</p>
    /// <p>This allows you to define when maintenance operations such as patching and updates can be performed on the infrastructure.</p>
    pub fn get_maintenance_window(&self) -> &::std::option::Option<crate::types::MaintenanceWindow> {
        self.inner.get_maintenance_window()
    }
    /// <p>The number of storage servers to activate for this Exadata infrastructure. Valid values for this parameter depend on the shape. To get information about the minimum and maximum values, use the <code>ListDbSystemShapes</code> operation.</p>
    pub fn storage_count(mut self, input: i32) -> Self {
        self.inner = self.inner.storage_count(input);
        self
    }
    /// <p>The number of storage servers to activate for this Exadata infrastructure. Valid values for this parameter depend on the shape. To get information about the minimum and maximum values, use the <code>ListDbSystemShapes</code> operation.</p>
    pub fn set_storage_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_storage_count(input);
        self
    }
    /// <p>The number of storage servers to activate for this Exadata infrastructure. Valid values for this parameter depend on the shape. To get information about the minimum and maximum values, use the <code>ListDbSystemShapes</code> operation.</p>
    pub fn get_storage_count(&self) -> &::std::option::Option<i32> {
        self.inner.get_storage_count()
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you don't specify a client token, the Amazon Web Services SDK automatically generates a client token and uses it for the request to ensure idempotency. The client token is valid for up to 24 hours after it's first used.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you don't specify a client token, the Amazon Web Services SDK automatically generates a client token and uses it for the request to ensure idempotency. The client token is valid for up to 24 hours after it's first used.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you don't specify a client token, the Amazon Web Services SDK automatically generates a client token and uses it for the request to ensure idempotency. The client token is valid for up to 24 hours after it's first used.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_client_token()
    }
    /// <p>The database server model type of the Exadata infrastructure. For the list of valid model names, use the <code>ListDbSystemShapes</code> operation.</p>
    pub fn database_server_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.database_server_type(input.into());
        self
    }
    /// <p>The database server model type of the Exadata infrastructure. For the list of valid model names, use the <code>ListDbSystemShapes</code> operation.</p>
    pub fn set_database_server_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_database_server_type(input);
        self
    }
    /// <p>The database server model type of the Exadata infrastructure. For the list of valid model names, use the <code>ListDbSystemShapes</code> operation.</p>
    pub fn get_database_server_type(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_database_server_type()
    }
    /// <p>The storage server model type of the Exadata infrastructure. For the list of valid model names, use the <code>ListDbSystemShapes</code> operation.</p>
    pub fn storage_server_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.storage_server_type(input.into());
        self
    }
    /// <p>The storage server model type of the Exadata infrastructure. For the list of valid model names, use the <code>ListDbSystemShapes</code> operation.</p>
    pub fn set_storage_server_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_storage_server_type(input);
        self
    }
    /// <p>The storage server model type of the Exadata infrastructure. For the list of valid model names, use the <code>ListDbSystemShapes</code> operation.</p>
    pub fn get_storage_server_type(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_storage_server_type()
    }
}
