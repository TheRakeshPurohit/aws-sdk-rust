// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_cloud_autonomous_vm_cluster::_create_cloud_autonomous_vm_cluster_output::CreateCloudAutonomousVmClusterOutputBuilder;

pub use crate::operation::create_cloud_autonomous_vm_cluster::_create_cloud_autonomous_vm_cluster_input::CreateCloudAutonomousVmClusterInputBuilder;

impl crate::operation::create_cloud_autonomous_vm_cluster::builders::CreateCloudAutonomousVmClusterInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_cloud_autonomous_vm_cluster::CreateCloudAutonomousVmClusterOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_cloud_autonomous_vm_cluster::CreateCloudAutonomousVmClusterError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_cloud_autonomous_vm_cluster();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateCloudAutonomousVmCluster`.
///
/// <p>Creates a new Autonomous VM cluster in the specified Exadata infrastructure.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateCloudAutonomousVmClusterFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_cloud_autonomous_vm_cluster::builders::CreateCloudAutonomousVmClusterInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_cloud_autonomous_vm_cluster::CreateCloudAutonomousVmClusterOutput,
        crate::operation::create_cloud_autonomous_vm_cluster::CreateCloudAutonomousVmClusterError,
    > for CreateCloudAutonomousVmClusterFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_cloud_autonomous_vm_cluster::CreateCloudAutonomousVmClusterOutput,
            crate::operation::create_cloud_autonomous_vm_cluster::CreateCloudAutonomousVmClusterError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreateCloudAutonomousVmClusterFluentBuilder {
    /// Creates a new `CreateCloudAutonomousVmClusterFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateCloudAutonomousVmCluster as a reference.
    pub fn as_input(&self) -> &crate::operation::create_cloud_autonomous_vm_cluster::builders::CreateCloudAutonomousVmClusterInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_cloud_autonomous_vm_cluster::CreateCloudAutonomousVmClusterOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_cloud_autonomous_vm_cluster::CreateCloudAutonomousVmClusterError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_cloud_autonomous_vm_cluster::CreateCloudAutonomousVmCluster::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_cloud_autonomous_vm_cluster::CreateCloudAutonomousVmCluster::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_cloud_autonomous_vm_cluster::CreateCloudAutonomousVmClusterOutput,
        crate::operation::create_cloud_autonomous_vm_cluster::CreateCloudAutonomousVmClusterError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The unique identifier of the Exadata infrastructure where the VM cluster will be created.</p>
    pub fn cloud_exadata_infrastructure_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.cloud_exadata_infrastructure_id(input.into());
        self
    }
    /// <p>The unique identifier of the Exadata infrastructure where the VM cluster will be created.</p>
    pub fn set_cloud_exadata_infrastructure_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_cloud_exadata_infrastructure_id(input);
        self
    }
    /// <p>The unique identifier of the Exadata infrastructure where the VM cluster will be created.</p>
    pub fn get_cloud_exadata_infrastructure_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_cloud_exadata_infrastructure_id()
    }
    /// <p>The unique identifier of the ODB network to be used for the VM cluster.</p>
    pub fn odb_network_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.odb_network_id(input.into());
        self
    }
    /// <p>The unique identifier of the ODB network to be used for the VM cluster.</p>
    pub fn set_odb_network_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_odb_network_id(input);
        self
    }
    /// <p>The unique identifier of the ODB network to be used for the VM cluster.</p>
    pub fn get_odb_network_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_odb_network_id()
    }
    /// <p>The display name for the Autonomous VM cluster. The name does not need to be unique.</p>
    pub fn display_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.display_name(input.into());
        self
    }
    /// <p>The display name for the Autonomous VM cluster. The name does not need to be unique.</p>
    pub fn set_display_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_display_name(input);
        self
    }
    /// <p>The display name for the Autonomous VM cluster. The name does not need to be unique.</p>
    pub fn get_display_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_display_name()
    }
    /// <p>A client-provided token to ensure idempotency of the request.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>A client-provided token to ensure idempotency of the request.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
    /// <p>A client-provided token to ensure idempotency of the request.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_client_token()
    }
    /// <p>The data disk group size to be allocated for Autonomous Databases, in terabytes (TB).</p>
    pub fn autonomous_data_storage_size_in_tbs(mut self, input: f64) -> Self {
        self.inner = self.inner.autonomous_data_storage_size_in_tbs(input);
        self
    }
    /// <p>The data disk group size to be allocated for Autonomous Databases, in terabytes (TB).</p>
    pub fn set_autonomous_data_storage_size_in_tbs(mut self, input: ::std::option::Option<f64>) -> Self {
        self.inner = self.inner.set_autonomous_data_storage_size_in_tbs(input);
        self
    }
    /// <p>The data disk group size to be allocated for Autonomous Databases, in terabytes (TB).</p>
    pub fn get_autonomous_data_storage_size_in_tbs(&self) -> &::std::option::Option<f64> {
        self.inner.get_autonomous_data_storage_size_in_tbs()
    }
    /// <p>The number of CPU cores to be enabled per VM cluster node.</p>
    pub fn cpu_core_count_per_node(mut self, input: i32) -> Self {
        self.inner = self.inner.cpu_core_count_per_node(input);
        self
    }
    /// <p>The number of CPU cores to be enabled per VM cluster node.</p>
    pub fn set_cpu_core_count_per_node(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_cpu_core_count_per_node(input);
        self
    }
    /// <p>The number of CPU cores to be enabled per VM cluster node.</p>
    pub fn get_cpu_core_count_per_node(&self) -> &::std::option::Option<i32> {
        self.inner.get_cpu_core_count_per_node()
    }
    ///
    /// Appends an item to `dbServers`.
    ///
    /// To override the contents of this collection use [`set_db_servers`](Self::set_db_servers).
    ///
    /// <p>The list of database servers to be used for the Autonomous VM cluster.</p>
    pub fn db_servers(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.db_servers(input.into());
        self
    }
    /// <p>The list of database servers to be used for the Autonomous VM cluster.</p>
    pub fn set_db_servers(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_db_servers(input);
        self
    }
    /// <p>The list of database servers to be used for the Autonomous VM cluster.</p>
    pub fn get_db_servers(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_db_servers()
    }
    /// <p>A user-provided description of the Autonomous VM cluster.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>A user-provided description of the Autonomous VM cluster.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>A user-provided description of the Autonomous VM cluster.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_description()
    }
    /// <p>Specifies whether to enable mutual TLS (mTLS) authentication for the Autonomous VM cluster.</p>
    pub fn is_mtls_enabled_vm_cluster(mut self, input: bool) -> Self {
        self.inner = self.inner.is_mtls_enabled_vm_cluster(input);
        self
    }
    /// <p>Specifies whether to enable mutual TLS (mTLS) authentication for the Autonomous VM cluster.</p>
    pub fn set_is_mtls_enabled_vm_cluster(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_is_mtls_enabled_vm_cluster(input);
        self
    }
    /// <p>Specifies whether to enable mutual TLS (mTLS) authentication for the Autonomous VM cluster.</p>
    pub fn get_is_mtls_enabled_vm_cluster(&self) -> &::std::option::Option<bool> {
        self.inner.get_is_mtls_enabled_vm_cluster()
    }
    /// <p>The Oracle license model to apply to the Autonomous VM cluster.</p>
    pub fn license_model(mut self, input: crate::types::LicenseModel) -> Self {
        self.inner = self.inner.license_model(input);
        self
    }
    /// <p>The Oracle license model to apply to the Autonomous VM cluster.</p>
    pub fn set_license_model(mut self, input: ::std::option::Option<crate::types::LicenseModel>) -> Self {
        self.inner = self.inner.set_license_model(input);
        self
    }
    /// <p>The Oracle license model to apply to the Autonomous VM cluster.</p>
    pub fn get_license_model(&self) -> &::std::option::Option<crate::types::LicenseModel> {
        self.inner.get_license_model()
    }
    /// <p>The scheduling details for the maintenance window. Patching and system updates take place during the maintenance window.</p>
    pub fn maintenance_window(mut self, input: crate::types::MaintenanceWindow) -> Self {
        self.inner = self.inner.maintenance_window(input);
        self
    }
    /// <p>The scheduling details for the maintenance window. Patching and system updates take place during the maintenance window.</p>
    pub fn set_maintenance_window(mut self, input: ::std::option::Option<crate::types::MaintenanceWindow>) -> Self {
        self.inner = self.inner.set_maintenance_window(input);
        self
    }
    /// <p>The scheduling details for the maintenance window. Patching and system updates take place during the maintenance window.</p>
    pub fn get_maintenance_window(&self) -> &::std::option::Option<crate::types::MaintenanceWindow> {
        self.inner.get_maintenance_window()
    }
    /// <p>The amount of memory to be allocated per OCPU, in GB.</p>
    pub fn memory_per_oracle_compute_unit_in_gbs(mut self, input: i32) -> Self {
        self.inner = self.inner.memory_per_oracle_compute_unit_in_gbs(input);
        self
    }
    /// <p>The amount of memory to be allocated per OCPU, in GB.</p>
    pub fn set_memory_per_oracle_compute_unit_in_gbs(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_memory_per_oracle_compute_unit_in_gbs(input);
        self
    }
    /// <p>The amount of memory to be allocated per OCPU, in GB.</p>
    pub fn get_memory_per_oracle_compute_unit_in_gbs(&self) -> &::std::option::Option<i32> {
        self.inner.get_memory_per_oracle_compute_unit_in_gbs()
    }
    /// <p>The SCAN listener port for non-TLS (TCP) protocol.</p>
    pub fn scan_listener_port_non_tls(mut self, input: i32) -> Self {
        self.inner = self.inner.scan_listener_port_non_tls(input);
        self
    }
    /// <p>The SCAN listener port for non-TLS (TCP) protocol.</p>
    pub fn set_scan_listener_port_non_tls(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_scan_listener_port_non_tls(input);
        self
    }
    /// <p>The SCAN listener port for non-TLS (TCP) protocol.</p>
    pub fn get_scan_listener_port_non_tls(&self) -> &::std::option::Option<i32> {
        self.inner.get_scan_listener_port_non_tls()
    }
    /// <p>The SCAN listener port for TLS (TCP) protocol.</p>
    pub fn scan_listener_port_tls(mut self, input: i32) -> Self {
        self.inner = self.inner.scan_listener_port_tls(input);
        self
    }
    /// <p>The SCAN listener port for TLS (TCP) protocol.</p>
    pub fn set_scan_listener_port_tls(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_scan_listener_port_tls(input);
        self
    }
    /// <p>The SCAN listener port for TLS (TCP) protocol.</p>
    pub fn get_scan_listener_port_tls(&self) -> &::std::option::Option<i32> {
        self.inner.get_scan_listener_port_tls()
    }
    ///
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Free-form tags for this resource. Each tag is a key-value pair with no predefined name, type, or namespace.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.tags(k.into(), v.into());
        self
    }
    /// <p>Free-form tags for this resource. Each tag is a key-value pair with no predefined name, type, or namespace.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>Free-form tags for this resource. Each tag is a key-value pair with no predefined name, type, or namespace.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.inner.get_tags()
    }
    /// <p>The time zone to use for the Autonomous VM cluster.</p>
    pub fn time_zone(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.time_zone(input.into());
        self
    }
    /// <p>The time zone to use for the Autonomous VM cluster.</p>
    pub fn set_time_zone(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_time_zone(input);
        self
    }
    /// <p>The time zone to use for the Autonomous VM cluster.</p>
    pub fn get_time_zone(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_time_zone()
    }
    /// <p>The total number of Autonomous CDBs that you can create in the Autonomous VM cluster.</p>
    pub fn total_container_databases(mut self, input: i32) -> Self {
        self.inner = self.inner.total_container_databases(input);
        self
    }
    /// <p>The total number of Autonomous CDBs that you can create in the Autonomous VM cluster.</p>
    pub fn set_total_container_databases(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_total_container_databases(input);
        self
    }
    /// <p>The total number of Autonomous CDBs that you can create in the Autonomous VM cluster.</p>
    pub fn get_total_container_databases(&self) -> &::std::option::Option<i32> {
        self.inner.get_total_container_databases()
    }
}
