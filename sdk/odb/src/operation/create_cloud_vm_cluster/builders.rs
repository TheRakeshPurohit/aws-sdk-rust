// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_cloud_vm_cluster::_create_cloud_vm_cluster_output::CreateCloudVmClusterOutputBuilder;

pub use crate::operation::create_cloud_vm_cluster::_create_cloud_vm_cluster_input::CreateCloudVmClusterInputBuilder;

impl crate::operation::create_cloud_vm_cluster::builders::CreateCloudVmClusterInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_cloud_vm_cluster::CreateCloudVmClusterOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_cloud_vm_cluster::CreateCloudVmClusterError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_cloud_vm_cluster();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateCloudVmCluster`.
///
/// <p>Creates a VM cluster on the specified Exadata infrastructure.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateCloudVmClusterFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_cloud_vm_cluster::builders::CreateCloudVmClusterInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_cloud_vm_cluster::CreateCloudVmClusterOutput,
        crate::operation::create_cloud_vm_cluster::CreateCloudVmClusterError,
    > for CreateCloudVmClusterFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_cloud_vm_cluster::CreateCloudVmClusterOutput,
            crate::operation::create_cloud_vm_cluster::CreateCloudVmClusterError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreateCloudVmClusterFluentBuilder {
    /// Creates a new `CreateCloudVmClusterFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateCloudVmCluster as a reference.
    pub fn as_input(&self) -> &crate::operation::create_cloud_vm_cluster::builders::CreateCloudVmClusterInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_cloud_vm_cluster::CreateCloudVmClusterOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_cloud_vm_cluster::CreateCloudVmClusterError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_cloud_vm_cluster::CreateCloudVmCluster::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_cloud_vm_cluster::CreateCloudVmCluster::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_cloud_vm_cluster::CreateCloudVmClusterOutput,
        crate::operation::create_cloud_vm_cluster::CreateCloudVmClusterError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The unique identifier of the Exadata infrastructure for this VM cluster.</p>
    pub fn cloud_exadata_infrastructure_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.cloud_exadata_infrastructure_id(input.into());
        self
    }
    /// <p>The unique identifier of the Exadata infrastructure for this VM cluster.</p>
    pub fn set_cloud_exadata_infrastructure_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_cloud_exadata_infrastructure_id(input);
        self
    }
    /// <p>The unique identifier of the Exadata infrastructure for this VM cluster.</p>
    pub fn get_cloud_exadata_infrastructure_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_cloud_exadata_infrastructure_id()
    }
    /// <p>The number of CPU cores to enable on the VM cluster.</p>
    pub fn cpu_core_count(mut self, input: i32) -> Self {
        self.inner = self.inner.cpu_core_count(input);
        self
    }
    /// <p>The number of CPU cores to enable on the VM cluster.</p>
    pub fn set_cpu_core_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_cpu_core_count(input);
        self
    }
    /// <p>The number of CPU cores to enable on the VM cluster.</p>
    pub fn get_cpu_core_count(&self) -> &::std::option::Option<i32> {
        self.inner.get_cpu_core_count()
    }
    /// <p>A user-friendly name for the VM cluster.</p>
    pub fn display_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.display_name(input.into());
        self
    }
    /// <p>A user-friendly name for the VM cluster.</p>
    pub fn set_display_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_display_name(input);
        self
    }
    /// <p>A user-friendly name for the VM cluster.</p>
    pub fn get_display_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_display_name()
    }
    /// <p>A valid software version of Oracle Grid Infrastructure (GI). To get the list of valid values, use the <code>ListGiVersions</code> operation and specify the shape of the Exadata infrastructure.</p>
    /// <p>Example: <code>19.0.0.0</code></p>
    pub fn gi_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.gi_version(input.into());
        self
    }
    /// <p>A valid software version of Oracle Grid Infrastructure (GI). To get the list of valid values, use the <code>ListGiVersions</code> operation and specify the shape of the Exadata infrastructure.</p>
    /// <p>Example: <code>19.0.0.0</code></p>
    pub fn set_gi_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_gi_version(input);
        self
    }
    /// <p>A valid software version of Oracle Grid Infrastructure (GI). To get the list of valid values, use the <code>ListGiVersions</code> operation and specify the shape of the Exadata infrastructure.</p>
    /// <p>Example: <code>19.0.0.0</code></p>
    pub fn get_gi_version(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_gi_version()
    }
    /// <p>The host name for the VM cluster.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Can't be "localhost" or "hostname".</p></li>
    /// <li>
    /// <p>Can't contain "-version".</p></li>
    /// <li>
    /// <p>The maximum length of the combined hostname and domain is 63 characters.</p></li>
    /// <li>
    /// <p>The hostname must be unique within the subnet.</p></li>
    /// </ul>
    pub fn hostname(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.hostname(input.into());
        self
    }
    /// <p>The host name for the VM cluster.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Can't be "localhost" or "hostname".</p></li>
    /// <li>
    /// <p>Can't contain "-version".</p></li>
    /// <li>
    /// <p>The maximum length of the combined hostname and domain is 63 characters.</p></li>
    /// <li>
    /// <p>The hostname must be unique within the subnet.</p></li>
    /// </ul>
    pub fn set_hostname(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_hostname(input);
        self
    }
    /// <p>The host name for the VM cluster.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Can't be "localhost" or "hostname".</p></li>
    /// <li>
    /// <p>Can't contain "-version".</p></li>
    /// <li>
    /// <p>The maximum length of the combined hostname and domain is 63 characters.</p></li>
    /// <li>
    /// <p>The hostname must be unique within the subnet.</p></li>
    /// </ul>
    pub fn get_hostname(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_hostname()
    }
    ///
    /// Appends an item to `sshPublicKeys`.
    ///
    /// To override the contents of this collection use [`set_ssh_public_keys`](Self::set_ssh_public_keys).
    ///
    /// <p>The public key portion of one or more key pairs used for SSH access to the VM cluster.</p>
    pub fn ssh_public_keys(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.ssh_public_keys(input.into());
        self
    }
    /// <p>The public key portion of one or more key pairs used for SSH access to the VM cluster.</p>
    pub fn set_ssh_public_keys(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_ssh_public_keys(input);
        self
    }
    /// <p>The public key portion of one or more key pairs used for SSH access to the VM cluster.</p>
    pub fn get_ssh_public_keys(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_ssh_public_keys()
    }
    /// <p>The unique identifier of the ODB network for the VM cluster.</p>
    pub fn odb_network_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.odb_network_id(input.into());
        self
    }
    /// <p>The unique identifier of the ODB network for the VM cluster.</p>
    pub fn set_odb_network_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_odb_network_id(input);
        self
    }
    /// <p>The unique identifier of the ODB network for the VM cluster.</p>
    pub fn get_odb_network_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_odb_network_id()
    }
    /// <p>A name for the Grid Infrastructure cluster. The name isn't case sensitive.</p>
    pub fn cluster_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.cluster_name(input.into());
        self
    }
    /// <p>A name for the Grid Infrastructure cluster. The name isn't case sensitive.</p>
    pub fn set_cluster_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_cluster_name(input);
        self
    }
    /// <p>A name for the Grid Infrastructure cluster. The name isn't case sensitive.</p>
    pub fn get_cluster_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_cluster_name()
    }
    /// <p>The set of preferences for the various diagnostic collection options for the VM cluster.</p>
    pub fn data_collection_options(mut self, input: crate::types::DataCollectionOptions) -> Self {
        self.inner = self.inner.data_collection_options(input);
        self
    }
    /// <p>The set of preferences for the various diagnostic collection options for the VM cluster.</p>
    pub fn set_data_collection_options(mut self, input: ::std::option::Option<crate::types::DataCollectionOptions>) -> Self {
        self.inner = self.inner.set_data_collection_options(input);
        self
    }
    /// <p>The set of preferences for the various diagnostic collection options for the VM cluster.</p>
    pub fn get_data_collection_options(&self) -> &::std::option::Option<crate::types::DataCollectionOptions> {
        self.inner.get_data_collection_options()
    }
    /// <p>The size of the data disk group, in terabytes (TBs), to allocate for the VM cluster.</p>
    pub fn data_storage_size_in_tbs(mut self, input: f64) -> Self {
        self.inner = self.inner.data_storage_size_in_tbs(input);
        self
    }
    /// <p>The size of the data disk group, in terabytes (TBs), to allocate for the VM cluster.</p>
    pub fn set_data_storage_size_in_tbs(mut self, input: ::std::option::Option<f64>) -> Self {
        self.inner = self.inner.set_data_storage_size_in_tbs(input);
        self
    }
    /// <p>The size of the data disk group, in terabytes (TBs), to allocate for the VM cluster.</p>
    pub fn get_data_storage_size_in_tbs(&self) -> &::std::option::Option<f64> {
        self.inner.get_data_storage_size_in_tbs()
    }
    /// <p>The amount of local node storage, in gigabytes (GBs), to allocate for the VM cluster.</p>
    pub fn db_node_storage_size_in_gbs(mut self, input: i32) -> Self {
        self.inner = self.inner.db_node_storage_size_in_gbs(input);
        self
    }
    /// <p>The amount of local node storage, in gigabytes (GBs), to allocate for the VM cluster.</p>
    pub fn set_db_node_storage_size_in_gbs(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_db_node_storage_size_in_gbs(input);
        self
    }
    /// <p>The amount of local node storage, in gigabytes (GBs), to allocate for the VM cluster.</p>
    pub fn get_db_node_storage_size_in_gbs(&self) -> &::std::option::Option<i32> {
        self.inner.get_db_node_storage_size_in_gbs()
    }
    ///
    /// Appends an item to `dbServers`.
    ///
    /// To override the contents of this collection use [`set_db_servers`](Self::set_db_servers).
    ///
    /// <p>The list of database servers for the VM cluster.</p>
    pub fn db_servers(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.db_servers(input.into());
        self
    }
    /// <p>The list of database servers for the VM cluster.</p>
    pub fn set_db_servers(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_db_servers(input);
        self
    }
    /// <p>The list of database servers for the VM cluster.</p>
    pub fn get_db_servers(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_db_servers()
    }
    ///
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The list of resource tags to apply to the VM cluster.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.tags(k.into(), v.into());
        self
    }
    /// <p>The list of resource tags to apply to the VM cluster.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>The list of resource tags to apply to the VM cluster.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.inner.get_tags()
    }
    /// <p>Specifies whether to enable database backups to local Exadata storage for the VM cluster.</p>
    pub fn is_local_backup_enabled(mut self, input: bool) -> Self {
        self.inner = self.inner.is_local_backup_enabled(input);
        self
    }
    /// <p>Specifies whether to enable database backups to local Exadata storage for the VM cluster.</p>
    pub fn set_is_local_backup_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_is_local_backup_enabled(input);
        self
    }
    /// <p>Specifies whether to enable database backups to local Exadata storage for the VM cluster.</p>
    pub fn get_is_local_backup_enabled(&self) -> &::std::option::Option<bool> {
        self.inner.get_is_local_backup_enabled()
    }
    /// <p>Specifies whether to create a sparse disk group for the VM cluster.</p>
    pub fn is_sparse_diskgroup_enabled(mut self, input: bool) -> Self {
        self.inner = self.inner.is_sparse_diskgroup_enabled(input);
        self
    }
    /// <p>Specifies whether to create a sparse disk group for the VM cluster.</p>
    pub fn set_is_sparse_diskgroup_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_is_sparse_diskgroup_enabled(input);
        self
    }
    /// <p>Specifies whether to create a sparse disk group for the VM cluster.</p>
    pub fn get_is_sparse_diskgroup_enabled(&self) -> &::std::option::Option<bool> {
        self.inner.get_is_sparse_diskgroup_enabled()
    }
    /// <p>The Oracle license model to apply to the VM cluster.</p>
    /// <p>Default: <code>LICENSE_INCLUDED</code></p>
    pub fn license_model(mut self, input: crate::types::LicenseModel) -> Self {
        self.inner = self.inner.license_model(input);
        self
    }
    /// <p>The Oracle license model to apply to the VM cluster.</p>
    /// <p>Default: <code>LICENSE_INCLUDED</code></p>
    pub fn set_license_model(mut self, input: ::std::option::Option<crate::types::LicenseModel>) -> Self {
        self.inner = self.inner.set_license_model(input);
        self
    }
    /// <p>The Oracle license model to apply to the VM cluster.</p>
    /// <p>Default: <code>LICENSE_INCLUDED</code></p>
    pub fn get_license_model(&self) -> &::std::option::Option<crate::types::LicenseModel> {
        self.inner.get_license_model()
    }
    /// <p>The amount of memory, in gigabytes (GBs), to allocate for the VM cluster.</p>
    pub fn memory_size_in_gbs(mut self, input: i32) -> Self {
        self.inner = self.inner.memory_size_in_gbs(input);
        self
    }
    /// <p>The amount of memory, in gigabytes (GBs), to allocate for the VM cluster.</p>
    pub fn set_memory_size_in_gbs(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_memory_size_in_gbs(input);
        self
    }
    /// <p>The amount of memory, in gigabytes (GBs), to allocate for the VM cluster.</p>
    pub fn get_memory_size_in_gbs(&self) -> &::std::option::Option<i32> {
        self.inner.get_memory_size_in_gbs()
    }
    /// <p>The version of the operating system of the image for the VM cluster.</p>
    pub fn system_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.system_version(input.into());
        self
    }
    /// <p>The version of the operating system of the image for the VM cluster.</p>
    pub fn set_system_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_system_version(input);
        self
    }
    /// <p>The version of the operating system of the image for the VM cluster.</p>
    pub fn get_system_version(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_system_version()
    }
    /// <p>The time zone for the VM cluster. For a list of valid values for time zone, you can check the options in the console.</p>
    /// <p>Default: UTC</p>
    pub fn time_zone(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.time_zone(input.into());
        self
    }
    /// <p>The time zone for the VM cluster. For a list of valid values for time zone, you can check the options in the console.</p>
    /// <p>Default: UTC</p>
    pub fn set_time_zone(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_time_zone(input);
        self
    }
    /// <p>The time zone for the VM cluster. For a list of valid values for time zone, you can check the options in the console.</p>
    /// <p>Default: UTC</p>
    pub fn get_time_zone(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_time_zone()
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you don't specify a client token, the Amazon Web Services SDK automatically generates a client token and uses it for the request to ensure idempotency. The client token is valid for up to 24 hours after it's first used.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you don't specify a client token, the Amazon Web Services SDK automatically generates a client token and uses it for the request to ensure idempotency. The client token is valid for up to 24 hours after it's first used.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you don't specify a client token, the Amazon Web Services SDK automatically generates a client token and uses it for the request to ensure idempotency. The client token is valid for up to 24 hours after it's first used.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_client_token()
    }
    /// <p>The port number for TCP connections to the single client access name (SCAN) listener.</p>
    /// <p>Valid values: <code>1024–8999</code> with the following exceptions: <code>2484</code>, <code>6100</code>, <code>6200</code>, <code>7060</code>, <code>7070</code>, <code>7085</code>, and <code>7879</code></p>
    /// <p>Default: <code>1521</code></p>
    pub fn scan_listener_port_tcp(mut self, input: i32) -> Self {
        self.inner = self.inner.scan_listener_port_tcp(input);
        self
    }
    /// <p>The port number for TCP connections to the single client access name (SCAN) listener.</p>
    /// <p>Valid values: <code>1024–8999</code> with the following exceptions: <code>2484</code>, <code>6100</code>, <code>6200</code>, <code>7060</code>, <code>7070</code>, <code>7085</code>, and <code>7879</code></p>
    /// <p>Default: <code>1521</code></p>
    pub fn set_scan_listener_port_tcp(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_scan_listener_port_tcp(input);
        self
    }
    /// <p>The port number for TCP connections to the single client access name (SCAN) listener.</p>
    /// <p>Valid values: <code>1024–8999</code> with the following exceptions: <code>2484</code>, <code>6100</code>, <code>6200</code>, <code>7060</code>, <code>7070</code>, <code>7085</code>, and <code>7879</code></p>
    /// <p>Default: <code>1521</code></p>
    pub fn get_scan_listener_port_tcp(&self) -> &::std::option::Option<i32> {
        self.inner.get_scan_listener_port_tcp()
    }
}
