// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_odb_network::_create_odb_network_output::CreateOdbNetworkOutputBuilder;

pub use crate::operation::create_odb_network::_create_odb_network_input::CreateOdbNetworkInputBuilder;

impl crate::operation::create_odb_network::builders::CreateOdbNetworkInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_odb_network::CreateOdbNetworkOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_odb_network::CreateOdbNetworkError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_odb_network();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateOdbNetwork`.
///
/// <p>Creates an ODB network.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateOdbNetworkFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_odb_network::builders::CreateOdbNetworkInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_odb_network::CreateOdbNetworkOutput,
        crate::operation::create_odb_network::CreateOdbNetworkError,
    > for CreateOdbNetworkFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_odb_network::CreateOdbNetworkOutput,
            crate::operation::create_odb_network::CreateOdbNetworkError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreateOdbNetworkFluentBuilder {
    /// Creates a new `CreateOdbNetworkFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateOdbNetwork as a reference.
    pub fn as_input(&self) -> &crate::operation::create_odb_network::builders::CreateOdbNetworkInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_odb_network::CreateOdbNetworkOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_odb_network::CreateOdbNetworkError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_odb_network::CreateOdbNetwork::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_odb_network::CreateOdbNetwork::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_odb_network::CreateOdbNetworkOutput,
        crate::operation::create_odb_network::CreateOdbNetworkError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>A user-friendly name for the ODB network.</p>
    pub fn display_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.display_name(input.into());
        self
    }
    /// <p>A user-friendly name for the ODB network.</p>
    pub fn set_display_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_display_name(input);
        self
    }
    /// <p>A user-friendly name for the ODB network.</p>
    pub fn get_display_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_display_name()
    }
    /// <p>The Amazon Web Services Availability Zone (AZ) where the ODB network is located.</p>
    /// <p>This operation requires that you specify a value for either <code>availabilityZone</code> or <code>availabilityZoneId</code>.</p>
    pub fn availability_zone(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.availability_zone(input.into());
        self
    }
    /// <p>The Amazon Web Services Availability Zone (AZ) where the ODB network is located.</p>
    /// <p>This operation requires that you specify a value for either <code>availabilityZone</code> or <code>availabilityZoneId</code>.</p>
    pub fn set_availability_zone(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_availability_zone(input);
        self
    }
    /// <p>The Amazon Web Services Availability Zone (AZ) where the ODB network is located.</p>
    /// <p>This operation requires that you specify a value for either <code>availabilityZone</code> or <code>availabilityZoneId</code>.</p>
    pub fn get_availability_zone(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_availability_zone()
    }
    /// <p>The AZ ID of the AZ where the ODB network is located.</p>
    /// <p>This operation requires that you specify a value for either <code>availabilityZone</code> or <code>availabilityZoneId</code>.</p>
    pub fn availability_zone_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.availability_zone_id(input.into());
        self
    }
    /// <p>The AZ ID of the AZ where the ODB network is located.</p>
    /// <p>This operation requires that you specify a value for either <code>availabilityZone</code> or <code>availabilityZoneId</code>.</p>
    pub fn set_availability_zone_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_availability_zone_id(input);
        self
    }
    /// <p>The AZ ID of the AZ where the ODB network is located.</p>
    /// <p>This operation requires that you specify a value for either <code>availabilityZone</code> or <code>availabilityZoneId</code>.</p>
    pub fn get_availability_zone_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_availability_zone_id()
    }
    /// <p>The CIDR range of the client subnet for the ODB network.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must not overlap with the CIDR range of the backup subnet.</p></li>
    /// <li>
    /// <p>Must not overlap with the CIDR ranges of the VPCs that are connected to the ODB network.</p></li>
    /// <li>
    /// <p>Must not use the following CIDR ranges that are reserved by OCI:</p>
    /// <ul>
    /// <li>
    /// <p><code>100.106.0.0/16</code> and <code>100.107.0.0/16</code></p></li>
    /// <li>
    /// <p><code>169.254.0.0/16</code></p></li>
    /// <li>
    /// <p><code>224.0.0.0 - 239.255.255.255</code></p></li>
    /// <li>
    /// <p><code>240.0.0.0 - 255.255.255.255</code></p></li>
    /// </ul></li>
    /// </ul>
    pub fn client_subnet_cidr(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.client_subnet_cidr(input.into());
        self
    }
    /// <p>The CIDR range of the client subnet for the ODB network.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must not overlap with the CIDR range of the backup subnet.</p></li>
    /// <li>
    /// <p>Must not overlap with the CIDR ranges of the VPCs that are connected to the ODB network.</p></li>
    /// <li>
    /// <p>Must not use the following CIDR ranges that are reserved by OCI:</p>
    /// <ul>
    /// <li>
    /// <p><code>100.106.0.0/16</code> and <code>100.107.0.0/16</code></p></li>
    /// <li>
    /// <p><code>169.254.0.0/16</code></p></li>
    /// <li>
    /// <p><code>224.0.0.0 - 239.255.255.255</code></p></li>
    /// <li>
    /// <p><code>240.0.0.0 - 255.255.255.255</code></p></li>
    /// </ul></li>
    /// </ul>
    pub fn set_client_subnet_cidr(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_client_subnet_cidr(input);
        self
    }
    /// <p>The CIDR range of the client subnet for the ODB network.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must not overlap with the CIDR range of the backup subnet.</p></li>
    /// <li>
    /// <p>Must not overlap with the CIDR ranges of the VPCs that are connected to the ODB network.</p></li>
    /// <li>
    /// <p>Must not use the following CIDR ranges that are reserved by OCI:</p>
    /// <ul>
    /// <li>
    /// <p><code>100.106.0.0/16</code> and <code>100.107.0.0/16</code></p></li>
    /// <li>
    /// <p><code>169.254.0.0/16</code></p></li>
    /// <li>
    /// <p><code>224.0.0.0 - 239.255.255.255</code></p></li>
    /// <li>
    /// <p><code>240.0.0.0 - 255.255.255.255</code></p></li>
    /// </ul></li>
    /// </ul>
    pub fn get_client_subnet_cidr(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_client_subnet_cidr()
    }
    /// <p>The CIDR range of the backup subnet for the ODB network.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must not overlap with the CIDR range of the client subnet.</p></li>
    /// <li>
    /// <p>Must not overlap with the CIDR ranges of the VPCs that are connected to the ODB network.</p></li>
    /// <li>
    /// <p>Must not use the following CIDR ranges that are reserved by OCI:</p>
    /// <ul>
    /// <li>
    /// <p><code>100.106.0.0/16</code> and <code>100.107.0.0/16</code></p></li>
    /// <li>
    /// <p><code>169.254.0.0/16</code></p></li>
    /// <li>
    /// <p><code>224.0.0.0 - 239.255.255.255</code></p></li>
    /// <li>
    /// <p><code>240.0.0.0 - 255.255.255.255</code></p></li>
    /// </ul></li>
    /// </ul>
    pub fn backup_subnet_cidr(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.backup_subnet_cidr(input.into());
        self
    }
    /// <p>The CIDR range of the backup subnet for the ODB network.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must not overlap with the CIDR range of the client subnet.</p></li>
    /// <li>
    /// <p>Must not overlap with the CIDR ranges of the VPCs that are connected to the ODB network.</p></li>
    /// <li>
    /// <p>Must not use the following CIDR ranges that are reserved by OCI:</p>
    /// <ul>
    /// <li>
    /// <p><code>100.106.0.0/16</code> and <code>100.107.0.0/16</code></p></li>
    /// <li>
    /// <p><code>169.254.0.0/16</code></p></li>
    /// <li>
    /// <p><code>224.0.0.0 - 239.255.255.255</code></p></li>
    /// <li>
    /// <p><code>240.0.0.0 - 255.255.255.255</code></p></li>
    /// </ul></li>
    /// </ul>
    pub fn set_backup_subnet_cidr(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_backup_subnet_cidr(input);
        self
    }
    /// <p>The CIDR range of the backup subnet for the ODB network.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must not overlap with the CIDR range of the client subnet.</p></li>
    /// <li>
    /// <p>Must not overlap with the CIDR ranges of the VPCs that are connected to the ODB network.</p></li>
    /// <li>
    /// <p>Must not use the following CIDR ranges that are reserved by OCI:</p>
    /// <ul>
    /// <li>
    /// <p><code>100.106.0.0/16</code> and <code>100.107.0.0/16</code></p></li>
    /// <li>
    /// <p><code>169.254.0.0/16</code></p></li>
    /// <li>
    /// <p><code>224.0.0.0 - 239.255.255.255</code></p></li>
    /// <li>
    /// <p><code>240.0.0.0 - 255.255.255.255</code></p></li>
    /// </ul></li>
    /// </ul>
    pub fn get_backup_subnet_cidr(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_backup_subnet_cidr()
    }
    /// <p>The domain name to use for the resources in the ODB network.</p>
    pub fn custom_domain_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.custom_domain_name(input.into());
        self
    }
    /// <p>The domain name to use for the resources in the ODB network.</p>
    pub fn set_custom_domain_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_custom_domain_name(input);
        self
    }
    /// <p>The domain name to use for the resources in the ODB network.</p>
    pub fn get_custom_domain_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_custom_domain_name()
    }
    /// <p>The DNS prefix to the default DNS domain name. The default DNS domain name is oraclevcn.com.</p>
    pub fn default_dns_prefix(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.default_dns_prefix(input.into());
        self
    }
    /// <p>The DNS prefix to the default DNS domain name. The default DNS domain name is oraclevcn.com.</p>
    pub fn set_default_dns_prefix(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_default_dns_prefix(input);
        self
    }
    /// <p>The DNS prefix to the default DNS domain name. The default DNS domain name is oraclevcn.com.</p>
    pub fn get_default_dns_prefix(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_default_dns_prefix()
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you don't specify a client token, the Amazon Web Services SDK automatically generates a client token and uses it for the request to ensure idempotency. The client token is valid for up to 24 hours after it's first used.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you don't specify a client token, the Amazon Web Services SDK automatically generates a client token and uses it for the request to ensure idempotency. The client token is valid for up to 24 hours after it's first used.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you don't specify a client token, the Amazon Web Services SDK automatically generates a client token and uses it for the request to ensure idempotency. The client token is valid for up to 24 hours after it's first used.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_client_token()
    }
    /// <p>Specifies the configuration for Amazon S3 access from the ODB network.</p>
    pub fn s3_access(mut self, input: crate::types::Access) -> Self {
        self.inner = self.inner.s3_access(input);
        self
    }
    /// <p>Specifies the configuration for Amazon S3 access from the ODB network.</p>
    pub fn set_s3_access(mut self, input: ::std::option::Option<crate::types::Access>) -> Self {
        self.inner = self.inner.set_s3_access(input);
        self
    }
    /// <p>Specifies the configuration for Amazon S3 access from the ODB network.</p>
    pub fn get_s3_access(&self) -> &::std::option::Option<crate::types::Access> {
        self.inner.get_s3_access()
    }
    /// <p>Specifies the configuration for Zero-ETL access from the ODB network.</p>
    pub fn zero_etl_access(mut self, input: crate::types::Access) -> Self {
        self.inner = self.inner.zero_etl_access(input);
        self
    }
    /// <p>Specifies the configuration for Zero-ETL access from the ODB network.</p>
    pub fn set_zero_etl_access(mut self, input: ::std::option::Option<crate::types::Access>) -> Self {
        self.inner = self.inner.set_zero_etl_access(input);
        self
    }
    /// <p>Specifies the configuration for Zero-ETL access from the ODB network.</p>
    pub fn get_zero_etl_access(&self) -> &::std::option::Option<crate::types::Access> {
        self.inner.get_zero_etl_access()
    }
    /// <p>Specifies the endpoint policy for Amazon S3 access from the ODB network.</p>
    pub fn s3_policy_document(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.s3_policy_document(input.into());
        self
    }
    /// <p>Specifies the endpoint policy for Amazon S3 access from the ODB network.</p>
    pub fn set_s3_policy_document(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_s3_policy_document(input);
        self
    }
    /// <p>Specifies the endpoint policy for Amazon S3 access from the ODB network.</p>
    pub fn get_s3_policy_document(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_s3_policy_document()
    }
    ///
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The list of resource tags to apply to the ODB network.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.tags(k.into(), v.into());
        self
    }
    /// <p>The list of resource tags to apply to the ODB network.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>The list of resource tags to apply to the ODB network.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.inner.get_tags()
    }
}
