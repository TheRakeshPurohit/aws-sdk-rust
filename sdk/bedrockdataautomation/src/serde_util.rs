// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn create_blueprint_output_output_correct_errors(
    mut builder: crate::operation::create_blueprint::builders::CreateBlueprintOutputBuilder,
) -> crate::operation::create_blueprint::builders::CreateBlueprintOutputBuilder {
    if builder.blueprint.is_none() {
        builder.blueprint = {
            let builder = crate::types::builders::BlueprintBuilder::default();
            crate::serde_util::blueprint_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn create_blueprint_version_output_output_correct_errors(
    mut builder: crate::operation::create_blueprint_version::builders::CreateBlueprintVersionOutputBuilder,
) -> crate::operation::create_blueprint_version::builders::CreateBlueprintVersionOutputBuilder {
    if builder.blueprint.is_none() {
        builder.blueprint = {
            let builder = crate::types::builders::BlueprintBuilder::default();
            crate::serde_util::blueprint_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn create_data_automation_project_output_output_correct_errors(
    mut builder: crate::operation::create_data_automation_project::builders::CreateDataAutomationProjectOutputBuilder,
) -> crate::operation::create_data_automation_project::builders::CreateDataAutomationProjectOutputBuilder {
    if builder.project_arn.is_none() {
        builder.project_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn delete_data_automation_project_output_output_correct_errors(
    mut builder: crate::operation::delete_data_automation_project::builders::DeleteDataAutomationProjectOutputBuilder,
) -> crate::operation::delete_data_automation_project::builders::DeleteDataAutomationProjectOutputBuilder {
    if builder.project_arn.is_none() {
        builder.project_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn get_blueprint_output_output_correct_errors(
    mut builder: crate::operation::get_blueprint::builders::GetBlueprintOutputBuilder,
) -> crate::operation::get_blueprint::builders::GetBlueprintOutputBuilder {
    if builder.blueprint.is_none() {
        builder.blueprint = {
            let builder = crate::types::builders::BlueprintBuilder::default();
            crate::serde_util::blueprint_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_data_automation_project_output_output_correct_errors(
    mut builder: crate::operation::get_data_automation_project::builders::GetDataAutomationProjectOutputBuilder,
) -> crate::operation::get_data_automation_project::builders::GetDataAutomationProjectOutputBuilder {
    if builder.project.is_none() {
        builder.project = {
            let builder = crate::types::builders::DataAutomationProjectBuilder::default();
            crate::serde_util::data_automation_project_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn list_blueprints_output_output_correct_errors(
    mut builder: crate::operation::list_blueprints::builders::ListBlueprintsOutputBuilder,
) -> crate::operation::list_blueprints::builders::ListBlueprintsOutputBuilder {
    if builder.blueprints.is_none() {
        builder.blueprints = Some(Default::default())
    }
    builder
}

pub(crate) fn list_data_automation_projects_output_output_correct_errors(
    mut builder: crate::operation::list_data_automation_projects::builders::ListDataAutomationProjectsOutputBuilder,
) -> crate::operation::list_data_automation_projects::builders::ListDataAutomationProjectsOutputBuilder {
    if builder.projects.is_none() {
        builder.projects = Some(Default::default())
    }
    builder
}

pub(crate) fn update_blueprint_output_output_correct_errors(
    mut builder: crate::operation::update_blueprint::builders::UpdateBlueprintOutputBuilder,
) -> crate::operation::update_blueprint::builders::UpdateBlueprintOutputBuilder {
    if builder.blueprint.is_none() {
        builder.blueprint = {
            let builder = crate::types::builders::BlueprintBuilder::default();
            crate::serde_util::blueprint_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn update_data_automation_project_output_output_correct_errors(
    mut builder: crate::operation::update_data_automation_project::builders::UpdateDataAutomationProjectOutputBuilder,
) -> crate::operation::update_data_automation_project::builders::UpdateDataAutomationProjectOutputBuilder {
    if builder.project_arn.is_none() {
        builder.project_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn blueprint_correct_errors(mut builder: crate::types::builders::BlueprintBuilder) -> crate::types::builders::BlueprintBuilder {
    if builder.blueprint_arn.is_none() {
        builder.blueprint_arn = Some(Default::default())
    }
    if builder.schema.is_none() {
        builder.schema = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::Type>().ok()
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_modified_time.is_none() {
        builder.last_modified_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.blueprint_name.is_none() {
        builder.blueprint_name = Some(Default::default())
    }
    builder
}

pub(crate) fn data_automation_project_correct_errors(
    mut builder: crate::types::builders::DataAutomationProjectBuilder,
) -> crate::types::builders::DataAutomationProjectBuilder {
    if builder.project_arn.is_none() {
        builder.project_arn = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_modified_time.is_none() {
        builder.last_modified_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.project_name.is_none() {
        builder.project_name = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::DataAutomationProjectStatus>().ok()
    }
    builder
}

pub(crate) fn blueprint_summary_correct_errors(
    mut builder: crate::types::builders::BlueprintSummaryBuilder,
) -> crate::types::builders::BlueprintSummaryBuilder {
    if builder.blueprint_arn.is_none() {
        builder.blueprint_arn = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn data_automation_project_summary_correct_errors(
    mut builder: crate::types::builders::DataAutomationProjectSummaryBuilder,
) -> crate::types::builders::DataAutomationProjectSummaryBuilder {
    if builder.project_arn.is_none() {
        builder.project_arn = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn tag_correct_errors(mut builder: crate::types::builders::TagBuilder) -> crate::types::builders::TagBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_field_correct_errors(
    mut builder: crate::types::builders::ValidationExceptionFieldBuilder,
) -> crate::types::builders::ValidationExceptionFieldBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn audio_standard_extraction_correct_errors(
    mut builder: crate::types::builders::AudioStandardExtractionBuilder,
) -> crate::types::builders::AudioStandardExtractionBuilder {
    if builder.category.is_none() {
        builder.category = {
            let builder = crate::types::builders::AudioExtractionCategoryBuilder::default();
            crate::serde_util::audio_extraction_category_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn audio_standard_generative_field_correct_errors(
    mut builder: crate::types::builders::AudioStandardGenerativeFieldBuilder,
) -> crate::types::builders::AudioStandardGenerativeFieldBuilder {
    if builder.state.is_none() {
        builder.state = "no value was set".parse::<crate::types::State>().ok()
    }
    builder
}

pub(crate) fn blueprint_item_correct_errors(
    mut builder: crate::types::builders::BlueprintItemBuilder,
) -> crate::types::builders::BlueprintItemBuilder {
    if builder.blueprint_arn.is_none() {
        builder.blueprint_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn document_output_format_correct_errors(
    mut builder: crate::types::builders::DocumentOutputFormatBuilder,
) -> crate::types::builders::DocumentOutputFormatBuilder {
    if builder.text_format.is_none() {
        builder.text_format = {
            let builder = crate::types::builders::DocumentOutputTextFormatBuilder::default();
            Some(builder.build())
        }
    }
    if builder.additional_file_format.is_none() {
        builder.additional_file_format = {
            let builder = crate::types::builders::DocumentOutputAdditionalFileFormatBuilder::default();
            crate::serde_util::document_output_additional_file_format_correct_errors(builder)
                .build()
                .ok()
        }
    }
    builder
}

pub(crate) fn document_standard_extraction_correct_errors(
    mut builder: crate::types::builders::DocumentStandardExtractionBuilder,
) -> crate::types::builders::DocumentStandardExtractionBuilder {
    if builder.granularity.is_none() {
        builder.granularity = {
            let builder = crate::types::builders::DocumentExtractionGranularityBuilder::default();
            Some(builder.build())
        }
    }
    if builder.bounding_box.is_none() {
        builder.bounding_box = {
            let builder = crate::types::builders::DocumentBoundingBoxBuilder::default();
            crate::serde_util::document_bounding_box_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn document_standard_generative_field_correct_errors(
    mut builder: crate::types::builders::DocumentStandardGenerativeFieldBuilder,
) -> crate::types::builders::DocumentStandardGenerativeFieldBuilder {
    if builder.state.is_none() {
        builder.state = "no value was set".parse::<crate::types::State>().ok()
    }
    builder
}

pub(crate) fn image_standard_extraction_correct_errors(
    mut builder: crate::types::builders::ImageStandardExtractionBuilder,
) -> crate::types::builders::ImageStandardExtractionBuilder {
    if builder.category.is_none() {
        builder.category = {
            let builder = crate::types::builders::ImageExtractionCategoryBuilder::default();
            crate::serde_util::image_extraction_category_correct_errors(builder).build().ok()
        }
    }
    if builder.bounding_box.is_none() {
        builder.bounding_box = {
            let builder = crate::types::builders::ImageBoundingBoxBuilder::default();
            crate::serde_util::image_bounding_box_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn image_standard_generative_field_correct_errors(
    mut builder: crate::types::builders::ImageStandardGenerativeFieldBuilder,
) -> crate::types::builders::ImageStandardGenerativeFieldBuilder {
    if builder.state.is_none() {
        builder.state = "no value was set".parse::<crate::types::State>().ok()
    }
    builder
}

pub(crate) fn video_standard_extraction_correct_errors(
    mut builder: crate::types::builders::VideoStandardExtractionBuilder,
) -> crate::types::builders::VideoStandardExtractionBuilder {
    if builder.category.is_none() {
        builder.category = {
            let builder = crate::types::builders::VideoExtractionCategoryBuilder::default();
            crate::serde_util::video_extraction_category_correct_errors(builder).build().ok()
        }
    }
    if builder.bounding_box.is_none() {
        builder.bounding_box = {
            let builder = crate::types::builders::VideoBoundingBoxBuilder::default();
            crate::serde_util::video_bounding_box_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn video_standard_generative_field_correct_errors(
    mut builder: crate::types::builders::VideoStandardGenerativeFieldBuilder,
) -> crate::types::builders::VideoStandardGenerativeFieldBuilder {
    if builder.state.is_none() {
        builder.state = "no value was set".parse::<crate::types::State>().ok()
    }
    builder
}

pub(crate) fn audio_extraction_category_correct_errors(
    mut builder: crate::types::builders::AudioExtractionCategoryBuilder,
) -> crate::types::builders::AudioExtractionCategoryBuilder {
    if builder.state.is_none() {
        builder.state = "no value was set".parse::<crate::types::State>().ok()
    }
    builder
}

pub(crate) fn document_bounding_box_correct_errors(
    mut builder: crate::types::builders::DocumentBoundingBoxBuilder,
) -> crate::types::builders::DocumentBoundingBoxBuilder {
    if builder.state.is_none() {
        builder.state = "no value was set".parse::<crate::types::State>().ok()
    }
    builder
}

pub(crate) fn document_output_additional_file_format_correct_errors(
    mut builder: crate::types::builders::DocumentOutputAdditionalFileFormatBuilder,
) -> crate::types::builders::DocumentOutputAdditionalFileFormatBuilder {
    if builder.state.is_none() {
        builder.state = "no value was set".parse::<crate::types::State>().ok()
    }
    builder
}

pub(crate) fn image_bounding_box_correct_errors(
    mut builder: crate::types::builders::ImageBoundingBoxBuilder,
) -> crate::types::builders::ImageBoundingBoxBuilder {
    if builder.state.is_none() {
        builder.state = "no value was set".parse::<crate::types::State>().ok()
    }
    builder
}

pub(crate) fn image_extraction_category_correct_errors(
    mut builder: crate::types::builders::ImageExtractionCategoryBuilder,
) -> crate::types::builders::ImageExtractionCategoryBuilder {
    if builder.state.is_none() {
        builder.state = "no value was set".parse::<crate::types::State>().ok()
    }
    builder
}

pub(crate) fn video_bounding_box_correct_errors(
    mut builder: crate::types::builders::VideoBoundingBoxBuilder,
) -> crate::types::builders::VideoBoundingBoxBuilder {
    if builder.state.is_none() {
        builder.state = "no value was set".parse::<crate::types::State>().ok()
    }
    builder
}

pub(crate) fn video_extraction_category_correct_errors(
    mut builder: crate::types::builders::VideoExtractionCategoryBuilder,
) -> crate::types::builders::VideoExtractionCategoryBuilder {
    if builder.state.is_none() {
        builder.state = "no value was set".parse::<crate::types::State>().ok()
    }
    builder
}

pub(crate) fn channel_labeling_configuration_correct_errors(
    mut builder: crate::types::builders::ChannelLabelingConfigurationBuilder,
) -> crate::types::builders::ChannelLabelingConfigurationBuilder {
    if builder.state.is_none() {
        builder.state = "no value was set".parse::<crate::types::State>().ok()
    }
    builder
}

pub(crate) fn speaker_labeling_configuration_correct_errors(
    mut builder: crate::types::builders::SpeakerLabelingConfigurationBuilder,
) -> crate::types::builders::SpeakerLabelingConfigurationBuilder {
    if builder.state.is_none() {
        builder.state = "no value was set".parse::<crate::types::State>().ok()
    }
    builder
}
