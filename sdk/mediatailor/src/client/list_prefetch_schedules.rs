// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ListPrefetchSchedules`](crate::operation::list_prefetch_schedules::builders::ListPrefetchSchedulesFluentBuilder) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::operation::list_prefetch_schedules::builders::ListPrefetchSchedulesFluentBuilder::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`max_results(i32)`](crate::operation::list_prefetch_schedules::builders::ListPrefetchSchedulesFluentBuilder::max_results) / [`set_max_results(Option<i32>)`](crate::operation::list_prefetch_schedules::builders::ListPrefetchSchedulesFluentBuilder::set_max_results):<br>required: **false**<br><p>The maximum number of prefetch schedules that you want MediaTailor to return in response to the current request. If there are more than <code>MaxResults</code> prefetch schedules, use the value of <code>NextToken</code> in the response to get the next page of results.</p> <p>The default value is 100. MediaTailor uses DynamoDB-based pagination, which means that a response might contain fewer than <code>MaxResults</code> items, including 0 items, even when more results are available. To retrieve all results, you must continue making requests using the <code>NextToken</code> value from each response until the response no longer includes a <code>NextToken</code> value.</p><br>
    ///   - [`next_token(impl Into<String>)`](crate::operation::list_prefetch_schedules::builders::ListPrefetchSchedulesFluentBuilder::next_token) / [`set_next_token(Option<String>)`](crate::operation::list_prefetch_schedules::builders::ListPrefetchSchedulesFluentBuilder::set_next_token):<br>required: **false**<br><p>Pagination token returned by the list request when results exceed the maximum allowed. Use the token to fetch the next page of results.</p> <p>For the first <code>ListPrefetchSchedules</code> request, omit this value. For subsequent requests, get the value of <code>NextToken</code> from the previous response and specify that value for <code>NextToken</code> in the request. Continue making requests until the response no longer includes a <code>NextToken</code> value, which indicates that all results have been retrieved.</p><br>
    ///   - [`playback_configuration_name(impl Into<String>)`](crate::operation::list_prefetch_schedules::builders::ListPrefetchSchedulesFluentBuilder::playback_configuration_name) / [`set_playback_configuration_name(Option<String>)`](crate::operation::list_prefetch_schedules::builders::ListPrefetchSchedulesFluentBuilder::set_playback_configuration_name):<br>required: **true**<br><p>Retrieves the prefetch schedule(s) for a specific playback configuration.</p><br>
    ///   - [`schedule_type(ListPrefetchScheduleType)`](crate::operation::list_prefetch_schedules::builders::ListPrefetchSchedulesFluentBuilder::schedule_type) / [`set_schedule_type(Option<ListPrefetchScheduleType>)`](crate::operation::list_prefetch_schedules::builders::ListPrefetchSchedulesFluentBuilder::set_schedule_type):<br>required: **false**<br><p>The type of prefetch schedules that you want to list. <code>SINGLE</code> indicates that you want to list the configured single prefetch schedules. <code>RECURRING</code> indicates that you want to list the configured recurring prefetch schedules. <code>ALL</code> indicates that you want to list all configured prefetch schedules.</p><br>
    ///   - [`stream_id(impl Into<String>)`](crate::operation::list_prefetch_schedules::builders::ListPrefetchSchedulesFluentBuilder::stream_id) / [`set_stream_id(Option<String>)`](crate::operation::list_prefetch_schedules::builders::ListPrefetchSchedulesFluentBuilder::set_stream_id):<br>required: **false**<br><p>An optional filtering parameter whereby MediaTailor filters the prefetch schedules to include only specific streams.</p><br>
    /// - On success, responds with [`ListPrefetchSchedulesOutput`](crate::operation::list_prefetch_schedules::ListPrefetchSchedulesOutput) with field(s):
    ///   - [`items(Option<Vec::<PrefetchSchedule>>)`](crate::operation::list_prefetch_schedules::ListPrefetchSchedulesOutput::items): <p>Lists the prefetch schedules. An empty <code>Items</code> list doesn't mean there aren't more items to fetch, just that that page was empty.</p>
    ///   - [`next_token(Option<String>)`](crate::operation::list_prefetch_schedules::ListPrefetchSchedulesOutput::next_token): <p>Pagination token returned by the list request when results exceed the maximum allowed. Use the token to fetch the next page of results.</p>
    /// - On failure, responds with [`SdkError<ListPrefetchSchedulesError>`](crate::operation::list_prefetch_schedules::ListPrefetchSchedulesError)
    pub fn list_prefetch_schedules(&self) -> crate::operation::list_prefetch_schedules::builders::ListPrefetchSchedulesFluentBuilder {
        crate::operation::list_prefetch_schedules::builders::ListPrefetchSchedulesFluentBuilder::new(self.handle.clone())
    }
}
