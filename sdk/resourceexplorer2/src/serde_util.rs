// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn validation_exception_correct_errors(
    mut builder: crate::types::error::builders::ValidationExceptionBuilder,
) -> crate::types::error::builders::ValidationExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn conflict_exception_correct_errors(
    mut builder: crate::types::error::builders::ConflictExceptionBuilder,
) -> crate::types::error::builders::ConflictExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn create_resource_explorer_setup_output_output_correct_errors(
    mut builder: crate::operation::create_resource_explorer_setup::builders::CreateResourceExplorerSetupOutputBuilder,
) -> crate::operation::create_resource_explorer_setup::builders::CreateResourceExplorerSetupOutputBuilder {
    if builder.task_id.is_none() {
        builder.task_id = Some(Default::default())
    }
    builder
}

pub(crate) fn service_quota_exceeded_exception_correct_errors(
    mut builder: crate::types::error::builders::ServiceQuotaExceededExceptionBuilder,
) -> crate::types::error::builders::ServiceQuotaExceededExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn delete_resource_explorer_setup_output_output_correct_errors(
    mut builder: crate::operation::delete_resource_explorer_setup::builders::DeleteResourceExplorerSetupOutputBuilder,
) -> crate::operation::delete_resource_explorer_setup::builders::DeleteResourceExplorerSetupOutputBuilder {
    if builder.task_id.is_none() {
        builder.task_id = Some(Default::default())
    }
    builder
}

pub(crate) fn get_service_view_output_output_correct_errors(
    mut builder: crate::operation::get_service_view::builders::GetServiceViewOutputBuilder,
) -> crate::operation::get_service_view::builders::GetServiceViewOutputBuilder {
    if builder.view.is_none() {
        builder.view = {
            let builder = crate::types::builders::ServiceViewBuilder::default();
            crate::serde_util::service_view_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn list_streaming_access_for_services_output_output_correct_errors(
    mut builder: crate::operation::list_streaming_access_for_services::builders::ListStreamingAccessForServicesOutputBuilder,
) -> crate::operation::list_streaming_access_for_services::builders::ListStreamingAccessForServicesOutputBuilder {
    if builder.streaming_access_for_services.is_none() {
        builder.streaming_access_for_services = Some(Default::default())
    }
    builder
}

pub(crate) fn service_view_correct_errors(mut builder: crate::types::builders::ServiceViewBuilder) -> crate::types::builders::ServiceViewBuilder {
    if builder.service_view_arn.is_none() {
        builder.service_view_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn org_configuration_correct_errors(
    mut builder: crate::types::builders::OrgConfigurationBuilder,
) -> crate::types::builders::OrgConfigurationBuilder {
    if builder.aws_service_access_status.is_none() {
        builder.aws_service_access_status = "no value was set".parse::<crate::types::AwsServiceAccessStatus>().ok()
    }
    builder
}

pub(crate) fn batch_get_view_error_correct_errors(
    mut builder: crate::types::builders::BatchGetViewErrorBuilder,
) -> crate::types::builders::BatchGetViewErrorBuilder {
    if builder.view_arn.is_none() {
        builder.view_arn = Some(Default::default())
    }
    if builder.error_message.is_none() {
        builder.error_message = Some(Default::default())
    }
    builder
}

pub(crate) fn search_filter_correct_errors(mut builder: crate::types::builders::SearchFilterBuilder) -> crate::types::builders::SearchFilterBuilder {
    if builder.filter_string.is_none() {
        builder.filter_string = Some(Default::default())
    }
    builder
}

pub(crate) fn streaming_access_details_correct_errors(
    mut builder: crate::types::builders::StreamingAccessDetailsBuilder,
) -> crate::types::builders::StreamingAccessDetailsBuilder {
    if builder.service_principal.is_none() {
        builder.service_principal = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn validation_exception_field_correct_errors(
    mut builder: crate::types::builders::ValidationExceptionFieldBuilder,
) -> crate::types::builders::ValidationExceptionFieldBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.validation_issue.is_none() {
        builder.validation_issue = Some(Default::default())
    }
    builder
}

pub(crate) fn included_property_correct_errors(
    mut builder: crate::types::builders::IncludedPropertyBuilder,
) -> crate::types::builders::IncludedPropertyBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}
