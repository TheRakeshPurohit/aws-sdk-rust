// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the status of a Resource Explorer index operation in a specific Region.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct IndexStatus {
    /// <p>The current status of the index operation. Valid values are <code>SUCCEEDED</code>, <code>FAILED</code>, <code>IN_PROGRESS</code>, or <code>SKIPPED</code>.</p>
    pub status: ::std::option::Option<crate::types::OperationStatus>,
    /// <p>An index is the data store used by Amazon Web Services Resource Explorer to hold information about your Amazon Web Services resources that the service discovers. Creating an index in an Amazon Web Services Region turns on Resource Explorer and lets it discover your resources.</p>
    /// <p>By default, an index is <i>local</i>, meaning that it contains information about resources in only the same Region as the index. However, you can promote the index of one Region in the account by calling <code>UpdateIndexType</code> to convert it into an aggregator index. The aggregator index receives a replicated copy of the index information from all other Regions where Resource Explorer is turned on. This allows search operations in that Region to return results from all Regions in the account.</p>
    pub index: ::std::option::Option<crate::types::Index>,
    /// <p>Details about any error that occurred during the index operation.</p>
    pub error_details: ::std::option::Option<crate::types::ErrorDetails>,
}
impl IndexStatus {
    /// <p>The current status of the index operation. Valid values are <code>SUCCEEDED</code>, <code>FAILED</code>, <code>IN_PROGRESS</code>, or <code>SKIPPED</code>.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::OperationStatus> {
        self.status.as_ref()
    }
    /// <p>An index is the data store used by Amazon Web Services Resource Explorer to hold information about your Amazon Web Services resources that the service discovers. Creating an index in an Amazon Web Services Region turns on Resource Explorer and lets it discover your resources.</p>
    /// <p>By default, an index is <i>local</i>, meaning that it contains information about resources in only the same Region as the index. However, you can promote the index of one Region in the account by calling <code>UpdateIndexType</code> to convert it into an aggregator index. The aggregator index receives a replicated copy of the index information from all other Regions where Resource Explorer is turned on. This allows search operations in that Region to return results from all Regions in the account.</p>
    pub fn index(&self) -> ::std::option::Option<&crate::types::Index> {
        self.index.as_ref()
    }
    /// <p>Details about any error that occurred during the index operation.</p>
    pub fn error_details(&self) -> ::std::option::Option<&crate::types::ErrorDetails> {
        self.error_details.as_ref()
    }
}
impl IndexStatus {
    /// Creates a new builder-style object to manufacture [`IndexStatus`](crate::types::IndexStatus).
    pub fn builder() -> crate::types::builders::IndexStatusBuilder {
        crate::types::builders::IndexStatusBuilder::default()
    }
}

/// A builder for [`IndexStatus`](crate::types::IndexStatus).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct IndexStatusBuilder {
    pub(crate) status: ::std::option::Option<crate::types::OperationStatus>,
    pub(crate) index: ::std::option::Option<crate::types::Index>,
    pub(crate) error_details: ::std::option::Option<crate::types::ErrorDetails>,
}
impl IndexStatusBuilder {
    /// <p>The current status of the index operation. Valid values are <code>SUCCEEDED</code>, <code>FAILED</code>, <code>IN_PROGRESS</code>, or <code>SKIPPED</code>.</p>
    pub fn status(mut self, input: crate::types::OperationStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the index operation. Valid values are <code>SUCCEEDED</code>, <code>FAILED</code>, <code>IN_PROGRESS</code>, or <code>SKIPPED</code>.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::OperationStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status of the index operation. Valid values are <code>SUCCEEDED</code>, <code>FAILED</code>, <code>IN_PROGRESS</code>, or <code>SKIPPED</code>.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::OperationStatus> {
        &self.status
    }
    /// <p>An index is the data store used by Amazon Web Services Resource Explorer to hold information about your Amazon Web Services resources that the service discovers. Creating an index in an Amazon Web Services Region turns on Resource Explorer and lets it discover your resources.</p>
    /// <p>By default, an index is <i>local</i>, meaning that it contains information about resources in only the same Region as the index. However, you can promote the index of one Region in the account by calling <code>UpdateIndexType</code> to convert it into an aggregator index. The aggregator index receives a replicated copy of the index information from all other Regions where Resource Explorer is turned on. This allows search operations in that Region to return results from all Regions in the account.</p>
    pub fn index(mut self, input: crate::types::Index) -> Self {
        self.index = ::std::option::Option::Some(input);
        self
    }
    /// <p>An index is the data store used by Amazon Web Services Resource Explorer to hold information about your Amazon Web Services resources that the service discovers. Creating an index in an Amazon Web Services Region turns on Resource Explorer and lets it discover your resources.</p>
    /// <p>By default, an index is <i>local</i>, meaning that it contains information about resources in only the same Region as the index. However, you can promote the index of one Region in the account by calling <code>UpdateIndexType</code> to convert it into an aggregator index. The aggregator index receives a replicated copy of the index information from all other Regions where Resource Explorer is turned on. This allows search operations in that Region to return results from all Regions in the account.</p>
    pub fn set_index(mut self, input: ::std::option::Option<crate::types::Index>) -> Self {
        self.index = input;
        self
    }
    /// <p>An index is the data store used by Amazon Web Services Resource Explorer to hold information about your Amazon Web Services resources that the service discovers. Creating an index in an Amazon Web Services Region turns on Resource Explorer and lets it discover your resources.</p>
    /// <p>By default, an index is <i>local</i>, meaning that it contains information about resources in only the same Region as the index. However, you can promote the index of one Region in the account by calling <code>UpdateIndexType</code> to convert it into an aggregator index. The aggregator index receives a replicated copy of the index information from all other Regions where Resource Explorer is turned on. This allows search operations in that Region to return results from all Regions in the account.</p>
    pub fn get_index(&self) -> &::std::option::Option<crate::types::Index> {
        &self.index
    }
    /// <p>Details about any error that occurred during the index operation.</p>
    pub fn error_details(mut self, input: crate::types::ErrorDetails) -> Self {
        self.error_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>Details about any error that occurred during the index operation.</p>
    pub fn set_error_details(mut self, input: ::std::option::Option<crate::types::ErrorDetails>) -> Self {
        self.error_details = input;
        self
    }
    /// <p>Details about any error that occurred during the index operation.</p>
    pub fn get_error_details(&self) -> &::std::option::Option<crate::types::ErrorDetails> {
        &self.error_details
    }
    /// Consumes the builder and constructs a [`IndexStatus`](crate::types::IndexStatus).
    pub fn build(self) -> crate::types::IndexStatus {
        crate::types::IndexStatus {
            status: self.status,
            index: self.index,
            error_details: self.error_details,
        }
    }
}
