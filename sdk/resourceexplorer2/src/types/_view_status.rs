// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the status of a Resource Explorer view operation in a specific Region.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ViewStatus {
    /// <p>The current status of the view operation. Valid values are <code>SUCCEEDED</code>, <code>FAILED</code>, <code>IN_PROGRESS</code>, or <code>SKIPPED</code>.</p>
    pub status: ::std::option::Option<crate::types::OperationStatus>,
    /// <p>A view is a structure that defines a set of filters that provide a view into the information in the Amazon Web Services Resource Explorer index. The filters specify which information from the index is visible to the users of the view. For example, you can specify filters that include only resources that are tagged with the key "ENV" and the value "DEVELOPMENT" in the results returned by this view. You could also create a second view that includes only resources that are tagged with "ENV" and "PRODUCTION".</p>
    pub view: ::std::option::Option<crate::types::View>,
    /// <p>Details about any error that occurred during the view operation.</p>
    pub error_details: ::std::option::Option<crate::types::ErrorDetails>,
}
impl ViewStatus {
    /// <p>The current status of the view operation. Valid values are <code>SUCCEEDED</code>, <code>FAILED</code>, <code>IN_PROGRESS</code>, or <code>SKIPPED</code>.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::OperationStatus> {
        self.status.as_ref()
    }
    /// <p>A view is a structure that defines a set of filters that provide a view into the information in the Amazon Web Services Resource Explorer index. The filters specify which information from the index is visible to the users of the view. For example, you can specify filters that include only resources that are tagged with the key "ENV" and the value "DEVELOPMENT" in the results returned by this view. You could also create a second view that includes only resources that are tagged with "ENV" and "PRODUCTION".</p>
    pub fn view(&self) -> ::std::option::Option<&crate::types::View> {
        self.view.as_ref()
    }
    /// <p>Details about any error that occurred during the view operation.</p>
    pub fn error_details(&self) -> ::std::option::Option<&crate::types::ErrorDetails> {
        self.error_details.as_ref()
    }
}
impl ViewStatus {
    /// Creates a new builder-style object to manufacture [`ViewStatus`](crate::types::ViewStatus).
    pub fn builder() -> crate::types::builders::ViewStatusBuilder {
        crate::types::builders::ViewStatusBuilder::default()
    }
}

/// A builder for [`ViewStatus`](crate::types::ViewStatus).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ViewStatusBuilder {
    pub(crate) status: ::std::option::Option<crate::types::OperationStatus>,
    pub(crate) view: ::std::option::Option<crate::types::View>,
    pub(crate) error_details: ::std::option::Option<crate::types::ErrorDetails>,
}
impl ViewStatusBuilder {
    /// <p>The current status of the view operation. Valid values are <code>SUCCEEDED</code>, <code>FAILED</code>, <code>IN_PROGRESS</code>, or <code>SKIPPED</code>.</p>
    pub fn status(mut self, input: crate::types::OperationStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the view operation. Valid values are <code>SUCCEEDED</code>, <code>FAILED</code>, <code>IN_PROGRESS</code>, or <code>SKIPPED</code>.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::OperationStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status of the view operation. Valid values are <code>SUCCEEDED</code>, <code>FAILED</code>, <code>IN_PROGRESS</code>, or <code>SKIPPED</code>.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::OperationStatus> {
        &self.status
    }
    /// <p>A view is a structure that defines a set of filters that provide a view into the information in the Amazon Web Services Resource Explorer index. The filters specify which information from the index is visible to the users of the view. For example, you can specify filters that include only resources that are tagged with the key "ENV" and the value "DEVELOPMENT" in the results returned by this view. You could also create a second view that includes only resources that are tagged with "ENV" and "PRODUCTION".</p>
    pub fn view(mut self, input: crate::types::View) -> Self {
        self.view = ::std::option::Option::Some(input);
        self
    }
    /// <p>A view is a structure that defines a set of filters that provide a view into the information in the Amazon Web Services Resource Explorer index. The filters specify which information from the index is visible to the users of the view. For example, you can specify filters that include only resources that are tagged with the key "ENV" and the value "DEVELOPMENT" in the results returned by this view. You could also create a second view that includes only resources that are tagged with "ENV" and "PRODUCTION".</p>
    pub fn set_view(mut self, input: ::std::option::Option<crate::types::View>) -> Self {
        self.view = input;
        self
    }
    /// <p>A view is a structure that defines a set of filters that provide a view into the information in the Amazon Web Services Resource Explorer index. The filters specify which information from the index is visible to the users of the view. For example, you can specify filters that include only resources that are tagged with the key "ENV" and the value "DEVELOPMENT" in the results returned by this view. You could also create a second view that includes only resources that are tagged with "ENV" and "PRODUCTION".</p>
    pub fn get_view(&self) -> &::std::option::Option<crate::types::View> {
        &self.view
    }
    /// <p>Details about any error that occurred during the view operation.</p>
    pub fn error_details(mut self, input: crate::types::ErrorDetails) -> Self {
        self.error_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>Details about any error that occurred during the view operation.</p>
    pub fn set_error_details(mut self, input: ::std::option::Option<crate::types::ErrorDetails>) -> Self {
        self.error_details = input;
        self
    }
    /// <p>Details about any error that occurred during the view operation.</p>
    pub fn get_error_details(&self) -> &::std::option::Option<crate::types::ErrorDetails> {
        &self.error_details
    }
    /// Consumes the builder and constructs a [`ViewStatus`](crate::types::ViewStatus).
    pub fn build(self) -> crate::types::ViewStatus {
        crate::types::ViewStatus {
            status: self.status,
            view: self.view,
            error_details: self.error_details,
        }
    }
}
