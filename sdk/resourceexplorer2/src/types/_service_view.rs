// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the configuration and properties of a Resource Explorer service view.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct ServiceView {
    /// <p>The Amazon Resource Name (ARN) of the service view.</p>
    pub service_view_arn: ::std::string::String,
    /// <p>A search filter defines which resources can be part of a search query result set.</p>
    pub filters: ::std::option::Option<crate::types::SearchFilter>,
    /// <p>A list of additional resource properties that are included in this view for search and filtering purposes.</p>
    pub included_properties: ::std::option::Option<::std::vec::Vec<crate::types::IncludedProperty>>,
    /// <p>The Amazon Web Services service that has streaming access to this view's data.</p>
    pub streaming_access_for_service: ::std::option::Option<::std::string::String>,
    /// <p>The scope type of the service view, which determines what resources are included.</p>
    pub scope_type: ::std::option::Option<::std::string::String>,
}
impl ServiceView {
    /// <p>The Amazon Resource Name (ARN) of the service view.</p>
    pub fn service_view_arn(&self) -> &str {
        use std::ops::Deref;
        self.service_view_arn.deref()
    }
    /// <p>A search filter defines which resources can be part of a search query result set.</p>
    pub fn filters(&self) -> ::std::option::Option<&crate::types::SearchFilter> {
        self.filters.as_ref()
    }
    /// <p>A list of additional resource properties that are included in this view for search and filtering purposes.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.included_properties.is_none()`.
    pub fn included_properties(&self) -> &[crate::types::IncludedProperty] {
        self.included_properties.as_deref().unwrap_or_default()
    }
    /// <p>The Amazon Web Services service that has streaming access to this view's data.</p>
    pub fn streaming_access_for_service(&self) -> ::std::option::Option<&str> {
        self.streaming_access_for_service.as_deref()
    }
    /// <p>The scope type of the service view, which determines what resources are included.</p>
    pub fn scope_type(&self) -> ::std::option::Option<&str> {
        self.scope_type.as_deref()
    }
}
impl ::std::fmt::Debug for ServiceView {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ServiceView");
        formatter.field("service_view_arn", &self.service_view_arn);
        formatter.field("filters", &"*** Sensitive Data Redacted ***");
        formatter.field("included_properties", &self.included_properties);
        formatter.field("streaming_access_for_service", &self.streaming_access_for_service);
        formatter.field("scope_type", &self.scope_type);
        formatter.finish()
    }
}
impl ServiceView {
    /// Creates a new builder-style object to manufacture [`ServiceView`](crate::types::ServiceView).
    pub fn builder() -> crate::types::builders::ServiceViewBuilder {
        crate::types::builders::ServiceViewBuilder::default()
    }
}

/// A builder for [`ServiceView`](crate::types::ServiceView).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct ServiceViewBuilder {
    pub(crate) service_view_arn: ::std::option::Option<::std::string::String>,
    pub(crate) filters: ::std::option::Option<crate::types::SearchFilter>,
    pub(crate) included_properties: ::std::option::Option<::std::vec::Vec<crate::types::IncludedProperty>>,
    pub(crate) streaming_access_for_service: ::std::option::Option<::std::string::String>,
    pub(crate) scope_type: ::std::option::Option<::std::string::String>,
}
impl ServiceViewBuilder {
    /// <p>The Amazon Resource Name (ARN) of the service view.</p>
    /// This field is required.
    pub fn service_view_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.service_view_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the service view.</p>
    pub fn set_service_view_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.service_view_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the service view.</p>
    pub fn get_service_view_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.service_view_arn
    }
    /// <p>A search filter defines which resources can be part of a search query result set.</p>
    pub fn filters(mut self, input: crate::types::SearchFilter) -> Self {
        self.filters = ::std::option::Option::Some(input);
        self
    }
    /// <p>A search filter defines which resources can be part of a search query result set.</p>
    pub fn set_filters(mut self, input: ::std::option::Option<crate::types::SearchFilter>) -> Self {
        self.filters = input;
        self
    }
    /// <p>A search filter defines which resources can be part of a search query result set.</p>
    pub fn get_filters(&self) -> &::std::option::Option<crate::types::SearchFilter> {
        &self.filters
    }
    /// Appends an item to `included_properties`.
    ///
    /// To override the contents of this collection use [`set_included_properties`](Self::set_included_properties).
    ///
    /// <p>A list of additional resource properties that are included in this view for search and filtering purposes.</p>
    pub fn included_properties(mut self, input: crate::types::IncludedProperty) -> Self {
        let mut v = self.included_properties.unwrap_or_default();
        v.push(input);
        self.included_properties = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of additional resource properties that are included in this view for search and filtering purposes.</p>
    pub fn set_included_properties(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::IncludedProperty>>) -> Self {
        self.included_properties = input;
        self
    }
    /// <p>A list of additional resource properties that are included in this view for search and filtering purposes.</p>
    pub fn get_included_properties(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::IncludedProperty>> {
        &self.included_properties
    }
    /// <p>The Amazon Web Services service that has streaming access to this view's data.</p>
    pub fn streaming_access_for_service(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.streaming_access_for_service = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services service that has streaming access to this view's data.</p>
    pub fn set_streaming_access_for_service(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.streaming_access_for_service = input;
        self
    }
    /// <p>The Amazon Web Services service that has streaming access to this view's data.</p>
    pub fn get_streaming_access_for_service(&self) -> &::std::option::Option<::std::string::String> {
        &self.streaming_access_for_service
    }
    /// <p>The scope type of the service view, which determines what resources are included.</p>
    pub fn scope_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.scope_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The scope type of the service view, which determines what resources are included.</p>
    pub fn set_scope_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.scope_type = input;
        self
    }
    /// <p>The scope type of the service view, which determines what resources are included.</p>
    pub fn get_scope_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.scope_type
    }
    /// Consumes the builder and constructs a [`ServiceView`](crate::types::ServiceView).
    /// This method will fail if any of the following fields are not set:
    /// - [`service_view_arn`](crate::types::builders::ServiceViewBuilder::service_view_arn)
    pub fn build(self) -> ::std::result::Result<crate::types::ServiceView, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ServiceView {
            service_view_arn: self.service_view_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "service_view_arn",
                    "service_view_arn was not specified but it is required when building ServiceView",
                )
            })?,
            filters: self.filters,
            included_properties: self.included_properties,
            streaming_access_for_service: self.streaming_access_for_service,
            scope_type: self.scope_type,
        })
    }
}
impl ::std::fmt::Debug for ServiceViewBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ServiceViewBuilder");
        formatter.field("service_view_arn", &self.service_view_arn);
        formatter.field("filters", &"*** Sensitive Data Redacted ***");
        formatter.field("included_properties", &self.included_properties);
        formatter.field("streaming_access_for_service", &self.streaming_access_for_service);
        formatter.field("scope_type", &self.scope_type);
        formatter.finish()
    }
}
