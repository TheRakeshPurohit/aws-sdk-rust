// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_get_resource_explorer_setup_output_output_next_token(
    input: &crate::operation::get_resource_explorer_setup::GetResourceExplorerSetupOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_indexes_output_output_next_token(
    input: &crate::operation::list_indexes::ListIndexesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_indexes_for_members_output_output_next_token(
    input: &crate::operation::list_indexes_for_members::ListIndexesForMembersOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_managed_views_output_output_next_token(
    input: &crate::operation::list_managed_views::ListManagedViewsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_resources_output_output_next_token(
    input: &crate::operation::list_resources::ListResourcesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_service_indexes_output_output_next_token(
    input: &crate::operation::list_service_indexes::ListServiceIndexesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_service_views_output_output_next_token(
    input: &crate::operation::list_service_views::ListServiceViewsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_streaming_access_for_services_output_output_next_token(
    input: &crate::operation::list_streaming_access_for_services::ListStreamingAccessForServicesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_supported_resource_types_output_output_next_token(
    input: &crate::operation::list_supported_resource_types::ListSupportedResourceTypesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_views_output_output_next_token(
    input: &crate::operation::list_views::ListViewsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_search_output_output_next_token(
    input: &crate::operation::search::SearchOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_get_resource_explorer_setup_output_output_regions(
    input: crate::operation::get_resource_explorer_setup::GetResourceExplorerSetupOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::RegionStatus>> {
    let input = input.regions?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_indexes_output_output_indexes(
    input: crate::operation::list_indexes::ListIndexesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Index>> {
    let input = input.indexes?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_indexes_for_members_output_output_indexes(
    input: crate::operation::list_indexes_for_members::ListIndexesForMembersOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::MemberIndex>> {
    let input = input.indexes?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_managed_views_output_output_managed_views(
    input: crate::operation::list_managed_views::ListManagedViewsOutput,
) -> ::std::option::Option<::std::vec::Vec<::std::string::String>> {
    let input = input.managed_views?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_resources_output_output_resources(
    input: crate::operation::list_resources::ListResourcesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Resource>> {
    let input = input.resources?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_service_indexes_output_output_indexes(
    input: crate::operation::list_service_indexes::ListServiceIndexesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Index>> {
    let input = input.indexes?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_service_views_output_output_service_views(
    input: crate::operation::list_service_views::ListServiceViewsOutput,
) -> ::std::option::Option<::std::vec::Vec<::std::string::String>> {
    let input = input.service_views?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_streaming_access_for_services_output_output_streaming_access_for_services(
    input: crate::operation::list_streaming_access_for_services::ListStreamingAccessForServicesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::StreamingAccessDetails>> {
    let input = input.streaming_access_for_services;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_supported_resource_types_output_output_resource_types(
    input: crate::operation::list_supported_resource_types::ListSupportedResourceTypesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::SupportedResourceType>> {
    let input = input.resource_types?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_views_output_output_views(
    input: crate::operation::list_views::ListViewsOutput,
) -> ::std::option::Option<::std::vec::Vec<::std::string::String>> {
    let input = input.views?;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_search_output_output_resources(
    input: crate::operation::search::SearchOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Resource>> {
    let input = input.resources?;
    ::std::option::Option::Some(input)
}
