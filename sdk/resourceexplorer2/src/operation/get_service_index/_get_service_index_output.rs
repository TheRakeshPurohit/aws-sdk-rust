// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetServiceIndexOutput {
    /// <p>The Amazon Resource Name (ARN) of the Resource Explorer index in the current Region.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The type of the index. Valid values are <code>LOCAL</code> (contains resources from the current Region only) or <code>AGGREGATOR</code> (contains replicated resource information from all Regions).</p>
    pub r#type: ::std::option::Option<crate::types::IndexType>,
    _request_id: Option<String>,
}
impl GetServiceIndexOutput {
    /// <p>The Amazon Resource Name (ARN) of the Resource Explorer index in the current Region.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The type of the index. Valid values are <code>LOCAL</code> (contains resources from the current Region only) or <code>AGGREGATOR</code> (contains replicated resource information from all Regions).</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::IndexType> {
        self.r#type.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for GetServiceIndexOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetServiceIndexOutput {
    /// Creates a new builder-style object to manufacture [`GetServiceIndexOutput`](crate::operation::get_service_index::GetServiceIndexOutput).
    pub fn builder() -> crate::operation::get_service_index::builders::GetServiceIndexOutputBuilder {
        crate::operation::get_service_index::builders::GetServiceIndexOutputBuilder::default()
    }
}

/// A builder for [`GetServiceIndexOutput`](crate::operation::get_service_index::GetServiceIndexOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetServiceIndexOutputBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::IndexType>,
    _request_id: Option<String>,
}
impl GetServiceIndexOutputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the Resource Explorer index in the current Region.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Resource Explorer index in the current Region.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Resource Explorer index in the current Region.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The type of the index. Valid values are <code>LOCAL</code> (contains resources from the current Region only) or <code>AGGREGATOR</code> (contains replicated resource information from all Regions).</p>
    pub fn r#type(mut self, input: crate::types::IndexType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the index. Valid values are <code>LOCAL</code> (contains resources from the current Region only) or <code>AGGREGATOR</code> (contains replicated resource information from all Regions).</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::IndexType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of the index. Valid values are <code>LOCAL</code> (contains resources from the current Region only) or <code>AGGREGATOR</code> (contains replicated resource information from all Regions).</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::IndexType> {
        &self.r#type
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetServiceIndexOutput`](crate::operation::get_service_index::GetServiceIndexOutput).
    pub fn build(self) -> crate::operation::get_service_index::GetServiceIndexOutput {
        crate::operation::get_service_index::GetServiceIndexOutput {
            arn: self.arn,
            r#type: self.r#type,
            _request_id: self._request_id,
        }
    }
}
