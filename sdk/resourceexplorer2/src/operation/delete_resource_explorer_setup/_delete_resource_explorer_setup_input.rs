// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DeleteResourceExplorerSetupInput {
    /// <p>A list of Amazon Web Services Regions from which to delete the Resource Explorer configuration. If not specified, the operation uses the <code>DeleteInAllRegions</code> parameter to determine scope.</p>
    pub region_list: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Specifies whether to delete Resource Explorer configuration from all Regions where it is currently enabled. If this parameter is set to <code>true</code>, a value for <code>RegionList</code> must not be provided. Otherwise, the operation fails with a <code>ValidationException</code> error.</p>
    pub delete_in_all_regions: ::std::option::Option<bool>,
}
impl DeleteResourceExplorerSetupInput {
    /// <p>A list of Amazon Web Services Regions from which to delete the Resource Explorer configuration. If not specified, the operation uses the <code>DeleteInAllRegions</code> parameter to determine scope.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.region_list.is_none()`.
    pub fn region_list(&self) -> &[::std::string::String] {
        self.region_list.as_deref().unwrap_or_default()
    }
    /// <p>Specifies whether to delete Resource Explorer configuration from all Regions where it is currently enabled. If this parameter is set to <code>true</code>, a value for <code>RegionList</code> must not be provided. Otherwise, the operation fails with a <code>ValidationException</code> error.</p>
    pub fn delete_in_all_regions(&self) -> ::std::option::Option<bool> {
        self.delete_in_all_regions
    }
}
impl DeleteResourceExplorerSetupInput {
    /// Creates a new builder-style object to manufacture [`DeleteResourceExplorerSetupInput`](crate::operation::delete_resource_explorer_setup::DeleteResourceExplorerSetupInput).
    pub fn builder() -> crate::operation::delete_resource_explorer_setup::builders::DeleteResourceExplorerSetupInputBuilder {
        crate::operation::delete_resource_explorer_setup::builders::DeleteResourceExplorerSetupInputBuilder::default()
    }
}

/// A builder for [`DeleteResourceExplorerSetupInput`](crate::operation::delete_resource_explorer_setup::DeleteResourceExplorerSetupInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DeleteResourceExplorerSetupInputBuilder {
    pub(crate) region_list: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) delete_in_all_regions: ::std::option::Option<bool>,
}
impl DeleteResourceExplorerSetupInputBuilder {
    /// Appends an item to `region_list`.
    ///
    /// To override the contents of this collection use [`set_region_list`](Self::set_region_list).
    ///
    /// <p>A list of Amazon Web Services Regions from which to delete the Resource Explorer configuration. If not specified, the operation uses the <code>DeleteInAllRegions</code> parameter to determine scope.</p>
    pub fn region_list(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.region_list.unwrap_or_default();
        v.push(input.into());
        self.region_list = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of Amazon Web Services Regions from which to delete the Resource Explorer configuration. If not specified, the operation uses the <code>DeleteInAllRegions</code> parameter to determine scope.</p>
    pub fn set_region_list(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.region_list = input;
        self
    }
    /// <p>A list of Amazon Web Services Regions from which to delete the Resource Explorer configuration. If not specified, the operation uses the <code>DeleteInAllRegions</code> parameter to determine scope.</p>
    pub fn get_region_list(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.region_list
    }
    /// <p>Specifies whether to delete Resource Explorer configuration from all Regions where it is currently enabled. If this parameter is set to <code>true</code>, a value for <code>RegionList</code> must not be provided. Otherwise, the operation fails with a <code>ValidationException</code> error.</p>
    pub fn delete_in_all_regions(mut self, input: bool) -> Self {
        self.delete_in_all_regions = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether to delete Resource Explorer configuration from all Regions where it is currently enabled. If this parameter is set to <code>true</code>, a value for <code>RegionList</code> must not be provided. Otherwise, the operation fails with a <code>ValidationException</code> error.</p>
    pub fn set_delete_in_all_regions(mut self, input: ::std::option::Option<bool>) -> Self {
        self.delete_in_all_regions = input;
        self
    }
    /// <p>Specifies whether to delete Resource Explorer configuration from all Regions where it is currently enabled. If this parameter is set to <code>true</code>, a value for <code>RegionList</code> must not be provided. Otherwise, the operation fails with a <code>ValidationException</code> error.</p>
    pub fn get_delete_in_all_regions(&self) -> &::std::option::Option<bool> {
        &self.delete_in_all_regions
    }
    /// Consumes the builder and constructs a [`DeleteResourceExplorerSetupInput`](crate::operation::delete_resource_explorer_setup::DeleteResourceExplorerSetupInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::delete_resource_explorer_setup::DeleteResourceExplorerSetupInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::delete_resource_explorer_setup::DeleteResourceExplorerSetupInput {
            region_list: self.region_list,
            delete_in_all_regions: self.delete_in_all_regions,
        })
    }
}
