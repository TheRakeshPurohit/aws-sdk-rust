// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListStreamingAccessForServicesOutput {
    /// <p>A list of Amazon Web Services services that have streaming access to your Resource Explorer data, including details about when the access was granted.</p>
    pub streaming_access_for_services: ::std::vec::Vec<crate::types::StreamingAccessDetails>,
    /// <p>If present, indicates that more output is available than is included in the current response. Use this value in the <code>NextToken</code> request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the <code>NextToken</code> response element comes back as <code>null</code>. The pagination tokens expire after 24 hours.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListStreamingAccessForServicesOutput {
    /// <p>A list of Amazon Web Services services that have streaming access to your Resource Explorer data, including details about when the access was granted.</p>
    pub fn streaming_access_for_services(&self) -> &[crate::types::StreamingAccessDetails] {
        use std::ops::Deref;
        self.streaming_access_for_services.deref()
    }
    /// <p>If present, indicates that more output is available than is included in the current response. Use this value in the <code>NextToken</code> request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the <code>NextToken</code> response element comes back as <code>null</code>. The pagination tokens expire after 24 hours.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ::aws_types::request_id::RequestId for ListStreamingAccessForServicesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListStreamingAccessForServicesOutput {
    /// Creates a new builder-style object to manufacture [`ListStreamingAccessForServicesOutput`](crate::operation::list_streaming_access_for_services::ListStreamingAccessForServicesOutput).
    pub fn builder() -> crate::operation::list_streaming_access_for_services::builders::ListStreamingAccessForServicesOutputBuilder {
        crate::operation::list_streaming_access_for_services::builders::ListStreamingAccessForServicesOutputBuilder::default()
    }
}

/// A builder for [`ListStreamingAccessForServicesOutput`](crate::operation::list_streaming_access_for_services::ListStreamingAccessForServicesOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListStreamingAccessForServicesOutputBuilder {
    pub(crate) streaming_access_for_services: ::std::option::Option<::std::vec::Vec<crate::types::StreamingAccessDetails>>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListStreamingAccessForServicesOutputBuilder {
    /// Appends an item to `streaming_access_for_services`.
    ///
    /// To override the contents of this collection use [`set_streaming_access_for_services`](Self::set_streaming_access_for_services).
    ///
    /// <p>A list of Amazon Web Services services that have streaming access to your Resource Explorer data, including details about when the access was granted.</p>
    pub fn streaming_access_for_services(mut self, input: crate::types::StreamingAccessDetails) -> Self {
        let mut v = self.streaming_access_for_services.unwrap_or_default();
        v.push(input);
        self.streaming_access_for_services = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of Amazon Web Services services that have streaming access to your Resource Explorer data, including details about when the access was granted.</p>
    pub fn set_streaming_access_for_services(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StreamingAccessDetails>>) -> Self {
        self.streaming_access_for_services = input;
        self
    }
    /// <p>A list of Amazon Web Services services that have streaming access to your Resource Explorer data, including details about when the access was granted.</p>
    pub fn get_streaming_access_for_services(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StreamingAccessDetails>> {
        &self.streaming_access_for_services
    }
    /// <p>If present, indicates that more output is available than is included in the current response. Use this value in the <code>NextToken</code> request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the <code>NextToken</code> response element comes back as <code>null</code>. The pagination tokens expire after 24 hours.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If present, indicates that more output is available than is included in the current response. Use this value in the <code>NextToken</code> request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the <code>NextToken</code> response element comes back as <code>null</code>. The pagination tokens expire after 24 hours.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>If present, indicates that more output is available than is included in the current response. Use this value in the <code>NextToken</code> request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the <code>NextToken</code> response element comes back as <code>null</code>. The pagination tokens expire after 24 hours.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListStreamingAccessForServicesOutput`](crate::operation::list_streaming_access_for_services::ListStreamingAccessForServicesOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`streaming_access_for_services`](crate::operation::list_streaming_access_for_services::builders::ListStreamingAccessForServicesOutputBuilder::streaming_access_for_services)
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_streaming_access_for_services::ListStreamingAccessForServicesOutput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::list_streaming_access_for_services::ListStreamingAccessForServicesOutput {
                streaming_access_for_services: self.streaming_access_for_services.ok_or_else(|| {
                    ::aws_smithy_types::error::operation::BuildError::missing_field(
                        "streaming_access_for_services",
                        "streaming_access_for_services was not specified but it is required when building ListStreamingAccessForServicesOutput",
                    )
                })?,
                next_token: self.next_token,
                _request_id: self._request_id,
            },
        )
    }
}
