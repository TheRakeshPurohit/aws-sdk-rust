// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An optional filter for the <code>S3JobManifestGenerator</code> that identifies the subset of objects by encryption type. This filter is used to create an object list for S3 Batch Operations jobs. If provided, this filter will generate an object list that only includes objects with the specified encryption type.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum ObjectEncryptionFilter {
    /// <p>Filters for objects that are encrypted by dual-layer server-side encryption with Amazon Web Services Key Management Service (KMS) keys (DSSE-KMS).</p>
    Dssekms(crate::types::DssekmsFilter),
    /// <p>Filters for objects that are not encrypted by server-side encryption.</p>
    Notsse(crate::types::NotSseFilter),
    /// <p>Filters for objects that are encrypted by server-side encryption with customer-provided keys (SSE-C).</p>
    Ssec(crate::types::SsecFilter),
    /// <p>Filters for objects that are encrypted by server-side encryption with Amazon Web Services Key Management Service (KMS) keys (SSE-KMS).</p>
    Ssekms(crate::types::SsekmsFilter),
    /// <p>Filters for objects that are encrypted by server-side encryption with Amazon S3 managed keys (SSE-S3).</p>
    Sses3(crate::types::Sses3Filter),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl ObjectEncryptionFilter {
    /// Tries to convert the enum instance into [`Dssekms`](crate::types::ObjectEncryptionFilter::Dssekms), extracting the inner [`DssekmsFilter`](crate::types::DssekmsFilter).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_dssekms(&self) -> ::std::result::Result<&crate::types::DssekmsFilter, &Self> {
        if let ObjectEncryptionFilter::Dssekms(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Dssekms`](crate::types::ObjectEncryptionFilter::Dssekms).
    pub fn is_dssekms(&self) -> bool {
        self.as_dssekms().is_ok()
    }
    /// Tries to convert the enum instance into [`Notsse`](crate::types::ObjectEncryptionFilter::Notsse), extracting the inner [`NotSseFilter`](crate::types::NotSseFilter).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_notsse(&self) -> ::std::result::Result<&crate::types::NotSseFilter, &Self> {
        if let ObjectEncryptionFilter::Notsse(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Notsse`](crate::types::ObjectEncryptionFilter::Notsse).
    pub fn is_notsse(&self) -> bool {
        self.as_notsse().is_ok()
    }
    /// Tries to convert the enum instance into [`Ssec`](crate::types::ObjectEncryptionFilter::Ssec), extracting the inner [`SsecFilter`](crate::types::SsecFilter).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_ssec(&self) -> ::std::result::Result<&crate::types::SsecFilter, &Self> {
        if let ObjectEncryptionFilter::Ssec(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Ssec`](crate::types::ObjectEncryptionFilter::Ssec).
    pub fn is_ssec(&self) -> bool {
        self.as_ssec().is_ok()
    }
    /// Tries to convert the enum instance into [`Ssekms`](crate::types::ObjectEncryptionFilter::Ssekms), extracting the inner [`SsekmsFilter`](crate::types::SsekmsFilter).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_ssekms(&self) -> ::std::result::Result<&crate::types::SsekmsFilter, &Self> {
        if let ObjectEncryptionFilter::Ssekms(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Ssekms`](crate::types::ObjectEncryptionFilter::Ssekms).
    pub fn is_ssekms(&self) -> bool {
        self.as_ssekms().is_ok()
    }
    /// Tries to convert the enum instance into [`Sses3`](crate::types::ObjectEncryptionFilter::Sses3), extracting the inner [`Sses3Filter`](crate::types::Sses3Filter).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_sses3(&self) -> ::std::result::Result<&crate::types::Sses3Filter, &Self> {
        if let ObjectEncryptionFilter::Sses3(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`Sses3`](crate::types::ObjectEncryptionFilter::Sses3).
    pub fn is_sses3(&self) -> bool {
        self.as_sses3().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
