// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#![cfg(feature = "test-util")]
#[::tokio::test]
async fn operation_input_test_get_access_point_1() {
    /* documentation: Vanilla outposts without ARN region + access point ARN@us-west-2 */
    /* builtIns: {
        "AWS::Region": "us-west-2"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-west-2"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_access_point()
            .set_name(::std::option::Option::Some(
                "arn:aws:s3-outposts:us-west-2:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts.us-west-2.amazonaws.com"),
        "expected URI to start with `https://s3-outposts.us-west-2.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_delete_access_point_2() {
    /* documentation: Vanilla outposts without ARN region + access point ARN@us-west-2 */
    /* builtIns: {
        "AWS::Region": "us-west-2"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-west-2"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .delete_access_point()
            .set_name(::std::option::Option::Some(
                "arn:aws:s3-outposts:us-west-2:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts.us-west-2.amazonaws.com"),
        "expected URI to start with `https://s3-outposts.us-west-2.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_get_access_point_3() {
    /* documentation: Vanilla outposts with ARN region + access point ARN@us-west-2 */
    /* builtIns: {
        "AWS::Region": "us-west-2"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-west-2"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_access_point()
            .set_name(::std::option::Option::Some(
                "arn:aws:s3-outposts:us-east-1:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts.us-east-1.amazonaws.com"),
        "expected URI to start with `https://s3-outposts.us-east-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_delete_access_point_4() {
    /* documentation: Vanilla outposts with ARN region + access point ARN@us-west-2 */
    /* builtIns: {
        "AWS::Region": "us-west-2"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-west-2"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .delete_access_point()
            .set_name(::std::option::Option::Some(
                "arn:aws:s3-outposts:us-east-1:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts.us-east-1.amazonaws.com"),
        "expected URI to start with `https://s3-outposts.us-east-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_get_access_point_5() {
    /* documentation: accept an access point ARN@us-west-2 */
    /* builtIns: {
        "AWS::Region": "us-west-2"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-west-2"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_access_point()
            .set_name(::std::option::Option::Some(
                "arn:aws:s3-outposts:us-west-2:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts.us-west-2.amazonaws.com"),
        "expected URI to start with `https://s3-outposts.us-west-2.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_delete_access_point_6() {
    /* documentation: accept an access point ARN@us-west-2 */
    /* builtIns: {
        "AWS::Region": "us-west-2"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-west-2"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .delete_access_point()
            .set_name(::std::option::Option::Some(
                "arn:aws:s3-outposts:us-west-2:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts.us-west-2.amazonaws.com"),
        "expected URI to start with `https://s3-outposts.us-west-2.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_get_access_point_7() {
    /* documentation: vanilla outposts china@cn-north-1 */
    /* builtIns: {
        "AWS::Region": "cn-north-1"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("cn-north-1"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_access_point()
            .set_name(::std::option::Option::Some(
                "arn:aws-cn:s3-outposts:cn-north-1:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts.cn-north-1.amazonaws.com.cn"),
        "expected URI to start with `https://s3-outposts.cn-north-1.amazonaws.com.cn` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_delete_access_point_8() {
    /* documentation: vanilla outposts china@cn-north-1 */
    /* builtIns: {
        "AWS::Region": "cn-north-1"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("cn-north-1"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .delete_access_point()
            .set_name(::std::option::Option::Some(
                "arn:aws-cn:s3-outposts:cn-north-1:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts.cn-north-1.amazonaws.com.cn"),
        "expected URI to start with `https://s3-outposts.cn-north-1.amazonaws.com.cn` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_get_access_point_9() {
    /* documentation: gov region@us-west-2 */
    /* builtIns: {
        "AWS::Region": "us-west-2"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-west-2"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_access_point()
            .set_name(::std::option::Option::Some(
                "arn:aws:s3-outposts:us-west-2:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts.us-west-2.amazonaws.com"),
        "expected URI to start with `https://s3-outposts.us-west-2.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_delete_access_point_10() {
    /* documentation: gov region@us-west-2 */
    /* builtIns: {
        "AWS::Region": "us-west-2"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-west-2"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .delete_access_point()
            .set_name(::std::option::Option::Some(
                "arn:aws:s3-outposts:us-west-2:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts.us-west-2.amazonaws.com"),
        "expected URI to start with `https://s3-outposts.us-west-2.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_get_access_point_11() {
    /* documentation: gov cloud with fips@us-west-2 */
    /* builtIns: {
        "AWS::Region": "us-west-2",
        "AWS::UseFIPS": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-west-2"));
        let builder = builder.use_fips(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_access_point()
            .set_name(::std::option::Option::Some(
                "arn:aws:s3-outposts:us-west-2:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts-fips.us-west-2.amazonaws.com"),
        "expected URI to start with `https://s3-outposts-fips.us-west-2.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_delete_access_point_12() {
    /* documentation: gov cloud with fips@us-west-2 */
    /* builtIns: {
        "AWS::Region": "us-west-2",
        "AWS::UseFIPS": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-west-2"));
        let builder = builder.use_fips(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .delete_access_point()
            .set_name(::std::option::Option::Some(
                "arn:aws:s3-outposts:us-west-2:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts-fips.us-west-2.amazonaws.com"),
        "expected URI to start with `https://s3-outposts-fips.us-west-2.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_get_access_point_13() {
    /* documentation: govcloud with fips + arn region@us-gov-west-1 */
    /* builtIns: {
        "AWS::Region": "us-gov-west-1",
        "AWS::UseFIPS": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-gov-west-1"));
        let builder = builder.use_fips(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_access_point()
            .set_name(::std::option::Option::Some(
                "arn:aws-us-gov:s3-outposts:us-gov-east-1:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts-fips.us-gov-east-1.amazonaws.com"),
        "expected URI to start with `https://s3-outposts-fips.us-gov-east-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_delete_access_point_14() {
    /* documentation: govcloud with fips + arn region@us-gov-west-1 */
    /* builtIns: {
        "AWS::Region": "us-gov-west-1",
        "AWS::UseFIPS": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-gov-west-1"));
        let builder = builder.use_fips(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .delete_access_point()
            .set_name(::std::option::Option::Some(
                "arn:aws-us-gov:s3-outposts:us-gov-east-1:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts-fips.us-gov-east-1.amazonaws.com"),
        "expected URI to start with `https://s3-outposts-fips.us-gov-east-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_get_access_point_15() {
    /* documentation: gov region@cn-north-1 */
    /* builtIns: {
        "AWS::Region": "cn-north-1"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("cn-north-1"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_access_point()
            .set_name(::std::option::Option::Some(
                "arn:aws-cn:s3-outposts:cn-north-1:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts.cn-north-1.amazonaws.com.cn"),
        "expected URI to start with `https://s3-outposts.cn-north-1.amazonaws.com.cn` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_delete_access_point_16() {
    /* documentation: gov region@cn-north-1 */
    /* builtIns: {
        "AWS::Region": "cn-north-1"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("cn-north-1"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .delete_access_point()
            .set_name(::std::option::Option::Some(
                "arn:aws-cn:s3-outposts:cn-north-1:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts.cn-north-1.amazonaws.com.cn"),
        "expected URI to start with `https://s3-outposts.cn-north-1.amazonaws.com.cn` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_get_access_point_17() {
    /* documentation: gov cloud with fips@cn-north-1 */
    /* builtIns: {
        "AWS::Region": "cn-north-1",
        "AWS::UseFIPS": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("cn-north-1"));
        let builder = builder.use_fips(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_access_point()
            .set_name(::std::option::Option::Some(
                "arn:aws-cn:s3-outposts:cn-north-1:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    rcvr.expect_no_request();
    let error = _result.expect_err("expected error: Partition does not support FIPS [gov cloud with fips@cn-north-1]");
    assert!(
        format!("{:?}", error).contains("Partition does not support FIPS"),
        "expected error to contain `Partition does not support FIPS` but it was {:?}",
        error
    );
}

#[::tokio::test]
async fn operation_input_test_delete_access_point_18() {
    /* documentation: gov cloud with fips@cn-north-1 */
    /* builtIns: {
        "AWS::Region": "cn-north-1",
        "AWS::UseFIPS": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("cn-north-1"));
        let builder = builder.use_fips(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .delete_access_point()
            .set_name(::std::option::Option::Some(
                "arn:aws-cn:s3-outposts:cn-north-1:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    rcvr.expect_no_request();
    let error = _result.expect_err("expected error: Partition does not support FIPS [gov cloud with fips@cn-north-1]");
    assert!(
        format!("{:?}", error).contains("Partition does not support FIPS"),
        "expected error to contain `Partition does not support FIPS` but it was {:?}",
        error
    );
}

#[::tokio::test]
async fn operation_input_test_get_access_point_19() {
    /* documentation: govcloud with fips + arn region@us-gov-west-1 */
    /* builtIns: {
        "AWS::Region": "us-gov-west-1",
        "AWS::UseFIPS": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-gov-west-1"));
        let builder = builder.use_fips(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_access_point()
            .set_name(::std::option::Option::Some(
                "arn:aws-us-gov:s3-outposts:us-gov-east-1:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts-fips.us-gov-east-1.amazonaws.com"),
        "expected URI to start with `https://s3-outposts-fips.us-gov-east-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_delete_access_point_20() {
    /* documentation: govcloud with fips + arn region@us-gov-west-1 */
    /* builtIns: {
        "AWS::Region": "us-gov-west-1",
        "AWS::UseFIPS": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-gov-west-1"));
        let builder = builder.use_fips(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .delete_access_point()
            .set_name(::std::option::Option::Some(
                "arn:aws-us-gov:s3-outposts:us-gov-east-1:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts-fips.us-gov-east-1.amazonaws.com"),
        "expected URI to start with `https://s3-outposts-fips.us-gov-east-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_get_access_point_21() {
    /* documentation: gov region@af-south-1 */
    /* builtIns: {
        "AWS::Region": "af-south-1"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("af-south-1"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_access_point()
            .set_name(::std::option::Option::Some(
                "arn:aws:s3-outposts:af-south-1:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts.af-south-1.amazonaws.com"),
        "expected URI to start with `https://s3-outposts.af-south-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_delete_access_point_22() {
    /* documentation: gov region@af-south-1 */
    /* builtIns: {
        "AWS::Region": "af-south-1"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("af-south-1"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .delete_access_point()
            .set_name(::std::option::Option::Some(
                "arn:aws:s3-outposts:af-south-1:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts.af-south-1.amazonaws.com"),
        "expected URI to start with `https://s3-outposts.af-south-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_get_access_point_23() {
    /* documentation: gov cloud with fips@af-south-1 */
    /* builtIns: {
        "AWS::Region": "af-south-1",
        "AWS::UseFIPS": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("af-south-1"));
        let builder = builder.use_fips(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_access_point()
            .set_name(::std::option::Option::Some(
                "arn:aws:s3-outposts:af-south-1:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts-fips.af-south-1.amazonaws.com"),
        "expected URI to start with `https://s3-outposts-fips.af-south-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_delete_access_point_24() {
    /* documentation: gov cloud with fips@af-south-1 */
    /* builtIns: {
        "AWS::Region": "af-south-1",
        "AWS::UseFIPS": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("af-south-1"));
        let builder = builder.use_fips(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .delete_access_point()
            .set_name(::std::option::Option::Some(
                "arn:aws:s3-outposts:af-south-1:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts-fips.af-south-1.amazonaws.com"),
        "expected URI to start with `https://s3-outposts-fips.af-south-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_get_access_point_25() {
    /* documentation: govcloud with fips + arn region@us-gov-west-1 */
    /* builtIns: {
        "AWS::Region": "us-gov-west-1",
        "AWS::UseFIPS": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-gov-west-1"));
        let builder = builder.use_fips(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_access_point()
            .set_name(::std::option::Option::Some(
                "arn:aws-us-gov:s3-outposts:us-gov-east-1:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts-fips.us-gov-east-1.amazonaws.com"),
        "expected URI to start with `https://s3-outposts-fips.us-gov-east-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_delete_access_point_26() {
    /* documentation: govcloud with fips + arn region@us-gov-west-1 */
    /* builtIns: {
        "AWS::Region": "us-gov-west-1",
        "AWS::UseFIPS": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-gov-west-1"));
        let builder = builder.use_fips(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .delete_access_point()
            .set_name(::std::option::Option::Some(
                "arn:aws-us-gov:s3-outposts:us-gov-east-1:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts-fips.us-gov-east-1.amazonaws.com"),
        "expected URI to start with `https://s3-outposts-fips.us-gov-east-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_create_bucket_27() {
    /* documentation: CreateBucket + OutpostId = outposts endpoint@us-east-2 */
    /* builtIns: {
        "AWS::Region": "us-east-2"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-2"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .create_bucket()
            .set_bucket(::std::option::Option::Some("blah".to_owned()))
            .set_outpost_id(::std::option::Option::Some("123".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts.us-east-2.amazonaws.com"),
        "expected URI to start with `https://s3-outposts.us-east-2.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_create_bucket_28() {
    /* documentation: CreateBucket + OutpostId with fips = outposts endpoint@us-east-2 */
    /* builtIns: {
        "AWS::Region": "us-east-2",
        "AWS::UseFIPS": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-2"));
        let builder = builder.use_fips(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .create_bucket()
            .set_bucket(::std::option::Option::Some("blah".to_owned()))
            .set_outpost_id(::std::option::Option::Some("123".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts-fips.us-east-2.amazonaws.com"),
        "expected URI to start with `https://s3-outposts-fips.us-east-2.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_create_bucket_29() {
    /* documentation: CreateBucket without OutpostId = regular endpoint@us-east-2 */
    /* builtIns: {
        "AWS::Region": "us-east-2"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-2"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .create_bucket()
            .set_bucket(::std::option::Option::Some("blah".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-control.us-east-2.amazonaws.com"),
        "expected URI to start with `https://s3-control.us-east-2.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_list_regional_buckets_30() {
    /* documentation: ListRegionalBuckets + OutpostId = outposts endpoint@us-east-2 */
    /* builtIns: {
        "AWS::Region": "us-east-2"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-2"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .list_regional_buckets()
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .set_outpost_id(::std::option::Option::Some("op-123".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts.us-east-2.amazonaws.com"),
        "expected URI to start with `https://s3-outposts.us-east-2.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_list_regional_buckets_31() {
    /* documentation: ListRegionalBuckets without OutpostId = regular endpoint@us-east-2 */
    /* builtIns: {
        "AWS::Region": "us-east-2"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-2"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .list_regional_buckets()
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://123456789012.s3-control.us-east-2.amazonaws.com"),
        "expected URI to start with `https://123456789012.s3-control.us-east-2.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_list_regional_buckets_32() {
    /* documentation: ListRegionalBucket + OutpostId with fips = outposts endpoint@us-east-2 */
    /* builtIns: {
        "AWS::Region": "us-east-2",
        "AWS::UseFIPS": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-2"));
        let builder = builder.use_fips(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .list_regional_buckets()
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .set_outpost_id(::std::option::Option::Some("op-123".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts-fips.us-east-2.amazonaws.com"),
        "expected URI to start with `https://s3-outposts-fips.us-east-2.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_get_access_point_33() {
    /* documentation: outpost access points support dualstack@us-west-2 */
    /* builtIns: {
        "AWS::Region": "us-west-2",
        "AWS::UseDualStack": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-west-2"));
        let builder = builder.use_dual_stack(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_access_point()
            .set_name(::std::option::Option::Some(
                "arn:aws:s3-outposts:us-west-2:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts.us-west-2.api.aws"),
        "expected URI to start with `https://s3-outposts.us-west-2.api.aws` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_delete_access_point_34() {
    /* documentation: outpost access points support dualstack@us-west-2 */
    /* builtIns: {
        "AWS::Region": "us-west-2",
        "AWS::UseDualStack": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-west-2"));
        let builder = builder.use_dual_stack(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .delete_access_point()
            .set_name(::std::option::Option::Some(
                "arn:aws:s3-outposts:us-west-2:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts.us-west-2.api.aws"),
        "expected URI to start with `https://s3-outposts.us-west-2.api.aws` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_get_access_point_35() {
    /* documentation: outpost access points support dualstack@af-south-1 */
    /* builtIns: {
        "AWS::Region": "af-south-1",
        "AWS::UseDualStack": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("af-south-1"));
        let builder = builder.use_dual_stack(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_access_point()
            .set_name(::std::option::Option::Some(
                "arn:aws:s3-outposts:af-south-1:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts.af-south-1.api.aws"),
        "expected URI to start with `https://s3-outposts.af-south-1.api.aws` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_delete_access_point_36() {
    /* documentation: outpost access points support dualstack@af-south-1 */
    /* builtIns: {
        "AWS::Region": "af-south-1",
        "AWS::UseDualStack": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("af-south-1"));
        let builder = builder.use_dual_stack(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .delete_access_point()
            .set_name(::std::option::Option::Some(
                "arn:aws:s3-outposts:af-south-1:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts.af-south-1.api.aws"),
        "expected URI to start with `https://s3-outposts.af-south-1.api.aws` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_get_access_point_37() {
    /* documentation: outpost access points support fips + dualstack@af-south-1 */
    /* builtIns: {
        "AWS::Region": "af-south-1",
        "AWS::UseFIPS": true,
        "AWS::UseDualStack": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("af-south-1"));
        let builder = builder.use_fips(true);
        let builder = builder.use_dual_stack(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_access_point()
            .set_name(::std::option::Option::Some(
                "arn:aws:s3-outposts:af-south-1:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts-fips.af-south-1.api.aws"),
        "expected URI to start with `https://s3-outposts-fips.af-south-1.api.aws` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_delete_access_point_38() {
    /* documentation: outpost access points support fips + dualstack@af-south-1 */
    /* builtIns: {
        "AWS::Region": "af-south-1",
        "AWS::UseFIPS": true,
        "AWS::UseDualStack": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("af-south-1"));
        let builder = builder.use_fips(true);
        let builder = builder.use_dual_stack(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .delete_access_point()
            .set_name(::std::option::Option::Some(
                "arn:aws:s3-outposts:af-south-1:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts-fips.af-south-1.api.aws"),
        "expected URI to start with `https://s3-outposts-fips.af-south-1.api.aws` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_get_access_point_39() {
    /* documentation: Account ID set inline and in ARN but they both match@us-west-2 */
    /* builtIns: {
        "AWS::Region": "us-west-2",
        "AWS::S3Control::UseArnRegion": false
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-west-2"));
        let builder = builder.use_arn_region(false);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_access_point()
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .set_name(::std::option::Option::Some(
                "arn:aws:s3-outposts:us-west-2:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint".to_owned()
            ))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts.us-west-2.amazonaws.com"),
        "expected URI to start with `https://s3-outposts.us-west-2.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_get_access_point_40() {
    /* documentation: Account ID set inline and in ARN and they do not match@us-west-2 */
    /* builtIns: {
        "AWS::Region": "us-west-2",
        "AWS::S3Control::UseArnRegion": false
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-west-2"));
        let builder = builder.use_arn_region(false);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_access_point()
            .set_account_id(::std::option::Option::Some("999999999999".to_owned()))
            .set_name(::std::option::Option::Some(
                "arn:aws:s3-outposts:us-west-2:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint".to_owned()
            ))
            .send()
            .await
    );
    rcvr.expect_no_request();
    let error = _result.expect_err("expected error: Invalid ARN: the accountId specified in the ARN (`123456789012`) does not match the parameter (`999999999999`) [Account ID set inline and in ARN and they do not match@us-west-2]");
    assert!(
                                            format!("{:?}", error).contains("Invalid ARN: the accountId specified in the ARN (`123456789012`) does not match the parameter (`999999999999`)"),
                                            "expected error to contain `Invalid ARN: the accountId specified in the ARN (`123456789012`) does not match the parameter (`999999999999`)` but it was {:?}", error
                                        );
}

#[::tokio::test]
async fn operation_input_test_get_access_point_41() {
    /* documentation: get access point prefixed with account id using endpoint url@us-west-2 */
    /* builtIns: {
        "AWS::Region": "us-west-2",
        "SDK::Endpoint": "https://control.vpce-1a2b3c4d-5e6f.s3.us-west-2.vpce.amazonaws.com"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-west-2"));
        let builder = builder.endpoint_url("https://control.vpce-1a2b3c4d-5e6f.s3.us-west-2.vpce.amazonaws.com");
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_access_point()
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .set_name(::std::option::Option::Some("apname".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://123456789012.control.vpce-1a2b3c4d-5e6f.s3.us-west-2.vpce.amazonaws.com"),
        "expected URI to start with `https://123456789012.control.vpce-1a2b3c4d-5e6f.s3.us-west-2.vpce.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_get_access_point_42() {
    /* documentation: endpoint url with s3-outposts@us-west-2 */
    /* builtIns: {
        "AWS::Region": "us-west-2",
        "SDK::Endpoint": "https://beta.example.com"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-west-2"));
        let builder = builder.endpoint_url("https://beta.example.com");
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_access_point()
            .set_name(::std::option::Option::Some(
                "arn:aws:s3-outposts:us-west-2:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://beta.example.com"),
        "expected URI to start with `https://beta.example.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_get_bucket_43() {
    /* documentation: get bucket with endpoint_url@us-west-2 */
    /* builtIns: {
        "AWS::Region": "us-west-2",
        "SDK::Endpoint": "https://beta.example.com"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-west-2"));
        let builder = builder.endpoint_url("https://beta.example.com");
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_bucket()
            .set_bucket(::std::option::Option::Some(
                "arn:aws:s3-outposts:us-west-2:123456789012:outpost:op-01234567890123456:bucket:mybucket".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://beta.example.com"),
        "expected URI to start with `https://beta.example.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_list_regional_buckets_44() {
    /* documentation: ListRegionalBucket + OutpostId endpoint url@us-east-2 */
    /* builtIns: {
        "AWS::Region": "us-east-2",
        "SDK::Endpoint": "https://beta.example.com"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-2"));
        let builder = builder.endpoint_url("https://beta.example.com");
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .list_regional_buckets()
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .set_outpost_id(::std::option::Option::Some("op-123".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://beta.example.com"),
        "expected URI to start with `https://beta.example.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_list_regional_buckets_45() {
    /* documentation: ListRegionalBucket + OutpostId + fips + endpoint url@us-east-2 */
    /* builtIns: {
        "AWS::Region": "us-east-2",
        "AWS::UseFIPS": true,
        "SDK::Endpoint": "https://beta.example.com"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-2"));
        let builder = builder.use_fips(true);
        let builder = builder.endpoint_url("https://beta.example.com");
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .list_regional_buckets()
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .set_outpost_id(::std::option::Option::Some("op-123".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://beta.example.com"),
        "expected URI to start with `https://beta.example.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_list_regional_buckets_46() {
    /* documentation: ListRegionalBucket + OutpostId + fips + dualstack@us-east-2 */
    /* builtIns: {
        "AWS::Region": "us-east-2",
        "AWS::UseFIPS": true,
        "AWS::UseDualStack": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-2"));
        let builder = builder.use_fips(true);
        let builder = builder.use_dual_stack(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .list_regional_buckets()
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .set_outpost_id(::std::option::Option::Some("op-123".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts-fips.us-east-2.api.aws"),
        "expected URI to start with `https://s3-outposts-fips.us-east-2.api.aws` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_create_bucket_47() {
    /* documentation: CreateBucket + OutpostId endpoint url@us-east-2 */
    /* builtIns: {
        "AWS::Region": "us-east-2",
        "AWS::UseFIPS": true,
        "SDK::Endpoint": "https://beta.example.com"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-2"));
        let builder = builder.use_fips(true);
        let builder = builder.endpoint_url("https://beta.example.com");
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .create_bucket()
            .set_bucket(::std::option::Option::Some("blah".to_owned()))
            .set_outpost_id(::std::option::Option::Some("123".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://beta.example.com"),
        "expected URI to start with `https://beta.example.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_create_access_point_48() {
    /* documentation: vanilla bucket arn requires account id@us-west-2 */
    /* builtIns: {
        "AWS::Region": "us-west-2"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-west-2"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .create_access_point()
            .set_bucket(::std::option::Option::Some(
                "arn:aws:s3-outposts:us-west-2:123456789012:outpost:op-01234567890123456:bucket:mybucket".to_owned()
            ))
            .set_name(::std::option::Option::Some("apname".to_owned()))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts.us-west-2.amazonaws.com"),
        "expected URI to start with `https://s3-outposts.us-west-2.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_get_bucket_49() {
    /* documentation: bucket arn with UseArnRegion = true (arn region supercedes client configured region)@us-west-2 */
    /* builtIns: {
        "AWS::Region": "us-west-2"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-west-2"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_bucket()
            .set_bucket(::std::option::Option::Some(
                "arn:aws:s3-outposts:us-east-1:123456789012:outpost:op-01234567890123456:bucket:mybucket".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts.us-east-1.amazonaws.com"),
        "expected URI to start with `https://s3-outposts.us-east-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_get_bucket_50() {
    /* documentation: bucket ARN in gov partition (non-fips)@us-gov-east-1 */
    /* builtIns: {
        "AWS::Region": "us-gov-east-1"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-gov-east-1"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_bucket()
            .set_bucket(::std::option::Option::Some(
                "arn:aws-us-gov:s3-outposts:us-gov-east-1:123456789012:outpost:op-01234567890123456:bucket:mybucket".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts.us-gov-east-1.amazonaws.com"),
        "expected URI to start with `https://s3-outposts.us-gov-east-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_get_bucket_51() {
    /* documentation: bucket ARN in gov partition with FIPS@us-gov-west-1 */
    /* builtIns: {
        "AWS::Region": "us-gov-west-1",
        "AWS::UseFIPS": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-gov-west-1"));
        let builder = builder.use_fips(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_bucket()
            .set_bucket(::std::option::Option::Some(
                "arn:aws-us-gov:s3-outposts:us-gov-west-1:123456789012:outpost:op-01234567890123456:bucket:mybucket".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts-fips.us-gov-west-1.amazonaws.com"),
        "expected URI to start with `https://s3-outposts-fips.us-gov-west-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_get_bucket_52() {
    /* documentation: bucket ARN in aws partition with FIPS@us-east-2 */
    /* builtIns: {
        "AWS::Region": "us-east-2",
        "AWS::UseFIPS": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-2"));
        let builder = builder.use_fips(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_bucket()
            .set_bucket(::std::option::Option::Some(
                "arn:aws:s3-outposts:us-east-2:123456789012:outpost:op-01234567890123456:bucket:mybucket".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts-fips.us-east-2.amazonaws.com"),
        "expected URI to start with `https://s3-outposts-fips.us-east-2.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_get_bucket_53() {
    /* documentation: bucket ARN in aws partition with fips + dualstack@us-east-2 */
    /* builtIns: {
        "AWS::Region": "us-east-2",
        "AWS::UseFIPS": true,
        "AWS::UseDualStack": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-2"));
        let builder = builder.use_fips(true);
        let builder = builder.use_dual_stack(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_bucket()
            .set_bucket(::std::option::Option::Some(
                "arn:aws:s3-outposts:us-east-2:123456789012:outpost:op-01234567890123456:bucket:mybucket".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts-fips.us-east-2.api.aws"),
        "expected URI to start with `https://s3-outposts-fips.us-east-2.api.aws` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_create_access_point_54() {
    /* documentation: vanilla bucket arn requires account id@cn-north-1 */
    /* builtIns: {
        "AWS::Region": "cn-north-1"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("cn-north-1"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .create_access_point()
            .set_bucket(::std::option::Option::Some(
                "arn:aws-cn:s3-outposts:cn-north-1:123456789012:outpost:op-01234567890123456:bucket:mybucket".to_owned()
            ))
            .set_name(::std::option::Option::Some("apname".to_owned()))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts.cn-north-1.amazonaws.com.cn"),
        "expected URI to start with `https://s3-outposts.cn-north-1.amazonaws.com.cn` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_get_bucket_55() {
    /* documentation: bucket arn with UseArnRegion = true (arn region supercedes client configured region)@us-west-2 */
    /* builtIns: {
        "AWS::Region": "us-west-2"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-west-2"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_bucket()
            .set_bucket(::std::option::Option::Some(
                "arn:aws:s3-outposts:us-east-1:123456789012:outpost:op-01234567890123456:bucket:mybucket".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts.us-east-1.amazonaws.com"),
        "expected URI to start with `https://s3-outposts.us-east-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_get_bucket_56() {
    /* documentation: bucket ARN in gov partition (non-fips)@us-gov-east-1 */
    /* builtIns: {
        "AWS::Region": "us-gov-east-1"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-gov-east-1"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_bucket()
            .set_bucket(::std::option::Option::Some(
                "arn:aws-us-gov:s3-outposts:us-gov-east-1:123456789012:outpost:op-01234567890123456:bucket:mybucket".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts.us-gov-east-1.amazonaws.com"),
        "expected URI to start with `https://s3-outposts.us-gov-east-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_get_bucket_57() {
    /* documentation: bucket ARN in gov partition with FIPS@us-gov-west-1 */
    /* builtIns: {
        "AWS::Region": "us-gov-west-1",
        "AWS::UseFIPS": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-gov-west-1"));
        let builder = builder.use_fips(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_bucket()
            .set_bucket(::std::option::Option::Some(
                "arn:aws-us-gov:s3-outposts:us-gov-west-1:123456789012:outpost:op-01234567890123456:bucket:mybucket".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts-fips.us-gov-west-1.amazonaws.com"),
        "expected URI to start with `https://s3-outposts-fips.us-gov-west-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_get_bucket_58() {
    /* documentation: bucket ARN in aws partition with FIPS@us-east-2 */
    /* builtIns: {
        "AWS::Region": "us-east-2",
        "AWS::UseFIPS": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-2"));
        let builder = builder.use_fips(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_bucket()
            .set_bucket(::std::option::Option::Some(
                "arn:aws:s3-outposts:us-east-2:123456789012:outpost:op-01234567890123456:bucket:mybucket".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts-fips.us-east-2.amazonaws.com"),
        "expected URI to start with `https://s3-outposts-fips.us-east-2.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_get_bucket_59() {
    /* documentation: Outposts support dualstack @us-west-2 */
    /* builtIns: {
        "AWS::Region": "us-west-2",
        "AWS::UseDualStack": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-west-2"));
        let builder = builder.use_dual_stack(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_bucket()
            .set_bucket(::std::option::Option::Some(
                "arn:aws:s3-outposts:us-west-2:123456789012:outpost:op-01234567890123456:bucket:mybucket".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts.us-west-2.api.aws"),
        "expected URI to start with `https://s3-outposts.us-west-2.api.aws` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_create_access_point_60() {
    /* documentation: vanilla bucket arn requires account id@af-south-1 */
    /* builtIns: {
        "AWS::Region": "af-south-1"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("af-south-1"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .create_access_point()
            .set_bucket(::std::option::Option::Some(
                "arn:aws:s3-outposts:af-south-1:123456789012:outpost:op-01234567890123456:bucket:mybucket".to_owned()
            ))
            .set_name(::std::option::Option::Some("apname".to_owned()))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts.af-south-1.amazonaws.com"),
        "expected URI to start with `https://s3-outposts.af-south-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_get_bucket_61() {
    /* documentation: bucket arn with UseArnRegion = true (arn region supercedes client configured region)@us-west-2 */
    /* builtIns: {
        "AWS::Region": "us-west-2"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-west-2"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_bucket()
            .set_bucket(::std::option::Option::Some(
                "arn:aws:s3-outposts:us-east-1:123456789012:outpost:op-01234567890123456:bucket:mybucket".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts.us-east-1.amazonaws.com"),
        "expected URI to start with `https://s3-outposts.us-east-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_get_bucket_62() {
    /* documentation: bucket ARN in gov partition (non-fips)@us-gov-east-1 */
    /* builtIns: {
        "AWS::Region": "us-gov-east-1"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-gov-east-1"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_bucket()
            .set_bucket(::std::option::Option::Some(
                "arn:aws-us-gov:s3-outposts:us-gov-east-1:123456789012:outpost:op-01234567890123456:bucket:mybucket".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts.us-gov-east-1.amazonaws.com"),
        "expected URI to start with `https://s3-outposts.us-gov-east-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_get_bucket_63() {
    /* documentation: bucket ARN in gov partition with FIPS@us-gov-west-1 */
    /* builtIns: {
        "AWS::Region": "us-gov-west-1",
        "AWS::UseFIPS": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-gov-west-1"));
        let builder = builder.use_fips(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_bucket()
            .set_bucket(::std::option::Option::Some(
                "arn:aws-us-gov:s3-outposts:us-gov-west-1:123456789012:outpost:op-01234567890123456:bucket:mybucket".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts-fips.us-gov-west-1.amazonaws.com"),
        "expected URI to start with `https://s3-outposts-fips.us-gov-west-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_get_bucket_64() {
    /* documentation: bucket ARN in aws partition with FIPS@us-east-2 */
    /* builtIns: {
        "AWS::Region": "us-east-2",
        "AWS::UseFIPS": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-2"));
        let builder = builder.use_fips(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_bucket()
            .set_bucket(::std::option::Option::Some(
                "arn:aws:s3-outposts:us-east-2:123456789012:outpost:op-01234567890123456:bucket:mybucket".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts-fips.us-east-2.amazonaws.com"),
        "expected URI to start with `https://s3-outposts-fips.us-east-2.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_list_regional_buckets_65() {
    /* documentation: custom account id prefix @us-east-1 */
    /* builtIns: {
        "AWS::Region": "us-east-1"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .list_regional_buckets()
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://123456789012.s3-control.us-east-1.amazonaws.com"),
        "expected URI to start with `https://123456789012.s3-control.us-east-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_list_regional_buckets_66() {
    /* documentation: custom account id prefix with fips@us-east-1 */
    /* builtIns: {
        "AWS::Region": "us-east-1",
        "AWS::UseFIPS": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        let builder = builder.use_fips(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .list_regional_buckets()
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://123456789012.s3-control-fips.us-east-1.amazonaws.com"),
        "expected URI to start with `https://123456789012.s3-control-fips.us-east-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_list_regional_buckets_67() {
    /* documentation: custom account id prefix with dualstack,fips@us-east-1 */
    /* builtIns: {
        "AWS::Region": "us-east-1",
        "AWS::UseFIPS": true,
        "AWS::UseDualStack": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        let builder = builder.use_fips(true);
        let builder = builder.use_dual_stack(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .list_regional_buckets()
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://123456789012.s3-control-fips.dualstack.us-east-1.amazonaws.com"),
        "expected URI to start with `https://123456789012.s3-control-fips.dualstack.us-east-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_list_regional_buckets_68() {
    /* documentation: custom account id with custom endpoint */
    /* builtIns: {
        "AWS::Region": "us-east-1",
        "SDK::Endpoint": "https://example.com"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        let builder = builder.endpoint_url("https://example.com");
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .list_regional_buckets()
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://123456789012.example.com"),
        "expected URI to start with `https://123456789012.example.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_list_regional_buckets_69() {
    /* documentation: account id with custom endpoint, fips */
    /* builtIns: {
        "AWS::Region": "us-east-1",
        "AWS::UseFIPS": true,
        "SDK::Endpoint": "https://example.com"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        let builder = builder.use_fips(true);
        let builder = builder.endpoint_url("https://example.com");
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .list_regional_buckets()
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://123456789012.example.com"),
        "expected URI to start with `https://123456789012.example.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_get_access_point_70() {
    /* documentation: endpoint url with accesspoint (non-arn) */
    /* builtIns: {
        "AWS::Region": "us-west-2",
        "SDK::Endpoint": "https://beta.example.com"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-west-2"));
        let builder = builder.endpoint_url("https://beta.example.com");
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_access_point()
            .set_name(::std::option::Option::Some("apname".to_owned()))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://123456789012.beta.example.com"),
        "expected URI to start with `https://123456789012.beta.example.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_get_access_point_71() {
    /* documentation: DualStack + Custom endpoint is not supported(non-arn) */
    /* builtIns: {
        "AWS::Region": "us-west-2",
        "AWS::UseDualStack": true,
        "SDK::Endpoint": "https://beta.example.com"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-west-2"));
        let builder = builder.use_dual_stack(true);
        let builder = builder.endpoint_url("https://beta.example.com");
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_access_point()
            .set_name(::std::option::Option::Some("apname".to_owned()))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    rcvr.expect_no_request();
    let error = _result.expect_err("expected error: Invalid Configuration: DualStack and custom endpoint are not supported [DualStack + Custom endpoint is not supported(non-arn)]");
    assert!(
        format!("{:?}", error).contains("Invalid Configuration: DualStack and custom endpoint are not supported"),
        "expected error to contain `Invalid Configuration: DualStack and custom endpoint are not supported` but it was {:?}",
        error
    );
}

#[::tokio::test]
async fn operation_input_test_get_bucket_72() {
    /* documentation: get bucket with custom endpoint and dualstack is not supported@us-west-2 */
    /* builtIns: {
        "AWS::Region": "us-west-2",
        "AWS::UseDualStack": true,
        "SDK::Endpoint": "https://s3-outposts.us-west-2.api.aws"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-west-2"));
        let builder = builder.use_dual_stack(true);
        let builder = builder.endpoint_url("https://s3-outposts.us-west-2.api.aws");
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_bucket()
            .set_bucket(::std::option::Option::Some(
                "arn:aws:s3-outposts:us-west-2:123456789012:outpost:op-01234567890123456:bucket:mybucket".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    rcvr.expect_no_request();
    let error = _result.expect_err("expected error: Invalid Configuration: DualStack and custom endpoint are not supported [get bucket with custom endpoint and dualstack is not supported@us-west-2]");
    assert!(
        format!("{:?}", error).contains("Invalid Configuration: DualStack and custom endpoint are not supported"),
        "expected error to contain `Invalid Configuration: DualStack and custom endpoint are not supported` but it was {:?}",
        error
    );
}

#[::tokio::test]
async fn operation_input_test_list_regional_buckets_73() {
    /* documentation: ListRegionalBuckets + OutpostId with fips in CN. */
    /* builtIns: {
        "AWS::Region": "cn-north-1",
        "AWS::UseFIPS": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("cn-north-1"));
        let builder = builder.use_fips(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .list_regional_buckets()
            .set_outpost_id(::std::option::Option::Some("op-123".to_owned()))
            .set_account_id(::std::option::Option::Some("012345678912".to_owned()))
            .send()
            .await
    );
    rcvr.expect_no_request();
    let error = _result.expect_err("expected error: Partition does not support FIPS [ListRegionalBuckets + OutpostId with fips in CN.]");
    assert!(
        format!("{:?}", error).contains("Partition does not support FIPS"),
        "expected error to contain `Partition does not support FIPS` but it was {:?}",
        error
    );
}

#[::tokio::test]
async fn operation_input_test_list_regional_buckets_74() {
    /* documentation: ListRegionalBuckets + invalid OutpostId. */
    /* builtIns: {
        "AWS::Region": "us-west-1"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-west-1"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .list_regional_buckets()
            .set_outpost_id(::std::option::Option::Some("?outpost/invalid+".to_owned()))
            .set_account_id(::std::option::Option::Some("012345678912".to_owned()))
            .send()
            .await
    );
    rcvr.expect_no_request();
    let error = _result.expect_err("expected error: OutpostId must only contain a-z, A-Z, 0-9 and `-`. [ListRegionalBuckets + invalid OutpostId.]");
    assert!(
        format!("{:?}", error).contains("OutpostId must only contain a-z, A-Z, 0-9 and `-`."),
        "expected error to contain `OutpostId must only contain a-z, A-Z, 0-9 and `-`.` but it was {:?}",
        error
    );
}

#[::tokio::test]
async fn operation_input_test_get_access_point_75() {
    /* documentation: Outpost Accesspoint ARN with arn region and client region mismatch with UseArnRegion=false */
    /* builtIns: {
        "AWS::Region": "us-west-2",
        "AWS::S3Control::UseArnRegion": false
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-west-2"));
        let builder = builder.use_arn_region(false);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_access_point()
            .set_name(::std::option::Option::Some(
                "arn:aws:s3-outposts:us-east-1:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    rcvr.expect_no_request();
    let error = _result.expect_err("expected error: Invalid configuration: region from ARN `us-east-1` does not match client region `us-west-2` and UseArnRegion is `false` [Outpost Accesspoint ARN with arn region and client region mismatch with UseArnRegion=false]");
    assert!(
                                            format!("{:?}", error).contains("Invalid configuration: region from ARN `us-east-1` does not match client region `us-west-2` and UseArnRegion is `false`"),
                                            "expected error to contain `Invalid configuration: region from ARN `us-east-1` does not match client region `us-west-2` and UseArnRegion is `false`` but it was {:?}", error
                                        );
}

#[::tokio::test]
async fn operation_input_test_delete_access_point_76() {
    /* documentation: Outpost Accesspoint ARN with arn region and client region mismatch with UseArnRegion=false */
    /* builtIns: {
        "AWS::Region": "us-west-2",
        "AWS::S3Control::UseArnRegion": false
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-west-2"));
        let builder = builder.use_arn_region(false);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .delete_access_point()
            .set_name(::std::option::Option::Some(
                "arn:aws:s3-outposts:us-east-1:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    rcvr.expect_no_request();
    let error = _result.expect_err("expected error: Invalid configuration: region from ARN `us-east-1` does not match client region `us-west-2` and UseArnRegion is `false` [Outpost Accesspoint ARN with arn region and client region mismatch with UseArnRegion=false]");
    assert!(
                                            format!("{:?}", error).contains("Invalid configuration: region from ARN `us-east-1` does not match client region `us-west-2` and UseArnRegion is `false`"),
                                            "expected error to contain `Invalid configuration: region from ARN `us-east-1` does not match client region `us-west-2` and UseArnRegion is `false`` but it was {:?}", error
                                        );
}

#[::tokio::test]
async fn operation_input_test_get_bucket_77() {
    /* documentation: Outpost Bucket ARN with arn region and client region mismatch with UseArnRegion=false */
    /* builtIns: {
        "AWS::Region": "us-west-2",
        "SDK::Endpoint": "https://beta.example.com",
        "AWS::S3Control::UseArnRegion": false
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-west-2"));
        let builder = builder.endpoint_url("https://beta.example.com");
        let builder = builder.use_arn_region(false);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_bucket()
            .set_bucket(::std::option::Option::Some(
                "arn:aws:s3-outposts:us-east-1:123456789012:outpost:op-01234567890123456:bucket:mybucket".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    rcvr.expect_no_request();
    let error = _result.expect_err("expected error: Invalid configuration: region from ARN `us-east-1` does not match client region `us-west-2` and UseArnRegion is `false` [Outpost Bucket ARN with arn region and client region mismatch with UseArnRegion=false]");
    assert!(
                                            format!("{:?}", error).contains("Invalid configuration: region from ARN `us-east-1` does not match client region `us-west-2` and UseArnRegion is `false`"),
                                            "expected error to contain `Invalid configuration: region from ARN `us-east-1` does not match client region `us-west-2` and UseArnRegion is `false`` but it was {:?}", error
                                        );
}

#[::tokio::test]
async fn operation_input_test_get_access_point_78() {
    /* documentation: Accesspoint ARN with region mismatch and UseArnRegion unset */
    /* builtIns: {
        "AWS::Region": "us-west-2"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-west-2"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_access_point()
            .set_name(::std::option::Option::Some(
                "arn:aws:s3-outposts:us-east-1:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts.us-east-1.amazonaws.com"),
        "expected URI to start with `https://s3-outposts.us-east-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_delete_access_point_79() {
    /* documentation: Accesspoint ARN with region mismatch and UseArnRegion unset */
    /* builtIns: {
        "AWS::Region": "us-west-2"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-west-2"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .delete_access_point()
            .set_name(::std::option::Option::Some(
                "arn:aws:s3-outposts:us-east-1:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts.us-east-1.amazonaws.com"),
        "expected URI to start with `https://s3-outposts.us-east-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_get_bucket_80() {
    /* documentation: Bucket ARN with region mismatch and UseArnRegion unset */
    /* builtIns: {
        "AWS::Region": "us-west-2"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-west-2"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_bucket()
            .set_bucket(::std::option::Option::Some(
                "arn:aws:s3-outposts:us-east-1:123456789012:outpost:op-01234567890123456:bucket:mybucket".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts.us-east-1.amazonaws.com"),
        "expected URI to start with `https://s3-outposts.us-east-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_get_bucket_81() {
    /* documentation: Outpost Bucket ARN with partition mismatch with UseArnRegion=true */
    /* builtIns: {
        "AWS::Region": "us-west-2",
        "AWS::S3Control::UseArnRegion": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-west-2"));
        let builder = builder.use_arn_region(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_bucket()
            .set_bucket(::std::option::Option::Some(
                "arn:aws:s3-outposts:cn-north-1:123456789012:outpost:op-01234567890123456:bucket:mybucket".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    rcvr.expect_no_request();
    let error = _result.expect_err("expected error: Client was configured for partition `aws` but ARN has `aws-cn` [Outpost Bucket ARN with partition mismatch with UseArnRegion=true]");
    assert!(
        format!("{:?}", error).contains("Client was configured for partition `aws` but ARN has `aws-cn`"),
        "expected error to contain `Client was configured for partition `aws` but ARN has `aws-cn`` but it was {:?}",
        error
    );
}

#[::tokio::test]
async fn operation_input_test_get_access_point_82() {
    /* documentation: Accesspoint ARN with partition mismatch and UseArnRegion=true */
    /* builtIns: {
        "AWS::Region": "us-west-2",
        "AWS::S3Control::UseArnRegion": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-west-2"));
        let builder = builder.use_arn_region(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_access_point()
            .set_name(::std::option::Option::Some(
                "arn:aws:s3-outposts:cn-north-1:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    rcvr.expect_no_request();
    let error = _result.expect_err("expected error: Client was configured for partition `aws` but ARN has `aws-cn` [Accesspoint ARN with partition mismatch and UseArnRegion=true]");
    assert!(
        format!("{:?}", error).contains("Client was configured for partition `aws` but ARN has `aws-cn`"),
        "expected error to contain `Client was configured for partition `aws` but ARN has `aws-cn`` but it was {:?}",
        error
    );
}

#[::tokio::test]
async fn operation_input_test_delete_access_point_83() {
    /* documentation: Accesspoint ARN with partition mismatch and UseArnRegion=true */
    /* builtIns: {
        "AWS::Region": "us-west-2",
        "AWS::S3Control::UseArnRegion": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-west-2"));
        let builder = builder.use_arn_region(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .delete_access_point()
            .set_name(::std::option::Option::Some(
                "arn:aws:s3-outposts:cn-north-1:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    rcvr.expect_no_request();
    let error = _result.expect_err("expected error: Client was configured for partition `aws` but ARN has `aws-cn` [Accesspoint ARN with partition mismatch and UseArnRegion=true]");
    assert!(
        format!("{:?}", error).contains("Client was configured for partition `aws` but ARN has `aws-cn`"),
        "expected error to contain `Client was configured for partition `aws` but ARN has `aws-cn`` but it was {:?}",
        error
    );
}

#[::tokio::test]
async fn operation_input_test_get_bucket_versioning_84() {
    /* documentation: outpost bucket arn@us-west-2 */
    /* builtIns: {
        "AWS::Region": "us-west-2"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-west-2"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_bucket_versioning()
            .set_bucket(::std::option::Option::Some(
                "arn:aws:s3-outposts:us-west-2:123456789012:outpost:op-01234567890123456:bucket:mybucket".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts.us-west-2.amazonaws.com"),
        "expected URI to start with `https://s3-outposts.us-west-2.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_put_bucket_versioning_85() {
    /* documentation: outpost bucket arn@us-west-2 */
    /* builtIns: {
        "AWS::Region": "us-west-2"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-west-2"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .put_bucket_versioning()
            .set_bucket(::std::option::Option::Some(
                "arn:aws:s3-outposts:us-west-2:123456789012:outpost:op-01234567890123456:bucket:mybucket".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .set_versioning_configuration(::std::option::Option::Some(
                aws_sdk_s3control::types::VersioningConfiguration::builder()
                    .set_status(::std::option::Option::Some(
                        "Enabled"
                            .parse::<aws_sdk_s3control::types::BucketVersioningStatus>()
                            .expect("static value validated to member")
                    ))
                    .build()
            ))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts.us-west-2.amazonaws.com"),
        "expected URI to start with `https://s3-outposts.us-west-2.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_tag_resource_86() {
    /* documentation: Tagging on express bucket routed to s3express-control */
    /* builtIns: {
        "AWS::Region": "us-east-1"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .tag_resource()
            .set_resource_arn(::std::option::Option::Some(
                "arn:aws:s3express:us-east-1:871317572157:bucket/crachlintest--use1-az4--x-s3".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .set_tags(::std::option::Option::Some(vec![]))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3express-control.us-east-1.amazonaws.com"),
        "expected URI to start with `https://s3express-control.us-east-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_untag_resource_87() {
    /* documentation: Tagging on express bucket routed to s3express-control */
    /* builtIns: {
        "AWS::Region": "us-east-1"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .untag_resource()
            .set_resource_arn(::std::option::Option::Some(
                "arn:aws:s3express:us-east-1:871317572157:bucket/crachlintest--use1-az4--x-s3".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .set_tag_keys(::std::option::Option::Some(vec![]))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3express-control.us-east-1.amazonaws.com"),
        "expected URI to start with `https://s3express-control.us-east-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_list_tags_for_resource_88() {
    /* documentation: Tagging on express bucket routed to s3express-control */
    /* builtIns: {
        "AWS::Region": "us-east-1"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .list_tags_for_resource()
            .set_resource_arn(::std::option::Option::Some(
                "arn:aws:s3express:us-east-1:871317572157:bucket/crachlintest--use1-az4--x-s3".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3express-control.us-east-1.amazonaws.com"),
        "expected URI to start with `https://s3express-control.us-east-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_tag_resource_89() {
    /* documentation: Tagging on express ap routed to s3express-control */
    /* builtIns: {
        "AWS::Region": "us-east-1"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .tag_resource()
            .set_resource_arn(::std::option::Option::Some(
                "arn:aws:s3express:us-east-1:871317572157:accesspoint/crachlintest--use1-az4--xa-s3".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .set_tags(::std::option::Option::Some(vec![]))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3express-control.us-east-1.amazonaws.com"),
        "expected URI to start with `https://s3express-control.us-east-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_untag_resource_90() {
    /* documentation: Tagging on express ap routed to s3express-control */
    /* builtIns: {
        "AWS::Region": "us-east-1"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .untag_resource()
            .set_resource_arn(::std::option::Option::Some(
                "arn:aws:s3express:us-east-1:871317572157:accesspoint/crachlintest--use1-az4--xa-s3".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .set_tag_keys(::std::option::Option::Some(vec![]))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3express-control.us-east-1.amazonaws.com"),
        "expected URI to start with `https://s3express-control.us-east-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_list_tags_for_resource_91() {
    /* documentation: Tagging on express ap routed to s3express-control */
    /* builtIns: {
        "AWS::Region": "us-east-1"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .list_tags_for_resource()
            .set_resource_arn(::std::option::Option::Some(
                "arn:aws:s3express:us-east-1:871317572157:accesspoint/crachlintest--use1-az4--xa-s3".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3express-control.us-east-1.amazonaws.com"),
        "expected URI to start with `https://s3express-control.us-east-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_tag_resource_92() {
    /* documentation: Tagging on express bucket routed to s3express-control FIPS when FIPS enabled */
    /* builtIns: {
        "AWS::Region": "us-east-1",
        "AWS::UseFIPS": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        let builder = builder.use_fips(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .tag_resource()
            .set_resource_arn(::std::option::Option::Some(
                "arn:aws:s3express:us-east-1:871317572157:bucket/crachlintest--use1-az4--x-s3".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .set_tags(::std::option::Option::Some(vec![]))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3express-control-fips.us-east-1.amazonaws.com"),
        "expected URI to start with `https://s3express-control-fips.us-east-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_untag_resource_93() {
    /* documentation: Tagging on express bucket routed to s3express-control FIPS when FIPS enabled */
    /* builtIns: {
        "AWS::Region": "us-east-1",
        "AWS::UseFIPS": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        let builder = builder.use_fips(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .untag_resource()
            .set_resource_arn(::std::option::Option::Some(
                "arn:aws:s3express:us-east-1:871317572157:bucket/crachlintest--use1-az4--x-s3".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .set_tag_keys(::std::option::Option::Some(vec![]))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3express-control-fips.us-east-1.amazonaws.com"),
        "expected URI to start with `https://s3express-control-fips.us-east-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_list_tags_for_resource_94() {
    /* documentation: Tagging on express bucket routed to s3express-control FIPS when FIPS enabled */
    /* builtIns: {
        "AWS::Region": "us-east-1",
        "AWS::UseFIPS": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        let builder = builder.use_fips(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .list_tags_for_resource()
            .set_resource_arn(::std::option::Option::Some(
                "arn:aws:s3express:us-east-1:871317572157:bucket/crachlintest--use1-az4--x-s3".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3express-control-fips.us-east-1.amazonaws.com"),
        "expected URI to start with `https://s3express-control-fips.us-east-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_tag_resource_95() {
    /* documentation: Tagging on express bucket cn routed to s3express-control china endpoint */
    /* builtIns: {
        "AWS::Region": "cn-north-1"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("cn-north-1"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .tag_resource()
            .set_resource_arn(::std::option::Option::Some(
                "arn:aws-cn:s3express:cn-north-1:871317572157:bucket/crachlintest--use1-az4--x-s3".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .set_tags(::std::option::Option::Some(vec![]))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3express-control.cn-north-1.amazonaws.com.cn"),
        "expected URI to start with `https://s3express-control.cn-north-1.amazonaws.com.cn` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_untag_resource_96() {
    /* documentation: Tagging on express bucket cn routed to s3express-control china endpoint */
    /* builtIns: {
        "AWS::Region": "cn-north-1"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("cn-north-1"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .untag_resource()
            .set_resource_arn(::std::option::Option::Some(
                "arn:aws-cn:s3express:cn-north-1:871317572157:bucket/crachlintest--use1-az4--x-s3".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .set_tag_keys(::std::option::Option::Some(vec![]))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3express-control.cn-north-1.amazonaws.com.cn"),
        "expected URI to start with `https://s3express-control.cn-north-1.amazonaws.com.cn` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_list_tags_for_resource_97() {
    /* documentation: Tagging on express bucket cn routed to s3express-control china endpoint */
    /* builtIns: {
        "AWS::Region": "cn-north-1"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("cn-north-1"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .list_tags_for_resource()
            .set_resource_arn(::std::option::Option::Some(
                "arn:aws-cn:s3express:cn-north-1:871317572157:bucket/crachlintest--use1-az4--x-s3".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3express-control.cn-north-1.amazonaws.com.cn"),
        "expected URI to start with `https://s3express-control.cn-north-1.amazonaws.com.cn` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_tag_resource_98() {
    /* documentation: Tagging on express bucket cn routed to s3express-control china endpoint with FIPS */
    /* builtIns: {
        "AWS::Region": "cn-north-1",
        "AWS::UseFIPS": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("cn-north-1"));
        let builder = builder.use_fips(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .tag_resource()
            .set_resource_arn(::std::option::Option::Some(
                "arn:aws-cn:s3express:cn-north-1:871317572157:bucket/crachlintest--use1-az4--x-s3".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .set_tags(::std::option::Option::Some(vec![]))
            .send()
            .await
    );
    rcvr.expect_no_request();
    let error = _result.expect_err(
        "expected error: Partition does not support FIPS [Tagging on express bucket cn routed to s3express-control china endpoint with FIPS]",
    );
    assert!(
        format!("{:?}", error).contains("Partition does not support FIPS"),
        "expected error to contain `Partition does not support FIPS` but it was {:?}",
        error
    );
}

#[::tokio::test]
async fn operation_input_test_untag_resource_99() {
    /* documentation: Tagging on express bucket cn routed to s3express-control china endpoint with FIPS */
    /* builtIns: {
        "AWS::Region": "cn-north-1",
        "AWS::UseFIPS": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("cn-north-1"));
        let builder = builder.use_fips(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .untag_resource()
            .set_resource_arn(::std::option::Option::Some(
                "arn:aws-cn:s3express:cn-north-1:871317572157:bucket/crachlintest--use1-az4--x-s3".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .set_tag_keys(::std::option::Option::Some(vec![]))
            .send()
            .await
    );
    rcvr.expect_no_request();
    let error = _result.expect_err(
        "expected error: Partition does not support FIPS [Tagging on express bucket cn routed to s3express-control china endpoint with FIPS]",
    );
    assert!(
        format!("{:?}", error).contains("Partition does not support FIPS"),
        "expected error to contain `Partition does not support FIPS` but it was {:?}",
        error
    );
}

#[::tokio::test]
async fn operation_input_test_list_tags_for_resource_100() {
    /* documentation: Tagging on express bucket cn routed to s3express-control china endpoint with FIPS */
    /* builtIns: {
        "AWS::Region": "cn-north-1",
        "AWS::UseFIPS": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("cn-north-1"));
        let builder = builder.use_fips(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .list_tags_for_resource()
            .set_resource_arn(::std::option::Option::Some(
                "arn:aws-cn:s3express:cn-north-1:871317572157:bucket/crachlintest--use1-az4--x-s3".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .send()
            .await
    );
    rcvr.expect_no_request();
    let error = _result.expect_err(
        "expected error: Partition does not support FIPS [Tagging on express bucket cn routed to s3express-control china endpoint with FIPS]",
    );
    assert!(
        format!("{:?}", error).contains("Partition does not support FIPS"),
        "expected error to contain `Partition does not support FIPS` but it was {:?}",
        error
    );
}

#[::tokio::test]
async fn operation_input_test_tag_resource_101() {
    /* documentation: Tagging on express bucket with custom endpoint routed to custom endpoint */
    /* builtIns: {
        "AWS::Region": "us-east-1",
        "SDK::Endpoint": "https://my-endpoint.express-control.s3.aws.dev"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        let builder = builder.endpoint_url("https://my-endpoint.express-control.s3.aws.dev");
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .tag_resource()
            .set_resource_arn(::std::option::Option::Some(
                "arn:aws:s3express:us-east-1:871317572157:bucket/crachlintest--use1-az4--x-s3".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .set_tags(::std::option::Option::Some(vec![]))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://my-endpoint.express-control.s3.aws.dev"),
        "expected URI to start with `https://my-endpoint.express-control.s3.aws.dev` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_untag_resource_102() {
    /* documentation: Tagging on express bucket with custom endpoint routed to custom endpoint */
    /* builtIns: {
        "AWS::Region": "us-east-1",
        "SDK::Endpoint": "https://my-endpoint.express-control.s3.aws.dev"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        let builder = builder.endpoint_url("https://my-endpoint.express-control.s3.aws.dev");
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .untag_resource()
            .set_resource_arn(::std::option::Option::Some(
                "arn:aws:s3express:us-east-1:871317572157:bucket/crachlintest--use1-az4--x-s3".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .set_tag_keys(::std::option::Option::Some(vec![]))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://my-endpoint.express-control.s3.aws.dev"),
        "expected URI to start with `https://my-endpoint.express-control.s3.aws.dev` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_list_tags_for_resource_103() {
    /* documentation: Tagging on express bucket with custom endpoint routed to custom endpoint */
    /* builtIns: {
        "AWS::Region": "us-east-1",
        "SDK::Endpoint": "https://my-endpoint.express-control.s3.aws.dev"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        let builder = builder.endpoint_url("https://my-endpoint.express-control.s3.aws.dev");
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .list_tags_for_resource()
            .set_resource_arn(::std::option::Option::Some(
                "arn:aws:s3express:us-east-1:871317572157:bucket/crachlintest--use1-az4--x-s3".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://my-endpoint.express-control.s3.aws.dev"),
        "expected URI to start with `https://my-endpoint.express-control.s3.aws.dev` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_tag_resource_104() {
    /* documentation: Tagging on express access point with custom endpoint routed to custom endpoint */
    /* builtIns: {
        "AWS::Region": "us-east-1",
        "SDK::Endpoint": "https://my-endpoint.express-control.s3.aws.dev"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        let builder = builder.endpoint_url("https://my-endpoint.express-control.s3.aws.dev");
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .tag_resource()
            .set_resource_arn(::std::option::Option::Some(
                "arn:aws:s3express:us-east-1:871317572157:accesspoint/crachlintest--use1-az4--xa-s3".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .set_tags(::std::option::Option::Some(vec![]))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://my-endpoint.express-control.s3.aws.dev"),
        "expected URI to start with `https://my-endpoint.express-control.s3.aws.dev` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_untag_resource_105() {
    /* documentation: Tagging on express access point with custom endpoint routed to custom endpoint */
    /* builtIns: {
        "AWS::Region": "us-east-1",
        "SDK::Endpoint": "https://my-endpoint.express-control.s3.aws.dev"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        let builder = builder.endpoint_url("https://my-endpoint.express-control.s3.aws.dev");
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .untag_resource()
            .set_resource_arn(::std::option::Option::Some(
                "arn:aws:s3express:us-east-1:871317572157:accesspoint/crachlintest--use1-az4--xa-s3".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .set_tag_keys(::std::option::Option::Some(vec![]))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://my-endpoint.express-control.s3.aws.dev"),
        "expected URI to start with `https://my-endpoint.express-control.s3.aws.dev` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_list_tags_for_resource_106() {
    /* documentation: Tagging on express access point with custom endpoint routed to custom endpoint */
    /* builtIns: {
        "AWS::Region": "us-east-1",
        "SDK::Endpoint": "https://my-endpoint.express-control.s3.aws.dev"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        let builder = builder.endpoint_url("https://my-endpoint.express-control.s3.aws.dev");
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .list_tags_for_resource()
            .set_resource_arn(::std::option::Option::Some(
                "arn:aws:s3express:us-east-1:871317572157:accesspoint/crachlintest--use1-az4--xa-s3".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://my-endpoint.express-control.s3.aws.dev"),
        "expected URI to start with `https://my-endpoint.express-control.s3.aws.dev` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_tag_resource_107() {
    /* documentation: Tagging on express bucket with dualstack and custom endpoint fails */
    /* builtIns: {
        "AWS::Region": "us-east-1",
        "SDK::Endpoint": "https://my-endpoint.express-control.s3.aws.dev",
        "AWS::UseDualStack": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        let builder = builder.endpoint_url("https://my-endpoint.express-control.s3.aws.dev");
        let builder = builder.use_dual_stack(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .tag_resource()
            .set_resource_arn(::std::option::Option::Some(
                "arn:aws:s3express:us-east-1:871317572157:bucket/crachlintest--use1-az4--x-s3".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .set_tags(::std::option::Option::Some(vec![]))
            .send()
            .await
    );
    rcvr.expect_no_request();
    let error = _result.expect_err("expected error: Invalid Configuration: DualStack and custom endpoint are not supported [Tagging on express bucket with dualstack and custom endpoint fails]");
    assert!(
        format!("{:?}", error).contains("Invalid Configuration: DualStack and custom endpoint are not supported"),
        "expected error to contain `Invalid Configuration: DualStack and custom endpoint are not supported` but it was {:?}",
        error
    );
}

#[::tokio::test]
async fn operation_input_test_untag_resource_108() {
    /* documentation: Tagging on express bucket with dualstack and custom endpoint fails */
    /* builtIns: {
        "AWS::Region": "us-east-1",
        "SDK::Endpoint": "https://my-endpoint.express-control.s3.aws.dev",
        "AWS::UseDualStack": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        let builder = builder.endpoint_url("https://my-endpoint.express-control.s3.aws.dev");
        let builder = builder.use_dual_stack(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .untag_resource()
            .set_resource_arn(::std::option::Option::Some(
                "arn:aws:s3express:us-east-1:871317572157:bucket/crachlintest--use1-az4--x-s3".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .set_tag_keys(::std::option::Option::Some(vec![]))
            .send()
            .await
    );
    rcvr.expect_no_request();
    let error = _result.expect_err("expected error: Invalid Configuration: DualStack and custom endpoint are not supported [Tagging on express bucket with dualstack and custom endpoint fails]");
    assert!(
        format!("{:?}", error).contains("Invalid Configuration: DualStack and custom endpoint are not supported"),
        "expected error to contain `Invalid Configuration: DualStack and custom endpoint are not supported` but it was {:?}",
        error
    );
}

#[::tokio::test]
async fn operation_input_test_list_tags_for_resource_109() {
    /* documentation: Tagging on express bucket with dualstack and custom endpoint fails */
    /* builtIns: {
        "AWS::Region": "us-east-1",
        "SDK::Endpoint": "https://my-endpoint.express-control.s3.aws.dev",
        "AWS::UseDualStack": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        let builder = builder.endpoint_url("https://my-endpoint.express-control.s3.aws.dev");
        let builder = builder.use_dual_stack(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .list_tags_for_resource()
            .set_resource_arn(::std::option::Option::Some(
                "arn:aws:s3express:us-east-1:871317572157:bucket/crachlintest--use1-az4--x-s3".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .send()
            .await
    );
    rcvr.expect_no_request();
    let error = _result.expect_err("expected error: Invalid Configuration: DualStack and custom endpoint are not supported [Tagging on express bucket with dualstack and custom endpoint fails]");
    assert!(
        format!("{:?}", error).contains("Invalid Configuration: DualStack and custom endpoint are not supported"),
        "expected error to contain `Invalid Configuration: DualStack and custom endpoint are not supported` but it was {:?}",
        error
    );
}

#[::tokio::test]
async fn operation_input_test_create_access_point_110() {
    /* documentation: Access Point APIs on express bucket routed to s3express-control */
    /* builtIns: {
        "AWS::Region": "us-east-1"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .create_access_point()
            .set_name(::std::option::Option::Some("myaccesspoint--abcd-ab1--xa-s3".to_owned()))
            .set_bucket(::std::option::Option::Some("mybucket--abcd-ab1--x-s3".to_owned()))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .set_scope(::std::option::Option::Some(
                aws_sdk_s3control::types::Scope::builder()
                    .set_prefixes(::std::option::Option::Some(vec![]))
                    .set_permissions(::std::option::Option::Some(vec![]))
                    .build()
            ))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3express-control.us-east-1.amazonaws.com"),
        "expected URI to start with `https://s3express-control.us-east-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_get_access_point_111() {
    /* documentation: Access Point APIs on express bucket routed to s3express-control */
    /* builtIns: {
        "AWS::Region": "us-east-1"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_access_point()
            .set_name(::std::option::Option::Some("myaccesspoint--abcd-ab1--xa-s3".to_owned()))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3express-control.us-east-1.amazonaws.com"),
        "expected URI to start with `https://s3express-control.us-east-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_delete_access_point_112() {
    /* documentation: Access Point APIs on express bucket routed to s3express-control */
    /* builtIns: {
        "AWS::Region": "us-east-1"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .delete_access_point()
            .set_name(::std::option::Option::Some("myaccesspoint--abcd-ab1--xa-s3".to_owned()))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3express-control.us-east-1.amazonaws.com"),
        "expected URI to start with `https://s3express-control.us-east-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_put_access_point_scope_113() {
    /* documentation: Access Point APIs on express bucket routed to s3express-control */
    /* builtIns: {
        "AWS::Region": "us-east-1"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .put_access_point_scope()
            .set_name(::std::option::Option::Some("myaccesspoint--abcd-ab1--xa-s3".to_owned()))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .set_scope(::std::option::Option::Some(
                aws_sdk_s3control::types::Scope::builder()
                    .set_prefixes(::std::option::Option::Some(vec![]))
                    .set_permissions(::std::option::Option::Some(vec![]))
                    .build()
            ))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3express-control.us-east-1.amazonaws.com"),
        "expected URI to start with `https://s3express-control.us-east-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_get_access_point_scope_114() {
    /* documentation: Access Point APIs on express bucket routed to s3express-control */
    /* builtIns: {
        "AWS::Region": "us-east-1"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_access_point_scope()
            .set_name(::std::option::Option::Some("myaccesspoint--abcd-ab1--xa-s3".to_owned()))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3express-control.us-east-1.amazonaws.com"),
        "expected URI to start with `https://s3express-control.us-east-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_delete_access_point_scope_115() {
    /* documentation: Access Point APIs on express bucket routed to s3express-control */
    /* builtIns: {
        "AWS::Region": "us-east-1"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .delete_access_point_scope()
            .set_name(::std::option::Option::Some("myaccesspoint--abcd-ab1--xa-s3".to_owned()))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3express-control.us-east-1.amazonaws.com"),
        "expected URI to start with `https://s3express-control.us-east-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_put_access_point_policy_116() {
    /* documentation: Access Point APIs on express bucket routed to s3express-control */
    /* builtIns: {
        "AWS::Region": "us-east-1"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .put_access_point_policy()
            .set_name(::std::option::Option::Some("myaccesspoint--abcd-ab1--xa-s3".to_owned()))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .set_policy(::std::option::Option::Some("my-policy".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3express-control.us-east-1.amazonaws.com"),
        "expected URI to start with `https://s3express-control.us-east-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_get_access_point_policy_117() {
    /* documentation: Access Point APIs on express bucket routed to s3express-control */
    /* builtIns: {
        "AWS::Region": "us-east-1"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_access_point_policy()
            .set_name(::std::option::Option::Some("myaccesspoint--abcd-ab1--xa-s3".to_owned()))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3express-control.us-east-1.amazonaws.com"),
        "expected URI to start with `https://s3express-control.us-east-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_delete_access_point_policy_118() {
    /* documentation: Access Point APIs on express bucket routed to s3express-control */
    /* builtIns: {
        "AWS::Region": "us-east-1"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .delete_access_point_policy()
            .set_name(::std::option::Option::Some("myaccesspoint--abcd-ab1--xa-s3".to_owned()))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3express-control.us-east-1.amazonaws.com"),
        "expected URI to start with `https://s3express-control.us-east-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_get_access_point_policy_status_119() {
    /* documentation: Access Point APIs on express bucket routed to s3express-control */
    /* builtIns: {
        "AWS::Region": "us-east-1"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_access_point_policy_status()
            .set_name(::std::option::Option::Some("myaccesspoint--abcd-ab1--xa-s3".to_owned()))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3express-control.us-east-1.amazonaws.com"),
        "expected URI to start with `https://s3express-control.us-east-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_list_access_points_for_directory_buckets_120() {
    /* documentation: Access Point APIs on express bucket routed to s3express-control for List */
    /* builtIns: {
        "AWS::Region": "us-east-1"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .list_access_points_for_directory_buckets()
            .set_directory_bucket(::std::option::Option::Some("mybucket--abcd-ab1--x-s3".to_owned()))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3express-control.us-east-1.amazonaws.com"),
        "expected URI to start with `https://s3express-control.us-east-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_create_access_point_121() {
    /* documentation: Access Point APIs on express bucket routed to s3express-control for FIPS */
    /* builtIns: {
        "AWS::Region": "us-east-1",
        "AWS::UseFIPS": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        let builder = builder.use_fips(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .create_access_point()
            .set_name(::std::option::Option::Some("myaccesspoint--abcd-ab1--xa-s3".to_owned()))
            .set_bucket(::std::option::Option::Some("mybucket--abcd-ab1--x-s3".to_owned()))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .set_scope(::std::option::Option::Some(
                aws_sdk_s3control::types::Scope::builder()
                    .set_prefixes(::std::option::Option::Some(vec![]))
                    .set_permissions(::std::option::Option::Some(vec![]))
                    .build()
            ))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3express-control-fips.us-east-1.amazonaws.com"),
        "expected URI to start with `https://s3express-control-fips.us-east-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_get_access_point_122() {
    /* documentation: Access Point APIs on express bucket routed to s3express-control for FIPS */
    /* builtIns: {
        "AWS::Region": "us-east-1",
        "AWS::UseFIPS": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        let builder = builder.use_fips(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_access_point()
            .set_name(::std::option::Option::Some("myaccesspoint--abcd-ab1--xa-s3".to_owned()))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3express-control-fips.us-east-1.amazonaws.com"),
        "expected URI to start with `https://s3express-control-fips.us-east-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_delete_access_point_123() {
    /* documentation: Access Point APIs on express bucket routed to s3express-control for FIPS */
    /* builtIns: {
        "AWS::Region": "us-east-1",
        "AWS::UseFIPS": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        let builder = builder.use_fips(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .delete_access_point()
            .set_name(::std::option::Option::Some("myaccesspoint--abcd-ab1--xa-s3".to_owned()))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3express-control-fips.us-east-1.amazonaws.com"),
        "expected URI to start with `https://s3express-control-fips.us-east-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_put_access_point_scope_124() {
    /* documentation: Access Point APIs on express bucket routed to s3express-control for FIPS */
    /* builtIns: {
        "AWS::Region": "us-east-1",
        "AWS::UseFIPS": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        let builder = builder.use_fips(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .put_access_point_scope()
            .set_name(::std::option::Option::Some("myaccesspoint--abcd-ab1--xa-s3".to_owned()))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .set_scope(::std::option::Option::Some(
                aws_sdk_s3control::types::Scope::builder()
                    .set_prefixes(::std::option::Option::Some(vec![]))
                    .set_permissions(::std::option::Option::Some(vec![]))
                    .build()
            ))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3express-control-fips.us-east-1.amazonaws.com"),
        "expected URI to start with `https://s3express-control-fips.us-east-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_get_access_point_scope_125() {
    /* documentation: Access Point APIs on express bucket routed to s3express-control for FIPS */
    /* builtIns: {
        "AWS::Region": "us-east-1",
        "AWS::UseFIPS": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        let builder = builder.use_fips(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_access_point_scope()
            .set_name(::std::option::Option::Some("myaccesspoint--abcd-ab1--xa-s3".to_owned()))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3express-control-fips.us-east-1.amazonaws.com"),
        "expected URI to start with `https://s3express-control-fips.us-east-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_delete_access_point_scope_126() {
    /* documentation: Access Point APIs on express bucket routed to s3express-control for FIPS */
    /* builtIns: {
        "AWS::Region": "us-east-1",
        "AWS::UseFIPS": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        let builder = builder.use_fips(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .delete_access_point_scope()
            .set_name(::std::option::Option::Some("myaccesspoint--abcd-ab1--xa-s3".to_owned()))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3express-control-fips.us-east-1.amazonaws.com"),
        "expected URI to start with `https://s3express-control-fips.us-east-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_put_access_point_policy_127() {
    /* documentation: Access Point APIs on express bucket routed to s3express-control for FIPS */
    /* builtIns: {
        "AWS::Region": "us-east-1",
        "AWS::UseFIPS": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        let builder = builder.use_fips(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .put_access_point_policy()
            .set_name(::std::option::Option::Some("myaccesspoint--abcd-ab1--xa-s3".to_owned()))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .set_policy(::std::option::Option::Some("my-policy".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3express-control-fips.us-east-1.amazonaws.com"),
        "expected URI to start with `https://s3express-control-fips.us-east-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_get_access_point_policy_128() {
    /* documentation: Access Point APIs on express bucket routed to s3express-control for FIPS */
    /* builtIns: {
        "AWS::Region": "us-east-1",
        "AWS::UseFIPS": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        let builder = builder.use_fips(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_access_point_policy()
            .set_name(::std::option::Option::Some("myaccesspoint--abcd-ab1--xa-s3".to_owned()))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3express-control-fips.us-east-1.amazonaws.com"),
        "expected URI to start with `https://s3express-control-fips.us-east-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_delete_access_point_policy_129() {
    /* documentation: Access Point APIs on express bucket routed to s3express-control for FIPS */
    /* builtIns: {
        "AWS::Region": "us-east-1",
        "AWS::UseFIPS": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        let builder = builder.use_fips(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .delete_access_point_policy()
            .set_name(::std::option::Option::Some("myaccesspoint--abcd-ab1--xa-s3".to_owned()))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3express-control-fips.us-east-1.amazonaws.com"),
        "expected URI to start with `https://s3express-control-fips.us-east-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_get_access_point_policy_status_130() {
    /* documentation: Access Point APIs on express bucket routed to s3express-control for FIPS */
    /* builtIns: {
        "AWS::Region": "us-east-1",
        "AWS::UseFIPS": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        let builder = builder.use_fips(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_access_point_policy_status()
            .set_name(::std::option::Option::Some("myaccesspoint--abcd-ab1--xa-s3".to_owned()))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3express-control-fips.us-east-1.amazonaws.com"),
        "expected URI to start with `https://s3express-control-fips.us-east-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_list_access_points_for_directory_buckets_131() {
    /* documentation: Access Point APIs on express bucket routed to s3express-control for FIPS for List */
    /* builtIns: {
        "AWS::Region": "us-east-1",
        "AWS::UseFIPS": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        let builder = builder.use_fips(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .list_access_points_for_directory_buckets()
            .set_directory_bucket(::std::option::Option::Some("mybucket--abcd-ab1--x-s3".to_owned()))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3express-control-fips.us-east-1.amazonaws.com"),
        "expected URI to start with `https://s3express-control-fips.us-east-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_create_access_point_132() {
    /* documentation: Access Point APIs on express bucket routed to s3express-control for china region */
    /* builtIns: {
        "AWS::Region": "cn-north-1"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("cn-north-1"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .create_access_point()
            .set_name(::std::option::Option::Some("myaccesspoint--abcd-ab1--xa-s3".to_owned()))
            .set_bucket(::std::option::Option::Some("mybucket--abcd-ab1--x-s3".to_owned()))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .set_scope(::std::option::Option::Some(
                aws_sdk_s3control::types::Scope::builder()
                    .set_prefixes(::std::option::Option::Some(vec![]))
                    .set_permissions(::std::option::Option::Some(vec![]))
                    .build()
            ))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3express-control.cn-north-1.amazonaws.com.cn"),
        "expected URI to start with `https://s3express-control.cn-north-1.amazonaws.com.cn` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_get_access_point_133() {
    /* documentation: Access Point APIs on express bucket routed to s3express-control for china region */
    /* builtIns: {
        "AWS::Region": "cn-north-1"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("cn-north-1"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_access_point()
            .set_name(::std::option::Option::Some("myaccesspoint--abcd-ab1--xa-s3".to_owned()))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3express-control.cn-north-1.amazonaws.com.cn"),
        "expected URI to start with `https://s3express-control.cn-north-1.amazonaws.com.cn` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_delete_access_point_134() {
    /* documentation: Access Point APIs on express bucket routed to s3express-control for china region */
    /* builtIns: {
        "AWS::Region": "cn-north-1"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("cn-north-1"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .delete_access_point()
            .set_name(::std::option::Option::Some("myaccesspoint--abcd-ab1--xa-s3".to_owned()))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3express-control.cn-north-1.amazonaws.com.cn"),
        "expected URI to start with `https://s3express-control.cn-north-1.amazonaws.com.cn` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_put_access_point_scope_135() {
    /* documentation: Access Point APIs on express bucket routed to s3express-control for china region */
    /* builtIns: {
        "AWS::Region": "cn-north-1"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("cn-north-1"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .put_access_point_scope()
            .set_name(::std::option::Option::Some("myaccesspoint--abcd-ab1--xa-s3".to_owned()))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .set_scope(::std::option::Option::Some(
                aws_sdk_s3control::types::Scope::builder()
                    .set_prefixes(::std::option::Option::Some(vec![]))
                    .set_permissions(::std::option::Option::Some(vec![]))
                    .build()
            ))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3express-control.cn-north-1.amazonaws.com.cn"),
        "expected URI to start with `https://s3express-control.cn-north-1.amazonaws.com.cn` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_get_access_point_scope_136() {
    /* documentation: Access Point APIs on express bucket routed to s3express-control for china region */
    /* builtIns: {
        "AWS::Region": "cn-north-1"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("cn-north-1"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_access_point_scope()
            .set_name(::std::option::Option::Some("myaccesspoint--abcd-ab1--xa-s3".to_owned()))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3express-control.cn-north-1.amazonaws.com.cn"),
        "expected URI to start with `https://s3express-control.cn-north-1.amazonaws.com.cn` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_delete_access_point_scope_137() {
    /* documentation: Access Point APIs on express bucket routed to s3express-control for china region */
    /* builtIns: {
        "AWS::Region": "cn-north-1"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("cn-north-1"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .delete_access_point_scope()
            .set_name(::std::option::Option::Some("myaccesspoint--abcd-ab1--xa-s3".to_owned()))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3express-control.cn-north-1.amazonaws.com.cn"),
        "expected URI to start with `https://s3express-control.cn-north-1.amazonaws.com.cn` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_put_access_point_policy_138() {
    /* documentation: Access Point APIs on express bucket routed to s3express-control for china region */
    /* builtIns: {
        "AWS::Region": "cn-north-1"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("cn-north-1"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .put_access_point_policy()
            .set_name(::std::option::Option::Some("myaccesspoint--abcd-ab1--xa-s3".to_owned()))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .set_policy(::std::option::Option::Some("my-policy".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3express-control.cn-north-1.amazonaws.com.cn"),
        "expected URI to start with `https://s3express-control.cn-north-1.amazonaws.com.cn` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_get_access_point_policy_139() {
    /* documentation: Access Point APIs on express bucket routed to s3express-control for china region */
    /* builtIns: {
        "AWS::Region": "cn-north-1"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("cn-north-1"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_access_point_policy()
            .set_name(::std::option::Option::Some("myaccesspoint--abcd-ab1--xa-s3".to_owned()))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3express-control.cn-north-1.amazonaws.com.cn"),
        "expected URI to start with `https://s3express-control.cn-north-1.amazonaws.com.cn` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_delete_access_point_policy_140() {
    /* documentation: Access Point APIs on express bucket routed to s3express-control for china region */
    /* builtIns: {
        "AWS::Region": "cn-north-1"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("cn-north-1"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .delete_access_point_policy()
            .set_name(::std::option::Option::Some("myaccesspoint--abcd-ab1--xa-s3".to_owned()))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3express-control.cn-north-1.amazonaws.com.cn"),
        "expected URI to start with `https://s3express-control.cn-north-1.amazonaws.com.cn` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_get_access_point_policy_status_141() {
    /* documentation: Access Point APIs on express bucket routed to s3express-control for china region */
    /* builtIns: {
        "AWS::Region": "cn-north-1"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("cn-north-1"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_access_point_policy_status()
            .set_name(::std::option::Option::Some("myaccesspoint--abcd-ab1--xa-s3".to_owned()))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3express-control.cn-north-1.amazonaws.com.cn"),
        "expected URI to start with `https://s3express-control.cn-north-1.amazonaws.com.cn` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_list_access_points_for_directory_buckets_142() {
    /* documentation: Access Point APIs on express bucket routed to s3express-control for china region for List */
    /* builtIns: {
        "AWS::Region": "cn-north-1"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("cn-north-1"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .list_access_points_for_directory_buckets()
            .set_directory_bucket(::std::option::Option::Some("mybucket--abcd-ab1--x-s3".to_owned()))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3express-control.cn-north-1.amazonaws.com.cn"),
        "expected URI to start with `https://s3express-control.cn-north-1.amazonaws.com.cn` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_create_access_point_143() {
    /* documentation: Error when Access Point APIs on express bucket routed to s3express-control for china and FIPS */
    /* builtIns: {
        "AWS::Region": "cn-north-1",
        "AWS::UseFIPS": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("cn-north-1"));
        let builder = builder.use_fips(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .create_access_point()
            .set_name(::std::option::Option::Some("myaccesspoint--abcd-ab1--xa-s3".to_owned()))
            .set_bucket(::std::option::Option::Some("mybucket--abcd-ab1--x-s3".to_owned()))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .set_scope(::std::option::Option::Some(
                aws_sdk_s3control::types::Scope::builder()
                    .set_prefixes(::std::option::Option::Some(vec![]))
                    .set_permissions(::std::option::Option::Some(vec![]))
                    .build()
            ))
            .send()
            .await
    );
    rcvr.expect_no_request();
    let error = _result.expect_err("expected error: Partition does not support FIPS [Error when Access Point APIs on express bucket routed to s3express-control for china and FIPS]");
    assert!(
        format!("{:?}", error).contains("Partition does not support FIPS"),
        "expected error to contain `Partition does not support FIPS` but it was {:?}",
        error
    );
}

#[::tokio::test]
async fn operation_input_test_get_access_point_144() {
    /* documentation: Error when Access Point APIs on express bucket routed to s3express-control for china and FIPS */
    /* builtIns: {
        "AWS::Region": "cn-north-1",
        "AWS::UseFIPS": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("cn-north-1"));
        let builder = builder.use_fips(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_access_point()
            .set_name(::std::option::Option::Some("myaccesspoint--abcd-ab1--xa-s3".to_owned()))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .send()
            .await
    );
    rcvr.expect_no_request();
    let error = _result.expect_err("expected error: Partition does not support FIPS [Error when Access Point APIs on express bucket routed to s3express-control for china and FIPS]");
    assert!(
        format!("{:?}", error).contains("Partition does not support FIPS"),
        "expected error to contain `Partition does not support FIPS` but it was {:?}",
        error
    );
}

#[::tokio::test]
async fn operation_input_test_delete_access_point_145() {
    /* documentation: Error when Access Point APIs on express bucket routed to s3express-control for china and FIPS */
    /* builtIns: {
        "AWS::Region": "cn-north-1",
        "AWS::UseFIPS": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("cn-north-1"));
        let builder = builder.use_fips(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .delete_access_point()
            .set_name(::std::option::Option::Some("myaccesspoint--abcd-ab1--xa-s3".to_owned()))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .send()
            .await
    );
    rcvr.expect_no_request();
    let error = _result.expect_err("expected error: Partition does not support FIPS [Error when Access Point APIs on express bucket routed to s3express-control for china and FIPS]");
    assert!(
        format!("{:?}", error).contains("Partition does not support FIPS"),
        "expected error to contain `Partition does not support FIPS` but it was {:?}",
        error
    );
}

#[::tokio::test]
async fn operation_input_test_list_access_points_for_directory_buckets_146() {
    /* documentation: Error when Access Point APIs on express bucket routed to s3express-control for china and FIPS */
    /* builtIns: {
        "AWS::Region": "cn-north-1",
        "AWS::UseFIPS": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("cn-north-1"));
        let builder = builder.use_fips(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .list_access_points_for_directory_buckets()
            .set_directory_bucket(::std::option::Option::Some("mybucket--abcd-ab1--x-s3".to_owned()))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .send()
            .await
    );
    rcvr.expect_no_request();
    let error = _result.expect_err("expected error: Partition does not support FIPS [Error when Access Point APIs on express bucket routed to s3express-control for china and FIPS]");
    assert!(
        format!("{:?}", error).contains("Partition does not support FIPS"),
        "expected error to contain `Partition does not support FIPS` but it was {:?}",
        error
    );
}

#[::tokio::test]
async fn operation_input_test_put_access_point_scope_147() {
    /* documentation: Error when Access Point APIs on express bucket routed to s3express-control for china and FIPS */
    /* builtIns: {
        "AWS::Region": "cn-north-1",
        "AWS::UseFIPS": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("cn-north-1"));
        let builder = builder.use_fips(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .put_access_point_scope()
            .set_name(::std::option::Option::Some("myaccesspoint--abcd-ab1--xa-s3".to_owned()))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .set_scope(::std::option::Option::Some(
                aws_sdk_s3control::types::Scope::builder()
                    .set_prefixes(::std::option::Option::Some(vec![]))
                    .set_permissions(::std::option::Option::Some(vec![]))
                    .build()
            ))
            .send()
            .await
    );
    rcvr.expect_no_request();
    let error = _result.expect_err("expected error: Partition does not support FIPS [Error when Access Point APIs on express bucket routed to s3express-control for china and FIPS]");
    assert!(
        format!("{:?}", error).contains("Partition does not support FIPS"),
        "expected error to contain `Partition does not support FIPS` but it was {:?}",
        error
    );
}

#[::tokio::test]
async fn operation_input_test_get_access_point_scope_148() {
    /* documentation: Error when Access Point APIs on express bucket routed to s3express-control for china and FIPS */
    /* builtIns: {
        "AWS::Region": "cn-north-1",
        "AWS::UseFIPS": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("cn-north-1"));
        let builder = builder.use_fips(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_access_point_scope()
            .set_name(::std::option::Option::Some("myaccesspoint--abcd-ab1--xa-s3".to_owned()))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .send()
            .await
    );
    rcvr.expect_no_request();
    let error = _result.expect_err("expected error: Partition does not support FIPS [Error when Access Point APIs on express bucket routed to s3express-control for china and FIPS]");
    assert!(
        format!("{:?}", error).contains("Partition does not support FIPS"),
        "expected error to contain `Partition does not support FIPS` but it was {:?}",
        error
    );
}

#[::tokio::test]
async fn operation_input_test_delete_access_point_scope_149() {
    /* documentation: Error when Access Point APIs on express bucket routed to s3express-control for china and FIPS */
    /* builtIns: {
        "AWS::Region": "cn-north-1",
        "AWS::UseFIPS": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("cn-north-1"));
        let builder = builder.use_fips(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .delete_access_point_scope()
            .set_name(::std::option::Option::Some("myaccesspoint--abcd-ab1--xa-s3".to_owned()))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .send()
            .await
    );
    rcvr.expect_no_request();
    let error = _result.expect_err("expected error: Partition does not support FIPS [Error when Access Point APIs on express bucket routed to s3express-control for china and FIPS]");
    assert!(
        format!("{:?}", error).contains("Partition does not support FIPS"),
        "expected error to contain `Partition does not support FIPS` but it was {:?}",
        error
    );
}

#[::tokio::test]
async fn operation_input_test_put_access_point_policy_150() {
    /* documentation: Error when Access Point APIs on express bucket routed to s3express-control for china and FIPS */
    /* builtIns: {
        "AWS::Region": "cn-north-1",
        "AWS::UseFIPS": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("cn-north-1"));
        let builder = builder.use_fips(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .put_access_point_policy()
            .set_name(::std::option::Option::Some("myaccesspoint--abcd-ab1--xa-s3".to_owned()))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .set_policy(::std::option::Option::Some("my-policy".to_owned()))
            .send()
            .await
    );
    rcvr.expect_no_request();
    let error = _result.expect_err("expected error: Partition does not support FIPS [Error when Access Point APIs on express bucket routed to s3express-control for china and FIPS]");
    assert!(
        format!("{:?}", error).contains("Partition does not support FIPS"),
        "expected error to contain `Partition does not support FIPS` but it was {:?}",
        error
    );
}

#[::tokio::test]
async fn operation_input_test_get_access_point_policy_151() {
    /* documentation: Error when Access Point APIs on express bucket routed to s3express-control for china and FIPS */
    /* builtIns: {
        "AWS::Region": "cn-north-1",
        "AWS::UseFIPS": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("cn-north-1"));
        let builder = builder.use_fips(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_access_point_policy()
            .set_name(::std::option::Option::Some("myaccesspoint--abcd-ab1--xa-s3".to_owned()))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .send()
            .await
    );
    rcvr.expect_no_request();
    let error = _result.expect_err("expected error: Partition does not support FIPS [Error when Access Point APIs on express bucket routed to s3express-control for china and FIPS]");
    assert!(
        format!("{:?}", error).contains("Partition does not support FIPS"),
        "expected error to contain `Partition does not support FIPS` but it was {:?}",
        error
    );
}

#[::tokio::test]
async fn operation_input_test_delete_access_point_policy_152() {
    /* documentation: Error when Access Point APIs on express bucket routed to s3express-control for china and FIPS */
    /* builtIns: {
        "AWS::Region": "cn-north-1",
        "AWS::UseFIPS": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("cn-north-1"));
        let builder = builder.use_fips(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .delete_access_point_policy()
            .set_name(::std::option::Option::Some("myaccesspoint--abcd-ab1--xa-s3".to_owned()))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .send()
            .await
    );
    rcvr.expect_no_request();
    let error = _result.expect_err("expected error: Partition does not support FIPS [Error when Access Point APIs on express bucket routed to s3express-control for china and FIPS]");
    assert!(
        format!("{:?}", error).contains("Partition does not support FIPS"),
        "expected error to contain `Partition does not support FIPS` but it was {:?}",
        error
    );
}

#[::tokio::test]
async fn operation_input_test_get_access_point_policy_status_153() {
    /* documentation: Error when Access Point APIs on express bucket routed to s3express-control for china and FIPS */
    /* builtIns: {
        "AWS::Region": "cn-north-1",
        "AWS::UseFIPS": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("cn-north-1"));
        let builder = builder.use_fips(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_access_point_policy_status()
            .set_name(::std::option::Option::Some("myaccesspoint--abcd-ab1--xa-s3".to_owned()))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .send()
            .await
    );
    rcvr.expect_no_request();
    let error = _result.expect_err("expected error: Partition does not support FIPS [Error when Access Point APIs on express bucket routed to s3express-control for china and FIPS]");
    assert!(
        format!("{:?}", error).contains("Partition does not support FIPS"),
        "expected error to contain `Partition does not support FIPS` but it was {:?}",
        error
    );
}

#[::tokio::test]
async fn operation_input_test_create_access_point_154() {
    /* documentation: Error Access Point APIs on express bucket routed to s3express-control invalid zone */
    /* builtIns: {
        "AWS::Region": "us-east-1"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .create_access_point()
            .set_name(::std::option::Option::Some("myaccesspoint-garbage-zone--xa-s3".to_owned()))
            .set_bucket(::std::option::Option::Some("mybucket-garbage-zone-garbage-zone".to_owned()))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .set_scope(::std::option::Option::Some(
                aws_sdk_s3control::types::Scope::builder()
                    .set_prefixes(::std::option::Option::Some(vec![]))
                    .set_permissions(::std::option::Option::Some(vec![]))
                    .build()
            ))
            .send()
            .await
    );
    rcvr.expect_no_request();
    let error = _result.expect_err("expected error: Unrecognized S3Express Access Point name format. [Error Access Point APIs on express bucket routed to s3express-control invalid zone]");
    assert!(
        format!("{:?}", error).contains("Unrecognized S3Express Access Point name format."),
        "expected error to contain `Unrecognized S3Express Access Point name format.` but it was {:?}",
        error
    );
}

#[::tokio::test]
async fn operation_input_test_get_access_point_155() {
    /* documentation: Error Access Point APIs on express bucket routed to s3express-control invalid zone */
    /* builtIns: {
        "AWS::Region": "us-east-1"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_access_point()
            .set_name(::std::option::Option::Some("myaccesspoint-garbage-zone--xa-s3".to_owned()))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .send()
            .await
    );
    rcvr.expect_no_request();
    let error = _result.expect_err("expected error: Unrecognized S3Express Access Point name format. [Error Access Point APIs on express bucket routed to s3express-control invalid zone]");
    assert!(
        format!("{:?}", error).contains("Unrecognized S3Express Access Point name format."),
        "expected error to contain `Unrecognized S3Express Access Point name format.` but it was {:?}",
        error
    );
}

#[::tokio::test]
async fn operation_input_test_delete_access_point_156() {
    /* documentation: Error Access Point APIs on express bucket routed to s3express-control invalid zone */
    /* builtIns: {
        "AWS::Region": "us-east-1"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .delete_access_point()
            .set_name(::std::option::Option::Some("myaccesspoint-garbage-zone--xa-s3".to_owned()))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .send()
            .await
    );
    rcvr.expect_no_request();
    let error = _result.expect_err("expected error: Unrecognized S3Express Access Point name format. [Error Access Point APIs on express bucket routed to s3express-control invalid zone]");
    assert!(
        format!("{:?}", error).contains("Unrecognized S3Express Access Point name format."),
        "expected error to contain `Unrecognized S3Express Access Point name format.` but it was {:?}",
        error
    );
}

#[::tokio::test]
async fn operation_input_test_put_access_point_scope_157() {
    /* documentation: Error Access Point APIs on express bucket routed to s3express-control invalid zone */
    /* builtIns: {
        "AWS::Region": "us-east-1"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .put_access_point_scope()
            .set_name(::std::option::Option::Some("myaccesspoint-garbage-zone--xa-s3".to_owned()))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .set_scope(::std::option::Option::Some(
                aws_sdk_s3control::types::Scope::builder()
                    .set_prefixes(::std::option::Option::Some(vec![]))
                    .set_permissions(::std::option::Option::Some(vec![]))
                    .build()
            ))
            .send()
            .await
    );
    rcvr.expect_no_request();
    let error = _result.expect_err("expected error: Unrecognized S3Express Access Point name format. [Error Access Point APIs on express bucket routed to s3express-control invalid zone]");
    assert!(
        format!("{:?}", error).contains("Unrecognized S3Express Access Point name format."),
        "expected error to contain `Unrecognized S3Express Access Point name format.` but it was {:?}",
        error
    );
}

#[::tokio::test]
async fn operation_input_test_get_access_point_scope_158() {
    /* documentation: Error Access Point APIs on express bucket routed to s3express-control invalid zone */
    /* builtIns: {
        "AWS::Region": "us-east-1"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_access_point_scope()
            .set_name(::std::option::Option::Some("myaccesspoint-garbage-zone--xa-s3".to_owned()))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .send()
            .await
    );
    rcvr.expect_no_request();
    let error = _result.expect_err("expected error: Unrecognized S3Express Access Point name format. [Error Access Point APIs on express bucket routed to s3express-control invalid zone]");
    assert!(
        format!("{:?}", error).contains("Unrecognized S3Express Access Point name format."),
        "expected error to contain `Unrecognized S3Express Access Point name format.` but it was {:?}",
        error
    );
}

#[::tokio::test]
async fn operation_input_test_delete_access_point_scope_159() {
    /* documentation: Error Access Point APIs on express bucket routed to s3express-control invalid zone */
    /* builtIns: {
        "AWS::Region": "us-east-1"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .delete_access_point_scope()
            .set_name(::std::option::Option::Some("myaccesspoint-garbage-zone--xa-s3".to_owned()))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .send()
            .await
    );
    rcvr.expect_no_request();
    let error = _result.expect_err("expected error: Unrecognized S3Express Access Point name format. [Error Access Point APIs on express bucket routed to s3express-control invalid zone]");
    assert!(
        format!("{:?}", error).contains("Unrecognized S3Express Access Point name format."),
        "expected error to contain `Unrecognized S3Express Access Point name format.` but it was {:?}",
        error
    );
}

#[::tokio::test]
async fn operation_input_test_put_access_point_policy_160() {
    /* documentation: Error Access Point APIs on express bucket routed to s3express-control invalid zone */
    /* builtIns: {
        "AWS::Region": "us-east-1"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .put_access_point_policy()
            .set_name(::std::option::Option::Some("myaccesspoint-garbage-zone--xa-s3".to_owned()))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .set_policy(::std::option::Option::Some("my-policy".to_owned()))
            .send()
            .await
    );
    rcvr.expect_no_request();
    let error = _result.expect_err("expected error: Unrecognized S3Express Access Point name format. [Error Access Point APIs on express bucket routed to s3express-control invalid zone]");
    assert!(
        format!("{:?}", error).contains("Unrecognized S3Express Access Point name format."),
        "expected error to contain `Unrecognized S3Express Access Point name format.` but it was {:?}",
        error
    );
}

#[::tokio::test]
async fn operation_input_test_get_access_point_policy_161() {
    /* documentation: Error Access Point APIs on express bucket routed to s3express-control invalid zone */
    /* builtIns: {
        "AWS::Region": "us-east-1"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_access_point_policy()
            .set_name(::std::option::Option::Some("myaccesspoint-garbage-zone--xa-s3".to_owned()))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .send()
            .await
    );
    rcvr.expect_no_request();
    let error = _result.expect_err("expected error: Unrecognized S3Express Access Point name format. [Error Access Point APIs on express bucket routed to s3express-control invalid zone]");
    assert!(
        format!("{:?}", error).contains("Unrecognized S3Express Access Point name format."),
        "expected error to contain `Unrecognized S3Express Access Point name format.` but it was {:?}",
        error
    );
}

#[::tokio::test]
async fn operation_input_test_delete_access_point_policy_162() {
    /* documentation: Error Access Point APIs on express bucket routed to s3express-control invalid zone */
    /* builtIns: {
        "AWS::Region": "us-east-1"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .delete_access_point_policy()
            .set_name(::std::option::Option::Some("myaccesspoint-garbage-zone--xa-s3".to_owned()))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .send()
            .await
    );
    rcvr.expect_no_request();
    let error = _result.expect_err("expected error: Unrecognized S3Express Access Point name format. [Error Access Point APIs on express bucket routed to s3express-control invalid zone]");
    assert!(
        format!("{:?}", error).contains("Unrecognized S3Express Access Point name format."),
        "expected error to contain `Unrecognized S3Express Access Point name format.` but it was {:?}",
        error
    );
}

#[::tokio::test]
async fn operation_input_test_get_access_point_policy_status_163() {
    /* documentation: Error Access Point APIs on express bucket routed to s3express-control invalid zone */
    /* builtIns: {
        "AWS::Region": "us-east-1"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_access_point_policy_status()
            .set_name(::std::option::Option::Some("myaccesspoint-garbage-zone--xa-s3".to_owned()))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .send()
            .await
    );
    rcvr.expect_no_request();
    let error = _result.expect_err("expected error: Unrecognized S3Express Access Point name format. [Error Access Point APIs on express bucket routed to s3express-control invalid zone]");
    assert!(
        format!("{:?}", error).contains("Unrecognized S3Express Access Point name format."),
        "expected error to contain `Unrecognized S3Express Access Point name format.` but it was {:?}",
        error
    );
}

#[::tokio::test]
async fn operation_input_test_create_access_point_164() {
    /* documentation: Access Point APIs on express bucket routed to custom endpoint if provided */
    /* builtIns: {
        "AWS::Region": "us-east-1",
        "SDK::Endpoint": "https://my-endpoint.express-control.s3.aws.dev"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        let builder = builder.endpoint_url("https://my-endpoint.express-control.s3.aws.dev");
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .create_access_point()
            .set_name(::std::option::Option::Some("myaccesspoint--abcd-ab1--xa-s3".to_owned()))
            .set_bucket(::std::option::Option::Some("mybucket--abcd-ab1--x-s3".to_owned()))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .set_scope(::std::option::Option::Some(
                aws_sdk_s3control::types::Scope::builder()
                    .set_prefixes(::std::option::Option::Some(vec![]))
                    .set_permissions(::std::option::Option::Some(vec![]))
                    .build()
            ))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://my-endpoint.express-control.s3.aws.dev"),
        "expected URI to start with `https://my-endpoint.express-control.s3.aws.dev` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_get_access_point_165() {
    /* documentation: Access Point APIs on express bucket routed to custom endpoint if provided */
    /* builtIns: {
        "AWS::Region": "us-east-1",
        "SDK::Endpoint": "https://my-endpoint.express-control.s3.aws.dev"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        let builder = builder.endpoint_url("https://my-endpoint.express-control.s3.aws.dev");
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_access_point()
            .set_name(::std::option::Option::Some("myaccesspoint--abcd-ab1--xa-s3".to_owned()))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://my-endpoint.express-control.s3.aws.dev"),
        "expected URI to start with `https://my-endpoint.express-control.s3.aws.dev` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_delete_access_point_166() {
    /* documentation: Access Point APIs on express bucket routed to custom endpoint if provided */
    /* builtIns: {
        "AWS::Region": "us-east-1",
        "SDK::Endpoint": "https://my-endpoint.express-control.s3.aws.dev"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        let builder = builder.endpoint_url("https://my-endpoint.express-control.s3.aws.dev");
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .delete_access_point()
            .set_name(::std::option::Option::Some("myaccesspoint--abcd-ab1--xa-s3".to_owned()))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://my-endpoint.express-control.s3.aws.dev"),
        "expected URI to start with `https://my-endpoint.express-control.s3.aws.dev` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_put_access_point_policy_167() {
    /* documentation: Access Point APIs on express bucket routed to custom endpoint if provided */
    /* builtIns: {
        "AWS::Region": "us-east-1",
        "SDK::Endpoint": "https://my-endpoint.express-control.s3.aws.dev"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        let builder = builder.endpoint_url("https://my-endpoint.express-control.s3.aws.dev");
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .put_access_point_policy()
            .set_name(::std::option::Option::Some("myaccesspoint--abcd-ab1--xa-s3".to_owned()))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .set_policy(::std::option::Option::Some("my-policy".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://my-endpoint.express-control.s3.aws.dev"),
        "expected URI to start with `https://my-endpoint.express-control.s3.aws.dev` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_get_access_point_policy_168() {
    /* documentation: Access Point APIs on express bucket routed to custom endpoint if provided */
    /* builtIns: {
        "AWS::Region": "us-east-1",
        "SDK::Endpoint": "https://my-endpoint.express-control.s3.aws.dev"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        let builder = builder.endpoint_url("https://my-endpoint.express-control.s3.aws.dev");
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_access_point_policy()
            .set_name(::std::option::Option::Some("myaccesspoint--abcd-ab1--xa-s3".to_owned()))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://my-endpoint.express-control.s3.aws.dev"),
        "expected URI to start with `https://my-endpoint.express-control.s3.aws.dev` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_delete_access_point_policy_169() {
    /* documentation: Access Point APIs on express bucket routed to custom endpoint if provided */
    /* builtIns: {
        "AWS::Region": "us-east-1",
        "SDK::Endpoint": "https://my-endpoint.express-control.s3.aws.dev"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        let builder = builder.endpoint_url("https://my-endpoint.express-control.s3.aws.dev");
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .delete_access_point_policy()
            .set_name(::std::option::Option::Some("myaccesspoint--abcd-ab1--xa-s3".to_owned()))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://my-endpoint.express-control.s3.aws.dev"),
        "expected URI to start with `https://my-endpoint.express-control.s3.aws.dev` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_get_access_point_policy_status_170() {
    /* documentation: Access Point APIs on express bucket routed to custom endpoint if provided */
    /* builtIns: {
        "AWS::Region": "us-east-1",
        "SDK::Endpoint": "https://my-endpoint.express-control.s3.aws.dev"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        let builder = builder.endpoint_url("https://my-endpoint.express-control.s3.aws.dev");
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_access_point_policy_status()
            .set_name(::std::option::Option::Some("myaccesspoint--abcd-ab1--xa-s3".to_owned()))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://my-endpoint.express-control.s3.aws.dev"),
        "expected URI to start with `https://my-endpoint.express-control.s3.aws.dev` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_list_access_points_for_directory_buckets_171() {
    /* documentation: Access Point APIs on express bucket routed to custom endpoint if provided for List */
    /* builtIns: {
        "AWS::Region": "us-east-1",
        "SDK::Endpoint": "https://my-endpoint.express-control.s3.aws.dev"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        let builder = builder.endpoint_url("https://my-endpoint.express-control.s3.aws.dev");
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .list_access_points_for_directory_buckets()
            .set_directory_bucket(::std::option::Option::Some("mybucket--abcd-ab1--x-s3".to_owned()))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://my-endpoint.express-control.s3.aws.dev"),
        "expected URI to start with `https://my-endpoint.express-control.s3.aws.dev` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_create_access_point_172() {
    /* documentation: Error on Access Point APIs on express bucket for dual stack */
    /* builtIns: {
        "AWS::Region": "us-east-1",
        "AWS::UseDualStack": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        let builder = builder.use_dual_stack(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .create_access_point()
            .set_name(::std::option::Option::Some("myaccesspoint--abcd-ab1--xa-s3".to_owned()))
            .set_bucket(::std::option::Option::Some("mybucket--abcd-ab1--x-s3".to_owned()))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .set_scope(::std::option::Option::Some(
                aws_sdk_s3control::types::Scope::builder()
                    .set_prefixes(::std::option::Option::Some(vec![]))
                    .set_permissions(::std::option::Option::Some(vec![]))
                    .build()
            ))
            .send()
            .await
    );
    rcvr.expect_no_request();
    let error =
        _result.expect_err("expected error: S3Express does not support Dual-stack. [Error on Access Point APIs on express bucket for dual stack]");
    assert!(
        format!("{:?}", error).contains("S3Express does not support Dual-stack."),
        "expected error to contain `S3Express does not support Dual-stack.` but it was {:?}",
        error
    );
}

#[::tokio::test]
async fn operation_input_test_get_access_point_173() {
    /* documentation: Error on Access Point APIs on express bucket for dual stack */
    /* builtIns: {
        "AWS::Region": "us-east-1",
        "AWS::UseDualStack": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        let builder = builder.use_dual_stack(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_access_point()
            .set_name(::std::option::Option::Some("myaccesspoint--abcd-ab1--xa-s3".to_owned()))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .send()
            .await
    );
    rcvr.expect_no_request();
    let error =
        _result.expect_err("expected error: S3Express does not support Dual-stack. [Error on Access Point APIs on express bucket for dual stack]");
    assert!(
        format!("{:?}", error).contains("S3Express does not support Dual-stack."),
        "expected error to contain `S3Express does not support Dual-stack.` but it was {:?}",
        error
    );
}

#[::tokio::test]
async fn operation_input_test_delete_access_point_174() {
    /* documentation: Error on Access Point APIs on express bucket for dual stack */
    /* builtIns: {
        "AWS::Region": "us-east-1",
        "AWS::UseDualStack": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        let builder = builder.use_dual_stack(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .delete_access_point()
            .set_name(::std::option::Option::Some("myaccesspoint--abcd-ab1--xa-s3".to_owned()))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .send()
            .await
    );
    rcvr.expect_no_request();
    let error =
        _result.expect_err("expected error: S3Express does not support Dual-stack. [Error on Access Point APIs on express bucket for dual stack]");
    assert!(
        format!("{:?}", error).contains("S3Express does not support Dual-stack."),
        "expected error to contain `S3Express does not support Dual-stack.` but it was {:?}",
        error
    );
}

#[::tokio::test]
async fn operation_input_test_put_access_point_policy_175() {
    /* documentation: Error on Access Point APIs on express bucket for dual stack */
    /* builtIns: {
        "AWS::Region": "us-east-1",
        "AWS::UseDualStack": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        let builder = builder.use_dual_stack(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .put_access_point_policy()
            .set_name(::std::option::Option::Some("myaccesspoint--abcd-ab1--xa-s3".to_owned()))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .set_policy(::std::option::Option::Some("my-policy".to_owned()))
            .send()
            .await
    );
    rcvr.expect_no_request();
    let error =
        _result.expect_err("expected error: S3Express does not support Dual-stack. [Error on Access Point APIs on express bucket for dual stack]");
    assert!(
        format!("{:?}", error).contains("S3Express does not support Dual-stack."),
        "expected error to contain `S3Express does not support Dual-stack.` but it was {:?}",
        error
    );
}

#[::tokio::test]
async fn operation_input_test_get_access_point_policy_176() {
    /* documentation: Error on Access Point APIs on express bucket for dual stack */
    /* builtIns: {
        "AWS::Region": "us-east-1",
        "AWS::UseDualStack": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        let builder = builder.use_dual_stack(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_access_point_policy()
            .set_name(::std::option::Option::Some("myaccesspoint--abcd-ab1--xa-s3".to_owned()))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .send()
            .await
    );
    rcvr.expect_no_request();
    let error =
        _result.expect_err("expected error: S3Express does not support Dual-stack. [Error on Access Point APIs on express bucket for dual stack]");
    assert!(
        format!("{:?}", error).contains("S3Express does not support Dual-stack."),
        "expected error to contain `S3Express does not support Dual-stack.` but it was {:?}",
        error
    );
}

#[::tokio::test]
async fn operation_input_test_delete_access_point_policy_177() {
    /* documentation: Error on Access Point APIs on express bucket for dual stack */
    /* builtIns: {
        "AWS::Region": "us-east-1",
        "AWS::UseDualStack": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        let builder = builder.use_dual_stack(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .delete_access_point_policy()
            .set_name(::std::option::Option::Some("myaccesspoint--abcd-ab1--xa-s3".to_owned()))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .send()
            .await
    );
    rcvr.expect_no_request();
    let error =
        _result.expect_err("expected error: S3Express does not support Dual-stack. [Error on Access Point APIs on express bucket for dual stack]");
    assert!(
        format!("{:?}", error).contains("S3Express does not support Dual-stack."),
        "expected error to contain `S3Express does not support Dual-stack.` but it was {:?}",
        error
    );
}

#[::tokio::test]
async fn operation_input_test_get_access_point_policy_status_178() {
    /* documentation: Error on Access Point APIs on express bucket for dual stack */
    /* builtIns: {
        "AWS::Region": "us-east-1",
        "AWS::UseDualStack": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        let builder = builder.use_dual_stack(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_access_point_policy_status()
            .set_name(::std::option::Option::Some("myaccesspoint--abcd-ab1--xa-s3".to_owned()))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .send()
            .await
    );
    rcvr.expect_no_request();
    let error =
        _result.expect_err("expected error: S3Express does not support Dual-stack. [Error on Access Point APIs on express bucket for dual stack]");
    assert!(
        format!("{:?}", error).contains("S3Express does not support Dual-stack."),
        "expected error to contain `S3Express does not support Dual-stack.` but it was {:?}",
        error
    );
}

#[::tokio::test]
async fn operation_input_test_list_access_points_for_directory_buckets_179() {
    /* documentation: Error Access Point APIs on express bucket for dual stack for List */
    /* builtIns: {
        "AWS::Region": "us-east-1",
        "AWS::UseDualStack": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        let builder = builder.use_dual_stack(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .list_access_points_for_directory_buckets()
            .set_directory_bucket(::std::option::Option::Some("mybucket--abcd-ab1--x-s3".to_owned()))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .send()
            .await
    );
    rcvr.expect_no_request();
    let error = _result
        .expect_err("expected error: S3Express does not support Dual-stack. [Error Access Point APIs on express bucket for dual stack for List]");
    assert!(
        format!("{:?}", error).contains("S3Express does not support Dual-stack."),
        "expected error to contain `S3Express does not support Dual-stack.` but it was {:?}",
        error
    );
}

#[::tokio::test]
async fn operation_input_test_create_access_point_180() {
    /* documentation: Error on Access Point APIs on express bucket for custom endpoint and dual stack */
    /* builtIns: {
        "AWS::Region": "us-east-1",
        "SDK::Endpoint": "https://my-endpoint.express-control.s3.aws.dev",
        "AWS::UseDualStack": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        let builder = builder.endpoint_url("https://my-endpoint.express-control.s3.aws.dev");
        let builder = builder.use_dual_stack(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .create_access_point()
            .set_name(::std::option::Option::Some("myaccesspoint--abcd-ab1--xa-s3".to_owned()))
            .set_bucket(::std::option::Option::Some("mybucket--abcd-ab1--x-s3".to_owned()))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .set_scope(::std::option::Option::Some(
                aws_sdk_s3control::types::Scope::builder()
                    .set_prefixes(::std::option::Option::Some(vec![]))
                    .set_permissions(::std::option::Option::Some(vec![]))
                    .build()
            ))
            .send()
            .await
    );
    rcvr.expect_no_request();
    let error = _result.expect_err("expected error: Invalid Configuration: DualStack and custom endpoint are not supported [Error on Access Point APIs on express bucket for custom endpoint and dual stack]");
    assert!(
        format!("{:?}", error).contains("Invalid Configuration: DualStack and custom endpoint are not supported"),
        "expected error to contain `Invalid Configuration: DualStack and custom endpoint are not supported` but it was {:?}",
        error
    );
}

#[::tokio::test]
async fn operation_input_test_get_access_point_181() {
    /* documentation: Error on Access Point APIs on express bucket for custom endpoint and dual stack */
    /* builtIns: {
        "AWS::Region": "us-east-1",
        "SDK::Endpoint": "https://my-endpoint.express-control.s3.aws.dev",
        "AWS::UseDualStack": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        let builder = builder.endpoint_url("https://my-endpoint.express-control.s3.aws.dev");
        let builder = builder.use_dual_stack(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_access_point()
            .set_name(::std::option::Option::Some("myaccesspoint--abcd-ab1--xa-s3".to_owned()))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .send()
            .await
    );
    rcvr.expect_no_request();
    let error = _result.expect_err("expected error: Invalid Configuration: DualStack and custom endpoint are not supported [Error on Access Point APIs on express bucket for custom endpoint and dual stack]");
    assert!(
        format!("{:?}", error).contains("Invalid Configuration: DualStack and custom endpoint are not supported"),
        "expected error to contain `Invalid Configuration: DualStack and custom endpoint are not supported` but it was {:?}",
        error
    );
}

#[::tokio::test]
async fn operation_input_test_delete_access_point_182() {
    /* documentation: Error on Access Point APIs on express bucket for custom endpoint and dual stack */
    /* builtIns: {
        "AWS::Region": "us-east-1",
        "SDK::Endpoint": "https://my-endpoint.express-control.s3.aws.dev",
        "AWS::UseDualStack": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        let builder = builder.endpoint_url("https://my-endpoint.express-control.s3.aws.dev");
        let builder = builder.use_dual_stack(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .delete_access_point()
            .set_name(::std::option::Option::Some("myaccesspoint--abcd-ab1--xa-s3".to_owned()))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .send()
            .await
    );
    rcvr.expect_no_request();
    let error = _result.expect_err("expected error: Invalid Configuration: DualStack and custom endpoint are not supported [Error on Access Point APIs on express bucket for custom endpoint and dual stack]");
    assert!(
        format!("{:?}", error).contains("Invalid Configuration: DualStack and custom endpoint are not supported"),
        "expected error to contain `Invalid Configuration: DualStack and custom endpoint are not supported` but it was {:?}",
        error
    );
}

#[::tokio::test]
async fn operation_input_test_put_access_point_policy_183() {
    /* documentation: Error on Access Point APIs on express bucket for custom endpoint and dual stack */
    /* builtIns: {
        "AWS::Region": "us-east-1",
        "SDK::Endpoint": "https://my-endpoint.express-control.s3.aws.dev",
        "AWS::UseDualStack": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        let builder = builder.endpoint_url("https://my-endpoint.express-control.s3.aws.dev");
        let builder = builder.use_dual_stack(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .put_access_point_policy()
            .set_name(::std::option::Option::Some("myaccesspoint--abcd-ab1--xa-s3".to_owned()))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .set_policy(::std::option::Option::Some("my-policy".to_owned()))
            .send()
            .await
    );
    rcvr.expect_no_request();
    let error = _result.expect_err("expected error: Invalid Configuration: DualStack and custom endpoint are not supported [Error on Access Point APIs on express bucket for custom endpoint and dual stack]");
    assert!(
        format!("{:?}", error).contains("Invalid Configuration: DualStack and custom endpoint are not supported"),
        "expected error to contain `Invalid Configuration: DualStack and custom endpoint are not supported` but it was {:?}",
        error
    );
}

#[::tokio::test]
async fn operation_input_test_get_access_point_policy_184() {
    /* documentation: Error on Access Point APIs on express bucket for custom endpoint and dual stack */
    /* builtIns: {
        "AWS::Region": "us-east-1",
        "SDK::Endpoint": "https://my-endpoint.express-control.s3.aws.dev",
        "AWS::UseDualStack": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        let builder = builder.endpoint_url("https://my-endpoint.express-control.s3.aws.dev");
        let builder = builder.use_dual_stack(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_access_point_policy()
            .set_name(::std::option::Option::Some("myaccesspoint--abcd-ab1--xa-s3".to_owned()))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .send()
            .await
    );
    rcvr.expect_no_request();
    let error = _result.expect_err("expected error: Invalid Configuration: DualStack and custom endpoint are not supported [Error on Access Point APIs on express bucket for custom endpoint and dual stack]");
    assert!(
        format!("{:?}", error).contains("Invalid Configuration: DualStack and custom endpoint are not supported"),
        "expected error to contain `Invalid Configuration: DualStack and custom endpoint are not supported` but it was {:?}",
        error
    );
}

#[::tokio::test]
async fn operation_input_test_delete_access_point_policy_185() {
    /* documentation: Error on Access Point APIs on express bucket for custom endpoint and dual stack */
    /* builtIns: {
        "AWS::Region": "us-east-1",
        "SDK::Endpoint": "https://my-endpoint.express-control.s3.aws.dev",
        "AWS::UseDualStack": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        let builder = builder.endpoint_url("https://my-endpoint.express-control.s3.aws.dev");
        let builder = builder.use_dual_stack(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .delete_access_point_policy()
            .set_name(::std::option::Option::Some("myaccesspoint--abcd-ab1--xa-s3".to_owned()))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .send()
            .await
    );
    rcvr.expect_no_request();
    let error = _result.expect_err("expected error: Invalid Configuration: DualStack and custom endpoint are not supported [Error on Access Point APIs on express bucket for custom endpoint and dual stack]");
    assert!(
        format!("{:?}", error).contains("Invalid Configuration: DualStack and custom endpoint are not supported"),
        "expected error to contain `Invalid Configuration: DualStack and custom endpoint are not supported` but it was {:?}",
        error
    );
}

#[::tokio::test]
async fn operation_input_test_get_access_point_policy_status_186() {
    /* documentation: Error on Access Point APIs on express bucket for custom endpoint and dual stack */
    /* builtIns: {
        "AWS::Region": "us-east-1",
        "SDK::Endpoint": "https://my-endpoint.express-control.s3.aws.dev",
        "AWS::UseDualStack": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        let builder = builder.endpoint_url("https://my-endpoint.express-control.s3.aws.dev");
        let builder = builder.use_dual_stack(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_access_point_policy_status()
            .set_name(::std::option::Option::Some("myaccesspoint--abcd-ab1--xa-s3".to_owned()))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .send()
            .await
    );
    rcvr.expect_no_request();
    let error = _result.expect_err("expected error: Invalid Configuration: DualStack and custom endpoint are not supported [Error on Access Point APIs on express bucket for custom endpoint and dual stack]");
    assert!(
        format!("{:?}", error).contains("Invalid Configuration: DualStack and custom endpoint are not supported"),
        "expected error to contain `Invalid Configuration: DualStack and custom endpoint are not supported` but it was {:?}",
        error
    );
}

#[::tokio::test]
async fn operation_input_test_list_access_points_for_directory_buckets_187() {
    /* documentation: Error Access Point APIs on express bucket for custom endpoint and dual stack for List */
    /* builtIns: {
        "AWS::Region": "us-east-1",
        "SDK::Endpoint": "https://my-endpoint.express-control.s3.aws.dev",
        "AWS::UseDualStack": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_http_client::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        let builder = builder.endpoint_url("https://my-endpoint.express-control.s3.aws.dev");
        let builder = builder.use_dual_stack(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .list_access_points_for_directory_buckets()
            .set_directory_bucket(::std::option::Option::Some("mybucket--abcd-ab1--x-s3".to_owned()))
            .set_account_id(::std::option::Option::Some("871317572157".to_owned()))
            .send()
            .await
    );
    rcvr.expect_no_request();
    let error = _result.expect_err("expected error: Invalid Configuration: DualStack and custom endpoint are not supported [Error Access Point APIs on express bucket for custom endpoint and dual stack for List]");
    assert!(
        format!("{:?}", error).contains("Invalid Configuration: DualStack and custom endpoint are not supported"),
        "expected error to contain `Invalid Configuration: DualStack and custom endpoint are not supported` but it was {:?}",
        error
    );
}
