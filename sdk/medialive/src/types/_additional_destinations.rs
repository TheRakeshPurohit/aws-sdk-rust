// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Additional output destinations for a CMAF Ingest output group
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AdditionalDestinations {
    /// The destination location
    pub destination: ::std::option::Option<crate::types::OutputLocationRef>,
}
impl AdditionalDestinations {
    /// The destination location
    pub fn destination(&self) -> ::std::option::Option<&crate::types::OutputLocationRef> {
        self.destination.as_ref()
    }
}
impl AdditionalDestinations {
    /// Creates a new builder-style object to manufacture [`AdditionalDestinations`](crate::types::AdditionalDestinations).
    pub fn builder() -> crate::types::builders::AdditionalDestinationsBuilder {
        crate::types::builders::AdditionalDestinationsBuilder::default()
    }
}

/// A builder for [`AdditionalDestinations`](crate::types::AdditionalDestinations).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AdditionalDestinationsBuilder {
    pub(crate) destination: ::std::option::Option<crate::types::OutputLocationRef>,
}
impl AdditionalDestinationsBuilder {
    /// The destination location
    /// This field is required.
    pub fn destination(mut self, input: crate::types::OutputLocationRef) -> Self {
        self.destination = ::std::option::Option::Some(input);
        self
    }
    /// The destination location
    pub fn set_destination(mut self, input: ::std::option::Option<crate::types::OutputLocationRef>) -> Self {
        self.destination = input;
        self
    }
    /// The destination location
    pub fn get_destination(&self) -> &::std::option::Option<crate::types::OutputLocationRef> {
        &self.destination
    }
    /// Consumes the builder and constructs a [`AdditionalDestinations`](crate::types::AdditionalDestinations).
    pub fn build(self) -> crate::types::AdditionalDestinations {
        crate::types::AdditionalDestinations {
            destination: self.destination,
        }
    }
}
