// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Media Package V2 Destination Settings
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MediaPackageV2DestinationSettings {
    /// Applies only to an output that contains audio. If you want to put several audio encodes into one audio rendition group, decide on a name (ID) for the group. Then in every audio output that you want to belong to that group, enter that ID in this field. Note that this information is part of the HLS specification (not the CMAF specification), but if you include it then MediaPackage will include it in the manifest it creates for the video player.
    pub audio_group_id: ::std::option::Option<::std::string::String>,
    /// Applies only to an output that contains video, and only if you want to associate one or more audio groups to this video. In this field you assign the groups that you create (in the Group ID fields in the various audio outputs). Enter one group ID, or enter a comma-separated list of group IDs. Note that this information is part of the HLS specification (not the CMAF specification), but if you include it then MediaPackage will include it in the manifest it creates for the video player.
    pub audio_rendition_sets: ::std::option::Option<::std::string::String>,
    /// Specifies whether MediaPackage should set this output as the auto-select rendition in the HLS manifest. YES means this must be the auto-select. NO means this should never be the auto-select. OMIT means MediaPackage decides what to set on this rendition. When you consider all the renditions, follow these guidelines. You can set zero or one renditions to YES. You can set zero or more renditions to NO, but you can't set all renditions to NO. You can set zero, some, or all to OMIT.
    pub hls_auto_select: ::std::option::Option<crate::types::HlsAutoSelect>,
    /// Specifies whether MediaPackage should set this output as the default rendition in the HLS manifest. YES means this must be the default. NO means this should never be the default. OMIT means MediaPackage decides what to set on this rendition. When you consider all the renditions, follow these guidelines. You can set zero or one renditions to YES. You can set zero or more renditions to NO, but you can't set all renditions to NO. You can set zero, some, or all to OMIT.
    pub hls_default: ::std::option::Option<crate::types::HlsDefault>,
}
impl MediaPackageV2DestinationSettings {
    /// Applies only to an output that contains audio. If you want to put several audio encodes into one audio rendition group, decide on a name (ID) for the group. Then in every audio output that you want to belong to that group, enter that ID in this field. Note that this information is part of the HLS specification (not the CMAF specification), but if you include it then MediaPackage will include it in the manifest it creates for the video player.
    pub fn audio_group_id(&self) -> ::std::option::Option<&str> {
        self.audio_group_id.as_deref()
    }
    /// Applies only to an output that contains video, and only if you want to associate one or more audio groups to this video. In this field you assign the groups that you create (in the Group ID fields in the various audio outputs). Enter one group ID, or enter a comma-separated list of group IDs. Note that this information is part of the HLS specification (not the CMAF specification), but if you include it then MediaPackage will include it in the manifest it creates for the video player.
    pub fn audio_rendition_sets(&self) -> ::std::option::Option<&str> {
        self.audio_rendition_sets.as_deref()
    }
    /// Specifies whether MediaPackage should set this output as the auto-select rendition in the HLS manifest. YES means this must be the auto-select. NO means this should never be the auto-select. OMIT means MediaPackage decides what to set on this rendition. When you consider all the renditions, follow these guidelines. You can set zero or one renditions to YES. You can set zero or more renditions to NO, but you can't set all renditions to NO. You can set zero, some, or all to OMIT.
    pub fn hls_auto_select(&self) -> ::std::option::Option<&crate::types::HlsAutoSelect> {
        self.hls_auto_select.as_ref()
    }
    /// Specifies whether MediaPackage should set this output as the default rendition in the HLS manifest. YES means this must be the default. NO means this should never be the default. OMIT means MediaPackage decides what to set on this rendition. When you consider all the renditions, follow these guidelines. You can set zero or one renditions to YES. You can set zero or more renditions to NO, but you can't set all renditions to NO. You can set zero, some, or all to OMIT.
    pub fn hls_default(&self) -> ::std::option::Option<&crate::types::HlsDefault> {
        self.hls_default.as_ref()
    }
}
impl MediaPackageV2DestinationSettings {
    /// Creates a new builder-style object to manufacture [`MediaPackageV2DestinationSettings`](crate::types::MediaPackageV2DestinationSettings).
    pub fn builder() -> crate::types::builders::MediaPackageV2DestinationSettingsBuilder {
        crate::types::builders::MediaPackageV2DestinationSettingsBuilder::default()
    }
}

/// A builder for [`MediaPackageV2DestinationSettings`](crate::types::MediaPackageV2DestinationSettings).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct MediaPackageV2DestinationSettingsBuilder {
    pub(crate) audio_group_id: ::std::option::Option<::std::string::String>,
    pub(crate) audio_rendition_sets: ::std::option::Option<::std::string::String>,
    pub(crate) hls_auto_select: ::std::option::Option<crate::types::HlsAutoSelect>,
    pub(crate) hls_default: ::std::option::Option<crate::types::HlsDefault>,
}
impl MediaPackageV2DestinationSettingsBuilder {
    /// Applies only to an output that contains audio. If you want to put several audio encodes into one audio rendition group, decide on a name (ID) for the group. Then in every audio output that you want to belong to that group, enter that ID in this field. Note that this information is part of the HLS specification (not the CMAF specification), but if you include it then MediaPackage will include it in the manifest it creates for the video player.
    pub fn audio_group_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.audio_group_id = ::std::option::Option::Some(input.into());
        self
    }
    /// Applies only to an output that contains audio. If you want to put several audio encodes into one audio rendition group, decide on a name (ID) for the group. Then in every audio output that you want to belong to that group, enter that ID in this field. Note that this information is part of the HLS specification (not the CMAF specification), but if you include it then MediaPackage will include it in the manifest it creates for the video player.
    pub fn set_audio_group_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.audio_group_id = input;
        self
    }
    /// Applies only to an output that contains audio. If you want to put several audio encodes into one audio rendition group, decide on a name (ID) for the group. Then in every audio output that you want to belong to that group, enter that ID in this field. Note that this information is part of the HLS specification (not the CMAF specification), but if you include it then MediaPackage will include it in the manifest it creates for the video player.
    pub fn get_audio_group_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.audio_group_id
    }
    /// Applies only to an output that contains video, and only if you want to associate one or more audio groups to this video. In this field you assign the groups that you create (in the Group ID fields in the various audio outputs). Enter one group ID, or enter a comma-separated list of group IDs. Note that this information is part of the HLS specification (not the CMAF specification), but if you include it then MediaPackage will include it in the manifest it creates for the video player.
    pub fn audio_rendition_sets(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.audio_rendition_sets = ::std::option::Option::Some(input.into());
        self
    }
    /// Applies only to an output that contains video, and only if you want to associate one or more audio groups to this video. In this field you assign the groups that you create (in the Group ID fields in the various audio outputs). Enter one group ID, or enter a comma-separated list of group IDs. Note that this information is part of the HLS specification (not the CMAF specification), but if you include it then MediaPackage will include it in the manifest it creates for the video player.
    pub fn set_audio_rendition_sets(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.audio_rendition_sets = input;
        self
    }
    /// Applies only to an output that contains video, and only if you want to associate one or more audio groups to this video. In this field you assign the groups that you create (in the Group ID fields in the various audio outputs). Enter one group ID, or enter a comma-separated list of group IDs. Note that this information is part of the HLS specification (not the CMAF specification), but if you include it then MediaPackage will include it in the manifest it creates for the video player.
    pub fn get_audio_rendition_sets(&self) -> &::std::option::Option<::std::string::String> {
        &self.audio_rendition_sets
    }
    /// Specifies whether MediaPackage should set this output as the auto-select rendition in the HLS manifest. YES means this must be the auto-select. NO means this should never be the auto-select. OMIT means MediaPackage decides what to set on this rendition. When you consider all the renditions, follow these guidelines. You can set zero or one renditions to YES. You can set zero or more renditions to NO, but you can't set all renditions to NO. You can set zero, some, or all to OMIT.
    pub fn hls_auto_select(mut self, input: crate::types::HlsAutoSelect) -> Self {
        self.hls_auto_select = ::std::option::Option::Some(input);
        self
    }
    /// Specifies whether MediaPackage should set this output as the auto-select rendition in the HLS manifest. YES means this must be the auto-select. NO means this should never be the auto-select. OMIT means MediaPackage decides what to set on this rendition. When you consider all the renditions, follow these guidelines. You can set zero or one renditions to YES. You can set zero or more renditions to NO, but you can't set all renditions to NO. You can set zero, some, or all to OMIT.
    pub fn set_hls_auto_select(mut self, input: ::std::option::Option<crate::types::HlsAutoSelect>) -> Self {
        self.hls_auto_select = input;
        self
    }
    /// Specifies whether MediaPackage should set this output as the auto-select rendition in the HLS manifest. YES means this must be the auto-select. NO means this should never be the auto-select. OMIT means MediaPackage decides what to set on this rendition. When you consider all the renditions, follow these guidelines. You can set zero or one renditions to YES. You can set zero or more renditions to NO, but you can't set all renditions to NO. You can set zero, some, or all to OMIT.
    pub fn get_hls_auto_select(&self) -> &::std::option::Option<crate::types::HlsAutoSelect> {
        &self.hls_auto_select
    }
    /// Specifies whether MediaPackage should set this output as the default rendition in the HLS manifest. YES means this must be the default. NO means this should never be the default. OMIT means MediaPackage decides what to set on this rendition. When you consider all the renditions, follow these guidelines. You can set zero or one renditions to YES. You can set zero or more renditions to NO, but you can't set all renditions to NO. You can set zero, some, or all to OMIT.
    pub fn hls_default(mut self, input: crate::types::HlsDefault) -> Self {
        self.hls_default = ::std::option::Option::Some(input);
        self
    }
    /// Specifies whether MediaPackage should set this output as the default rendition in the HLS manifest. YES means this must be the default. NO means this should never be the default. OMIT means MediaPackage decides what to set on this rendition. When you consider all the renditions, follow these guidelines. You can set zero or one renditions to YES. You can set zero or more renditions to NO, but you can't set all renditions to NO. You can set zero, some, or all to OMIT.
    pub fn set_hls_default(mut self, input: ::std::option::Option<crate::types::HlsDefault>) -> Self {
        self.hls_default = input;
        self
    }
    /// Specifies whether MediaPackage should set this output as the default rendition in the HLS manifest. YES means this must be the default. NO means this should never be the default. OMIT means MediaPackage decides what to set on this rendition. When you consider all the renditions, follow these guidelines. You can set zero or one renditions to YES. You can set zero or more renditions to NO, but you can't set all renditions to NO. You can set zero, some, or all to OMIT.
    pub fn get_hls_default(&self) -> &::std::option::Option<crate::types::HlsDefault> {
        &self.hls_default
    }
    /// Consumes the builder and constructs a [`MediaPackageV2DestinationSettings`](crate::types::MediaPackageV2DestinationSettings).
    pub fn build(self) -> crate::types::MediaPackageV2DestinationSettings {
        crate::types::MediaPackageV2DestinationSettings {
            audio_group_id: self.audio_group_id,
            audio_rendition_sets: self.audio_rendition_sets,
            hls_auto_select: self.hls_auto_select,
            hls_default: self.hls_default,
        }
    }
}
