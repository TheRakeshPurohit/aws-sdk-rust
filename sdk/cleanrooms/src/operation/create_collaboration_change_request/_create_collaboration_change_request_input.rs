// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateCollaborationChangeRequestInput {
    /// <p>The identifier of the collaboration that the change request is made against.</p>
    pub collaboration_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The list of changes to apply to the collaboration. Each change specifies the type of modification and the details of what should be changed.</p>
    pub changes: ::std::option::Option<::std::vec::Vec<crate::types::ChangeInput>>,
}
impl CreateCollaborationChangeRequestInput {
    /// <p>The identifier of the collaboration that the change request is made against.</p>
    pub fn collaboration_identifier(&self) -> ::std::option::Option<&str> {
        self.collaboration_identifier.as_deref()
    }
    /// <p>The list of changes to apply to the collaboration. Each change specifies the type of modification and the details of what should be changed.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.changes.is_none()`.
    pub fn changes(&self) -> &[crate::types::ChangeInput] {
        self.changes.as_deref().unwrap_or_default()
    }
}
impl CreateCollaborationChangeRequestInput {
    /// Creates a new builder-style object to manufacture [`CreateCollaborationChangeRequestInput`](crate::operation::create_collaboration_change_request::CreateCollaborationChangeRequestInput).
    pub fn builder() -> crate::operation::create_collaboration_change_request::builders::CreateCollaborationChangeRequestInputBuilder {
        crate::operation::create_collaboration_change_request::builders::CreateCollaborationChangeRequestInputBuilder::default()
    }
}

/// A builder for [`CreateCollaborationChangeRequestInput`](crate::operation::create_collaboration_change_request::CreateCollaborationChangeRequestInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateCollaborationChangeRequestInputBuilder {
    pub(crate) collaboration_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) changes: ::std::option::Option<::std::vec::Vec<crate::types::ChangeInput>>,
}
impl CreateCollaborationChangeRequestInputBuilder {
    /// <p>The identifier of the collaboration that the change request is made against.</p>
    /// This field is required.
    pub fn collaboration_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.collaboration_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the collaboration that the change request is made against.</p>
    pub fn set_collaboration_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.collaboration_identifier = input;
        self
    }
    /// <p>The identifier of the collaboration that the change request is made against.</p>
    pub fn get_collaboration_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.collaboration_identifier
    }
    /// Appends an item to `changes`.
    ///
    /// To override the contents of this collection use [`set_changes`](Self::set_changes).
    ///
    /// <p>The list of changes to apply to the collaboration. Each change specifies the type of modification and the details of what should be changed.</p>
    pub fn changes(mut self, input: crate::types::ChangeInput) -> Self {
        let mut v = self.changes.unwrap_or_default();
        v.push(input);
        self.changes = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of changes to apply to the collaboration. Each change specifies the type of modification and the details of what should be changed.</p>
    pub fn set_changes(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ChangeInput>>) -> Self {
        self.changes = input;
        self
    }
    /// <p>The list of changes to apply to the collaboration. Each change specifies the type of modification and the details of what should be changed.</p>
    pub fn get_changes(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ChangeInput>> {
        &self.changes
    }
    /// Consumes the builder and constructs a [`CreateCollaborationChangeRequestInput`](crate::operation::create_collaboration_change_request::CreateCollaborationChangeRequestInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_collaboration_change_request::CreateCollaborationChangeRequestInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::create_collaboration_change_request::CreateCollaborationChangeRequestInput {
                collaboration_identifier: self.collaboration_identifier,
                changes: self.changes,
            },
        )
    }
}
