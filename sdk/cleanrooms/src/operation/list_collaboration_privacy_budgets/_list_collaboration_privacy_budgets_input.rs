// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListCollaborationPrivacyBudgetsInput {
    /// <p>A unique identifier for one of your collaborations.</p>
    pub collaboration_identifier: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the type of the privacy budget.</p>
    pub privacy_budget_type: ::std::option::Option<crate::types::PrivacyBudgetType>,
    /// <p>The maximum number of results that are returned for an API request call. The service chooses a default number if you don't set one. The service might return a `nextToken` even if the `maxResults` value has not been met.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>The pagination token that's used to fetch the next set of results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the Configured Table Association (ConfiguredTableAssociation) used to filter privacy budgets.</p>
    pub access_budget_resource_arn: ::std::option::Option<::std::string::String>,
}
impl ListCollaborationPrivacyBudgetsInput {
    /// <p>A unique identifier for one of your collaborations.</p>
    pub fn collaboration_identifier(&self) -> ::std::option::Option<&str> {
        self.collaboration_identifier.as_deref()
    }
    /// <p>Specifies the type of the privacy budget.</p>
    pub fn privacy_budget_type(&self) -> ::std::option::Option<&crate::types::PrivacyBudgetType> {
        self.privacy_budget_type.as_ref()
    }
    /// <p>The maximum number of results that are returned for an API request call. The service chooses a default number if you don't set one. The service might return a `nextToken` even if the `maxResults` value has not been met.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>The pagination token that's used to fetch the next set of results.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the Configured Table Association (ConfiguredTableAssociation) used to filter privacy budgets.</p>
    pub fn access_budget_resource_arn(&self) -> ::std::option::Option<&str> {
        self.access_budget_resource_arn.as_deref()
    }
}
impl ListCollaborationPrivacyBudgetsInput {
    /// Creates a new builder-style object to manufacture [`ListCollaborationPrivacyBudgetsInput`](crate::operation::list_collaboration_privacy_budgets::ListCollaborationPrivacyBudgetsInput).
    pub fn builder() -> crate::operation::list_collaboration_privacy_budgets::builders::ListCollaborationPrivacyBudgetsInputBuilder {
        crate::operation::list_collaboration_privacy_budgets::builders::ListCollaborationPrivacyBudgetsInputBuilder::default()
    }
}

/// A builder for [`ListCollaborationPrivacyBudgetsInput`](crate::operation::list_collaboration_privacy_budgets::ListCollaborationPrivacyBudgetsInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListCollaborationPrivacyBudgetsInputBuilder {
    pub(crate) collaboration_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) privacy_budget_type: ::std::option::Option<crate::types::PrivacyBudgetType>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) access_budget_resource_arn: ::std::option::Option<::std::string::String>,
}
impl ListCollaborationPrivacyBudgetsInputBuilder {
    /// <p>A unique identifier for one of your collaborations.</p>
    /// This field is required.
    pub fn collaboration_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.collaboration_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier for one of your collaborations.</p>
    pub fn set_collaboration_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.collaboration_identifier = input;
        self
    }
    /// <p>A unique identifier for one of your collaborations.</p>
    pub fn get_collaboration_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.collaboration_identifier
    }
    /// <p>Specifies the type of the privacy budget.</p>
    /// This field is required.
    pub fn privacy_budget_type(mut self, input: crate::types::PrivacyBudgetType) -> Self {
        self.privacy_budget_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the type of the privacy budget.</p>
    pub fn set_privacy_budget_type(mut self, input: ::std::option::Option<crate::types::PrivacyBudgetType>) -> Self {
        self.privacy_budget_type = input;
        self
    }
    /// <p>Specifies the type of the privacy budget.</p>
    pub fn get_privacy_budget_type(&self) -> &::std::option::Option<crate::types::PrivacyBudgetType> {
        &self.privacy_budget_type
    }
    /// <p>The maximum number of results that are returned for an API request call. The service chooses a default number if you don't set one. The service might return a `nextToken` even if the `maxResults` value has not been met.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results that are returned for an API request call. The service chooses a default number if you don't set one. The service might return a `nextToken` even if the `maxResults` value has not been met.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of results that are returned for an API request call. The service chooses a default number if you don't set one. The service might return a `nextToken` even if the `maxResults` value has not been met.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>The pagination token that's used to fetch the next set of results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The pagination token that's used to fetch the next set of results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The pagination token that's used to fetch the next set of results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The Amazon Resource Name (ARN) of the Configured Table Association (ConfiguredTableAssociation) used to filter privacy budgets.</p>
    pub fn access_budget_resource_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.access_budget_resource_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Configured Table Association (ConfiguredTableAssociation) used to filter privacy budgets.</p>
    pub fn set_access_budget_resource_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.access_budget_resource_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Configured Table Association (ConfiguredTableAssociation) used to filter privacy budgets.</p>
    pub fn get_access_budget_resource_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.access_budget_resource_arn
    }
    /// Consumes the builder and constructs a [`ListCollaborationPrivacyBudgetsInput`](crate::operation::list_collaboration_privacy_budgets::ListCollaborationPrivacyBudgetsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_collaboration_privacy_budgets::ListCollaborationPrivacyBudgetsInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::list_collaboration_privacy_budgets::ListCollaborationPrivacyBudgetsInput {
                collaboration_identifier: self.collaboration_identifier,
                privacy_budget_type: self.privacy_budget_type,
                max_results: self.max_results,
                next_token: self.next_token,
                access_budget_resource_arn: self.access_budget_resource_arn,
            },
        )
    }
}
