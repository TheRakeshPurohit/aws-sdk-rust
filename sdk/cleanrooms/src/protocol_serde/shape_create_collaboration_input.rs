// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_collaboration_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_collaboration::CreateCollaborationInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.allowed_result_regions {
        let mut array_2 = object.key("allowedResultRegions").start_array();
        for item_3 in var_1 {
            {
                array_2.value().string(item_3.as_str());
            }
        }
        array_2.finish();
    }
    if let Some(var_4) = &input.analytics_engine {
        object.key("analyticsEngine").string(var_4.as_str());
    }
    if let Some(var_5) = &input.auto_approved_change_request_types {
        let mut array_6 = object.key("autoApprovedChangeRequestTypes").start_array();
        for item_7 in var_5 {
            {
                array_6.value().string(item_7.as_str());
            }
        }
        array_6.finish();
    }
    if let Some(var_8) = &input.creator_display_name {
        object.key("creatorDisplayName").string(var_8.as_str());
    }
    if let Some(var_9) = &input.creator_ml_member_abilities {
        #[allow(unused_mut)]
        let mut object_10 = object.key("creatorMLMemberAbilities").start_object();
        crate::protocol_serde::shape_ml_member_abilities::ser_ml_member_abilities(&mut object_10, var_9)?;
        object_10.finish();
    }
    if let Some(var_11) = &input.creator_member_abilities {
        let mut array_12 = object.key("creatorMemberAbilities").start_array();
        for item_13 in var_11 {
            {
                array_12.value().string(item_13.as_str());
            }
        }
        array_12.finish();
    }
    if let Some(var_14) = &input.creator_payment_configuration {
        #[allow(unused_mut)]
        let mut object_15 = object.key("creatorPaymentConfiguration").start_object();
        crate::protocol_serde::shape_payment_configuration::ser_payment_configuration(&mut object_15, var_14)?;
        object_15.finish();
    }
    if let Some(var_16) = &input.data_encryption_metadata {
        #[allow(unused_mut)]
        let mut object_17 = object.key("dataEncryptionMetadata").start_object();
        crate::protocol_serde::shape_data_encryption_metadata::ser_data_encryption_metadata(&mut object_17, var_16)?;
        object_17.finish();
    }
    if let Some(var_18) = &input.description {
        object.key("description").string(var_18.as_str());
    }
    if let Some(var_19) = &input.job_log_status {
        object.key("jobLogStatus").string(var_19.as_str());
    }
    if let Some(var_20) = &input.members {
        let mut array_21 = object.key("members").start_array();
        for item_22 in var_20 {
            {
                #[allow(unused_mut)]
                let mut object_23 = array_21.value().start_object();
                crate::protocol_serde::shape_member_specification::ser_member_specification(&mut object_23, item_22)?;
                object_23.finish();
            }
        }
        array_21.finish();
    }
    if let Some(var_24) = &input.name {
        object.key("name").string(var_24.as_str());
    }
    if let Some(var_25) = &input.query_log_status {
        object.key("queryLogStatus").string(var_25.as_str());
    }
    if let Some(var_26) = &input.tags {
        #[allow(unused_mut)]
        let mut object_27 = object.key("tags").start_object();
        for (key_28, value_29) in var_26 {
            {
                object_27.key(key_28.as_str()).string(value_29.as_str());
            }
        }
        object_27.finish();
    }
    Ok(())
}
