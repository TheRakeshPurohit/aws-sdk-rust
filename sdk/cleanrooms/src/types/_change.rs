// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a single change within a collaboration change request, containing the change identifier and specification.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Change {
    /// <p>The type of specification for this change.</p>
    pub specification_type: crate::types::ChangeSpecificationType,
    /// <p>The specification details for this change.</p>
    pub specification: ::std::option::Option<crate::types::ChangeSpecification>,
    /// <p>The list of change types that were applied.</p>
    pub types: ::std::vec::Vec<crate::types::ChangeType>,
}
impl Change {
    /// <p>The type of specification for this change.</p>
    pub fn specification_type(&self) -> &crate::types::ChangeSpecificationType {
        &self.specification_type
    }
    /// <p>The specification details for this change.</p>
    pub fn specification(&self) -> ::std::option::Option<&crate::types::ChangeSpecification> {
        self.specification.as_ref()
    }
    /// <p>The list of change types that were applied.</p>
    pub fn types(&self) -> &[crate::types::ChangeType] {
        use std::ops::Deref;
        self.types.deref()
    }
}
impl Change {
    /// Creates a new builder-style object to manufacture [`Change`](crate::types::Change).
    pub fn builder() -> crate::types::builders::ChangeBuilder {
        crate::types::builders::ChangeBuilder::default()
    }
}

/// A builder for [`Change`](crate::types::Change).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ChangeBuilder {
    pub(crate) specification_type: ::std::option::Option<crate::types::ChangeSpecificationType>,
    pub(crate) specification: ::std::option::Option<crate::types::ChangeSpecification>,
    pub(crate) types: ::std::option::Option<::std::vec::Vec<crate::types::ChangeType>>,
}
impl ChangeBuilder {
    /// <p>The type of specification for this change.</p>
    /// This field is required.
    pub fn specification_type(mut self, input: crate::types::ChangeSpecificationType) -> Self {
        self.specification_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of specification for this change.</p>
    pub fn set_specification_type(mut self, input: ::std::option::Option<crate::types::ChangeSpecificationType>) -> Self {
        self.specification_type = input;
        self
    }
    /// <p>The type of specification for this change.</p>
    pub fn get_specification_type(&self) -> &::std::option::Option<crate::types::ChangeSpecificationType> {
        &self.specification_type
    }
    /// <p>The specification details for this change.</p>
    /// This field is required.
    pub fn specification(mut self, input: crate::types::ChangeSpecification) -> Self {
        self.specification = ::std::option::Option::Some(input);
        self
    }
    /// <p>The specification details for this change.</p>
    pub fn set_specification(mut self, input: ::std::option::Option<crate::types::ChangeSpecification>) -> Self {
        self.specification = input;
        self
    }
    /// <p>The specification details for this change.</p>
    pub fn get_specification(&self) -> &::std::option::Option<crate::types::ChangeSpecification> {
        &self.specification
    }
    /// Appends an item to `types`.
    ///
    /// To override the contents of this collection use [`set_types`](Self::set_types).
    ///
    /// <p>The list of change types that were applied.</p>
    pub fn types(mut self, input: crate::types::ChangeType) -> Self {
        let mut v = self.types.unwrap_or_default();
        v.push(input);
        self.types = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of change types that were applied.</p>
    pub fn set_types(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ChangeType>>) -> Self {
        self.types = input;
        self
    }
    /// <p>The list of change types that were applied.</p>
    pub fn get_types(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ChangeType>> {
        &self.types
    }
    /// Consumes the builder and constructs a [`Change`](crate::types::Change).
    /// This method will fail if any of the following fields are not set:
    /// - [`specification_type`](crate::types::builders::ChangeBuilder::specification_type)
    /// - [`types`](crate::types::builders::ChangeBuilder::types)
    pub fn build(self) -> ::std::result::Result<crate::types::Change, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::Change {
            specification_type: self.specification_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "specification_type",
                    "specification_type was not specified but it is required when building Change",
                )
            })?,
            specification: self.specification,
            types: self.types.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "types",
                    "types was not specified but it is required when building Change",
                )
            })?,
        })
    }
}
