// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Controls and tracks usage limits for associated configured tables within a collaboration across queries and job. Supports both period-based budgets that can renew (daily, weekly, or monthly) and fixed lifetime budgets. Contains the resource ARN, remaining budget information, and up to two budget configurations (period-based and lifetime). By default, table usage is unlimited unless a budget is configured.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AccessBudget {
    /// <p>The Amazon Resource Name (ARN) of the access budget resource.</p>
    pub resource_arn: ::std::string::String,
    /// <p>Detailed budget information including time bounds, remaining budget, and refresh settings.</p>
    pub details: ::std::vec::Vec<crate::types::AccessBudgetDetails>,
    /// <p>The total remaining budget across all budget parameters, showing the lower value between the per-period budget and lifetime budget for this access budget. For individual parameter budgets, see <code>remainingBudget</code>.</p>
    pub aggregate_remaining_budget: i32,
}
impl AccessBudget {
    /// <p>The Amazon Resource Name (ARN) of the access budget resource.</p>
    pub fn resource_arn(&self) -> &str {
        use std::ops::Deref;
        self.resource_arn.deref()
    }
    /// <p>Detailed budget information including time bounds, remaining budget, and refresh settings.</p>
    pub fn details(&self) -> &[crate::types::AccessBudgetDetails] {
        use std::ops::Deref;
        self.details.deref()
    }
    /// <p>The total remaining budget across all budget parameters, showing the lower value between the per-period budget and lifetime budget for this access budget. For individual parameter budgets, see <code>remainingBudget</code>.</p>
    pub fn aggregate_remaining_budget(&self) -> i32 {
        self.aggregate_remaining_budget
    }
}
impl AccessBudget {
    /// Creates a new builder-style object to manufacture [`AccessBudget`](crate::types::AccessBudget).
    pub fn builder() -> crate::types::builders::AccessBudgetBuilder {
        crate::types::builders::AccessBudgetBuilder::default()
    }
}

/// A builder for [`AccessBudget`](crate::types::AccessBudget).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AccessBudgetBuilder {
    pub(crate) resource_arn: ::std::option::Option<::std::string::String>,
    pub(crate) details: ::std::option::Option<::std::vec::Vec<crate::types::AccessBudgetDetails>>,
    pub(crate) aggregate_remaining_budget: ::std::option::Option<i32>,
}
impl AccessBudgetBuilder {
    /// <p>The Amazon Resource Name (ARN) of the access budget resource.</p>
    /// This field is required.
    pub fn resource_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the access budget resource.</p>
    pub fn set_resource_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the access budget resource.</p>
    pub fn get_resource_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_arn
    }
    /// Appends an item to `details`.
    ///
    /// To override the contents of this collection use [`set_details`](Self::set_details).
    ///
    /// <p>Detailed budget information including time bounds, remaining budget, and refresh settings.</p>
    pub fn details(mut self, input: crate::types::AccessBudgetDetails) -> Self {
        let mut v = self.details.unwrap_or_default();
        v.push(input);
        self.details = ::std::option::Option::Some(v);
        self
    }
    /// <p>Detailed budget information including time bounds, remaining budget, and refresh settings.</p>
    pub fn set_details(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AccessBudgetDetails>>) -> Self {
        self.details = input;
        self
    }
    /// <p>Detailed budget information including time bounds, remaining budget, and refresh settings.</p>
    pub fn get_details(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AccessBudgetDetails>> {
        &self.details
    }
    /// <p>The total remaining budget across all budget parameters, showing the lower value between the per-period budget and lifetime budget for this access budget. For individual parameter budgets, see <code>remainingBudget</code>.</p>
    /// This field is required.
    pub fn aggregate_remaining_budget(mut self, input: i32) -> Self {
        self.aggregate_remaining_budget = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total remaining budget across all budget parameters, showing the lower value between the per-period budget and lifetime budget for this access budget. For individual parameter budgets, see <code>remainingBudget</code>.</p>
    pub fn set_aggregate_remaining_budget(mut self, input: ::std::option::Option<i32>) -> Self {
        self.aggregate_remaining_budget = input;
        self
    }
    /// <p>The total remaining budget across all budget parameters, showing the lower value between the per-period budget and lifetime budget for this access budget. For individual parameter budgets, see <code>remainingBudget</code>.</p>
    pub fn get_aggregate_remaining_budget(&self) -> &::std::option::Option<i32> {
        &self.aggregate_remaining_budget
    }
    /// Consumes the builder and constructs a [`AccessBudget`](crate::types::AccessBudget).
    /// This method will fail if any of the following fields are not set:
    /// - [`resource_arn`](crate::types::builders::AccessBudgetBuilder::resource_arn)
    /// - [`details`](crate::types::builders::AccessBudgetBuilder::details)
    /// - [`aggregate_remaining_budget`](crate::types::builders::AccessBudgetBuilder::aggregate_remaining_budget)
    pub fn build(self) -> ::std::result::Result<crate::types::AccessBudget, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AccessBudget {
            resource_arn: self.resource_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "resource_arn",
                    "resource_arn was not specified but it is required when building AccessBudget",
                )
            })?,
            details: self.details.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "details",
                    "details was not specified but it is required when building AccessBudget",
                )
            })?,
            aggregate_remaining_budget: self.aggregate_remaining_budget.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "aggregate_remaining_budget",
                    "aggregate_remaining_budget was not specified but it is required when building AccessBudget",
                )
            })?,
        })
    }
}
