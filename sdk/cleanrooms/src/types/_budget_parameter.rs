// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Individual budget parameter configuration that defines specific budget allocation settings for access budgets.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BudgetParameter {
    /// <p>The type of budget parameter being configured.</p>
    pub r#type: crate::types::AccessBudgetType,
    /// <p>The budget allocation amount for this specific parameter.</p>
    pub budget: i32,
    /// <p>Whether this individual budget parameter automatically refreshes when the budget period resets.</p>
    pub auto_refresh: ::std::option::Option<crate::types::AutoRefreshMode>,
}
impl BudgetParameter {
    /// <p>The type of budget parameter being configured.</p>
    pub fn r#type(&self) -> &crate::types::AccessBudgetType {
        &self.r#type
    }
    /// <p>The budget allocation amount for this specific parameter.</p>
    pub fn budget(&self) -> i32 {
        self.budget
    }
    /// <p>Whether this individual budget parameter automatically refreshes when the budget period resets.</p>
    pub fn auto_refresh(&self) -> ::std::option::Option<&crate::types::AutoRefreshMode> {
        self.auto_refresh.as_ref()
    }
}
impl BudgetParameter {
    /// Creates a new builder-style object to manufacture [`BudgetParameter`](crate::types::BudgetParameter).
    pub fn builder() -> crate::types::builders::BudgetParameterBuilder {
        crate::types::builders::BudgetParameterBuilder::default()
    }
}

/// A builder for [`BudgetParameter`](crate::types::BudgetParameter).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct BudgetParameterBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::AccessBudgetType>,
    pub(crate) budget: ::std::option::Option<i32>,
    pub(crate) auto_refresh: ::std::option::Option<crate::types::AutoRefreshMode>,
}
impl BudgetParameterBuilder {
    /// <p>The type of budget parameter being configured.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::AccessBudgetType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of budget parameter being configured.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::AccessBudgetType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of budget parameter being configured.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::AccessBudgetType> {
        &self.r#type
    }
    /// <p>The budget allocation amount for this specific parameter.</p>
    /// This field is required.
    pub fn budget(mut self, input: i32) -> Self {
        self.budget = ::std::option::Option::Some(input);
        self
    }
    /// <p>The budget allocation amount for this specific parameter.</p>
    pub fn set_budget(mut self, input: ::std::option::Option<i32>) -> Self {
        self.budget = input;
        self
    }
    /// <p>The budget allocation amount for this specific parameter.</p>
    pub fn get_budget(&self) -> &::std::option::Option<i32> {
        &self.budget
    }
    /// <p>Whether this individual budget parameter automatically refreshes when the budget period resets.</p>
    pub fn auto_refresh(mut self, input: crate::types::AutoRefreshMode) -> Self {
        self.auto_refresh = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether this individual budget parameter automatically refreshes when the budget period resets.</p>
    pub fn set_auto_refresh(mut self, input: ::std::option::Option<crate::types::AutoRefreshMode>) -> Self {
        self.auto_refresh = input;
        self
    }
    /// <p>Whether this individual budget parameter automatically refreshes when the budget period resets.</p>
    pub fn get_auto_refresh(&self) -> &::std::option::Option<crate::types::AutoRefreshMode> {
        &self.auto_refresh
    }
    /// Consumes the builder and constructs a [`BudgetParameter`](crate::types::BudgetParameter).
    /// This method will fail if any of the following fields are not set:
    /// - [`r#type`](crate::types::builders::BudgetParameterBuilder::type)
    /// - [`budget`](crate::types::builders::BudgetParameterBuilder::budget)
    pub fn build(self) -> ::std::result::Result<crate::types::BudgetParameter, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::BudgetParameter {
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building BudgetParameter",
                )
            })?,
            budget: self.budget.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "budget",
                    "budget was not specified but it is required when building BudgetParameter",
                )
            })?,
            auto_refresh: self.auto_refresh,
        })
    }
}
