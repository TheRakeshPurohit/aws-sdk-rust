// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies changes to collaboration membership, including adding new members with their abilities and display names.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MemberChangeSpecification {
    /// <p>The Amazon Web Services account ID of the member to add to the collaboration.</p>
    pub account_id: ::std::string::String,
    /// <p>The abilities granted to the collaboration member. These determine what actions the member can perform within the collaboration.</p><note>
    /// <p>The following values are currently not supported: <code>CAN_QUERY</code>, <code>CAN_RECEIVE_RESULTS,</code> and <code>CAN_RUN_JOB</code>.</p>
    /// <p>Set the value of <code>memberAbilities</code> to <code>\[\]</code> to allow a member to contribute data.</p>
    /// </note>
    pub member_abilities: ::std::vec::Vec<crate::types::MemberAbility>,
    /// <p>Specifies the display name that will be shown for this member in the collaboration. While this field is required when inviting new members, it becomes optional when modifying abilities of existing collaboration members.</p>
    pub display_name: ::std::option::Option<::std::string::String>,
}
impl MemberChangeSpecification {
    /// <p>The Amazon Web Services account ID of the member to add to the collaboration.</p>
    pub fn account_id(&self) -> &str {
        use std::ops::Deref;
        self.account_id.deref()
    }
    /// <p>The abilities granted to the collaboration member. These determine what actions the member can perform within the collaboration.</p><note>
    /// <p>The following values are currently not supported: <code>CAN_QUERY</code>, <code>CAN_RECEIVE_RESULTS,</code> and <code>CAN_RUN_JOB</code>.</p>
    /// <p>Set the value of <code>memberAbilities</code> to <code>\[\]</code> to allow a member to contribute data.</p>
    /// </note>
    pub fn member_abilities(&self) -> &[crate::types::MemberAbility] {
        use std::ops::Deref;
        self.member_abilities.deref()
    }
    /// <p>Specifies the display name that will be shown for this member in the collaboration. While this field is required when inviting new members, it becomes optional when modifying abilities of existing collaboration members.</p>
    pub fn display_name(&self) -> ::std::option::Option<&str> {
        self.display_name.as_deref()
    }
}
impl MemberChangeSpecification {
    /// Creates a new builder-style object to manufacture [`MemberChangeSpecification`](crate::types::MemberChangeSpecification).
    pub fn builder() -> crate::types::builders::MemberChangeSpecificationBuilder {
        crate::types::builders::MemberChangeSpecificationBuilder::default()
    }
}

/// A builder for [`MemberChangeSpecification`](crate::types::MemberChangeSpecification).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct MemberChangeSpecificationBuilder {
    pub(crate) account_id: ::std::option::Option<::std::string::String>,
    pub(crate) member_abilities: ::std::option::Option<::std::vec::Vec<crate::types::MemberAbility>>,
    pub(crate) display_name: ::std::option::Option<::std::string::String>,
}
impl MemberChangeSpecificationBuilder {
    /// <p>The Amazon Web Services account ID of the member to add to the collaboration.</p>
    /// This field is required.
    pub fn account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID of the member to add to the collaboration.</p>
    pub fn set_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// <p>The Amazon Web Services account ID of the member to add to the collaboration.</p>
    pub fn get_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.account_id
    }
    /// Appends an item to `member_abilities`.
    ///
    /// To override the contents of this collection use [`set_member_abilities`](Self::set_member_abilities).
    ///
    /// <p>The abilities granted to the collaboration member. These determine what actions the member can perform within the collaboration.</p><note>
    /// <p>The following values are currently not supported: <code>CAN_QUERY</code>, <code>CAN_RECEIVE_RESULTS,</code> and <code>CAN_RUN_JOB</code>.</p>
    /// <p>Set the value of <code>memberAbilities</code> to <code>\[\]</code> to allow a member to contribute data.</p>
    /// </note>
    pub fn member_abilities(mut self, input: crate::types::MemberAbility) -> Self {
        let mut v = self.member_abilities.unwrap_or_default();
        v.push(input);
        self.member_abilities = ::std::option::Option::Some(v);
        self
    }
    /// <p>The abilities granted to the collaboration member. These determine what actions the member can perform within the collaboration.</p><note>
    /// <p>The following values are currently not supported: <code>CAN_QUERY</code>, <code>CAN_RECEIVE_RESULTS,</code> and <code>CAN_RUN_JOB</code>.</p>
    /// <p>Set the value of <code>memberAbilities</code> to <code>\[\]</code> to allow a member to contribute data.</p>
    /// </note>
    pub fn set_member_abilities(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::MemberAbility>>) -> Self {
        self.member_abilities = input;
        self
    }
    /// <p>The abilities granted to the collaboration member. These determine what actions the member can perform within the collaboration.</p><note>
    /// <p>The following values are currently not supported: <code>CAN_QUERY</code>, <code>CAN_RECEIVE_RESULTS,</code> and <code>CAN_RUN_JOB</code>.</p>
    /// <p>Set the value of <code>memberAbilities</code> to <code>\[\]</code> to allow a member to contribute data.</p>
    /// </note>
    pub fn get_member_abilities(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MemberAbility>> {
        &self.member_abilities
    }
    /// <p>Specifies the display name that will be shown for this member in the collaboration. While this field is required when inviting new members, it becomes optional when modifying abilities of existing collaboration members.</p>
    pub fn display_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.display_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the display name that will be shown for this member in the collaboration. While this field is required when inviting new members, it becomes optional when modifying abilities of existing collaboration members.</p>
    pub fn set_display_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.display_name = input;
        self
    }
    /// <p>Specifies the display name that will be shown for this member in the collaboration. While this field is required when inviting new members, it becomes optional when modifying abilities of existing collaboration members.</p>
    pub fn get_display_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.display_name
    }
    /// Consumes the builder and constructs a [`MemberChangeSpecification`](crate::types::MemberChangeSpecification).
    /// This method will fail if any of the following fields are not set:
    /// - [`account_id`](crate::types::builders::MemberChangeSpecificationBuilder::account_id)
    /// - [`member_abilities`](crate::types::builders::MemberChangeSpecificationBuilder::member_abilities)
    pub fn build(self) -> ::std::result::Result<crate::types::MemberChangeSpecification, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::MemberChangeSpecification {
            account_id: self.account_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "account_id",
                    "account_id was not specified but it is required when building MemberChangeSpecification",
                )
            })?,
            member_abilities: self.member_abilities.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "member_abilities",
                    "member_abilities was not specified but it is required when building MemberChangeSpecification",
                )
            })?,
            display_name: self.display_name,
        })
    }
}
