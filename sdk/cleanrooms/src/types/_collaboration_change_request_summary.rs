// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Summary information about a collaboration change request.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CollaborationChangeRequestSummary {
    /// <p>The unique identifier for the change request.</p>
    pub id: ::std::string::String,
    /// <p>The unique identifier for the collaboration.</p>
    pub collaboration_id: ::std::string::String,
    /// <p>The time when the change request was created.</p>
    pub create_time: ::aws_smithy_types::DateTime,
    /// <p>The time when the change request was last updated.</p>
    pub update_time: ::aws_smithy_types::DateTime,
    /// <p>The current status of the change request.</p>
    pub status: crate::types::ChangeRequestStatus,
    /// <p>Whether the change request was automatically approved.</p>
    pub is_auto_approved: bool,
    /// <p>Summary of the changes in this change request.</p>
    pub changes: ::std::vec::Vec<crate::types::Change>,
}
impl CollaborationChangeRequestSummary {
    /// <p>The unique identifier for the change request.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>The unique identifier for the collaboration.</p>
    pub fn collaboration_id(&self) -> &str {
        use std::ops::Deref;
        self.collaboration_id.deref()
    }
    /// <p>The time when the change request was created.</p>
    pub fn create_time(&self) -> &::aws_smithy_types::DateTime {
        &self.create_time
    }
    /// <p>The time when the change request was last updated.</p>
    pub fn update_time(&self) -> &::aws_smithy_types::DateTime {
        &self.update_time
    }
    /// <p>The current status of the change request.</p>
    pub fn status(&self) -> &crate::types::ChangeRequestStatus {
        &self.status
    }
    /// <p>Whether the change request was automatically approved.</p>
    pub fn is_auto_approved(&self) -> bool {
        self.is_auto_approved
    }
    /// <p>Summary of the changes in this change request.</p>
    pub fn changes(&self) -> &[crate::types::Change] {
        use std::ops::Deref;
        self.changes.deref()
    }
}
impl CollaborationChangeRequestSummary {
    /// Creates a new builder-style object to manufacture [`CollaborationChangeRequestSummary`](crate::types::CollaborationChangeRequestSummary).
    pub fn builder() -> crate::types::builders::CollaborationChangeRequestSummaryBuilder {
        crate::types::builders::CollaborationChangeRequestSummaryBuilder::default()
    }
}

/// A builder for [`CollaborationChangeRequestSummary`](crate::types::CollaborationChangeRequestSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CollaborationChangeRequestSummaryBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) collaboration_id: ::std::option::Option<::std::string::String>,
    pub(crate) create_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) update_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) status: ::std::option::Option<crate::types::ChangeRequestStatus>,
    pub(crate) is_auto_approved: ::std::option::Option<bool>,
    pub(crate) changes: ::std::option::Option<::std::vec::Vec<crate::types::Change>>,
}
impl CollaborationChangeRequestSummaryBuilder {
    /// <p>The unique identifier for the change request.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for the change request.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The unique identifier for the change request.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The unique identifier for the collaboration.</p>
    /// This field is required.
    pub fn collaboration_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.collaboration_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for the collaboration.</p>
    pub fn set_collaboration_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.collaboration_id = input;
        self
    }
    /// <p>The unique identifier for the collaboration.</p>
    pub fn get_collaboration_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.collaboration_id
    }
    /// <p>The time when the change request was created.</p>
    /// This field is required.
    pub fn create_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.create_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time when the change request was created.</p>
    pub fn set_create_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.create_time = input;
        self
    }
    /// <p>The time when the change request was created.</p>
    pub fn get_create_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.create_time
    }
    /// <p>The time when the change request was last updated.</p>
    /// This field is required.
    pub fn update_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.update_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time when the change request was last updated.</p>
    pub fn set_update_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.update_time = input;
        self
    }
    /// <p>The time when the change request was last updated.</p>
    pub fn get_update_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.update_time
    }
    /// <p>The current status of the change request.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::ChangeRequestStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the change request.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ChangeRequestStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status of the change request.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ChangeRequestStatus> {
        &self.status
    }
    /// <p>Whether the change request was automatically approved.</p>
    /// This field is required.
    pub fn is_auto_approved(mut self, input: bool) -> Self {
        self.is_auto_approved = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether the change request was automatically approved.</p>
    pub fn set_is_auto_approved(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_auto_approved = input;
        self
    }
    /// <p>Whether the change request was automatically approved.</p>
    pub fn get_is_auto_approved(&self) -> &::std::option::Option<bool> {
        &self.is_auto_approved
    }
    /// Appends an item to `changes`.
    ///
    /// To override the contents of this collection use [`set_changes`](Self::set_changes).
    ///
    /// <p>Summary of the changes in this change request.</p>
    pub fn changes(mut self, input: crate::types::Change) -> Self {
        let mut v = self.changes.unwrap_or_default();
        v.push(input);
        self.changes = ::std::option::Option::Some(v);
        self
    }
    /// <p>Summary of the changes in this change request.</p>
    pub fn set_changes(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Change>>) -> Self {
        self.changes = input;
        self
    }
    /// <p>Summary of the changes in this change request.</p>
    pub fn get_changes(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Change>> {
        &self.changes
    }
    /// Consumes the builder and constructs a [`CollaborationChangeRequestSummary`](crate::types::CollaborationChangeRequestSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`id`](crate::types::builders::CollaborationChangeRequestSummaryBuilder::id)
    /// - [`collaboration_id`](crate::types::builders::CollaborationChangeRequestSummaryBuilder::collaboration_id)
    /// - [`create_time`](crate::types::builders::CollaborationChangeRequestSummaryBuilder::create_time)
    /// - [`update_time`](crate::types::builders::CollaborationChangeRequestSummaryBuilder::update_time)
    /// - [`status`](crate::types::builders::CollaborationChangeRequestSummaryBuilder::status)
    /// - [`is_auto_approved`](crate::types::builders::CollaborationChangeRequestSummaryBuilder::is_auto_approved)
    /// - [`changes`](crate::types::builders::CollaborationChangeRequestSummaryBuilder::changes)
    pub fn build(self) -> ::std::result::Result<crate::types::CollaborationChangeRequestSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CollaborationChangeRequestSummary {
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building CollaborationChangeRequestSummary",
                )
            })?,
            collaboration_id: self.collaboration_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "collaboration_id",
                    "collaboration_id was not specified but it is required when building CollaborationChangeRequestSummary",
                )
            })?,
            create_time: self.create_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "create_time",
                    "create_time was not specified but it is required when building CollaborationChangeRequestSummary",
                )
            })?,
            update_time: self.update_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "update_time",
                    "update_time was not specified but it is required when building CollaborationChangeRequestSummary",
                )
            })?,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building CollaborationChangeRequestSummary",
                )
            })?,
            is_auto_approved: self.is_auto_approved.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "is_auto_approved",
                    "is_auto_approved was not specified but it is required when building CollaborationChangeRequestSummary",
                )
            })?,
            changes: self.changes.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "changes",
                    "changes was not specified but it is required when building CollaborationChangeRequestSummary",
                )
            })?,
        })
    }
}
