// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Detailed information about an access budget including time bounds, budget allocation, and configuration settings.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AccessBudgetDetails {
    /// <p>The start time for the access budget period.</p>
    pub start_time: ::aws_smithy_types::DateTime,
    /// <p>The end time for the access budget period.</p>
    pub end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The remaining budget amount available for use within this access budget.</p>
    pub remaining_budget: i32,
    /// <p>The total budget allocation amount for this access budget.</p>
    pub budget: i32,
    /// <p>Specifies the time period for limiting table usage in queries and jobs. For calendar-based periods, the budget can renew if auto refresh is enabled. For lifetime budgets, the limit applies to the total usage throughout the collaboration. Valid values are:</p>
    /// <p><code>CALENDAR_DAY</code> - Limit table usage per day.</p>
    /// <p><code>CALENDAR_WEEK</code> - Limit table usage per week.</p>
    /// <p><code>CALENDAR_MONTH</code> - Limit table usage per month.</p>
    /// <p><code>LIFETIME</code> - Limit total table usage for the collaboration duration.</p>
    pub budget_type: crate::types::AccessBudgetType,
    /// <p>Indicates whether the budget automatically refreshes for each time period specified in <code>budgetType</code>. Valid values are:</p>
    /// <p><code>ENABLED</code> - The budget refreshes automatically at the start of each period.</p>
    /// <p><code>DISABLED</code> - The budget must be refreshed manually.</p>
    /// <p><code>NULL</code> - The value is null when <code>budgetType</code> is set to <code>LIFETIME</code>.</p>
    pub auto_refresh: ::std::option::Option<crate::types::AutoRefreshMode>,
}
impl AccessBudgetDetails {
    /// <p>The start time for the access budget period.</p>
    pub fn start_time(&self) -> &::aws_smithy_types::DateTime {
        &self.start_time
    }
    /// <p>The end time for the access budget period.</p>
    pub fn end_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.end_time.as_ref()
    }
    /// <p>The remaining budget amount available for use within this access budget.</p>
    pub fn remaining_budget(&self) -> i32 {
        self.remaining_budget
    }
    /// <p>The total budget allocation amount for this access budget.</p>
    pub fn budget(&self) -> i32 {
        self.budget
    }
    /// <p>Specifies the time period for limiting table usage in queries and jobs. For calendar-based periods, the budget can renew if auto refresh is enabled. For lifetime budgets, the limit applies to the total usage throughout the collaboration. Valid values are:</p>
    /// <p><code>CALENDAR_DAY</code> - Limit table usage per day.</p>
    /// <p><code>CALENDAR_WEEK</code> - Limit table usage per week.</p>
    /// <p><code>CALENDAR_MONTH</code> - Limit table usage per month.</p>
    /// <p><code>LIFETIME</code> - Limit total table usage for the collaboration duration.</p>
    pub fn budget_type(&self) -> &crate::types::AccessBudgetType {
        &self.budget_type
    }
    /// <p>Indicates whether the budget automatically refreshes for each time period specified in <code>budgetType</code>. Valid values are:</p>
    /// <p><code>ENABLED</code> - The budget refreshes automatically at the start of each period.</p>
    /// <p><code>DISABLED</code> - The budget must be refreshed manually.</p>
    /// <p><code>NULL</code> - The value is null when <code>budgetType</code> is set to <code>LIFETIME</code>.</p>
    pub fn auto_refresh(&self) -> ::std::option::Option<&crate::types::AutoRefreshMode> {
        self.auto_refresh.as_ref()
    }
}
impl AccessBudgetDetails {
    /// Creates a new builder-style object to manufacture [`AccessBudgetDetails`](crate::types::AccessBudgetDetails).
    pub fn builder() -> crate::types::builders::AccessBudgetDetailsBuilder {
        crate::types::builders::AccessBudgetDetailsBuilder::default()
    }
}

/// A builder for [`AccessBudgetDetails`](crate::types::AccessBudgetDetails).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AccessBudgetDetailsBuilder {
    pub(crate) start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) remaining_budget: ::std::option::Option<i32>,
    pub(crate) budget: ::std::option::Option<i32>,
    pub(crate) budget_type: ::std::option::Option<crate::types::AccessBudgetType>,
    pub(crate) auto_refresh: ::std::option::Option<crate::types::AutoRefreshMode>,
}
impl AccessBudgetDetailsBuilder {
    /// <p>The start time for the access budget period.</p>
    /// This field is required.
    pub fn start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The start time for the access budget period.</p>
    pub fn set_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_time = input;
        self
    }
    /// <p>The start time for the access budget period.</p>
    pub fn get_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_time
    }
    /// <p>The end time for the access budget period.</p>
    pub fn end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.end_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The end time for the access budget period.</p>
    pub fn set_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.end_time = input;
        self
    }
    /// <p>The end time for the access budget period.</p>
    pub fn get_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.end_time
    }
    /// <p>The remaining budget amount available for use within this access budget.</p>
    /// This field is required.
    pub fn remaining_budget(mut self, input: i32) -> Self {
        self.remaining_budget = ::std::option::Option::Some(input);
        self
    }
    /// <p>The remaining budget amount available for use within this access budget.</p>
    pub fn set_remaining_budget(mut self, input: ::std::option::Option<i32>) -> Self {
        self.remaining_budget = input;
        self
    }
    /// <p>The remaining budget amount available for use within this access budget.</p>
    pub fn get_remaining_budget(&self) -> &::std::option::Option<i32> {
        &self.remaining_budget
    }
    /// <p>The total budget allocation amount for this access budget.</p>
    /// This field is required.
    pub fn budget(mut self, input: i32) -> Self {
        self.budget = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total budget allocation amount for this access budget.</p>
    pub fn set_budget(mut self, input: ::std::option::Option<i32>) -> Self {
        self.budget = input;
        self
    }
    /// <p>The total budget allocation amount for this access budget.</p>
    pub fn get_budget(&self) -> &::std::option::Option<i32> {
        &self.budget
    }
    /// <p>Specifies the time period for limiting table usage in queries and jobs. For calendar-based periods, the budget can renew if auto refresh is enabled. For lifetime budgets, the limit applies to the total usage throughout the collaboration. Valid values are:</p>
    /// <p><code>CALENDAR_DAY</code> - Limit table usage per day.</p>
    /// <p><code>CALENDAR_WEEK</code> - Limit table usage per week.</p>
    /// <p><code>CALENDAR_MONTH</code> - Limit table usage per month.</p>
    /// <p><code>LIFETIME</code> - Limit total table usage for the collaboration duration.</p>
    /// This field is required.
    pub fn budget_type(mut self, input: crate::types::AccessBudgetType) -> Self {
        self.budget_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the time period for limiting table usage in queries and jobs. For calendar-based periods, the budget can renew if auto refresh is enabled. For lifetime budgets, the limit applies to the total usage throughout the collaboration. Valid values are:</p>
    /// <p><code>CALENDAR_DAY</code> - Limit table usage per day.</p>
    /// <p><code>CALENDAR_WEEK</code> - Limit table usage per week.</p>
    /// <p><code>CALENDAR_MONTH</code> - Limit table usage per month.</p>
    /// <p><code>LIFETIME</code> - Limit total table usage for the collaboration duration.</p>
    pub fn set_budget_type(mut self, input: ::std::option::Option<crate::types::AccessBudgetType>) -> Self {
        self.budget_type = input;
        self
    }
    /// <p>Specifies the time period for limiting table usage in queries and jobs. For calendar-based periods, the budget can renew if auto refresh is enabled. For lifetime budgets, the limit applies to the total usage throughout the collaboration. Valid values are:</p>
    /// <p><code>CALENDAR_DAY</code> - Limit table usage per day.</p>
    /// <p><code>CALENDAR_WEEK</code> - Limit table usage per week.</p>
    /// <p><code>CALENDAR_MONTH</code> - Limit table usage per month.</p>
    /// <p><code>LIFETIME</code> - Limit total table usage for the collaboration duration.</p>
    pub fn get_budget_type(&self) -> &::std::option::Option<crate::types::AccessBudgetType> {
        &self.budget_type
    }
    /// <p>Indicates whether the budget automatically refreshes for each time period specified in <code>budgetType</code>. Valid values are:</p>
    /// <p><code>ENABLED</code> - The budget refreshes automatically at the start of each period.</p>
    /// <p><code>DISABLED</code> - The budget must be refreshed manually.</p>
    /// <p><code>NULL</code> - The value is null when <code>budgetType</code> is set to <code>LIFETIME</code>.</p>
    pub fn auto_refresh(mut self, input: crate::types::AutoRefreshMode) -> Self {
        self.auto_refresh = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether the budget automatically refreshes for each time period specified in <code>budgetType</code>. Valid values are:</p>
    /// <p><code>ENABLED</code> - The budget refreshes automatically at the start of each period.</p>
    /// <p><code>DISABLED</code> - The budget must be refreshed manually.</p>
    /// <p><code>NULL</code> - The value is null when <code>budgetType</code> is set to <code>LIFETIME</code>.</p>
    pub fn set_auto_refresh(mut self, input: ::std::option::Option<crate::types::AutoRefreshMode>) -> Self {
        self.auto_refresh = input;
        self
    }
    /// <p>Indicates whether the budget automatically refreshes for each time period specified in <code>budgetType</code>. Valid values are:</p>
    /// <p><code>ENABLED</code> - The budget refreshes automatically at the start of each period.</p>
    /// <p><code>DISABLED</code> - The budget must be refreshed manually.</p>
    /// <p><code>NULL</code> - The value is null when <code>budgetType</code> is set to <code>LIFETIME</code>.</p>
    pub fn get_auto_refresh(&self) -> &::std::option::Option<crate::types::AutoRefreshMode> {
        &self.auto_refresh
    }
    /// Consumes the builder and constructs a [`AccessBudgetDetails`](crate::types::AccessBudgetDetails).
    /// This method will fail if any of the following fields are not set:
    /// - [`start_time`](crate::types::builders::AccessBudgetDetailsBuilder::start_time)
    /// - [`remaining_budget`](crate::types::builders::AccessBudgetDetailsBuilder::remaining_budget)
    /// - [`budget`](crate::types::builders::AccessBudgetDetailsBuilder::budget)
    /// - [`budget_type`](crate::types::builders::AccessBudgetDetailsBuilder::budget_type)
    pub fn build(self) -> ::std::result::Result<crate::types::AccessBudgetDetails, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AccessBudgetDetails {
            start_time: self.start_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "start_time",
                    "start_time was not specified but it is required when building AccessBudgetDetails",
                )
            })?,
            end_time: self.end_time,
            remaining_budget: self.remaining_budget.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "remaining_budget",
                    "remaining_budget was not specified but it is required when building AccessBudgetDetails",
                )
            })?,
            budget: self.budget.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "budget",
                    "budget was not specified but it is required when building AccessBudgetDetails",
                )
            })?,
            budget_type: self.budget_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "budget_type",
                    "budget_type was not specified but it is required when building AccessBudgetDetails",
                )
            })?,
            auto_refresh: self.auto_refresh,
        })
    }
}
