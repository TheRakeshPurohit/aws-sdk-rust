// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration settings for the application.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ApplicationConfig {
    /// <p>The contact handling configuration for the application.</p>
    pub contact_handling: ::std::option::Option<crate::types::ContactHandling>,
}
impl ApplicationConfig {
    /// <p>The contact handling configuration for the application.</p>
    pub fn contact_handling(&self) -> ::std::option::Option<&crate::types::ContactHandling> {
        self.contact_handling.as_ref()
    }
}
impl ApplicationConfig {
    /// Creates a new builder-style object to manufacture [`ApplicationConfig`](crate::types::ApplicationConfig).
    pub fn builder() -> crate::types::builders::ApplicationConfigBuilder {
        crate::types::builders::ApplicationConfigBuilder::default()
    }
}

/// A builder for [`ApplicationConfig`](crate::types::ApplicationConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ApplicationConfigBuilder {
    pub(crate) contact_handling: ::std::option::Option<crate::types::ContactHandling>,
}
impl ApplicationConfigBuilder {
    /// <p>The contact handling configuration for the application.</p>
    pub fn contact_handling(mut self, input: crate::types::ContactHandling) -> Self {
        self.contact_handling = ::std::option::Option::Some(input);
        self
    }
    /// <p>The contact handling configuration for the application.</p>
    pub fn set_contact_handling(mut self, input: ::std::option::Option<crate::types::ContactHandling>) -> Self {
        self.contact_handling = input;
        self
    }
    /// <p>The contact handling configuration for the application.</p>
    pub fn get_contact_handling(&self) -> &::std::option::Option<crate::types::ContactHandling> {
        &self.contact_handling
    }
    /// Consumes the builder and constructs a [`ApplicationConfig`](crate::types::ApplicationConfig).
    pub fn build(self) -> crate::types::ApplicationConfig {
        crate::types::ApplicationConfig {
            contact_handling: self.contact_handling,
        }
    }
}
