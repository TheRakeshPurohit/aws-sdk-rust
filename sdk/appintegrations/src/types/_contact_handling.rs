// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The contact handling configuration for the application.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ContactHandling {
    /// <p>Indicates whether the application refreshes for each contact or refreshes only with each new browser session.</p>
    pub scope: ::std::option::Option<crate::types::ContactHandlingScope>,
}
impl ContactHandling {
    /// <p>Indicates whether the application refreshes for each contact or refreshes only with each new browser session.</p>
    pub fn scope(&self) -> ::std::option::Option<&crate::types::ContactHandlingScope> {
        self.scope.as_ref()
    }
}
impl ContactHandling {
    /// Creates a new builder-style object to manufacture [`ContactHandling`](crate::types::ContactHandling).
    pub fn builder() -> crate::types::builders::ContactHandlingBuilder {
        crate::types::builders::ContactHandlingBuilder::default()
    }
}

/// A builder for [`ContactHandling`](crate::types::ContactHandling).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ContactHandlingBuilder {
    pub(crate) scope: ::std::option::Option<crate::types::ContactHandlingScope>,
}
impl ContactHandlingBuilder {
    /// <p>Indicates whether the application refreshes for each contact or refreshes only with each new browser session.</p>
    pub fn scope(mut self, input: crate::types::ContactHandlingScope) -> Self {
        self.scope = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether the application refreshes for each contact or refreshes only with each new browser session.</p>
    pub fn set_scope(mut self, input: ::std::option::Option<crate::types::ContactHandlingScope>) -> Self {
        self.scope = input;
        self
    }
    /// <p>Indicates whether the application refreshes for each contact or refreshes only with each new browser session.</p>
    pub fn get_scope(&self) -> &::std::option::Option<crate::types::ContactHandlingScope> {
        &self.scope
    }
    /// Consumes the builder and constructs a [`ContactHandling`](crate::types::ContactHandling).
    pub fn build(self) -> crate::types::ContactHandling {
        crate::types::ContactHandling { scope: self.scope }
    }
}
