// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The iframe configuration for the application.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct IframeConfig {
    /// <p>The list of features that are allowed in the iframe.</p>
    pub allow: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The list of sandbox attributes for the iframe.</p>
    pub sandbox: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl IframeConfig {
    /// <p>The list of features that are allowed in the iframe.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.allow.is_none()`.
    pub fn allow(&self) -> &[::std::string::String] {
        self.allow.as_deref().unwrap_or_default()
    }
    /// <p>The list of sandbox attributes for the iframe.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.sandbox.is_none()`.
    pub fn sandbox(&self) -> &[::std::string::String] {
        self.sandbox.as_deref().unwrap_or_default()
    }
}
impl IframeConfig {
    /// Creates a new builder-style object to manufacture [`IframeConfig`](crate::types::IframeConfig).
    pub fn builder() -> crate::types::builders::IframeConfigBuilder {
        crate::types::builders::IframeConfigBuilder::default()
    }
}

/// A builder for [`IframeConfig`](crate::types::IframeConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct IframeConfigBuilder {
    pub(crate) allow: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) sandbox: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl IframeConfigBuilder {
    /// Appends an item to `allow`.
    ///
    /// To override the contents of this collection use [`set_allow`](Self::set_allow).
    ///
    /// <p>The list of features that are allowed in the iframe.</p>
    pub fn allow(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.allow.unwrap_or_default();
        v.push(input.into());
        self.allow = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of features that are allowed in the iframe.</p>
    pub fn set_allow(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.allow = input;
        self
    }
    /// <p>The list of features that are allowed in the iframe.</p>
    pub fn get_allow(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.allow
    }
    /// Appends an item to `sandbox`.
    ///
    /// To override the contents of this collection use [`set_sandbox`](Self::set_sandbox).
    ///
    /// <p>The list of sandbox attributes for the iframe.</p>
    pub fn sandbox(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.sandbox.unwrap_or_default();
        v.push(input.into());
        self.sandbox = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of sandbox attributes for the iframe.</p>
    pub fn set_sandbox(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.sandbox = input;
        self
    }
    /// <p>The list of sandbox attributes for the iframe.</p>
    pub fn get_sandbox(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.sandbox
    }
    /// Consumes the builder and constructs a [`IframeConfig`](crate::types::IframeConfig).
    pub fn build(self) -> crate::types::IframeConfig {
        crate::types::IframeConfig {
            allow: self.allow,
            sandbox: self.sandbox,
        }
    }
}
