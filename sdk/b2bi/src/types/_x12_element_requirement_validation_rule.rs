// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines a validation rule that modifies the requirement status of a specific X12 element within a segment. This rule allows you to make optional elements mandatory or mandatory elements optional, providing flexibility to accommodate different trading partner requirements and business rules. The rule targets a specific element position within a segment and sets its requirement status to either OPTIONAL or MANDATORY.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct X12ElementRequirementValidationRule {
    /// <p>Specifies the position of the element within an X12 segment for which the requirement status will be modified. The format follows the pattern of segment identifier followed by element position (e.g., "ST-01" for the first element of the ST segment).</p>
    pub element_position: ::std::string::String,
    /// <p>Specifies the requirement status for the element at the specified position. Valid values are OPTIONAL (the element may be omitted) or MANDATORY (the element must be present).</p>
    pub requirement: crate::types::ElementRequirement,
}
impl X12ElementRequirementValidationRule {
    /// <p>Specifies the position of the element within an X12 segment for which the requirement status will be modified. The format follows the pattern of segment identifier followed by element position (e.g., "ST-01" for the first element of the ST segment).</p>
    pub fn element_position(&self) -> &str {
        use std::ops::Deref;
        self.element_position.deref()
    }
    /// <p>Specifies the requirement status for the element at the specified position. Valid values are OPTIONAL (the element may be omitted) or MANDATORY (the element must be present).</p>
    pub fn requirement(&self) -> &crate::types::ElementRequirement {
        &self.requirement
    }
}
impl X12ElementRequirementValidationRule {
    /// Creates a new builder-style object to manufacture [`X12ElementRequirementValidationRule`](crate::types::X12ElementRequirementValidationRule).
    pub fn builder() -> crate::types::builders::X12ElementRequirementValidationRuleBuilder {
        crate::types::builders::X12ElementRequirementValidationRuleBuilder::default()
    }
}

/// A builder for [`X12ElementRequirementValidationRule`](crate::types::X12ElementRequirementValidationRule).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct X12ElementRequirementValidationRuleBuilder {
    pub(crate) element_position: ::std::option::Option<::std::string::String>,
    pub(crate) requirement: ::std::option::Option<crate::types::ElementRequirement>,
}
impl X12ElementRequirementValidationRuleBuilder {
    /// <p>Specifies the position of the element within an X12 segment for which the requirement status will be modified. The format follows the pattern of segment identifier followed by element position (e.g., "ST-01" for the first element of the ST segment).</p>
    /// This field is required.
    pub fn element_position(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.element_position = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the position of the element within an X12 segment for which the requirement status will be modified. The format follows the pattern of segment identifier followed by element position (e.g., "ST-01" for the first element of the ST segment).</p>
    pub fn set_element_position(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.element_position = input;
        self
    }
    /// <p>Specifies the position of the element within an X12 segment for which the requirement status will be modified. The format follows the pattern of segment identifier followed by element position (e.g., "ST-01" for the first element of the ST segment).</p>
    pub fn get_element_position(&self) -> &::std::option::Option<::std::string::String> {
        &self.element_position
    }
    /// <p>Specifies the requirement status for the element at the specified position. Valid values are OPTIONAL (the element may be omitted) or MANDATORY (the element must be present).</p>
    /// This field is required.
    pub fn requirement(mut self, input: crate::types::ElementRequirement) -> Self {
        self.requirement = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the requirement status for the element at the specified position. Valid values are OPTIONAL (the element may be omitted) or MANDATORY (the element must be present).</p>
    pub fn set_requirement(mut self, input: ::std::option::Option<crate::types::ElementRequirement>) -> Self {
        self.requirement = input;
        self
    }
    /// <p>Specifies the requirement status for the element at the specified position. Valid values are OPTIONAL (the element may be omitted) or MANDATORY (the element must be present).</p>
    pub fn get_requirement(&self) -> &::std::option::Option<crate::types::ElementRequirement> {
        &self.requirement
    }
    /// Consumes the builder and constructs a [`X12ElementRequirementValidationRule`](crate::types::X12ElementRequirementValidationRule).
    /// This method will fail if any of the following fields are not set:
    /// - [`element_position`](crate::types::builders::X12ElementRequirementValidationRuleBuilder::element_position)
    /// - [`requirement`](crate::types::builders::X12ElementRequirementValidationRuleBuilder::requirement)
    pub fn build(self) -> ::std::result::Result<crate::types::X12ElementRequirementValidationRule, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::X12ElementRequirementValidationRule {
            element_position: self.element_position.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "element_position",
                    "element_position was not specified but it is required when building X12ElementRequirementValidationRule",
                )
            })?,
            requirement: self.requirement.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "requirement",
                    "requirement was not specified but it is required when building X12ElementRequirementValidationRule",
                )
            })?,
        })
    }
}
