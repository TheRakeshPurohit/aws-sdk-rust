// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines a validation rule that specifies custom length constraints for a specific X12 element. This rule allows you to override the standard minimum and maximum length requirements for an element, enabling validation of trading partner-specific length requirements that may differ from the X12 specification. Both minimum and maximum length values must be specified and must be between 1 and 200 characters.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct X12ElementLengthValidationRule {
    /// <p>Specifies the four-digit element ID to which the length constraints will be applied. This identifies which X12 element will have its length requirements modified.</p>
    pub element_id: ::std::string::String,
    /// <p>Specifies the maximum allowed length for the identified element. This value must be between 1 and 200 characters and defines the upper limit for the element's content length.</p>
    pub max_length: i32,
    /// <p>Specifies the minimum required length for the identified element. This value must be between 1 and 200 characters and defines the lower limit for the element's content length.</p>
    pub min_length: i32,
}
impl X12ElementLengthValidationRule {
    /// <p>Specifies the four-digit element ID to which the length constraints will be applied. This identifies which X12 element will have its length requirements modified.</p>
    pub fn element_id(&self) -> &str {
        use std::ops::Deref;
        self.element_id.deref()
    }
    /// <p>Specifies the maximum allowed length for the identified element. This value must be between 1 and 200 characters and defines the upper limit for the element's content length.</p>
    pub fn max_length(&self) -> i32 {
        self.max_length
    }
    /// <p>Specifies the minimum required length for the identified element. This value must be between 1 and 200 characters and defines the lower limit for the element's content length.</p>
    pub fn min_length(&self) -> i32 {
        self.min_length
    }
}
impl X12ElementLengthValidationRule {
    /// Creates a new builder-style object to manufacture [`X12ElementLengthValidationRule`](crate::types::X12ElementLengthValidationRule).
    pub fn builder() -> crate::types::builders::X12ElementLengthValidationRuleBuilder {
        crate::types::builders::X12ElementLengthValidationRuleBuilder::default()
    }
}

/// A builder for [`X12ElementLengthValidationRule`](crate::types::X12ElementLengthValidationRule).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct X12ElementLengthValidationRuleBuilder {
    pub(crate) element_id: ::std::option::Option<::std::string::String>,
    pub(crate) max_length: ::std::option::Option<i32>,
    pub(crate) min_length: ::std::option::Option<i32>,
}
impl X12ElementLengthValidationRuleBuilder {
    /// <p>Specifies the four-digit element ID to which the length constraints will be applied. This identifies which X12 element will have its length requirements modified.</p>
    /// This field is required.
    pub fn element_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.element_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the four-digit element ID to which the length constraints will be applied. This identifies which X12 element will have its length requirements modified.</p>
    pub fn set_element_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.element_id = input;
        self
    }
    /// <p>Specifies the four-digit element ID to which the length constraints will be applied. This identifies which X12 element will have its length requirements modified.</p>
    pub fn get_element_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.element_id
    }
    /// <p>Specifies the maximum allowed length for the identified element. This value must be between 1 and 200 characters and defines the upper limit for the element's content length.</p>
    /// This field is required.
    pub fn max_length(mut self, input: i32) -> Self {
        self.max_length = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the maximum allowed length for the identified element. This value must be between 1 and 200 characters and defines the upper limit for the element's content length.</p>
    pub fn set_max_length(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_length = input;
        self
    }
    /// <p>Specifies the maximum allowed length for the identified element. This value must be between 1 and 200 characters and defines the upper limit for the element's content length.</p>
    pub fn get_max_length(&self) -> &::std::option::Option<i32> {
        &self.max_length
    }
    /// <p>Specifies the minimum required length for the identified element. This value must be between 1 and 200 characters and defines the lower limit for the element's content length.</p>
    /// This field is required.
    pub fn min_length(mut self, input: i32) -> Self {
        self.min_length = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the minimum required length for the identified element. This value must be between 1 and 200 characters and defines the lower limit for the element's content length.</p>
    pub fn set_min_length(mut self, input: ::std::option::Option<i32>) -> Self {
        self.min_length = input;
        self
    }
    /// <p>Specifies the minimum required length for the identified element. This value must be between 1 and 200 characters and defines the lower limit for the element's content length.</p>
    pub fn get_min_length(&self) -> &::std::option::Option<i32> {
        &self.min_length
    }
    /// Consumes the builder and constructs a [`X12ElementLengthValidationRule`](crate::types::X12ElementLengthValidationRule).
    /// This method will fail if any of the following fields are not set:
    /// - [`element_id`](crate::types::builders::X12ElementLengthValidationRuleBuilder::element_id)
    /// - [`max_length`](crate::types::builders::X12ElementLengthValidationRuleBuilder::max_length)
    /// - [`min_length`](crate::types::builders::X12ElementLengthValidationRuleBuilder::min_length)
    pub fn build(self) -> ::std::result::Result<crate::types::X12ElementLengthValidationRule, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::X12ElementLengthValidationRule {
            element_id: self.element_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "element_id",
                    "element_id was not specified but it is required when building X12ElementLengthValidationRule",
                )
            })?,
            max_length: self.max_length.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "max_length",
                    "max_length was not specified but it is required when building X12ElementLengthValidationRule",
                )
            })?,
            min_length: self.min_length.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "min_length",
                    "min_length was not specified but it is required when building X12ElementLengthValidationRule",
                )
            })?,
        })
    }
}
