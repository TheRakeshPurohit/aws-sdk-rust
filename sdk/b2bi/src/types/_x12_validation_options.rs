// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains configuration options for X12 EDI validation. This structure allows you to specify custom validation rules that will be applied during EDI document processing, including element length constraints, code list modifications, and element requirement changes. These validation options provide flexibility to accommodate trading partner-specific requirements while maintaining EDI compliance. The validation rules are applied in addition to standard X12 validation to ensure documents meet both standard and custom requirements.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct X12ValidationOptions {
    /// <p>Specifies a list of validation rules to apply during EDI document processing. These rules can include code list modifications, element length constraints, and element requirement changes.</p>
    pub validation_rules: ::std::option::Option<::std::vec::Vec<crate::types::X12ValidationRule>>,
}
impl X12ValidationOptions {
    /// <p>Specifies a list of validation rules to apply during EDI document processing. These rules can include code list modifications, element length constraints, and element requirement changes.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.validation_rules.is_none()`.
    pub fn validation_rules(&self) -> &[crate::types::X12ValidationRule] {
        self.validation_rules.as_deref().unwrap_or_default()
    }
}
impl X12ValidationOptions {
    /// Creates a new builder-style object to manufacture [`X12ValidationOptions`](crate::types::X12ValidationOptions).
    pub fn builder() -> crate::types::builders::X12ValidationOptionsBuilder {
        crate::types::builders::X12ValidationOptionsBuilder::default()
    }
}

/// A builder for [`X12ValidationOptions`](crate::types::X12ValidationOptions).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct X12ValidationOptionsBuilder {
    pub(crate) validation_rules: ::std::option::Option<::std::vec::Vec<crate::types::X12ValidationRule>>,
}
impl X12ValidationOptionsBuilder {
    /// Appends an item to `validation_rules`.
    ///
    /// To override the contents of this collection use [`set_validation_rules`](Self::set_validation_rules).
    ///
    /// <p>Specifies a list of validation rules to apply during EDI document processing. These rules can include code list modifications, element length constraints, and element requirement changes.</p>
    pub fn validation_rules(mut self, input: crate::types::X12ValidationRule) -> Self {
        let mut v = self.validation_rules.unwrap_or_default();
        v.push(input);
        self.validation_rules = ::std::option::Option::Some(v);
        self
    }
    /// <p>Specifies a list of validation rules to apply during EDI document processing. These rules can include code list modifications, element length constraints, and element requirement changes.</p>
    pub fn set_validation_rules(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::X12ValidationRule>>) -> Self {
        self.validation_rules = input;
        self
    }
    /// <p>Specifies a list of validation rules to apply during EDI document processing. These rules can include code list modifications, element length constraints, and element requirement changes.</p>
    pub fn get_validation_rules(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::X12ValidationRule>> {
        &self.validation_rules
    }
    /// Consumes the builder and constructs a [`X12ValidationOptions`](crate::types::X12ValidationOptions).
    pub fn build(self) -> crate::types::X12ValidationOptions {
        crate::types::X12ValidationOptions {
            validation_rules: self.validation_rules,
        }
    }
}
