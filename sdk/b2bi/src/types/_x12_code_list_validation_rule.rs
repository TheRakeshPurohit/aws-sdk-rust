// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines a validation rule that modifies the allowed code values for a specific X12 element. This rule allows you to add or remove valid codes from an element's standard code list, providing flexibility to accommodate trading partner-specific requirements or industry variations. You can specify codes to add to expand the allowed values beyond the X12 standard, or codes to remove to restrict the allowed values for stricter validation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct X12CodeListValidationRule {
    /// <p>Specifies the four-digit element ID to which the code list modifications apply. This identifies which X12 element will have its allowed code values modified.</p>
    pub element_id: ::std::string::String,
    /// <p>Specifies a list of code values to add to the element's allowed values. These codes will be considered valid for the specified element in addition to the standard codes defined by the X12 specification.</p>
    pub codes_to_add: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Specifies a list of code values to remove from the element's allowed values. These codes will be considered invalid for the specified element, even if they are part of the standard codes defined by the X12 specification.</p>
    pub codes_to_remove: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl X12CodeListValidationRule {
    /// <p>Specifies the four-digit element ID to which the code list modifications apply. This identifies which X12 element will have its allowed code values modified.</p>
    pub fn element_id(&self) -> &str {
        use std::ops::Deref;
        self.element_id.deref()
    }
    /// <p>Specifies a list of code values to add to the element's allowed values. These codes will be considered valid for the specified element in addition to the standard codes defined by the X12 specification.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.codes_to_add.is_none()`.
    pub fn codes_to_add(&self) -> &[::std::string::String] {
        self.codes_to_add.as_deref().unwrap_or_default()
    }
    /// <p>Specifies a list of code values to remove from the element's allowed values. These codes will be considered invalid for the specified element, even if they are part of the standard codes defined by the X12 specification.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.codes_to_remove.is_none()`.
    pub fn codes_to_remove(&self) -> &[::std::string::String] {
        self.codes_to_remove.as_deref().unwrap_or_default()
    }
}
impl X12CodeListValidationRule {
    /// Creates a new builder-style object to manufacture [`X12CodeListValidationRule`](crate::types::X12CodeListValidationRule).
    pub fn builder() -> crate::types::builders::X12CodeListValidationRuleBuilder {
        crate::types::builders::X12CodeListValidationRuleBuilder::default()
    }
}

/// A builder for [`X12CodeListValidationRule`](crate::types::X12CodeListValidationRule).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct X12CodeListValidationRuleBuilder {
    pub(crate) element_id: ::std::option::Option<::std::string::String>,
    pub(crate) codes_to_add: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) codes_to_remove: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl X12CodeListValidationRuleBuilder {
    /// <p>Specifies the four-digit element ID to which the code list modifications apply. This identifies which X12 element will have its allowed code values modified.</p>
    /// This field is required.
    pub fn element_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.element_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the four-digit element ID to which the code list modifications apply. This identifies which X12 element will have its allowed code values modified.</p>
    pub fn set_element_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.element_id = input;
        self
    }
    /// <p>Specifies the four-digit element ID to which the code list modifications apply. This identifies which X12 element will have its allowed code values modified.</p>
    pub fn get_element_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.element_id
    }
    /// Appends an item to `codes_to_add`.
    ///
    /// To override the contents of this collection use [`set_codes_to_add`](Self::set_codes_to_add).
    ///
    /// <p>Specifies a list of code values to add to the element's allowed values. These codes will be considered valid for the specified element in addition to the standard codes defined by the X12 specification.</p>
    pub fn codes_to_add(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.codes_to_add.unwrap_or_default();
        v.push(input.into());
        self.codes_to_add = ::std::option::Option::Some(v);
        self
    }
    /// <p>Specifies a list of code values to add to the element's allowed values. These codes will be considered valid for the specified element in addition to the standard codes defined by the X12 specification.</p>
    pub fn set_codes_to_add(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.codes_to_add = input;
        self
    }
    /// <p>Specifies a list of code values to add to the element's allowed values. These codes will be considered valid for the specified element in addition to the standard codes defined by the X12 specification.</p>
    pub fn get_codes_to_add(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.codes_to_add
    }
    /// Appends an item to `codes_to_remove`.
    ///
    /// To override the contents of this collection use [`set_codes_to_remove`](Self::set_codes_to_remove).
    ///
    /// <p>Specifies a list of code values to remove from the element's allowed values. These codes will be considered invalid for the specified element, even if they are part of the standard codes defined by the X12 specification.</p>
    pub fn codes_to_remove(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.codes_to_remove.unwrap_or_default();
        v.push(input.into());
        self.codes_to_remove = ::std::option::Option::Some(v);
        self
    }
    /// <p>Specifies a list of code values to remove from the element's allowed values. These codes will be considered invalid for the specified element, even if they are part of the standard codes defined by the X12 specification.</p>
    pub fn set_codes_to_remove(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.codes_to_remove = input;
        self
    }
    /// <p>Specifies a list of code values to remove from the element's allowed values. These codes will be considered invalid for the specified element, even if they are part of the standard codes defined by the X12 specification.</p>
    pub fn get_codes_to_remove(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.codes_to_remove
    }
    /// Consumes the builder and constructs a [`X12CodeListValidationRule`](crate::types::X12CodeListValidationRule).
    /// This method will fail if any of the following fields are not set:
    /// - [`element_id`](crate::types::builders::X12CodeListValidationRuleBuilder::element_id)
    pub fn build(self) -> ::std::result::Result<crate::types::X12CodeListValidationRule, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::X12CodeListValidationRule {
            element_id: self.element_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "element_id",
                    "element_id was not specified but it is required when building X12CodeListValidationRule",
                )
            })?,
            codes_to_add: self.codes_to_add,
            codes_to_remove: self.codes_to_remove,
        })
    }
}
