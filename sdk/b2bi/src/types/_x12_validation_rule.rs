// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a single validation rule that can be applied during X12 EDI processing. This is a union type that can contain one of several specific validation rule types: code list validation rules for modifying allowed element codes, element length validation rules for enforcing custom length constraints, or element requirement validation rules for changing mandatory/optional status. Each validation rule targets specific aspects of EDI document validation to ensure compliance with trading partner requirements and business rules.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum X12ValidationRule {
    /// <p>Specifies a code list validation rule that modifies the allowed code values for a specific X12 element. This rule enables you to customize which codes are considered valid for an element, allowing for trading partner-specific code requirements.</p>
    CodeListValidationRule(crate::types::X12CodeListValidationRule),
    /// <p>Specifies an element length validation rule that defines custom length constraints for a specific X12 element. This rule allows you to enforce minimum and maximum length requirements that may differ from the standard X12 specification.</p>
    ElementLengthValidationRule(crate::types::X12ElementLengthValidationRule),
    /// <p>Specifies an element requirement validation rule that modifies whether a specific X12 element is required or optional within a segment. This rule provides flexibility to accommodate different trading partner requirements for element presence.</p>
    ElementRequirementValidationRule(crate::types::X12ElementRequirementValidationRule),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl X12ValidationRule {
    /// Tries to convert the enum instance into [`CodeListValidationRule`](crate::types::X12ValidationRule::CodeListValidationRule), extracting the inner [`X12CodeListValidationRule`](crate::types::X12CodeListValidationRule).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_code_list_validation_rule(&self) -> ::std::result::Result<&crate::types::X12CodeListValidationRule, &Self> {
        if let X12ValidationRule::CodeListValidationRule(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`CodeListValidationRule`](crate::types::X12ValidationRule::CodeListValidationRule).
    pub fn is_code_list_validation_rule(&self) -> bool {
        self.as_code_list_validation_rule().is_ok()
    }
    /// Tries to convert the enum instance into [`ElementLengthValidationRule`](crate::types::X12ValidationRule::ElementLengthValidationRule), extracting the inner [`X12ElementLengthValidationRule`](crate::types::X12ElementLengthValidationRule).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_element_length_validation_rule(&self) -> ::std::result::Result<&crate::types::X12ElementLengthValidationRule, &Self> {
        if let X12ValidationRule::ElementLengthValidationRule(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`ElementLengthValidationRule`](crate::types::X12ValidationRule::ElementLengthValidationRule).
    pub fn is_element_length_validation_rule(&self) -> bool {
        self.as_element_length_validation_rule().is_ok()
    }
    /// Tries to convert the enum instance into [`ElementRequirementValidationRule`](crate::types::X12ValidationRule::ElementRequirementValidationRule), extracting the inner [`X12ElementRequirementValidationRule`](crate::types::X12ElementRequirementValidationRule).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_element_requirement_validation_rule(&self) -> ::std::result::Result<&crate::types::X12ElementRequirementValidationRule, &Self> {
        if let X12ValidationRule::ElementRequirementValidationRule(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`ElementRequirementValidationRule`](crate::types::X12ValidationRule::ElementRequirementValidationRule).
    pub fn is_element_requirement_validation_rule(&self) -> bool {
        self.as_element_requirement_validation_rule().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
