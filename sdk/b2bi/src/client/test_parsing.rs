// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`TestParsing`](crate::operation::test_parsing::builders::TestParsingFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`input_file(S3Location)`](crate::operation::test_parsing::builders::TestParsingFluentBuilder::input_file) / [`set_input_file(Option<S3Location>)`](crate::operation::test_parsing::builders::TestParsingFluentBuilder::set_input_file):<br>required: **true**<br><p>Specifies an <code>S3Location</code> object, which contains the Amazon S3 bucket and prefix for the location of the input file.</p><br>
    ///   - [`file_format(FileFormat)`](crate::operation::test_parsing::builders::TestParsingFluentBuilder::file_format) / [`set_file_format(Option<FileFormat>)`](crate::operation::test_parsing::builders::TestParsingFluentBuilder::set_file_format):<br>required: **true**<br><p>Specifies that the currently supported file formats for EDI transformations are <code>JSON</code> and <code>XML</code>.</p><br>
    ///   - [`edi_type(EdiType)`](crate::operation::test_parsing::builders::TestParsingFluentBuilder::edi_type) / [`set_edi_type(Option<EdiType>)`](crate::operation::test_parsing::builders::TestParsingFluentBuilder::set_edi_type):<br>required: **true**<br><p>Specifies the details for the EDI standard that is being used for the transformer. Currently, only X12 is supported. X12 is a set of standards and corresponding messages that define specific business documents.</p><br>
    ///   - [`advanced_options(AdvancedOptions)`](crate::operation::test_parsing::builders::TestParsingFluentBuilder::advanced_options) / [`set_advanced_options(Option<AdvancedOptions>)`](crate::operation::test_parsing::builders::TestParsingFluentBuilder::set_advanced_options):<br>required: **false**<br><p>Specifies advanced options for parsing the input EDI file. These options allow for more granular control over the parsing process, including split options for X12 files.</p><br>
    /// - On success, responds with [`TestParsingOutput`](crate::operation::test_parsing::TestParsingOutput) with field(s):
    ///   - [`parsed_file_content(String)`](crate::operation::test_parsing::TestParsingOutput::parsed_file_content): <p>Returns the contents of the input file being tested, parsed according to the specified EDI (electronic data interchange) type.</p>
    ///   - [`parsed_split_file_contents(Option<Vec::<String>>)`](crate::operation::test_parsing::TestParsingOutput::parsed_split_file_contents): <p>Returns an array of parsed file contents when the input file is split according to the specified split options. Each element in the array represents a separate split file's parsed content.</p>
    ///   - [`validation_messages(Option<Vec::<String>>)`](crate::operation::test_parsing::TestParsingOutput::validation_messages): <p>Returns an array of validation messages generated during EDI validation. These messages provide detailed information about validation errors, warnings, or confirmations based on the configured X12 validation rules such as element length constraints, code list validations, and element requirement checks. This field is populated when the <code>TestParsing</code> API validates EDI documents.</p>
    /// - On failure, responds with [`SdkError<TestParsingError>`](crate::operation::test_parsing::TestParsingError)
    pub fn test_parsing(&self) -> crate::operation::test_parsing::builders::TestParsingFluentBuilder {
        crate::operation::test_parsing::builders::TestParsingFluentBuilder::new(self.handle.clone())
    }
}
