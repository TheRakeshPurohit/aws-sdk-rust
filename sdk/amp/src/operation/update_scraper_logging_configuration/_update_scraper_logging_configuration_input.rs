// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateScraperLoggingConfigurationInput {
    /// <p>The ID of the scraper whose logging configuration will be updated.</p>
    pub scraper_id: ::std::option::Option<::std::string::String>,
    /// <p>The destination where scraper logs will be sent.</p>
    pub logging_destination: ::std::option::Option<crate::types::ScraperLoggingDestination>,
    /// <p>The list of scraper components to configure for logging.</p>
    pub scraper_components: ::std::option::Option<::std::vec::Vec<crate::types::ScraperComponent>>,
}
impl UpdateScraperLoggingConfigurationInput {
    /// <p>The ID of the scraper whose logging configuration will be updated.</p>
    pub fn scraper_id(&self) -> ::std::option::Option<&str> {
        self.scraper_id.as_deref()
    }
    /// <p>The destination where scraper logs will be sent.</p>
    pub fn logging_destination(&self) -> ::std::option::Option<&crate::types::ScraperLoggingDestination> {
        self.logging_destination.as_ref()
    }
    /// <p>The list of scraper components to configure for logging.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.scraper_components.is_none()`.
    pub fn scraper_components(&self) -> &[crate::types::ScraperComponent] {
        self.scraper_components.as_deref().unwrap_or_default()
    }
}
impl UpdateScraperLoggingConfigurationInput {
    /// Creates a new builder-style object to manufacture [`UpdateScraperLoggingConfigurationInput`](crate::operation::update_scraper_logging_configuration::UpdateScraperLoggingConfigurationInput).
    pub fn builder() -> crate::operation::update_scraper_logging_configuration::builders::UpdateScraperLoggingConfigurationInputBuilder {
        crate::operation::update_scraper_logging_configuration::builders::UpdateScraperLoggingConfigurationInputBuilder::default()
    }
}

/// A builder for [`UpdateScraperLoggingConfigurationInput`](crate::operation::update_scraper_logging_configuration::UpdateScraperLoggingConfigurationInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateScraperLoggingConfigurationInputBuilder {
    pub(crate) scraper_id: ::std::option::Option<::std::string::String>,
    pub(crate) logging_destination: ::std::option::Option<crate::types::ScraperLoggingDestination>,
    pub(crate) scraper_components: ::std::option::Option<::std::vec::Vec<crate::types::ScraperComponent>>,
}
impl UpdateScraperLoggingConfigurationInputBuilder {
    /// <p>The ID of the scraper whose logging configuration will be updated.</p>
    /// This field is required.
    pub fn scraper_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.scraper_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the scraper whose logging configuration will be updated.</p>
    pub fn set_scraper_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.scraper_id = input;
        self
    }
    /// <p>The ID of the scraper whose logging configuration will be updated.</p>
    pub fn get_scraper_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.scraper_id
    }
    /// <p>The destination where scraper logs will be sent.</p>
    /// This field is required.
    pub fn logging_destination(mut self, input: crate::types::ScraperLoggingDestination) -> Self {
        self.logging_destination = ::std::option::Option::Some(input);
        self
    }
    /// <p>The destination where scraper logs will be sent.</p>
    pub fn set_logging_destination(mut self, input: ::std::option::Option<crate::types::ScraperLoggingDestination>) -> Self {
        self.logging_destination = input;
        self
    }
    /// <p>The destination where scraper logs will be sent.</p>
    pub fn get_logging_destination(&self) -> &::std::option::Option<crate::types::ScraperLoggingDestination> {
        &self.logging_destination
    }
    /// Appends an item to `scraper_components`.
    ///
    /// To override the contents of this collection use [`set_scraper_components`](Self::set_scraper_components).
    ///
    /// <p>The list of scraper components to configure for logging.</p>
    pub fn scraper_components(mut self, input: crate::types::ScraperComponent) -> Self {
        let mut v = self.scraper_components.unwrap_or_default();
        v.push(input);
        self.scraper_components = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of scraper components to configure for logging.</p>
    pub fn set_scraper_components(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ScraperComponent>>) -> Self {
        self.scraper_components = input;
        self
    }
    /// <p>The list of scraper components to configure for logging.</p>
    pub fn get_scraper_components(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ScraperComponent>> {
        &self.scraper_components
    }
    /// Consumes the builder and constructs a [`UpdateScraperLoggingConfigurationInput`](crate::operation::update_scraper_logging_configuration::UpdateScraperLoggingConfigurationInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_scraper_logging_configuration::UpdateScraperLoggingConfigurationInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::update_scraper_logging_configuration::UpdateScraperLoggingConfigurationInput {
                scraper_id: self.scraper_id,
                logging_destination: self.logging_destination,
                scraper_components: self.scraper_components,
            },
        )
    }
}
