// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeScraperLoggingConfigurationOutput {
    /// <p>The status of the scraper logging configuration.</p>
    pub status: ::std::option::Option<crate::types::ScraperLoggingConfigurationStatus>,
    /// <p>The ID of the scraper.</p>
    pub scraper_id: ::std::string::String,
    /// <p>The destination where scraper logs are sent.</p>
    pub logging_destination: ::std::option::Option<crate::types::ScraperLoggingDestination>,
    /// <p>The list of scraper components configured for logging.</p>
    pub scraper_components: ::std::vec::Vec<crate::types::ScraperComponent>,
    /// <p>The date and time when the logging configuration was last modified.</p>
    pub modified_at: ::aws_smithy_types::DateTime,
    _request_id: Option<String>,
}
impl DescribeScraperLoggingConfigurationOutput {
    /// <p>The status of the scraper logging configuration.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::ScraperLoggingConfigurationStatus> {
        self.status.as_ref()
    }
    /// <p>The ID of the scraper.</p>
    pub fn scraper_id(&self) -> &str {
        use std::ops::Deref;
        self.scraper_id.deref()
    }
    /// <p>The destination where scraper logs are sent.</p>
    pub fn logging_destination(&self) -> ::std::option::Option<&crate::types::ScraperLoggingDestination> {
        self.logging_destination.as_ref()
    }
    /// <p>The list of scraper components configured for logging.</p>
    pub fn scraper_components(&self) -> &[crate::types::ScraperComponent] {
        use std::ops::Deref;
        self.scraper_components.deref()
    }
    /// <p>The date and time when the logging configuration was last modified.</p>
    pub fn modified_at(&self) -> &::aws_smithy_types::DateTime {
        &self.modified_at
    }
}
impl ::aws_types::request_id::RequestId for DescribeScraperLoggingConfigurationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeScraperLoggingConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`DescribeScraperLoggingConfigurationOutput`](crate::operation::describe_scraper_logging_configuration::DescribeScraperLoggingConfigurationOutput).
    pub fn builder() -> crate::operation::describe_scraper_logging_configuration::builders::DescribeScraperLoggingConfigurationOutputBuilder {
        crate::operation::describe_scraper_logging_configuration::builders::DescribeScraperLoggingConfigurationOutputBuilder::default()
    }
}

/// A builder for [`DescribeScraperLoggingConfigurationOutput`](crate::operation::describe_scraper_logging_configuration::DescribeScraperLoggingConfigurationOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DescribeScraperLoggingConfigurationOutputBuilder {
    pub(crate) status: ::std::option::Option<crate::types::ScraperLoggingConfigurationStatus>,
    pub(crate) scraper_id: ::std::option::Option<::std::string::String>,
    pub(crate) logging_destination: ::std::option::Option<crate::types::ScraperLoggingDestination>,
    pub(crate) scraper_components: ::std::option::Option<::std::vec::Vec<crate::types::ScraperComponent>>,
    pub(crate) modified_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl DescribeScraperLoggingConfigurationOutputBuilder {
    /// <p>The status of the scraper logging configuration.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::ScraperLoggingConfigurationStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the scraper logging configuration.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ScraperLoggingConfigurationStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the scraper logging configuration.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ScraperLoggingConfigurationStatus> {
        &self.status
    }
    /// <p>The ID of the scraper.</p>
    /// This field is required.
    pub fn scraper_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.scraper_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the scraper.</p>
    pub fn set_scraper_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.scraper_id = input;
        self
    }
    /// <p>The ID of the scraper.</p>
    pub fn get_scraper_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.scraper_id
    }
    /// <p>The destination where scraper logs are sent.</p>
    /// This field is required.
    pub fn logging_destination(mut self, input: crate::types::ScraperLoggingDestination) -> Self {
        self.logging_destination = ::std::option::Option::Some(input);
        self
    }
    /// <p>The destination where scraper logs are sent.</p>
    pub fn set_logging_destination(mut self, input: ::std::option::Option<crate::types::ScraperLoggingDestination>) -> Self {
        self.logging_destination = input;
        self
    }
    /// <p>The destination where scraper logs are sent.</p>
    pub fn get_logging_destination(&self) -> &::std::option::Option<crate::types::ScraperLoggingDestination> {
        &self.logging_destination
    }
    /// Appends an item to `scraper_components`.
    ///
    /// To override the contents of this collection use [`set_scraper_components`](Self::set_scraper_components).
    ///
    /// <p>The list of scraper components configured for logging.</p>
    pub fn scraper_components(mut self, input: crate::types::ScraperComponent) -> Self {
        let mut v = self.scraper_components.unwrap_or_default();
        v.push(input);
        self.scraper_components = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of scraper components configured for logging.</p>
    pub fn set_scraper_components(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ScraperComponent>>) -> Self {
        self.scraper_components = input;
        self
    }
    /// <p>The list of scraper components configured for logging.</p>
    pub fn get_scraper_components(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ScraperComponent>> {
        &self.scraper_components
    }
    /// <p>The date and time when the logging configuration was last modified.</p>
    /// This field is required.
    pub fn modified_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.modified_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time when the logging configuration was last modified.</p>
    pub fn set_modified_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.modified_at = input;
        self
    }
    /// <p>The date and time when the logging configuration was last modified.</p>
    pub fn get_modified_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.modified_at
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeScraperLoggingConfigurationOutput`](crate::operation::describe_scraper_logging_configuration::DescribeScraperLoggingConfigurationOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`scraper_id`](crate::operation::describe_scraper_logging_configuration::builders::DescribeScraperLoggingConfigurationOutputBuilder::scraper_id)
    /// - [`scraper_components`](crate::operation::describe_scraper_logging_configuration::builders::DescribeScraperLoggingConfigurationOutputBuilder::scraper_components)
    /// - [`modified_at`](crate::operation::describe_scraper_logging_configuration::builders::DescribeScraperLoggingConfigurationOutputBuilder::modified_at)
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::describe_scraper_logging_configuration::DescribeScraperLoggingConfigurationOutput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::describe_scraper_logging_configuration::DescribeScraperLoggingConfigurationOutput {
                status: self.status,
                scraper_id: self.scraper_id.ok_or_else(|| {
                    ::aws_smithy_types::error::operation::BuildError::missing_field(
                        "scraper_id",
                        "scraper_id was not specified but it is required when building DescribeScraperLoggingConfigurationOutput",
                    )
                })?,
                logging_destination: self.logging_destination,
                scraper_components: self.scraper_components.ok_or_else(|| {
                    ::aws_smithy_types::error::operation::BuildError::missing_field(
                        "scraper_components",
                        "scraper_components was not specified but it is required when building DescribeScraperLoggingConfigurationOutput",
                    )
                })?,
                modified_at: self.modified_at.ok_or_else(|| {
                    ::aws_smithy_types::error::operation::BuildError::missing_field(
                        "modified_at",
                        "modified_at was not specified but it is required when building DescribeScraperLoggingConfigurationOutput",
                    )
                })?,
                _request_id: self._request_id,
            },
        )
    }
}
