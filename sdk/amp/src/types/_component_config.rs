// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration settings for a scraper component.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ComponentConfig {
    /// <p>Configuration options for the scraper component.</p>
    pub options: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl ComponentConfig {
    /// <p>Configuration options for the scraper component.</p>
    pub fn options(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.options.as_ref()
    }
}
impl ComponentConfig {
    /// Creates a new builder-style object to manufacture [`ComponentConfig`](crate::types::ComponentConfig).
    pub fn builder() -> crate::types::builders::ComponentConfigBuilder {
        crate::types::builders::ComponentConfigBuilder::default()
    }
}

/// A builder for [`ComponentConfig`](crate::types::ComponentConfig).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ComponentConfigBuilder {
    pub(crate) options: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl ComponentConfigBuilder {
    /// Adds a key-value pair to `options`.
    ///
    /// To override the contents of this collection use [`set_options`](Self::set_options).
    ///
    /// <p>Configuration options for the scraper component.</p>
    pub fn options(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.options.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.options = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Configuration options for the scraper component.</p>
    pub fn set_options(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.options = input;
        self
    }
    /// <p>Configuration options for the scraper component.</p>
    pub fn get_options(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.options
    }
    /// Consumes the builder and constructs a [`ComponentConfig`](crate::types::ComponentConfig).
    pub fn build(self) -> crate::types::ComponentConfig {
        crate::types::ComponentConfig { options: self.options }
    }
}
