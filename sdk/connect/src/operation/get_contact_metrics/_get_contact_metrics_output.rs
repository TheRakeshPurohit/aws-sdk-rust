// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetContactMetricsOutput {
    /// <p>A list of metric results containing the calculated values for each requested metric. Each result includes the metric name and its corresponding calculated value.</p>
    pub metric_results: ::std::option::Option<::std::vec::Vec<crate::types::ContactMetricResult>>,
    /// <p>The unique identifier of the contact for which metrics were retrieved.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the contact for which metrics were retrieved.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetContactMetricsOutput {
    /// <p>A list of metric results containing the calculated values for each requested metric. Each result includes the metric name and its corresponding calculated value.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.metric_results.is_none()`.
    pub fn metric_results(&self) -> &[crate::types::ContactMetricResult] {
        self.metric_results.as_deref().unwrap_or_default()
    }
    /// <p>The unique identifier of the contact for which metrics were retrieved.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The ARN of the contact for which metrics were retrieved.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
}
impl ::aws_types::request_id::RequestId for GetContactMetricsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetContactMetricsOutput {
    /// Creates a new builder-style object to manufacture [`GetContactMetricsOutput`](crate::operation::get_contact_metrics::GetContactMetricsOutput).
    pub fn builder() -> crate::operation::get_contact_metrics::builders::GetContactMetricsOutputBuilder {
        crate::operation::get_contact_metrics::builders::GetContactMetricsOutputBuilder::default()
    }
}

/// A builder for [`GetContactMetricsOutput`](crate::operation::get_contact_metrics::GetContactMetricsOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetContactMetricsOutputBuilder {
    pub(crate) metric_results: ::std::option::Option<::std::vec::Vec<crate::types::ContactMetricResult>>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetContactMetricsOutputBuilder {
    /// Appends an item to `metric_results`.
    ///
    /// To override the contents of this collection use [`set_metric_results`](Self::set_metric_results).
    ///
    /// <p>A list of metric results containing the calculated values for each requested metric. Each result includes the metric name and its corresponding calculated value.</p>
    pub fn metric_results(mut self, input: crate::types::ContactMetricResult) -> Self {
        let mut v = self.metric_results.unwrap_or_default();
        v.push(input);
        self.metric_results = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of metric results containing the calculated values for each requested metric. Each result includes the metric name and its corresponding calculated value.</p>
    pub fn set_metric_results(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ContactMetricResult>>) -> Self {
        self.metric_results = input;
        self
    }
    /// <p>A list of metric results containing the calculated values for each requested metric. Each result includes the metric name and its corresponding calculated value.</p>
    pub fn get_metric_results(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ContactMetricResult>> {
        &self.metric_results
    }
    /// <p>The unique identifier of the contact for which metrics were retrieved.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the contact for which metrics were retrieved.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The unique identifier of the contact for which metrics were retrieved.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The ARN of the contact for which metrics were retrieved.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the contact for which metrics were retrieved.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The ARN of the contact for which metrics were retrieved.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetContactMetricsOutput`](crate::operation::get_contact_metrics::GetContactMetricsOutput).
    pub fn build(self) -> crate::operation::get_contact_metrics::GetContactMetricsOutput {
        crate::operation::get_contact_metrics::GetContactMetricsOutput {
            metric_results: self.metric_results,
            id: self.id,
            arn: self.arn,
            _request_id: self._request_id,
        }
    }
}
