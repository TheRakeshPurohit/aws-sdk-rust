// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_contact::_create_contact_output::CreateContactOutputBuilder;

pub use crate::operation::create_contact::_create_contact_input::CreateContactInputBuilder;

impl crate::operation::create_contact::builders::CreateContactInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_contact::CreateContactOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_contact::CreateContactError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_contact();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateContact`.
///
/// <important>
/// <p>Only the EMAIL and VOICE channels are supported. The supported initiation methods for EMAIL are: OUTBOUND, AGENT_REPLY, and FLOW. For VOICE the supported initiation methods are TRANSFER and the subtype connect:ExternalAudio.</p>
/// </important>
/// <p>Creates a new EMAIL or VOICE contact.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateContactFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_contact::builders::CreateContactInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_contact::CreateContactOutput,
        crate::operation::create_contact::CreateContactError,
    > for CreateContactFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_contact::CreateContactOutput,
            crate::operation::create_contact::CreateContactError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreateContactFluentBuilder {
    /// Creates a new `CreateContactFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateContact as a reference.
    pub fn as_input(&self) -> &crate::operation::create_contact::builders::CreateContactInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_contact::CreateContactOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_contact::CreateContactError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_contact::CreateContact::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_contact::CreateContact::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_contact::CreateContactOutput,
        crate::operation::create_contact::CreateContactError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The identifier of the Amazon Connect instance. You can <a href="https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.</p>
    pub fn instance_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.instance_id(input.into());
        self
    }
    /// <p>The identifier of the Amazon Connect instance. You can <a href="https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.</p>
    pub fn set_instance_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_instance_id(input);
        self
    }
    /// <p>The identifier of the Amazon Connect instance. You can <a href="https://docs.aws.amazon.com/connect/latest/adminguide/find-instance-arn.html">find the instance ID</a> in the Amazon Resource Name (ARN) of the instance.</p>
    pub fn get_instance_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_instance_id()
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href="https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href="https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href="https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_client_token()
    }
    /// <p>The identifier of the contact in this instance of Amazon Connect.</p>
    pub fn related_contact_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.related_contact_id(input.into());
        self
    }
    /// <p>The identifier of the contact in this instance of Amazon Connect.</p>
    pub fn set_related_contact_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_related_contact_id(input);
        self
    }
    /// <p>The identifier of the contact in this instance of Amazon Connect.</p>
    pub fn get_related_contact_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_related_contact_id()
    }
    ///
    /// Adds a key-value pair to `Attributes`.
    ///
    /// To override the contents of this collection use [`set_attributes`](Self::set_attributes).
    ///
    /// <p>A custom key-value pair using an attribute map. The attributes are standard Amazon Connect attributes, and can be accessed in flows just like any other contact attributes.</p>
    /// <p>There can be up to 32,768 UTF-8 bytes across all key-value pairs per contact. Attribute keys can include only alphanumeric, dash, and underscore characters.</p>
    pub fn attributes(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.attributes(k.into(), v.into());
        self
    }
    /// <p>A custom key-value pair using an attribute map. The attributes are standard Amazon Connect attributes, and can be accessed in flows just like any other contact attributes.</p>
    /// <p>There can be up to 32,768 UTF-8 bytes across all key-value pairs per contact. Attribute keys can include only alphanumeric, dash, and underscore characters.</p>
    pub fn set_attributes(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.inner = self.inner.set_attributes(input);
        self
    }
    /// <p>A custom key-value pair using an attribute map. The attributes are standard Amazon Connect attributes, and can be accessed in flows just like any other contact attributes.</p>
    /// <p>There can be up to 32,768 UTF-8 bytes across all key-value pairs per contact. Attribute keys can include only alphanumeric, dash, and underscore characters.</p>
    pub fn get_attributes(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.inner.get_attributes()
    }
    ///
    /// Adds a key-value pair to `References`.
    ///
    /// To override the contents of this collection use [`set_references`](Self::set_references).
    ///
    /// <p>A formatted URL that is shown to an agent in the Contact Control Panel (CCP). Tasks can have the following reference types at the time of creation: URL | NUMBER | STRING | DATE | EMAIL | ATTACHMENT.</p>
    pub fn references(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::Reference) -> Self {
        self.inner = self.inner.references(k.into(), v);
        self
    }
    /// <p>A formatted URL that is shown to an agent in the Contact Control Panel (CCP). Tasks can have the following reference types at the time of creation: URL | NUMBER | STRING | DATE | EMAIL | ATTACHMENT.</p>
    pub fn set_references(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::Reference>>,
    ) -> Self {
        self.inner = self.inner.set_references(input);
        self
    }
    /// <p>A formatted URL that is shown to an agent in the Contact Control Panel (CCP). Tasks can have the following reference types at the time of creation: URL | NUMBER | STRING | DATE | EMAIL | ATTACHMENT.</p>
    pub fn get_references(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::Reference>> {
        self.inner.get_references()
    }
    /// <p>The channel for the contact</p><important>
    /// <p>CreateContact only supports the EMAIL and VOICE channels. The following information that states other channels are supported is incorrect. We are working to update this topic.</p>
    /// </important>
    pub fn channel(mut self, input: crate::types::Channel) -> Self {
        self.inner = self.inner.channel(input);
        self
    }
    /// <p>The channel for the contact</p><important>
    /// <p>CreateContact only supports the EMAIL and VOICE channels. The following information that states other channels are supported is incorrect. We are working to update this topic.</p>
    /// </important>
    pub fn set_channel(mut self, input: ::std::option::Option<crate::types::Channel>) -> Self {
        self.inner = self.inner.set_channel(input);
        self
    }
    /// <p>The channel for the contact</p><important>
    /// <p>CreateContact only supports the EMAIL and VOICE channels. The following information that states other channels are supported is incorrect. We are working to update this topic.</p>
    /// </important>
    pub fn get_channel(&self) -> &::std::option::Option<crate::types::Channel> {
        self.inner.get_channel()
    }
    /// <p>Indicates how the contact was initiated.</p><important>
    /// <p>CreateContact only supports the following initiation methods:</p>
    /// <ul>
    /// <li>
    /// <p>For EMAIL: OUTBOUND, AGENT_REPLY, and FLOW.</p></li>
    /// <li>
    /// <p>For VOICE: TRANSFER and the subtype connect:ExternalAudio.</p></li>
    /// </ul>
    /// <p>The following information that states other initiation methods are supported is incorrect. We are working to update this topic.</p>
    /// </important>
    pub fn initiation_method(mut self, input: crate::types::ContactInitiationMethod) -> Self {
        self.inner = self.inner.initiation_method(input);
        self
    }
    /// <p>Indicates how the contact was initiated.</p><important>
    /// <p>CreateContact only supports the following initiation methods:</p>
    /// <ul>
    /// <li>
    /// <p>For EMAIL: OUTBOUND, AGENT_REPLY, and FLOW.</p></li>
    /// <li>
    /// <p>For VOICE: TRANSFER and the subtype connect:ExternalAudio.</p></li>
    /// </ul>
    /// <p>The following information that states other initiation methods are supported is incorrect. We are working to update this topic.</p>
    /// </important>
    pub fn set_initiation_method(mut self, input: ::std::option::Option<crate::types::ContactInitiationMethod>) -> Self {
        self.inner = self.inner.set_initiation_method(input);
        self
    }
    /// <p>Indicates how the contact was initiated.</p><important>
    /// <p>CreateContact only supports the following initiation methods:</p>
    /// <ul>
    /// <li>
    /// <p>For EMAIL: OUTBOUND, AGENT_REPLY, and FLOW.</p></li>
    /// <li>
    /// <p>For VOICE: TRANSFER and the subtype connect:ExternalAudio.</p></li>
    /// </ul>
    /// <p>The following information that states other initiation methods are supported is incorrect. We are working to update this topic.</p>
    /// </important>
    pub fn get_initiation_method(&self) -> &::std::option::Option<crate::types::ContactInitiationMethod> {
        self.inner.get_initiation_method()
    }
    /// <p>Number of minutes the contact will be active for before expiring</p>
    pub fn expiry_duration_in_minutes(mut self, input: i32) -> Self {
        self.inner = self.inner.expiry_duration_in_minutes(input);
        self
    }
    /// <p>Number of minutes the contact will be active for before expiring</p>
    pub fn set_expiry_duration_in_minutes(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_expiry_duration_in_minutes(input);
        self
    }
    /// <p>Number of minutes the contact will be active for before expiring</p>
    pub fn get_expiry_duration_in_minutes(&self) -> &::std::option::Option<i32> {
        self.inner.get_expiry_duration_in_minutes()
    }
    /// <p>User details for the contact</p><important>
    /// <p>UserInfo is required when creating an EMAIL contact with OUTBOUND and AGENT_REPLY contact initiation methods.</p>
    /// </important>
    pub fn user_info(mut self, input: crate::types::UserInfo) -> Self {
        self.inner = self.inner.user_info(input);
        self
    }
    /// <p>User details for the contact</p><important>
    /// <p>UserInfo is required when creating an EMAIL contact with OUTBOUND and AGENT_REPLY contact initiation methods.</p>
    /// </important>
    pub fn set_user_info(mut self, input: ::std::option::Option<crate::types::UserInfo>) -> Self {
        self.inner = self.inner.set_user_info(input);
        self
    }
    /// <p>User details for the contact</p><important>
    /// <p>UserInfo is required when creating an EMAIL contact with OUTBOUND and AGENT_REPLY contact initiation methods.</p>
    /// </important>
    pub fn get_user_info(&self) -> &::std::option::Option<crate::types::UserInfo> {
        self.inner.get_user_info()
    }
    /// <p>Initial state of the contact when it's created</p>
    pub fn initiate_as(mut self, input: crate::types::InitiateAs) -> Self {
        self.inner = self.inner.initiate_as(input);
        self
    }
    /// <p>Initial state of the contact when it's created</p>
    pub fn set_initiate_as(mut self, input: ::std::option::Option<crate::types::InitiateAs>) -> Self {
        self.inner = self.inner.set_initiate_as(input);
        self
    }
    /// <p>Initial state of the contact when it's created</p>
    pub fn get_initiate_as(&self) -> &::std::option::Option<crate::types::InitiateAs> {
        self.inner.get_initiate_as()
    }
    /// <p>The name of a the contact.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>The name of a the contact.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>The name of a the contact.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_name()
    }
    /// <p>A description of the contact.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>A description of the contact.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>A description of the contact.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_description()
    }
    ///
    /// Adds a key-value pair to `SegmentAttributes`.
    ///
    /// To override the contents of this collection use [`set_segment_attributes`](Self::set_segment_attributes).
    ///
    /// <p>A set of system defined key-value pairs stored on individual contact segments (unique contact ID) using an attribute map. The attributes are standard Amazon Connect attributes. They can be accessed in flows.</p>
    /// <p>Attribute keys can include only alphanumeric, -, and _.</p>
    /// <p>This field can be used to set Segment Contact Expiry as a duration in minutes.</p><note>
    /// <p>To set contact expiry, a ValueMap must be specified containing the integer number of minutes the contact will be active for before expiring, with <code>SegmentAttributes</code> like { <code> "connect:ContactExpiry": {"ValueMap" : { "ExpiryDuration": { "ValueInteger": 135}}}}</code>.</p>
    /// </note>
    pub fn segment_attributes(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::SegmentAttributeValue) -> Self {
        self.inner = self.inner.segment_attributes(k.into(), v);
        self
    }
    /// <p>A set of system defined key-value pairs stored on individual contact segments (unique contact ID) using an attribute map. The attributes are standard Amazon Connect attributes. They can be accessed in flows.</p>
    /// <p>Attribute keys can include only alphanumeric, -, and _.</p>
    /// <p>This field can be used to set Segment Contact Expiry as a duration in minutes.</p><note>
    /// <p>To set contact expiry, a ValueMap must be specified containing the integer number of minutes the contact will be active for before expiring, with <code>SegmentAttributes</code> like { <code> "connect:ContactExpiry": {"ValueMap" : { "ExpiryDuration": { "ValueInteger": 135}}}}</code>.</p>
    /// </note>
    pub fn set_segment_attributes(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::SegmentAttributeValue>>,
    ) -> Self {
        self.inner = self.inner.set_segment_attributes(input);
        self
    }
    /// <p>A set of system defined key-value pairs stored on individual contact segments (unique contact ID) using an attribute map. The attributes are standard Amazon Connect attributes. They can be accessed in flows.</p>
    /// <p>Attribute keys can include only alphanumeric, -, and _.</p>
    /// <p>This field can be used to set Segment Contact Expiry as a duration in minutes.</p><note>
    /// <p>To set contact expiry, a ValueMap must be specified containing the integer number of minutes the contact will be active for before expiring, with <code>SegmentAttributes</code> like { <code> "connect:ContactExpiry": {"ValueMap" : { "ExpiryDuration": { "ValueInteger": 135}}}}</code>.</p>
    /// </note>
    pub fn get_segment_attributes(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::SegmentAttributeValue>> {
        self.inner.get_segment_attributes()
    }
    /// <p>The ID of the previous contact when creating a transfer contact. This value can be provided only for external audio contacts. For more information, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/contact-lens-integration.html">Integrate Amazon Connect Contact Lens with external voice systems</a> in the <i>Amazon Connect Administrator Guide</i>.</p>
    pub fn previous_contact_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.previous_contact_id(input.into());
        self
    }
    /// <p>The ID of the previous contact when creating a transfer contact. This value can be provided only for external audio contacts. For more information, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/contact-lens-integration.html">Integrate Amazon Connect Contact Lens with external voice systems</a> in the <i>Amazon Connect Administrator Guide</i>.</p>
    pub fn set_previous_contact_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_previous_contact_id(input);
        self
    }
    /// <p>The ID of the previous contact when creating a transfer contact. This value can be provided only for external audio contacts. For more information, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/contact-lens-integration.html">Integrate Amazon Connect Contact Lens with external voice systems</a> in the <i>Amazon Connect Administrator Guide</i>.</p>
    pub fn get_previous_contact_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_previous_contact_id()
    }
}
