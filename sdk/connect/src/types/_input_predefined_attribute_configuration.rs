// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Custom metadata that is associated to predefined attributes to control behavior in upstream services, such as controlling how a predefined attribute should be displayed in the Amazon Connect admin website.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct InputPredefinedAttributeConfiguration {
    /// <p>When this parameter is set to true, Amazon Connect enforces strict validation on the specific values, if the values are predefined in attributes. The contact will store only valid and predefined values for the predefined attribute key.</p>
    pub enable_value_validation_on_association: bool,
}
impl InputPredefinedAttributeConfiguration {
    /// <p>When this parameter is set to true, Amazon Connect enforces strict validation on the specific values, if the values are predefined in attributes. The contact will store only valid and predefined values for the predefined attribute key.</p>
    pub fn enable_value_validation_on_association(&self) -> bool {
        self.enable_value_validation_on_association
    }
}
impl InputPredefinedAttributeConfiguration {
    /// Creates a new builder-style object to manufacture [`InputPredefinedAttributeConfiguration`](crate::types::InputPredefinedAttributeConfiguration).
    pub fn builder() -> crate::types::builders::InputPredefinedAttributeConfigurationBuilder {
        crate::types::builders::InputPredefinedAttributeConfigurationBuilder::default()
    }
}

/// A builder for [`InputPredefinedAttributeConfiguration`](crate::types::InputPredefinedAttributeConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct InputPredefinedAttributeConfigurationBuilder {
    pub(crate) enable_value_validation_on_association: ::std::option::Option<bool>,
}
impl InputPredefinedAttributeConfigurationBuilder {
    /// <p>When this parameter is set to true, Amazon Connect enforces strict validation on the specific values, if the values are predefined in attributes. The contact will store only valid and predefined values for the predefined attribute key.</p>
    pub fn enable_value_validation_on_association(mut self, input: bool) -> Self {
        self.enable_value_validation_on_association = ::std::option::Option::Some(input);
        self
    }
    /// <p>When this parameter is set to true, Amazon Connect enforces strict validation on the specific values, if the values are predefined in attributes. The contact will store only valid and predefined values for the predefined attribute key.</p>
    pub fn set_enable_value_validation_on_association(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enable_value_validation_on_association = input;
        self
    }
    /// <p>When this parameter is set to true, Amazon Connect enforces strict validation on the specific values, if the values are predefined in attributes. The contact will store only valid and predefined values for the predefined attribute key.</p>
    pub fn get_enable_value_validation_on_association(&self) -> &::std::option::Option<bool> {
        &self.enable_value_validation_on_association
    }
    /// Consumes the builder and constructs a [`InputPredefinedAttributeConfiguration`](crate::types::InputPredefinedAttributeConfiguration).
    pub fn build(self) -> crate::types::InputPredefinedAttributeConfiguration {
        crate::types::InputPredefinedAttributeConfiguration {
            enable_value_validation_on_association: self.enable_value_validation_on_association.unwrap_or_default(),
        }
    }
}
