// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The agent criteria to search for preferred agents on the routing criteria.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SearchableAgentCriteriaStep {
    /// <p>The identifiers of agents used in preferred agents matching.</p>
    pub agent_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The match type combining multiple agent criteria steps.</p>
    pub match_type: ::std::option::Option<crate::types::SearchContactsMatchType>,
}
impl SearchableAgentCriteriaStep {
    /// <p>The identifiers of agents used in preferred agents matching.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.agent_ids.is_none()`.
    pub fn agent_ids(&self) -> &[::std::string::String] {
        self.agent_ids.as_deref().unwrap_or_default()
    }
    /// <p>The match type combining multiple agent criteria steps.</p>
    pub fn match_type(&self) -> ::std::option::Option<&crate::types::SearchContactsMatchType> {
        self.match_type.as_ref()
    }
}
impl SearchableAgentCriteriaStep {
    /// Creates a new builder-style object to manufacture [`SearchableAgentCriteriaStep`](crate::types::SearchableAgentCriteriaStep).
    pub fn builder() -> crate::types::builders::SearchableAgentCriteriaStepBuilder {
        crate::types::builders::SearchableAgentCriteriaStepBuilder::default()
    }
}

/// A builder for [`SearchableAgentCriteriaStep`](crate::types::SearchableAgentCriteriaStep).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SearchableAgentCriteriaStepBuilder {
    pub(crate) agent_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) match_type: ::std::option::Option<crate::types::SearchContactsMatchType>,
}
impl SearchableAgentCriteriaStepBuilder {
    /// Appends an item to `agent_ids`.
    ///
    /// To override the contents of this collection use [`set_agent_ids`](Self::set_agent_ids).
    ///
    /// <p>The identifiers of agents used in preferred agents matching.</p>
    pub fn agent_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.agent_ids.unwrap_or_default();
        v.push(input.into());
        self.agent_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>The identifiers of agents used in preferred agents matching.</p>
    pub fn set_agent_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.agent_ids = input;
        self
    }
    /// <p>The identifiers of agents used in preferred agents matching.</p>
    pub fn get_agent_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.agent_ids
    }
    /// <p>The match type combining multiple agent criteria steps.</p>
    pub fn match_type(mut self, input: crate::types::SearchContactsMatchType) -> Self {
        self.match_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The match type combining multiple agent criteria steps.</p>
    pub fn set_match_type(mut self, input: ::std::option::Option<crate::types::SearchContactsMatchType>) -> Self {
        self.match_type = input;
        self
    }
    /// <p>The match type combining multiple agent criteria steps.</p>
    pub fn get_match_type(&self) -> &::std::option::Option<crate::types::SearchContactsMatchType> {
        &self.match_type
    }
    /// Consumes the builder and constructs a [`SearchableAgentCriteriaStep`](crate::types::SearchableAgentCriteriaStep).
    pub fn build(self) -> crate::types::SearchableAgentCriteriaStep {
        crate::types::SearchableAgentCriteriaStep {
            agent_ids: self.agent_ids,
            match_type: self.match_type,
        }
    }
}
