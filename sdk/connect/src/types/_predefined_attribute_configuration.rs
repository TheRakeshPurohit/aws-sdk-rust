// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Custom metadata that is associated to predefined attributes to control behavior in upstream services, such as controlling how a predefined attribute should be displayed in the Amazon Connect admin website.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PredefinedAttributeConfiguration {
    /// <p>When this parameter is set to true, Amazon Connect enforces strict validation on the specific values, if the values are predefined in attributes. The contact will store only valid and predefined values for teh predefined attribute key.</p>
    pub enable_value_validation_on_association: bool,
    /// <p>A boolean flag used to indicate whether a predefined attribute should be displayed in the Amazon Connect admin website.</p>
    pub is_read_only: bool,
}
impl PredefinedAttributeConfiguration {
    /// <p>When this parameter is set to true, Amazon Connect enforces strict validation on the specific values, if the values are predefined in attributes. The contact will store only valid and predefined values for teh predefined attribute key.</p>
    pub fn enable_value_validation_on_association(&self) -> bool {
        self.enable_value_validation_on_association
    }
    /// <p>A boolean flag used to indicate whether a predefined attribute should be displayed in the Amazon Connect admin website.</p>
    pub fn is_read_only(&self) -> bool {
        self.is_read_only
    }
}
impl PredefinedAttributeConfiguration {
    /// Creates a new builder-style object to manufacture [`PredefinedAttributeConfiguration`](crate::types::PredefinedAttributeConfiguration).
    pub fn builder() -> crate::types::builders::PredefinedAttributeConfigurationBuilder {
        crate::types::builders::PredefinedAttributeConfigurationBuilder::default()
    }
}

/// A builder for [`PredefinedAttributeConfiguration`](crate::types::PredefinedAttributeConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct PredefinedAttributeConfigurationBuilder {
    pub(crate) enable_value_validation_on_association: ::std::option::Option<bool>,
    pub(crate) is_read_only: ::std::option::Option<bool>,
}
impl PredefinedAttributeConfigurationBuilder {
    /// <p>When this parameter is set to true, Amazon Connect enforces strict validation on the specific values, if the values are predefined in attributes. The contact will store only valid and predefined values for teh predefined attribute key.</p>
    pub fn enable_value_validation_on_association(mut self, input: bool) -> Self {
        self.enable_value_validation_on_association = ::std::option::Option::Some(input);
        self
    }
    /// <p>When this parameter is set to true, Amazon Connect enforces strict validation on the specific values, if the values are predefined in attributes. The contact will store only valid and predefined values for teh predefined attribute key.</p>
    pub fn set_enable_value_validation_on_association(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enable_value_validation_on_association = input;
        self
    }
    /// <p>When this parameter is set to true, Amazon Connect enforces strict validation on the specific values, if the values are predefined in attributes. The contact will store only valid and predefined values for teh predefined attribute key.</p>
    pub fn get_enable_value_validation_on_association(&self) -> &::std::option::Option<bool> {
        &self.enable_value_validation_on_association
    }
    /// <p>A boolean flag used to indicate whether a predefined attribute should be displayed in the Amazon Connect admin website.</p>
    pub fn is_read_only(mut self, input: bool) -> Self {
        self.is_read_only = ::std::option::Option::Some(input);
        self
    }
    /// <p>A boolean flag used to indicate whether a predefined attribute should be displayed in the Amazon Connect admin website.</p>
    pub fn set_is_read_only(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_read_only = input;
        self
    }
    /// <p>A boolean flag used to indicate whether a predefined attribute should be displayed in the Amazon Connect admin website.</p>
    pub fn get_is_read_only(&self) -> &::std::option::Option<bool> {
        &self.is_read_only
    }
    /// Consumes the builder and constructs a [`PredefinedAttributeConfiguration`](crate::types::PredefinedAttributeConfiguration).
    pub fn build(self) -> crate::types::PredefinedAttributeConfiguration {
        crate::types::PredefinedAttributeConfiguration {
            enable_value_validation_on_association: self.enable_value_validation_on_association.unwrap_or_default(),
            is_read_only: self.is_read_only.unwrap_or_default(),
        }
    }
}
