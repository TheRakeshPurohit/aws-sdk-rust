// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a predefined attribute.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PredefinedAttribute {
    /// <p>The name of the predefined attribute.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The values of the predefined attribute.</p>
    pub values: ::std::option::Option<crate::types::PredefinedAttributeValues>,
    /// <p>Values that enable you to categorize your predefined attributes. You can use them in custom UI elements across the Amazon Connect admin website.</p>
    pub purposes: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Custom metadata that is associated to predefined attributes to control behavior in upstream services, such as controlling how a predefined attribute should be displayed in the Amazon Connect admin website.</p>
    pub attribute_configuration: ::std::option::Option<crate::types::PredefinedAttributeConfiguration>,
    /// <p>Last modified time.</p>
    pub last_modified_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Last modified region.</p>
    pub last_modified_region: ::std::option::Option<::std::string::String>,
}
impl PredefinedAttribute {
    /// <p>The name of the predefined attribute.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The values of the predefined attribute.</p>
    pub fn values(&self) -> ::std::option::Option<&crate::types::PredefinedAttributeValues> {
        self.values.as_ref()
    }
    /// <p>Values that enable you to categorize your predefined attributes. You can use them in custom UI elements across the Amazon Connect admin website.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.purposes.is_none()`.
    pub fn purposes(&self) -> &[::std::string::String] {
        self.purposes.as_deref().unwrap_or_default()
    }
    /// <p>Custom metadata that is associated to predefined attributes to control behavior in upstream services, such as controlling how a predefined attribute should be displayed in the Amazon Connect admin website.</p>
    pub fn attribute_configuration(&self) -> ::std::option::Option<&crate::types::PredefinedAttributeConfiguration> {
        self.attribute_configuration.as_ref()
    }
    /// <p>Last modified time.</p>
    pub fn last_modified_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_modified_time.as_ref()
    }
    /// <p>Last modified region.</p>
    pub fn last_modified_region(&self) -> ::std::option::Option<&str> {
        self.last_modified_region.as_deref()
    }
}
impl PredefinedAttribute {
    /// Creates a new builder-style object to manufacture [`PredefinedAttribute`](crate::types::PredefinedAttribute).
    pub fn builder() -> crate::types::builders::PredefinedAttributeBuilder {
        crate::types::builders::PredefinedAttributeBuilder::default()
    }
}

/// A builder for [`PredefinedAttribute`](crate::types::PredefinedAttribute).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct PredefinedAttributeBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) values: ::std::option::Option<crate::types::PredefinedAttributeValues>,
    pub(crate) purposes: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) attribute_configuration: ::std::option::Option<crate::types::PredefinedAttributeConfiguration>,
    pub(crate) last_modified_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_modified_region: ::std::option::Option<::std::string::String>,
}
impl PredefinedAttributeBuilder {
    /// <p>The name of the predefined attribute.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the predefined attribute.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the predefined attribute.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The values of the predefined attribute.</p>
    pub fn values(mut self, input: crate::types::PredefinedAttributeValues) -> Self {
        self.values = ::std::option::Option::Some(input);
        self
    }
    /// <p>The values of the predefined attribute.</p>
    pub fn set_values(mut self, input: ::std::option::Option<crate::types::PredefinedAttributeValues>) -> Self {
        self.values = input;
        self
    }
    /// <p>The values of the predefined attribute.</p>
    pub fn get_values(&self) -> &::std::option::Option<crate::types::PredefinedAttributeValues> {
        &self.values
    }
    /// Appends an item to `purposes`.
    ///
    /// To override the contents of this collection use [`set_purposes`](Self::set_purposes).
    ///
    /// <p>Values that enable you to categorize your predefined attributes. You can use them in custom UI elements across the Amazon Connect admin website.</p>
    pub fn purposes(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.purposes.unwrap_or_default();
        v.push(input.into());
        self.purposes = ::std::option::Option::Some(v);
        self
    }
    /// <p>Values that enable you to categorize your predefined attributes. You can use them in custom UI elements across the Amazon Connect admin website.</p>
    pub fn set_purposes(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.purposes = input;
        self
    }
    /// <p>Values that enable you to categorize your predefined attributes. You can use them in custom UI elements across the Amazon Connect admin website.</p>
    pub fn get_purposes(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.purposes
    }
    /// <p>Custom metadata that is associated to predefined attributes to control behavior in upstream services, such as controlling how a predefined attribute should be displayed in the Amazon Connect admin website.</p>
    pub fn attribute_configuration(mut self, input: crate::types::PredefinedAttributeConfiguration) -> Self {
        self.attribute_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Custom metadata that is associated to predefined attributes to control behavior in upstream services, such as controlling how a predefined attribute should be displayed in the Amazon Connect admin website.</p>
    pub fn set_attribute_configuration(mut self, input: ::std::option::Option<crate::types::PredefinedAttributeConfiguration>) -> Self {
        self.attribute_configuration = input;
        self
    }
    /// <p>Custom metadata that is associated to predefined attributes to control behavior in upstream services, such as controlling how a predefined attribute should be displayed in the Amazon Connect admin website.</p>
    pub fn get_attribute_configuration(&self) -> &::std::option::Option<crate::types::PredefinedAttributeConfiguration> {
        &self.attribute_configuration
    }
    /// <p>Last modified time.</p>
    pub fn last_modified_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_modified_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>Last modified time.</p>
    pub fn set_last_modified_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_modified_time = input;
        self
    }
    /// <p>Last modified time.</p>
    pub fn get_last_modified_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_modified_time
    }
    /// <p>Last modified region.</p>
    pub fn last_modified_region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.last_modified_region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Last modified region.</p>
    pub fn set_last_modified_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.last_modified_region = input;
        self
    }
    /// <p>Last modified region.</p>
    pub fn get_last_modified_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.last_modified_region
    }
    /// Consumes the builder and constructs a [`PredefinedAttribute`](crate::types::PredefinedAttribute).
    pub fn build(self) -> crate::types::PredefinedAttribute {
        crate::types::PredefinedAttribute {
            name: self.name,
            values: self.values,
            purposes: self.purposes,
            attribute_configuration: self.attribute_configuration,
            last_modified_time: self.last_modified_time,
            last_modified_region: self.last_modified_region,
        }
    }
}
