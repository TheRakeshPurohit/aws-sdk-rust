// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The criteria of the time range to additionally filter on.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SearchContactsAdditionalTimeRangeCriteria {
    /// <p>A structure of time range that you want to search results.</p>
    pub time_range: ::std::option::Option<crate::types::SearchContactsTimeRange>,
    /// <p>List of the timestamp conditions.</p>
    pub timestamp_condition: ::std::option::Option<crate::types::SearchContactsTimestampCondition>,
}
impl SearchContactsAdditionalTimeRangeCriteria {
    /// <p>A structure of time range that you want to search results.</p>
    pub fn time_range(&self) -> ::std::option::Option<&crate::types::SearchContactsTimeRange> {
        self.time_range.as_ref()
    }
    /// <p>List of the timestamp conditions.</p>
    pub fn timestamp_condition(&self) -> ::std::option::Option<&crate::types::SearchContactsTimestampCondition> {
        self.timestamp_condition.as_ref()
    }
}
impl SearchContactsAdditionalTimeRangeCriteria {
    /// Creates a new builder-style object to manufacture [`SearchContactsAdditionalTimeRangeCriteria`](crate::types::SearchContactsAdditionalTimeRangeCriteria).
    pub fn builder() -> crate::types::builders::SearchContactsAdditionalTimeRangeCriteriaBuilder {
        crate::types::builders::SearchContactsAdditionalTimeRangeCriteriaBuilder::default()
    }
}

/// A builder for [`SearchContactsAdditionalTimeRangeCriteria`](crate::types::SearchContactsAdditionalTimeRangeCriteria).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SearchContactsAdditionalTimeRangeCriteriaBuilder {
    pub(crate) time_range: ::std::option::Option<crate::types::SearchContactsTimeRange>,
    pub(crate) timestamp_condition: ::std::option::Option<crate::types::SearchContactsTimestampCondition>,
}
impl SearchContactsAdditionalTimeRangeCriteriaBuilder {
    /// <p>A structure of time range that you want to search results.</p>
    pub fn time_range(mut self, input: crate::types::SearchContactsTimeRange) -> Self {
        self.time_range = ::std::option::Option::Some(input);
        self
    }
    /// <p>A structure of time range that you want to search results.</p>
    pub fn set_time_range(mut self, input: ::std::option::Option<crate::types::SearchContactsTimeRange>) -> Self {
        self.time_range = input;
        self
    }
    /// <p>A structure of time range that you want to search results.</p>
    pub fn get_time_range(&self) -> &::std::option::Option<crate::types::SearchContactsTimeRange> {
        &self.time_range
    }
    /// <p>List of the timestamp conditions.</p>
    pub fn timestamp_condition(mut self, input: crate::types::SearchContactsTimestampCondition) -> Self {
        self.timestamp_condition = ::std::option::Option::Some(input);
        self
    }
    /// <p>List of the timestamp conditions.</p>
    pub fn set_timestamp_condition(mut self, input: ::std::option::Option<crate::types::SearchContactsTimestampCondition>) -> Self {
        self.timestamp_condition = input;
        self
    }
    /// <p>List of the timestamp conditions.</p>
    pub fn get_timestamp_condition(&self) -> &::std::option::Option<crate::types::SearchContactsTimestampCondition> {
        &self.timestamp_condition
    }
    /// Consumes the builder and constructs a [`SearchContactsAdditionalTimeRangeCriteria`](crate::types::SearchContactsAdditionalTimeRangeCriteria).
    pub fn build(self) -> crate::types::SearchContactsAdditionalTimeRangeCriteria {
        crate::types::SearchContactsAdditionalTimeRangeCriteria {
            time_range: self.time_range,
            timestamp_condition: self.timestamp_condition,
        }
    }
}
