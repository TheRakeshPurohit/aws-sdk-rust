// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_routing_profile_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_routing_profile::CreateRoutingProfileInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.agent_availability_timer {
        object.key("AgentAvailabilityTimer").string(var_1.as_str());
    }
    if let Some(var_2) = &input.default_outbound_queue_id {
        object.key("DefaultOutboundQueueId").string(var_2.as_str());
    }
    if let Some(var_3) = &input.description {
        object.key("Description").string(var_3.as_str());
    }
    if let Some(var_4) = &input.manual_assignment_queue_configs {
        let mut array_5 = object.key("ManualAssignmentQueueConfigs").start_array();
        for item_6 in var_4 {
            {
                #[allow(unused_mut)]
                let mut object_7 = array_5.value().start_object();
                crate::protocol_serde::shape_routing_profile_manual_assignment_queue_config::ser_routing_profile_manual_assignment_queue_config(
                    &mut object_7,
                    item_6,
                )?;
                object_7.finish();
            }
        }
        array_5.finish();
    }
    if let Some(var_8) = &input.media_concurrencies {
        let mut array_9 = object.key("MediaConcurrencies").start_array();
        for item_10 in var_8 {
            {
                #[allow(unused_mut)]
                let mut object_11 = array_9.value().start_object();
                crate::protocol_serde::shape_media_concurrency::ser_media_concurrency(&mut object_11, item_10)?;
                object_11.finish();
            }
        }
        array_9.finish();
    }
    if let Some(var_12) = &input.name {
        object.key("Name").string(var_12.as_str());
    }
    if let Some(var_13) = &input.queue_configs {
        let mut array_14 = object.key("QueueConfigs").start_array();
        for item_15 in var_13 {
            {
                #[allow(unused_mut)]
                let mut object_16 = array_14.value().start_object();
                crate::protocol_serde::shape_routing_profile_queue_config::ser_routing_profile_queue_config(&mut object_16, item_15)?;
                object_16.finish();
            }
        }
        array_14.finish();
    }
    if let Some(var_17) = &input.tags {
        #[allow(unused_mut)]
        let mut object_18 = object.key("Tags").start_object();
        for (key_19, value_20) in var_17 {
            {
                object_18.key(key_19.as_str()).string(value_20.as_str());
            }
        }
        object_18.finish();
    }
    Ok(())
}
