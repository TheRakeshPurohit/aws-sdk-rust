// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_search_criteria(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::SearchCriteria,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.name {
        #[allow(unused_mut)]
        let mut object_2 = object.key("Name").start_object();
        crate::protocol_serde::shape_name_criteria::ser_name_criteria(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.agent_ids {
        let mut array_4 = object.key("AgentIds").start_array();
        for item_5 in var_3 {
            {
                array_4.value().string(item_5.as_str());
            }
        }
        array_4.finish();
    }
    if let Some(var_6) = &input.agent_hierarchy_groups {
        #[allow(unused_mut)]
        let mut object_7 = object.key("AgentHierarchyGroups").start_object();
        crate::protocol_serde::shape_agent_hierarchy_groups::ser_agent_hierarchy_groups(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.channels {
        let mut array_9 = object.key("Channels").start_array();
        for item_10 in var_8 {
            {
                array_9.value().string(item_10.as_str());
            }
        }
        array_9.finish();
    }
    if let Some(var_11) = &input.contact_analysis {
        #[allow(unused_mut)]
        let mut object_12 = object.key("ContactAnalysis").start_object();
        crate::protocol_serde::shape_contact_analysis::ser_contact_analysis(&mut object_12, var_11)?;
        object_12.finish();
    }
    if let Some(var_13) = &input.initiation_methods {
        let mut array_14 = object.key("InitiationMethods").start_array();
        for item_15 in var_13 {
            {
                array_14.value().string(item_15.as_str());
            }
        }
        array_14.finish();
    }
    if let Some(var_16) = &input.queue_ids {
        let mut array_17 = object.key("QueueIds").start_array();
        for item_18 in var_16 {
            {
                array_17.value().string(item_18.as_str());
            }
        }
        array_17.finish();
    }
    if let Some(var_19) = &input.routing_criteria {
        #[allow(unused_mut)]
        let mut object_20 = object.key("RoutingCriteria").start_object();
        crate::protocol_serde::shape_searchable_routing_criteria::ser_searchable_routing_criteria(&mut object_20, var_19)?;
        object_20.finish();
    }
    if let Some(var_21) = &input.additional_time_range {
        #[allow(unused_mut)]
        let mut object_22 = object.key("AdditionalTimeRange").start_object();
        crate::protocol_serde::shape_search_contacts_additional_time_range::ser_search_contacts_additional_time_range(&mut object_22, var_21)?;
        object_22.finish();
    }
    if let Some(var_23) = &input.searchable_contact_attributes {
        #[allow(unused_mut)]
        let mut object_24 = object.key("SearchableContactAttributes").start_object();
        crate::protocol_serde::shape_searchable_contact_attributes::ser_searchable_contact_attributes(&mut object_24, var_23)?;
        object_24.finish();
    }
    if let Some(var_25) = &input.searchable_segment_attributes {
        #[allow(unused_mut)]
        let mut object_26 = object.key("SearchableSegmentAttributes").start_object();
        crate::protocol_serde::shape_searchable_segment_attributes::ser_searchable_segment_attributes(&mut object_26, var_25)?;
        object_26.finish();
    }
    Ok(())
}
