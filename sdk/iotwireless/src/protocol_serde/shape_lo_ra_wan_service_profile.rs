// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_lo_ra_wan_service_profile(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::LoRaWanServiceProfile,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if input.add_gw_metadata {
        object.key("AddGwMetadata").boolean(input.add_gw_metadata);
    }
    if let Some(var_1) = &input.dr_min {
        object.key("DrMin").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_1).into()),
        );
    }
    if let Some(var_2) = &input.dr_max {
        object.key("DrMax").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_2).into()),
        );
    }
    if input.pr_allowed {
        object.key("PrAllowed").boolean(input.pr_allowed);
    }
    if input.ra_allowed {
        object.key("RaAllowed").boolean(input.ra_allowed);
    }
    if let Some(var_3) = &input.tx_power_index_min {
        object.key("TxPowerIndexMin").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_3).into()),
        );
    }
    if let Some(var_4) = &input.tx_power_index_max {
        object.key("TxPowerIndexMax").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_4).into()),
        );
    }
    if let Some(var_5) = &input.nb_trans_min {
        object.key("NbTransMin").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_5).into()),
        );
    }
    if let Some(var_6) = &input.nb_trans_max {
        object.key("NbTransMax").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_6).into()),
        );
    }
    Ok(())
}
