// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>LoRaWANServiceProfile object.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LoRaWanServiceProfile {
    /// <p>The AddGWMetaData value.</p>
    pub add_gw_metadata: bool,
    /// <p>The DrMin value.</p>
    pub dr_min: ::std::option::Option<i32>,
    /// <p>The DrMax value.</p>
    pub dr_max: ::std::option::Option<i32>,
    /// <p>The PRAllowed value that describes whether passive roaming is allowed.</p>
    pub pr_allowed: bool,
    /// <p>The RAAllowed value that describes whether roaming activation is allowed.</p>
    pub ra_allowed: bool,
    /// <p>The Transmit Power Index minimum.</p>
    /// <p>Default: <code>0</code></p>
    pub tx_power_index_min: ::std::option::Option<i32>,
    /// <p>The Transmit Power Index maximum.</p>
    /// <p>Default: <code>15</code></p>
    pub tx_power_index_max: ::std::option::Option<i32>,
    /// <p>The minimum number of transmissions.</p>
    /// <p>Default: <code>0</code></p>
    pub nb_trans_min: ::std::option::Option<i32>,
    /// <p>The maximum number of transmissions.</p>
    /// <p>Default: <code>3</code></p>
    pub nb_trans_max: ::std::option::Option<i32>,
}
impl LoRaWanServiceProfile {
    /// <p>The AddGWMetaData value.</p>
    pub fn add_gw_metadata(&self) -> bool {
        self.add_gw_metadata
    }
    /// <p>The DrMin value.</p>
    pub fn dr_min(&self) -> ::std::option::Option<i32> {
        self.dr_min
    }
    /// <p>The DrMax value.</p>
    pub fn dr_max(&self) -> ::std::option::Option<i32> {
        self.dr_max
    }
    /// <p>The PRAllowed value that describes whether passive roaming is allowed.</p>
    pub fn pr_allowed(&self) -> bool {
        self.pr_allowed
    }
    /// <p>The RAAllowed value that describes whether roaming activation is allowed.</p>
    pub fn ra_allowed(&self) -> bool {
        self.ra_allowed
    }
    /// <p>The Transmit Power Index minimum.</p>
    /// <p>Default: <code>0</code></p>
    pub fn tx_power_index_min(&self) -> ::std::option::Option<i32> {
        self.tx_power_index_min
    }
    /// <p>The Transmit Power Index maximum.</p>
    /// <p>Default: <code>15</code></p>
    pub fn tx_power_index_max(&self) -> ::std::option::Option<i32> {
        self.tx_power_index_max
    }
    /// <p>The minimum number of transmissions.</p>
    /// <p>Default: <code>0</code></p>
    pub fn nb_trans_min(&self) -> ::std::option::Option<i32> {
        self.nb_trans_min
    }
    /// <p>The maximum number of transmissions.</p>
    /// <p>Default: <code>3</code></p>
    pub fn nb_trans_max(&self) -> ::std::option::Option<i32> {
        self.nb_trans_max
    }
}
impl LoRaWanServiceProfile {
    /// Creates a new builder-style object to manufacture [`LoRaWanServiceProfile`](crate::types::LoRaWanServiceProfile).
    pub fn builder() -> crate::types::builders::LoRaWanServiceProfileBuilder {
        crate::types::builders::LoRaWanServiceProfileBuilder::default()
    }
}

/// A builder for [`LoRaWanServiceProfile`](crate::types::LoRaWanServiceProfile).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct LoRaWanServiceProfileBuilder {
    pub(crate) add_gw_metadata: ::std::option::Option<bool>,
    pub(crate) dr_min: ::std::option::Option<i32>,
    pub(crate) dr_max: ::std::option::Option<i32>,
    pub(crate) pr_allowed: ::std::option::Option<bool>,
    pub(crate) ra_allowed: ::std::option::Option<bool>,
    pub(crate) tx_power_index_min: ::std::option::Option<i32>,
    pub(crate) tx_power_index_max: ::std::option::Option<i32>,
    pub(crate) nb_trans_min: ::std::option::Option<i32>,
    pub(crate) nb_trans_max: ::std::option::Option<i32>,
}
impl LoRaWanServiceProfileBuilder {
    /// <p>The AddGWMetaData value.</p>
    pub fn add_gw_metadata(mut self, input: bool) -> Self {
        self.add_gw_metadata = ::std::option::Option::Some(input);
        self
    }
    /// <p>The AddGWMetaData value.</p>
    pub fn set_add_gw_metadata(mut self, input: ::std::option::Option<bool>) -> Self {
        self.add_gw_metadata = input;
        self
    }
    /// <p>The AddGWMetaData value.</p>
    pub fn get_add_gw_metadata(&self) -> &::std::option::Option<bool> {
        &self.add_gw_metadata
    }
    /// <p>The DrMin value.</p>
    pub fn dr_min(mut self, input: i32) -> Self {
        self.dr_min = ::std::option::Option::Some(input);
        self
    }
    /// <p>The DrMin value.</p>
    pub fn set_dr_min(mut self, input: ::std::option::Option<i32>) -> Self {
        self.dr_min = input;
        self
    }
    /// <p>The DrMin value.</p>
    pub fn get_dr_min(&self) -> &::std::option::Option<i32> {
        &self.dr_min
    }
    /// <p>The DrMax value.</p>
    pub fn dr_max(mut self, input: i32) -> Self {
        self.dr_max = ::std::option::Option::Some(input);
        self
    }
    /// <p>The DrMax value.</p>
    pub fn set_dr_max(mut self, input: ::std::option::Option<i32>) -> Self {
        self.dr_max = input;
        self
    }
    /// <p>The DrMax value.</p>
    pub fn get_dr_max(&self) -> &::std::option::Option<i32> {
        &self.dr_max
    }
    /// <p>The PRAllowed value that describes whether passive roaming is allowed.</p>
    pub fn pr_allowed(mut self, input: bool) -> Self {
        self.pr_allowed = ::std::option::Option::Some(input);
        self
    }
    /// <p>The PRAllowed value that describes whether passive roaming is allowed.</p>
    pub fn set_pr_allowed(mut self, input: ::std::option::Option<bool>) -> Self {
        self.pr_allowed = input;
        self
    }
    /// <p>The PRAllowed value that describes whether passive roaming is allowed.</p>
    pub fn get_pr_allowed(&self) -> &::std::option::Option<bool> {
        &self.pr_allowed
    }
    /// <p>The RAAllowed value that describes whether roaming activation is allowed.</p>
    pub fn ra_allowed(mut self, input: bool) -> Self {
        self.ra_allowed = ::std::option::Option::Some(input);
        self
    }
    /// <p>The RAAllowed value that describes whether roaming activation is allowed.</p>
    pub fn set_ra_allowed(mut self, input: ::std::option::Option<bool>) -> Self {
        self.ra_allowed = input;
        self
    }
    /// <p>The RAAllowed value that describes whether roaming activation is allowed.</p>
    pub fn get_ra_allowed(&self) -> &::std::option::Option<bool> {
        &self.ra_allowed
    }
    /// <p>The Transmit Power Index minimum.</p>
    /// <p>Default: <code>0</code></p>
    pub fn tx_power_index_min(mut self, input: i32) -> Self {
        self.tx_power_index_min = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Transmit Power Index minimum.</p>
    /// <p>Default: <code>0</code></p>
    pub fn set_tx_power_index_min(mut self, input: ::std::option::Option<i32>) -> Self {
        self.tx_power_index_min = input;
        self
    }
    /// <p>The Transmit Power Index minimum.</p>
    /// <p>Default: <code>0</code></p>
    pub fn get_tx_power_index_min(&self) -> &::std::option::Option<i32> {
        &self.tx_power_index_min
    }
    /// <p>The Transmit Power Index maximum.</p>
    /// <p>Default: <code>15</code></p>
    pub fn tx_power_index_max(mut self, input: i32) -> Self {
        self.tx_power_index_max = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Transmit Power Index maximum.</p>
    /// <p>Default: <code>15</code></p>
    pub fn set_tx_power_index_max(mut self, input: ::std::option::Option<i32>) -> Self {
        self.tx_power_index_max = input;
        self
    }
    /// <p>The Transmit Power Index maximum.</p>
    /// <p>Default: <code>15</code></p>
    pub fn get_tx_power_index_max(&self) -> &::std::option::Option<i32> {
        &self.tx_power_index_max
    }
    /// <p>The minimum number of transmissions.</p>
    /// <p>Default: <code>0</code></p>
    pub fn nb_trans_min(mut self, input: i32) -> Self {
        self.nb_trans_min = ::std::option::Option::Some(input);
        self
    }
    /// <p>The minimum number of transmissions.</p>
    /// <p>Default: <code>0</code></p>
    pub fn set_nb_trans_min(mut self, input: ::std::option::Option<i32>) -> Self {
        self.nb_trans_min = input;
        self
    }
    /// <p>The minimum number of transmissions.</p>
    /// <p>Default: <code>0</code></p>
    pub fn get_nb_trans_min(&self) -> &::std::option::Option<i32> {
        &self.nb_trans_min
    }
    /// <p>The maximum number of transmissions.</p>
    /// <p>Default: <code>3</code></p>
    pub fn nb_trans_max(mut self, input: i32) -> Self {
        self.nb_trans_max = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of transmissions.</p>
    /// <p>Default: <code>3</code></p>
    pub fn set_nb_trans_max(mut self, input: ::std::option::Option<i32>) -> Self {
        self.nb_trans_max = input;
        self
    }
    /// <p>The maximum number of transmissions.</p>
    /// <p>Default: <code>3</code></p>
    pub fn get_nb_trans_max(&self) -> &::std::option::Option<i32> {
        &self.nb_trans_max
    }
    /// Consumes the builder and constructs a [`LoRaWanServiceProfile`](crate::types::LoRaWanServiceProfile).
    pub fn build(self) -> crate::types::LoRaWanServiceProfile {
        crate::types::LoRaWanServiceProfile {
            add_gw_metadata: self.add_gw_metadata.unwrap_or_default(),
            dr_min: self.dr_min,
            dr_max: self.dr_max,
            pr_allowed: self.pr_allowed.unwrap_or_default(),
            ra_allowed: self.ra_allowed.unwrap_or_default(),
            tx_power_index_min: self.tx_power_index_min,
            tx_power_index_max: self.tx_power_index_max,
            nb_trans_min: self.nb_trans_min,
            nb_trans_max: self.nb_trans_max,
        }
    }
}
