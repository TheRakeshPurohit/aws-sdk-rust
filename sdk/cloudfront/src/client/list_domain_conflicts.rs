// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ListDomainConflicts`](crate::operation::list_domain_conflicts::builders::ListDomainConflictsFluentBuilder) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::operation::list_domain_conflicts::builders::ListDomainConflictsFluentBuilder::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain(impl Into<String>)`](crate::operation::list_domain_conflicts::builders::ListDomainConflictsFluentBuilder::domain) / [`set_domain(Option<String>)`](crate::operation::list_domain_conflicts::builders::ListDomainConflictsFluentBuilder::set_domain):<br>required: **true**<br><p>The domain to check for conflicts.</p><br>
    ///   - [`domain_control_validation_resource(DistributionResourceId)`](crate::operation::list_domain_conflicts::builders::ListDomainConflictsFluentBuilder::domain_control_validation_resource) / [`set_domain_control_validation_resource(Option<DistributionResourceId>)`](crate::operation::list_domain_conflicts::builders::ListDomainConflictsFluentBuilder::set_domain_control_validation_resource):<br>required: **true**<br><p>The distribution resource identifier. This can be the standard distribution or distribution tenant that has a valid certificate, which covers the domain that you specify.</p><br>
    ///   - [`max_items(i32)`](crate::operation::list_domain_conflicts::builders::ListDomainConflictsFluentBuilder::max_items) / [`set_max_items(Option<i32>)`](crate::operation::list_domain_conflicts::builders::ListDomainConflictsFluentBuilder::set_max_items):<br>required: **false**<br><p>The maximum number of domain conflicts to return.</p><br>
    ///   - [`marker(impl Into<String>)`](crate::operation::list_domain_conflicts::builders::ListDomainConflictsFluentBuilder::marker) / [`set_marker(Option<String>)`](crate::operation::list_domain_conflicts::builders::ListDomainConflictsFluentBuilder::set_marker):<br>required: **false**<br><p>The marker for the next set of domain conflicts.</p><br>
    /// - On success, responds with [`ListDomainConflictsOutput`](crate::operation::list_domain_conflicts::ListDomainConflictsOutput) with field(s):
    ///   - [`domain_conflicts(Option<Vec::<DomainConflict>>)`](crate::operation::list_domain_conflicts::ListDomainConflictsOutput::domain_conflicts): <p>Contains details about the domain conflicts.</p>
    ///   - [`next_marker(Option<String>)`](crate::operation::list_domain_conflicts::ListDomainConflictsOutput::next_marker): <p>A token used for pagination of results returned in the response. You can use the token from the previous request to define where the current request should begin.</p>
    /// - On failure, responds with [`SdkError<ListDomainConflictsError>`](crate::operation::list_domain_conflicts::ListDomainConflictsError)
    pub fn list_domain_conflicts(&self) -> crate::operation::list_domain_conflicts::builders::ListDomainConflictsFluentBuilder {
        crate::operation::list_domain_conflicts::builders::ListDomainConflictsFluentBuilder::new(self.handle.clone())
    }
}
