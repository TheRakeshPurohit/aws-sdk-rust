// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Metric filters express how CloudWatch Logs would extract metric observations from ingested log events and transform them into metric data in a CloudWatch metric.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MetricFilter {
    /// <p>The name of the metric filter.</p>
    pub filter_name: ::std::option::Option<::std::string::String>,
    /// <p>A symbolic description of how CloudWatch Logs should interpret the data in each log event. For example, a log event can contain timestamps, IP addresses, strings, and so on. You use the filter pattern to specify what to look for in the log event message.</p>
    pub filter_pattern: ::std::option::Option<::std::string::String>,
    /// <p>The metric transformations.</p>
    pub metric_transformations: ::std::option::Option<::std::vec::Vec<crate::types::MetricTransformation>>,
    /// <p>The creation time of the metric filter, expressed as the number of milliseconds after <code>Jan 1, 1970 00:00:00 UTC</code>.</p>
    pub creation_time: ::std::option::Option<i64>,
    /// <p>The name of the log group.</p>
    pub log_group_name: ::std::option::Option<::std::string::String>,
    /// <p>This parameter is valid only for log groups that have an active log transformer. For more information about log transformers, see <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutTransformer.html">PutTransformer</a>.</p>
    /// <p>If this value is <code>true</code>, the metric filter is applied on the transformed version of the log events instead of the original ingested log events.</p>
    pub apply_on_transformed_logs: bool,
    /// <p>The filter expression that specifies which log events are processed by this metric filter based on system fields. Returns the <code>fieldSelectionCriteria</code> value if it was specified when the metric filter was created.</p>
    pub field_selection_criteria: ::std::option::Option<::std::string::String>,
    /// <p>The list of system fields that are emitted as additional dimensions in the generated metrics. Returns the <code>emitSystemFieldDimensions</code> value if it was specified when the metric filter was created.</p>
    pub emit_system_field_dimensions: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl MetricFilter {
    /// <p>The name of the metric filter.</p>
    pub fn filter_name(&self) -> ::std::option::Option<&str> {
        self.filter_name.as_deref()
    }
    /// <p>A symbolic description of how CloudWatch Logs should interpret the data in each log event. For example, a log event can contain timestamps, IP addresses, strings, and so on. You use the filter pattern to specify what to look for in the log event message.</p>
    pub fn filter_pattern(&self) -> ::std::option::Option<&str> {
        self.filter_pattern.as_deref()
    }
    /// <p>The metric transformations.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.metric_transformations.is_none()`.
    pub fn metric_transformations(&self) -> &[crate::types::MetricTransformation] {
        self.metric_transformations.as_deref().unwrap_or_default()
    }
    /// <p>The creation time of the metric filter, expressed as the number of milliseconds after <code>Jan 1, 1970 00:00:00 UTC</code>.</p>
    pub fn creation_time(&self) -> ::std::option::Option<i64> {
        self.creation_time
    }
    /// <p>The name of the log group.</p>
    pub fn log_group_name(&self) -> ::std::option::Option<&str> {
        self.log_group_name.as_deref()
    }
    /// <p>This parameter is valid only for log groups that have an active log transformer. For more information about log transformers, see <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutTransformer.html">PutTransformer</a>.</p>
    /// <p>If this value is <code>true</code>, the metric filter is applied on the transformed version of the log events instead of the original ingested log events.</p>
    pub fn apply_on_transformed_logs(&self) -> bool {
        self.apply_on_transformed_logs
    }
    /// <p>The filter expression that specifies which log events are processed by this metric filter based on system fields. Returns the <code>fieldSelectionCriteria</code> value if it was specified when the metric filter was created.</p>
    pub fn field_selection_criteria(&self) -> ::std::option::Option<&str> {
        self.field_selection_criteria.as_deref()
    }
    /// <p>The list of system fields that are emitted as additional dimensions in the generated metrics. Returns the <code>emitSystemFieldDimensions</code> value if it was specified when the metric filter was created.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.emit_system_field_dimensions.is_none()`.
    pub fn emit_system_field_dimensions(&self) -> &[::std::string::String] {
        self.emit_system_field_dimensions.as_deref().unwrap_or_default()
    }
}
impl MetricFilter {
    /// Creates a new builder-style object to manufacture [`MetricFilter`](crate::types::MetricFilter).
    pub fn builder() -> crate::types::builders::MetricFilterBuilder {
        crate::types::builders::MetricFilterBuilder::default()
    }
}

/// A builder for [`MetricFilter`](crate::types::MetricFilter).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct MetricFilterBuilder {
    pub(crate) filter_name: ::std::option::Option<::std::string::String>,
    pub(crate) filter_pattern: ::std::option::Option<::std::string::String>,
    pub(crate) metric_transformations: ::std::option::Option<::std::vec::Vec<crate::types::MetricTransformation>>,
    pub(crate) creation_time: ::std::option::Option<i64>,
    pub(crate) log_group_name: ::std::option::Option<::std::string::String>,
    pub(crate) apply_on_transformed_logs: ::std::option::Option<bool>,
    pub(crate) field_selection_criteria: ::std::option::Option<::std::string::String>,
    pub(crate) emit_system_field_dimensions: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl MetricFilterBuilder {
    /// <p>The name of the metric filter.</p>
    pub fn filter_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.filter_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the metric filter.</p>
    pub fn set_filter_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.filter_name = input;
        self
    }
    /// <p>The name of the metric filter.</p>
    pub fn get_filter_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.filter_name
    }
    /// <p>A symbolic description of how CloudWatch Logs should interpret the data in each log event. For example, a log event can contain timestamps, IP addresses, strings, and so on. You use the filter pattern to specify what to look for in the log event message.</p>
    pub fn filter_pattern(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.filter_pattern = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A symbolic description of how CloudWatch Logs should interpret the data in each log event. For example, a log event can contain timestamps, IP addresses, strings, and so on. You use the filter pattern to specify what to look for in the log event message.</p>
    pub fn set_filter_pattern(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.filter_pattern = input;
        self
    }
    /// <p>A symbolic description of how CloudWatch Logs should interpret the data in each log event. For example, a log event can contain timestamps, IP addresses, strings, and so on. You use the filter pattern to specify what to look for in the log event message.</p>
    pub fn get_filter_pattern(&self) -> &::std::option::Option<::std::string::String> {
        &self.filter_pattern
    }
    /// Appends an item to `metric_transformations`.
    ///
    /// To override the contents of this collection use [`set_metric_transformations`](Self::set_metric_transformations).
    ///
    /// <p>The metric transformations.</p>
    pub fn metric_transformations(mut self, input: crate::types::MetricTransformation) -> Self {
        let mut v = self.metric_transformations.unwrap_or_default();
        v.push(input);
        self.metric_transformations = ::std::option::Option::Some(v);
        self
    }
    /// <p>The metric transformations.</p>
    pub fn set_metric_transformations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::MetricTransformation>>) -> Self {
        self.metric_transformations = input;
        self
    }
    /// <p>The metric transformations.</p>
    pub fn get_metric_transformations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MetricTransformation>> {
        &self.metric_transformations
    }
    /// <p>The creation time of the metric filter, expressed as the number of milliseconds after <code>Jan 1, 1970 00:00:00 UTC</code>.</p>
    pub fn creation_time(mut self, input: i64) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The creation time of the metric filter, expressed as the number of milliseconds after <code>Jan 1, 1970 00:00:00 UTC</code>.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<i64>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The creation time of the metric filter, expressed as the number of milliseconds after <code>Jan 1, 1970 00:00:00 UTC</code>.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<i64> {
        &self.creation_time
    }
    /// <p>The name of the log group.</p>
    pub fn log_group_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.log_group_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the log group.</p>
    pub fn set_log_group_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.log_group_name = input;
        self
    }
    /// <p>The name of the log group.</p>
    pub fn get_log_group_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.log_group_name
    }
    /// <p>This parameter is valid only for log groups that have an active log transformer. For more information about log transformers, see <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutTransformer.html">PutTransformer</a>.</p>
    /// <p>If this value is <code>true</code>, the metric filter is applied on the transformed version of the log events instead of the original ingested log events.</p>
    pub fn apply_on_transformed_logs(mut self, input: bool) -> Self {
        self.apply_on_transformed_logs = ::std::option::Option::Some(input);
        self
    }
    /// <p>This parameter is valid only for log groups that have an active log transformer. For more information about log transformers, see <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutTransformer.html">PutTransformer</a>.</p>
    /// <p>If this value is <code>true</code>, the metric filter is applied on the transformed version of the log events instead of the original ingested log events.</p>
    pub fn set_apply_on_transformed_logs(mut self, input: ::std::option::Option<bool>) -> Self {
        self.apply_on_transformed_logs = input;
        self
    }
    /// <p>This parameter is valid only for log groups that have an active log transformer. For more information about log transformers, see <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutTransformer.html">PutTransformer</a>.</p>
    /// <p>If this value is <code>true</code>, the metric filter is applied on the transformed version of the log events instead of the original ingested log events.</p>
    pub fn get_apply_on_transformed_logs(&self) -> &::std::option::Option<bool> {
        &self.apply_on_transformed_logs
    }
    /// <p>The filter expression that specifies which log events are processed by this metric filter based on system fields. Returns the <code>fieldSelectionCriteria</code> value if it was specified when the metric filter was created.</p>
    pub fn field_selection_criteria(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.field_selection_criteria = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The filter expression that specifies which log events are processed by this metric filter based on system fields. Returns the <code>fieldSelectionCriteria</code> value if it was specified when the metric filter was created.</p>
    pub fn set_field_selection_criteria(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.field_selection_criteria = input;
        self
    }
    /// <p>The filter expression that specifies which log events are processed by this metric filter based on system fields. Returns the <code>fieldSelectionCriteria</code> value if it was specified when the metric filter was created.</p>
    pub fn get_field_selection_criteria(&self) -> &::std::option::Option<::std::string::String> {
        &self.field_selection_criteria
    }
    /// Appends an item to `emit_system_field_dimensions`.
    ///
    /// To override the contents of this collection use [`set_emit_system_field_dimensions`](Self::set_emit_system_field_dimensions).
    ///
    /// <p>The list of system fields that are emitted as additional dimensions in the generated metrics. Returns the <code>emitSystemFieldDimensions</code> value if it was specified when the metric filter was created.</p>
    pub fn emit_system_field_dimensions(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.emit_system_field_dimensions.unwrap_or_default();
        v.push(input.into());
        self.emit_system_field_dimensions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of system fields that are emitted as additional dimensions in the generated metrics. Returns the <code>emitSystemFieldDimensions</code> value if it was specified when the metric filter was created.</p>
    pub fn set_emit_system_field_dimensions(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.emit_system_field_dimensions = input;
        self
    }
    /// <p>The list of system fields that are emitted as additional dimensions in the generated metrics. Returns the <code>emitSystemFieldDimensions</code> value if it was specified when the metric filter was created.</p>
    pub fn get_emit_system_field_dimensions(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.emit_system_field_dimensions
    }
    /// Consumes the builder and constructs a [`MetricFilter`](crate::types::MetricFilter).
    pub fn build(self) -> crate::types::MetricFilter {
        crate::types::MetricFilter {
            filter_name: self.filter_name,
            filter_pattern: self.filter_pattern,
            metric_transformations: self.metric_transformations,
            creation_time: self.creation_time,
            log_group_name: self.log_group_name,
            apply_on_transformed_logs: self.apply_on_transformed_logs.unwrap_or_default(),
            field_selection_criteria: self.field_selection_criteria,
            emit_system_field_dimensions: self.emit_system_field_dimensions,
        }
    }
}
