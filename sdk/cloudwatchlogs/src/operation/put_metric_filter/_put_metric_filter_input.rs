// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PutMetricFilterInput {
    /// <p>The name of the log group.</p>
    pub log_group_name: ::std::option::Option<::std::string::String>,
    /// <p>A name for the metric filter.</p>
    pub filter_name: ::std::option::Option<::std::string::String>,
    /// <p>A filter pattern for extracting metric data out of ingested log events.</p>
    pub filter_pattern: ::std::option::Option<::std::string::String>,
    /// <p>A collection of information that defines how metric data gets emitted.</p>
    pub metric_transformations: ::std::option::Option<::std::vec::Vec<crate::types::MetricTransformation>>,
    /// <p>This parameter is valid only for log groups that have an active log transformer. For more information about log transformers, see <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutTransformer.html">PutTransformer</a>.</p>
    /// <p>If the log group uses either a log-group level or account-level transformer, and you specify <code>true</code>, the metric filter will be applied on the transformed version of the log events instead of the original ingested log events.</p>
    pub apply_on_transformed_logs: ::std::option::Option<bool>,
    /// <p>A filter expression that specifies which log events should be processed by this metric filter based on system fields such as source account and source region. Uses selection criteria syntax with operators like <code>=</code>, <code>!=</code>, <code>AND</code>, <code>OR</code>, <code>IN</code>, <code>NOT IN</code>. Example: <code>@aws.region = "us-east-1"</code> or <code>@aws.account IN \["123456789012", "987654321098"\]</code>. Maximum length: 2000 characters.</p>
    pub field_selection_criteria: ::std::option::Option<::std::string::String>,
    /// <p>A list of system fields to emit as additional dimensions in the generated metrics. Valid values are <code>@aws.account</code> and <code>@aws.region</code>. These dimensions help identify the source of centralized log data and count toward the total dimension limit for metric filters.</p>
    pub emit_system_field_dimensions: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl PutMetricFilterInput {
    /// <p>The name of the log group.</p>
    pub fn log_group_name(&self) -> ::std::option::Option<&str> {
        self.log_group_name.as_deref()
    }
    /// <p>A name for the metric filter.</p>
    pub fn filter_name(&self) -> ::std::option::Option<&str> {
        self.filter_name.as_deref()
    }
    /// <p>A filter pattern for extracting metric data out of ingested log events.</p>
    pub fn filter_pattern(&self) -> ::std::option::Option<&str> {
        self.filter_pattern.as_deref()
    }
    /// <p>A collection of information that defines how metric data gets emitted.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.metric_transformations.is_none()`.
    pub fn metric_transformations(&self) -> &[crate::types::MetricTransformation] {
        self.metric_transformations.as_deref().unwrap_or_default()
    }
    /// <p>This parameter is valid only for log groups that have an active log transformer. For more information about log transformers, see <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutTransformer.html">PutTransformer</a>.</p>
    /// <p>If the log group uses either a log-group level or account-level transformer, and you specify <code>true</code>, the metric filter will be applied on the transformed version of the log events instead of the original ingested log events.</p>
    pub fn apply_on_transformed_logs(&self) -> ::std::option::Option<bool> {
        self.apply_on_transformed_logs
    }
    /// <p>A filter expression that specifies which log events should be processed by this metric filter based on system fields such as source account and source region. Uses selection criteria syntax with operators like <code>=</code>, <code>!=</code>, <code>AND</code>, <code>OR</code>, <code>IN</code>, <code>NOT IN</code>. Example: <code>@aws.region = "us-east-1"</code> or <code>@aws.account IN \["123456789012", "987654321098"\]</code>. Maximum length: 2000 characters.</p>
    pub fn field_selection_criteria(&self) -> ::std::option::Option<&str> {
        self.field_selection_criteria.as_deref()
    }
    /// <p>A list of system fields to emit as additional dimensions in the generated metrics. Valid values are <code>@aws.account</code> and <code>@aws.region</code>. These dimensions help identify the source of centralized log data and count toward the total dimension limit for metric filters.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.emit_system_field_dimensions.is_none()`.
    pub fn emit_system_field_dimensions(&self) -> &[::std::string::String] {
        self.emit_system_field_dimensions.as_deref().unwrap_or_default()
    }
}
impl PutMetricFilterInput {
    /// Creates a new builder-style object to manufacture [`PutMetricFilterInput`](crate::operation::put_metric_filter::PutMetricFilterInput).
    pub fn builder() -> crate::operation::put_metric_filter::builders::PutMetricFilterInputBuilder {
        crate::operation::put_metric_filter::builders::PutMetricFilterInputBuilder::default()
    }
}

/// A builder for [`PutMetricFilterInput`](crate::operation::put_metric_filter::PutMetricFilterInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct PutMetricFilterInputBuilder {
    pub(crate) log_group_name: ::std::option::Option<::std::string::String>,
    pub(crate) filter_name: ::std::option::Option<::std::string::String>,
    pub(crate) filter_pattern: ::std::option::Option<::std::string::String>,
    pub(crate) metric_transformations: ::std::option::Option<::std::vec::Vec<crate::types::MetricTransformation>>,
    pub(crate) apply_on_transformed_logs: ::std::option::Option<bool>,
    pub(crate) field_selection_criteria: ::std::option::Option<::std::string::String>,
    pub(crate) emit_system_field_dimensions: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl PutMetricFilterInputBuilder {
    /// <p>The name of the log group.</p>
    /// This field is required.
    pub fn log_group_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.log_group_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the log group.</p>
    pub fn set_log_group_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.log_group_name = input;
        self
    }
    /// <p>The name of the log group.</p>
    pub fn get_log_group_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.log_group_name
    }
    /// <p>A name for the metric filter.</p>
    /// This field is required.
    pub fn filter_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.filter_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A name for the metric filter.</p>
    pub fn set_filter_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.filter_name = input;
        self
    }
    /// <p>A name for the metric filter.</p>
    pub fn get_filter_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.filter_name
    }
    /// <p>A filter pattern for extracting metric data out of ingested log events.</p>
    /// This field is required.
    pub fn filter_pattern(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.filter_pattern = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A filter pattern for extracting metric data out of ingested log events.</p>
    pub fn set_filter_pattern(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.filter_pattern = input;
        self
    }
    /// <p>A filter pattern for extracting metric data out of ingested log events.</p>
    pub fn get_filter_pattern(&self) -> &::std::option::Option<::std::string::String> {
        &self.filter_pattern
    }
    /// Appends an item to `metric_transformations`.
    ///
    /// To override the contents of this collection use [`set_metric_transformations`](Self::set_metric_transformations).
    ///
    /// <p>A collection of information that defines how metric data gets emitted.</p>
    pub fn metric_transformations(mut self, input: crate::types::MetricTransformation) -> Self {
        let mut v = self.metric_transformations.unwrap_or_default();
        v.push(input);
        self.metric_transformations = ::std::option::Option::Some(v);
        self
    }
    /// <p>A collection of information that defines how metric data gets emitted.</p>
    pub fn set_metric_transformations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::MetricTransformation>>) -> Self {
        self.metric_transformations = input;
        self
    }
    /// <p>A collection of information that defines how metric data gets emitted.</p>
    pub fn get_metric_transformations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MetricTransformation>> {
        &self.metric_transformations
    }
    /// <p>This parameter is valid only for log groups that have an active log transformer. For more information about log transformers, see <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutTransformer.html">PutTransformer</a>.</p>
    /// <p>If the log group uses either a log-group level or account-level transformer, and you specify <code>true</code>, the metric filter will be applied on the transformed version of the log events instead of the original ingested log events.</p>
    pub fn apply_on_transformed_logs(mut self, input: bool) -> Self {
        self.apply_on_transformed_logs = ::std::option::Option::Some(input);
        self
    }
    /// <p>This parameter is valid only for log groups that have an active log transformer. For more information about log transformers, see <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutTransformer.html">PutTransformer</a>.</p>
    /// <p>If the log group uses either a log-group level or account-level transformer, and you specify <code>true</code>, the metric filter will be applied on the transformed version of the log events instead of the original ingested log events.</p>
    pub fn set_apply_on_transformed_logs(mut self, input: ::std::option::Option<bool>) -> Self {
        self.apply_on_transformed_logs = input;
        self
    }
    /// <p>This parameter is valid only for log groups that have an active log transformer. For more information about log transformers, see <a href="https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutTransformer.html">PutTransformer</a>.</p>
    /// <p>If the log group uses either a log-group level or account-level transformer, and you specify <code>true</code>, the metric filter will be applied on the transformed version of the log events instead of the original ingested log events.</p>
    pub fn get_apply_on_transformed_logs(&self) -> &::std::option::Option<bool> {
        &self.apply_on_transformed_logs
    }
    /// <p>A filter expression that specifies which log events should be processed by this metric filter based on system fields such as source account and source region. Uses selection criteria syntax with operators like <code>=</code>, <code>!=</code>, <code>AND</code>, <code>OR</code>, <code>IN</code>, <code>NOT IN</code>. Example: <code>@aws.region = "us-east-1"</code> or <code>@aws.account IN \["123456789012", "987654321098"\]</code>. Maximum length: 2000 characters.</p>
    pub fn field_selection_criteria(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.field_selection_criteria = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A filter expression that specifies which log events should be processed by this metric filter based on system fields such as source account and source region. Uses selection criteria syntax with operators like <code>=</code>, <code>!=</code>, <code>AND</code>, <code>OR</code>, <code>IN</code>, <code>NOT IN</code>. Example: <code>@aws.region = "us-east-1"</code> or <code>@aws.account IN \["123456789012", "987654321098"\]</code>. Maximum length: 2000 characters.</p>
    pub fn set_field_selection_criteria(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.field_selection_criteria = input;
        self
    }
    /// <p>A filter expression that specifies which log events should be processed by this metric filter based on system fields such as source account and source region. Uses selection criteria syntax with operators like <code>=</code>, <code>!=</code>, <code>AND</code>, <code>OR</code>, <code>IN</code>, <code>NOT IN</code>. Example: <code>@aws.region = "us-east-1"</code> or <code>@aws.account IN \["123456789012", "987654321098"\]</code>. Maximum length: 2000 characters.</p>
    pub fn get_field_selection_criteria(&self) -> &::std::option::Option<::std::string::String> {
        &self.field_selection_criteria
    }
    /// Appends an item to `emit_system_field_dimensions`.
    ///
    /// To override the contents of this collection use [`set_emit_system_field_dimensions`](Self::set_emit_system_field_dimensions).
    ///
    /// <p>A list of system fields to emit as additional dimensions in the generated metrics. Valid values are <code>@aws.account</code> and <code>@aws.region</code>. These dimensions help identify the source of centralized log data and count toward the total dimension limit for metric filters.</p>
    pub fn emit_system_field_dimensions(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.emit_system_field_dimensions.unwrap_or_default();
        v.push(input.into());
        self.emit_system_field_dimensions = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of system fields to emit as additional dimensions in the generated metrics. Valid values are <code>@aws.account</code> and <code>@aws.region</code>. These dimensions help identify the source of centralized log data and count toward the total dimension limit for metric filters.</p>
    pub fn set_emit_system_field_dimensions(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.emit_system_field_dimensions = input;
        self
    }
    /// <p>A list of system fields to emit as additional dimensions in the generated metrics. Valid values are <code>@aws.account</code> and <code>@aws.region</code>. These dimensions help identify the source of centralized log data and count toward the total dimension limit for metric filters.</p>
    pub fn get_emit_system_field_dimensions(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.emit_system_field_dimensions
    }
    /// Consumes the builder and constructs a [`PutMetricFilterInput`](crate::operation::put_metric_filter::PutMetricFilterInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::put_metric_filter::PutMetricFilterInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::put_metric_filter::PutMetricFilterInput {
            log_group_name: self.log_group_name,
            filter_name: self.filter_name,
            filter_pattern: self.filter_pattern,
            metric_transformations: self.metric_transformations,
            apply_on_transformed_logs: self.apply_on_transformed_logs,
            field_selection_criteria: self.field_selection_criteria,
            emit_system_field_dimensions: self.emit_system_field_dimensions,
        })
    }
}
