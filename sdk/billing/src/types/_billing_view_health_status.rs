// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the health status of a billing view, including a status code and optional reasons for the status.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BillingViewHealthStatus {
    /// <p>The current health status code of the billing view.</p>
    pub status_code: ::std::option::Option<crate::types::BillingViewStatus>,
    /// <p>A list of reasons explaining the current health status, if applicable.</p>
    pub status_reasons: ::std::option::Option<::std::vec::Vec<crate::types::BillingViewStatusReason>>,
}
impl BillingViewHealthStatus {
    /// <p>The current health status code of the billing view.</p>
    pub fn status_code(&self) -> ::std::option::Option<&crate::types::BillingViewStatus> {
        self.status_code.as_ref()
    }
    /// <p>A list of reasons explaining the current health status, if applicable.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.status_reasons.is_none()`.
    pub fn status_reasons(&self) -> &[crate::types::BillingViewStatusReason] {
        self.status_reasons.as_deref().unwrap_or_default()
    }
}
impl BillingViewHealthStatus {
    /// Creates a new builder-style object to manufacture [`BillingViewHealthStatus`](crate::types::BillingViewHealthStatus).
    pub fn builder() -> crate::types::builders::BillingViewHealthStatusBuilder {
        crate::types::builders::BillingViewHealthStatusBuilder::default()
    }
}

/// A builder for [`BillingViewHealthStatus`](crate::types::BillingViewHealthStatus).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct BillingViewHealthStatusBuilder {
    pub(crate) status_code: ::std::option::Option<crate::types::BillingViewStatus>,
    pub(crate) status_reasons: ::std::option::Option<::std::vec::Vec<crate::types::BillingViewStatusReason>>,
}
impl BillingViewHealthStatusBuilder {
    /// <p>The current health status code of the billing view.</p>
    pub fn status_code(mut self, input: crate::types::BillingViewStatus) -> Self {
        self.status_code = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current health status code of the billing view.</p>
    pub fn set_status_code(mut self, input: ::std::option::Option<crate::types::BillingViewStatus>) -> Self {
        self.status_code = input;
        self
    }
    /// <p>The current health status code of the billing view.</p>
    pub fn get_status_code(&self) -> &::std::option::Option<crate::types::BillingViewStatus> {
        &self.status_code
    }
    /// Appends an item to `status_reasons`.
    ///
    /// To override the contents of this collection use [`set_status_reasons`](Self::set_status_reasons).
    ///
    /// <p>A list of reasons explaining the current health status, if applicable.</p>
    pub fn status_reasons(mut self, input: crate::types::BillingViewStatusReason) -> Self {
        let mut v = self.status_reasons.unwrap_or_default();
        v.push(input);
        self.status_reasons = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of reasons explaining the current health status, if applicable.</p>
    pub fn set_status_reasons(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::BillingViewStatusReason>>) -> Self {
        self.status_reasons = input;
        self
    }
    /// <p>A list of reasons explaining the current health status, if applicable.</p>
    pub fn get_status_reasons(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::BillingViewStatusReason>> {
        &self.status_reasons
    }
    /// Consumes the builder and constructs a [`BillingViewHealthStatus`](crate::types::BillingViewHealthStatus).
    pub fn build(self) -> crate::types::BillingViewHealthStatus {
        crate::types::BillingViewHealthStatus {
            status_code: self.status_code,
            status_reasons: self.status_reasons,
        }
    }
}
