// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies a time range with inclusive begin and end dates.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TimeRange {
    /// <p>The inclusive start date of the time range.</p>
    pub begin_date_inclusive: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The inclusive end date of the time range.</p>
    pub end_date_inclusive: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl TimeRange {
    /// <p>The inclusive start date of the time range.</p>
    pub fn begin_date_inclusive(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.begin_date_inclusive.as_ref()
    }
    /// <p>The inclusive end date of the time range.</p>
    pub fn end_date_inclusive(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.end_date_inclusive.as_ref()
    }
}
impl TimeRange {
    /// Creates a new builder-style object to manufacture [`TimeRange`](crate::types::TimeRange).
    pub fn builder() -> crate::types::builders::TimeRangeBuilder {
        crate::types::builders::TimeRangeBuilder::default()
    }
}

/// A builder for [`TimeRange`](crate::types::TimeRange).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct TimeRangeBuilder {
    pub(crate) begin_date_inclusive: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) end_date_inclusive: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl TimeRangeBuilder {
    /// <p>The inclusive start date of the time range.</p>
    pub fn begin_date_inclusive(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.begin_date_inclusive = ::std::option::Option::Some(input);
        self
    }
    /// <p>The inclusive start date of the time range.</p>
    pub fn set_begin_date_inclusive(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.begin_date_inclusive = input;
        self
    }
    /// <p>The inclusive start date of the time range.</p>
    pub fn get_begin_date_inclusive(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.begin_date_inclusive
    }
    /// <p>The inclusive end date of the time range.</p>
    pub fn end_date_inclusive(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.end_date_inclusive = ::std::option::Option::Some(input);
        self
    }
    /// <p>The inclusive end date of the time range.</p>
    pub fn set_end_date_inclusive(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.end_date_inclusive = input;
        self
    }
    /// <p>The inclusive end date of the time range.</p>
    pub fn get_end_date_inclusive(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.end_date_inclusive
    }
    /// Consumes the builder and constructs a [`TimeRange`](crate::types::TimeRange).
    pub fn build(self) -> crate::types::TimeRange {
        crate::types::TimeRange {
            begin_date_inclusive: self.begin_date_inclusive,
            end_date_inclusive: self.end_date_inclusive,
        }
    }
}
