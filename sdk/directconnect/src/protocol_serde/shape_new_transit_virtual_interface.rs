// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_new_transit_virtual_interface(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::NewTransitVirtualInterface,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.virtual_interface_name {
        object.key("virtualInterfaceName").string(var_1.as_str());
    }
    if input.vlan != 0 {
        object.key("vlan").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((input.vlan).into()),
        );
    }
    if input.asn != 0 {
        object.key("asn").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((input.asn).into()),
        );
    }
    if let Some(var_2) = &input.asn_long {
        object.key("asnLong").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_2).into()),
        );
    }
    if let Some(var_3) = &input.mtu {
        object.key("mtu").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_3).into()),
        );
    }
    if let Some(var_4) = &input.auth_key {
        object.key("authKey").string(var_4.as_str());
    }
    if let Some(var_5) = &input.amazon_address {
        object.key("amazonAddress").string(var_5.as_str());
    }
    if let Some(var_6) = &input.customer_address {
        object.key("customerAddress").string(var_6.as_str());
    }
    if let Some(var_7) = &input.address_family {
        object.key("addressFamily").string(var_7.as_str());
    }
    if let Some(var_8) = &input.direct_connect_gateway_id {
        object.key("directConnectGatewayId").string(var_8.as_str());
    }
    if let Some(var_9) = &input.tags {
        let mut array_10 = object.key("tags").start_array();
        for item_11 in var_9 {
            {
                #[allow(unused_mut)]
                let mut object_12 = array_10.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_12, item_11)?;
                object_12.finish();
            }
        }
        array_10.finish();
    }
    if let Some(var_13) = &input.enable_site_link {
        object.key("enableSiteLink").boolean(*var_13);
    }
    Ok(())
}
