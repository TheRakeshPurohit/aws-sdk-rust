// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The Batch unique identifier.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ServiceResourceId {
    /// <p>The name of the resource identifier.</p>
    pub name: ::std::option::Option<crate::types::ServiceResourceIdName>,
    /// <p>The value of the resource identifier.</p>
    pub value: ::std::option::Option<::std::string::String>,
}
impl ServiceResourceId {
    /// <p>The name of the resource identifier.</p>
    pub fn name(&self) -> ::std::option::Option<&crate::types::ServiceResourceIdName> {
        self.name.as_ref()
    }
    /// <p>The value of the resource identifier.</p>
    pub fn value(&self) -> ::std::option::Option<&str> {
        self.value.as_deref()
    }
}
impl ServiceResourceId {
    /// Creates a new builder-style object to manufacture [`ServiceResourceId`](crate::types::ServiceResourceId).
    pub fn builder() -> crate::types::builders::ServiceResourceIdBuilder {
        crate::types::builders::ServiceResourceIdBuilder::default()
    }
}

/// A builder for [`ServiceResourceId`](crate::types::ServiceResourceId).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ServiceResourceIdBuilder {
    pub(crate) name: ::std::option::Option<crate::types::ServiceResourceIdName>,
    pub(crate) value: ::std::option::Option<::std::string::String>,
}
impl ServiceResourceIdBuilder {
    /// <p>The name of the resource identifier.</p>
    /// This field is required.
    pub fn name(mut self, input: crate::types::ServiceResourceIdName) -> Self {
        self.name = ::std::option::Option::Some(input);
        self
    }
    /// <p>The name of the resource identifier.</p>
    pub fn set_name(mut self, input: ::std::option::Option<crate::types::ServiceResourceIdName>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the resource identifier.</p>
    pub fn get_name(&self) -> &::std::option::Option<crate::types::ServiceResourceIdName> {
        &self.name
    }
    /// <p>The value of the resource identifier.</p>
    /// This field is required.
    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The value of the resource identifier.</p>
    pub fn set_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// <p>The value of the resource identifier.</p>
    pub fn get_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.value
    }
    /// Consumes the builder and constructs a [`ServiceResourceId`](crate::types::ServiceResourceId).
    pub fn build(self) -> crate::types::ServiceResourceId {
        crate::types::ServiceResourceId {
            name: self.name,
            value: self.value,
        }
    }
}
