// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Summary information about a service job.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ServiceJobSummary {
    /// <p>Information about the latest attempt for the service job.</p>
    pub latest_attempt: ::std::option::Option<crate::types::LatestServiceJobAttempt>,
    /// <p>The Unix timestamp (in milliseconds) for when the service job was created.</p>
    pub created_at: ::std::option::Option<i64>,
    /// <p>The Amazon Resource Name (ARN) of the service job.</p>
    pub job_arn: ::std::option::Option<::std::string::String>,
    /// <p>The job ID for the service job.</p>
    pub job_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the service job.</p>
    pub job_name: ::std::option::Option<::std::string::String>,
    /// <p>The type of service job. For SageMaker Training jobs, this value is <code>SAGEMAKER_TRAINING</code>.</p>
    pub service_job_type: ::std::option::Option<crate::types::ServiceJobType>,
    /// <p>The share identifier for the job.</p>
    pub share_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The current status of the service job.</p>
    pub status: ::std::option::Option<crate::types::ServiceJobStatus>,
    /// <p>A short string to provide more details on the current status of the service job.</p>
    pub status_reason: ::std::option::Option<::std::string::String>,
    /// <p>The Unix timestamp (in milliseconds) for when the service job was started.</p>
    pub started_at: ::std::option::Option<i64>,
    /// <p>The Unix timestamp (in milliseconds) for when the service job stopped running.</p>
    pub stopped_at: ::std::option::Option<i64>,
}
impl ServiceJobSummary {
    /// <p>Information about the latest attempt for the service job.</p>
    pub fn latest_attempt(&self) -> ::std::option::Option<&crate::types::LatestServiceJobAttempt> {
        self.latest_attempt.as_ref()
    }
    /// <p>The Unix timestamp (in milliseconds) for when the service job was created.</p>
    pub fn created_at(&self) -> ::std::option::Option<i64> {
        self.created_at
    }
    /// <p>The Amazon Resource Name (ARN) of the service job.</p>
    pub fn job_arn(&self) -> ::std::option::Option<&str> {
        self.job_arn.as_deref()
    }
    /// <p>The job ID for the service job.</p>
    pub fn job_id(&self) -> ::std::option::Option<&str> {
        self.job_id.as_deref()
    }
    /// <p>The name of the service job.</p>
    pub fn job_name(&self) -> ::std::option::Option<&str> {
        self.job_name.as_deref()
    }
    /// <p>The type of service job. For SageMaker Training jobs, this value is <code>SAGEMAKER_TRAINING</code>.</p>
    pub fn service_job_type(&self) -> ::std::option::Option<&crate::types::ServiceJobType> {
        self.service_job_type.as_ref()
    }
    /// <p>The share identifier for the job.</p>
    pub fn share_identifier(&self) -> ::std::option::Option<&str> {
        self.share_identifier.as_deref()
    }
    /// <p>The current status of the service job.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::ServiceJobStatus> {
        self.status.as_ref()
    }
    /// <p>A short string to provide more details on the current status of the service job.</p>
    pub fn status_reason(&self) -> ::std::option::Option<&str> {
        self.status_reason.as_deref()
    }
    /// <p>The Unix timestamp (in milliseconds) for when the service job was started.</p>
    pub fn started_at(&self) -> ::std::option::Option<i64> {
        self.started_at
    }
    /// <p>The Unix timestamp (in milliseconds) for when the service job stopped running.</p>
    pub fn stopped_at(&self) -> ::std::option::Option<i64> {
        self.stopped_at
    }
}
impl ServiceJobSummary {
    /// Creates a new builder-style object to manufacture [`ServiceJobSummary`](crate::types::ServiceJobSummary).
    pub fn builder() -> crate::types::builders::ServiceJobSummaryBuilder {
        crate::types::builders::ServiceJobSummaryBuilder::default()
    }
}

/// A builder for [`ServiceJobSummary`](crate::types::ServiceJobSummary).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ServiceJobSummaryBuilder {
    pub(crate) latest_attempt: ::std::option::Option<crate::types::LatestServiceJobAttempt>,
    pub(crate) created_at: ::std::option::Option<i64>,
    pub(crate) job_arn: ::std::option::Option<::std::string::String>,
    pub(crate) job_id: ::std::option::Option<::std::string::String>,
    pub(crate) job_name: ::std::option::Option<::std::string::String>,
    pub(crate) service_job_type: ::std::option::Option<crate::types::ServiceJobType>,
    pub(crate) share_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::ServiceJobStatus>,
    pub(crate) status_reason: ::std::option::Option<::std::string::String>,
    pub(crate) started_at: ::std::option::Option<i64>,
    pub(crate) stopped_at: ::std::option::Option<i64>,
}
impl ServiceJobSummaryBuilder {
    /// <p>Information about the latest attempt for the service job.</p>
    pub fn latest_attempt(mut self, input: crate::types::LatestServiceJobAttempt) -> Self {
        self.latest_attempt = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about the latest attempt for the service job.</p>
    pub fn set_latest_attempt(mut self, input: ::std::option::Option<crate::types::LatestServiceJobAttempt>) -> Self {
        self.latest_attempt = input;
        self
    }
    /// <p>Information about the latest attempt for the service job.</p>
    pub fn get_latest_attempt(&self) -> &::std::option::Option<crate::types::LatestServiceJobAttempt> {
        &self.latest_attempt
    }
    /// <p>The Unix timestamp (in milliseconds) for when the service job was created.</p>
    pub fn created_at(mut self, input: i64) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Unix timestamp (in milliseconds) for when the service job was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<i64>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The Unix timestamp (in milliseconds) for when the service job was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<i64> {
        &self.created_at
    }
    /// <p>The Amazon Resource Name (ARN) of the service job.</p>
    pub fn job_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.job_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the service job.</p>
    pub fn set_job_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.job_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the service job.</p>
    pub fn get_job_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.job_arn
    }
    /// <p>The job ID for the service job.</p>
    /// This field is required.
    pub fn job_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.job_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The job ID for the service job.</p>
    pub fn set_job_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.job_id = input;
        self
    }
    /// <p>The job ID for the service job.</p>
    pub fn get_job_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.job_id
    }
    /// <p>The name of the service job.</p>
    /// This field is required.
    pub fn job_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.job_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the service job.</p>
    pub fn set_job_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.job_name = input;
        self
    }
    /// <p>The name of the service job.</p>
    pub fn get_job_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.job_name
    }
    /// <p>The type of service job. For SageMaker Training jobs, this value is <code>SAGEMAKER_TRAINING</code>.</p>
    /// This field is required.
    pub fn service_job_type(mut self, input: crate::types::ServiceJobType) -> Self {
        self.service_job_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of service job. For SageMaker Training jobs, this value is <code>SAGEMAKER_TRAINING</code>.</p>
    pub fn set_service_job_type(mut self, input: ::std::option::Option<crate::types::ServiceJobType>) -> Self {
        self.service_job_type = input;
        self
    }
    /// <p>The type of service job. For SageMaker Training jobs, this value is <code>SAGEMAKER_TRAINING</code>.</p>
    pub fn get_service_job_type(&self) -> &::std::option::Option<crate::types::ServiceJobType> {
        &self.service_job_type
    }
    /// <p>The share identifier for the job.</p>
    pub fn share_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.share_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The share identifier for the job.</p>
    pub fn set_share_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.share_identifier = input;
        self
    }
    /// <p>The share identifier for the job.</p>
    pub fn get_share_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.share_identifier
    }
    /// <p>The current status of the service job.</p>
    pub fn status(mut self, input: crate::types::ServiceJobStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the service job.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ServiceJobStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status of the service job.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ServiceJobStatus> {
        &self.status
    }
    /// <p>A short string to provide more details on the current status of the service job.</p>
    pub fn status_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A short string to provide more details on the current status of the service job.</p>
    pub fn set_status_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_reason = input;
        self
    }
    /// <p>A short string to provide more details on the current status of the service job.</p>
    pub fn get_status_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_reason
    }
    /// <p>The Unix timestamp (in milliseconds) for when the service job was started.</p>
    pub fn started_at(mut self, input: i64) -> Self {
        self.started_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Unix timestamp (in milliseconds) for when the service job was started.</p>
    pub fn set_started_at(mut self, input: ::std::option::Option<i64>) -> Self {
        self.started_at = input;
        self
    }
    /// <p>The Unix timestamp (in milliseconds) for when the service job was started.</p>
    pub fn get_started_at(&self) -> &::std::option::Option<i64> {
        &self.started_at
    }
    /// <p>The Unix timestamp (in milliseconds) for when the service job stopped running.</p>
    pub fn stopped_at(mut self, input: i64) -> Self {
        self.stopped_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Unix timestamp (in milliseconds) for when the service job stopped running.</p>
    pub fn set_stopped_at(mut self, input: ::std::option::Option<i64>) -> Self {
        self.stopped_at = input;
        self
    }
    /// <p>The Unix timestamp (in milliseconds) for when the service job stopped running.</p>
    pub fn get_stopped_at(&self) -> &::std::option::Option<i64> {
        &self.stopped_at
    }
    /// Consumes the builder and constructs a [`ServiceJobSummary`](crate::types::ServiceJobSummary).
    pub fn build(self) -> crate::types::ServiceJobSummary {
        crate::types::ServiceJobSummary {
            latest_attempt: self.latest_attempt,
            created_at: self.created_at,
            job_arn: self.job_arn,
            job_id: self.job_id,
            job_name: self.job_name,
            service_job_type: self.service_job_type,
            share_identifier: self.share_identifier,
            status: self.status,
            status_reason: self.status_reason,
            started_at: self.started_at,
            stopped_at: self.stopped_at,
        }
    }
}
