// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The retry strategy for service jobs. This defines how many times to retry a failed service job and under what conditions. For more information, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/service-job-retries.html">Service job retry strategies</a> in the <i>Batch User Guide</i>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ServiceJobRetryStrategy {
    /// <p>The number of times to move a service job to <code>RUNNABLE</code> status. You can specify between 1 and 10 attempts.</p>
    pub attempts: ::std::option::Option<i32>,
    /// <p>Array of <code>ServiceJobEvaluateOnExit</code> objects that specify conditions under which the service job should be retried or failed.</p>
    pub evaluate_on_exit: ::std::option::Option<::std::vec::Vec<crate::types::ServiceJobEvaluateOnExit>>,
}
impl ServiceJobRetryStrategy {
    /// <p>The number of times to move a service job to <code>RUNNABLE</code> status. You can specify between 1 and 10 attempts.</p>
    pub fn attempts(&self) -> ::std::option::Option<i32> {
        self.attempts
    }
    /// <p>Array of <code>ServiceJobEvaluateOnExit</code> objects that specify conditions under which the service job should be retried or failed.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.evaluate_on_exit.is_none()`.
    pub fn evaluate_on_exit(&self) -> &[crate::types::ServiceJobEvaluateOnExit] {
        self.evaluate_on_exit.as_deref().unwrap_or_default()
    }
}
impl ServiceJobRetryStrategy {
    /// Creates a new builder-style object to manufacture [`ServiceJobRetryStrategy`](crate::types::ServiceJobRetryStrategy).
    pub fn builder() -> crate::types::builders::ServiceJobRetryStrategyBuilder {
        crate::types::builders::ServiceJobRetryStrategyBuilder::default()
    }
}

/// A builder for [`ServiceJobRetryStrategy`](crate::types::ServiceJobRetryStrategy).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ServiceJobRetryStrategyBuilder {
    pub(crate) attempts: ::std::option::Option<i32>,
    pub(crate) evaluate_on_exit: ::std::option::Option<::std::vec::Vec<crate::types::ServiceJobEvaluateOnExit>>,
}
impl ServiceJobRetryStrategyBuilder {
    /// <p>The number of times to move a service job to <code>RUNNABLE</code> status. You can specify between 1 and 10 attempts.</p>
    /// This field is required.
    pub fn attempts(mut self, input: i32) -> Self {
        self.attempts = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of times to move a service job to <code>RUNNABLE</code> status. You can specify between 1 and 10 attempts.</p>
    pub fn set_attempts(mut self, input: ::std::option::Option<i32>) -> Self {
        self.attempts = input;
        self
    }
    /// <p>The number of times to move a service job to <code>RUNNABLE</code> status. You can specify between 1 and 10 attempts.</p>
    pub fn get_attempts(&self) -> &::std::option::Option<i32> {
        &self.attempts
    }
    /// Appends an item to `evaluate_on_exit`.
    ///
    /// To override the contents of this collection use [`set_evaluate_on_exit`](Self::set_evaluate_on_exit).
    ///
    /// <p>Array of <code>ServiceJobEvaluateOnExit</code> objects that specify conditions under which the service job should be retried or failed.</p>
    pub fn evaluate_on_exit(mut self, input: crate::types::ServiceJobEvaluateOnExit) -> Self {
        let mut v = self.evaluate_on_exit.unwrap_or_default();
        v.push(input);
        self.evaluate_on_exit = ::std::option::Option::Some(v);
        self
    }
    /// <p>Array of <code>ServiceJobEvaluateOnExit</code> objects that specify conditions under which the service job should be retried or failed.</p>
    pub fn set_evaluate_on_exit(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ServiceJobEvaluateOnExit>>) -> Self {
        self.evaluate_on_exit = input;
        self
    }
    /// <p>Array of <code>ServiceJobEvaluateOnExit</code> objects that specify conditions under which the service job should be retried or failed.</p>
    pub fn get_evaluate_on_exit(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ServiceJobEvaluateOnExit>> {
        &self.evaluate_on_exit
    }
    /// Consumes the builder and constructs a [`ServiceJobRetryStrategy`](crate::types::ServiceJobRetryStrategy).
    pub fn build(self) -> crate::types::ServiceJobRetryStrategy {
        crate::types::ServiceJobRetryStrategy {
            attempts: self.attempts,
            evaluate_on_exit: self.evaluate_on_exit,
        }
    }
}
