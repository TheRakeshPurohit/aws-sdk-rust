// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies conditions for when to exit or retry a service job based on the exit status or status reason.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ServiceJobEvaluateOnExit {
    /// <p>The action to take if the service job exits with the specified condition. Valid values are <code>RETRY</code> and <code>EXIT</code>.</p>
    pub action: ::std::option::Option<crate::types::ServiceJobRetryAction>,
    /// <p>Contains a glob pattern to match against the StatusReason returned for a job. The pattern can contain up to 512 characters and can contain all printable characters. It can optionally end with an asterisk (*) so that only the start of the string needs to be an exact match.</p>
    pub on_status_reason: ::std::option::Option<::std::string::String>,
}
impl ServiceJobEvaluateOnExit {
    /// <p>The action to take if the service job exits with the specified condition. Valid values are <code>RETRY</code> and <code>EXIT</code>.</p>
    pub fn action(&self) -> ::std::option::Option<&crate::types::ServiceJobRetryAction> {
        self.action.as_ref()
    }
    /// <p>Contains a glob pattern to match against the StatusReason returned for a job. The pattern can contain up to 512 characters and can contain all printable characters. It can optionally end with an asterisk (*) so that only the start of the string needs to be an exact match.</p>
    pub fn on_status_reason(&self) -> ::std::option::Option<&str> {
        self.on_status_reason.as_deref()
    }
}
impl ServiceJobEvaluateOnExit {
    /// Creates a new builder-style object to manufacture [`ServiceJobEvaluateOnExit`](crate::types::ServiceJobEvaluateOnExit).
    pub fn builder() -> crate::types::builders::ServiceJobEvaluateOnExitBuilder {
        crate::types::builders::ServiceJobEvaluateOnExitBuilder::default()
    }
}

/// A builder for [`ServiceJobEvaluateOnExit`](crate::types::ServiceJobEvaluateOnExit).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ServiceJobEvaluateOnExitBuilder {
    pub(crate) action: ::std::option::Option<crate::types::ServiceJobRetryAction>,
    pub(crate) on_status_reason: ::std::option::Option<::std::string::String>,
}
impl ServiceJobEvaluateOnExitBuilder {
    /// <p>The action to take if the service job exits with the specified condition. Valid values are <code>RETRY</code> and <code>EXIT</code>.</p>
    pub fn action(mut self, input: crate::types::ServiceJobRetryAction) -> Self {
        self.action = ::std::option::Option::Some(input);
        self
    }
    /// <p>The action to take if the service job exits with the specified condition. Valid values are <code>RETRY</code> and <code>EXIT</code>.</p>
    pub fn set_action(mut self, input: ::std::option::Option<crate::types::ServiceJobRetryAction>) -> Self {
        self.action = input;
        self
    }
    /// <p>The action to take if the service job exits with the specified condition. Valid values are <code>RETRY</code> and <code>EXIT</code>.</p>
    pub fn get_action(&self) -> &::std::option::Option<crate::types::ServiceJobRetryAction> {
        &self.action
    }
    /// <p>Contains a glob pattern to match against the StatusReason returned for a job. The pattern can contain up to 512 characters and can contain all printable characters. It can optionally end with an asterisk (*) so that only the start of the string needs to be an exact match.</p>
    pub fn on_status_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.on_status_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Contains a glob pattern to match against the StatusReason returned for a job. The pattern can contain up to 512 characters and can contain all printable characters. It can optionally end with an asterisk (*) so that only the start of the string needs to be an exact match.</p>
    pub fn set_on_status_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.on_status_reason = input;
        self
    }
    /// <p>Contains a glob pattern to match against the StatusReason returned for a job. The pattern can contain up to 512 characters and can contain all printable characters. It can optionally end with an asterisk (*) so that only the start of the string needs to be an exact match.</p>
    pub fn get_on_status_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.on_status_reason
    }
    /// Consumes the builder and constructs a [`ServiceJobEvaluateOnExit`](crate::types::ServiceJobEvaluateOnExit).
    pub fn build(self) -> crate::types::ServiceJobEvaluateOnExit {
        crate::types::ServiceJobEvaluateOnExit {
            action: self.action,
            on_status_reason: self.on_status_reason,
        }
    }
}
