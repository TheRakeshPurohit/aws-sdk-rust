// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`SubmitServiceJob`](crate::operation::submit_service_job::builders::SubmitServiceJobFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`job_name(impl Into<String>)`](crate::operation::submit_service_job::builders::SubmitServiceJobFluentBuilder::job_name) / [`set_job_name(Option<String>)`](crate::operation::submit_service_job::builders::SubmitServiceJobFluentBuilder::set_job_name):<br>required: **true**<br><p>The name of the service job. It can be up to 128 characters long. It can contain uppercase and lowercase letters, numbers, hyphens (-), and underscores (_).</p><br>
    ///   - [`job_queue(impl Into<String>)`](crate::operation::submit_service_job::builders::SubmitServiceJobFluentBuilder::job_queue) / [`set_job_queue(Option<String>)`](crate::operation::submit_service_job::builders::SubmitServiceJobFluentBuilder::set_job_queue):<br>required: **true**<br><p>The job queue into which the service job is submitted. You can specify either the name or the ARN of the queue. The job queue must have the type <code>SAGEMAKER_TRAINING</code>.</p><br>
    ///   - [`retry_strategy(ServiceJobRetryStrategy)`](crate::operation::submit_service_job::builders::SubmitServiceJobFluentBuilder::retry_strategy) / [`set_retry_strategy(Option<ServiceJobRetryStrategy>)`](crate::operation::submit_service_job::builders::SubmitServiceJobFluentBuilder::set_retry_strategy):<br>required: **false**<br><p>The retry strategy to use for failed service jobs that are submitted with this service job request.</p><br>
    ///   - [`scheduling_priority(i32)`](crate::operation::submit_service_job::builders::SubmitServiceJobFluentBuilder::scheduling_priority) / [`set_scheduling_priority(Option<i32>)`](crate::operation::submit_service_job::builders::SubmitServiceJobFluentBuilder::set_scheduling_priority):<br>required: **false**<br><p>The scheduling priority of the service job. Valid values are integers between 0 and 9999.</p><br>
    ///   - [`service_request_payload(impl Into<String>)`](crate::operation::submit_service_job::builders::SubmitServiceJobFluentBuilder::service_request_payload) / [`set_service_request_payload(Option<String>)`](crate::operation::submit_service_job::builders::SubmitServiceJobFluentBuilder::set_service_request_payload):<br>required: **true**<br><p>The request, in JSON, for the service that the SubmitServiceJob operation is queueing.</p><br>
    ///   - [`service_job_type(ServiceJobType)`](crate::operation::submit_service_job::builders::SubmitServiceJobFluentBuilder::service_job_type) / [`set_service_job_type(Option<ServiceJobType>)`](crate::operation::submit_service_job::builders::SubmitServiceJobFluentBuilder::set_service_job_type):<br>required: **true**<br><p>The type of service job. For SageMaker Training jobs, specify <code>SAGEMAKER_TRAINING</code>.</p><br>
    ///   - [`share_identifier(impl Into<String>)`](crate::operation::submit_service_job::builders::SubmitServiceJobFluentBuilder::share_identifier) / [`set_share_identifier(Option<String>)`](crate::operation::submit_service_job::builders::SubmitServiceJobFluentBuilder::set_share_identifier):<br>required: **false**<br><p>The share identifier for the service job. Don't specify this parameter if the job queue doesn't have a fair- share scheduling policy. If the job queue has a fair-share scheduling policy, then this parameter must be specified.</p><br>
    ///   - [`timeout_config(ServiceJobTimeout)`](crate::operation::submit_service_job::builders::SubmitServiceJobFluentBuilder::timeout_config) / [`set_timeout_config(Option<ServiceJobTimeout>)`](crate::operation::submit_service_job::builders::SubmitServiceJobFluentBuilder::set_timeout_config):<br>required: **false**<br><p>The timeout configuration for the service job. If none is specified, Batch defers to the default timeout of the underlying service handling the job.</p><br>
    ///   - [`tags(impl Into<String>, impl Into<String>)`](crate::operation::submit_service_job::builders::SubmitServiceJobFluentBuilder::tags) / [`set_tags(Option<HashMap::<String, String>>)`](crate::operation::submit_service_job::builders::SubmitServiceJobFluentBuilder::set_tags):<br>required: **false**<br><p>The tags that you apply to the service job request. Each tag consists of a key and an optional value. For more information, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/using-tags.html">Tagging your Batch resources</a>.</p><br>
    ///   - [`client_token(impl Into<String>)`](crate::operation::submit_service_job::builders::SubmitServiceJobFluentBuilder::client_token) / [`set_client_token(Option<String>)`](crate::operation::submit_service_job::builders::SubmitServiceJobFluentBuilder::set_client_token):<br>required: **false**<br><p>A unique identifier for the request. This token is used to ensure idempotency of requests. If this parameter is specified and two submit requests with identical payloads and <code>clientToken</code>s are received, these requests are considered the same request and the second request is rejected.</p><br>
    /// - On success, responds with [`SubmitServiceJobOutput`](crate::operation::submit_service_job::SubmitServiceJobOutput) with field(s):
    ///   - [`job_arn(Option<String>)`](crate::operation::submit_service_job::SubmitServiceJobOutput::job_arn): <p>The Amazon Resource Name (ARN) for the service job.</p>
    ///   - [`job_name(Option<String>)`](crate::operation::submit_service_job::SubmitServiceJobOutput::job_name): <p>The name of the service job.</p>
    ///   - [`job_id(Option<String>)`](crate::operation::submit_service_job::SubmitServiceJobOutput::job_id): <p>The unique identifier for the service job.</p>
    /// - On failure, responds with [`SdkError<SubmitServiceJobError>`](crate::operation::submit_service_job::SubmitServiceJobError)
    pub fn submit_service_job(&self) -> crate::operation::submit_service_job::builders::SubmitServiceJobFluentBuilder {
        crate::operation::submit_service_job::builders::SubmitServiceJobFluentBuilder::new(self.handle.clone())
    }
}
