// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_submit_service_job_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::submit_service_job::SubmitServiceJobInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.client_token {
        object.key("clientToken").string(var_1.as_str());
    }
    if let Some(var_2) = &input.job_name {
        object.key("jobName").string(var_2.as_str());
    }
    if let Some(var_3) = &input.job_queue {
        object.key("jobQueue").string(var_3.as_str());
    }
    if let Some(var_4) = &input.retry_strategy {
        #[allow(unused_mut)]
        let mut object_5 = object.key("retryStrategy").start_object();
        crate::protocol_serde::shape_service_job_retry_strategy::ser_service_job_retry_strategy(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.scheduling_priority {
        object.key("schedulingPriority").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_6).into()),
        );
    }
    if let Some(var_7) = &input.service_job_type {
        object.key("serviceJobType").string(var_7.as_str());
    }
    if let Some(var_8) = &input.service_request_payload {
        object.key("serviceRequestPayload").string(var_8.as_str());
    }
    if let Some(var_9) = &input.share_identifier {
        object.key("shareIdentifier").string(var_9.as_str());
    }
    if let Some(var_10) = &input.tags {
        #[allow(unused_mut)]
        let mut object_11 = object.key("tags").start_object();
        for (key_12, value_13) in var_10 {
            {
                object_11.key(key_12.as_str()).string(value_13.as_str());
            }
        }
        object_11.finish();
    }
    if let Some(var_14) = &input.timeout_config {
        #[allow(unused_mut)]
        let mut object_15 = object.key("timeoutConfig").start_object();
        crate::protocol_serde::shape_service_job_timeout::ser_service_job_timeout(&mut object_15, var_14)?;
        object_15.finish();
    }
    Ok(())
}
