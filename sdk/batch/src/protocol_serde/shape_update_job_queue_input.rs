// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_job_queue_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_job_queue::UpdateJobQueueInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.compute_environment_order {
        let mut array_2 = object.key("computeEnvironmentOrder").start_array();
        for item_3 in var_1 {
            {
                #[allow(unused_mut)]
                let mut object_4 = array_2.value().start_object();
                crate::protocol_serde::shape_compute_environment_order::ser_compute_environment_order(&mut object_4, item_3)?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    if let Some(var_5) = &input.job_queue {
        object.key("jobQueue").string(var_5.as_str());
    }
    if let Some(var_6) = &input.job_state_time_limit_actions {
        let mut array_7 = object.key("jobStateTimeLimitActions").start_array();
        for item_8 in var_6 {
            {
                #[allow(unused_mut)]
                let mut object_9 = array_7.value().start_object();
                crate::protocol_serde::shape_job_state_time_limit_action::ser_job_state_time_limit_action(&mut object_9, item_8)?;
                object_9.finish();
            }
        }
        array_7.finish();
    }
    if let Some(var_10) = &input.priority {
        object.key("priority").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_10).into()),
        );
    }
    if let Some(var_11) = &input.scheduling_policy_arn {
        object.key("schedulingPolicyArn").string(var_11.as_str());
    }
    if let Some(var_12) = &input.service_environment_order {
        let mut array_13 = object.key("serviceEnvironmentOrder").start_array();
        for item_14 in var_12 {
            {
                #[allow(unused_mut)]
                let mut object_15 = array_13.value().start_object();
                crate::protocol_serde::shape_service_environment_order::ser_service_environment_order(&mut object_15, item_14)?;
                object_15.finish();
            }
        }
        array_13.finish();
    }
    if let Some(var_16) = &input.state {
        object.key("state").string(var_16.as_str());
    }
    Ok(())
}
