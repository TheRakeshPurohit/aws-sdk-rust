// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeServiceJobOutput {
    /// <p>A list of job attempts associated with the service job.</p>
    pub attempts: ::std::option::Option<::std::vec::Vec<crate::types::ServiceJobAttemptDetail>>,
    /// <p>The Unix timestamp (in milliseconds) for when the service job was created.</p>
    pub created_at: ::std::option::Option<i64>,
    /// <p>Indicates whether the service job has been terminated.</p>
    pub is_terminated: ::std::option::Option<bool>,
    /// <p>The Amazon Resource Name (ARN) of the service job.</p>
    pub job_arn: ::std::option::Option<::std::string::String>,
    /// <p>The job ID for the service job.</p>
    pub job_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the service job.</p>
    pub job_name: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the job queue that the service job is associated with.</p>
    pub job_queue: ::std::option::Option<::std::string::String>,
    /// <p>The latest attempt associated with the service job.</p>
    pub latest_attempt: ::std::option::Option<crate::types::LatestServiceJobAttempt>,
    /// <p>The retry strategy to use for failed service jobs that are submitted with this service job.</p>
    pub retry_strategy: ::std::option::Option<crate::types::ServiceJobRetryStrategy>,
    /// <p>The scheduling priority of the service job.</p>
    pub scheduling_priority: ::std::option::Option<i32>,
    /// <p>The request, in JSON, for the service that the <code>SubmitServiceJob</code> operation is queueing.</p>
    pub service_request_payload: ::std::option::Option<::std::string::String>,
    /// <p>The type of service job. For SageMaker Training jobs, this value is <code>SAGEMAKER_TRAINING</code>.</p>
    pub service_job_type: ::std::option::Option<crate::types::ServiceJobType>,
    /// <p>The share identifier for the service job. This is used for fair-share scheduling.</p>
    pub share_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The Unix timestamp (in milliseconds) for when the service job was started.</p>
    pub started_at: ::std::option::Option<i64>,
    /// <p>The current status of the service job.</p>
    pub status: ::std::option::Option<crate::types::ServiceJobStatus>,
    /// <p>A short, human-readable string to provide more details for the current status of the service job.</p>
    pub status_reason: ::std::option::Option<::std::string::String>,
    /// <p>The Unix timestamp (in milliseconds) for when the service job stopped running.</p>
    pub stopped_at: ::std::option::Option<i64>,
    /// <p>The tags that are associated with the service job. Each tag consists of a key and an optional value. For more information, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/using-tags.html">Tagging your Batch resources</a>.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The timeout configuration for the service job.</p>
    pub timeout_config: ::std::option::Option<crate::types::ServiceJobTimeout>,
    _request_id: Option<String>,
}
impl DescribeServiceJobOutput {
    /// <p>A list of job attempts associated with the service job.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.attempts.is_none()`.
    pub fn attempts(&self) -> &[crate::types::ServiceJobAttemptDetail] {
        self.attempts.as_deref().unwrap_or_default()
    }
    /// <p>The Unix timestamp (in milliseconds) for when the service job was created.</p>
    pub fn created_at(&self) -> ::std::option::Option<i64> {
        self.created_at
    }
    /// <p>Indicates whether the service job has been terminated.</p>
    pub fn is_terminated(&self) -> ::std::option::Option<bool> {
        self.is_terminated
    }
    /// <p>The Amazon Resource Name (ARN) of the service job.</p>
    pub fn job_arn(&self) -> ::std::option::Option<&str> {
        self.job_arn.as_deref()
    }
    /// <p>The job ID for the service job.</p>
    pub fn job_id(&self) -> ::std::option::Option<&str> {
        self.job_id.as_deref()
    }
    /// <p>The name of the service job.</p>
    pub fn job_name(&self) -> ::std::option::Option<&str> {
        self.job_name.as_deref()
    }
    /// <p>The ARN of the job queue that the service job is associated with.</p>
    pub fn job_queue(&self) -> ::std::option::Option<&str> {
        self.job_queue.as_deref()
    }
    /// <p>The latest attempt associated with the service job.</p>
    pub fn latest_attempt(&self) -> ::std::option::Option<&crate::types::LatestServiceJobAttempt> {
        self.latest_attempt.as_ref()
    }
    /// <p>The retry strategy to use for failed service jobs that are submitted with this service job.</p>
    pub fn retry_strategy(&self) -> ::std::option::Option<&crate::types::ServiceJobRetryStrategy> {
        self.retry_strategy.as_ref()
    }
    /// <p>The scheduling priority of the service job.</p>
    pub fn scheduling_priority(&self) -> ::std::option::Option<i32> {
        self.scheduling_priority
    }
    /// <p>The request, in JSON, for the service that the <code>SubmitServiceJob</code> operation is queueing.</p>
    pub fn service_request_payload(&self) -> ::std::option::Option<&str> {
        self.service_request_payload.as_deref()
    }
    /// <p>The type of service job. For SageMaker Training jobs, this value is <code>SAGEMAKER_TRAINING</code>.</p>
    pub fn service_job_type(&self) -> ::std::option::Option<&crate::types::ServiceJobType> {
        self.service_job_type.as_ref()
    }
    /// <p>The share identifier for the service job. This is used for fair-share scheduling.</p>
    pub fn share_identifier(&self) -> ::std::option::Option<&str> {
        self.share_identifier.as_deref()
    }
    /// <p>The Unix timestamp (in milliseconds) for when the service job was started.</p>
    pub fn started_at(&self) -> ::std::option::Option<i64> {
        self.started_at
    }
    /// <p>The current status of the service job.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::ServiceJobStatus> {
        self.status.as_ref()
    }
    /// <p>A short, human-readable string to provide more details for the current status of the service job.</p>
    pub fn status_reason(&self) -> ::std::option::Option<&str> {
        self.status_reason.as_deref()
    }
    /// <p>The Unix timestamp (in milliseconds) for when the service job stopped running.</p>
    pub fn stopped_at(&self) -> ::std::option::Option<i64> {
        self.stopped_at
    }
    /// <p>The tags that are associated with the service job. Each tag consists of a key and an optional value. For more information, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/using-tags.html">Tagging your Batch resources</a>.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
    /// <p>The timeout configuration for the service job.</p>
    pub fn timeout_config(&self) -> ::std::option::Option<&crate::types::ServiceJobTimeout> {
        self.timeout_config.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for DescribeServiceJobOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeServiceJobOutput {
    /// Creates a new builder-style object to manufacture [`DescribeServiceJobOutput`](crate::operation::describe_service_job::DescribeServiceJobOutput).
    pub fn builder() -> crate::operation::describe_service_job::builders::DescribeServiceJobOutputBuilder {
        crate::operation::describe_service_job::builders::DescribeServiceJobOutputBuilder::default()
    }
}

/// A builder for [`DescribeServiceJobOutput`](crate::operation::describe_service_job::DescribeServiceJobOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DescribeServiceJobOutputBuilder {
    pub(crate) attempts: ::std::option::Option<::std::vec::Vec<crate::types::ServiceJobAttemptDetail>>,
    pub(crate) created_at: ::std::option::Option<i64>,
    pub(crate) is_terminated: ::std::option::Option<bool>,
    pub(crate) job_arn: ::std::option::Option<::std::string::String>,
    pub(crate) job_id: ::std::option::Option<::std::string::String>,
    pub(crate) job_name: ::std::option::Option<::std::string::String>,
    pub(crate) job_queue: ::std::option::Option<::std::string::String>,
    pub(crate) latest_attempt: ::std::option::Option<crate::types::LatestServiceJobAttempt>,
    pub(crate) retry_strategy: ::std::option::Option<crate::types::ServiceJobRetryStrategy>,
    pub(crate) scheduling_priority: ::std::option::Option<i32>,
    pub(crate) service_request_payload: ::std::option::Option<::std::string::String>,
    pub(crate) service_job_type: ::std::option::Option<crate::types::ServiceJobType>,
    pub(crate) share_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) started_at: ::std::option::Option<i64>,
    pub(crate) status: ::std::option::Option<crate::types::ServiceJobStatus>,
    pub(crate) status_reason: ::std::option::Option<::std::string::String>,
    pub(crate) stopped_at: ::std::option::Option<i64>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) timeout_config: ::std::option::Option<crate::types::ServiceJobTimeout>,
    _request_id: Option<String>,
}
impl DescribeServiceJobOutputBuilder {
    /// Appends an item to `attempts`.
    ///
    /// To override the contents of this collection use [`set_attempts`](Self::set_attempts).
    ///
    /// <p>A list of job attempts associated with the service job.</p>
    pub fn attempts(mut self, input: crate::types::ServiceJobAttemptDetail) -> Self {
        let mut v = self.attempts.unwrap_or_default();
        v.push(input);
        self.attempts = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of job attempts associated with the service job.</p>
    pub fn set_attempts(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ServiceJobAttemptDetail>>) -> Self {
        self.attempts = input;
        self
    }
    /// <p>A list of job attempts associated with the service job.</p>
    pub fn get_attempts(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ServiceJobAttemptDetail>> {
        &self.attempts
    }
    /// <p>The Unix timestamp (in milliseconds) for when the service job was created.</p>
    pub fn created_at(mut self, input: i64) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Unix timestamp (in milliseconds) for when the service job was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<i64>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The Unix timestamp (in milliseconds) for when the service job was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<i64> {
        &self.created_at
    }
    /// <p>Indicates whether the service job has been terminated.</p>
    pub fn is_terminated(mut self, input: bool) -> Self {
        self.is_terminated = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether the service job has been terminated.</p>
    pub fn set_is_terminated(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_terminated = input;
        self
    }
    /// <p>Indicates whether the service job has been terminated.</p>
    pub fn get_is_terminated(&self) -> &::std::option::Option<bool> {
        &self.is_terminated
    }
    /// <p>The Amazon Resource Name (ARN) of the service job.</p>
    pub fn job_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.job_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the service job.</p>
    pub fn set_job_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.job_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the service job.</p>
    pub fn get_job_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.job_arn
    }
    /// <p>The job ID for the service job.</p>
    /// This field is required.
    pub fn job_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.job_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The job ID for the service job.</p>
    pub fn set_job_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.job_id = input;
        self
    }
    /// <p>The job ID for the service job.</p>
    pub fn get_job_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.job_id
    }
    /// <p>The name of the service job.</p>
    /// This field is required.
    pub fn job_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.job_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the service job.</p>
    pub fn set_job_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.job_name = input;
        self
    }
    /// <p>The name of the service job.</p>
    pub fn get_job_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.job_name
    }
    /// <p>The ARN of the job queue that the service job is associated with.</p>
    /// This field is required.
    pub fn job_queue(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.job_queue = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the job queue that the service job is associated with.</p>
    pub fn set_job_queue(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.job_queue = input;
        self
    }
    /// <p>The ARN of the job queue that the service job is associated with.</p>
    pub fn get_job_queue(&self) -> &::std::option::Option<::std::string::String> {
        &self.job_queue
    }
    /// <p>The latest attempt associated with the service job.</p>
    pub fn latest_attempt(mut self, input: crate::types::LatestServiceJobAttempt) -> Self {
        self.latest_attempt = ::std::option::Option::Some(input);
        self
    }
    /// <p>The latest attempt associated with the service job.</p>
    pub fn set_latest_attempt(mut self, input: ::std::option::Option<crate::types::LatestServiceJobAttempt>) -> Self {
        self.latest_attempt = input;
        self
    }
    /// <p>The latest attempt associated with the service job.</p>
    pub fn get_latest_attempt(&self) -> &::std::option::Option<crate::types::LatestServiceJobAttempt> {
        &self.latest_attempt
    }
    /// <p>The retry strategy to use for failed service jobs that are submitted with this service job.</p>
    pub fn retry_strategy(mut self, input: crate::types::ServiceJobRetryStrategy) -> Self {
        self.retry_strategy = ::std::option::Option::Some(input);
        self
    }
    /// <p>The retry strategy to use for failed service jobs that are submitted with this service job.</p>
    pub fn set_retry_strategy(mut self, input: ::std::option::Option<crate::types::ServiceJobRetryStrategy>) -> Self {
        self.retry_strategy = input;
        self
    }
    /// <p>The retry strategy to use for failed service jobs that are submitted with this service job.</p>
    pub fn get_retry_strategy(&self) -> &::std::option::Option<crate::types::ServiceJobRetryStrategy> {
        &self.retry_strategy
    }
    /// <p>The scheduling priority of the service job.</p>
    pub fn scheduling_priority(mut self, input: i32) -> Self {
        self.scheduling_priority = ::std::option::Option::Some(input);
        self
    }
    /// <p>The scheduling priority of the service job.</p>
    pub fn set_scheduling_priority(mut self, input: ::std::option::Option<i32>) -> Self {
        self.scheduling_priority = input;
        self
    }
    /// <p>The scheduling priority of the service job.</p>
    pub fn get_scheduling_priority(&self) -> &::std::option::Option<i32> {
        &self.scheduling_priority
    }
    /// <p>The request, in JSON, for the service that the <code>SubmitServiceJob</code> operation is queueing.</p>
    pub fn service_request_payload(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.service_request_payload = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The request, in JSON, for the service that the <code>SubmitServiceJob</code> operation is queueing.</p>
    pub fn set_service_request_payload(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.service_request_payload = input;
        self
    }
    /// <p>The request, in JSON, for the service that the <code>SubmitServiceJob</code> operation is queueing.</p>
    pub fn get_service_request_payload(&self) -> &::std::option::Option<::std::string::String> {
        &self.service_request_payload
    }
    /// <p>The type of service job. For SageMaker Training jobs, this value is <code>SAGEMAKER_TRAINING</code>.</p>
    /// This field is required.
    pub fn service_job_type(mut self, input: crate::types::ServiceJobType) -> Self {
        self.service_job_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of service job. For SageMaker Training jobs, this value is <code>SAGEMAKER_TRAINING</code>.</p>
    pub fn set_service_job_type(mut self, input: ::std::option::Option<crate::types::ServiceJobType>) -> Self {
        self.service_job_type = input;
        self
    }
    /// <p>The type of service job. For SageMaker Training jobs, this value is <code>SAGEMAKER_TRAINING</code>.</p>
    pub fn get_service_job_type(&self) -> &::std::option::Option<crate::types::ServiceJobType> {
        &self.service_job_type
    }
    /// <p>The share identifier for the service job. This is used for fair-share scheduling.</p>
    pub fn share_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.share_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The share identifier for the service job. This is used for fair-share scheduling.</p>
    pub fn set_share_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.share_identifier = input;
        self
    }
    /// <p>The share identifier for the service job. This is used for fair-share scheduling.</p>
    pub fn get_share_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.share_identifier
    }
    /// <p>The Unix timestamp (in milliseconds) for when the service job was started.</p>
    /// This field is required.
    pub fn started_at(mut self, input: i64) -> Self {
        self.started_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Unix timestamp (in milliseconds) for when the service job was started.</p>
    pub fn set_started_at(mut self, input: ::std::option::Option<i64>) -> Self {
        self.started_at = input;
        self
    }
    /// <p>The Unix timestamp (in milliseconds) for when the service job was started.</p>
    pub fn get_started_at(&self) -> &::std::option::Option<i64> {
        &self.started_at
    }
    /// <p>The current status of the service job.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::ServiceJobStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the service job.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ServiceJobStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status of the service job.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ServiceJobStatus> {
        &self.status
    }
    /// <p>A short, human-readable string to provide more details for the current status of the service job.</p>
    pub fn status_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A short, human-readable string to provide more details for the current status of the service job.</p>
    pub fn set_status_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_reason = input;
        self
    }
    /// <p>A short, human-readable string to provide more details for the current status of the service job.</p>
    pub fn get_status_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_reason
    }
    /// <p>The Unix timestamp (in milliseconds) for when the service job stopped running.</p>
    pub fn stopped_at(mut self, input: i64) -> Self {
        self.stopped_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Unix timestamp (in milliseconds) for when the service job stopped running.</p>
    pub fn set_stopped_at(mut self, input: ::std::option::Option<i64>) -> Self {
        self.stopped_at = input;
        self
    }
    /// <p>The Unix timestamp (in milliseconds) for when the service job stopped running.</p>
    pub fn get_stopped_at(&self) -> &::std::option::Option<i64> {
        &self.stopped_at
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags that are associated with the service job. Each tag consists of a key and an optional value. For more information, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/using-tags.html">Tagging your Batch resources</a>.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The tags that are associated with the service job. Each tag consists of a key and an optional value. For more information, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/using-tags.html">Tagging your Batch resources</a>.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags that are associated with the service job. Each tag consists of a key and an optional value. For more information, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/using-tags.html">Tagging your Batch resources</a>.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// <p>The timeout configuration for the service job.</p>
    pub fn timeout_config(mut self, input: crate::types::ServiceJobTimeout) -> Self {
        self.timeout_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timeout configuration for the service job.</p>
    pub fn set_timeout_config(mut self, input: ::std::option::Option<crate::types::ServiceJobTimeout>) -> Self {
        self.timeout_config = input;
        self
    }
    /// <p>The timeout configuration for the service job.</p>
    pub fn get_timeout_config(&self) -> &::std::option::Option<crate::types::ServiceJobTimeout> {
        &self.timeout_config
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeServiceJobOutput`](crate::operation::describe_service_job::DescribeServiceJobOutput).
    pub fn build(self) -> crate::operation::describe_service_job::DescribeServiceJobOutput {
        crate::operation::describe_service_job::DescribeServiceJobOutput {
            attempts: self.attempts,
            created_at: self.created_at,
            is_terminated: self.is_terminated,
            job_arn: self.job_arn,
            job_id: self.job_id,
            job_name: self.job_name,
            job_queue: self.job_queue,
            latest_attempt: self.latest_attempt,
            retry_strategy: self.retry_strategy,
            scheduling_priority: self.scheduling_priority,
            service_request_payload: self.service_request_payload,
            service_job_type: self.service_job_type,
            share_identifier: self.share_identifier,
            started_at: self.started_at,
            status: self.status,
            status_reason: self.status_reason,
            stopped_at: self.stopped_at,
            tags: self.tags,
            timeout_config: self.timeout_config,
            _request_id: self._request_id,
        }
    }
}
