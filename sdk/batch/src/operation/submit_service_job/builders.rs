// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::submit_service_job::_submit_service_job_output::SubmitServiceJobOutputBuilder;

pub use crate::operation::submit_service_job::_submit_service_job_input::SubmitServiceJobInputBuilder;

impl crate::operation::submit_service_job::builders::SubmitServiceJobInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::submit_service_job::SubmitServiceJobOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::submit_service_job::SubmitServiceJobError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.submit_service_job();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `SubmitServiceJob`.
///
/// <p>Submits a service job to a specified job queue to run on SageMaker AI. A service job is a unit of work that you submit to Batch for execution on SageMaker AI.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct SubmitServiceJobFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::submit_service_job::builders::SubmitServiceJobInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::submit_service_job::SubmitServiceJobOutput,
        crate::operation::submit_service_job::SubmitServiceJobError,
    > for SubmitServiceJobFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::submit_service_job::SubmitServiceJobOutput,
            crate::operation::submit_service_job::SubmitServiceJobError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl SubmitServiceJobFluentBuilder {
    /// Creates a new `SubmitServiceJobFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the SubmitServiceJob as a reference.
    pub fn as_input(&self) -> &crate::operation::submit_service_job::builders::SubmitServiceJobInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::submit_service_job::SubmitServiceJobOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::submit_service_job::SubmitServiceJobError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::submit_service_job::SubmitServiceJob::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::submit_service_job::SubmitServiceJob::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::submit_service_job::SubmitServiceJobOutput,
        crate::operation::submit_service_job::SubmitServiceJobError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The name of the service job. It can be up to 128 characters long. It can contain uppercase and lowercase letters, numbers, hyphens (-), and underscores (_).</p>
    pub fn job_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.job_name(input.into());
        self
    }
    /// <p>The name of the service job. It can be up to 128 characters long. It can contain uppercase and lowercase letters, numbers, hyphens (-), and underscores (_).</p>
    pub fn set_job_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_job_name(input);
        self
    }
    /// <p>The name of the service job. It can be up to 128 characters long. It can contain uppercase and lowercase letters, numbers, hyphens (-), and underscores (_).</p>
    pub fn get_job_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_job_name()
    }
    /// <p>The job queue into which the service job is submitted. You can specify either the name or the ARN of the queue. The job queue must have the type <code>SAGEMAKER_TRAINING</code>.</p>
    pub fn job_queue(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.job_queue(input.into());
        self
    }
    /// <p>The job queue into which the service job is submitted. You can specify either the name or the ARN of the queue. The job queue must have the type <code>SAGEMAKER_TRAINING</code>.</p>
    pub fn set_job_queue(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_job_queue(input);
        self
    }
    /// <p>The job queue into which the service job is submitted. You can specify either the name or the ARN of the queue. The job queue must have the type <code>SAGEMAKER_TRAINING</code>.</p>
    pub fn get_job_queue(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_job_queue()
    }
    /// <p>The retry strategy to use for failed service jobs that are submitted with this service job request.</p>
    pub fn retry_strategy(mut self, input: crate::types::ServiceJobRetryStrategy) -> Self {
        self.inner = self.inner.retry_strategy(input);
        self
    }
    /// <p>The retry strategy to use for failed service jobs that are submitted with this service job request.</p>
    pub fn set_retry_strategy(mut self, input: ::std::option::Option<crate::types::ServiceJobRetryStrategy>) -> Self {
        self.inner = self.inner.set_retry_strategy(input);
        self
    }
    /// <p>The retry strategy to use for failed service jobs that are submitted with this service job request.</p>
    pub fn get_retry_strategy(&self) -> &::std::option::Option<crate::types::ServiceJobRetryStrategy> {
        self.inner.get_retry_strategy()
    }
    /// <p>The scheduling priority of the service job. Valid values are integers between 0 and 9999.</p>
    pub fn scheduling_priority(mut self, input: i32) -> Self {
        self.inner = self.inner.scheduling_priority(input);
        self
    }
    /// <p>The scheduling priority of the service job. Valid values are integers between 0 and 9999.</p>
    pub fn set_scheduling_priority(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_scheduling_priority(input);
        self
    }
    /// <p>The scheduling priority of the service job. Valid values are integers between 0 and 9999.</p>
    pub fn get_scheduling_priority(&self) -> &::std::option::Option<i32> {
        self.inner.get_scheduling_priority()
    }
    /// <p>The request, in JSON, for the service that the SubmitServiceJob operation is queueing.</p>
    pub fn service_request_payload(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.service_request_payload(input.into());
        self
    }
    /// <p>The request, in JSON, for the service that the SubmitServiceJob operation is queueing.</p>
    pub fn set_service_request_payload(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_service_request_payload(input);
        self
    }
    /// <p>The request, in JSON, for the service that the SubmitServiceJob operation is queueing.</p>
    pub fn get_service_request_payload(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_service_request_payload()
    }
    /// <p>The type of service job. For SageMaker Training jobs, specify <code>SAGEMAKER_TRAINING</code>.</p>
    pub fn service_job_type(mut self, input: crate::types::ServiceJobType) -> Self {
        self.inner = self.inner.service_job_type(input);
        self
    }
    /// <p>The type of service job. For SageMaker Training jobs, specify <code>SAGEMAKER_TRAINING</code>.</p>
    pub fn set_service_job_type(mut self, input: ::std::option::Option<crate::types::ServiceJobType>) -> Self {
        self.inner = self.inner.set_service_job_type(input);
        self
    }
    /// <p>The type of service job. For SageMaker Training jobs, specify <code>SAGEMAKER_TRAINING</code>.</p>
    pub fn get_service_job_type(&self) -> &::std::option::Option<crate::types::ServiceJobType> {
        self.inner.get_service_job_type()
    }
    /// <p>The share identifier for the service job. Don't specify this parameter if the job queue doesn't have a fair- share scheduling policy. If the job queue has a fair-share scheduling policy, then this parameter must be specified.</p>
    pub fn share_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.share_identifier(input.into());
        self
    }
    /// <p>The share identifier for the service job. Don't specify this parameter if the job queue doesn't have a fair- share scheduling policy. If the job queue has a fair-share scheduling policy, then this parameter must be specified.</p>
    pub fn set_share_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_share_identifier(input);
        self
    }
    /// <p>The share identifier for the service job. Don't specify this parameter if the job queue doesn't have a fair- share scheduling policy. If the job queue has a fair-share scheduling policy, then this parameter must be specified.</p>
    pub fn get_share_identifier(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_share_identifier()
    }
    /// <p>The timeout configuration for the service job. If none is specified, Batch defers to the default timeout of the underlying service handling the job.</p>
    pub fn timeout_config(mut self, input: crate::types::ServiceJobTimeout) -> Self {
        self.inner = self.inner.timeout_config(input);
        self
    }
    /// <p>The timeout configuration for the service job. If none is specified, Batch defers to the default timeout of the underlying service handling the job.</p>
    pub fn set_timeout_config(mut self, input: ::std::option::Option<crate::types::ServiceJobTimeout>) -> Self {
        self.inner = self.inner.set_timeout_config(input);
        self
    }
    /// <p>The timeout configuration for the service job. If none is specified, Batch defers to the default timeout of the underlying service handling the job.</p>
    pub fn get_timeout_config(&self) -> &::std::option::Option<crate::types::ServiceJobTimeout> {
        self.inner.get_timeout_config()
    }
    ///
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags that you apply to the service job request. Each tag consists of a key and an optional value. For more information, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/using-tags.html">Tagging your Batch resources</a>.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.tags(k.into(), v.into());
        self
    }
    /// <p>The tags that you apply to the service job request. Each tag consists of a key and an optional value. For more information, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/using-tags.html">Tagging your Batch resources</a>.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>The tags that you apply to the service job request. Each tag consists of a key and an optional value. For more information, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/using-tags.html">Tagging your Batch resources</a>.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.inner.get_tags()
    }
    /// <p>A unique identifier for the request. This token is used to ensure idempotency of requests. If this parameter is specified and two submit requests with identical payloads and <code>clientToken</code>s are received, these requests are considered the same request and the second request is rejected.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>A unique identifier for the request. This token is used to ensure idempotency of requests. If this parameter is specified and two submit requests with identical payloads and <code>clientToken</code>s are received, these requests are considered the same request and the second request is rejected.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
    /// <p>A unique identifier for the request. This token is used to ensure idempotency of requests. If this parameter is specified and two submit requests with identical payloads and <code>clientToken</code>s are received, these requests are considered the same request and the second request is rejected.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_client_token()
    }
}
